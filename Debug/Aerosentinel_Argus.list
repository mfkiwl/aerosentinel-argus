
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b93c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001390  0801bc10  0801bc10  0001cc10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cfa0  0801cfa0  0001dfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cfa8  0801cfa8  0001dfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801cfac  0801cfac  0001dfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000324  24000000  0801cfb0  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f64  24000324  0801d2d4  0001e324  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002288  0801d2d4  0001f288  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e324  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034040  00000000  00000000  0001e352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005234  00000000  00000000  00052392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002980  00000000  00000000  000575c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002085  00000000  00000000  00059f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000095cb  00000000  00000000  0005bfcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003663c  00000000  00000000  00065598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fd77  00000000  00000000  0009bbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021b94b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c8d4  00000000  00000000  0021b990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  00228264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000324 	.word	0x24000324
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801bbf4 	.word	0x0801bbf4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000328 	.word	0x24000328
 800030c:	0801bbf4 	.word	0x0801bbf4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f001 f9d2 	bl	8001e4e <null_ptr_check>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10d      	bne.n	8000ad2 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7a5b      	ldrb	r3, [r3, #9]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	72da      	strb	r2, [r3, #11]
 8000aca:	e002      	b.n	8000ad2 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2202      	movs	r2, #2
 8000ad0:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d118      	bne.n	8000b0c <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f8d4 	bl	8000c88 <bmi3_soft_reset>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10f      	bne.n	8000b0c <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 8000aec:	f107 010c 	add.w	r1, r7, #12
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2202      	movs	r2, #2
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f821 	bl	8000b3c <bmi3_get_regs>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 8000b06:	7b3a      	ldrb	r2, [r7, #12]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 8000b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10d      	bne.n	8000b30 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 8000b14:	7b7b      	ldrb	r3, [r7, #13]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d104      	bne.n	8000b28 <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000b24:	839a      	strh	r2, [r3, #28]
 8000b26:	e003      	b.n	8000b30 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b2e:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8000b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b0a7      	sub	sp, #156	@ 0x9c
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f001 f97a 	bl	8001e4e <null_ptr_check>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 8000b60:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d145      	bne.n	8000bf4 <bmi3_get_regs+0xb8>
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d042      	beq.n	8000bf4 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7a5b      	ldrb	r3, [r3, #9]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b7c:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691c      	ldr	r4, [r3, #16]
 8000b82:	89bb      	ldrh	r3, [r7, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	7ad2      	ldrb	r2, [r2, #11]
 8000b88:	4413      	add	r3, r2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f107 0114 	add.w	r1, r7, #20
 8000b94:	7bf8      	ldrb	r0, [r7, #15]
 8000b96:	47a0      	blx	r4
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6852      	ldr	r2, [r2, #4]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	2002      	movs	r0, #2
 8000bac:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d119      	bne.n	8000bec <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8000bb8:	e012      	b.n	8000be0 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8000bba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	7ad2      	ldrb	r2, [r2, #11]
 8000bc2:	441a      	add	r2, r3
 8000bc4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	440b      	add	r3, r1
 8000bcc:	3298      	adds	r2, #152	@ 0x98
 8000bce:	443a      	add	r2, r7
 8000bd0:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8000bd4:	701a      	strb	r2, [r3, #0]
                index++;
 8000bd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8000be0:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3e7      	bcc.n	8000bba <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000bea:	e006      	b.n	8000bfa <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 8000bec:	23fe      	movs	r3, #254	@ 0xfe
 8000bee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8000bf2:	e002      	b.n	8000bfa <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8000bfa:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	379c      	adds	r7, #156	@ 0x9c
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd90      	pop	{r4, r7, pc}

08000c06 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8000c06:	b590      	push	{r4, r7, lr}
 8000c08:	b087      	sub	sp, #28
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	4603      	mov	r3, r0
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	4613      	mov	r3, r2
 8000c16:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 f918 	bl	8001e4e <null_ptr_check>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8000c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d125      	bne.n	8000c76 <bmi3_set_regs+0x70>
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d022      	beq.n	8000c76 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7a5b      	ldrb	r3, [r3, #9]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c3e:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695c      	ldr	r4, [r3, #20]
 8000c44:	89ba      	ldrh	r2, [r7, #12]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	7bf8      	ldrb	r0, [r7, #15]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	47a0      	blx	r4
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6852      	ldr	r2, [r2, #4]
 8000c60:	4611      	mov	r1, r2
 8000c62:	2002      	movs	r0, #2
 8000c64:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 8000c70:	23fe      	movs	r3, #254	@ 0xfe
 8000c72:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8000c74:	e001      	b.n	8000c7a <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000c76:	23ff      	movs	r3, #255	@ 0xff
 8000c78:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd90      	pop	{r4, r7, pc}
	...

08000c88 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 8000c90:	2300      	movs	r3, #0
 8000c92:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 8000c94:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c98:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f001 f8cf 	bl	8001e4e <null_ptr_check>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 8000cb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d16f      	bne.n	8000d9c <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	f64d 60af 	movw	r0, #57007	@ 0xdeaf
 8000cc2:	f000 f873 	bl	8000dac <bmi3_set_command_register>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6852      	ldr	r2, [r2, #4]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cd8:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 8000cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <bmi3_soft_reset+0x74>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7a5b      	ldrb	r3, [r3, #9]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d108      	bne.n	8000cfc <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 8000cea:	f107 011c 	add.w	r1, r7, #28
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff22 	bl	8000b3c <bmi3_get_regs>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 8000cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d108      	bne.n	8000d16 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 8000d04:	f107 0118 	add.w	r1, r7, #24
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	2012      	movs	r0, #18
 8000d0e:	f7ff ff7a 	bl	8000c06 <bmi3_set_regs>
 8000d12:	4603      	mov	r3, r0
 8000d14:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8000d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d108      	bne.n	8000d30 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 8000d1e:	f107 010c 	add.w	r1, r7, #12
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2202      	movs	r2, #2
 8000d26:	2014      	movs	r0, #20
 8000d28:	f7ff ff6d 	bl	8000c06 <bmi3_set_regs>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8000d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d108      	bne.n	8000d4a <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 8000d38:	f107 0114 	add.w	r1, r7, #20
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	2040      	movs	r0, #64	@ 0x40
 8000d42:	f7ff ff60 	bl	8000c06 <bmi3_set_regs>
 8000d46:	4603      	mov	r3, r0
 8000d48:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8000d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d124      	bne.n	8000d9c <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8000d52:	e020      	b.n	8000d96 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6852      	ldr	r2, [r2, #4]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <bmi3_soft_reset+0x120>)
 8000d60:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 8000d62:	f107 0110 	add.w	r1, r7, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2011      	movs	r0, #17
 8000d6c:	f7ff fee6 	bl	8000b3c <bmi3_get_regs>
 8000d70:	4603      	mov	r3, r0
 8000d72:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 8000d74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d109      	bne.n	8000d90 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 8000d7c:	7c3b      	ldrb	r3, [r7, #16]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	77fb      	strb	r3, [r7, #31]

                        break;
 8000d8a:	e007      	b.n	8000d9c <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 8000d8c:	23f2      	movs	r3, #242	@ 0xf2
 8000d8e:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 8000d90:	7fbb      	ldrb	r3, [r7, #30]
 8000d92:	3301      	adds	r3, #1
 8000d94:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 8000d96:	7fbb      	ldrb	r3, [r7, #30]
 8000d98:	2b0a      	cmp	r3, #10
 8000d9a:	d9db      	bls.n	8000d54 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 8000d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	000186a0 	.word	0x000186a0

08000dac <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 8000db8:	2300      	movs	r3, #0
 8000dba:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 8000dcc:	f107 010c 	add.w	r1, r7, #12
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	207e      	movs	r0, #126	@ 0x7e
 8000dd6:	f7ff ff16 	bl	8000c06 <bmi3_set_regs>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	460b      	mov	r3, r1
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f001 f827 	bl	8001e4e <null_ptr_check>
 8000e00:	4603      	mov	r3, r0
 8000e02:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8000e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80f1 	bne.w	8000ff0 <bmi3_set_sensor_config+0x204>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80ed 	beq.w	8000ff0 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	75bb      	strb	r3, [r7, #22]
 8000e1a:	e0e3      	b.n	8000fe4 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 8000e1c:	7dbb      	ldrb	r3, [r7, #22]
 8000e1e:	222e      	movs	r2, #46	@ 0x2e
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b0c      	cmp	r3, #12
 8000e2c:	f200 80d4 	bhi.w	8000fd8 <bmi3_set_sensor_config+0x1ec>
 8000e30:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <bmi3_set_sensor_config+0x4c>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e6d 	.word	0x08000e6d
 8000e3c:	08000e89 	.word	0x08000e89
 8000e40:	08000edd 	.word	0x08000edd
 8000e44:	08000ea5 	.word	0x08000ea5
 8000e48:	08000ec1 	.word	0x08000ec1
 8000e4c:	08000f4d 	.word	0x08000f4d
 8000e50:	08000f15 	.word	0x08000f15
 8000e54:	08000f31 	.word	0x08000f31
 8000e58:	08000ef9 	.word	0x08000ef9
 8000e5c:	08000f69 	.word	0x08000f69
 8000e60:	08000f85 	.word	0x08000f85
 8000e64:	08000fa1 	.word	0x08000fa1
 8000e68:	08000fbd 	.word	0x08000fbd
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8000e6c:	7dbb      	ldrb	r3, [r7, #22]
 8000e6e:	222e      	movs	r2, #46	@ 0x2e
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fcf0 	bl	8001862 <set_accel_config>
 8000e82:	4603      	mov	r3, r0
 8000e84:	75fb      	strb	r3, [r7, #23]
                    break;
 8000e86:	e0aa      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8000e88:	7dbb      	ldrb	r3, [r7, #22]
 8000e8a:	222e      	movs	r2, #46	@ 0x2e
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	3302      	adds	r3, #2
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fe84 	bl	8001ba6 <set_gyro_config>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
                    break;
 8000ea2:	e09c      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8000ea4:	7dbb      	ldrb	r3, [r7, #22]
 8000ea6:	222e      	movs	r2, #46	@ 0x2e
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fb03 	bl	80024c0 <set_any_motion_config>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	75fb      	strb	r3, [r7, #23]
                    break;
 8000ebe:	e08e      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8000ec0:	7dbb      	ldrb	r3, [r7, #22]
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fc5f 	bl	8002794 <set_no_motion_config>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
                    break;
 8000eda:	e080      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8000edc:	7dbb      	ldrb	r3, [r7, #22]
 8000ede:	222e      	movs	r2, #46	@ 0x2e
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fead 	bl	8002c4c <set_sig_motion_config>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	75fb      	strb	r3, [r7, #23]
                    break;
 8000ef6:	e072      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8000ef8:	7dbb      	ldrb	r3, [r7, #22]
 8000efa:	222e      	movs	r2, #46	@ 0x2e
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	3302      	adds	r3, #2
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fd91 	bl	8002a30 <set_flat_config>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f12:	e064      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 8000f14:	7dbb      	ldrb	r3, [r7, #22]
 8000f16:	222e      	movs	r2, #46	@ 0x2e
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	3302      	adds	r3, #2
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 ffbb 	bl	8002ea0 <set_tilt_config>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f2e:	e056      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	222e      	movs	r2, #46	@ 0x2e
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f898 	bl	8003076 <set_orientation_config>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f4a:	e048      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	222e      	movs	r2, #46	@ 0x2e
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fb4b 	bl	80035f8 <set_step_config>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f66:	e03a      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8000f68:	7dbb      	ldrb	r3, [r7, #22]
 8000f6a:	222e      	movs	r2, #46	@ 0x2e
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	3302      	adds	r3, #2
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fe7d 	bl	8003c78 <set_tap_config>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f82:	e02c      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8000f84:	7dbb      	ldrb	r3, [r7, #22]
 8000f86:	222e      	movs	r2, #46	@ 0x2e
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	3302      	adds	r3, #2
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 ff71 	bl	8003e7c <set_alternate_accel_config>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	75fb      	strb	r3, [r7, #23]
                    break;
 8000f9e:	e01e      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	222e      	movs	r2, #46	@ 0x2e
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	3302      	adds	r3, #2
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 ffec 	bl	8003f8e <set_alternate_gyro_config>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	75fb      	strb	r3, [r7, #23]
                    break;
 8000fba:	e010      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	222e      	movs	r2, #46	@ 0x2e
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 f867 	bl	80040a0 <set_alternate_auto_config>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	75fb      	strb	r3, [r7, #23]
                    break;
 8000fd6:	e002      	b.n	8000fde <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8000fd8:	23fa      	movs	r3, #250	@ 0xfa
 8000fda:	75fb      	strb	r3, [r7, #23]
                    break;
 8000fdc:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 8000fde:	7dbb      	ldrb	r3, [r7, #22]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	75bb      	strb	r3, [r7, #22]
 8000fe4:	7dba      	ldrb	r2, [r7, #22]
 8000fe6:	7afb      	ldrb	r3, [r7, #11]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f4ff af17 	bcc.w	8000e1c <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8000fee:	e001      	b.n	8000ff4 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8000ff0:	23ff      	movs	r3, #255	@ 0xff
 8000ff2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	460b      	mov	r3, r1
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 ff1b 	bl	8001e4e <null_ptr_check>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800101c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f040 80f1 	bne.w	8001208 <bmi3_get_sensor_config+0x208>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80ed 	beq.w	8001208 <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 800102e:	2300      	movs	r3, #0
 8001030:	75bb      	strb	r3, [r7, #22]
 8001032:	e0e3      	b.n	80011fc <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	222e      	movs	r2, #46	@ 0x2e
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	f200 80d4 	bhi.w	80011f0 <bmi3_get_sensor_config+0x1f0>
 8001048:	a201      	add	r2, pc, #4	@ (adr r2, 8001050 <bmi3_get_sensor_config+0x50>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001085 	.word	0x08001085
 8001054:	080010a1 	.word	0x080010a1
 8001058:	080010f5 	.word	0x080010f5
 800105c:	080010bd 	.word	0x080010bd
 8001060:	080010d9 	.word	0x080010d9
 8001064:	08001165 	.word	0x08001165
 8001068:	0800112d 	.word	0x0800112d
 800106c:	08001149 	.word	0x08001149
 8001070:	08001111 	.word	0x08001111
 8001074:	08001181 	.word	0x08001181
 8001078:	0800119d 	.word	0x0800119d
 800107c:	080011b9 	.word	0x080011b9
 8001080:	080011d5 	.word	0x080011d5
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001084:	7dbb      	ldrb	r3, [r7, #22]
 8001086:	222e      	movs	r2, #46	@ 0x2e
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	3302      	adds	r3, #2
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fc9a 	bl	80019ce <get_accel_config>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
                    break;
 800109e:	e0aa      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	222e      	movs	r2, #46	@ 0x2e
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	3302      	adds	r3, #2
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fe80 	bl	8001db6 <get_gyro_config>
 80010b6:	4603      	mov	r3, r0
 80010b8:	75fb      	strb	r3, [r7, #23]
                    break;
 80010ba:	e09c      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 80010bc:	7dbb      	ldrb	r3, [r7, #22]
 80010be:	222e      	movs	r2, #46	@ 0x2e
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	3302      	adds	r3, #2
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f965 	bl	800239c <get_any_motion_config>
 80010d2:	4603      	mov	r3, r0
 80010d4:	75fb      	strb	r3, [r7, #23]
                    break;
 80010d6:	e08e      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	222e      	movs	r2, #46	@ 0x2e
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	3302      	adds	r3, #2
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fac1 	bl	8002670 <get_no_motion_config>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
                    break;
 80010f2:	e080      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80010f4:	7dbb      	ldrb	r3, [r7, #22]
 80010f6:	222e      	movs	r2, #46	@ 0x2e
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	3302      	adds	r3, #2
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fd17 	bl	8002b38 <get_sig_motion_config>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
                    break;
 800110e:	e072      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	222e      	movs	r2, #46	@ 0x2e
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	3302      	adds	r3, #2
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fc0d 	bl	8002940 <get_flat_config>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]
                    break;
 800112a:	e064      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	222e      	movs	r2, #46	@ 0x2e
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	3302      	adds	r3, #2
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fe41 	bl	8002dc4 <get_tilt_config>
 8001142:	4603      	mov	r3, r0
 8001144:	75fb      	strb	r3, [r7, #23]
                    break;
 8001146:	e056      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8001148:	7dbb      	ldrb	r3, [r7, #22]
 800114a:	222e      	movs	r2, #46	@ 0x2e
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	3302      	adds	r3, #2
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	f001 ff02 	bl	8002f62 <get_orientation_config>
 800115e:	4603      	mov	r3, r0
 8001160:	75fb      	strb	r3, [r7, #23]
                    break;
 8001162:	e048      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8001164:	7dbb      	ldrb	r3, [r7, #22]
 8001166:	222e      	movs	r2, #46	@ 0x2e
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	3302      	adds	r3, #2
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f002 f837 	bl	80031e8 <get_step_config>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
                    break;
 800117e:	e03a      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8001180:	7dbb      	ldrb	r3, [r7, #22]
 8001182:	222e      	movs	r2, #46	@ 0x2e
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	3302      	adds	r3, #2
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fcb3 	bl	8003afc <get_tap_config>
 8001196:	4603      	mov	r3, r0
 8001198:	75fb      	strb	r3, [r7, #23]
                    break;
 800119a:	e02c      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	222e      	movs	r2, #46	@ 0x2e
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	3302      	adds	r3, #2
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 feb2 	bl	8003f16 <get_alternate_accel_config>
 80011b2:	4603      	mov	r3, r0
 80011b4:	75fb      	strb	r3, [r7, #23]
                    break;
 80011b6:	e01e      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 80011b8:	7dbb      	ldrb	r3, [r7, #22]
 80011ba:	222e      	movs	r2, #46	@ 0x2e
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	3302      	adds	r3, #2
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 ff2d 	bl	8004028 <get_alternate_gyro_config>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
                    break;
 80011d2:	e010      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 80011d4:	7dbb      	ldrb	r3, [r7, #22]
 80011d6:	222e      	movs	r2, #46	@ 0x2e
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	3302      	adds	r3, #2
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 ffa5 	bl	8004134 <get_alternate_auto_config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
                    break;
 80011ee:	e002      	b.n	80011f6 <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 80011f0:	23fa      	movs	r3, #250	@ 0xfa
 80011f2:	75fb      	strb	r3, [r7, #23]
                    break;
 80011f4:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 80011f6:	7dbb      	ldrb	r3, [r7, #22]
 80011f8:	3301      	adds	r3, #1
 80011fa:	75bb      	strb	r3, [r7, #22]
 80011fc:	7dba      	ldrb	r2, [r7, #22]
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	429a      	cmp	r2, r3
 8001202:	f4ff af17 	bcc.w	8001034 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001206:	e001      	b.n	800120c <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001208:	23ff      	movs	r3, #255	@ 0xff
 800120a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800120c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <bmi3_map_interrupt>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi3_map_interrupt(struct bmi3_map_int map_int, struct bmi3_dev *dev)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b08f      	sub	sp, #60	@ 0x3c
 800121c:	af00      	add	r7, sp, #0
 800121e:	463c      	mov	r4, r7
 8001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store register data */
    uint8_t reg_data[4] = { 0 };
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
    uint16_t no_motion_out, any_motion_out, flat_out, orientation_out, step_detector_out, step_counter_out,
             sig_motion_out, tilt_out;
    uint16_t tap_out, i3c_out, err_status, temp, gyr, acc, fwm, ffull;

    /* Read interrupt map1 and map2 and register */
    rslt = bmi3_get_regs(BMI3_REG_INT_MAP1, reg_data, 4, dev);
 8001228:	f107 0110 	add.w	r1, r7, #16
 800122c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800122e:	2204      	movs	r2, #4
 8001230:	203a      	movs	r0, #58	@ 0x3a
 8001232:	f7ff fc83 	bl	8000b3c <bmi3_get_regs>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (rslt == BMI3_OK)
 800123c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 8132 	bne.w	80014aa <bmi3_map_interrupt+0x292>
    {
        no_motion_out =
            (BMI3_SET_BIT_POS0(reg_data[0], BMI3_NO_MOTION_OUT, map_int.no_motion_out) & BMI3_NO_MOTION_OUT_MASK);
 8001246:	7c3b      	ldrb	r3, [r7, #16]
 8001248:	b21b      	sxth	r3, r3
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	b21a      	sxth	r2, r3
 8001250:	783b      	ldrb	r3, [r7, #0]
 8001252:	b21b      	sxth	r3, r3
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
        no_motion_out =
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	86bb      	strh	r3, [r7, #52]	@ 0x34
        any_motion_out =
            (BMI3_SET_BITS(reg_data[0], BMI3_ANY_MOTION_OUT, map_int.any_motion_out) & BMI3_ANY_MOTION_OUT_MASK);
 8001266:	7c3b      	ldrb	r3, [r7, #16]
 8001268:	b21b      	sxth	r3, r3
 800126a:	f023 030c 	bic.w	r3, r3, #12
 800126e:	b21a      	sxth	r2, r3
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	b21b      	sxth	r3, r3
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	b29b      	uxth	r3, r3
        any_motion_out =
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	867b      	strh	r3, [r7, #50]	@ 0x32
        flat_out = (BMI3_SET_BITS(reg_data[0], BMI3_FLAT_OUT, map_int.flat_out) & BMI3_FLAT_OUT_MASK);
 8001288:	7c3b      	ldrb	r3, [r7, #16]
 800128a:	b21b      	sxth	r3, r3
 800128c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001290:	b21a      	sxth	r2, r3
 8001292:	78bb      	ldrb	r3, [r7, #2]
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	b21b      	sxth	r3, r3
 8001298:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012a8:	863b      	strh	r3, [r7, #48]	@ 0x30
        orientation_out =
            (BMI3_SET_BITS(reg_data[0], BMI3_ORIENTATION_OUT, map_int.orientation_out) & BMI3_ORIENTATION_OUT_MASK);
 80012aa:	7c3b      	ldrb	r3, [r7, #16]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	019b      	lsls	r3, r3, #6
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	b29b      	uxth	r3, r3
        orientation_out =
 80012c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80012c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        step_detector_out =
            (BMI3_SET_BITS(reg_data[1], BMI3_STEP_DETECTOR_OUT,
 80012ca:	7c7b      	ldrb	r3, [r7, #17]
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	793b      	ldrb	r3, [r7, #4]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21b      	sxth	r3, r3
                           map_int.step_detector_out) & BMI3_STEP_DETECTOR_OUT_MASK);
 80012de:	b29b      	uxth	r3, r3
        step_detector_out =
 80012e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        step_counter_out =
            (BMI3_SET_BITS(reg_data[1], BMI3_STEP_COUNTER_OUT, map_int.step_counter_out) & BMI3_STEP_COUNTER_OUT_MASK);
 80012e6:	7c7b      	ldrb	r3, [r7, #17]
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	b29b      	uxth	r3, r3
        step_counter_out =
 80012fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001300:	857b      	strh	r3, [r7, #42]	@ 0x2a
        sig_motion_out =
            (BMI3_SET_BITS(reg_data[1], BMI3_SIG_MOTION_OUT, map_int.sig_motion_out) & BMI3_SIG_MOTION_OUT_MASK);
 8001302:	7c7b      	ldrb	r3, [r7, #17]
 8001304:	b21a      	sxth	r2, r3
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	031b      	lsls	r3, r3, #12
 800130a:	b21b      	sxth	r3, r3
 800130c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	b29b      	uxth	r3, r3
        sig_motion_out =
 8001318:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800131c:	853b      	strh	r3, [r7, #40]	@ 0x28
        tilt_out = (BMI3_SET_BITS(reg_data[1], BMI3_TILT_OUT, map_int.tilt_out) & BMI3_TILT_OUT_MASK);
 800131e:	7c7b      	ldrb	r3, [r7, #17]
 8001320:	b21a      	sxth	r2, r3
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	039b      	lsls	r3, r3, #14
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b62      	ldr	r3, [pc, #392]	@ (80014b8 <bmi3_map_interrupt+0x2a0>)
 8001330:	4013      	ands	r3, r2
 8001332:	84fb      	strh	r3, [r7, #38]	@ 0x26

        reg_data[0] = (uint8_t)(no_motion_out | any_motion_out | flat_out | orientation_out);
 8001334:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001336:	b2da      	uxtb	r2, r3
 8001338:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b2da      	uxtb	r2, r3
 8001340:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b2da      	uxtb	r2, r3
 8001348:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b2db      	uxtb	r3, r3
 8001350:	743b      	strb	r3, [r7, #16]
        reg_data[1] = (uint8_t)((step_detector_out | step_counter_out | sig_motion_out | tilt_out) >> 8);
 8001352:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001354:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001356:	4313      	orrs	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800135c:	4313      	orrs	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001362:	4313      	orrs	r3, r2
 8001364:	b29b      	uxth	r3, r3
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	747b      	strb	r3, [r7, #17]

        tap_out = (BMI3_SET_BIT_POS0(reg_data[2], BMI3_TAP_OUT, map_int.tap_out) & BMI3_TAP_OUT_MASK);
 800136e:	7cbb      	ldrb	r3, [r7, #18]
 8001370:	b21b      	sxth	r3, r3
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	b21a      	sxth	r2, r3
 8001378:	7a3b      	ldrb	r3, [r7, #8]
 800137a:	b21b      	sxth	r3, r3
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        i3c_out = (BMI3_SET_BITS(reg_data[2], BMI3_I3C_OUT, map_int.i3c_out) & BMI3_I3C_OUT_MASK);
 800138e:	7cbb      	ldrb	r3, [r7, #18]
 8001390:	b21b      	sxth	r3, r3
 8001392:	f023 030c 	bic.w	r3, r3, #12
 8001396:	b21a      	sxth	r2, r3
 8001398:	7a7b      	ldrb	r3, [r7, #9]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	b21b      	sxth	r3, r3
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	847b      	strh	r3, [r7, #34]	@ 0x22
        err_status = (BMI3_SET_BITS(reg_data[2], BMI3_ERR_STATUS, map_int.err_status) & BMI3_ERR_STATUS_MASK);
 80013b0:	7cbb      	ldrb	r3, [r7, #18]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	b21b      	sxth	r3, r3
 80013c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013d0:	843b      	strh	r3, [r7, #32]
        temp = (BMI3_SET_BITS(reg_data[2], BMI3_TEMP_DRDY_INT, map_int.temp_drdy_int) & BMI3_TEMP_DRDY_INT_MASK);
 80013d2:	7cbb      	ldrb	r3, [r7, #18]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	019b      	lsls	r3, r3, #6
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80013f0:	83fb      	strh	r3, [r7, #30]
        gyr = (BMI3_SET_BITS(reg_data[3], BMI3_GYR_DRDY_INT, map_int.gyr_drdy_int) & BMI3_GYR_DRDY_INT_MASK);
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b21b      	sxth	r3, r3
 8001406:	b29b      	uxth	r3, r3
 8001408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800140c:	83bb      	strh	r3, [r7, #28]
        acc = (BMI3_SET_BITS(reg_data[3], BMI3_ACC_DRDY_INT, map_int.acc_drdy_int) & BMI3_ACC_DRDY_INT_MASK);
 800140e:	7cfb      	ldrb	r3, [r7, #19]
 8001410:	b21a      	sxth	r2, r3
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	029b      	lsls	r3, r3, #10
 8001416:	b21b      	sxth	r3, r3
 8001418:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001428:	837b      	strh	r3, [r7, #26]
        fwm =
            (BMI3_SET_BITS(reg_data[3], BMI3_FIFO_WATERMARK_INT,
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	b21a      	sxth	r2, r3
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	b21b      	sxth	r3, r3
 8001434:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21b      	sxth	r3, r3
                           map_int.fifo_watermark_int) & BMI3_FIFO_WATERMARK_INT_MASK);
 800143e:	b29b      	uxth	r3, r3
        fwm =
 8001440:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001444:	833b      	strh	r3, [r7, #24]
        ffull = (BMI3_SET_BITS(reg_data[3], BMI3_FIFO_FULL_INT, map_int.fifo_full_int) & BMI3_FIFO_FULL_INT_MASK);
 8001446:	7cfb      	ldrb	r3, [r7, #19]
 8001448:	b21a      	sxth	r2, r3
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	039b      	lsls	r3, r3, #14
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <bmi3_map_interrupt+0x2a0>)
 8001458:	4013      	ands	r3, r2
 800145a:	82fb      	strh	r3, [r7, #22]

        reg_data[2] = (uint8_t)(tap_out | i3c_out | err_status | temp);
 800145c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800145e:	b2da      	uxtb	r2, r3
 8001460:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	8c3b      	ldrh	r3, [r7, #32]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b2da      	uxtb	r2, r3
 8001470:	8bfb      	ldrh	r3, [r7, #30]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	74bb      	strb	r3, [r7, #18]
        reg_data[3] = (uint8_t)((gyr | acc | fwm | ffull) >> 8);
 800147a:	8bba      	ldrh	r2, [r7, #28]
 800147c:	8b7b      	ldrh	r3, [r7, #26]
 800147e:	4313      	orrs	r3, r2
 8001480:	b29a      	uxth	r2, r3
 8001482:	8b3b      	ldrh	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	b29a      	uxth	r2, r3
 8001488:	8afb      	ldrh	r3, [r7, #22]
 800148a:	4313      	orrs	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	b29b      	uxth	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	74fb      	strb	r3, [r7, #19]

        rslt = bmi3_set_regs(BMI3_REG_INT_MAP1, reg_data, 4, dev);
 8001496:	f107 0110 	add.w	r1, r7, #16
 800149a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800149c:	2204      	movs	r2, #4
 800149e:	203a      	movs	r0, #58	@ 0x3a
 80014a0:	f7ff fbb1 	bl	8000c06 <bmi3_set_regs>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 80014aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	373c      	adds	r7, #60	@ 0x3c
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	ffffc000 	.word	0xffffc000

080014bc <bmi3_select_sensor>:

/*!
 * @brief This API selects the sensors/features to be enabled or disabled.
 */
int8_t bmi3_select_sensor(struct bmi3_feature_enable *enable, struct bmi3_dev *dev)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if (enable != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d010      	beq.n	80014ee <bmi3_select_sensor+0x32>
    {
        rslt = set_feature_enable(enable, dev);
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fd7a 	bl	8001fc8 <set_feature_enable>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d108      	bne.n	80014f2 <bmi3_select_sensor+0x36>
        {
            rslt = get_feature_enable(enable, dev);
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fcd3 	bl	8001e8e <get_feature_enable>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e001      	b.n	80014f2 <bmi3_select_sensor+0x36>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80014ee:	23ff      	movs	r3, #255	@ 0xff
 80014f0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <bmi3_set_int_pin_config>:
 *        1) The output configuration of the selected interrupt pin:
 *           INT1 or INT2.
 *        2) The interrupt mode: permanently latched or non-latched.
 */
int8_t bmi3_set_int_pin_config(const struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[3] = { 0 };
 800150a:	4b65      	ldr	r3, [pc, #404]	@ (80016a0 <bmi3_set_int_pin_config+0x1a0>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	813b      	strh	r3, [r7, #8]
 8001510:	2300      	movs	r3, #0
 8001512:	72bb      	strb	r3, [r7, #10]

    /* Variable to store register data */
    uint16_t reg_data = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	82bb      	strh	r3, [r7, #20]

    /* Variable to define type of interrupt pin  */
    uint8_t int_pin = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	74fb      	strb	r3, [r7, #19]

    uint16_t lvl, od, output_en;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f000 fc96 	bl	8001e4e <null_ptr_check>
 8001522:	4603      	mov	r3, r0
 8001524:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (int_cfg != NULL))
 8001526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f040 80b0 	bne.w	8001690 <bmi3_set_int_pin_config+0x190>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80ac 	beq.w	8001690 <bmi3_set_int_pin_config+0x190>
    {
        /* Copy the pin type to a local variable */
        int_pin = int_cfg->pin_type;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	74fb      	strb	r3, [r7, #19]

        if ((int_pin > BMI3_INT_NONE) && (int_pin < BMI3_INT_PIN_MAX))
 800153e:	7cfb      	ldrb	r3, [r7, #19]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80a0 	beq.w	8001686 <bmi3_set_int_pin_config+0x186>
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	2b03      	cmp	r3, #3
 800154a:	f200 809c 	bhi.w	8001686 <bmi3_set_int_pin_config+0x186>
        {
            /* Get the previous configuration data */
            rslt = bmi3_get_regs(BMI3_REG_IO_INT_CTRL, data_array, 2, dev);
 800154e:	f107 0108 	add.w	r1, r7, #8
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2202      	movs	r2, #2
 8001556:	2038      	movs	r0, #56	@ 0x38
 8001558:	f7ff faf0 	bl	8000b3c <bmi3_get_regs>
 800155c:	4603      	mov	r3, r0
 800155e:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 8091 	bne.w	800168c <bmi3_set_int_pin_config+0x18c>
            {
                /* Set interrupt pin 1 configuration */
                if (int_pin == BMI3_INT1)
 800156a:	7cfb      	ldrb	r3, [r7, #19]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d138      	bne.n	80015e2 <bmi3_set_int_pin_config+0xe2>
                {
                    reg_data = data_array[0];
 8001570:	7a3b      	ldrb	r3, [r7, #8]
 8001572:	82bb      	strh	r3, [r7, #20]

                    /* Configure active low or high */
                    lvl = BMI3_SET_BIT_POS0(reg_data, BMI3_INT1_LVL, int_cfg->pin_cfg[0].lvl);
 8001574:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	789b      	ldrb	r3, [r3, #2]
 8001582:	b21b      	sxth	r3, r3
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	823b      	strh	r3, [r7, #16]

                    /* Configure push-pull or open drain */
                    od = BMI3_SET_BITS(reg_data, BMI3_INT1_OD, int_cfg->pin_cfg[0].od);
 8001590:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001594:	f023 0302 	bic.w	r3, r3, #2
 8001598:	b21a      	sxth	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	78db      	ldrb	r3, [r3, #3]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	81fb      	strh	r3, [r7, #14]

                    /* Configure output enable */
                    output_en = BMI3_SET_BITS(reg_data, BMI3_INT1_OUTPUT_EN, int_cfg->pin_cfg[0].output_en);
 80015ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	81bb      	strh	r3, [r7, #12]

                    /* Copy the data to be written in the respective array */
                    data_array[0] = (uint8_t)(lvl | od | output_en);
 80015cc:	8a3b      	ldrh	r3, [r7, #16]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	89bb      	ldrh	r3, [r7, #12]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	723b      	strb	r3, [r7, #8]
                }

                /* Set interrupt pin 2 configuration */
                if (int_pin == BMI3_INT2)
 80015e2:	7cfb      	ldrb	r3, [r7, #19]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d13a      	bne.n	800165e <bmi3_set_int_pin_config+0x15e>
                {
                    reg_data = ((uint16_t)data_array[1] << 8);
 80015e8:	7a7b      	ldrb	r3, [r7, #9]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	82bb      	strh	r3, [r7, #20]

                    /* Configure active low or high */
                    lvl = BMI3_SET_BITS(reg_data, BMI3_INT2_LVL, int_cfg->pin_cfg[1].lvl);
 80015ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	795b      	ldrb	r3, [r3, #5]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21b      	sxth	r3, r3
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21b      	sxth	r3, r3
 800160a:	823b      	strh	r3, [r7, #16]

                    /* Configure push-pull or open drain */
                    od = BMI3_SET_BITS(reg_data, BMI3_INT2_OD, int_cfg->pin_cfg[1].od);
 800160c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001614:	b21a      	sxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	799b      	ldrb	r3, [r3, #6]
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	b21b      	sxth	r3, r3
 800161e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	81fb      	strh	r3, [r7, #14]

                    /* Configure output enable */
                    output_en = BMI3_SET_BITS(reg_data, BMI3_INT2_OUTPUT_EN, int_cfg->pin_cfg[1].output_en);
 800162a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800162e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	79db      	ldrb	r3, [r3, #7]
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	b21b      	sxth	r3, r3
 800163c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	81bb      	strh	r3, [r7, #12]

                    /* Copy the data to be written in the respective array */
                    data_array[1] = (uint8_t)((lvl | od | output_en) >> 8);
 8001648:	8a3a      	ldrh	r2, [r7, #16]
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	4313      	orrs	r3, r2
 800164e:	b29a      	uxth	r2, r3
 8001650:	89bb      	ldrh	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	b29b      	uxth	r3, r3
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	727b      	strb	r3, [r7, #9]

                /* Set the configurations simultaneously as
                 * INT1_IO_CTRL, INT2_IO_CTRL, and INT_LATCH lie
                 * in consecutive addresses
                 */
                rslt = bmi3_set_regs(BMI3_REG_IO_INT_CTRL, data_array, 2, dev);
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	2038      	movs	r0, #56	@ 0x38
 8001668:	f7ff facd 	bl	8000c06 <bmi3_set_regs>
 800166c:	4603      	mov	r3, r0
 800166e:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI3_OK)
 8001670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d109      	bne.n	800168c <bmi3_set_int_pin_config+0x18c>
                {
                    rslt = set_latch_mode(int_cfg, dev);
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fe56 	bl	800232c <set_latch_mode>
 8001680:	4603      	mov	r3, r0
 8001682:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI3_OK)
 8001684:	e002      	b.n	800168c <bmi3_set_int_pin_config+0x18c>
                }
            }
        }
        else
        {
            rslt = BMI3_E_INVALID_INT_PIN;
 8001686:	23f9      	movs	r3, #249	@ 0xf9
 8001688:	75fb      	strb	r3, [r7, #23]
        if ((int_pin > BMI3_INT_NONE) && (int_pin < BMI3_INT_PIN_MAX))
 800168a:	e003      	b.n	8001694 <bmi3_set_int_pin_config+0x194>
            if (rslt == BMI3_OK)
 800168c:	bf00      	nop
        if ((int_pin > BMI3_INT_NONE) && (int_pin < BMI3_INT_PIN_MAX))
 800168e:	e001      	b.n	8001694 <bmi3_set_int_pin_config+0x194>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001690:	23ff      	movs	r3, #255	@ 0xff
 8001692:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	0801bc10 	.word	0x0801bc10

080016a4 <bmi3_get_int_pin_config>:
 *        1) The output configuration of the selected interrupt pin:
 *           INT1 or INT2.
 *        2) The interrupt mode: permanently latched or non-latched.
 */
int8_t bmi3_get_int_pin_config(struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[3] = { 0 };
 80016ae:	4b30      	ldr	r3, [pc, #192]	@ (8001770 <bmi3_get_int_pin_config+0xcc>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	813b      	strh	r3, [r7, #8]
 80016b4:	2300      	movs	r3, #0
 80016b6:	72bb      	strb	r3, [r7, #10]

    /* Variable to define type of interrupt pin  */
    uint8_t int_pin = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73bb      	strb	r3, [r7, #14]

    uint16_t reg_data;

    if (int_cfg != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d04d      	beq.n	800175e <bmi3_get_int_pin_config+0xba>
    {
        /* Copy the pin type to a local variable */
        int_pin = int_cfg->pin_type;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	73bb      	strb	r3, [r7, #14]

        /* Get the previous configuration data */
        rslt = bmi3_get_regs(BMI3_REG_IO_INT_CTRL, data_array, 3, dev);
 80016c8:	f107 0108 	add.w	r1, r7, #8
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2203      	movs	r2, #3
 80016d0:	2038      	movs	r0, #56	@ 0x38
 80016d2:	f7ff fa33 	bl	8000b3c <bmi3_get_regs>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d13f      	bne.n	8001762 <bmi3_get_int_pin_config+0xbe>
        {
            /* Get interrupt pin 1 configuration */
            if (int_pin == BMI3_INT1)
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d115      	bne.n	8001714 <bmi3_get_int_pin_config+0x70>
            {
                /* Get active low or high */
                int_cfg->pin_cfg[0].lvl = BMI3_GET_BIT_POS0(data_array[0], BMI3_INT1_LVL);
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	709a      	strb	r2, [r3, #2]

                /* Get push-pull or open drain */
                int_cfg->pin_cfg[0].od = BMI3_GET_BITS(data_array[0], BMI3_INT1_OD);
 80016f4:	7a3b      	ldrb	r3, [r7, #8]
 80016f6:	105b      	asrs	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	70da      	strb	r2, [r3, #3]

                /* Get output enable */
                int_cfg->pin_cfg[0].output_en = BMI3_GET_BITS(data_array[0], BMI3_INT1_OUTPUT_EN);
 8001704:	7a3b      	ldrb	r3, [r7, #8]
 8001706:	109b      	asrs	r3, r3, #2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	b2da      	uxtb	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	711a      	strb	r2, [r3, #4]
            }

            /* Get interrupt pin 2 configuration */
            if (int_pin == BMI3_INT2)
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d11a      	bne.n	8001750 <bmi3_get_int_pin_config+0xac>
            {
                reg_data = ((uint16_t)data_array[1] << 8);
 800171a:	7a7b      	ldrb	r3, [r7, #9]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	81bb      	strh	r3, [r7, #12]

                /* Get active low or high */
                int_cfg->pin_cfg[1].lvl = BMI3_GET_BITS(reg_data, BMI3_INT2_LVL);
 8001720:	89bb      	ldrh	r3, [r7, #12]
 8001722:	121b      	asrs	r3, r3, #8
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	715a      	strb	r2, [r3, #5]

                /* Get push-pull or open drain */
                int_cfg->pin_cfg[1].od = BMI3_GET_BITS(reg_data, BMI3_INT2_OD);
 8001730:	89bb      	ldrh	r3, [r7, #12]
 8001732:	125b      	asrs	r3, r3, #9
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	719a      	strb	r2, [r3, #6]

                /* Get output enable */
                int_cfg->pin_cfg[1].output_en = BMI3_GET_BITS(reg_data, BMI3_INT2_OUTPUT_EN);
 8001740:	89bb      	ldrh	r3, [r7, #12]
 8001742:	129b      	asrs	r3, r3, #10
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	71da      	strb	r2, [r3, #7]
            }

            rslt = get_latch_mode(int_cfg, dev);
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fdc4 	bl	80022e0 <get_latch_mode>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <bmi3_get_int_pin_config+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800175e:	23ff      	movs	r3, #255	@ 0xff
 8001760:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	0801bc10 	.word	0x0801bc10

08001774 <bmi3_set_fifo_wm>:

/*!
 * @brief This API sets the FIFO water-mark level in words.
 */
int8_t bmi3_set_fifo_wm(uint16_t fifo_wm, struct bmi3_dev *dev)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data[2] = { 0 };
 8001780:	2300      	movs	r3, #0
 8001782:	813b      	strh	r3, [r7, #8]

    uint16_t fifo_watermark = fifo_wm & BMI3_FIFO_WATERMARK_MASK;
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800178a:	81fb      	strh	r3, [r7, #14]

    /* Get LSB value of FIFO water-mark */
    data[0] = BMI3_GET_LSB(fifo_watermark);
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	723b      	strb	r3, [r7, #8]

    /* Get MSB value of FIFO water-mark */
    data[1] = BMI3_GET_MSB(fifo_watermark);
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	b29b      	uxth	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	727b      	strb	r3, [r7, #9]

    /* Set the FIFO water-mark level */
    rslt = bmi3_set_regs(BMI3_REG_FIFO_WATERMARK, data, BMI3_LENGTH_FIFO_WM, dev);
 800179c:	f107 0108 	add.w	r1, r7, #8
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2202      	movs	r2, #2
 80017a4:	2035      	movs	r0, #53	@ 0x35
 80017a6:	f7ff fa2e 	bl	8000c06 <bmi3_set_regs>
 80017aa:	4603      	mov	r3, r0
 80017ac:	737b      	strb	r3, [r7, #13]

    return rslt;
 80017ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <bmi3_set_fifo_config>:

/*!
 * @brief This API sets the FIFO configuration in the sensor.
 */
int8_t bmi3_set_fifo_config(uint16_t config, uint8_t enable, struct bmi3_dev *dev)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	603a      	str	r2, [r7, #0]
 80017c4:	80fb      	strh	r3, [r7, #6]
 80017c6:	460b      	mov	r3, r1
 80017c8:	717b      	strb	r3, [r7, #5]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store fifo config data */
    uint8_t data[2] = { 0 };
 80017ca:	2300      	movs	r3, #0
 80017cc:	813b      	strh	r3, [r7, #8]

    /* Variable to store data of FIFO configuration register */
    uint16_t fifo_config = config & BMI3_FIFO_CONFIG_MASK;
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80017d4:	051b      	lsls	r3, r3, #20
 80017d6:	0d1b      	lsrs	r3, r3, #20
 80017d8:	81bb      	strh	r3, [r7, #12]

    rslt = bmi3_get_regs(BMI3_REG_FIFO_CONF, data, 2, dev);
 80017da:	f107 0108 	add.w	r1, r7, #8
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2202      	movs	r2, #2
 80017e2:	2036      	movs	r0, #54	@ 0x36
 80017e4:	f7ff f9aa 	bl	8000b3c <bmi3_get_regs>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 80017ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d130      	bne.n	8001856 <bmi3_set_fifo_config+0x9c>
    {
        if (enable == BMI3_ENABLE)
 80017f4:	797b      	ldrb	r3, [r7, #5]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10e      	bne.n	8001818 <bmi3_set_fifo_config+0x5e>
        {
            data[0] = data[0] | (uint8_t)fifo_config;
 80017fa:	7a3a      	ldrb	r2, [r7, #8]
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	723b      	strb	r3, [r7, #8]
            data[1] = data[1] | (uint8_t)(fifo_config >> 8);
 8001806:	7a7a      	ldrb	r2, [r7, #9]
 8001808:	89bb      	ldrh	r3, [r7, #12]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b29b      	uxth	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	727b      	strb	r3, [r7, #9]
 8001816:	e015      	b.n	8001844 <bmi3_set_fifo_config+0x8a>
        }
        else
        {
            data[0] = data[0] & (~fifo_config);
 8001818:	7a3b      	ldrb	r3, [r7, #8]
 800181a:	b25a      	sxtb	r2, r3
 800181c:	89bb      	ldrh	r3, [r7, #12]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	b25b      	sxtb	r3, r3
 8001824:	4013      	ands	r3, r2
 8001826:	b25b      	sxtb	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	723b      	strb	r3, [r7, #8]
            data[1] = data[1] & (~(fifo_config >> 8));
 800182c:	7a7b      	ldrb	r3, [r7, #9]
 800182e:	b25a      	sxtb	r2, r3
 8001830:	89bb      	ldrh	r3, [r7, #12]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	b29b      	uxth	r3, r3
 8001836:	b25b      	sxtb	r3, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	b25b      	sxtb	r3, r3
 800183c:	4013      	ands	r3, r2
 800183e:	b25b      	sxtb	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	727b      	strb	r3, [r7, #9]
        }

        rslt = bmi3_set_regs(BMI3_REG_FIFO_CONF, data, 2, dev);
 8001844:	f107 0108 	add.w	r1, r7, #8
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2202      	movs	r2, #2
 800184c:	2036      	movs	r0, #54	@ 0x36
 800184e:	f7ff f9da 	bl	8000c06 <bmi3_set_regs>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 800186c:	2300      	movs	r3, #0
 800186e:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a3 	beq.w	80019be <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	1c58      	adds	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1c99      	adds	r1, r3, #2
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1d1a      	adds	r2, r3, #4
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f000 f8ee 	bl	8001a66 <validate_bw_avg_acc_mode>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800188e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3303      	adds	r3, #3
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4619      	mov	r1, r3
 80018a0:	f000 f91c 	bl	8001adc <validate_acc_odr_range>
 80018a4:	4603      	mov	r3, r0
 80018a6:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 80018a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d11f      	bne.n	80018f0 <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	789b      	ldrb	r3, [r3, #2]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d109      	bne.n	80018cc <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	791b      	ldrb	r3, [r3, #4]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f002 fc70 	bl	80041a8 <validate_acc_odr_avg>
 80018c8:	4603      	mov	r3, r0
 80018ca:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	789b      	ldrb	r3, [r3, #2]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d003      	beq.n	80018dc <set_accel_config+0x7a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	789b      	ldrb	r3, [r3, #2]
 80018d8:	2b07      	cmp	r3, #7
 80018da:	d109      	bne.n	80018f0 <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <set_accel_config+0x8e>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d801      	bhi.n	80018f0 <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 80018ec:	23fc      	movs	r3, #252	@ 0xfc
 80018ee:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 80018f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d15f      	bne.n	80019b8 <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 80018f8:	7a3b      	ldrb	r3, [r7, #8]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	f023 030f 	bic.w	r3, r3, #15
 8001900:	b21a      	sxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b21b      	sxth	r3, r3
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 8001914:	7a3b      	ldrb	r3, [r7, #8]
 8001916:	b21b      	sxth	r3, r3
 8001918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800191c:	b21a      	sxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	78db      	ldrb	r3, [r3, #3]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	b21b      	sxth	r3, r3
 8001926:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8001932:	7a3b      	ldrb	r3, [r7, #8]
 8001934:	b21b      	sxth	r3, r3
 8001936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800193a:	b21a      	sxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	01db      	lsls	r3, r3, #7
 8001942:	b21b      	sxth	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21b      	sxth	r3, r3
 800194c:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 800194e:	7a7b      	ldrb	r3, [r7, #9]
 8001950:	b21a      	sxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	791b      	ldrb	r3, [r3, #4]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21b      	sxth	r3, r3
 800195a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21b      	sxth	r3, r3
 8001964:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 8001966:	7a7b      	ldrb	r3, [r7, #9]
 8001968:	b21a      	sxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	789b      	ldrb	r3, [r3, #2]
 800196e:	031b      	lsls	r3, r3, #12
 8001970:	b21b      	sxth	r3, r3
 8001972:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21b      	sxth	r3, r3
 800197c:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 800197e:	8abb      	ldrh	r3, [r7, #20]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	8a7b      	ldrh	r3, [r7, #18]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b2da      	uxtb	r2, r3
 800198a:	8a3b      	ldrh	r3, [r7, #16]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 8001994:	89fa      	ldrh	r2, [r7, #14]
 8001996:	89bb      	ldrh	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 80019a4:	f107 0108 	add.w	r1, r7, #8
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2202      	movs	r2, #2
 80019ac:	2020      	movs	r0, #32
 80019ae:	f7ff f92a 	bl	8000c06 <bmi3_set_regs>
 80019b2:	4603      	mov	r3, r0
 80019b4:	75fb      	strb	r3, [r7, #23]
 80019b6:	e004      	b.n	80019c2 <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80019b8:	23fc      	movs	r3, #252	@ 0xfc
 80019ba:	75fb      	strb	r3, [r7, #23]
 80019bc:	e001      	b.n	80019c2 <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80019be:	23ff      	movs	r3, #255	@ 0xff
 80019c0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80019c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80019d8:	2300      	movs	r3, #0
 80019da:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d039      	beq.n	8001a56 <get_accel_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 80019e2:	f107 0108 	add.w	r1, r7, #8
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2202      	movs	r2, #2
 80019ea:	2020      	movs	r0, #32
 80019ec:	f7ff f8a6 	bl	8000b3c <bmi3_get_regs>
 80019f0:	4603      	mov	r3, r0
 80019f2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80019f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d12e      	bne.n	8001a5a <get_accel_config+0x8c>
        {
            reg_data = data_array[0];
 80019fc:	7a3b      	ldrb	r3, [r7, #8]
 80019fe:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8001a00:	89bb      	ldrh	r3, [r7, #12]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 8001a0e:	89bb      	ldrh	r3, [r7, #12]
 8001a10:	111b      	asrs	r3, r3, #4
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 8001a1e:	89bb      	ldrh	r3, [r7, #12]
 8001a20:	11db      	asrs	r3, r3, #7
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8001a2e:	7a7b      	ldrb	r3, [r7, #9]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 8001a34:	89bb      	ldrh	r3, [r7, #12]
 8001a36:	121b      	asrs	r3, r3, #8
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 8001a44:	89bb      	ldrh	r3, [r7, #12]
 8001a46:	131b      	asrs	r3, r3, #12
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	709a      	strb	r2, [r3, #2]
 8001a54:	e001      	b.n	8001a5a <get_accel_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001a56:	23ff      	movs	r3, #255	@ 0xff
 8001a58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d026      	beq.n	8001ac8 <validate_bw_avg_acc_mode+0x62>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <validate_bw_avg_acc_mode+0x62>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d020      	beq.n	8001ac8 <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2207      	movs	r2, #7
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	68b8      	ldr	r0, [r7, #8]
 8001a8e:	f000 f84e 	bl	8001b2e <check_boundary_val>
 8001a92:	4603      	mov	r3, r0
 8001a94:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d117      	bne.n	8001ace <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2206      	movs	r2, #6
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f842 	bl	8001b2e <check_boundary_val>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10b      	bne.n	8001ace <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2100      	movs	r1, #0
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f836 	bl	8001b2e <check_boundary_val>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001ac6:	e002      	b.n	8001ace <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001ac8:	23ff      	movs	r3, #255	@ 0xff
 8001aca:	75fb      	strb	r3, [r7, #23]
 8001acc:	e000      	b.n	8001ad0 <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8001ace:	bf00      	nop
    }

    return rslt;
 8001ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d017      	beq.n	8001b1e <validate_acc_odr_range+0x42>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d014      	beq.n	8001b1e <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	220e      	movs	r2, #14
 8001af8:	2101      	movs	r1, #1
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f817 	bl	8001b2e <check_boundary_val>
 8001b00:	4603      	mov	r3, r0
 8001b02:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	2100      	movs	r1, #0
 8001b12:	68b8      	ldr	r0, [r7, #8]
 8001b14:	f000 f80b 	bl	8001b2e <check_boundary_val>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001b1c:	e001      	b.n	8001b22 <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001b1e:	23ff      	movs	r3, #255	@ 0xff
 8001b20:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	72fb      	strb	r3, [r7, #11]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f984 	bl	8001e4e <null_ptr_check>
 8001b46:	4603      	mov	r3, r0
 8001b48:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8001b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d121      	bne.n	8001b96 <check_boundary_val+0x68>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01e      	beq.n	8001b96 <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	7afa      	ldrb	r2, [r7, #11]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d909      	bls.n	8001b76 <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	7afa      	ldrb	r2, [r7, #11]
 8001b66:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7a1b      	ldrb	r3, [r3, #8]
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	7aba      	ldrb	r2, [r7, #10]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d20c      	bcs.n	8001b9a <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	7aba      	ldrb	r2, [r7, #10]
 8001b84:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7a1b      	ldrb	r3, [r3, #8]
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 8001b94:	e001      	b.n	8001b9a <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001b96:	23ff      	movs	r3, #255	@ 0xff
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8091 	beq.w	8001cde <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1c58      	adds	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1c99      	adds	r1, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	1d1a      	adds	r2, r3, #4
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f000 f890 	bl	8001cee <validate_bw_avg_gyr_mode>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3303      	adds	r3, #3
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	f000 f8be 	bl	8001d64 <validate_gyr_odr_range>
 8001be8:	4603      	mov	r3, r0
 8001bea:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8001bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10d      	bne.n	8001c10 <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	789b      	ldrb	r3, [r3, #2]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d109      	bne.n	8001c10 <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	791b      	ldrb	r3, [r3, #4]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f002 fbac 	bl	8004364 <validate_gyr_odr_avg>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8001c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d15f      	bne.n	8001cd8 <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 8001c18:	7a3b      	ldrb	r3, [r7, #8]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	f023 030f 	bic.w	r3, r3, #15
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 8001c34:	7a3b      	ldrb	r3, [r7, #8]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	78db      	ldrb	r3, [r3, #3]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8001c52:	7a3b      	ldrb	r3, [r7, #8]
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8001c6e:	7a7b      	ldrb	r3, [r7, #9]
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	791b      	ldrb	r3, [r3, #4]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 8001c86:	7a7b      	ldrb	r3, [r7, #9]
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	789b      	ldrb	r3, [r3, #2]
 8001c8e:	031b      	lsls	r3, r3, #12
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8001c9e:	8abb      	ldrh	r3, [r7, #20]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	8a7b      	ldrh	r3, [r7, #18]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	8a3b      	ldrh	r3, [r7, #16]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 8001cb4:	89fa      	ldrh	r2, [r7, #14]
 8001cb6:	89bb      	ldrh	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8001cc4:	f107 0108 	add.w	r1, r7, #8
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	2021      	movs	r0, #33	@ 0x21
 8001cce:	f7fe ff9a 	bl	8000c06 <bmi3_set_regs>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
 8001cd6:	e004      	b.n	8001ce2 <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8001cd8:	23fb      	movs	r3, #251	@ 0xfb
 8001cda:	75fb      	strb	r3, [r7, #23]
 8001cdc:	e001      	b.n	8001ce2 <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001cde:	23ff      	movs	r3, #255	@ 0xff
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d026      	beq.n	8001d50 <validate_bw_avg_gyr_mode+0x62>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d023      	beq.n	8001d50 <validate_bw_avg_gyr_mode+0x62>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d020      	beq.n	8001d50 <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2207      	movs	r2, #7
 8001d12:	2100      	movs	r1, #0
 8001d14:	68b8      	ldr	r0, [r7, #8]
 8001d16:	f7ff ff0a 	bl	8001b2e <check_boundary_val>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d117      	bne.n	8001d56 <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2206      	movs	r2, #6
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff fefe 	bl	8001b2e <check_boundary_val>
 8001d32:	4603      	mov	r3, r0
 8001d34:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8001d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	2100      	movs	r1, #0
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7ff fef2 	bl	8001b2e <check_boundary_val>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001d4e:	e002      	b.n	8001d56 <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001d50:	23ff      	movs	r3, #255	@ 0xff
 8001d52:	75fb      	strb	r3, [r7, #23]
 8001d54:	e000      	b.n	8001d58 <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 8001d56:	bf00      	nop
    }

    return rslt;
 8001d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d017      	beq.n	8001da6 <validate_gyr_odr_range+0x42>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d014      	beq.n	8001da6 <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	220e      	movs	r2, #14
 8001d80:	2101      	movs	r1, #1
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fed3 	bl	8001b2e <check_boundary_val>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8001d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10a      	bne.n	8001daa <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2204      	movs	r2, #4
 8001d98:	2100      	movs	r1, #0
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f7ff fec7 	bl	8001b2e <check_boundary_val>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8001da4:	e001      	b.n	8001daa <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001da6:	23ff      	movs	r3, #255	@ 0xff
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d039      	beq.n	8001e3e <get_gyro_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 8001dca:	f107 0108 	add.w	r1, r7, #8
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	2021      	movs	r0, #33	@ 0x21
 8001dd4:	f7fe feb2 	bl	8000b3c <bmi3_get_regs>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d12e      	bne.n	8001e42 <get_gyro_config+0x8c>
        {
            reg_data = data_array[0];
 8001de4:	7a3b      	ldrb	r3, [r7, #8]
 8001de6:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 8001de8:	89bb      	ldrh	r3, [r7, #12]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 8001df6:	89bb      	ldrh	r3, [r7, #12]
 8001df8:	111b      	asrs	r3, r3, #4
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 8001e06:	89bb      	ldrh	r3, [r7, #12]
 8001e08:	11db      	asrs	r3, r3, #7
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8001e16:	7a7b      	ldrb	r3, [r7, #9]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 8001e1c:	89bb      	ldrh	r3, [r7, #12]
 8001e1e:	121b      	asrs	r3, r3, #8
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	131b      	asrs	r3, r3, #12
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	709a      	strb	r2, [r3, #2]
 8001e3c:	e001      	b.n	8001e42 <get_gyro_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e3e:	23ff      	movs	r3, #255	@ 0xff
 8001e40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00b      	beq.n	8001e74 <null_ptr_check+0x26>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <null_ptr_check+0x26>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <null_ptr_check+0x26>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 8001e74:	23ff      	movs	r3, #255	@ 0xff
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e001      	b.n	8001e7e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <get_feature_enable>:

/*!
 * @brief This internal API is used to get the enabled feature.
 */
static int8_t get_feature_enable(struct bmi3_feature_enable *enable, struct bmi3_dev *dev)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt = BMI3_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]

    uint8_t feature[2];
    uint8_t reg_data;
    uint16_t feature_config;

    if (enable != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 808b 	beq.w	8001fba <get_feature_enable+0x12c>
    {
        rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO0, feature, 2, dev);
 8001ea4:	f107 0108 	add.w	r1, r7, #8
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7fe fe45 	bl	8000b3c <bmi3_get_regs>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d17d      	bne.n	8001fba <get_feature_enable+0x12c>
        {
            reg_data = feature[0];
 8001ebe:	7a3b      	ldrb	r3, [r7, #8]
 8001ec0:	73bb      	strb	r3, [r7, #14]
            enable->no_motion_x_en = BMI3_GET_BIT_POS0(reg_data, BMI3_NO_MOTION_X_EN);
 8001ec2:	7bbb      	ldrb	r3, [r7, #14]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	701a      	strb	r2, [r3, #0]
            enable->no_motion_y_en = BMI3_GET_BITS(reg_data, BMI3_NO_MOTION_Y_EN);
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	105b      	asrs	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	705a      	strb	r2, [r3, #1]
            enable->no_motion_z_en = BMI3_GET_BITS(reg_data, BMI3_NO_MOTION_Z_EN);
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	109b      	asrs	r3, r3, #2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	709a      	strb	r2, [r3, #2]
            enable->any_motion_x_en = BMI3_GET_BITS(reg_data, BMI3_ANY_MOTION_X_EN);
 8001eee:	7bbb      	ldrb	r3, [r7, #14]
 8001ef0:	10db      	asrs	r3, r3, #3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	70da      	strb	r2, [r3, #3]
            enable->any_motion_y_en = BMI3_GET_BITS(reg_data, BMI3_ANY_MOTION_Y_EN);
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	111b      	asrs	r3, r3, #4
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	711a      	strb	r2, [r3, #4]
            enable->any_motion_z_en = BMI3_GET_BITS(reg_data, BMI3_ANY_MOTION_Z_EN);
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	115b      	asrs	r3, r3, #5
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	715a      	strb	r2, [r3, #5]
            enable->flat_en = BMI3_GET_BITS(reg_data, BMI3_FLAT_EN);
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	119b      	asrs	r3, r3, #6
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	719a      	strb	r2, [r3, #6]
            enable->orientation_en = BMI3_GET_BITS(reg_data, BMI3_ORIENTATION_EN);
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	71da      	strb	r2, [r3, #7]

            feature_config = (uint16_t)feature[1] << 8;
 8001f38:	7a7b      	ldrb	r3, [r7, #9]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	81bb      	strh	r3, [r7, #12]

            enable->step_detector_en = BMI3_GET_BITS(feature_config, BMI3_STEP_DETECTOR_EN);
 8001f3e:	89bb      	ldrh	r3, [r7, #12]
 8001f40:	121b      	asrs	r3, r3, #8
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	721a      	strb	r2, [r3, #8]
            enable->step_counter_en = BMI3_GET_BITS(feature_config, BMI3_STEP_COUNTER_EN);
 8001f4e:	89bb      	ldrh	r3, [r7, #12]
 8001f50:	125b      	asrs	r3, r3, #9
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	725a      	strb	r2, [r3, #9]
            enable->sig_motion_en = BMI3_GET_BITS(feature_config, BMI3_SIG_MOTION_EN);
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	129b      	asrs	r3, r3, #10
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	729a      	strb	r2, [r3, #10]
            enable->tilt_en = BMI3_GET_BITS(feature_config, BMI3_TILT_EN);
 8001f6e:	89bb      	ldrh	r3, [r7, #12]
 8001f70:	12db      	asrs	r3, r3, #11
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	72da      	strb	r2, [r3, #11]
            enable->tap_detector_s_tap_en = BMI3_GET_BITS(feature_config, BMI3_TAP_DETECTOR_S_TAP_EN);
 8001f7e:	89bb      	ldrh	r3, [r7, #12]
 8001f80:	131b      	asrs	r3, r3, #12
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	731a      	strb	r2, [r3, #12]
            enable->tap_detector_d_tap_en = BMI3_GET_BITS(feature_config, BMI3_TAP_DETECTOR_D_TAP_EN);
 8001f8e:	89bb      	ldrh	r3, [r7, #12]
 8001f90:	135b      	asrs	r3, r3, #13
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	735a      	strb	r2, [r3, #13]
            enable->tap_detector_t_tap_en = BMI3_GET_BITS(feature_config, BMI3_TAP_DETECTOR_T_TAP_EN);
 8001f9e:	89bb      	ldrh	r3, [r7, #12]
 8001fa0:	139b      	asrs	r3, r3, #14
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	739a      	strb	r2, [r3, #14]
            enable->i3c_sync_en = BMI3_GET_BITS(feature_config, BMI3_I3C_SYNC_EN);
 8001fae:	89bb      	ldrh	r3, [r7, #12]
 8001fb0:	0bdb      	lsrs	r3, r3, #15
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	73da      	strb	r2, [r3, #15]
        }
    }

    return rslt;
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <set_feature_enable>:

/*!
 * @brief This internal API is used to set the feature.
 */
static int8_t set_feature_enable(const struct bmi3_feature_enable *enable, struct bmi3_dev *dev)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    uint8_t feature[2] = { 0 };
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	82bb      	strh	r3, [r7, #20]
    uint16_t tap_detector_d_tap_en;
    uint16_t tap_detector_t_tap_en;
    uint16_t i3c_sync_en;

    /* Array variable to clear feature before enabling into register */
    uint8_t reset[2] = { 0 };
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	81bb      	strh	r3, [r7, #12]

    /* Array to set feature_engine_gp_status in order to enable the feature */
    uint8_t gp_status[2] = { 1, 0 };
 8001fda:	2301      	movs	r3, #1
 8001fdc:	813b      	strh	r3, [r7, #8]

    if (enable != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8172 	beq.w	80022ca <set_feature_enable+0x302>
    {
        rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO0, get_feature, 2, dev);
 8001fe6:	f107 0110 	add.w	r1, r7, #16
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2202      	movs	r2, #2
 8001fee:	2010      	movs	r0, #16
 8001ff0:	f7fe fda4 	bl	8000b3c <bmi3_get_regs>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8001ffa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8166 	bne.w	80022d0 <set_feature_enable+0x308>
        {
            no_motion_x_en =
                (BMI3_SET_BIT_POS0(get_feature[0], BMI3_NO_MOTION_X_EN,
 8002004:	7c3b      	ldrb	r3, [r7, #16]
 8002006:	b21b      	sxth	r3, r3
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	b21a      	sxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b21b      	sxth	r3, r3
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21b      	sxth	r3, r3
                                   enable->no_motion_x_en) & BMI3_NO_MOTION_X_EN_MASK);
 800201e:	b29b      	uxth	r3, r3
            no_motion_x_en =
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	86bb      	strh	r3, [r7, #52]	@ 0x34
            no_motion_y_en =
                (BMI3_SET_BITS(get_feature[0], BMI3_NO_MOTION_Y_EN, enable->no_motion_y_en) & BMI3_NO_MOTION_Y_EN_MASK);
 8002026:	7c3b      	ldrb	r3, [r7, #16]
 8002028:	b21b      	sxth	r3, r3
 800202a:	f023 0302 	bic.w	r3, r3, #2
 800202e:	b21a      	sxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	785b      	ldrb	r3, [r3, #1]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	b21b      	sxth	r3, r3
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b21b      	sxth	r3, r3
 8002042:	b29b      	uxth	r3, r3
            no_motion_y_en =
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	867b      	strh	r3, [r7, #50]	@ 0x32
            no_motion_z_en =
                (BMI3_SET_BITS(get_feature[0], BMI3_NO_MOTION_Z_EN, enable->no_motion_z_en) & BMI3_NO_MOTION_Z_EN_MASK);
 800204a:	7c3b      	ldrb	r3, [r7, #16]
 800204c:	b21b      	sxth	r3, r3
 800204e:	f023 0304 	bic.w	r3, r3, #4
 8002052:	b21a      	sxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	789b      	ldrb	r3, [r3, #2]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	b21b      	sxth	r3, r3
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21b      	sxth	r3, r3
 8002066:	b29b      	uxth	r3, r3
            no_motion_z_en =
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	863b      	strh	r3, [r7, #48]	@ 0x30
            any_motion_x_en =
                (BMI3_SET_BITS(get_feature[0], BMI3_ANY_MOTION_X_EN,
 800206e:	7c3b      	ldrb	r3, [r7, #16]
 8002070:	b21b      	sxth	r3, r3
 8002072:	f023 0308 	bic.w	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	78db      	ldrb	r3, [r3, #3]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	b21b      	sxth	r3, r3
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	b21b      	sxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b21b      	sxth	r3, r3
                               enable->any_motion_x_en) & BMI3_ANY_MOTION_X_EN_MASK);
 800208a:	b29b      	uxth	r3, r3
            any_motion_x_en =
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            any_motion_y_en =
                (BMI3_SET_BITS(get_feature[0], BMI3_ANY_MOTION_Y_EN,
 8002092:	7c3b      	ldrb	r3, [r7, #16]
 8002094:	b21b      	sxth	r3, r3
 8002096:	f023 0310 	bic.w	r3, r3, #16
 800209a:	b21a      	sxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	791b      	ldrb	r3, [r3, #4]
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21b      	sxth	r3, r3
                               enable->any_motion_y_en) & BMI3_ANY_MOTION_Y_EN_MASK);
 80020ae:	b29b      	uxth	r3, r3
            any_motion_y_en =
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            any_motion_z_en =
                (BMI3_SET_BITS(get_feature[0], BMI3_ANY_MOTION_Z_EN,
 80020b6:	7c3b      	ldrb	r3, [r7, #16]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	f023 0320 	bic.w	r3, r3, #32
 80020be:	b21a      	sxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	795b      	ldrb	r3, [r3, #5]
 80020c4:	015b      	lsls	r3, r3, #5
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21b      	sxth	r3, r3
                               enable->any_motion_z_en) & BMI3_ANY_MOTION_Z_EN_MASK);
 80020d2:	b29b      	uxth	r3, r3
            any_motion_z_en =
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
            flat_en = (BMI3_SET_BITS(get_feature[0], BMI3_FLAT_EN, enable->flat_en) & BMI3_FLAT_EN_MASK);
 80020da:	7c3b      	ldrb	r3, [r7, #16]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	799b      	ldrb	r3, [r3, #6]
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fc:	853b      	strh	r3, [r7, #40]	@ 0x28
            orientation_en =
                (BMI3_SET_BITS(get_feature[0], BMI3_ORIENTATION_EN, enable->orientation_en) & BMI3_ORIENTATION_EN_MASK);
 80020fe:	7c3b      	ldrb	r3, [r7, #16]
 8002100:	b21b      	sxth	r3, r3
 8002102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002106:	b21a      	sxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	79db      	ldrb	r3, [r3, #7]
 800210c:	01db      	lsls	r3, r3, #7
 800210e:	b21b      	sxth	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b21b      	sxth	r3, r3
 8002118:	b29b      	uxth	r3, r3
            orientation_en =
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	84fb      	strh	r3, [r7, #38]	@ 0x26

            step_detector_en =
                (BMI3_SET_BITS(get_feature[1], BMI3_STEP_DETECTOR_EN,
 8002120:	7c7b      	ldrb	r3, [r7, #17]
 8002122:	b21a      	sxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7a1b      	ldrb	r3, [r3, #8]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21b      	sxth	r3, r3
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21b      	sxth	r3, r3
                               enable->step_detector_en) & BMI3_STEP_DETECTOR_EN_MASK);
 8002136:	b29b      	uxth	r3, r3
            step_detector_en =
 8002138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            step_counter_en =
                (BMI3_SET_BITS(get_feature[1], BMI3_STEP_COUNTER_EN,
 800213e:	7c7b      	ldrb	r3, [r7, #17]
 8002140:	b21a      	sxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7a5b      	ldrb	r3, [r3, #9]
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	b21b      	sxth	r3, r3
 800214a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21b      	sxth	r3, r3
                               enable->step_counter_en) & BMI3_STEP_COUNTER_EN_MASK);
 8002154:	b29b      	uxth	r3, r3
            step_counter_en =
 8002156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800215a:	847b      	strh	r3, [r7, #34]	@ 0x22
            sig_motion_en =
                (BMI3_SET_BITS(get_feature[1], BMI3_SIG_MOTION_EN, enable->sig_motion_en) & BMI3_SIG_MOTION_EN_MASK);
 800215c:	7c7b      	ldrb	r3, [r7, #17]
 800215e:	b21a      	sxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7a9b      	ldrb	r3, [r3, #10]
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	b21b      	sxth	r3, r3
 8002168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216c:	b21b      	sxth	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b21b      	sxth	r3, r3
 8002172:	b29b      	uxth	r3, r3
            sig_motion_en =
 8002174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002178:	843b      	strh	r3, [r7, #32]
            tilt_en = (BMI3_SET_BITS(get_feature[1], BMI3_TILT_EN, enable->tilt_en) & BMI3_TILT_EN_MASK);
 800217a:	7c7b      	ldrb	r3, [r7, #17]
 800217c:	b21a      	sxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7adb      	ldrb	r3, [r3, #11]
 8002182:	02db      	lsls	r3, r3, #11
 8002184:	b21b      	sxth	r3, r3
 8002186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21b      	sxth	r3, r3
 8002190:	b29b      	uxth	r3, r3
 8002192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002196:	83fb      	strh	r3, [r7, #30]
            tap_detector_s_tap_en =
                (BMI3_SET_BITS(get_feature[1], BMI3_TAP_DETECTOR_S_TAP_EN,
 8002198:	7c7b      	ldrb	r3, [r7, #17]
 800219a:	b21a      	sxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7b1b      	ldrb	r3, [r3, #12]
 80021a0:	031b      	lsls	r3, r3, #12
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
                               enable->tap_detector_s_tap_en) & BMI3_TAP_DETECTOR_S_TAP_EN_MASK);
 80021ae:	b29b      	uxth	r3, r3
            tap_detector_s_tap_en =
 80021b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b4:	83bb      	strh	r3, [r7, #28]
            tap_detector_d_tap_en =
                (BMI3_SET_BITS(get_feature[1], BMI3_TAP_DETECTOR_D_TAP_EN,
 80021b6:	7c7b      	ldrb	r3, [r7, #17]
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7b5b      	ldrb	r3, [r3, #13]
 80021be:	035b      	lsls	r3, r3, #13
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b21b      	sxth	r3, r3
                               enable->tap_detector_d_tap_en) & BMI3_TAP_DETECTOR_D_TAP_EN_MASK);
 80021cc:	b29b      	uxth	r3, r3
            tap_detector_d_tap_en =
 80021ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d2:	837b      	strh	r3, [r7, #26]
            tap_detector_t_tap_en =
                (BMI3_SET_BITS(get_feature[1], BMI3_TAP_DETECTOR_T_TAP_EN,
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7b9b      	ldrb	r3, [r3, #14]
 80021dc:	039b      	lsls	r3, r3, #14
 80021de:	b21b      	sxth	r3, r3
 80021e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21b      	sxth	r3, r3
                               enable->tap_detector_t_tap_en) & BMI3_TAP_DETECTOR_T_TAP_EN_MASK);
 80021ea:	b29b      	uxth	r3, r3
            tap_detector_t_tap_en =
 80021ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f0:	833b      	strh	r3, [r7, #24]
            i3c_sync_en =
                (BMI3_SET_BITS(get_feature[1], BMI3_I3C_SYNC_EN, enable->i3c_sync_en) & BMI3_I3C_SYNC_EN_MASK);
 80021f2:	7c7b      	ldrb	r3, [r7, #17]
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7bdb      	ldrb	r3, [r3, #15]
 80021fa:	03db      	lsls	r3, r3, #15
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	b21b      	sxth	r3, r3
 8002202:	b29a      	uxth	r2, r3
            i3c_sync_en =
 8002204:	4b35      	ldr	r3, [pc, #212]	@ (80022dc <set_feature_enable+0x314>)
 8002206:	4013      	ands	r3, r2
 8002208:	82fb      	strh	r3, [r7, #22]

            feature[0] =
                (uint8_t)(no_motion_x_en | no_motion_y_en | no_motion_z_en | any_motion_x_en | any_motion_y_en |
 800220a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800220c:	b2da      	uxtb	r2, r3
 800220e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002210:	b2db      	uxtb	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b2da      	uxtb	r2, r3
 8002216:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4313      	orrs	r3, r2
 800221c:	b2da      	uxtb	r2, r3
 800221e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b2da      	uxtb	r2, r3
 8002226:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b2da      	uxtb	r2, r3
 800222e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b2da      	uxtb	r2, r3
 8002236:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b2da      	uxtb	r2, r3
 800223e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b2db      	uxtb	r3, r3
            feature[0] =
 8002246:	753b      	strb	r3, [r7, #20]
                          any_motion_z_en | flat_en | orientation_en);
            feature[1] =
                (uint8_t)((step_detector_en | step_counter_en | sig_motion_en | tilt_en | tap_detector_s_tap_en |
 8002248:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800224a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800224c:	4313      	orrs	r3, r2
 800224e:	b29a      	uxth	r2, r3
 8002250:	8c3b      	ldrh	r3, [r7, #32]
 8002252:	4313      	orrs	r3, r2
 8002254:	b29a      	uxth	r2, r3
 8002256:	8bfb      	ldrh	r3, [r7, #30]
 8002258:	4313      	orrs	r3, r2
 800225a:	b29a      	uxth	r2, r3
 800225c:	8bbb      	ldrh	r3, [r7, #28]
 800225e:	4313      	orrs	r3, r2
 8002260:	b29a      	uxth	r2, r3
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	4313      	orrs	r3, r2
 8002266:	b29a      	uxth	r2, r3
 8002268:	8b3b      	ldrh	r3, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	8afb      	ldrh	r3, [r7, #22]
 8002270:	4313      	orrs	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	b29b      	uxth	r3, r3
 8002278:	b2db      	uxtb	r3, r3
            feature[1] =
 800227a:	757b      	strb	r3, [r7, #21]
                           tap_detector_d_tap_en | tap_detector_t_tap_en | i3c_sync_en) >> 8);

            /* Reset the register before updating new values */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO0, reset, 2, dev);
 800227c:	f107 010c 	add.w	r1, r7, #12
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2202      	movs	r2, #2
 8002284:	2010      	movs	r0, #16
 8002286:	f7fe fcbe 	bl	8000c06 <bmi3_set_regs>
 800228a:	4603      	mov	r3, r0
 800228c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            if (rslt == BMI3_OK)
 8002290:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <set_feature_enable+0x2e4>
            {
                rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO0, feature, 2, dev);
 8002298:	f107 0114 	add.w	r1, r7, #20
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2202      	movs	r2, #2
 80022a0:	2010      	movs	r0, #16
 80022a2:	f7fe fcb0 	bl	8000c06 <bmi3_set_regs>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BMI3_OK)
 80022ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10d      	bne.n	80022d0 <set_feature_enable+0x308>
            {
                rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, gp_status, 2, dev);
 80022b4:	f107 0108 	add.w	r1, r7, #8
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2202      	movs	r2, #2
 80022bc:	2014      	movs	r0, #20
 80022be:	f7fe fca2 	bl	8000c06 <bmi3_set_regs>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80022c8:	e002      	b.n	80022d0 <set_feature_enable+0x308>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80022ca:	23ff      	movs	r3, #255	@ 0xff
 80022cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 80022d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3738      	adds	r7, #56	@ 0x38
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	ffff8000 	.word	0xffff8000

080022e0 <get_latch_mode>:

/*!
 * @brief This internal API gets the latch mode from register address
 */
static int8_t get_latch_mode(struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[2] = { 0 };
 80022ea:	2300      	movs	r3, #0
 80022ec:	81bb      	strh	r3, [r7, #12]

    if (int_cfg != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <get_latch_mode+0x3c>
    {
        rslt = bmi3_get_regs(BMI3_REG_INT_CONF, data_array, 2, dev);
 80022f4:	f107 010c 	add.w	r1, r7, #12
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	2039      	movs	r0, #57	@ 0x39
 80022fe:	f7fe fc1d 	bl	8000b3c <bmi3_get_regs>
 8002302:	4603      	mov	r3, r0
 8002304:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8002306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <get_latch_mode+0x40>
        {
            int_cfg->int_latch = BMI3_GET_BIT_POS0(data_array[0], BMI3_INT_LATCH);
 800230e:	7b3b      	ldrb	r3, [r7, #12]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	705a      	strb	r2, [r3, #1]
 800231a:	e001      	b.n	8002320 <get_latch_mode+0x40>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800231c:	23ff      	movs	r3, #255	@ 0xff
 800231e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <set_latch_mode>:

/*!
 * @brief This internal API sets the latch mode to register address
 */
static int8_t set_latch_mode(const struct bmi3_int_pin_config *int_cfg, struct bmi3_dev *dev)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define data array */
    uint8_t data_array[2] = { 0 };
 8002336:	2300      	movs	r3, #0
 8002338:	81bb      	strh	r3, [r7, #12]

    if (int_cfg != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d025      	beq.n	800238c <set_latch_mode+0x60>
    {
        rslt = bmi3_get_regs(BMI3_REG_INT_CONF, data_array, 2, dev);
 8002340:	f107 010c 	add.w	r1, r7, #12
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2202      	movs	r2, #2
 8002348:	2039      	movs	r0, #57	@ 0x39
 800234a:	f7fe fbf7 	bl	8000b3c <bmi3_get_regs>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11a      	bne.n	8002390 <set_latch_mode+0x64>
        {
            /* Configure the interrupt mode */
            data_array[0] = BMI3_SET_BIT_POS0(data_array[0], BMI3_INT_LATCH, int_cfg->int_latch);
 800235a:	7b3b      	ldrb	r3, [r7, #12]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	b25a      	sxtb	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	785b      	ldrb	r3, [r3, #1]
 8002368:	b25b      	sxtb	r3, r3
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	b25b      	sxtb	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	b25b      	sxtb	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	733b      	strb	r3, [r7, #12]

            rslt = bmi3_set_regs(BMI3_REG_INT_CONF, data_array, 2, dev);
 8002378:	f107 010c 	add.w	r1, r7, #12
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2202      	movs	r2, #2
 8002380:	2039      	movs	r0, #57	@ 0x39
 8002382:	f7fe fc40 	bl	8000c06 <bmi3_set_regs>
 8002386:	4603      	mov	r3, r0
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e001      	b.n	8002390 <set_latch_mode+0x64>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800238c:	23ff      	movs	r3, #255	@ 0xff
 800238e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	2300      	movs	r3, #0
 80023ac:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 80023ae:	2305      	movs	r3, #5
 80023b0:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d078      	beq.n	80024ae <get_any_motion_config+0x112>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80023bc:	f107 010c 	add.w	r1, r7, #12
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2202      	movs	r2, #2
 80023c4:	2041      	movs	r0, #65	@ 0x41
 80023c6:	f7fe fc1e 	bl	8000c06 <bmi3_set_regs>
 80023ca:	4603      	mov	r3, r0
 80023cc:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80023ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d16d      	bne.n	80024b2 <get_any_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 80023d6:	f107 0110 	add.w	r1, r7, #16
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2206      	movs	r2, #6
 80023de:	2042      	movs	r0, #66	@ 0x42
 80023e0:	f7fe fbac 	bl	8000b3c <bmi3_get_regs>
 80023e4:	4603      	mov	r3, r0
 80023e6:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80023e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d160      	bne.n	80024b2 <get_any_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 80023f0:	7fbb      	ldrb	r3, [r7, #30]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	77ba      	strb	r2, [r7, #30]
 80023f6:	3320      	adds	r3, #32
 80023f8:	443b      	add	r3, r7
 80023fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023fe:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002400:	7fbb      	ldrb	r3, [r7, #30]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	77ba      	strb	r2, [r7, #30]
 8002406:	3320      	adds	r3, #32
 8002408:	443b      	add	r3, r7
 800240a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002412:	8bba      	ldrh	r2, [r7, #28]
 8002414:	8b7b      	ldrh	r3, [r7, #26]
 8002416:	4313      	orrs	r3, r2
 8002418:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 800241a:	8b3b      	ldrh	r3, [r7, #24]
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8002426:	8b3b      	ldrh	r3, [r7, #24]
 8002428:	131b      	asrs	r3, r3, #12
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002436:	7fbb      	ldrb	r3, [r7, #30]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	77ba      	strb	r2, [r7, #30]
 800243c:	3320      	adds	r3, #32
 800243e:	443b      	add	r3, r7
 8002440:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002444:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002446:	7fbb      	ldrb	r3, [r7, #30]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	77ba      	strb	r2, [r7, #30]
 800244c:	3320      	adds	r3, #32
 800244e:	443b      	add	r3, r7
 8002450:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002458:	8bba      	ldrh	r2, [r7, #28]
 800245a:	8b7b      	ldrh	r3, [r7, #26]
 800245c:	4313      	orrs	r3, r2
 800245e:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002460:	8b3b      	ldrh	r3, [r7, #24]
 8002462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 800246c:	7fbb      	ldrb	r3, [r7, #30]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	77ba      	strb	r2, [r7, #30]
 8002472:	3320      	adds	r3, #32
 8002474:	443b      	add	r3, r7
 8002476:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800247a:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 800247c:	7fbb      	ldrb	r3, [r7, #30]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	77ba      	strb	r2, [r7, #30]
 8002482:	3320      	adds	r3, #32
 8002484:	443b      	add	r3, r7
 8002486:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 800248e:	8bba      	ldrh	r2, [r7, #28]
 8002490:	8b7b      	ldrh	r3, [r7, #26]
 8002492:	4313      	orrs	r3, r2
 8002494:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8002496:	8b3b      	ldrh	r3, [r7, #24]
 8002498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 80024a2:	8b3b      	ldrh	r3, [r7, #24]
 80024a4:	0b5b      	lsrs	r3, r3, #13
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	811a      	strh	r2, [r3, #8]
 80024ac:	e001      	b.n	80024b2 <get_any_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80024ae:	23ff      	movs	r3, #255	@ 0xff
 80024b0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80024b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08e      	sub	sp, #56	@ 0x38
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 80024ca:	2305      	movs	r3, #5
 80024cc:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	2300      	movs	r3, #0
 80024d4:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	2300      	movs	r3, #0
 80024dc:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80b6 	beq.w	8002652 <set_any_motion_config+0x192>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80024e6:	f107 011c 	add.w	r1, r7, #28
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2202      	movs	r2, #2
 80024ee:	2041      	movs	r0, #65	@ 0x41
 80024f0:	f7fe fb89 	bl	8000c06 <bmi3_set_regs>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 80024fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 80aa 	bne.w	8002658 <set_any_motion_config+0x198>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8002504:	7b3b      	ldrb	r3, [r7, #12]
 8002506:	b21a      	sxth	r2, r3
 8002508:	4b56      	ldr	r3, [pc, #344]	@ (8002664 <set_any_motion_config+0x1a4>)
 800250a:	4013      	ands	r3, r2
 800250c:	b21a      	sxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	885b      	ldrh	r3, [r3, #2]
 8002512:	b21b      	sxth	r3, r3
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	b21b      	sxth	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	b21b      	sxth	r3, r3
 800251e:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8002520:	7b7b      	ldrb	r3, [r7, #13]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8002526:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800252a:	4b4e      	ldr	r3, [pc, #312]	@ (8002664 <set_any_motion_config+0x1a4>)
 800252c:	4013      	ands	r3, r2
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	885b      	ldrh	r3, [r3, #2]
 8002534:	b21b      	sxth	r3, r3
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	b21b      	sxth	r3, r3
 800253c:	4313      	orrs	r3, r2
 800253e:	b21b      	sxth	r3, r3
 8002540:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 8002542:	7b7b      	ldrb	r3, [r7, #13]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8002548:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800254c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002550:	b21a      	sxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	791b      	ldrb	r3, [r3, #4]
 8002556:	031b      	lsls	r3, r3, #12
 8002558:	b21b      	sxth	r3, r3
 800255a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255e:	b21b      	sxth	r3, r3
 8002560:	4313      	orrs	r3, r2
 8002562:	b21b      	sxth	r3, r3
 8002564:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	b21a      	sxth	r2, r3
 800256a:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <set_any_motion_config+0x1a8>)
 800256c:	4013      	ands	r3, r2
 800256e:	b21a      	sxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	88db      	ldrh	r3, [r3, #6]
 8002574:	b21b      	sxth	r3, r3
 8002576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257a:	b21b      	sxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b21b      	sxth	r3, r3
 8002580:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002588:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800258c:	4b36      	ldr	r3, [pc, #216]	@ (8002668 <set_any_motion_config+0x1a8>)
 800258e:	4013      	ands	r3, r2
 8002590:	b21a      	sxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	88db      	ldrh	r3, [r3, #6]
 8002596:	b21b      	sxth	r3, r3
 8002598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	4b30      	ldr	r3, [pc, #192]	@ (800266c <set_any_motion_config+0x1ac>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b21b      	sxth	r3, r3
 80025be:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80025c0:	7c3b      	ldrb	r3, [r7, #16]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80025c6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80025ca:	4b28      	ldr	r3, [pc, #160]	@ (800266c <set_any_motion_config+0x1ac>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025da:	b21b      	sxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b21b      	sxth	r3, r3
 80025e0:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80025e2:	7c7b      	ldrb	r3, [r7, #17]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80025e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80025ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	891b      	ldrh	r3, [r3, #8]
 80025f6:	035b      	lsls	r3, r3, #13
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 8002600:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002602:	b2db      	uxtb	r3, r3
 8002604:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8002606:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002608:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800260a:	4313      	orrs	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29b      	uxth	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 8002616:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002618:	b2db      	uxtb	r3, r3
 800261a:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 800261c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	b29b      	uxth	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 8002626:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002628:	b2db      	uxtb	r3, r3
 800262a:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 800262c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800262e:	8bfb      	ldrh	r3, [r7, #30]
 8002630:	4313      	orrs	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	b29b      	uxth	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 800263c:	f107 0114 	add.w	r1, r7, #20
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2206      	movs	r2, #6
 8002644:	2042      	movs	r0, #66	@ 0x42
 8002646:	f7fe fade 	bl	8000c06 <bmi3_set_regs>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002650:	e002      	b.n	8002658 <set_any_motion_config+0x198>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002652:	23ff      	movs	r3, #255	@ 0xff
 8002654:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002658:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800265c:	4618      	mov	r0, r3
 800265e:	3738      	adds	r7, #56	@ 0x38
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffff000 	.word	0xfffff000
 8002668:	fffffc00 	.word	0xfffffc00
 800266c:	ffffe000 	.word	0xffffe000

08002670 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	2300      	movs	r3, #0
 8002680:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8002682:	2308      	movs	r3, #8
 8002684:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d078      	beq.n	8002782 <get_no_motion_config+0x112>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002690:	f107 010c 	add.w	r1, r7, #12
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2202      	movs	r2, #2
 8002698:	2041      	movs	r0, #65	@ 0x41
 800269a:	f7fe fab4 	bl	8000c06 <bmi3_set_regs>
 800269e:	4603      	mov	r3, r0
 80026a0:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80026a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d16d      	bne.n	8002786 <get_no_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80026aa:	f107 0110 	add.w	r1, r7, #16
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2206      	movs	r2, #6
 80026b2:	2042      	movs	r0, #66	@ 0x42
 80026b4:	f7fe fa42 	bl	8000b3c <bmi3_get_regs>
 80026b8:	4603      	mov	r3, r0
 80026ba:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80026bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d160      	bne.n	8002786 <get_no_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 80026c4:	7fbb      	ldrb	r3, [r7, #30]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	77ba      	strb	r2, [r7, #30]
 80026ca:	3320      	adds	r3, #32
 80026cc:	443b      	add	r3, r7
 80026ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80026d2:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80026d4:	7fbb      	ldrb	r3, [r7, #30]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	77ba      	strb	r2, [r7, #30]
 80026da:	3320      	adds	r3, #32
 80026dc:	443b      	add	r3, r7
 80026de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80026e6:	8bba      	ldrh	r2, [r7, #28]
 80026e8:	8b7b      	ldrh	r3, [r7, #26]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80026ee:	8b3b      	ldrh	r3, [r7, #24]
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 80026fa:	8b3b      	ldrh	r3, [r7, #24]
 80026fc:	131b      	asrs	r3, r3, #12
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 800270a:	7fbb      	ldrb	r3, [r7, #30]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	77ba      	strb	r2, [r7, #30]
 8002710:	3320      	adds	r3, #32
 8002712:	443b      	add	r3, r7
 8002714:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002718:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 800271a:	7fbb      	ldrb	r3, [r7, #30]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	77ba      	strb	r2, [r7, #30]
 8002720:	3320      	adds	r3, #32
 8002722:	443b      	add	r3, r7
 8002724:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 800272c:	8bba      	ldrh	r2, [r7, #28]
 800272e:	8b7b      	ldrh	r3, [r7, #26]
 8002730:	4313      	orrs	r3, r2
 8002732:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8002734:	8b3b      	ldrh	r3, [r7, #24]
 8002736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 8002740:	7fbb      	ldrb	r3, [r7, #30]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	77ba      	strb	r2, [r7, #30]
 8002746:	3320      	adds	r3, #32
 8002748:	443b      	add	r3, r7
 800274a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800274e:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8002750:	7fbb      	ldrb	r3, [r7, #30]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	77ba      	strb	r2, [r7, #30]
 8002756:	3320      	adds	r3, #32
 8002758:	443b      	add	r3, r7
 800275a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8002762:	8bba      	ldrh	r2, [r7, #28]
 8002764:	8b7b      	ldrh	r3, [r7, #26]
 8002766:	4313      	orrs	r3, r2
 8002768:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 800276a:	8b3b      	ldrh	r3, [r7, #24]
 800276c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8002776:	8b3b      	ldrh	r3, [r7, #24]
 8002778:	0b5b      	lsrs	r3, r3, #13
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	811a      	strh	r2, [r3, #8]
 8002780:	e001      	b.n	8002786 <get_no_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002782:	23ff      	movs	r3, #255	@ 0xff
 8002784:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002786:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	@ 0x38
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 800279e:	2308      	movs	r3, #8
 80027a0:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	2300      	movs	r3, #0
 80027a8:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	2300      	movs	r3, #0
 80027b0:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80b3 	beq.w	8002920 <set_no_motion_config+0x18c>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80027ba:	f107 011c 	add.w	r1, r7, #28
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2202      	movs	r2, #2
 80027c2:	2041      	movs	r0, #65	@ 0x41
 80027c4:	f7fe fa1f 	bl	8000c06 <bmi3_set_regs>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 80027ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 80a7 	bne.w	8002926 <set_no_motion_config+0x192>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80027d8:	7b3b      	ldrb	r3, [r7, #12]
 80027da:	b21a      	sxth	r2, r3
 80027dc:	4b55      	ldr	r3, [pc, #340]	@ (8002934 <set_no_motion_config+0x1a0>)
 80027de:	4013      	ands	r3, r2
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	885b      	ldrh	r3, [r3, #2]
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	4313      	orrs	r3, r2
 80027f0:	b21b      	sxth	r3, r3
 80027f2:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80027f4:	7b7b      	ldrb	r3, [r7, #13]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80027fa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80027fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002934 <set_no_motion_config+0x1a0>)
 8002800:	4013      	ands	r3, r2
 8002802:	b21a      	sxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	885b      	ldrh	r3, [r3, #2]
 8002808:	b21b      	sxth	r3, r3
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	b21b      	sxth	r3, r3
 8002810:	4313      	orrs	r3, r2
 8002812:	b21b      	sxth	r3, r3
 8002814:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8002816:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800281a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800281e:	b21a      	sxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	031b      	lsls	r3, r3, #12
 8002826:	b21b      	sxth	r3, r3
 8002828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b21b      	sxth	r3, r3
 8002832:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	b21a      	sxth	r2, r3
 8002838:	4b3f      	ldr	r3, [pc, #252]	@ (8002938 <set_no_motion_config+0x1a4>)
 800283a:	4013      	ands	r3, r2
 800283c:	b21a      	sxth	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	88db      	ldrh	r3, [r3, #6]
 8002842:	b21b      	sxth	r3, r3
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	b21b      	sxth	r3, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	b21b      	sxth	r3, r3
 800284e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8002856:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800285a:	4b37      	ldr	r3, [pc, #220]	@ (8002938 <set_no_motion_config+0x1a4>)
 800285c:	4013      	ands	r3, r2
 800285e:	b21a      	sxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	88db      	ldrh	r3, [r3, #6]
 8002864:	b21b      	sxth	r3, r3
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	b21b      	sxth	r3, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	b21b      	sxth	r3, r3
 8002870:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	b21a      	sxth	r2, r3
 8002876:	4b31      	ldr	r3, [pc, #196]	@ (800293c <set_no_motion_config+0x1a8>)
 8002878:	4013      	ands	r3, r2
 800287a:	b21a      	sxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b21b      	sxth	r3, r3
 8002882:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002886:	b21b      	sxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b21b      	sxth	r3, r3
 800288c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 800288e:	7c3b      	ldrb	r3, [r7, #16]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8002894:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002898:	4b28      	ldr	r3, [pc, #160]	@ (800293c <set_no_motion_config+0x1a8>)
 800289a:	4013      	ands	r3, r2
 800289c:	b21a      	sxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028a8:	b21b      	sxth	r3, r3
 80028aa:	4313      	orrs	r3, r2
 80028ac:	b21b      	sxth	r3, r3
 80028ae:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80028b0:	7c7b      	ldrb	r3, [r7, #17]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80028b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80028ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028be:	b21a      	sxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	891b      	ldrh	r3, [r3, #8]
 80028c4:	035b      	lsls	r3, r3, #13
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 80028ce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 80028d4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80028d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80028d8:	4313      	orrs	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 80028e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 80028ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 80028f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 80028fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80028fc:	8bfb      	ldrh	r3, [r7, #30]
 80028fe:	4313      	orrs	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b29b      	uxth	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 800290a:	f107 0114 	add.w	r1, r7, #20
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2206      	movs	r2, #6
 8002912:	2042      	movs	r0, #66	@ 0x42
 8002914:	f7fe f977 	bl	8000c06 <bmi3_set_regs>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800291e:	e002      	b.n	8002926 <set_no_motion_config+0x192>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002920:	23ff      	movs	r3, #255	@ 0xff
 8002922:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002926:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800292a:	4618      	mov	r0, r3
 800292c:	3738      	adds	r7, #56	@ 0x38
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	fffff000 	.word	0xfffff000
 8002938:	fffffc00 	.word	0xfffffc00
 800293c:	ffffe000 	.word	0xffffe000

08002940 <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800294e:	230b      	movs	r3, #11
 8002950:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d061      	beq.n	8002a20 <get_flat_config+0xe0>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800295c:	f107 0108 	add.w	r1, r7, #8
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2202      	movs	r2, #2
 8002964:	2041      	movs	r0, #65	@ 0x41
 8002966:	f7fe f94e 	bl	8000c06 <bmi3_set_regs>
 800296a:	4603      	mov	r3, r0
 800296c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800296e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d156      	bne.n	8002a24 <get_flat_config+0xe4>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002976:	f107 010c 	add.w	r1, r7, #12
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2204      	movs	r2, #4
 800297e:	2042      	movs	r0, #66	@ 0x42
 8002980:	f7fe f8dc 	bl	8000b3c <bmi3_get_regs>
 8002984:	4603      	mov	r3, r0
 8002986:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002988:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d149      	bne.n	8002a24 <get_flat_config+0xe4>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8002990:	7dbb      	ldrb	r3, [r7, #22]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	75ba      	strb	r2, [r7, #22]
 8002996:	3318      	adds	r3, #24
 8002998:	443b      	add	r3, r7
 800299a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800299e:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80029a0:	7dbb      	ldrb	r3, [r7, #22]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	75ba      	strb	r2, [r7, #22]
 80029a6:	3318      	adds	r3, #24
 80029a8:	443b      	add	r3, r7
 80029aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 80029b2:	8aba      	ldrh	r2, [r7, #20]
 80029b4:	8a7b      	ldrh	r3, [r7, #18]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 80029ba:	8a3b      	ldrh	r3, [r7, #16]
 80029bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 80029c6:	8a3b      	ldrh	r3, [r7, #16]
 80029c8:	119b      	asrs	r3, r3, #6
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 80029d6:	8a3b      	ldrh	r3, [r7, #16]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 80029e0:	7dbb      	ldrb	r3, [r7, #22]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	75ba      	strb	r2, [r7, #22]
 80029e6:	3318      	adds	r3, #24
 80029e8:	443b      	add	r3, r7
 80029ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80029ee:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80029f0:	7dbb      	ldrb	r3, [r7, #22]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	75ba      	strb	r2, [r7, #22]
 80029f6:	3318      	adds	r3, #24
 80029f8:	443b      	add	r3, r7
 80029fa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002a02:	8aba      	ldrh	r2, [r7, #20]
 8002a04:	8a7b      	ldrh	r3, [r7, #18]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 8002a0a:	8a3b      	ldrh	r3, [r7, #16]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 8002a14:	8a3b      	ldrh	r3, [r7, #16]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	809a      	strh	r2, [r3, #4]
 8002a1e:	e001      	b.n	8002a24 <get_flat_config+0xe4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002a20:	23ff      	movs	r3, #255	@ 0xff
 8002a22:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 8002a3e:	230b      	movs	r3, #11
 8002a40:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d06f      	beq.n	8002b28 <set_flat_config+0xf8>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002a48:	f107 010c 	add.w	r1, r7, #12
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	2041      	movs	r0, #65	@ 0x41
 8002a52:	f7fe f8d8 	bl	8000c06 <bmi3_set_regs>
 8002a56:	4603      	mov	r3, r0
 8002a58:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002a5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d164      	bne.n	8002b2c <set_flat_config+0xfc>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8002a62:	7c3b      	ldrb	r3, [r7, #16]
 8002a64:	b21b      	sxth	r3, r3
 8002a66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 8002a7e:	7c3b      	ldrb	r3, [r7, #16]
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a86:	b21a      	sxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	885b      	ldrh	r3, [r3, #2]
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	b21b      	sxth	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b21b      	sxth	r3, r3
 8002a98:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 8002a9a:	7c7b      	ldrb	r3, [r7, #17]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 8002aa0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	88db      	ldrh	r3, [r3, #6]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 8002ab6:	7cbb      	ldrb	r3, [r7, #18]
 8002ab8:	b21b      	sxth	r3, r3
 8002aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	891b      	ldrh	r3, [r3, #8]
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 8002ad6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	b21a      	sxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	889b      	ldrh	r3, [r3, #4]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 8002aec:	8bbb      	ldrh	r3, [r7, #28]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8b7b      	ldrh	r3, [r7, #26]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 8002afa:	8b3b      	ldrh	r3, [r7, #24]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 8002b0a:	8abb      	ldrh	r3, [r7, #20]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8002b14:	f107 0110 	add.w	r1, r7, #16
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	2042      	movs	r0, #66	@ 0x42
 8002b1e:	f7fe f872 	bl	8000c06 <bmi3_set_regs>
 8002b22:	4603      	mov	r3, r0
 8002b24:	77fb      	strb	r3, [r7, #31]
 8002b26:	e001      	b.n	8002b2c <set_flat_config+0xfc>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002b28:	23ff      	movs	r3, #255	@ 0xff
 8002b2a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002b2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002b42:	230d      	movs	r3, #13
 8002b44:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d074      	beq.n	8002c3a <get_sig_motion_config+0x102>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002b50:	f107 010c 	add.w	r1, r7, #12
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2202      	movs	r2, #2
 8002b58:	2041      	movs	r0, #65	@ 0x41
 8002b5a:	f7fe f854 	bl	8000c06 <bmi3_set_regs>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d169      	bne.n	8002c3e <get_sig_motion_config+0x106>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002b6a:	f107 0110 	add.w	r1, r7, #16
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2206      	movs	r2, #6
 8002b72:	2042      	movs	r0, #66	@ 0x42
 8002b74:	f7fd ffe2 	bl	8000b3c <bmi3_get_regs>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8002b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15c      	bne.n	8002c3e <get_sig_motion_config+0x106>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002b84:	7fbb      	ldrb	r3, [r7, #30]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	77ba      	strb	r2, [r7, #30]
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002b92:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002b94:	7fbb      	ldrb	r3, [r7, #30]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	77ba      	strb	r2, [r7, #30]
 8002b9a:	3320      	adds	r3, #32
 8002b9c:	443b      	add	r3, r7
 8002b9e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002ba6:	8bba      	ldrh	r2, [r7, #28]
 8002ba8:	8b7b      	ldrh	r3, [r7, #26]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8b3a      	ldrh	r2, [r7, #24]
 8002bb2:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002bb4:	7fbb      	ldrb	r3, [r7, #30]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	77ba      	strb	r2, [r7, #30]
 8002bba:	3320      	adds	r3, #32
 8002bbc:	443b      	add	r3, r7
 8002bbe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002bc2:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002bc4:	7fbb      	ldrb	r3, [r7, #30]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	77ba      	strb	r2, [r7, #30]
 8002bca:	3320      	adds	r3, #32
 8002bcc:	443b      	add	r3, r7
 8002bce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002bd6:	8bba      	ldrh	r2, [r7, #28]
 8002bd8:	8b7b      	ldrh	r3, [r7, #26]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 8002bde:	8b3b      	ldrh	r3, [r7, #24]
 8002be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 8002bea:	8b3b      	ldrh	r3, [r7, #24]
 8002bec:	0a9b      	lsrs	r3, r3, #10
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8002bf6:	7fbb      	ldrb	r3, [r7, #30]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	77ba      	strb	r2, [r7, #30]
 8002bfc:	3320      	adds	r3, #32
 8002bfe:	443b      	add	r3, r7
 8002c00:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c04:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8002c06:	7fbb      	ldrb	r3, [r7, #30]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	77ba      	strb	r2, [r7, #30]
 8002c0c:	3320      	adds	r3, #32
 8002c0e:	443b      	add	r3, r7
 8002c10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002c18:	8bba      	ldrh	r2, [r7, #28]
 8002c1a:	8b7b      	ldrh	r3, [r7, #26]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 8002c20:	8b3b      	ldrh	r3, [r7, #24]
 8002c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 8002c2c:	8b3b      	ldrh	r3, [r7, #24]
 8002c2e:	0a9b      	lsrs	r3, r3, #10
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	721a      	strb	r2, [r3, #8]
 8002c38:	e001      	b.n	8002c3e <get_sig_motion_config+0x106>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002c3a:	23ff      	movs	r3, #255	@ 0xff
 8002c3c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002c3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	@ 0x38
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8002c56:	230d      	movs	r3, #13
 8002c58:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	2300      	movs	r3, #0
 8002c68:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 809d 	beq.w	8002dac <set_sig_motion_config+0x160>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002c72:	f107 011c 	add.w	r1, r7, #28
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	2041      	movs	r0, #65	@ 0x41
 8002c7c:	f7fd ffc3 	bl	8000c06 <bmi3_set_regs>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 8091 	bne.w	8002db2 <set_sig_motion_config+0x166>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	86bb      	strh	r3, [r7, #52]	@ 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8002c96:	7b7b      	ldrb	r3, [r7, #13]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002ca2:	7bbb      	ldrb	r3, [r7, #14]
 8002ca4:	b21a      	sxth	r2, r3
 8002ca6:	4b46      	ldr	r3, [pc, #280]	@ (8002dc0 <set_sig_motion_config+0x174>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	885b      	ldrh	r3, [r3, #2]
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8002cc4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc0 <set_sig_motion_config+0x174>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	885b      	ldrh	r3, [r3, #2]
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	857b      	strh	r3, [r7, #42]	@ 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 8002ce6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cee:	b21a      	sxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b21b      	sxth	r3, r3
 8002cfc:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002cfe:	7c3b      	ldrb	r3, [r7, #16]
 8002d00:	b21a      	sxth	r2, r3
 8002d02:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc0 <set_sig_motion_config+0x174>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	88db      	ldrh	r3, [r3, #6]
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	84fb      	strh	r3, [r7, #38]	@ 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 8002d1a:	7c7b      	ldrb	r3, [r7, #17]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8002d20:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002d24:	4b26      	ldr	r3, [pc, #152]	@ (8002dc0 <set_sig_motion_config+0x174>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	b21a      	sxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	88db      	ldrh	r3, [r3, #6]
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	4313      	orrs	r3, r2
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	847b      	strh	r3, [r7, #34]	@ 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 8002d3c:	7c7b      	ldrb	r3, [r7, #17]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 8002d42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7a1b      	ldrb	r3, [r3, #8]
 8002d50:	029b      	lsls	r3, r3, #10
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 8002d5a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8002d60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 8002d6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8002d70:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002d72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8002d80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8002d86:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002d88:	8c3b      	ldrh	r3, [r7, #32]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8002d96:	f107 0114 	add.w	r1, r7, #20
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2206      	movs	r2, #6
 8002d9e:	2042      	movs	r0, #66	@ 0x42
 8002da0:	f7fd ff31 	bl	8000c06 <bmi3_set_regs>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002daa:	e002      	b.n	8002db2 <set_sig_motion_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002dac:	23ff      	movs	r3, #255	@ 0xff
 8002dae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002db2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3738      	adds	r7, #56	@ 0x38
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	fffffc00 	.word	0xfffffc00

08002dc4 <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002dd2:	2321      	movs	r3, #33	@ 0x21
 8002dd4:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d057      	beq.n	8002e90 <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002de0:	f107 0108 	add.w	r1, r7, #8
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2202      	movs	r2, #2
 8002de8:	2041      	movs	r0, #65	@ 0x41
 8002dea:	f7fd ff0c 	bl	8000c06 <bmi3_set_regs>
 8002dee:	4603      	mov	r3, r0
 8002df0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d14c      	bne.n	8002e94 <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002dfa:	f107 010c 	add.w	r1, r7, #12
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2204      	movs	r2, #4
 8002e02:	2042      	movs	r0, #66	@ 0x42
 8002e04:	f7fd fe9a 	bl	8000b3c <bmi3_get_regs>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13f      	bne.n	8002e94 <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002e14:	7dbb      	ldrb	r3, [r7, #22]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	75ba      	strb	r2, [r7, #22]
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	443b      	add	r3, r7
 8002e1e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e22:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002e24:	7dbb      	ldrb	r3, [r7, #22]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	75ba      	strb	r2, [r7, #22]
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	443b      	add	r3, r7
 8002e2e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e32:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002e34:	8a7b      	ldrh	r3, [r7, #18]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	b21a      	sxth	r2, r3
 8002e3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b21b      	sxth	r3, r3
 8002e42:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 8002e44:	8a3b      	ldrh	r3, [r7, #16]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 8002e4e:	8a3b      	ldrh	r3, [r7, #16]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 8002e58:	7dbb      	ldrb	r3, [r7, #22]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	75ba      	strb	r2, [r7, #22]
 8002e5e:	3318      	adds	r3, #24
 8002e60:	443b      	add	r3, r7
 8002e62:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e66:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8002e68:	7dbb      	ldrb	r3, [r7, #22]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	75ba      	strb	r2, [r7, #22]
 8002e6e:	3318      	adds	r3, #24
 8002e70:	443b      	add	r3, r7
 8002e72:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e76:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8002e78:	8a7b      	ldrh	r3, [r7, #18]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	b21a      	sxth	r2, r3
 8002e7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	b21b      	sxth	r3, r3
 8002e86:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8a3a      	ldrh	r2, [r7, #16]
 8002e8c:	809a      	strh	r2, [r3, #4]
 8002e8e:	e001      	b.n	8002e94 <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002e90:	23ff      	movs	r3, #255	@ 0xff
 8002e92:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8002eaa:	2321      	movs	r3, #33	@ 0x21
 8002eac:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d04a      	beq.n	8002f52 <set_tilt_config+0xb2>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002ebc:	f107 0110 	add.w	r1, r7, #16
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	2041      	movs	r0, #65	@ 0x41
 8002ec6:	f7fd fe9e 	bl	8000c06 <bmi3_set_regs>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002ece:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d13f      	bne.n	8002f56 <set_tilt_config+0xb6>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 8002ed6:	7a3b      	ldrb	r3, [r7, #8]
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8002ef0:	7a7b      	ldrb	r3, [r7, #9]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 8002ef6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	885b      	ldrh	r3, [r3, #2]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	889b      	ldrh	r3, [r3, #4]
 8002f10:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	889b      	ldrh	r3, [r3, #4]
 8002f1c:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 8002f1e:	8bbb      	ldrh	r3, [r7, #28]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 8002f24:	8b3b      	ldrh	r3, [r7, #24]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8002f2e:	8afb      	ldrh	r3, [r7, #22]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8002f34:	8a7b      	ldrh	r3, [r7, #18]
 8002f36:	0a1b      	lsrs	r3, r3, #8
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8002f3e:	f107 010c 	add.w	r1, r7, #12
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2204      	movs	r2, #4
 8002f46:	2042      	movs	r0, #66	@ 0x42
 8002f48:	f7fd fe5d 	bl	8000c06 <bmi3_set_regs>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e001      	b.n	8002f56 <set_tilt_config+0xb6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002f52:	23ff      	movs	r3, #255	@ 0xff
 8002f54:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8002f70:	231c      	movs	r3, #28
 8002f72:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d073      	beq.n	8003066 <get_orientation_config+0x104>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002f7e:	f107 0108 	add.w	r1, r7, #8
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2202      	movs	r2, #2
 8002f86:	2041      	movs	r0, #65	@ 0x41
 8002f88:	f7fd fe3d 	bl	8000c06 <bmi3_set_regs>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d168      	bne.n	800306a <get_orientation_config+0x108>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8002f98:	f107 010c 	add.w	r1, r7, #12
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	2042      	movs	r0, #66	@ 0x42
 8002fa2:	f7fd fdcb 	bl	8000b3c <bmi3_get_regs>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d15b      	bne.n	800306a <get_orientation_config+0x108>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8002fb2:	7dbb      	ldrb	r3, [r7, #22]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	75ba      	strb	r2, [r7, #22]
 8002fb8:	3318      	adds	r3, #24
 8002fba:	443b      	add	r3, r7
 8002fbc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002fc0:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8002fc2:	7dbb      	ldrb	r3, [r7, #22]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	75ba      	strb	r2, [r7, #22]
 8002fc8:	3318      	adds	r3, #24
 8002fca:	443b      	add	r3, r7
 8002fcc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8002fd4:	8aba      	ldrh	r2, [r7, #20]
 8002fd6:	8a7b      	ldrh	r3, [r7, #18]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 8002fdc:	8a3b      	ldrh	r3, [r7, #16]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 8002fea:	8a3b      	ldrh	r3, [r7, #16]
 8002fec:	105b      	asrs	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 8002ffa:	8a3b      	ldrh	r3, [r7, #16]
 8002ffc:	10db      	asrs	r3, r3, #3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	b2da      	uxtb	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 800300a:	8a3b      	ldrh	r3, [r7, #16]
 800300c:	115b      	asrs	r3, r3, #5
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003014:	b2da      	uxtb	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 800301a:	8a3b      	ldrh	r3, [r7, #16]
 800301c:	0adb      	lsrs	r3, r3, #11
 800301e:	b29b      	uxth	r3, r3
 8003020:	b2da      	uxtb	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8003026:	7dbb      	ldrb	r3, [r7, #22]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	75ba      	strb	r2, [r7, #22]
 800302c:	3318      	adds	r3, #24
 800302e:	443b      	add	r3, r7
 8003030:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003034:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	75ba      	strb	r2, [r7, #22]
 800303c:	3318      	adds	r3, #24
 800303e:	443b      	add	r3, r7
 8003040:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8003048:	8aba      	ldrh	r2, [r7, #20]
 800304a:	8a7b      	ldrh	r3, [r7, #18]
 800304c:	4313      	orrs	r3, r2
 800304e:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 8003050:	8a3b      	ldrh	r3, [r7, #16]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 8003058:	8a3b      	ldrh	r3, [r7, #16]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	b29b      	uxth	r3, r3
 800305e:	b2da      	uxtb	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	715a      	strb	r2, [r3, #5]
 8003064:	e001      	b.n	800306a <get_orientation_config+0x108>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003066:	23ff      	movs	r3, #255	@ 0xff
 8003068:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800306a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b08a      	sub	sp, #40	@ 0x28
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8003084:	231c      	movs	r3, #28
 8003086:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80a3 	beq.w	80031d6 <set_orientation_config+0x160>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003090:	f107 010c 	add.w	r1, r7, #12
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2202      	movs	r2, #2
 8003098:	2041      	movs	r0, #65	@ 0x41
 800309a:	f7fd fdb4 	bl	8000c06 <bmi3_set_regs>
 800309e:	4603      	mov	r3, r0
 80030a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI3_OK)
 80030a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 8097 	bne.w	80031dc <set_orientation_config+0x166>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 80030ae:	7c3b      	ldrb	r3, [r7, #16]
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b21b      	sxth	r3, r3
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	4313      	orrs	r3, r2
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 80030ca:	7c3b      	ldrb	r3, [r7, #16]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	f023 0306 	bic.w	r3, r3, #6
 80030d2:	b21a      	sxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	b21b      	sxth	r3, r3
 80030dc:	f003 0306 	and.w	r3, r3, #6
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 80030e8:	7c3b      	ldrb	r3, [r7, #16]
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	f023 0318 	bic.w	r3, r3, #24
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	789b      	ldrb	r3, [r3, #2]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	f003 0318 	and.w	r3, r3, #24
 80030fe:	b21b      	sxth	r3, r3
 8003100:	4313      	orrs	r3, r2
 8003102:	b21b      	sxth	r3, r3
 8003104:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 8003106:	7c3b      	ldrb	r3, [r7, #16]
 8003108:	b21b      	sxth	r3, r3
 800310a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 800310e:	b21a      	sxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	78db      	ldrb	r3, [r3, #3]
 8003114:	015b      	lsls	r3, r3, #5
 8003116:	b21b      	sxth	r3, r3
 8003118:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800311c:	b21b      	sxth	r3, r3
 800311e:	4313      	orrs	r3, r2
 8003120:	b21b      	sxth	r3, r3
 8003122:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 8003124:	7c7b      	ldrb	r3, [r7, #17]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 800312a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800312e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8003132:	b21a      	sxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	78db      	ldrb	r3, [r3, #3]
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	b21b      	sxth	r3, r3
 800313c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8003140:	b21b      	sxth	r3, r3
 8003142:	4313      	orrs	r3, r2
 8003144:	b21b      	sxth	r3, r3
 8003146:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 8003148:	7c7b      	ldrb	r3, [r7, #17]
 800314a:	b21a      	sxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	791b      	ldrb	r3, [r3, #4]
 8003150:	02db      	lsls	r3, r3, #11
 8003152:	b21b      	sxth	r3, r3
 8003154:	4313      	orrs	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 800315a:	7cbb      	ldrb	r3, [r7, #18]
 800315c:	b21b      	sxth	r3, r3
 800315e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003162:	b21a      	sxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	799b      	ldrb	r3, [r3, #6]
 8003168:	b21b      	sxth	r3, r3
 800316a:	4313      	orrs	r3, r2
 800316c:	b21b      	sxth	r3, r3
 800316e:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	b21a      	sxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	795b      	ldrb	r3, [r3, #5]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b21b      	sxth	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b21b      	sxth	r3, r3
 8003180:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8003182:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4313      	orrs	r3, r2
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8c3b      	ldrh	r3, [r7, #32]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	b2da      	uxtb	r2, r3
 8003196:	8bfb      	ldrh	r3, [r7, #30]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	4313      	orrs	r3, r2
 800319c:	b2db      	uxtb	r3, r3
 800319e:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 80031a0:	8bba      	ldrh	r2, [r7, #28]
 80031a2:	8b7b      	ldrh	r3, [r7, #26]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 80031b0:	8b3b      	ldrh	r3, [r7, #24]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 80031b6:	8afb      	ldrh	r3, [r7, #22]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 80031c0:	f107 0110 	add.w	r1, r7, #16
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2204      	movs	r2, #4
 80031c8:	2042      	movs	r0, #66	@ 0x42
 80031ca:	f7fd fd1c 	bl	8000c06 <bmi3_set_regs>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80031d4:	e002      	b.n	80031dc <set_orientation_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80031d6:	23ff      	movs	r3, #255	@ 0xff
 80031d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80031dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	@ 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	@ 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 8003206:	2310      	movs	r3, #16
 8003208:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 81e7 	beq.w	80035e6 <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003218:	f107 010c 	add.w	r1, r7, #12
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2202      	movs	r2, #2
 8003220:	2041      	movs	r0, #65	@ 0x41
 8003222:	f7fd fcf0 	bl	8000c06 <bmi3_set_regs>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 800322c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 81db 	bne.w	80035ec <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8003236:	f107 0110 	add.w	r1, r7, #16
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2218      	movs	r2, #24
 800323e:	2042      	movs	r0, #66	@ 0x42
 8003240:	f7fd fc7c 	bl	8000b3c <bmi3_get_regs>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (rslt == BMI3_OK)
 800324a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 81cc 	bne.w	80035ec <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003254:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800325e:	3330      	adds	r3, #48	@ 0x30
 8003260:	443b      	add	r3, r7
 8003262:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003266:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003268:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003272:	3330      	adds	r3, #48	@ 0x30
 8003274:	443b      	add	r3, r7
 8003276:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800327a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800327c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	b21a      	sxth	r2, r3
 8003282:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003286:	4313      	orrs	r3, r2
 8003288:	b21b      	sxth	r3, r3
 800328a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 800328c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800328e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 8003298:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800329a:	129b      	asrs	r3, r3, #10
 800329c:	b29b      	uxth	r3, r3
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 80032a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80032b2:	3330      	adds	r3, #48	@ 0x30
 80032b4:	443b      	add	r3, r7
 80032b6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80032bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80032c6:	3330      	adds	r3, #48	@ 0x30
 80032c8:	443b      	add	r3, r7
 80032ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80032d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80032da:	4313      	orrs	r3, r2
 80032dc:	b21b      	sxth	r3, r3
 80032de:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80032e4:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 80032e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80032f0:	3330      	adds	r3, #48	@ 0x30
 80032f2:	443b      	add	r3, r7
 80032f4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032f8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80032fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003304:	3330      	adds	r3, #48	@ 0x30
 8003306:	443b      	add	r3, r7
 8003308:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800330c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800330e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	b21a      	sxth	r2, r3
 8003314:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003318:	4313      	orrs	r3, r2
 800331a:	b21b      	sxth	r3, r3
 800331c:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003322:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 8003324:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800332e:	3330      	adds	r3, #48	@ 0x30
 8003330:	443b      	add	r3, r7
 8003332:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003336:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003338:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003342:	3330      	adds	r3, #48	@ 0x30
 8003344:	443b      	add	r3, r7
 8003346:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800334a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800334c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	b21a      	sxth	r2, r3
 8003352:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003356:	4313      	orrs	r3, r2
 8003358:	b21b      	sxth	r3, r3
 800335a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003360:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 8003362:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800336c:	3330      	adds	r3, #48	@ 0x30
 800336e:	443b      	add	r3, r7
 8003370:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003374:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003376:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003380:	3330      	adds	r3, #48	@ 0x30
 8003382:	443b      	add	r3, r7
 8003384:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003388:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800338a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	b21a      	sxth	r2, r3
 8003390:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003394:	4313      	orrs	r3, r2
 8003396:	b21b      	sxth	r3, r3
 8003398:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800339e:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 80033a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80033aa:	3330      	adds	r3, #48	@ 0x30
 80033ac:	443b      	add	r3, r7
 80033ae:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033b2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80033b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80033be:	3330      	adds	r3, #48	@ 0x30
 80033c0:	443b      	add	r3, r7
 80033c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80033c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	b21a      	sxth	r2, r3
 80033ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80033d2:	4313      	orrs	r3, r2
 80033d4:	b21b      	sxth	r3, r3
 80033d6:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80033dc:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 80033de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80033e8:	3330      	adds	r3, #48	@ 0x30
 80033ea:	443b      	add	r3, r7
 80033ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80033f0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80033f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80033fc:	3330      	adds	r3, #48	@ 0x30
 80033fe:	443b      	add	r3, r7
 8003400:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003404:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003406:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	b21a      	sxth	r2, r3
 800340c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003410:	4313      	orrs	r3, r2
 8003412:	b21b      	sxth	r3, r3
 8003414:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800341a:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 800341c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003426:	3330      	adds	r3, #48	@ 0x30
 8003428:	443b      	add	r3, r7
 800342a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800342e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003430:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800343a:	3330      	adds	r3, #48	@ 0x30
 800343c:	443b      	add	r3, r7
 800343e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003442:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003444:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	b21a      	sxth	r2, r3
 800344a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800344e:	4313      	orrs	r3, r2
 8003450:	b21b      	sxth	r3, r3
 8003452:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 8003454:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 8003460:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003462:	111b      	asrs	r3, r3, #4
 8003464:	b29b      	uxth	r3, r3
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 8003470:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 800347a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003484:	3330      	adds	r3, #48	@ 0x30
 8003486:	443b      	add	r3, r7
 8003488:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800348c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800348e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003498:	3330      	adds	r3, #48	@ 0x30
 800349a:	443b      	add	r3, r7
 800349c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80034a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80034a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	b21a      	sxth	r2, r3
 80034a8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b21b      	sxth	r3, r3
 80034b0:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 80034b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 80034bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80034c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80034d0:	3330      	adds	r3, #48	@ 0x30
 80034d2:	443b      	add	r3, r7
 80034d4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80034d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80034da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80034e4:	3330      	adds	r3, #48	@ 0x30
 80034e6:	443b      	add	r3, r7
 80034e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80034ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80034ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	b21a      	sxth	r2, r3
 80034f4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 80034fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	b29a      	uxth	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 800350a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003514:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800351e:	3330      	adds	r3, #48	@ 0x30
 8003520:	443b      	add	r3, r7
 8003522:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003526:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003528:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003532:	3330      	adds	r3, #48	@ 0x30
 8003534:	443b      	add	r3, r7
 8003536:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800353a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800353c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	b21a      	sxth	r2, r3
 8003542:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003546:	4313      	orrs	r3, r2
 8003548:	b21b      	sxth	r3, r3
 800354a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 800354c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800354e:	b2db      	uxtb	r3, r3
 8003550:	b29a      	uxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 8003556:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003560:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800356a:	3330      	adds	r3, #48	@ 0x30
 800356c:	443b      	add	r3, r7
 800356e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003572:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003574:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800357e:	3330      	adds	r3, #48	@ 0x30
 8003580:	443b      	add	r3, r7
 8003582:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003586:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003588:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	b21a      	sxth	r2, r3
 800358e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003592:	4313      	orrs	r3, r2
 8003594:	b21b      	sxth	r3, r3
 8003596:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 8003598:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	845a      	strh	r2, [r3, #34]	@ 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 80035a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035a6:	105b      	asrs	r3, r3, #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	849a      	strh	r2, [r3, #36]	@ 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 80035b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035b6:	111b      	asrs	r3, r3, #4
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	84da      	strh	r2, [r3, #38]	@ 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 80035c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035c6:	115b      	asrs	r3, r3, #5
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 80035d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035d6:	129b      	asrs	r3, r3, #10
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035e4:	e002      	b.n	80035ec <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 80035e6:	23fa      	movs	r3, #250	@ 0xfa
 80035e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80035ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3730      	adds	r7, #48	@ 0x30
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0a4      	sub	sp, #144	@ 0x90
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 8003602:	2310      	movs	r3, #16
 8003604:	873b      	strh	r3, [r7, #56]	@ 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	60da      	str	r2, [r3, #12]
 800362c:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8259 	beq.w	8003ae8 <set_step_config+0x4f0>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003636:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2202      	movs	r2, #2
 800363e:	2041      	movs	r0, #65	@ 0x41
 8003640:	f7fd fae1 	bl	8000c06 <bmi3_set_regs>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (rslt == BMI3_OK)
 800364a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 824d 	bne.w	8003aee <set_step_config+0x4f6>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 8003654:	7a3b      	ldrb	r3, [r7, #8]
 8003656:	b21a      	sxth	r2, r3
 8003658:	4bac      	ldr	r3, [pc, #688]	@ (800390c <set_step_config+0x314>)
 800365a:	4013      	ands	r3, r2
 800365c:	b21a      	sxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b21b      	sxth	r3, r3
 8003664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003668:	b21b      	sxth	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b21b      	sxth	r3, r3
 800366e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 8003672:	7a7b      	ldrb	r3, [r7, #9]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 800367a:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 800367e:	4ba3      	ldr	r3, [pc, #652]	@ (800390c <set_step_config+0x314>)
 8003680:	4013      	ands	r3, r2
 8003682:	b21a      	sxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b21b      	sxth	r3, r3
 800368a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800368e:	b21b      	sxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b21b      	sxth	r3, r3
 8003694:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 8003698:	7a7b      	ldrb	r3, [r7, #9]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 80036a0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80036a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	885b      	ldrh	r3, [r3, #2]
 80036ae:	029b      	lsls	r3, r3, #10
 80036b0:	b21b      	sxth	r3, r3
 80036b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b6:	b21b      	sxth	r3, r3
 80036b8:	4313      	orrs	r3, r2
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	889b      	ldrh	r3, [r3, #4]
 80036c4:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 80036c8:	7afb      	ldrb	r3, [r7, #11]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	889b      	ldrh	r3, [r3, #4]
 80036d4:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	88db      	ldrh	r3, [r3, #6]
 80036dc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 80036e0:	7b7b      	ldrb	r3, [r7, #13]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	88db      	ldrh	r3, [r3, #6]
 80036ec:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	891b      	ldrh	r3, [r3, #8]
 80036f4:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	891b      	ldrh	r3, [r3, #8]
 8003704:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	895b      	ldrh	r3, [r3, #10]
 800370c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 8003710:	7c7b      	ldrb	r3, [r7, #17]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	895b      	ldrh	r3, [r3, #10]
 800371c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	899b      	ldrh	r3, [r3, #12]
 8003724:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	899b      	ldrh	r3, [r3, #12]
 8003734:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	89db      	ldrh	r3, [r3, #14]
 800373c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 8003740:	7d7b      	ldrb	r3, [r7, #21]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	89db      	ldrh	r3, [r3, #14]
 800374c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 8003750:	7dbb      	ldrb	r3, [r7, #22]
 8003752:	b21b      	sxth	r3, r3
 8003754:	f023 030f 	bic.w	r3, r3, #15
 8003758:	b21a      	sxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8a1b      	ldrh	r3, [r3, #16]
 800375e:	b21b      	sxth	r3, r3
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	b21b      	sxth	r3, r3
 8003766:	4313      	orrs	r3, r2
 8003768:	b21b      	sxth	r3, r3
 800376a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 800376e:	7dbb      	ldrb	r3, [r7, #22]
 8003770:	b21b      	sxth	r3, r3
 8003772:	f023 0310 	bic.w	r3, r3, #16
 8003776:	b21a      	sxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8a5b      	ldrh	r3, [r3, #18]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	b21b      	sxth	r3, r3
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	b21b      	sxth	r3, r3
 8003786:	4313      	orrs	r3, r2
 8003788:	b21b      	sxth	r3, r3
 800378a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 800378e:	7dbb      	ldrb	r3, [r7, #22]
 8003790:	b21b      	sxth	r3, r3
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	b21a      	sxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8a9b      	ldrh	r3, [r3, #20]
 800379c:	015b      	lsls	r3, r3, #5
 800379e:	b21b      	sxth	r3, r3
 80037a0:	4313      	orrs	r3, r2
 80037a2:	b21b      	sxth	r3, r3
 80037a4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 80037b0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	b21a      	sxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8a9b      	ldrh	r3, [r3, #20]
 80037be:	015b      	lsls	r3, r3, #5
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 80037ca:	7e3b      	ldrb	r3, [r7, #24]
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037d2:	b21a      	sxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8adb      	ldrh	r3, [r3, #22]
 80037d8:	b21b      	sxth	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	b21b      	sxth	r3, r3
 80037de:	4313      	orrs	r3, r2
 80037e0:	b21b      	sxth	r3, r3
 80037e2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 80037e6:	7e7b      	ldrb	r3, [r7, #25]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 80037ee:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	b21a      	sxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8b1b      	ldrh	r3, [r3, #24]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	4313      	orrs	r3, r2
 8003800:	b21b      	sxth	r3, r3
 8003802:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 8003806:	7ebb      	ldrb	r3, [r7, #26]
 8003808:	b21b      	sxth	r3, r3
 800380a:	f023 030f 	bic.w	r3, r3, #15
 800380e:	b21a      	sxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8b5b      	ldrh	r3, [r3, #26]
 8003814:	b21b      	sxth	r3, r3
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	b21b      	sxth	r3, r3
 800381c:	4313      	orrs	r3, r2
 800381e:	b21b      	sxth	r3, r3
 8003820:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 8003824:	7ebb      	ldrb	r3, [r7, #26]
 8003826:	b21b      	sxth	r3, r3
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	b21a      	sxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8b9b      	ldrh	r3, [r3, #28]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	b21b      	sxth	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	b21b      	sxth	r3, r3
 800383a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 800383e:	7efb      	ldrb	r3, [r7, #27]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 8003846:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	b21a      	sxth	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8b9b      	ldrh	r3, [r3, #28]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	b21b      	sxth	r3, r3
 8003858:	4313      	orrs	r3, r2
 800385a:	b21b      	sxth	r3, r3
 800385c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 8003860:	7f3b      	ldrb	r3, [r7, #28]
 8003862:	b21b      	sxth	r3, r3
 8003864:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003868:	b21a      	sxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8bdb      	ldrh	r3, [r3, #30]
 800386e:	b21b      	sxth	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	b21b      	sxth	r3, r3
 8003874:	4313      	orrs	r3, r2
 8003876:	b21b      	sxth	r3, r3
 8003878:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 800387c:	7f7b      	ldrb	r3, [r7, #29]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 8003884:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003888:	b2db      	uxtb	r3, r3
 800388a:	b21a      	sxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8c1b      	ldrh	r3, [r3, #32]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	b21b      	sxth	r3, r3
 8003894:	4313      	orrs	r3, r2
 8003896:	b21b      	sxth	r3, r3
 8003898:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 800389c:	7fbb      	ldrb	r3, [r7, #30]
 800389e:	b21b      	sxth	r3, r3
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	b21a      	sxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	b21b      	sxth	r3, r3
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 80038ba:	7fbb      	ldrb	r3, [r7, #30]
 80038bc:	b21b      	sxth	r3, r3
 80038be:	f023 030e 	bic.w	r3, r3, #14
 80038c2:	b21a      	sxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	b21b      	sxth	r3, r3
 80038cc:	f003 030e 	and.w	r3, r3, #14
 80038d0:	b21b      	sxth	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 80038da:	7fbb      	ldrb	r3, [r7, #30]
 80038dc:	b21b      	sxth	r3, r3
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	b21a      	sxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	b21b      	sxth	r3, r3
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	b21b      	sxth	r3, r3
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b21b      	sxth	r3, r3
 80038f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80038fa:	7fbb      	ldrb	r3, [r7, #30]
 80038fc:	b21b      	sxth	r3, r3
 80038fe:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8003902:	b21a      	sxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	015b      	lsls	r3, r3, #5
 800390a:	e001      	b.n	8003910 <set_step_config+0x318>
 800390c:	fffffc00 	.word	0xfffffc00
 8003910:	b21b      	sxth	r3, r3
 8003912:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 8003916:	b21b      	sxth	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b21b      	sxth	r3, r3
 800391c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 8003920:	7ffb      	ldrb	r3, [r7, #31]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 8003928:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800392c:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8003930:	b21a      	sxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	015b      	lsls	r3, r3, #5
 8003938:	b21b      	sxth	r3, r3
 800393a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800393e:	b21b      	sxth	r3, r3
 8003940:	4313      	orrs	r3, r2
 8003942:	b21b      	sxth	r3, r3
 8003944:	87fb      	strh	r3, [r7, #62]	@ 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 8003946:	7ffb      	ldrb	r3, [r7, #31]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 800394c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8003950:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003954:	b21a      	sxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395a:	029b      	lsls	r3, r3, #10
 800395c:	b21b      	sxth	r3, r3
 800395e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003962:	b21b      	sxth	r3, r3
 8003964:	4313      	orrs	r3, r2
 8003966:	b21b      	sxth	r3, r3
 8003968:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            step_config[0] = (uint8_t)watermark1;
 800396a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 8003974:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8003978:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800397c:	4313      	orrs	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	b29b      	uxth	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 800398a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 8003994:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	b29b      	uxth	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 80039a2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 80039ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 80039ba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 80039c4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 80039d2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 80039dc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 80039ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 80039f4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 8003a02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 8003a0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 8003a1a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4313      	orrs	r3, r2
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4313      	orrs	r3, r2
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 8003a38:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 8003a46:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 8003a50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 8003a5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 8003a72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            step_config[20] = (uint8_t)step_duration_max;
 8003a80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 8003a8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 8003a98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	b2db      	uxtb	r3, r3
            step_config[22] =
 8003abc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8003ac0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003ac2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8003ad2:	f107 0120 	add.w	r1, r7, #32
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2218      	movs	r2, #24
 8003ada:	2042      	movs	r0, #66	@ 0x42
 8003adc:	f7fd f893 	bl	8000c06 <bmi3_set_regs>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003ae6:	e002      	b.n	8003aee <set_step_config+0x4f6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ae8:	23ff      	movs	r3, #255	@ 0xff
 8003aea:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return rslt;
 8003aee:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3790      	adds	r7, #144	@ 0x90
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop

08003afc <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003b0e:	231e      	movs	r3, #30
 8003b10:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a4 	beq.w	8003c66 <get_tap_config+0x16a>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003b1e:	f107 010c 	add.w	r1, r7, #12
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2202      	movs	r2, #2
 8003b26:	2041      	movs	r0, #65	@ 0x41
 8003b28:	f7fd f86d 	bl	8000c06 <bmi3_set_regs>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003b30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 8098 	bne.w	8003c6a <get_tap_config+0x16e>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8003b3a:	f107 0110 	add.w	r1, r7, #16
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2206      	movs	r2, #6
 8003b42:	2042      	movs	r0, #66	@ 0x42
 8003b44:	f7fc fffa 	bl	8000b3c <bmi3_get_regs>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8003b4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f040 808a 	bne.w	8003c6a <get_tap_config+0x16e>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003b56:	7fbb      	ldrb	r3, [r7, #30]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	77ba      	strb	r2, [r7, #30]
 8003b5c:	3320      	adds	r3, #32
 8003b5e:	443b      	add	r3, r7
 8003b60:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003b64:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003b66:	7fbb      	ldrb	r3, [r7, #30]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	77ba      	strb	r2, [r7, #30]
 8003b6c:	3320      	adds	r3, #32
 8003b6e:	443b      	add	r3, r7
 8003b70:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003b78:	8bba      	ldrh	r2, [r7, #28]
 8003b7a:	8b7b      	ldrh	r3, [r7, #26]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 8003b80:	8b3b      	ldrh	r3, [r7, #24]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 8003b8e:	8b3b      	ldrh	r3, [r7, #24]
 8003b90:	109b      	asrs	r3, r3, #2
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 8003b9e:	8b3b      	ldrh	r3, [r7, #24]
 8003ba0:	10db      	asrs	r3, r3, #3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 8003bae:	8b3b      	ldrh	r3, [r7, #24]
 8003bb0:	119b      	asrs	r3, r3, #6
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003bbe:	7fbb      	ldrb	r3, [r7, #30]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	77ba      	strb	r2, [r7, #30]
 8003bc4:	3320      	adds	r3, #32
 8003bc6:	443b      	add	r3, r7
 8003bc8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003bcc:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003bce:	7fbb      	ldrb	r3, [r7, #30]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	77ba      	strb	r2, [r7, #30]
 8003bd4:	3320      	adds	r3, #32
 8003bd6:	443b      	add	r3, r7
 8003bd8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003be0:	8bba      	ldrh	r2, [r7, #28]
 8003be2:	8b7b      	ldrh	r3, [r7, #26]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 8003be8:	8b3b      	ldrh	r3, [r7, #24]
 8003bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 8003bf4:	8b3b      	ldrh	r3, [r7, #24]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8003c00:	7fbb      	ldrb	r3, [r7, #30]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	77ba      	strb	r2, [r7, #30]
 8003c06:	3320      	adds	r3, #32
 8003c08:	443b      	add	r3, r7
 8003c0a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003c0e:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8003c10:	7fbb      	ldrb	r3, [r7, #30]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	77ba      	strb	r2, [r7, #30]
 8003c16:	3320      	adds	r3, #32
 8003c18:	443b      	add	r3, r7
 8003c1a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8003c22:	8bba      	ldrh	r2, [r7, #28]
 8003c24:	8b7b      	ldrh	r3, [r7, #26]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 8003c2a:	8b3b      	ldrh	r3, [r7, #24]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 8003c38:	8b3b      	ldrh	r3, [r7, #24]
 8003c3a:	111b      	asrs	r3, r3, #4
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 8003c48:	8b3b      	ldrh	r3, [r7, #24]
 8003c4a:	121b      	asrs	r3, r3, #8
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 8003c58:	8b3b      	ldrh	r3, [r7, #24]
 8003c5a:	0b1b      	lsrs	r3, r3, #12
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	729a      	strb	r2, [r3, #10]
 8003c64:	e001      	b.n	8003c6a <get_tap_config+0x16e>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003c66:	23ff      	movs	r3, #255	@ 0xff
 8003c68:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003c6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	@ 0x30
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	2300      	movs	r3, #0
 8003c88:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8003c8a:	231e      	movs	r3, #30
 8003c8c:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80e8 	beq.w	8003e66 <set_tap_config+0x1ee>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003c96:	f107 010c 	add.w	r1, r7, #12
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	2041      	movs	r0, #65	@ 0x41
 8003ca0:	f7fc ffb1 	bl	8000c06 <bmi3_set_regs>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8003caa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f040 80dc 	bne.w	8003e6c <set_tap_config+0x1f4>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8003cb4:	7c3b      	ldrb	r3, [r7, #16]
 8003cb6:	b21b      	sxth	r3, r3
 8003cb8:	f023 0303 	bic.w	r3, r3, #3
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	b21b      	sxth	r3, r3
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8003cd0:	7c3b      	ldrb	r3, [r7, #16]
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	f023 0304 	bic.w	r3, r3, #4
 8003cd8:	b21a      	sxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	b21b      	sxth	r3, r3
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b21b      	sxth	r3, r3
 8003cec:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8003cee:	7c3b      	ldrb	r3, [r7, #16]
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003cf6:	b21a      	sxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	789b      	ldrb	r3, [r3, #2]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	b21b      	sxth	r3, r3
 8003d00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8003d0c:	7c3b      	ldrb	r3, [r7, #16]
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	78db      	ldrb	r3, [r3, #3]
 8003d1a:	019b      	lsls	r3, r3, #6
 8003d1c:	b21b      	sxth	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	b21b      	sxth	r3, r3
 8003d26:	84fb      	strh	r3, [r7, #38]	@ 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003d28:	7cbb      	ldrb	r3, [r7, #18]
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	4b52      	ldr	r3, [pc, #328]	@ (8003e78 <set_tap_config+0x200>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	889b      	ldrh	r3, [r3, #4]
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3c:	b21b      	sxth	r3, r3
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	b21b      	sxth	r3, r3
 8003d42:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8003d4a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e78 <set_tap_config+0x200>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 8003d6c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	799b      	ldrb	r3, [r3, #6]
 8003d7a:	029b      	lsls	r3, r3, #10
 8003d7c:	b21b      	sxth	r3, r3
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	b21b      	sxth	r3, r3
 8003d82:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8003d84:	7d3b      	ldrb	r3, [r7, #20]
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	f023 030f 	bic.w	r3, r3, #15
 8003d8c:	b21a      	sxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	79db      	ldrb	r3, [r3, #7]
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	b21b      	sxth	r3, r3
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8003da0:	7d3b      	ldrb	r3, [r7, #20]
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003da8:	b21a      	sxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7a1b      	ldrb	r3, [r3, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	b21b      	sxth	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	b21b      	sxth	r3, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8003dba:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8003dbc:	7d7b      	ldrb	r3, [r7, #21]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 8003dc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003dc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dca:	b21a      	sxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7a5b      	ldrb	r3, [r3, #9]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	b21b      	sxth	r3, r3
 8003dd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b21b      	sxth	r3, r3
 8003dde:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8003de0:	7d7b      	ldrb	r3, [r7, #21]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 8003de6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dee:	b21a      	sxth	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	7a9b      	ldrb	r3, [r3, #10]
 8003df4:	031b      	lsls	r3, r3, #12
 8003df6:	b21b      	sxth	r3, r3
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	b21b      	sxth	r3, r3
 8003dfc:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8003dfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 8003e1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8003e22:	8c3a      	ldrh	r2, [r7, #32]
 8003e24:	8bfb      	ldrh	r3, [r7, #30]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8003e32:	8bbb      	ldrh	r3, [r7, #28]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	8b7b      	ldrh	r3, [r7, #26]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8003e40:	8b3a      	ldrh	r2, [r7, #24]
 8003e42:	8afb      	ldrh	r3, [r7, #22]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8003e50:	f107 0110 	add.w	r1, r7, #16
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2206      	movs	r2, #6
 8003e58:	2042      	movs	r0, #66	@ 0x42
 8003e5a:	f7fc fed4 	bl	8000c06 <bmi3_set_regs>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003e64:	e002      	b.n	8003e6c <set_tap_config+0x1f4>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003e66:	23ff      	movs	r3, #255	@ 0xff
 8003e68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3730      	adds	r7, #48	@ 0x30
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	fffffc00 	.word	0xfffffc00

08003e7c <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003e86:	2300      	movs	r3, #0
 8003e88:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d03a      	beq.n	8003f06 <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8003e90:	7b3b      	ldrb	r3, [r7, #12]
 8003e92:	b21b      	sxth	r3, r3
 8003e94:	f023 030f 	bic.w	r3, r3, #15
 8003e98:	b21a      	sxth	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	b21b      	sxth	r3, r3
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	b21b      	sxth	r3, r3
 8003eaa:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8003eac:	7b7b      	ldrb	r3, [r7, #13]
 8003eae:	b21a      	sxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	789b      	ldrb	r3, [r3, #2]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8003ec4:	7b7b      	ldrb	r3, [r7, #13]
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	031b      	lsls	r3, r3, #12
 8003ece:	b21b      	sxth	r3, r3
 8003ed0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b21b      	sxth	r3, r3
 8003eda:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8003edc:	8abb      	ldrh	r3, [r7, #20]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8003ee2:	8a7a      	ldrh	r2, [r7, #18]
 8003ee4:	8a3b      	ldrh	r3, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 8003ef2:	f107 010c 	add.w	r1, r7, #12
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	2028      	movs	r0, #40	@ 0x28
 8003efc:	f7fc fe83 	bl	8000c06 <bmi3_set_regs>
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]
 8003f04:	e001      	b.n	8003f0a <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f06:	23ff      	movs	r3, #255	@ 0xff
 8003f08:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8003f20:	2300      	movs	r3, #0
 8003f22:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d029      	beq.n	8003f7e <get_alternate_accel_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 8003f2a:	f107 0108 	add.w	r1, r7, #8
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2202      	movs	r2, #2
 8003f32:	2028      	movs	r0, #40	@ 0x28
 8003f34:	f7fc fe02 	bl	8000b3c <bmi3_get_regs>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11e      	bne.n	8003f82 <get_alternate_accel_config+0x6c>
        {
            reg_data = data_array[0];
 8003f44:	7a3b      	ldrb	r3, [r7, #8]
 8003f46:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 8003f48:	89bb      	ldrh	r3, [r7, #12]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8003f56:	7a7b      	ldrb	r3, [r7, #9]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 8003f5c:	89bb      	ldrh	r3, [r7, #12]
 8003f5e:	121b      	asrs	r3, r3, #8
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 8003f6c:	89bb      	ldrh	r3, [r7, #12]
 8003f6e:	131b      	asrs	r3, r3, #12
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	705a      	strb	r2, [r3, #1]
 8003f7c:	e001      	b.n	8003f82 <get_alternate_accel_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f7e:	23ff      	movs	r3, #255	@ 0xff
 8003f80:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003f98:	2300      	movs	r3, #0
 8003f9a:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d03a      	beq.n	8004018 <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8003fa2:	7b3b      	ldrb	r3, [r7, #12]
 8003fa4:	b21b      	sxth	r3, r3
 8003fa6:	f023 030f 	bic.w	r3, r3, #15
 8003faa:	b21a      	sxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b21b      	sxth	r3, r3
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	b21b      	sxth	r3, r3
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	b21b      	sxth	r3, r3
 8003fbc:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8003fbe:	7b7b      	ldrb	r3, [r7, #13]
 8003fc0:	b21a      	sxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	789b      	ldrb	r3, [r3, #2]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fce:	b21b      	sxth	r3, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b21b      	sxth	r3, r3
 8003fd4:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 8003fd6:	7b7b      	ldrb	r3, [r7, #13]
 8003fd8:	b21a      	sxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	031b      	lsls	r3, r3, #12
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003fe6:	b21b      	sxth	r3, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 8003fee:	8abb      	ldrh	r3, [r7, #20]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 8003ff4:	8a7a      	ldrh	r2, [r7, #18]
 8003ff6:	8a3b      	ldrh	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 8004004:	f107 010c 	add.w	r1, r7, #12
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2202      	movs	r2, #2
 800400c:	2029      	movs	r0, #41	@ 0x29
 800400e:	f7fc fdfa 	bl	8000c06 <bmi3_set_regs>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]
 8004016:	e001      	b.n	800401c <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004018:	23ff      	movs	r3, #255	@ 0xff
 800401a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800401c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8004032:	2300      	movs	r3, #0
 8004034:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d029      	beq.n	8004090 <get_alternate_gyro_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 800403c:	f107 0108 	add.w	r1, r7, #8
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2202      	movs	r2, #2
 8004044:	2029      	movs	r0, #41	@ 0x29
 8004046:	f7fc fd79 	bl	8000b3c <bmi3_get_regs>
 800404a:	4603      	mov	r3, r0
 800404c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11e      	bne.n	8004094 <get_alternate_gyro_config+0x6c>
        {
            reg_data = data_array[0];
 8004056:	7a3b      	ldrb	r3, [r7, #8]
 8004058:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 800405a:	89bb      	ldrh	r3, [r7, #12]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	b2da      	uxtb	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8004068:	7a7b      	ldrb	r3, [r7, #9]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 800406e:	89bb      	ldrh	r3, [r7, #12]
 8004070:	121b      	asrs	r3, r3, #8
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	b2da      	uxtb	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 800407e:	89bb      	ldrh	r3, [r7, #12]
 8004080:	131b      	asrs	r3, r3, #12
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	b2da      	uxtb	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	705a      	strb	r2, [r3, #1]
 800408e:	e001      	b.n	8004094 <get_alternate_gyro_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004090:	23ff      	movs	r3, #255	@ 0xff
 8004092:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 80040aa:	2300      	movs	r3, #0
 80040ac:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 80040ae:	2323      	movs	r3, #35	@ 0x23
 80040b0:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d035      	beq.n	8004124 <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80040b8:	f107 010c 	add.w	r1, r7, #12
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2202      	movs	r2, #2
 80040c0:	2041      	movs	r0, #65	@ 0x41
 80040c2:	f7fc fda0 	bl	8000c06 <bmi3_set_regs>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80040ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d12a      	bne.n	8004128 <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 80040d2:	7c3b      	ldrb	r3, [r7, #16]
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	f023 030f 	bic.w	r3, r3, #15
 80040da:	b25a      	sxtb	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 80040ee:	7c3b      	ldrb	r3, [r7, #16]
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	b25a      	sxtb	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	b25b      	sxtb	r3, r3
 8004100:	4313      	orrs	r3, r2
 8004102:	b25b      	sxtb	r3, r3
 8004104:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 8004106:	7dba      	ldrb	r2, [r7, #22]
 8004108:	7d7b      	ldrb	r3, [r7, #21]
 800410a:	4313      	orrs	r3, r2
 800410c:	b2db      	uxtb	r3, r3
 800410e:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8004110:	f107 0110 	add.w	r1, r7, #16
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2202      	movs	r2, #2
 8004118:	2042      	movs	r0, #66	@ 0x42
 800411a:	f7fc fd74 	bl	8000c06 <bmi3_set_regs>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
 8004122:	e001      	b.n	8004128 <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004124:	23ff      	movs	r3, #255	@ 0xff
 8004126:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004128:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 800413e:	2300      	movs	r3, #0
 8004140:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8004142:	2323      	movs	r3, #35	@ 0x23
 8004144:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d025      	beq.n	8004198 <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800414c:	f107 0108 	add.w	r1, r7, #8
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2202      	movs	r2, #2
 8004154:	2041      	movs	r0, #65	@ 0x41
 8004156:	f7fc fd56 	bl	8000c06 <bmi3_set_regs>
 800415a:	4603      	mov	r3, r0
 800415c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 800415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11a      	bne.n	800419c <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8004166:	f107 010c 	add.w	r1, r7, #12
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2202      	movs	r2, #2
 800416e:	2042      	movs	r0, #66	@ 0x42
 8004170:	f7fc fce4 	bl	8000b3c <bmi3_get_regs>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8004178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10d      	bne.n	800419c <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8004180:	7b3b      	ldrb	r3, [r7, #12]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	b2da      	uxtb	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 800418c:	7b3b      	ldrb	r3, [r7, #12]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	b2da      	uxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	705a      	strb	r2, [r3, #1]
 8004196:	e001      	b.n	800419c <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004198:	23ff      	movs	r3, #255	@ 0xff
 800419a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800419c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	460a      	mov	r2, r1
 80041b2:	71fb      	strb	r3, [r7, #7]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d835      	bhi.n	8004238 <validate_acc_odr_avg+0x90>
 80041cc:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <validate_acc_odr_avg+0x2c>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004209 	.word	0x08004209
 80041e0:	0800420f 	.word	0x0800420f
 80041e4:	08004215 	.word	0x08004215
 80041e8:	0800421b 	.word	0x0800421b
 80041ec:	08004221 	.word	0x08004221
 80041f0:	08004227 	.word	0x08004227
 80041f4:	0800422d 	.word	0x0800422d
 80041f8:	08004233 	.word	0x08004233
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 80041fc:	4b2f      	ldr	r3, [pc, #188]	@ (80042bc <validate_acc_odr_avg+0x114>)
 80041fe:	617b      	str	r3, [r7, #20]
            break;
 8004200:	e01b      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 8004202:	4b2f      	ldr	r3, [pc, #188]	@ (80042c0 <validate_acc_odr_avg+0x118>)
 8004204:	617b      	str	r3, [r7, #20]
            break;
 8004206:	e018      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 8004208:	4b2e      	ldr	r3, [pc, #184]	@ (80042c4 <validate_acc_odr_avg+0x11c>)
 800420a:	617b      	str	r3, [r7, #20]
            break;
 800420c:	e015      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 800420e:	4b2e      	ldr	r3, [pc, #184]	@ (80042c8 <validate_acc_odr_avg+0x120>)
 8004210:	617b      	str	r3, [r7, #20]
            break;
 8004212:	e012      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 8004214:	4b2d      	ldr	r3, [pc, #180]	@ (80042cc <validate_acc_odr_avg+0x124>)
 8004216:	617b      	str	r3, [r7, #20]
            break;
 8004218:	e00f      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 800421a:	4b2d      	ldr	r3, [pc, #180]	@ (80042d0 <validate_acc_odr_avg+0x128>)
 800421c:	617b      	str	r3, [r7, #20]
            break;
 800421e:	e00c      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 8004220:	4b2c      	ldr	r3, [pc, #176]	@ (80042d4 <validate_acc_odr_avg+0x12c>)
 8004222:	617b      	str	r3, [r7, #20]
            break;
 8004224:	e009      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 8004226:	4b2c      	ldr	r3, [pc, #176]	@ (80042d8 <validate_acc_odr_avg+0x130>)
 8004228:	617b      	str	r3, [r7, #20]
            break;
 800422a:	e006      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 800422c:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <validate_acc_odr_avg+0x134>)
 800422e:	617b      	str	r3, [r7, #20]
            break;
 8004230:	e003      	b.n	800423a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 8004232:	4b2b      	ldr	r3, [pc, #172]	@ (80042e0 <validate_acc_odr_avg+0x138>)
 8004234:	617b      	str	r3, [r7, #20]
            break;
 8004236:	e000      	b.n	800423a <validate_acc_odr_avg+0x92>
        default:
            break;
 8004238:	bf00      	nop
    }

    switch (acc_avg)
 800423a:	79bb      	ldrb	r3, [r7, #6]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d82d      	bhi.n	800429c <validate_acc_odr_avg+0xf4>
 8004240:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <validate_acc_odr_avg+0xa0>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004265 	.word	0x08004265
 800424c:	0800426d 	.word	0x0800426d
 8004250:	08004275 	.word	0x08004275
 8004254:	0800427d 	.word	0x0800427d
 8004258:	08004285 	.word	0x08004285
 800425c:	0800428d 	.word	0x0800428d
 8004260:	08004295 	.word	0x08004295
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 8004264:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004268:	613b      	str	r3, [r7, #16]
            break;
 800426a:	e018      	b.n	800429e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 800426c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004270:	613b      	str	r3, [r7, #16]
            break;
 8004272:	e014      	b.n	800429e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 8004274:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004278:	613b      	str	r3, [r7, #16]
            break;
 800427a:	e010      	b.n	800429e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 800427c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004280:	613b      	str	r3, [r7, #16]
            break;
 8004282:	e00c      	b.n	800429e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 8004284:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004288:	613b      	str	r3, [r7, #16]
            break;
 800428a:	e008      	b.n	800429e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 800428c:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8004290:	613b      	str	r3, [r7, #16]
            break;
 8004292:	e004      	b.n	800429e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 8004294:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004298:	613b      	str	r3, [r7, #16]
            break;
 800429a:	e000      	b.n	800429e <validate_acc_odr_avg+0xf6>
        default:
            break;
 800429c:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 800429e:	edd7 0a04 	vldr	s1, [r7, #16]
 80042a2:	ed97 0a05 	vldr	s0, [r7, #20]
 80042a6:	f000 f81d 	bl	80042e4 <accel_skipped_samples_check>
 80042aa:	4603      	mov	r3, r0
 80042ac:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80042ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	3f480000 	.word	0x3f480000
 80042c0:	3fc80000 	.word	0x3fc80000
 80042c4:	40480000 	.word	0x40480000
 80042c8:	40c80000 	.word	0x40c80000
 80042cc:	41480000 	.word	0x41480000
 80042d0:	41c80000 	.word	0x41c80000
 80042d4:	42480000 	.word	0x42480000
 80042d8:	42c80000 	.word	0x42c80000
 80042dc:	43480000 	.word	0x43480000
 80042e0:	43c80000 	.word	0x43c80000

080042e4 <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80042ee:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 80042f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <accel_skipped_samples_check+0x7c>)
 80042f4:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 80042fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	dd1f      	ble.n	800434a <accel_skipped_samples_check+0x66>
 800430a:	edd7 7a00 	vldr	s15, [r7]
 800430e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	dd18      	ble.n	800434a <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8004318:	edd7 6a04 	vldr	s13, [r7, #16]
 800431c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004324:	edd7 7a00 	vldr	s15, [r7]
 8004328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800432c:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8004330:	edd7 7a03 	vldr	s15, [r7, #12]
 8004334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	dd02      	ble.n	8004344 <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004342:	e004      	b.n	800434e <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8004344:	23fc      	movs	r3, #252	@ 0xfc
 8004346:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004348:	e001      	b.n	800434e <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 800434a:	23fc      	movs	r3, #252	@ 0xfc
 800434c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800434e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004352:	4618      	mov	r0, r3
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	45c80000 	.word	0x45c80000

08004364 <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	460a      	mov	r2, r1
 800436e:	71fb      	strb	r3, [r7, #7]
 8004370:	4613      	mov	r3, r2
 8004372:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	3b01      	subs	r3, #1
 8004384:	2b09      	cmp	r3, #9
 8004386:	d835      	bhi.n	80043f4 <validate_gyr_odr_avg+0x90>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <validate_gyr_odr_avg+0x2c>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043d1 	.word	0x080043d1
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080043e3 	.word	0x080043e3
 80043b0:	080043e9 	.word	0x080043e9
 80043b4:	080043ef 	.word	0x080043ef
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 80043b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004478 <validate_gyr_odr_avg+0x114>)
 80043ba:	617b      	str	r3, [r7, #20]
            break;
 80043bc:	e01b      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 80043be:	4b2f      	ldr	r3, [pc, #188]	@ (800447c <validate_gyr_odr_avg+0x118>)
 80043c0:	617b      	str	r3, [r7, #20]
            break;
 80043c2:	e018      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 80043c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004480 <validate_gyr_odr_avg+0x11c>)
 80043c6:	617b      	str	r3, [r7, #20]
            break;
 80043c8:	e015      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 80043ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004484 <validate_gyr_odr_avg+0x120>)
 80043cc:	617b      	str	r3, [r7, #20]
            break;
 80043ce:	e012      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 80043d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004488 <validate_gyr_odr_avg+0x124>)
 80043d2:	617b      	str	r3, [r7, #20]
            break;
 80043d4:	e00f      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 80043d6:	4b2d      	ldr	r3, [pc, #180]	@ (800448c <validate_gyr_odr_avg+0x128>)
 80043d8:	617b      	str	r3, [r7, #20]
            break;
 80043da:	e00c      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 80043dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004490 <validate_gyr_odr_avg+0x12c>)
 80043de:	617b      	str	r3, [r7, #20]
            break;
 80043e0:	e009      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 80043e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004494 <validate_gyr_odr_avg+0x130>)
 80043e4:	617b      	str	r3, [r7, #20]
            break;
 80043e6:	e006      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 80043e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <validate_gyr_odr_avg+0x134>)
 80043ea:	617b      	str	r3, [r7, #20]
            break;
 80043ec:	e003      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 80043ee:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <validate_gyr_odr_avg+0x138>)
 80043f0:	617b      	str	r3, [r7, #20]
            break;
 80043f2:	e000      	b.n	80043f6 <validate_gyr_odr_avg+0x92>
        default:
            break;
 80043f4:	bf00      	nop
    }

    switch (gyr_avg)
 80043f6:	79bb      	ldrb	r3, [r7, #6]
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d82d      	bhi.n	8004458 <validate_gyr_odr_avg+0xf4>
 80043fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004404 <validate_gyr_odr_avg+0xa0>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004421 	.word	0x08004421
 8004408:	08004429 	.word	0x08004429
 800440c:	08004431 	.word	0x08004431
 8004410:	08004439 	.word	0x08004439
 8004414:	08004441 	.word	0x08004441
 8004418:	08004449 	.word	0x08004449
 800441c:	08004451 	.word	0x08004451
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 8004420:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004424:	613b      	str	r3, [r7, #16]
            break;
 8004426:	e018      	b.n	800445a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 8004428:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800442c:	613b      	str	r3, [r7, #16]
            break;
 800442e:	e014      	b.n	800445a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 8004430:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8004434:	613b      	str	r3, [r7, #16]
            break;
 8004436:	e010      	b.n	800445a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 8004438:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800443c:	613b      	str	r3, [r7, #16]
            break;
 800443e:	e00c      	b.n	800445a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 8004440:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004444:	613b      	str	r3, [r7, #16]
            break;
 8004446:	e008      	b.n	800445a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 8004448:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 800444c:	613b      	str	r3, [r7, #16]
            break;
 800444e:	e004      	b.n	800445a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 8004450:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8004454:	613b      	str	r3, [r7, #16]
            break;
 8004456:	e000      	b.n	800445a <validate_gyr_odr_avg+0xf6>
        default:
            break;
 8004458:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 800445a:	edd7 0a04 	vldr	s1, [r7, #16]
 800445e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004462:	f000 f81d 	bl	80044a0 <gyro_skipped_samples_check>
 8004466:	4603      	mov	r3, r0
 8004468:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800446a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	3f480000 	.word	0x3f480000
 800447c:	3fc80000 	.word	0x3fc80000
 8004480:	40480000 	.word	0x40480000
 8004484:	40c80000 	.word	0x40c80000
 8004488:	41480000 	.word	0x41480000
 800448c:	41c80000 	.word	0x41c80000
 8004490:	42480000 	.word	0x42480000
 8004494:	42c80000 	.word	0x42c80000
 8004498:	43480000 	.word	0x43480000
 800449c:	43c80000 	.word	0x43c80000

080044a0 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80044aa:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <gyro_skipped_samples_check+0x7c>)
 80044b0:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 80044b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80044bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c4:	dd1f      	ble.n	8004506 <gyro_skipped_samples_check+0x66>
 80044c6:	edd7 7a00 	vldr	s15, [r7]
 80044ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	dd18      	ble.n	8004506 <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80044d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80044d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80044dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e0:	edd7 7a00 	vldr	s15, [r7]
 80044e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e8:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80044ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80044f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f8:	dd02      	ble.n	8004500 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80044fe:	e004      	b.n	800450a <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8004500:	23fb      	movs	r3, #251	@ 0xfb
 8004502:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8004504:	e001      	b.n	800450a <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 8004506:	23fb      	movs	r3, #251	@ 0xfb
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800450a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	45c80000 	.word	0x45c80000

08004520 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fe31 	bl	8005190 <null_ptr_check>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc faac 	bl	8000a98 <bmi3_init>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 8004544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b43      	cmp	r3, #67	@ 0x43
 8004552:	d103      	bne.n	800455c <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2210      	movs	r2, #16
 8004558:	731a      	strb	r2, [r3, #12]
 800455a:	e001      	b.n	8004560 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 800455c:	23fd      	movs	r3, #253	@ 0xfd
 800455e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 8004560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	2001      	movs	r0, #1
 800456c:	f000 f86e 	bl	800464c <bmi323_context_switch_selection>
 8004570:	4603      	mov	r3, r0
 8004572:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <bmi323_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi323 sensor.
 */
int8_t bmi323_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	4613      	mov	r3, r2
 8004590:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_regs(reg_addr, data, len, dev);
 8004592:	89ba      	ldrh	r2, [r7, #12]
 8004594:	7bf8      	ldrb	r0, [r7, #15]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	f7fc fb34 	bl	8000c06 <bmi3_set_regs>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80045a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	460b      	mov	r3, r1
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 80045bc:	7afb      	ldrb	r3, [r7, #11]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4619      	mov	r1, r3
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7fc fc12 	bl	8000dec <bmi3_set_sensor_config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80045cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	460b      	mov	r3, r1
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 80045e6:	7afb      	ldrb	r3, [r7, #11]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7fc fd07 	bl	8001000 <bmi3_get_sensor_config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80045f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <bmi323_map_interrupt>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi323_map_interrupt(struct bmi3_map_int map_int, struct bmi3_dev *dev)
{
 8004602:	b590      	push	{r4, r7, lr}
 8004604:	b089      	sub	sp, #36	@ 0x24
 8004606:	af02      	add	r7, sp, #8
 8004608:	463c      	mov	r4, r7
 800460a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* Variable to define error */
    int8_t rslt;

    /* Read map interrupt data */
    rslt = bmi3_map_interrupt(map_int, dev);
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	463b      	mov	r3, r7
 8004614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004616:	f7fc fdff 	bl	8001218 <bmi3_map_interrupt>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800461e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	bd90      	pop	{r4, r7, pc}

0800462a <bmi323_select_sensor>:

/*!
 * @brief This API selects the sensors/features to be enabled or disabled.
 */
int8_t bmi323_select_sensor(struct bmi3_feature_enable *enable, struct bmi3_dev *dev)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_select_sensor(enable, dev);
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc ff40 	bl	80014bc <bmi3_select_sensor>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8004640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b0c8      	sub	sp, #288	@ 0x120
 8004650:	af00      	add	r7, sp, #0
 8004652:	4602      	mov	r2, r0
 8004654:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004658:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800465c:	6019      	str	r1, [r3, #0]
 800465e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004662:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004666:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    if (context_sel < BMI323_SEL_MAX)
 800466e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004672:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b02      	cmp	r3, #2
 800467a:	f200 8578 	bhi.w	800516e <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 800467e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004682:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004686:	2203      	movs	r2, #3
 8004688:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 800468a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800468e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800469e:	4618      	mov	r0, r3
 80046a0:	49e3      	ldr	r1, [pc, #908]	@ (8004a30 <bmi323_context_switch_selection+0x3e4>)
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	4403      	add	r3, r0
 80046aa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80046ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80046b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80046b6:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 80046b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80046bc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80046cc:	4618      	mov	r0, r3
 80046ce:	49d8      	ldr	r1, [pc, #864]	@ (8004a30 <bmi323_context_switch_selection+0x3e4>)
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	4403      	add	r3, r0
 80046d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80046e2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80046e6:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 80046e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80046ec:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80046f6:	1c59      	adds	r1, r3, #1
 80046f8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80046fc:	4618      	mov	r0, r3
 80046fe:	49cc      	ldr	r1, [pc, #816]	@ (8004a30 <bmi323_context_switch_selection+0x3e4>)
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	4403      	add	r3, r0
 8004708:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800470c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004710:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004714:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 8004716:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800471a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800472a:	4618      	mov	r0, r3
 800472c:	49c0      	ldr	r1, [pc, #768]	@ (8004a30 <bmi323_context_switch_selection+0x3e4>)
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	4403      	add	r3, r0
 8004736:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800473a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800473e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004742:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 8004744:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004748:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004758:	4618      	mov	r0, r3
 800475a:	49b5      	ldr	r1, [pc, #724]	@ (8004a30 <bmi323_context_switch_selection+0x3e4>)
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	4403      	add	r3, r0
 8004764:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004768:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800476c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004770:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 8004778:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800477c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004780:	2204      	movs	r2, #4
 8004782:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 8004786:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800478a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800479a:	4618      	mov	r0, r3
 800479c:	49a5      	ldr	r1, [pc, #660]	@ (8004a34 <bmi323_context_switch_selection+0x3e8>)
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	4403      	add	r3, r0
 80047a6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80047aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80047ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047b2:	865a      	strh	r2, [r3, #50]	@ 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 80047b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80047b8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80047c8:	4618      	mov	r0, r3
 80047ca:	499a      	ldr	r1, [pc, #616]	@ (8004a34 <bmi323_context_switch_selection+0x3e8>)
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	4403      	add	r3, r0
 80047d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80047de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 80047e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80047ea:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80047ee:	781a      	ldrb	r2, [r3, #0]
 80047f0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80047f4:	1c59      	adds	r1, r3, #1
 80047f6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80047fa:	4618      	mov	r0, r3
 80047fc:	498d      	ldr	r1, [pc, #564]	@ (8004a34 <bmi323_context_switch_selection+0x3e8>)
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	4403      	add	r3, r0
 8004806:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800480a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800480e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004812:	86da      	strh	r2, [r3, #54]	@ 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 8004814:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004818:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004822:	1c59      	adds	r1, r3, #1
 8004824:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004828:	4618      	mov	r0, r3
 800482a:	4982      	ldr	r1, [pc, #520]	@ (8004a34 <bmi323_context_switch_selection+0x3e8>)
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	4403      	add	r3, r0
 8004834:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004838:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800483c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004840:	861a      	strh	r2, [r3, #48]	@ 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 8004842:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004846:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800484a:	781a      	ldrb	r2, [r3, #0]
 800484c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004850:	1c59      	adds	r1, r3, #1
 8004852:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004856:	4618      	mov	r0, r3
 8004858:	4976      	ldr	r1, [pc, #472]	@ (8004a34 <bmi323_context_switch_selection+0x3e8>)
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	4403      	add	r3, r0
 8004862:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004866:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800486a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800486e:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Set tap configuration */
        index = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[2].type = BMI323_TAP;
 8004876:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800487a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800487e:	2209      	movs	r2, #9
 8004880:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 8004884:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004888:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004898:	4618      	mov	r0, r3
 800489a:	4967      	ldr	r1, [pc, #412]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4403      	add	r3, r0
 80048a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80048b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80048b4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 80048b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80048bc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80048c6:	1c59      	adds	r1, r3, #1
 80048c8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80048cc:	4618      	mov	r0, r3
 80048ce:	495a      	ldr	r1, [pc, #360]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4403      	add	r3, r0
 80048da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80048e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80048e8:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 80048ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80048f0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004900:	4618      	mov	r0, r3
 8004902:	494d      	ldr	r1, [pc, #308]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4403      	add	r3, r0
 800490e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004918:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800491c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8004920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004924:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800492e:	1c59      	adds	r1, r3, #1
 8004930:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004934:	4618      	mov	r0, r3
 8004936:	4940      	ldr	r1, [pc, #256]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4403      	add	r3, r0
 8004942:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800494c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004950:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 8004954:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004958:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004962:	1c59      	adds	r1, r3, #1
 8004964:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004968:	4618      	mov	r0, r3
 800496a:	4933      	ldr	r1, [pc, #204]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4403      	add	r3, r0
 8004976:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800497a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800497e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004982:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 8004986:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800498a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800498e:	781a      	ldrb	r2, [r3, #0]
 8004990:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004994:	1c59      	adds	r1, r3, #1
 8004996:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800499a:	4618      	mov	r0, r3
 800499c:	4926      	ldr	r1, [pc, #152]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4403      	add	r3, r0
 80049a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049b6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 80049ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049be:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80049c8:	1c59      	adds	r1, r3, #1
 80049ca:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80049ce:	4618      	mov	r0, r3
 80049d0:	4919      	ldr	r1, [pc, #100]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4403      	add	r3, r0
 80049dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049ea:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 80049ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049f2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004a02:	4618      	mov	r0, r3
 8004a04:	490c      	ldr	r1, [pc, #48]	@ (8004a38 <bmi323_context_switch_selection+0x3ec>)
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4403      	add	r3, r0
 8004a10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a1e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8004a22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a26:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	e006      	b.n	8004a3c <bmi323_context_switch_selection+0x3f0>
 8004a2e:	bf00      	nop
 8004a30:	24000000 	.word	0x24000000
 8004a34:	24000020 	.word	0x24000020
 8004a38:	24000040 	.word	0x24000040
 8004a3c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004a46:	4618      	mov	r0, r3
 8004a48:	49e9      	ldr	r1, [pc, #932]	@ (8004df0 <bmi323_context_switch_selection+0x7a4>)
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4403      	add	r3, r0
 8004a54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a5e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a62:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 8004a66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a6a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004a74:	1c59      	adds	r1, r3, #1
 8004a76:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	49dc      	ldr	r1, [pc, #880]	@ (8004df0 <bmi323_context_switch_selection+0x7a4>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4403      	add	r3, r0
 8004a88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a92:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a96:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

        /* Set step counter configuration */
        index = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 8004aa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004aa4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 8004aae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ab2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004abc:	1c59      	adds	r1, r3, #1
 8004abe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	49cb      	ldr	r1, [pc, #812]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004ac6:	2316      	movs	r3, #22
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	4403      	add	r3, r0
 8004ace:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ad2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ad6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ada:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 8004ade:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ae2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ae6:	781a      	ldrb	r2, [r3, #0]
 8004ae8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004aec:	1c59      	adds	r1, r3, #1
 8004aee:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004af2:	4618      	mov	r0, r3
 8004af4:	49bf      	ldr	r1, [pc, #764]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004af6:	2316      	movs	r3, #22
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	4403      	add	r3, r0
 8004afe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b0a:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 8004b0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b12:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004b16:	781a      	ldrb	r2, [r3, #0]
 8004b18:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004b1c:	1c59      	adds	r1, r3, #1
 8004b1e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004b22:	4618      	mov	r0, r3
 8004b24:	49b3      	ldr	r1, [pc, #716]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004b26:	2316      	movs	r3, #22
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	4403      	add	r3, r0
 8004b2e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b36:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b3a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 8004b3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b42:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004b4c:	1c59      	adds	r1, r3, #1
 8004b4e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004b52:	4618      	mov	r0, r3
 8004b54:	49a7      	ldr	r1, [pc, #668]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004b56:	2316      	movs	r3, #22
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	4403      	add	r3, r0
 8004b5e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b66:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b6a:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 8004b6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b72:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004b76:	781a      	ldrb	r2, [r3, #0]
 8004b78:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004b82:	4618      	mov	r0, r3
 8004b84:	499b      	ldr	r1, [pc, #620]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004b86:	2316      	movs	r3, #22
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	4403      	add	r3, r0
 8004b8e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004b92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b96:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b9a:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 8004b9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ba2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	498f      	ldr	r1, [pc, #572]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004bb6:	2316      	movs	r3, #22
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	4403      	add	r3, r0
 8004bbe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004bc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bc6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004bca:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 8004bce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bd2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004bdc:	1c59      	adds	r1, r3, #1
 8004bde:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004be2:	4618      	mov	r0, r3
 8004be4:	4983      	ldr	r1, [pc, #524]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004be6:	2316      	movs	r3, #22
 8004be8:	fb02 f303 	mul.w	r3, r2, r3
 8004bec:	4403      	add	r3, r0
 8004bee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004bf2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bf6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004bfa:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 8004bfe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c02:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c06:	781a      	ldrb	r2, [r3, #0]
 8004c08:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c0c:	1c59      	adds	r1, r3, #1
 8004c0e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004c12:	4618      	mov	r0, r3
 8004c14:	4977      	ldr	r1, [pc, #476]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004c16:	2316      	movs	r3, #22
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	4403      	add	r3, r0
 8004c1e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c2a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 8004c2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c32:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c36:	781a      	ldrb	r2, [r3, #0]
 8004c38:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c3c:	1c59      	adds	r1, r3, #1
 8004c3e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004c42:	4618      	mov	r0, r3
 8004c44:	496b      	ldr	r1, [pc, #428]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004c46:	2316      	movs	r3, #22
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	4403      	add	r3, r0
 8004c4e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c5a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 8004c5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c62:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004c72:	4618      	mov	r0, r3
 8004c74:	495f      	ldr	r1, [pc, #380]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004c76:	2316      	movs	r3, #22
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
 8004c7c:	4403      	add	r3, r0
 8004c7e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c86:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004c8a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 8004c8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c92:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004c9c:	1c59      	adds	r1, r3, #1
 8004c9e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	4953      	ldr	r1, [pc, #332]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004ca6:	2316      	movs	r3, #22
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	4403      	add	r3, r0
 8004cae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004cb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cb6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004cba:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 8004cbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cc2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004cc6:	781a      	ldrb	r2, [r3, #0]
 8004cc8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ccc:	1c59      	adds	r1, r3, #1
 8004cce:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	4947      	ldr	r1, [pc, #284]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004cd6:	2316      	movs	r3, #22
 8004cd8:	fb02 f303 	mul.w	r3, r2, r3
 8004cdc:	4403      	add	r3, r0
 8004cde:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ce2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ce6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004cea:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8004cee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cf2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004cfc:	1c59      	adds	r1, r3, #1
 8004cfe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d02:	4618      	mov	r0, r3
 8004d04:	493b      	ldr	r1, [pc, #236]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004d06:	2316      	movs	r3, #22
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	4403      	add	r3, r0
 8004d0e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d1a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8004d1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d22:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d32:	4618      	mov	r0, r3
 8004d34:	492f      	ldr	r1, [pc, #188]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004d36:	2316      	movs	r3, #22
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	4403      	add	r3, r0
 8004d3e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d46:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d4a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8004d4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d52:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d5c:	1c59      	adds	r1, r3, #1
 8004d5e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d62:	4618      	mov	r0, r3
 8004d64:	4923      	ldr	r1, [pc, #140]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004d66:	2316      	movs	r3, #22
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	4403      	add	r3, r0
 8004d6e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004d72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d7a:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8004d7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d82:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004d92:	4618      	mov	r0, r3
 8004d94:	4917      	ldr	r1, [pc, #92]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004d96:	2316      	movs	r3, #22
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	4403      	add	r3, r0
 8004d9e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004da2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004da6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004daa:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8004dae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004db2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	490b      	ldr	r1, [pc, #44]	@ (8004df4 <bmi323_context_switch_selection+0x7a8>)
 8004dc6:	2316      	movs	r3, #22
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	4403      	add	r3, r0
 8004dce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004dd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dd6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004dda:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8004dde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004de2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004dec:	1c59      	adds	r1, r3, #1
 8004dee:	e003      	b.n	8004df8 <bmi323_context_switch_selection+0x7ac>
 8004df0:	24000040 	.word	0x24000040
 8004df4:	2400007c 	.word	0x2400007c
 8004df8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	49e1      	ldr	r1, [pc, #900]	@ (8005184 <bmi323_context_switch_selection+0xb38>)
 8004e00:	2316      	movs	r3, #22
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	4403      	add	r3, r0
 8004e08:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e14:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8004e18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e1c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e26:	1c59      	adds	r1, r3, #1
 8004e28:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	49d5      	ldr	r1, [pc, #852]	@ (8005184 <bmi323_context_switch_selection+0xb38>)
 8004e30:	2316      	movs	r3, #22
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	4403      	add	r3, r0
 8004e38:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e44:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8004e48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e4c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	49c9      	ldr	r1, [pc, #804]	@ (8005184 <bmi323_context_switch_selection+0xb38>)
 8004e60:	2316      	movs	r3, #22
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	4403      	add	r3, r0
 8004e68:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004e74:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8004e78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e7c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004e86:	1c59      	adds	r1, r3, #1
 8004e88:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	49bd      	ldr	r1, [pc, #756]	@ (8005184 <bmi323_context_switch_selection+0xb38>)
 8004e90:	2316      	movs	r3, #22
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	4403      	add	r3, r0
 8004e98:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ea0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ea4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 8004ea8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004eac:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004eb6:	1c59      	adds	r1, r3, #1
 8004eb8:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	49b1      	ldr	r1, [pc, #708]	@ (8005184 <bmi323_context_switch_selection+0xb38>)
 8004ec0:	2316      	movs	r3, #22
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	4403      	add	r3, r0
 8004ec8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004ecc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ed0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ed4:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

        /* Set significant motion configuration */
        index = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8004ede:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ee2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8004eec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ef0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ef4:	781a      	ldrb	r2, [r3, #0]
 8004ef6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004efa:	1c59      	adds	r1, r3, #1
 8004efc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f00:	4618      	mov	r0, r3
 8004f02:	49a1      	ldr	r1, [pc, #644]	@ (8005188 <bmi323_context_switch_selection+0xb3c>)
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	4403      	add	r3, r0
 8004f0c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004f10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f18:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 8004f1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f20:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f2a:	1c59      	adds	r1, r3, #1
 8004f2c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f30:	4618      	mov	r0, r3
 8004f32:	4995      	ldr	r1, [pc, #596]	@ (8005188 <bmi323_context_switch_selection+0xb3c>)
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	4403      	add	r3, r0
 8004f3c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004f40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f48:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004f4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f50:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f60:	4618      	mov	r0, r3
 8004f62:	4989      	ldr	r1, [pc, #548]	@ (8005188 <bmi323_context_switch_selection+0xb3c>)
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	4403      	add	r3, r0
 8004f6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f7a:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8004f7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f82:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f8c:	1c59      	adds	r1, r3, #1
 8004f8e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004f92:	4618      	mov	r0, r3
 8004f94:	497c      	ldr	r1, [pc, #496]	@ (8005188 <bmi323_context_switch_selection+0xb3c>)
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	4403      	add	r3, r0
 8004f9e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004fa2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fa6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004faa:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8004fae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fb2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004fbc:	1c59      	adds	r1, r3, #1
 8004fbe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	4970      	ldr	r1, [pc, #448]	@ (8005188 <bmi323_context_switch_selection+0xb3c>)
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	4403      	add	r3, r0
 8004fce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fd8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004fdc:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

        /* Set orientation configuration */
        index = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 8004fe6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004fea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004fee:	2207      	movs	r2, #7
 8004ff0:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8004ff4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ff8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8004ffc:	781a      	ldrb	r2, [r3, #0]
 8004ffe:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005002:	1c59      	adds	r1, r3, #1
 8005004:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005008:	4618      	mov	r0, r3
 800500a:	4960      	ldr	r1, [pc, #384]	@ (800518c <bmi323_context_switch_selection+0xb40>)
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	4403      	add	r3, r0
 8005014:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800501e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005022:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 8005026:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800502a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005034:	1c59      	adds	r1, r3, #1
 8005036:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800503a:	4618      	mov	r0, r3
 800503c:	4953      	ldr	r1, [pc, #332]	@ (800518c <bmi323_context_switch_selection+0xb40>)
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	4403      	add	r3, r0
 8005046:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005050:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005054:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8005058:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800505c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005066:	1c59      	adds	r1, r3, #1
 8005068:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800506c:	4618      	mov	r0, r3
 800506e:	4947      	ldr	r1, [pc, #284]	@ (800518c <bmi323_context_switch_selection+0xb40>)
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	4403      	add	r3, r0
 8005078:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005082:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005086:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 800508a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800508e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005092:	781a      	ldrb	r2, [r3, #0]
 8005094:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005098:	1c59      	adds	r1, r3, #1
 800509a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800509e:	4618      	mov	r0, r3
 80050a0:	493a      	ldr	r1, [pc, #232]	@ (800518c <bmi323_context_switch_selection+0xb40>)
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	4403      	add	r3, r0
 80050aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050b8:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 80050bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050c0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80050d0:	4618      	mov	r0, r3
 80050d2:	492e      	ldr	r1, [pc, #184]	@ (800518c <bmi323_context_switch_selection+0xb40>)
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	4403      	add	r3, r0
 80050dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80050ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 80050ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050f2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80050f6:	781a      	ldrb	r2, [r3, #0]
 80050f8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005102:	4618      	mov	r0, r3
 8005104:	4921      	ldr	r1, [pc, #132]	@ (800518c <bmi323_context_switch_selection+0xb40>)
 8005106:	4613      	mov	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	4403      	add	r3, r0
 800510e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005118:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800511c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8005120:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005124:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005134:	4618      	mov	r0, r3
 8005136:	4915      	ldr	r1, [pc, #84]	@ (800518c <bmi323_context_switch_selection+0xb40>)
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	4403      	add	r3, r0
 8005140:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800514a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800514e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 8005152:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005156:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800515a:	f107 0008 	add.w	r0, r7, #8
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	2106      	movs	r1, #6
 8005162:	f7ff fa24 	bl	80045ae <bmi323_set_sensor_config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800516c:	e002      	b.n	8005174 <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 800516e:	23f3      	movs	r3, #243	@ 0xf3
 8005170:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    return rslt;
 8005174:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8005178:	4618      	mov	r0, r3
 800517a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	2400007c 	.word	0x2400007c
 8005188:	24000100 	.word	0x24000100
 800518c:	24000120 	.word	0x24000120

08005190 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <null_ptr_check+0x26>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <null_ptr_check+0x26>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <null_ptr_check+0x26>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 80051b6:	23ff      	movs	r3, #255	@ 0xff
 80051b8:	73fb      	strb	r3, [r7, #15]
 80051ba:	e001      	b.n	80051c0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80051c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <bmi3_error_codes_print_result>:

/*!
 * @brief This API prints the execution status
 */
void bmi3_error_codes_print_result(const char api_name[], int8_t rslt)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80051dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051e0:	330e      	adds	r3, #14
 80051e2:	2b0e      	cmp	r3, #14
 80051e4:	f200 80bc 	bhi.w	8005360 <bmi3_error_codes_print_result+0x190>
 80051e8:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <bmi3_error_codes_print_result+0x20>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	0800534b 	.word	0x0800534b
 80051f4:	08005335 	.word	0x08005335
 80051f8:	0800531f 	.word	0x0800531f
 80051fc:	08005309 	.word	0x08005309
 8005200:	080052f3 	.word	0x080052f3
 8005204:	080052dd 	.word	0x080052dd
 8005208:	080052c7 	.word	0x080052c7
 800520c:	08005285 	.word	0x08005285
 8005210:	0800526f 	.word	0x0800526f
 8005214:	080052b1 	.word	0x080052b1
 8005218:	0800529b 	.word	0x0800529b
 800521c:	08005259 	.word	0x08005259
 8005220:	08005243 	.word	0x08005243
 8005224:	0800522d 	.word	0x0800522d
 8005228:	08005377 	.word	0x08005377

            /*! Do nothing */
            break;

        case BMI3_E_NULL_PTR:
            printf("%s\t", api_name);
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4854      	ldr	r0, [pc, #336]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 8005230:	f013 f8bc 	bl	80183ac <iprintf>
            printf(
 8005234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005238:	4619      	mov	r1, r3
 800523a:	4852      	ldr	r0, [pc, #328]	@ (8005384 <bmi3_error_codes_print_result+0x1b4>)
 800523c:	f013 f8b6 	bl	80183ac <iprintf>
                "Error [%d] : Null pointer error. It occurs when the user tries to assign value (not address) to a pointer," " which has been initialized to NULL.\r\n",
                rslt);
            break;
 8005240:	e09a      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_COM_FAIL:
            printf("%s\t", api_name);
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	484e      	ldr	r0, [pc, #312]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 8005246:	f013 f8b1 	bl	80183ac <iprintf>
            printf(
 800524a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800524e:	4619      	mov	r1, r3
 8005250:	484d      	ldr	r0, [pc, #308]	@ (8005388 <bmi3_error_codes_print_result+0x1b8>)
 8005252:	f013 f8ab 	bl	80183ac <iprintf>
                "Error [%d] : Communication failure error. It occurs due to read/write operation failure and also due " "to power failure during communication\r\n",
                rslt);
            break;
 8005256:	e08f      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_DEV_NOT_FOUND:
            printf("%s\t", api_name);
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4849      	ldr	r0, [pc, #292]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 800525c:	f013 f8a6 	bl	80183ac <iprintf>
            printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n",
 8005260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005264:	4619      	mov	r1, r3
 8005266:	4849      	ldr	r0, [pc, #292]	@ (800538c <bmi3_error_codes_print_result+0x1bc>)
 8005268:	f013 f8a0 	bl	80183ac <iprintf>
                   rslt);
            break;
 800526c:	e084      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_SENSOR:
            printf("%s\t", api_name);
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4843      	ldr	r0, [pc, #268]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 8005272:	f013 f89b 	bl	80183ac <iprintf>
            printf(
 8005276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800527a:	4619      	mov	r1, r3
 800527c:	4844      	ldr	r0, [pc, #272]	@ (8005390 <bmi3_error_codes_print_result+0x1c0>)
 800527e:	f013 f895 	bl	80183ac <iprintf>
                "Error [%d] : Invalid sensor error. It occurs when there is a mismatch in the requested feature with the " "available one\r\n",
                rslt);
            break;
 8005282:	e079      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_INT_PIN:
            printf("%s\t", api_name);
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	483e      	ldr	r0, [pc, #248]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 8005288:	f013 f890 	bl	80183ac <iprintf>
            printf(
 800528c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005290:	4619      	mov	r1, r3
 8005292:	4840      	ldr	r0, [pc, #256]	@ (8005394 <bmi3_error_codes_print_result+0x1c4>)
 8005294:	f013 f88a 	bl	80183ac <iprintf>
                "Error [%d] : Invalid interrupt pin error. It occurs when the user tries to configure interrupt pins " "apart from INT1 and INT2\r\n",
                rslt);
            break;
 8005298:	e06e      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_ACC_INVALID_CFG:
            printf("%s\t", api_name);
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4838      	ldr	r0, [pc, #224]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 800529e:	f013 f885 	bl	80183ac <iprintf>
            printf(
 80052a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052a6:	4619      	mov	r1, r3
 80052a8:	483b      	ldr	r0, [pc, #236]	@ (8005398 <bmi3_error_codes_print_result+0x1c8>)
 80052aa:	f013 f87f 	bl	80183ac <iprintf>
                "Error [%d] : Invalid Accel configuration error. It occurs when there is an error in accel configuration" " register which could be one among range, BW or filter performance in reg address 0x20\r\n",
                rslt);
            break;
 80052ae:	e063      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_GYRO_INVALID_CFG:
            printf("%s\t", api_name);
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4833      	ldr	r0, [pc, #204]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 80052b4:	f013 f87a 	bl	80183ac <iprintf>
            printf(
 80052b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052bc:	4619      	mov	r1, r3
 80052be:	4837      	ldr	r0, [pc, #220]	@ (800539c <bmi3_error_codes_print_result+0x1cc>)
 80052c0:	f013 f874 	bl	80183ac <iprintf>
                "Error [%d] : Invalid Gyro configuration error. It occurs when there is a error in gyro configuration" "register which could be one among range, BW or filter performance in reg address 0x21\r\n",
                rslt);
            break;
 80052c4:	e058      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_INPUT:
            printf("%s\t", api_name);
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	482d      	ldr	r0, [pc, #180]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 80052ca:	f013 f86f 	bl	80183ac <iprintf>
            printf("Error [%d] : Invalid input error. It occurs when the sensor input validity fails\r\n", rslt);
 80052ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052d2:	4619      	mov	r1, r3
 80052d4:	4832      	ldr	r0, [pc, #200]	@ (80053a0 <bmi3_error_codes_print_result+0x1d0>)
 80052d6:	f013 f869 	bl	80183ac <iprintf>
            break;
 80052da:	e04d      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_STATUS:
            printf("%s\t", api_name);
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4828      	ldr	r0, [pc, #160]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 80052e0:	f013 f864 	bl	80183ac <iprintf>
            printf("Error [%d] : Invalid status error. It occurs when the feature/sensor validity fails\r\n", rslt);
 80052e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052e8:	4619      	mov	r1, r3
 80052ea:	482e      	ldr	r0, [pc, #184]	@ (80053a4 <bmi3_error_codes_print_result+0x1d4>)
 80052ec:	f013 f85e 	bl	80183ac <iprintf>
            break;
 80052f0:	e042      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_DATA_RDY_INT_FAILED:
            printf("%s\t", api_name);
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4822      	ldr	r0, [pc, #136]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 80052f6:	f013 f859 	bl	80183ac <iprintf>
            printf(
 80052fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052fe:	4619      	mov	r1, r3
 8005300:	4829      	ldr	r0, [pc, #164]	@ (80053a8 <bmi3_error_codes_print_result+0x1d8>)
 8005302:	f013 f853 	bl	80183ac <iprintf>
                "Error [%d] : Data ready interrupt error. It occurs when the sample count exceeds the FOC sample limit " "and data ready status is not updated\r\n",
                rslt);
            break;
 8005306:	e037      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_FOC_POSITION:
            printf("%s\t", api_name);
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	481d      	ldr	r0, [pc, #116]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 800530c:	f013 f84e 	bl	80183ac <iprintf>
            printf(
 8005310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005314:	4619      	mov	r1, r3
 8005316:	4825      	ldr	r0, [pc, #148]	@ (80053ac <bmi3_error_codes_print_result+0x1dc>)
 8005318:	f013 f848 	bl	80183ac <iprintf>
                "Error [%d] : Invalid FOC position error. It occurs when average FOC data is obtained for the wrong" " axes\r\n",
                rslt);
            break;
 800531c:	e02c      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_INVALID_ST_SELECTION:
            printf("%s\t", api_name);
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4817      	ldr	r0, [pc, #92]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 8005322:	f013 f843 	bl	80183ac <iprintf>
            printf(
 8005326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800532a:	4619      	mov	r1, r3
 800532c:	4820      	ldr	r0, [pc, #128]	@ (80053b0 <bmi3_error_codes_print_result+0x1e0>)
 800532e:	f013 f83d 	bl	80183ac <iprintf>
                "Error [%d] : Invalid self-test selection error. It occurs when there is an invalid precondition" "settings such as alternate accelerometer and gyroscope enable bits, accelerometer mode and output data rate\r\n",
                rslt);
            break;
 8005332:	e021      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_OUT_OF_RANGE:
            printf("%s\t", api_name);
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4812      	ldr	r0, [pc, #72]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 8005338:	f013 f838 	bl	80183ac <iprintf>
            printf(
 800533c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005340:	4619      	mov	r1, r3
 8005342:	481c      	ldr	r0, [pc, #112]	@ (80053b4 <bmi3_error_codes_print_result+0x1e4>)
 8005344:	f013 f832 	bl	80183ac <iprintf>
                "Error [%d] : Out of range error. It occurs when the range exceeds the maximum range for accel while performing FOC\r\n",
                rslt);
            break;
 8005348:	e016      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        case BMI3_E_FEATURE_ENGINE_STATUS:
            printf("%s\t", api_name);
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	480c      	ldr	r0, [pc, #48]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 800534e:	f013 f82d 	bl	80183ac <iprintf>
            printf(
 8005352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005356:	4619      	mov	r1, r3
 8005358:	4817      	ldr	r0, [pc, #92]	@ (80053b8 <bmi3_error_codes_print_result+0x1e8>)
 800535a:	f013 f827 	bl	80183ac <iprintf>
                "Error [%d] : Feature engine status error. It occurs when the feature engine enable mask is not set\r\n",
                rslt);
            break;
 800535e:	e00b      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>

        default:
            printf("%s\t", api_name);
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4807      	ldr	r0, [pc, #28]	@ (8005380 <bmi3_error_codes_print_result+0x1b0>)
 8005364:	f013 f822 	bl	80183ac <iprintf>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8005368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800536c:	4619      	mov	r1, r3
 800536e:	4813      	ldr	r0, [pc, #76]	@ (80053bc <bmi3_error_codes_print_result+0x1ec>)
 8005370:	f013 f81c 	bl	80183ac <iprintf>
            break;
 8005374:	e000      	b.n	8005378 <bmi3_error_codes_print_result+0x1a8>
            break;
 8005376:	bf00      	nop
    }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	0801bc14 	.word	0x0801bc14
 8005384:	0801bc18 	.word	0x0801bc18
 8005388:	0801bcac 	.word	0x0801bcac
 800538c:	0801bd3c 	.word	0x0801bd3c
 8005390:	0801bd9c 	.word	0x0801bd9c
 8005394:	0801be14 	.word	0x0801be14
 8005398:	0801be94 	.word	0x0801be94
 800539c:	0801bf54 	.word	0x0801bf54
 80053a0:	0801c010 	.word	0x0801c010
 80053a4:	0801c064 	.word	0x0801c064
 80053a8:	0801c0bc 	.word	0x0801c0bc
 80053ac:	0801c14c 	.word	0x0801c14c
 80053b0:	0801c1b8 	.word	0x0801c1b8
 80053b4:	0801c288 	.word	0x0801c288
 80053b8:	0801c300 	.word	0x0801c300
 80053bc:	0801c368 	.word	0x0801c368

080053c0 <bmi3_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
	
	/* Bus configuration : I2C */
	if (intf == BMI3_I2C_INTF)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10f      	bne.n	80053f6 <bmi3_interface_init+0x36>
	{
		printf("I2C Interface \n");
 80053d6:	4817      	ldr	r0, [pc, #92]	@ (8005434 <bmi3_interface_init+0x74>)
 80053d8:	f013 f850 	bl	801847c <puts>

		/* To initialize the user I2C function */
		bmi323_dev_addr = BMI3_ADDR_I2C_SEC;
 80053dc:	4b16      	ldr	r3, [pc, #88]	@ (8005438 <bmi3_interface_init+0x78>)
 80053de:	2269      	movs	r2, #105	@ 0x69
 80053e0:	701a      	strb	r2, [r3, #0]
		bmi->intf = BMI3_I2C_INTF;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	725a      	strb	r2, [r3, #9]
		bmi->read = (bmi3_read_fptr_t)BMI323_SensorAPI_I2Cx_Read;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a14      	ldr	r2, [pc, #80]	@ (800543c <bmi3_interface_init+0x7c>)
 80053ec:	611a      	str	r2, [r3, #16]
		bmi->write = (bmi3_write_fptr_t)BMI323_SensorAPI_I2Cx_Write;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a13      	ldr	r2, [pc, #76]	@ (8005440 <bmi3_interface_init+0x80>)
 80053f2:	615a      	str	r2, [r3, #20]
 80053f4:	e00e      	b.n	8005414 <bmi3_interface_init+0x54>
	}
	/* Bus configuration : SPI */
	else if (intf == BMI3_SPI_INTF)
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <bmi3_interface_init+0x54>
	{
		printf("SPI Interface \n");
 80053fc:	4811      	ldr	r0, [pc, #68]	@ (8005444 <bmi3_interface_init+0x84>)
 80053fe:	f013 f83d 	bl	801847c <puts>
		bmi->intf = BMI3_SPI_INTF;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	725a      	strb	r2, [r3, #9]
		bmi->read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a0f      	ldr	r2, [pc, #60]	@ (8005448 <bmi3_interface_init+0x88>)
 800540c:	611a      	str	r2, [r3, #16]
		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a0e      	ldr	r2, [pc, #56]	@ (800544c <bmi3_interface_init+0x8c>)
 8005412:	615a      	str	r2, [r3, #20]
	}


	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a08      	ldr	r2, [pc, #32]	@ (8005438 <bmi3_interface_init+0x78>)
 8005418:	605a      	str	r2, [r3, #4]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a0c      	ldr	r2, [pc, #48]	@ (8005450 <bmi3_interface_init+0x90>)
 800541e:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	81da      	strh	r2, [r3, #14]

	return rslt;
 8005426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	0801c38c 	.word	0x0801c38c
 8005438:	24000340 	.word	0x24000340
 800543c:	08005c41 	.word	0x08005c41
 8005440:	08005cad 	.word	0x08005cad
 8005444:	0801c39c 	.word	0x0801c39c
 8005448:	08005d09 	.word	0x08005d09
 800544c:	08005d89 	.word	0x08005d89
 8005450:	08005bc5 	.word	0x08005bc5

08005454 <Open_BMI323_ACC>:

    return (dps / (half_scale)) * (val);
}

int8_t Open_BMI323_ACC(struct bmi3_dev *dev)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	@ 0x38
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	222e      	movs	r2, #46	@ 0x2e
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f013 f93e 	bl	80186ec <memset>

	config.type = BMI3_ACCEL;
 8005470:	2300      	movs	r3, #0
 8005472:	723b      	strb	r3, [r7, #8]
	
	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff f8ab 	bl	80045d8 <bmi323_get_sensor_config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (rslt == BMI3_OK) 
 8005488:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800548c:	2b00      	cmp	r3, #0
 800548e:	d14b      	bne.n	8005528 <Open_BMI323_ACC+0xd4>
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_LOW_PWR;
	#else
		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 8005490:	2300      	movs	r3, #0
 8005492:	72fb      	strb	r3, [r7, #11]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG4;
 8005494:	2302      	movs	r3, #2
 8005496:	73bb      	strb	r3, [r7, #14]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_NORMAL;
 8005498:	2304      	movs	r3, #4
 800549a:	733b      	strb	r3, [r7, #12]
	#endif
		

		config.cfg.acc.odr      = BMI3_ACC_ODR_50HZ;
 800549c:	2307      	movs	r3, #7
 800549e:	72bb      	strb	r3, [r7, #10]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_4G;
 80054a0:	2301      	movs	r3, #1
 80054a2:	737b      	strb	r3, [r7, #13]
		
		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff f87e 	bl	80045ae <bmi323_set_sensor_config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (rslt != BMI3_OK) 
 80054b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <Open_BMI323_ACC+0x7a>
		{
			printf("Open ACC failed, rslt=%d\r\n", rslt);
 80054c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80054c4:	4619      	mov	r1, r3
 80054c6:	481b      	ldr	r0, [pc, #108]	@ (8005534 <Open_BMI323_ACC+0xe0>)
 80054c8:	f012 ff70 	bl	80183ac <iprintf>
 80054cc:	e02c      	b.n	8005528 <Open_BMI323_ACC+0xd4>
		} 
		else
		{
			printf("Open ACC set successfully\r\n");
 80054ce:	481a      	ldr	r0, [pc, #104]	@ (8005538 <Open_BMI323_ACC+0xe4>)
 80054d0:	f012 ffd4 	bl	801847c <puts>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	2101      	movs	r1, #1
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff f87b 	bl	80045d8 <bmi323_get_sensor_config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (rslt == BMI3_OK) 
 80054e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d11b      	bne.n	8005528 <Open_BMI323_ACC+0xd4>
			{
				printf("Get ACC configuration successful\r\n");
 80054f0:	4812      	ldr	r0, [pc, #72]	@ (800553c <Open_BMI323_ACC+0xe8>)
 80054f2:	f012 ffc3 	bl	801847c <puts>
				printf("acc_mode = %d\r\n", config.cfg.acc.acc_mode);
 80054f6:	7b3b      	ldrb	r3, [r7, #12]
 80054f8:	4619      	mov	r1, r3
 80054fa:	4811      	ldr	r0, [pc, #68]	@ (8005540 <Open_BMI323_ACC+0xec>)
 80054fc:	f012 ff56 	bl	80183ac <iprintf>
				printf("bwp = %d\r\n", config.cfg.acc.bwp);
 8005500:	7afb      	ldrb	r3, [r7, #11]
 8005502:	4619      	mov	r1, r3
 8005504:	480f      	ldr	r0, [pc, #60]	@ (8005544 <Open_BMI323_ACC+0xf0>)
 8005506:	f012 ff51 	bl	80183ac <iprintf>
				printf("odr = %d\r\n", config.cfg.acc.odr);
 800550a:	7abb      	ldrb	r3, [r7, #10]
 800550c:	4619      	mov	r1, r3
 800550e:	480e      	ldr	r0, [pc, #56]	@ (8005548 <Open_BMI323_ACC+0xf4>)
 8005510:	f012 ff4c 	bl	80183ac <iprintf>
				printf("Range = %d\r\n", config.cfg.acc.range);
 8005514:	7b7b      	ldrb	r3, [r7, #13]
 8005516:	4619      	mov	r1, r3
 8005518:	480c      	ldr	r0, [pc, #48]	@ (800554c <Open_BMI323_ACC+0xf8>)
 800551a:	f012 ff47 	bl	80183ac <iprintf>
				printf("avg_num = %d\r\n", config.cfg.acc.avg_num);
 800551e:	7bbb      	ldrb	r3, [r7, #14]
 8005520:	4619      	mov	r1, r3
 8005522:	480b      	ldr	r0, [pc, #44]	@ (8005550 <Open_BMI323_ACC+0xfc>)
 8005524:	f012 ff42 	bl	80183ac <iprintf>
			}
		}
	}

	return rslt;
 8005528:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800552c:	4618      	mov	r0, r3
 800552e:	3738      	adds	r7, #56	@ 0x38
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	0801c3ac 	.word	0x0801c3ac
 8005538:	0801c3c8 	.word	0x0801c3c8
 800553c:	0801c3e4 	.word	0x0801c3e4
 8005540:	0801c408 	.word	0x0801c408
 8005544:	0801c418 	.word	0x0801c418
 8005548:	0801c424 	.word	0x0801c424
 800554c:	0801c430 	.word	0x0801c430
 8005550:	0801c440 	.word	0x0801c440

08005554 <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO(struct bmi3_dev *dev)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	@ 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	222e      	movs	r2, #46	@ 0x2e
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f013 f8be 	bl	80186ec <memset>

	config.type = BMI3_GYRO;
 8005570:	2301      	movs	r3, #1
 8005572:	723b      	strb	r3, [r7, #8]
	
	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	2101      	movs	r1, #1
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff f82b 	bl	80045d8 <bmi323_get_sensor_config>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (rslt == BMI3_OK) 
 8005588:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800558c:	2b00      	cmp	r3, #0
 800558e:	d148      	bne.n	8005622 <Open_BMI323_GYRO+0xce>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_50HZ;
 8005590:	2307      	movs	r3, #7
 8005592:	72bb      	strb	r3, [r7, #10]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 8005594:	2304      	movs	r3, #4
 8005596:	737b      	strb	r3, [r7, #13]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_HALF;
 8005598:	2300      	movs	r3, #0
 800559a:	72fb      	strb	r3, [r7, #11]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_NORMAL;
 800559c:	2304      	movs	r3, #4
 800559e:	733b      	strb	r3, [r7, #12]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG4;
 80055a0:	2302      	movs	r3, #2
 80055a2:	73bb      	strb	r3, [r7, #14]
	#endif
	
		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fe fffe 	bl	80045ae <bmi323_set_sensor_config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (rslt != BMI3_OK) 
 80055b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <Open_BMI323_GYRO+0x74>
		{
			printf("Open GYRO failed\r\n");
 80055c0:	481b      	ldr	r0, [pc, #108]	@ (8005630 <Open_BMI323_GYRO+0xdc>)
 80055c2:	f012 ff5b 	bl	801847c <puts>
 80055c6:	e02c      	b.n	8005622 <Open_BMI323_GYRO+0xce>
		} 
		else
		{
			printf("Open GYRO successfully\r\n");
 80055c8:	481a      	ldr	r0, [pc, #104]	@ (8005634 <Open_BMI323_GYRO+0xe0>)
 80055ca:	f012 ff57 	bl	801847c <puts>

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	2101      	movs	r1, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fffe 	bl	80045d8 <bmi323_get_sensor_config>
 80055dc:	4603      	mov	r3, r0
 80055de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (rslt == BMI3_OK) 
 80055e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d11b      	bne.n	8005622 <Open_BMI323_GYRO+0xce>
			{
				printf("Get BMI2_GYRO Configuration successful\r\n");
 80055ea:	4813      	ldr	r0, [pc, #76]	@ (8005638 <Open_BMI323_GYRO+0xe4>)
 80055ec:	f012 ff46 	bl	801847c <puts>
				printf("gyr_mode = %d\r\n", config.cfg.gyr.gyr_mode);
 80055f0:	7b3b      	ldrb	r3, [r7, #12]
 80055f2:	4619      	mov	r1, r3
 80055f4:	4811      	ldr	r0, [pc, #68]	@ (800563c <Open_BMI323_GYRO+0xe8>)
 80055f6:	f012 fed9 	bl	80183ac <iprintf>
				printf("ODR = %d\r\n", config.cfg.gyr.odr);
 80055fa:	7abb      	ldrb	r3, [r7, #10]
 80055fc:	4619      	mov	r1, r3
 80055fe:	4810      	ldr	r0, [pc, #64]	@ (8005640 <Open_BMI323_GYRO+0xec>)
 8005600:	f012 fed4 	bl	80183ac <iprintf>
				printf("Range = %d\r\n", config.cfg.gyr.range);
 8005604:	7b7b      	ldrb	r3, [r7, #13]
 8005606:	4619      	mov	r1, r3
 8005608:	480e      	ldr	r0, [pc, #56]	@ (8005644 <Open_BMI323_GYRO+0xf0>)
 800560a:	f012 fecf 	bl	80183ac <iprintf>
				printf("bwp = %d\r\n", config.cfg.gyr.bwp);
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	4619      	mov	r1, r3
 8005612:	480d      	ldr	r0, [pc, #52]	@ (8005648 <Open_BMI323_GYRO+0xf4>)
 8005614:	f012 feca 	bl	80183ac <iprintf>
				printf("avg_num = %d\r\n", config.cfg.gyr.avg_num);
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	4619      	mov	r1, r3
 800561c:	480b      	ldr	r0, [pc, #44]	@ (800564c <Open_BMI323_GYRO+0xf8>)
 800561e:	f012 fec5 	bl	80183ac <iprintf>
			}
		}
	}

	return rslt;
 8005622:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8005626:	4618      	mov	r0, r3
 8005628:	3738      	adds	r7, #56	@ 0x38
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	0801c498 	.word	0x0801c498
 8005634:	0801c4ac 	.word	0x0801c4ac
 8005638:	0801c4c4 	.word	0x0801c4c4
 800563c:	0801c4ec 	.word	0x0801c4ec
 8005640:	0801c4fc 	.word	0x0801c4fc
 8005644:	0801c430 	.word	0x0801c430
 8005648:	0801c418 	.word	0x0801c418
 800564c:	0801c440 	.word	0x0801c440

08005650 <Open_BMI323_FIFO>:
#endif


#if defined(FIFO_POLL) || defined(FIFO_WM_INT)
int8_t Open_BMI323_FIFO(struct bmi3_dev *dev)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08c      	sub	sp, #48	@ 0x30
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	#if defined(FIFO_WM_INT)
	struct bmi3_int_pin_config int_cfg;
	struct bmi3_map_int map_int = { 0 };
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	60da      	str	r2, [r3, #12]
	#endif
	/* Array to define set FIFO flush */
    	uint8_t data[2] = { BMI323_ENABLE, 0 };
 800566c:	2301      	movs	r3, #1
 800566e:	813b      	strh	r3, [r7, #8]

	/* Set the FIFO flush in FIFO control register to clear the FIFO data */
    	rslt = bmi323_set_regs(BMI3_REG_FIFO_CTRL, data, 2, dev);
 8005670:	f107 0108 	add.w	r1, r7, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	2037      	movs	r0, #55	@ 0x37
 800567a:	f7fe ff81 	bl	8004580 <bmi323_set_regs>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    	bmi3_error_codes_print_result("bmi323_set_regs", rslt);
 8005684:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005688:	4619      	mov	r1, r3
 800568a:	4834      	ldr	r0, [pc, #208]	@ (800575c <Open_BMI323_FIFO+0x10c>)
 800568c:	f7ff fda0 	bl	80051d0 <bmi3_error_codes_print_result>

	/* Clear FIFO configuration register */
	rslt = bmi3_set_fifo_config(BMI3_FIFO_ALL_EN, BMI3_DISABLE, dev);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	2100      	movs	r1, #0
 8005694:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005698:	f7fc f88f 	bl	80017ba <bmi3_set_fifo_config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bmi3_error_codes_print_result("bmi323_set_fifo_config", rslt);
 80056a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056a6:	4619      	mov	r1, r3
 80056a8:	482d      	ldr	r0, [pc, #180]	@ (8005760 <Open_BMI323_FIFO+0x110>)
 80056aa:	f7ff fd91 	bl	80051d0 <bmi3_error_codes_print_result>

	/*Example: 100Hz ODR, read data per second*/
	/* Set FIFO configuration by enabling accelerometer and gyroscope*/
	printf("FIFO Header is disabled\r\n");
 80056ae:	482d      	ldr	r0, [pc, #180]	@ (8005764 <Open_BMI323_FIFO+0x114>)
 80056b0:	f012 fee4 	bl	801847c <puts>
			printf("bmi3_set_fifo_wm error, error code: %d\r\n", rslt);
		}
		rslt = bmi3_set_fifo_config(BMI3_FIFO_GYR_EN , BMI3_ENABLE, dev);
		#elif defined(ACC_GYRO)
		/* Set the water-mark level */
		rslt = bmi3_set_fifo_wm(300, dev);//12*50=600, 100HZ ODR, read data every second
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80056ba:	f7fc f85b 	bl	8001774 <bmi3_set_fifo_wm>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt != BMI3_OK) 
 80056c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <Open_BMI323_FIFO+0x88>
		{
			printf("bmi3_set_fifo_wm error, error code: %d\r\n", rslt);
 80056cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056d0:	4619      	mov	r1, r3
 80056d2:	4825      	ldr	r0, [pc, #148]	@ (8005768 <Open_BMI323_FIFO+0x118>)
 80056d4:	f012 fe6a 	bl	80183ac <iprintf>
		}
		rslt = bmi3_set_fifo_config(BMI3_FIFO_ACC_EN | BMI3_FIFO_GYR_EN , BMI3_ENABLE, dev);
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	2101      	movs	r1, #1
 80056dc:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80056e0:	f7fc f86b 	bl	80017ba <bmi3_set_fifo_config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		#endif
		if (rslt != BMI3_OK)
 80056ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <Open_BMI323_FIFO+0xa8>
		{
			printf("Set fifo config failed\r\n");
 80056f2:	481e      	ldr	r0, [pc, #120]	@ (800576c <Open_BMI323_FIFO+0x11c>)
 80056f4:	f012 fec2 	bl	801847c <puts>
		}
	#endif

	#if defined(FIFO_WM_INT)
	bmi3_get_int_pin_config(&int_cfg, dev);
 80056f8:	f107 031c 	add.w	r3, r7, #28
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fb ffd0 	bl	80016a4 <bmi3_get_int_pin_config>
	
	int_cfg.pin_type = BMI3_INT2;
 8005704:	2302      	movs	r3, #2
 8005706:	773b      	strb	r3, [r7, #28]
	int_cfg.pin_cfg[1].lvl = BMI3_INT_ACTIVE_HIGH;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	int_cfg.pin_cfg[1].od = BMI3_INT_PUSH_PULL;;
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	int_cfg.pin_cfg[1].output_en= BMI3_INT_OUTPUT_ENABLE;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	bmi3_set_int_pin_config(&int_cfg, dev);
 800571a:	f107 031c 	add.w	r3, r7, #28
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4618      	mov	r0, r3
 8005722:	f7fb feed 	bl	8001500 <bmi3_set_int_pin_config>

	/* Map the FIFO water-mark interrupt to INT1 */
	/* Note: User can map the interrupt to INT1 or INT2 */
	map_int.fifo_watermark_int = BMI3_INT2;
 8005726:	2302      	movs	r3, #2
 8005728:	76bb      	strb	r3, [r7, #26]

	/* Map the interrupt configuration */
	rslt = bmi323_map_interrupt(map_int, dev);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	f107 030c 	add.w	r3, r7, #12
 8005732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005734:	f7fe ff65 	bl	8004602 <bmi323_map_interrupt>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bmi3_error_codes_print_result("bmi323_map_interrupt", rslt);
 800573e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005742:	4619      	mov	r1, r3
 8005744:	480a      	ldr	r0, [pc, #40]	@ (8005770 <Open_BMI323_FIFO+0x120>)
 8005746:	f7ff fd43 	bl	80051d0 <bmi3_error_codes_print_result>
	#endif

	/* Update FIFO structure */
	fifoframe.data = fifo_data;
 800574a:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <Open_BMI323_FIFO+0x124>)
 800574c:	4a0a      	ldr	r2, [pc, #40]	@ (8005778 <Open_BMI323_FIFO+0x128>)
 800574e:	601a      	str	r2, [r3, #0]
	
	return rslt;
 8005750:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	@ 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	0801c53c 	.word	0x0801c53c
 8005760:	0801c54c 	.word	0x0801c54c
 8005764:	0801c564 	.word	0x0801c564
 8005768:	0801c580 	.word	0x0801c580
 800576c:	0801c5ac 	.word	0x0801c5ac
 8005770:	0801c5c4 	.word	0x0801c5c4
 8005774:	24000b44 	.word	0x24000b44
 8005778:	24000344 	.word	0x24000344

0800577c <Open_BMI323_STEP_COUNTER>:
	
	return rslt;
}

int8_t Open_BMI323_STEP_COUNTER(struct bmi3_dev *dev)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b092      	sub	sp, #72	@ 0x48
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 800578a:	f107 0318 	add.w	r3, r7, #24
 800578e:	222e      	movs	r2, #46	@ 0x2e
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f012 ffaa 	bl	80186ec <memset>
	/* Feature enable initialization. */
    	struct bmi3_feature_enable feature = { 0 };
 8005798:	f107 0308 	add.w	r3, r7, #8
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]

	config.type = BMI3_STEP_COUNTER;
 80057a6:	2305      	movs	r3, #5
 80057a8:	763b      	strb	r3, [r7, #24]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 80057aa:	f107 0318 	add.w	r3, r7, #24
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	2101      	movs	r1, #1
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe ff10 	bl	80045d8 <bmi323_get_sensor_config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	bmi3_error_codes_print_result("Get sensor config", rslt);
 80057be:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80057c2:	4619      	mov	r1, r3
 80057c4:	4871      	ldr	r0, [pc, #452]	@ (800598c <Open_BMI323_STEP_COUNTER+0x210>)
 80057c6:	f7ff fd03 	bl	80051d0 <bmi3_error_codes_print_result>
	
	if (rslt == BMI323_OK)
 80057ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 80c5 	bne.w	800595e <Open_BMI323_STEP_COUNTER+0x1e2>
	{
		/* Function to select the context feature configurations.
		* For smart phone: BMI323_SMART_PHONE_SEL
		* For wearables  : BMI323_WEARABLE_SEL
		* For hearables  : BMI323_HEARABLE_SEL */
		rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	2001      	movs	r0, #1
 80057d8:	f7fe ff38 	bl	800464c <bmi323_context_switch_selection>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		bmi3_error_codes_print_result("context switch selection", rslt);
 80057e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80057e6:	4619      	mov	r1, r3
 80057e8:	4869      	ldr	r0, [pc, #420]	@ (8005990 <Open_BMI323_STEP_COUNTER+0x214>)
 80057ea:	f7ff fcf1 	bl	80051d0 <bmi3_error_codes_print_result>

		if (rslt == BMI323_OK)
 80057ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 80b3 	bne.w	800595e <Open_BMI323_STEP_COUNTER+0x1e2>
		{
			/* Get default configurations for the type of feature selected. */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80057f8:	f107 0318 	add.w	r3, r7, #24
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe fee9 	bl	80045d8 <bmi323_get_sensor_config>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			bmi3_error_codes_print_result("Get sensor config", rslt);
 800580c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005810:	4619      	mov	r1, r3
 8005812:	485e      	ldr	r0, [pc, #376]	@ (800598c <Open_BMI323_STEP_COUNTER+0x210>)
 8005814:	f7ff fcdc 	bl	80051d0 <bmi3_error_codes_print_result>

			printf("Step counter wearable configurations\n");
 8005818:	485e      	ldr	r0, [pc, #376]	@ (8005994 <Open_BMI323_STEP_COUNTER+0x218>)
 800581a:	f012 fe2f 	bl	801847c <puts>
			printf("Watermark level = %x\n", config.cfg.step_counter.watermark_level);
 800581e:	8b7b      	ldrh	r3, [r7, #26]
 8005820:	4619      	mov	r1, r3
 8005822:	485d      	ldr	r0, [pc, #372]	@ (8005998 <Open_BMI323_STEP_COUNTER+0x21c>)
 8005824:	f012 fdc2 	bl	80183ac <iprintf>
			printf("Reset counter = %x\n", config.cfg.step_counter.reset_counter);
 8005828:	8bbb      	ldrh	r3, [r7, #28]
 800582a:	4619      	mov	r1, r3
 800582c:	485b      	ldr	r0, [pc, #364]	@ (800599c <Open_BMI323_STEP_COUNTER+0x220>)
 800582e:	f012 fdbd 	bl	80183ac <iprintf>
			printf("env_min_dist_up: %d\n", config.cfg.step_counter.env_min_dist_up);
 8005832:	8bfb      	ldrh	r3, [r7, #30]
 8005834:	4619      	mov	r1, r3
 8005836:	485a      	ldr	r0, [pc, #360]	@ (80059a0 <Open_BMI323_STEP_COUNTER+0x224>)
 8005838:	f012 fdb8 	bl	80183ac <iprintf>
			printf("env_coef_up: %d\n", config.cfg.step_counter.env_coef_up);
 800583c:	8c3b      	ldrh	r3, [r7, #32]
 800583e:	4619      	mov	r1, r3
 8005840:	4858      	ldr	r0, [pc, #352]	@ (80059a4 <Open_BMI323_STEP_COUNTER+0x228>)
 8005842:	f012 fdb3 	bl	80183ac <iprintf>
			printf("env_min_dist_down: %d\n", config.cfg.step_counter.env_min_dist_down);
 8005846:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005848:	4619      	mov	r1, r3
 800584a:	4857      	ldr	r0, [pc, #348]	@ (80059a8 <Open_BMI323_STEP_COUNTER+0x22c>)
 800584c:	f012 fdae 	bl	80183ac <iprintf>
			printf("env_coef_down: %d\n", config.cfg.step_counter.env_coef_down);
 8005850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005852:	4619      	mov	r1, r3
 8005854:	4855      	ldr	r0, [pc, #340]	@ (80059ac <Open_BMI323_STEP_COUNTER+0x230>)
 8005856:	f012 fda9 	bl	80183ac <iprintf>
			printf("eean_val_decay: %d\n", config.cfg.step_counter.mean_val_decay);
 800585a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800585c:	4619      	mov	r1, r3
 800585e:	4854      	ldr	r0, [pc, #336]	@ (80059b0 <Open_BMI323_STEP_COUNTER+0x234>)
 8005860:	f012 fda4 	bl	80183ac <iprintf>
			printf("eean_step_dur: %d\n", config.cfg.step_counter.mean_step_dur);
 8005864:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005866:	4619      	mov	r1, r3
 8005868:	4852      	ldr	r0, [pc, #328]	@ (80059b4 <Open_BMI323_STEP_COUNTER+0x238>)
 800586a:	f012 fd9f 	bl	80183ac <iprintf>
			printf("step_buffer_size: %d\n", config.cfg.step_counter.step_buffer_size);
 800586e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005870:	4619      	mov	r1, r3
 8005872:	4851      	ldr	r0, [pc, #324]	@ (80059b8 <Open_BMI323_STEP_COUNTER+0x23c>)
 8005874:	f012 fd9a 	bl	80183ac <iprintf>
			printf("filter_cascade_enabled: %d\n", config.cfg.step_counter.filter_cascade_enabled);
 8005878:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800587a:	4619      	mov	r1, r3
 800587c:	484f      	ldr	r0, [pc, #316]	@ (80059bc <Open_BMI323_STEP_COUNTER+0x240>)
 800587e:	f012 fd95 	bl	80183ac <iprintf>
			printf("step_counter_increment: %d\n", config.cfg.step_counter.step_counter_increment);
 8005882:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005884:	4619      	mov	r1, r3
 8005886:	484e      	ldr	r0, [pc, #312]	@ (80059c0 <Open_BMI323_STEP_COUNTER+0x244>)
 8005888:	f012 fd90 	bl	80183ac <iprintf>
			printf("peak_duration_min_walking: %d\n", config.cfg.step_counter.peak_duration_min_walking);
 800588c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800588e:	4619      	mov	r1, r3
 8005890:	484c      	ldr	r0, [pc, #304]	@ (80059c4 <Open_BMI323_STEP_COUNTER+0x248>)
 8005892:	f012 fd8b 	bl	80183ac <iprintf>
			printf("peak_duration_min_running: %d\n", config.cfg.step_counter.peak_duration_min_running);
 8005896:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005898:	4619      	mov	r1, r3
 800589a:	484b      	ldr	r0, [pc, #300]	@ (80059c8 <Open_BMI323_STEP_COUNTER+0x24c>)
 800589c:	f012 fd86 	bl	80183ac <iprintf>
			printf("activity_detection_factor: %d\n", config.cfg.step_counter.activity_detection_factor);
 80058a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80058a2:	4619      	mov	r1, r3
 80058a4:	4849      	ldr	r0, [pc, #292]	@ (80059cc <Open_BMI323_STEP_COUNTER+0x250>)
 80058a6:	f012 fd81 	bl	80183ac <iprintf>
			printf("activity_detection_thres: %d\n", config.cfg.step_counter.activity_detection_thres);
 80058aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058ac:	4619      	mov	r1, r3
 80058ae:	4848      	ldr	r0, [pc, #288]	@ (80059d0 <Open_BMI323_STEP_COUNTER+0x254>)
 80058b0:	f012 fd7c 	bl	80183ac <iprintf>
			printf("step_duration_max: %d\n", config.cfg.step_counter.step_duration_max);
 80058b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80058b6:	4619      	mov	r1, r3
 80058b8:	4846      	ldr	r0, [pc, #280]	@ (80059d4 <Open_BMI323_STEP_COUNTER+0x258>)
 80058ba:	f012 fd77 	bl	80183ac <iprintf>
			printf("step_duration_window: %d\n", config.cfg.step_counter.step_duration_window);
 80058be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80058c0:	4619      	mov	r1, r3
 80058c2:	4845      	ldr	r0, [pc, #276]	@ (80059d8 <Open_BMI323_STEP_COUNTER+0x25c>)
 80058c4:	f012 fd72 	bl	80183ac <iprintf>
			printf("step_duration_pp_enabled: %d\n", config.cfg.step_counter.step_duration_pp_enabled);
 80058c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80058ca:	4619      	mov	r1, r3
 80058cc:	4843      	ldr	r0, [pc, #268]	@ (80059dc <Open_BMI323_STEP_COUNTER+0x260>)
 80058ce:	f012 fd6d 	bl	80183ac <iprintf>
			printf("step_duration_thres: %d\n", config.cfg.step_counter.step_duration_thres);
 80058d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80058d4:	4619      	mov	r1, r3
 80058d6:	4842      	ldr	r0, [pc, #264]	@ (80059e0 <Open_BMI323_STEP_COUNTER+0x264>)
 80058d8:	f012 fd68 	bl	80183ac <iprintf>
			printf("mean_crossing_pp_enabled: %d\n", config.cfg.step_counter.mean_crossing_pp_enabled);
 80058dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058e0:	4619      	mov	r1, r3
 80058e2:	4840      	ldr	r0, [pc, #256]	@ (80059e4 <Open_BMI323_STEP_COUNTER+0x268>)
 80058e4:	f012 fd62 	bl	80183ac <iprintf>
			printf("mcr_threshold: %d\n", config.cfg.step_counter.mcr_threshold);
 80058e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80058ec:	4619      	mov	r1, r3
 80058ee:	483e      	ldr	r0, [pc, #248]	@ (80059e8 <Open_BMI323_STEP_COUNTER+0x26c>)
 80058f0:	f012 fd5c 	bl	80183ac <iprintf>
			printf("sc_12_res: %d\n", config.cfg.step_counter.sc_12_res);
 80058f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80058f8:	4619      	mov	r1, r3
 80058fa:	483c      	ldr	r0, [pc, #240]	@ (80059ec <Open_BMI323_STEP_COUNTER+0x270>)
 80058fc:	f012 fd56 	bl	80183ac <iprintf>

			if (rslt == BMI323_OK)
 8005900:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005904:	2b00      	cmp	r3, #0
 8005906:	d12a      	bne.n	800595e <Open_BMI323_STEP_COUNTER+0x1e2>
			{
				/* Enable water-mark level for to get interrupt after 20 step counts. */
				config.cfg.step_counter.watermark_level = 1;
 8005908:	2301      	movs	r3, #1
 800590a:	837b      	strh	r3, [r7, #26]

				/* Set new configurations. */
				rslt = bmi323_set_sensor_config(&config, 1, dev);
 800590c:	f107 0318 	add.w	r3, r7, #24
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	2101      	movs	r1, #1
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe fe4a 	bl	80045ae <bmi323_set_sensor_config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				bmi3_error_codes_print_result("Set sensor config", rslt);
 8005920:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005924:	4619      	mov	r1, r3
 8005926:	4832      	ldr	r0, [pc, #200]	@ (80059f0 <Open_BMI323_STEP_COUNTER+0x274>)
 8005928:	f7ff fc52 	bl	80051d0 <bmi3_error_codes_print_result>

				if (rslt == BMI323_OK)
 800592c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005930:	2b00      	cmp	r3, #0
 8005932:	d114      	bne.n	800595e <Open_BMI323_STEP_COUNTER+0x1e2>
				{
					/* Get default configurations for the type of feature selected. */
					rslt = bmi323_get_sensor_config(&config, 1, dev);
 8005934:	f107 0318 	add.w	r3, r7, #24
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	2101      	movs	r1, #1
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fe4b 	bl	80045d8 <bmi323_get_sensor_config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					bmi3_error_codes_print_result("Get sensor config", rslt);
 8005948:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800594c:	4619      	mov	r1, r3
 800594e:	480f      	ldr	r0, [pc, #60]	@ (800598c <Open_BMI323_STEP_COUNTER+0x210>)
 8005950:	f7ff fc3e 	bl	80051d0 <bmi3_error_codes_print_result>

					printf("Step counter watermark level is %d\n", config.cfg.step_counter.watermark_level);
 8005954:	8b7b      	ldrh	r3, [r7, #26]
 8005956:	4619      	mov	r1, r3
 8005958:	4826      	ldr	r0, [pc, #152]	@ (80059f4 <Open_BMI323_STEP_COUNTER+0x278>)
 800595a:	f012 fd27 	bl	80183ac <iprintf>
				}
			}
		}
	}

	feature.step_counter_en = BMI323_ENABLE;
 800595e:	2301      	movs	r3, #1
 8005960:	747b      	strb	r3, [r7, #17]

	/* Enable the selected sensors. */
	rslt = bmi323_select_sensor(&feature, dev);
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fe5e 	bl	800462a <bmi323_select_sensor>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	bmi3_error_codes_print_result("Sensor enable", rslt);
 8005974:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005978:	4619      	mov	r1, r3
 800597a:	481f      	ldr	r0, [pc, #124]	@ (80059f8 <Open_BMI323_STEP_COUNTER+0x27c>)
 800597c:	f7ff fc28 	bl	80051d0 <bmi3_error_codes_print_result>
	
	return rslt;
 8005980:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8005984:	4618      	mov	r0, r3
 8005986:	3748      	adds	r7, #72	@ 0x48
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	0801c618 	.word	0x0801c618
 8005990:	0801c62c 	.word	0x0801c62c
 8005994:	0801c648 	.word	0x0801c648
 8005998:	0801c670 	.word	0x0801c670
 800599c:	0801c688 	.word	0x0801c688
 80059a0:	0801c69c 	.word	0x0801c69c
 80059a4:	0801c6b4 	.word	0x0801c6b4
 80059a8:	0801c6c8 	.word	0x0801c6c8
 80059ac:	0801c6e0 	.word	0x0801c6e0
 80059b0:	0801c6f4 	.word	0x0801c6f4
 80059b4:	0801c708 	.word	0x0801c708
 80059b8:	0801c71c 	.word	0x0801c71c
 80059bc:	0801c734 	.word	0x0801c734
 80059c0:	0801c750 	.word	0x0801c750
 80059c4:	0801c76c 	.word	0x0801c76c
 80059c8:	0801c78c 	.word	0x0801c78c
 80059cc:	0801c7ac 	.word	0x0801c7ac
 80059d0:	0801c7cc 	.word	0x0801c7cc
 80059d4:	0801c7ec 	.word	0x0801c7ec
 80059d8:	0801c804 	.word	0x0801c804
 80059dc:	0801c820 	.word	0x0801c820
 80059e0:	0801c840 	.word	0x0801c840
 80059e4:	0801c85c 	.word	0x0801c85c
 80059e8:	0801c87c 	.word	0x0801c87c
 80059ec:	0801c890 	.word	0x0801c890
 80059f0:	0801c8a0 	.word	0x0801c8a0
 80059f4:	0801c8b4 	.word	0x0801c8b4
 80059f8:	0801c8d8 	.word	0x0801c8d8

080059fc <Init_BMI323>:
		printf("0x%02X, value=0x%02X\r\n", reg_addr, value);
	}
}

int8_t Init_BMI323(struct bmi3_dev *dev)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMI3_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	75fb      	strb	r3, [r7, #23]
	* For SPI : BMI3_SPI_INTF
	*/
	#if defined(USE_I2C_INTERFACE)
	rslt = bmi3_interface_init(dev, BMI3_I2C_INTF);
	#elif defined(USE_SPI_INTERFACE)
	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fcd8 	bl	80053c0 <bmi3_interface_init>
 8005a10:	4603      	mov	r3, r0
 8005a12:	75fb      	strb	r3, [r7, #23]
	#endif
	bmi3_error_codes_print_result("bmi3_interface_init",rslt);
 8005a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	482c      	ldr	r0, [pc, #176]	@ (8005acc <Init_BMI323+0xd0>)
 8005a1c:	f7ff fbd8 	bl	80051d0 <bmi3_error_codes_print_result>

	//bmi3_soft_reset(dev);
	//HAL_Delay(100);
	bst_delay_us(100000, dev->intf_ptr);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4619      	mov	r1, r3
 8005a26:	482a      	ldr	r0, [pc, #168]	@ (8005ad0 <Init_BMI323+0xd4>)
 8005a28:	f000 f8cc 	bl	8005bc4 <bst_delay_us>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7fe fd77 	bl	8004520 <bmi323_init>
 8005a32:	4603      	mov	r3, r0
 8005a34:	75fb      	strb	r3, [r7, #23]
	printf("bmi323_init: 0x%02X\n",rslt);
 8005a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4825      	ldr	r0, [pc, #148]	@ (8005ad4 <Init_BMI323+0xd8>)
 8005a3e:	f012 fcb5 	bl	80183ac <iprintf>

	if (rslt != BMI3_OK)
 8005a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <Init_BMI323+0x60>
	{
		printf("bmi323_init() failed, error code: %d\r\n", rslt);
 8005a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4821      	ldr	r0, [pc, #132]	@ (8005ad8 <Init_BMI323+0xdc>)
 8005a52:	f012 fcab 	bl	80183ac <iprintf>
		return rslt;
 8005a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a5a:	e033      	b.n	8005ac4 <Init_BMI323+0xc8>
	}
	else
	{
		printf("BMI323 initialized successfully\r\n");
 8005a5c:	481f      	ldr	r0, [pc, #124]	@ (8005adc <Init_BMI323+0xe0>)
 8005a5e:	f012 fd0d 	bl	801847c <puts>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 8005a62:	f107 0116 	add.w	r1, r7, #22
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f7fb f866 	bl	8000b3c <bmi3_get_regs>
 8005a70:	4603      	mov	r3, r0
 8005a72:	75fb      	strb	r3, [r7, #23]
	if (rslt != BMI3_OK) 
 8005a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <Init_BMI323+0x92>
	{
		printf("read chip ID failed, error code: %d\r\n", rslt);
 8005a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a80:	4619      	mov	r1, r3
 8005a82:	4817      	ldr	r0, [pc, #92]	@ (8005ae0 <Init_BMI323+0xe4>)
 8005a84:	f012 fc92 	bl	80183ac <iprintf>
		return rslt;
 8005a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a8c:	e01a      	b.n	8005ac4 <Init_BMI323+0xc8>
	}

	printf("Chip ID:0x%02x\r\n", chipid);
 8005a8e:	7dbb      	ldrb	r3, [r7, #22]
 8005a90:	4619      	mov	r1, r3
 8005a92:	4814      	ldr	r0, [pc, #80]	@ (8005ae4 <Init_BMI323+0xe8>)
 8005a94:	f012 fc8a 	bl	80183ac <iprintf>
#endif
#if defined(FOC)
//bmi3_perform_accel_foc();
//bmi3_perform_gyro_foc(dev)
#endif
	struct bmi3_st_result st_result_status = { 0 };
 8005a98:	f107 030c 	add.w	r3, r7, #12
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	721a      	strb	r2, [r3, #8]
	Close_BMI323_GYRO(dev);
	#elif defined(GYRO_ONLY)
	Close_BMI323_ACC(dev);
	Open_BMI323_GYRO(dev);
	#elif defined(ACC_GYRO)
	Open_BMI323_ACC(dev);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fcd5 	bl	8005454 <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fd52 	bl	8005554 <Open_BMI323_GYRO>
	#endif

	#if defined(STEP_COUNTER)
	Open_BMI323_STEP_COUNTER(dev);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fe63 	bl	800577c <Open_BMI323_STEP_COUNTER>
	#endif

	#if defined(FIFO_POLL)
	Open_BMI323_FIFO(dev);
	#elif defined(FIFO_WM_INT)
	Open_BMI323_FIFO(dev);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fdca 	bl	8005650 <Open_BMI323_FIFO>
	Enable_MCU_INT2_Pin();
 8005abc:	f000 f814 	bl	8005ae8 <Enable_MCU_INT2_Pin>

	#if !defined(FIFO_WM_INT)
	Disable_MCU_INT2_Pin();
	#endif

	return rslt;
 8005ac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	0801c910 	.word	0x0801c910
 8005ad0:	000186a0 	.word	0x000186a0
 8005ad4:	0801c924 	.word	0x0801c924
 8005ad8:	0801c93c 	.word	0x0801c93c
 8005adc:	0801c964 	.word	0x0801c964
 8005ae0:	0801c988 	.word	0x0801c988
 8005ae4:	0801c9b0 	.word	0x0801c9b0

08005ae8 <Enable_MCU_INT2_Pin>:
  	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
#endif
}

void Enable_MCU_INT2_Pin(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	611a      	str	r2, [r3, #16]

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
  	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
#elif defined(USE_SHUTTLE30)	
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005afc:	4b13      	ldr	r3, [pc, #76]	@ (8005b4c <Enable_MCU_INT2_Pin+0x64>)
 8005afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b02:	4a12      	ldr	r2, [pc, #72]	@ (8005b4c <Enable_MCU_INT2_Pin+0x64>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <Enable_MCU_INT2_Pin+0x64>)
 8005b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	683b      	ldr	r3, [r7, #0]
	
	/*Configure GPIO pin : INT1_Pin PA10*/
	GPIO_InitStruct.Pin = INT1_Pin;
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005b22:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4808      	ldr	r0, [pc, #32]	@ (8005b50 <Enable_MCU_INT2_Pin+0x68>)
 8005b2e:	f005 fa1f 	bl	800af70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2105      	movs	r1, #5
 8005b36:	2028      	movs	r0, #40	@ 0x28
 8005b38:	f004 fbfb 	bl	800a332 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005b3c:	2028      	movs	r0, #40	@ 0x28
 8005b3e:	f004 fc12 	bl	800a366 <HAL_NVIC_EnableIRQ>

#endif
}
 8005b42:	bf00      	nop
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	58021000 	.word	0x58021000

08005b54 <HAL_GPIO_EXTI_Callback>:
//
//#endif
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9)//PA9
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b64:	d106      	bne.n	8005b74 <HAL_GPIO_EXTI_Callback+0x20>
	{
		#if defined(USE_SHUTTLE30)
		int3_flag = 1;
 8005b66:	4b11      	ldr	r3, [pc, #68]	@ (8005bac <HAL_GPIO_EXTI_Callback+0x58>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
		PDEBUG("INT3 Triggered\r\n");
 8005b6c:	4810      	ldr	r0, [pc, #64]	@ (8005bb0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8005b6e:	f000 f845 	bl	8005bfc <PDEBUG>
	}
	else if(GPIO_Pin == GPIO_PIN_5)//DRDY_BMM150
	{
		PDEBUG("DRDY_BMM150 Triggered\r\n");
	}
}
 8005b72:	e017      	b.n	8005ba4 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == GPIO_PIN_10)//PA10
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7a:	d106      	bne.n	8005b8a <HAL_GPIO_EXTI_Callback+0x36>
		int2_flag = 1;
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <HAL_GPIO_EXTI_Callback+0x60>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
		PDEBUG("INT2 Triggered\r\n");
 8005b82:	480d      	ldr	r0, [pc, #52]	@ (8005bb8 <HAL_GPIO_EXTI_Callback+0x64>)
 8005b84:	f000 f83a 	bl	8005bfc <PDEBUG>
}
 8005b88:	e00c      	b.n	8005ba4 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == GPIO_PIN_3)//PB3
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d103      	bne.n	8005b98 <HAL_GPIO_EXTI_Callback+0x44>
		int1_flag = 1;
 8005b90:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <HAL_GPIO_EXTI_Callback+0x68>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
}
 8005b96:	e005      	b.n	8005ba4 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == GPIO_PIN_5)//DRDY_BMM150
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d102      	bne.n	8005ba4 <HAL_GPIO_EXTI_Callback+0x50>
		PDEBUG("DRDY_BMM150 Triggered\r\n");
 8005b9e:	4808      	ldr	r0, [pc, #32]	@ (8005bc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005ba0:	f000 f82c 	bl	8005bfc <PDEBUG>
}
 8005ba4:	bf00      	nop
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	2400155a 	.word	0x2400155a
 8005bb0:	0801ca84 	.word	0x0801ca84
 8005bb4:	24001559 	.word	0x24001559
 8005bb8:	0801ca98 	.word	0x0801ca98
 8005bbc:	24001558 	.word	0x24001558
 8005bc0:	0801caac 	.word	0x0801caac

08005bc4 <bst_delay_us>:

void bst_delay_us(uint32_t period, void *intf_ptr)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8005bce:	e008      	b.n	8005be2 <bst_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e002      	b.n	8005bdc <bst_delay_us+0x18>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b53      	cmp	r3, #83	@ 0x53
 8005be0:	d9f9      	bls.n	8005bd6 <bst_delay_us+0x12>
	while(period--)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	1e5a      	subs	r2, r3, #1
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f1      	bne.n	8005bd0 <bst_delay_us+0xc>
		{
			;
		}
	}
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <PDEBUG>:
//    HAL_UART_Transmit(&UART_HANDLE, buff, size, BUS_TIMEOUT);
//}

char chBuffer[512];
void PDEBUG(char *format, ...)
{
 8005bfc:	b40f      	push	{r0, r1, r2, r3}
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
#if defined(DEBUG_EN)
    va_list ap;
    char timestamp[16];
    va_start(ap, format);
 8005c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c08:	617b      	str	r3, [r7, #20]
    vsnprintf(chBuffer, sizeof(chBuffer), format, ap);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c12:	480a      	ldr	r0, [pc, #40]	@ (8005c3c <PDEBUG+0x40>)
 8005c14:	f012 fcc8 	bl	80185a8 <vsniprintf>
    //sprintf(timestamp, "[%d]", xTaskGetTickCount()); //xTaskGetTickCountFromISR()
    printf((uint8_t *)timestamp, strlen(timestamp));
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fa fbc8 	bl	80003b0 <strlen>
 8005c20:	4602      	mov	r2, r0
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f012 fbc0 	bl	80183ac <iprintf>
    //UART_Printf((uint8_t *)chBuffer,strlen(chBuffer));
    va_end(ap);
#endif
}
 8005c2c:	bf00      	nop
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c36:	b004      	add	sp, #16
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2400155c 	.word	0x2400155c

08005c40 <BMI323_SensorAPI_I2Cx_Read>:
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, length+1, BUS_TIMEOUT);
	return 0;
}

int8_t BMI323_SensorAPI_I2Cx_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &reg_addr, 1, BUS_TIMEOUT);
 8005c5e:	f107 020f 	add.w	r2, r7, #15
 8005c62:	8ab9      	ldrh	r1, [r7, #20]
 8005c64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	480c      	ldr	r0, [pc, #48]	@ (8005ca0 <BMI323_SensorAPI_I2Cx_Read+0x60>)
 8005c6e:	f005 fc0f 	bl	800b490 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, GRXBuffer, length+2, BUS_TIMEOUT);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3302      	adds	r3, #2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8ab9      	ldrh	r1, [r7, #20]
 8005c7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c80:	9200      	str	r2, [sp, #0]
 8005c82:	4a08      	ldr	r2, [pc, #32]	@ (8005ca4 <BMI323_SensorAPI_I2Cx_Read+0x64>)
 8005c84:	4806      	ldr	r0, [pc, #24]	@ (8005ca0 <BMI323_SensorAPI_I2Cx_Read+0x60>)
 8005c86:	f005 fd1b 	bl	800b6c0 <HAL_I2C_Master_Receive>
	memcpy(reg_data, GRXBuffer+2, length);
 8005c8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ca8 <BMI323_SensorAPI_I2Cx_Read+0x68>)
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68b8      	ldr	r0, [r7, #8]
 8005c92:	f012 fdaa 	bl	80187ea <memcpy>
	return 0;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	2400183c 	.word	0x2400183c
 8005ca4:	24000d58 	.word	0x24000d58
 8005ca8:	24000d5a 	.word	0x24000d5a

08005cac <BMI323_SensorAPI_I2Cx_Write>:

int8_t BMI323_SensorAPI_I2Cx_Write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = reg_addr;
 8005cca:	4a0c      	ldr	r2, [pc, #48]	@ (8005cfc <BMI323_SensorAPI_I2Cx_Write+0x50>)
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], reg_data, length);
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	480a      	ldr	r0, [pc, #40]	@ (8005d00 <BMI323_SensorAPI_I2Cx_Write+0x54>)
 8005cd6:	f012 fd88 	bl	80187ea <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, length+1, BUS_TIMEOUT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3301      	adds	r3, #1
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	8ab9      	ldrh	r1, [r7, #20]
 8005ce4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ce8:	9200      	str	r2, [sp, #0]
 8005cea:	4a04      	ldr	r2, [pc, #16]	@ (8005cfc <BMI323_SensorAPI_I2Cx_Write+0x50>)
 8005cec:	4805      	ldr	r0, [pc, #20]	@ (8005d04 <BMI323_SensorAPI_I2Cx_Write+0x58>)
 8005cee:	f005 fbcf 	bl	800b490 <HAL_I2C_Master_Transmit>
	return 0;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	24000b58 	.word	0x24000b58
 8005d00:	24000b59 	.word	0x24000b59
 8005d04:	2400183c 	.word	0x2400183c

08005d08 <SensorAPI_SPIx_Read>:

int8_t SensorAPI_SPIx_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b14      	ldr	r3, [pc, #80]	@ (8005d74 <SensorAPI_SPIx_Read+0x6c>)
 8005d22:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8005d24:	2200      	movs	r2, #0
 8005d26:	2110      	movs	r1, #16
 8005d28:	4813      	ldr	r0, [pc, #76]	@ (8005d78 <SensorAPI_SPIx_Read+0x70>)
 8005d2a:	f005 fae1 	bl	800b2f0 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&SPI_HANDLE, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3301      	adds	r3, #1
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d3a:	9200      	str	r2, [sp, #0]
 8005d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d7c <SensorAPI_SPIx_Read+0x74>)
 8005d3e:	490d      	ldr	r1, [pc, #52]	@ (8005d74 <SensorAPI_SPIx_Read+0x6c>)
 8005d40:	480f      	ldr	r0, [pc, #60]	@ (8005d80 <SensorAPI_SPIx_Read+0x78>)
 8005d42:	f00c fa2f 	bl	80121a4 <HAL_SPI_TransmitReceive>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005d46:	bf00      	nop
 8005d48:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <SensorAPI_SPIx_Read+0x78>)
 8005d4a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d0f9      	beq.n	8005d48 <SensorAPI_SPIx_Read+0x40>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 8005d54:	2201      	movs	r2, #1
 8005d56:	2110      	movs	r1, #16
 8005d58:	4807      	ldr	r0, [pc, #28]	@ (8005d78 <SensorAPI_SPIx_Read+0x70>)
 8005d5a:	f005 fac9 	bl	800b2f0 <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 8005d5e:	4b09      	ldr	r3, [pc, #36]	@ (8005d84 <SensorAPI_SPIx_Read+0x7c>)
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	4619      	mov	r1, r3
 8005d64:	68b8      	ldr	r0, [r7, #8]
 8005d66:	f012 fd40 	bl	80187ea <memcpy>

    return 0;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	24000b58 	.word	0x24000b58
 8005d78:	58020000 	.word	0x58020000
 8005d7c:	24000d58 	.word	0x24000d58
 8005d80:	240019b4 	.word	0x240019b4
 8005d84:	24000d59 	.word	0x24000d59

08005d88 <SensorAPI_SPIx_Write>:

int8_t SensorAPI_SPIx_Write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b13      	ldr	r3, [pc, #76]	@ (8005df0 <SensorAPI_SPIx_Write+0x68>)
 8005da2:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	4812      	ldr	r0, [pc, #72]	@ (8005df4 <SensorAPI_SPIx_Write+0x6c>)
 8005daa:	f012 fd1e 	bl	80187ea <memcpy>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8005dae:	2200      	movs	r2, #0
 8005db0:	2110      	movs	r1, #16
 8005db2:	4811      	ldr	r0, [pc, #68]	@ (8005df8 <SensorAPI_SPIx_Write+0x70>)
 8005db4:	f005 fa9c 	bl	800b2f0 <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&SPI_HANDLE, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dc4:	490a      	ldr	r1, [pc, #40]	@ (8005df0 <SensorAPI_SPIx_Write+0x68>)
 8005dc6:	480d      	ldr	r0, [pc, #52]	@ (8005dfc <SensorAPI_SPIx_Write+0x74>)
 8005dc8:	f00b fffe 	bl	8011dc8 <HAL_SPI_Transmit>
    while(SPI_HANDLE.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8005dcc:	bf00      	nop
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <SensorAPI_SPIx_Write+0x74>)
 8005dd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d0f9      	beq.n	8005dce <SensorAPI_SPIx_Write+0x46>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 8005dda:	2201      	movs	r2, #1
 8005ddc:	2110      	movs	r1, #16
 8005dde:	4806      	ldr	r0, [pc, #24]	@ (8005df8 <SensorAPI_SPIx_Write+0x70>)
 8005de0:	f005 fa86 	bl	800b2f0 <HAL_GPIO_WritePin>

    return 0;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	24000b58 	.word	0x24000b58
 8005df4:	24000b59 	.word	0x24000b59
 8005df8:	58020000 	.word	0x58020000
 8005dfc:	240019b4 	.word	0x240019b4

08005e00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005e08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005e0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005e18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005e1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8005e20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005e28:	e000      	b.n	8005e2c <ITM_SendChar+0x2c>
    {
      __NOP();
 8005e2a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005e2c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f9      	beq.n	8005e2a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005e36:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005e40:	687b      	ldr	r3, [r7, #4]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
	int i=0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e009      	b.n	8005e78 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	60ba      	str	r2, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ffc7 	bl	8005e00 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	3301      	adds	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	dbf1      	blt.n	8005e64 <_write+0x16>
	}
	return len;
 8005e80:	687b      	ldr	r3, [r7, #4]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	@ 0x28
 8005e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005e92:	f001 faf7 	bl	8007484 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e96:	f002 fd47 	bl	8008928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e9a:	f000 f845 	bl	8005f28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005e9e:	f000 f8b5 	bl	800600c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ea2:	f001 f991 	bl	80071c8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8005ea6:	f000 fa87 	bl	80063b8 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8005eaa:	f000 f8df 	bl	800606c <MX_ADC1_Init>
  MX_I2C1_Init();
 8005eae:	f000 f9c3 	bl	8006238 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005eb2:	f000 fa01 	bl	80062b8 <MX_I2C2_Init>
  MX_I2C4_Init();
 8005eb6:	f000 fa3f 	bl	8006338 <MX_I2C4_Init>
  MX_SPI1_Init();
 8005eba:	f000 fa9b 	bl	80063f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005ebe:	f000 faef 	bl	80064a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005ec2:	f000 fb99 	bl	80065f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8005ec6:	f000 fc5b 	bl	8006780 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005eca:	f000 fcb3 	bl	8006834 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005ece:	f000 fd0b 	bl	80068e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8005ed2:	f000 fd63 	bl	800699c <MX_TIM5_Init>
  MX_TIM8_Init();
 8005ed6:	f000 fdbb 	bl	8006a50 <MX_TIM8_Init>
  MX_TIM12_Init();
 8005eda:	f000 fe49 	bl	8006b70 <MX_TIM12_Init>
  MX_TIM15_Init();
 8005ede:	f000 fea1 	bl	8006c24 <MX_TIM15_Init>
  MX_UART4_Init();
 8005ee2:	f000 ff25 	bl	8006d30 <MX_UART4_Init>
  MX_UART5_Init();
 8005ee6:	f000 ff6f 	bl	8006dc8 <MX_UART5_Init>
  MX_UART7_Init();
 8005eea:	f000 ffb9 	bl	8006e60 <MX_UART7_Init>
  MX_UART8_Init();
 8005eee:	f001 f803 	bl	8006ef8 <MX_UART8_Init>
  MX_USART1_Init();
 8005ef2:	f001 f84f 	bl	8006f94 <MX_USART1_Init>
  MX_USART2_Init();
 8005ef6:	f001 f8ab 	bl	8007050 <MX_USART2_Init>
  MX_USART3_Init();
 8005efa:	f001 f907 	bl	800710c <MX_USART3_Init>
  MX_ADC2_Init();
 8005efe:	f000 f931 	bl	8006164 <MX_ADC2_Init>
  MX_SPI4_Init();
 8005f02:	f000 fb23 	bl	800654c <MX_SPI4_Init>
  MX_FATFS_Init();
 8005f06:	f011 f951 	bl	80171ac <MX_FATFS_Init>
  //SensorManager_Init();

  //Test BMI323
  struct bmi3_dev bmi323dev;
  uint8_t bmi323_dev_addr;
	int8_t rslt = BMI3_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	struct bmi3_dev *dev;
	dev = &bmi323dev;
 8005f10:	463b      	mov	r3, r7
 8005f12:	623b      	str	r3, [r7, #32]
	Init_BMI323(dev);
 8005f14:	6a38      	ldr	r0, [r7, #32]
 8005f16:	f7ff fd71 	bl	80059fc <Init_BMI323>
	printf("After Init!!");
 8005f1a:	4802      	ldr	r0, [pc, #8]	@ (8005f24 <main+0x98>)
 8005f1c:	f012 fa46 	bl	80183ac <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <main+0x94>
 8005f24:	0801cb04 	.word	0x0801cb04

08005f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b09c      	sub	sp, #112	@ 0x70
 8005f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f32:	224c      	movs	r2, #76	@ 0x4c
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f012 fbd8 	bl	80186ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	2220      	movs	r2, #32
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f012 fbd2 	bl	80186ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005f48:	2002      	movs	r0, #2
 8005f4a:	f006 feb5 	bl	800ccb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4b2d      	ldr	r3, [pc, #180]	@ (8006008 <SystemClock_Config+0xe0>)
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8006008 <SystemClock_Config+0xe0>)
 8005f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f60:	6193      	str	r3, [r2, #24]
 8005f62:	4b29      	ldr	r3, [pc, #164]	@ (8006008 <SystemClock_Config+0xe0>)
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005f6e:	bf00      	nop
 8005f70:	4b25      	ldr	r3, [pc, #148]	@ (8006008 <SystemClock_Config+0xe0>)
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7c:	d1f8      	bne.n	8005f70 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005f90:	2304      	movs	r3, #4
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8005f94:	2310      	movs	r3, #16
 8005f96:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f006 feb9 	bl	800cd2c <HAL_RCC_OscConfig>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005fc0:	f001 fa8c 	bl	80074dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fc4:	233f      	movs	r3, #63	@ 0x3f
 8005fc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005fd8:	2340      	movs	r3, #64	@ 0x40
 8005fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fe0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005fe2:	2340      	movs	r3, #64	@ 0x40
 8005fe4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005fe6:	1d3b      	adds	r3, r7, #4
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f007 fa78 	bl	800d4e0 <HAL_RCC_ClockConfig>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005ff6:	f001 fa71 	bl	80074dc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8005ffa:	f007 fc27 	bl	800d84c <HAL_RCC_EnableCSS>
}
 8005ffe:	bf00      	nop
 8006000:	3770      	adds	r7, #112	@ 0x70
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	58024800 	.word	0x58024800

0800600c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b0ae      	sub	sp, #184	@ 0xb8
 8006010:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006012:	463b      	mov	r3, r7
 8006014:	22b8      	movs	r2, #184	@ 0xb8
 8006016:	2100      	movs	r1, #0
 8006018:	4618      	mov	r0, r3
 800601a:	f012 fb67 	bl	80186ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800601e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800602a:	2304      	movs	r3, #4
 800602c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800602e:	2310      	movs	r3, #16
 8006030:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8006032:	2305      	movs	r3, #5
 8006034:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006036:	2302      	movs	r3, #2
 8006038:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800603a:	2302      	movs	r3, #2
 800603c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800603e:	23c0      	movs	r3, #192	@ 0xc0
 8006040:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006042:	2300      	movs	r3, #0
 8006044:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800604a:	2300      	movs	r3, #0
 800604c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006050:	463b      	mov	r3, r7
 8006052:	4618      	mov	r0, r3
 8006054:	f007 fdfc 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800605e:	f001 fa3d 	bl	80074dc <Error_Handler>
  }
}
 8006062:	bf00      	nop
 8006064:	37b8      	adds	r7, #184	@ 0xb8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08c      	sub	sp, #48	@ 0x30
 8006070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800607e:	463b      	mov	r3, r7
 8006080:	2224      	movs	r2, #36	@ 0x24
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f012 fb31 	bl	80186ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800608a:	4b32      	ldr	r3, [pc, #200]	@ (8006154 <MX_ADC1_Init+0xe8>)
 800608c:	4a32      	ldr	r2, [pc, #200]	@ (8006158 <MX_ADC1_Init+0xec>)
 800608e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006090:	4b30      	ldr	r3, [pc, #192]	@ (8006154 <MX_ADC1_Init+0xe8>)
 8006092:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006096:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8006098:	4b2e      	ldr	r3, [pc, #184]	@ (8006154 <MX_ADC1_Init+0xe8>)
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800609e:	4b2d      	ldr	r3, [pc, #180]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80060a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060a6:	2204      	movs	r2, #4
 80060a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80060aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80060b0:	4b28      	ldr	r3, [pc, #160]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80060b6:	4b27      	ldr	r3, [pc, #156]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80060bc:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80060c4:	4b23      	ldr	r3, [pc, #140]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80060ca:	4b22      	ldr	r3, [pc, #136]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80060d0:	4b20      	ldr	r3, [pc, #128]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80060d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060d8:	2200      	movs	r2, #0
 80060da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80060dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060de:	2200      	movs	r2, #0
 80060e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80060ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80060f0:	4818      	ldr	r0, [pc, #96]	@ (8006154 <MX_ADC1_Init+0xe8>)
 80060f2:	f002 ff15 	bl	8008f20 <HAL_ADC_Init>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80060fc:	f001 f9ee 	bl	80074dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006108:	4619      	mov	r1, r3
 800610a:	4812      	ldr	r0, [pc, #72]	@ (8006154 <MX_ADC1_Init+0xe8>)
 800610c:	f003 ff54 	bl	8009fb8 <HAL_ADCEx_MultiModeConfigChannel>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8006116:	f001 f9e1 	bl	80074dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800611a:	4b10      	ldr	r3, [pc, #64]	@ (800615c <MX_ADC1_Init+0xf0>)
 800611c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800611e:	2306      	movs	r3, #6
 8006120:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8006126:	4b0e      	ldr	r3, [pc, #56]	@ (8006160 <MX_ADC1_Init+0xf4>)
 8006128:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800612a:	2304      	movs	r3, #4
 800612c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8006132:	2300      	movs	r3, #0
 8006134:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006138:	463b      	mov	r3, r7
 800613a:	4619      	mov	r1, r3
 800613c:	4805      	ldr	r0, [pc, #20]	@ (8006154 <MX_ADC1_Init+0xe8>)
 800613e:	f003 f8f7 	bl	8009330 <HAL_ADC_ConfigChannel>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006148:	f001 f9c8 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800614c:	bf00      	nop
 800614e:	3730      	adds	r7, #48	@ 0x30
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	2400175c 	.word	0x2400175c
 8006158:	40022000 	.word	0x40022000
 800615c:	10c00010 	.word	0x10c00010
 8006160:	47ff0000 	.word	0x47ff0000

08006164 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	@ 0x28
 8006168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	2224      	movs	r2, #36	@ 0x24
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f012 fabb 	bl	80186ec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8006176:	4b2c      	ldr	r3, [pc, #176]	@ (8006228 <MX_ADC2_Init+0xc4>)
 8006178:	4a2c      	ldr	r2, [pc, #176]	@ (800622c <MX_ADC2_Init+0xc8>)
 800617a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800617c:	4b2a      	ldr	r3, [pc, #168]	@ (8006228 <MX_ADC2_Init+0xc4>)
 800617e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006182:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8006184:	4b28      	ldr	r3, [pc, #160]	@ (8006228 <MX_ADC2_Init+0xc4>)
 8006186:	2200      	movs	r2, #0
 8006188:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800618a:	4b27      	ldr	r3, [pc, #156]	@ (8006228 <MX_ADC2_Init+0xc4>)
 800618c:	2200      	movs	r2, #0
 800618e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006190:	4b25      	ldr	r3, [pc, #148]	@ (8006228 <MX_ADC2_Init+0xc4>)
 8006192:	2204      	movs	r2, #4
 8006194:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006196:	4b24      	ldr	r3, [pc, #144]	@ (8006228 <MX_ADC2_Init+0xc4>)
 8006198:	2200      	movs	r2, #0
 800619a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800619c:	4b22      	ldr	r3, [pc, #136]	@ (8006228 <MX_ADC2_Init+0xc4>)
 800619e:	2200      	movs	r2, #0
 80061a0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80061a2:	4b21      	ldr	r3, [pc, #132]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80061a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80061bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80061c2:	4b19      	ldr	r3, [pc, #100]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80061c8:	4b17      	ldr	r3, [pc, #92]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80061ce:	4b16      	ldr	r3, [pc, #88]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80061d6:	4b14      	ldr	r3, [pc, #80]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061d8:	2201      	movs	r2, #1
 80061da:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80061dc:	4812      	ldr	r0, [pc, #72]	@ (8006228 <MX_ADC2_Init+0xc4>)
 80061de:	f002 fe9f 	bl	8008f20 <HAL_ADC_Init>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80061e8:	f001 f978 	bl	80074dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80061ec:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <MX_ADC2_Init+0xcc>)
 80061ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80061f0:	2306      	movs	r3, #6
 80061f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80061f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006234 <MX_ADC2_Init+0xd0>)
 80061fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80061fc:	2304      	movs	r3, #4
 80061fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800620a:	1d3b      	adds	r3, r7, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4806      	ldr	r0, [pc, #24]	@ (8006228 <MX_ADC2_Init+0xc4>)
 8006210:	f003 f88e 	bl	8009330 <HAL_ADC_ConfigChannel>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800621a:	f001 f95f 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800621e:	bf00      	nop
 8006220:	3728      	adds	r7, #40	@ 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	240017cc 	.word	0x240017cc
 800622c:	40022100 	.word	0x40022100
 8006230:	14f00020 	.word	0x14f00020
 8006234:	47ff0000 	.word	0x47ff0000

08006238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800623c:	4b1b      	ldr	r3, [pc, #108]	@ (80062ac <MX_I2C1_Init+0x74>)
 800623e:	4a1c      	ldr	r2, [pc, #112]	@ (80062b0 <MX_I2C1_Init+0x78>)
 8006240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8006242:	4b1a      	ldr	r3, [pc, #104]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006244:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <MX_I2C1_Init+0x7c>)
 8006246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006248:	4b18      	ldr	r3, [pc, #96]	@ (80062ac <MX_I2C1_Init+0x74>)
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800624e:	4b17      	ldr	r3, [pc, #92]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006250:	2201      	movs	r2, #1
 8006252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006254:	4b15      	ldr	r3, [pc, #84]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006256:	2200      	movs	r2, #0
 8006258:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800625a:	4b14      	ldr	r3, [pc, #80]	@ (80062ac <MX_I2C1_Init+0x74>)
 800625c:	2200      	movs	r2, #0
 800625e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006260:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006262:	2200      	movs	r2, #0
 8006264:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006266:	4b11      	ldr	r3, [pc, #68]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006268:	2200      	movs	r2, #0
 800626a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800626c:	4b0f      	ldr	r3, [pc, #60]	@ (80062ac <MX_I2C1_Init+0x74>)
 800626e:	2200      	movs	r2, #0
 8006270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006272:	480e      	ldr	r0, [pc, #56]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006274:	f005 f870 	bl	800b358 <HAL_I2C_Init>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800627e:	f001 f92d 	bl	80074dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006282:	2100      	movs	r1, #0
 8006284:	4809      	ldr	r0, [pc, #36]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006286:	f006 fc7f 	bl	800cb88 <HAL_I2CEx_ConfigAnalogFilter>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006290:	f001 f924 	bl	80074dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006294:	2100      	movs	r1, #0
 8006296:	4805      	ldr	r0, [pc, #20]	@ (80062ac <MX_I2C1_Init+0x74>)
 8006298:	f006 fcc1 	bl	800cc1e <HAL_I2CEx_ConfigDigitalFilter>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80062a2:	f001 f91b 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2400183c 	.word	0x2400183c
 80062b0:	40005400 	.word	0x40005400
 80062b4:	20303e5d 	.word	0x20303e5d

080062b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80062bc:	4b1b      	ldr	r3, [pc, #108]	@ (800632c <MX_I2C2_Init+0x74>)
 80062be:	4a1c      	ldr	r2, [pc, #112]	@ (8006330 <MX_I2C2_Init+0x78>)
 80062c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80062c2:	4b1a      	ldr	r3, [pc, #104]	@ (800632c <MX_I2C2_Init+0x74>)
 80062c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006334 <MX_I2C2_Init+0x7c>)
 80062c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80062c8:	4b18      	ldr	r3, [pc, #96]	@ (800632c <MX_I2C2_Init+0x74>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80062ce:	4b17      	ldr	r3, [pc, #92]	@ (800632c <MX_I2C2_Init+0x74>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062d4:	4b15      	ldr	r3, [pc, #84]	@ (800632c <MX_I2C2_Init+0x74>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80062da:	4b14      	ldr	r3, [pc, #80]	@ (800632c <MX_I2C2_Init+0x74>)
 80062dc:	2200      	movs	r2, #0
 80062de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80062e0:	4b12      	ldr	r3, [pc, #72]	@ (800632c <MX_I2C2_Init+0x74>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062e6:	4b11      	ldr	r3, [pc, #68]	@ (800632c <MX_I2C2_Init+0x74>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80062ec:	4b0f      	ldr	r3, [pc, #60]	@ (800632c <MX_I2C2_Init+0x74>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80062f2:	480e      	ldr	r0, [pc, #56]	@ (800632c <MX_I2C2_Init+0x74>)
 80062f4:	f005 f830 	bl	800b358 <HAL_I2C_Init>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80062fe:	f001 f8ed 	bl	80074dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006302:	2100      	movs	r1, #0
 8006304:	4809      	ldr	r0, [pc, #36]	@ (800632c <MX_I2C2_Init+0x74>)
 8006306:	f006 fc3f 	bl	800cb88 <HAL_I2CEx_ConfigAnalogFilter>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006310:	f001 f8e4 	bl	80074dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006314:	2100      	movs	r1, #0
 8006316:	4805      	ldr	r0, [pc, #20]	@ (800632c <MX_I2C2_Init+0x74>)
 8006318:	f006 fc81 	bl	800cc1e <HAL_I2CEx_ConfigDigitalFilter>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006322:	f001 f8db 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	24001890 	.word	0x24001890
 8006330:	40005800 	.word	0x40005800
 8006334:	20303e5d 	.word	0x20303e5d

08006338 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800633c:	4b1b      	ldr	r3, [pc, #108]	@ (80063ac <MX_I2C4_Init+0x74>)
 800633e:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <MX_I2C4_Init+0x78>)
 8006340:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00B0DBFF;
 8006342:	4b1a      	ldr	r3, [pc, #104]	@ (80063ac <MX_I2C4_Init+0x74>)
 8006344:	4a1b      	ldr	r2, [pc, #108]	@ (80063b4 <MX_I2C4_Init+0x7c>)
 8006346:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8006348:	4b18      	ldr	r3, [pc, #96]	@ (80063ac <MX_I2C4_Init+0x74>)
 800634a:	2200      	movs	r2, #0
 800634c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800634e:	4b17      	ldr	r3, [pc, #92]	@ (80063ac <MX_I2C4_Init+0x74>)
 8006350:	2201      	movs	r2, #1
 8006352:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006354:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <MX_I2C4_Init+0x74>)
 8006356:	2200      	movs	r2, #0
 8006358:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800635a:	4b14      	ldr	r3, [pc, #80]	@ (80063ac <MX_I2C4_Init+0x74>)
 800635c:	2200      	movs	r2, #0
 800635e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006360:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <MX_I2C4_Init+0x74>)
 8006362:	2200      	movs	r2, #0
 8006364:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006366:	4b11      	ldr	r3, [pc, #68]	@ (80063ac <MX_I2C4_Init+0x74>)
 8006368:	2200      	movs	r2, #0
 800636a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800636c:	4b0f      	ldr	r3, [pc, #60]	@ (80063ac <MX_I2C4_Init+0x74>)
 800636e:	2200      	movs	r2, #0
 8006370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8006372:	480e      	ldr	r0, [pc, #56]	@ (80063ac <MX_I2C4_Init+0x74>)
 8006374:	f004 fff0 	bl	800b358 <HAL_I2C_Init>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800637e:	f001 f8ad 	bl	80074dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8006382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006386:	4809      	ldr	r0, [pc, #36]	@ (80063ac <MX_I2C4_Init+0x74>)
 8006388:	f006 fbfe 	bl	800cb88 <HAL_I2CEx_ConfigAnalogFilter>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8006392:	f001 f8a3 	bl	80074dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8006396:	2100      	movs	r1, #0
 8006398:	4804      	ldr	r0, [pc, #16]	@ (80063ac <MX_I2C4_Init+0x74>)
 800639a:	f006 fc40 	bl	800cc1e <HAL_I2CEx_ConfigDigitalFilter>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80063a4:	f001 f89a 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80063a8:	bf00      	nop
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	240018e4 	.word	0x240018e4
 80063b0:	58001c00 	.word	0x58001c00
 80063b4:	00b0dbff 	.word	0x00b0dbff

080063b8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80063bc:	4b0b      	ldr	r3, [pc, #44]	@ (80063ec <MX_SDMMC1_SD_Init+0x34>)
 80063be:	4a0c      	ldr	r2, [pc, #48]	@ (80063f0 <MX_SDMMC1_SD_Init+0x38>)
 80063c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <MX_SDMMC1_SD_Init+0x34>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80063c8:	4b08      	ldr	r3, [pc, #32]	@ (80063ec <MX_SDMMC1_SD_Init+0x34>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <MX_SDMMC1_SD_Init+0x34>)
 80063d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80063d4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80063d6:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <MX_SDMMC1_SD_Init+0x34>)
 80063d8:	2200      	movs	r2, #0
 80063da:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80063dc:	4b03      	ldr	r3, [pc, #12]	@ (80063ec <MX_SDMMC1_SD_Init+0x34>)
 80063de:	2200      	movs	r2, #0
 80063e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	24001938 	.word	0x24001938
 80063f0:	52007000 	.word	0x52007000

080063f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80063f8:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <MX_SPI1_Init+0xa4>)
 80063fa:	4a28      	ldr	r2, [pc, #160]	@ (800649c <MX_SPI1_Init+0xa8>)
 80063fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80063fe:	4b26      	ldr	r3, [pc, #152]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006400:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006406:	4b24      	ldr	r3, [pc, #144]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800640c:	4b22      	ldr	r3, [pc, #136]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800640e:	2207      	movs	r2, #7
 8006410:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006412:	4b21      	ldr	r3, [pc, #132]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006414:	2200      	movs	r2, #0
 8006416:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006418:	4b1f      	ldr	r3, [pc, #124]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800641a:	2200      	movs	r2, #0
 800641c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800641e:	4b1e      	ldr	r3, [pc, #120]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006420:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006424:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006426:	4b1c      	ldr	r3, [pc, #112]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006428:	2200      	movs	r2, #0
 800642a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800642c:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800642e:	2200      	movs	r2, #0
 8006430:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006432:	4b19      	ldr	r3, [pc, #100]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006434:	2200      	movs	r2, #0
 8006436:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006438:	4b17      	ldr	r3, [pc, #92]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800643a:	2200      	movs	r2, #0
 800643c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800643e:	4b16      	ldr	r3, [pc, #88]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006440:	2200      	movs	r2, #0
 8006442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006444:	4b14      	ldr	r3, [pc, #80]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006446:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800644a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800644c:	4b12      	ldr	r3, [pc, #72]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800644e:	2200      	movs	r2, #0
 8006450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006452:	4b11      	ldr	r3, [pc, #68]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006454:	2200      	movs	r2, #0
 8006456:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006458:	4b0f      	ldr	r3, [pc, #60]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800645a:	2200      	movs	r2, #0
 800645c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800645e:	4b0e      	ldr	r3, [pc, #56]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006460:	2200      	movs	r2, #0
 8006462:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006464:	4b0c      	ldr	r3, [pc, #48]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006466:	2200      	movs	r2, #0
 8006468:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800646a:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800646c:	2200      	movs	r2, #0
 800646e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006470:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006472:	2200      	movs	r2, #0
 8006474:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006476:	4b08      	ldr	r3, [pc, #32]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006478:	2200      	movs	r2, #0
 800647a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800647c:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <MX_SPI1_Init+0xa4>)
 800647e:	2200      	movs	r2, #0
 8006480:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006482:	4805      	ldr	r0, [pc, #20]	@ (8006498 <MX_SPI1_Init+0xa4>)
 8006484:	f00b fb7c 	bl	8011b80 <HAL_SPI_Init>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800648e:	f001 f825 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	240019b4 	.word	0x240019b4
 800649c:	40013000 	.word	0x40013000

080064a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80064a4:	4b27      	ldr	r3, [pc, #156]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064a6:	4a28      	ldr	r2, [pc, #160]	@ (8006548 <MX_SPI2_Init+0xa8>)
 80064a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80064aa:	4b26      	ldr	r3, [pc, #152]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80064b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80064b2:	4b24      	ldr	r3, [pc, #144]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_7BIT;
 80064b8:	4b22      	ldr	r3, [pc, #136]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064ba:	2206      	movs	r2, #6
 80064bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064be:	4b21      	ldr	r3, [pc, #132]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80064ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80064d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80064de:	4b19      	ldr	r3, [pc, #100]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e4:	4b17      	ldr	r3, [pc, #92]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80064ea:	4b16      	ldr	r3, [pc, #88]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80064f0:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80064f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80064f8:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <MX_SPI2_Init+0xa4>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80064fe:	4b11      	ldr	r3, [pc, #68]	@ (8006544 <MX_SPI2_Init+0xa4>)
 8006500:	2200      	movs	r2, #0
 8006502:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006504:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <MX_SPI2_Init+0xa4>)
 8006506:	2200      	movs	r2, #0
 8006508:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800650a:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <MX_SPI2_Init+0xa4>)
 800650c:	2200      	movs	r2, #0
 800650e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006510:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <MX_SPI2_Init+0xa4>)
 8006512:	2200      	movs	r2, #0
 8006514:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006516:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <MX_SPI2_Init+0xa4>)
 8006518:	2200      	movs	r2, #0
 800651a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800651c:	4b09      	ldr	r3, [pc, #36]	@ (8006544 <MX_SPI2_Init+0xa4>)
 800651e:	2200      	movs	r2, #0
 8006520:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006522:	4b08      	ldr	r3, [pc, #32]	@ (8006544 <MX_SPI2_Init+0xa4>)
 8006524:	2200      	movs	r2, #0
 8006526:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006528:	4b06      	ldr	r3, [pc, #24]	@ (8006544 <MX_SPI2_Init+0xa4>)
 800652a:	2200      	movs	r2, #0
 800652c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800652e:	4805      	ldr	r0, [pc, #20]	@ (8006544 <MX_SPI2_Init+0xa4>)
 8006530:	f00b fb26 	bl	8011b80 <HAL_SPI_Init>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800653a:	f000 ffcf 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800653e:	bf00      	nop
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	24001a3c 	.word	0x24001a3c
 8006548:	40003800 	.word	0x40003800

0800654c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8006550:	4b27      	ldr	r3, [pc, #156]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006552:	4a28      	ldr	r2, [pc, #160]	@ (80065f4 <MX_SPI4_Init+0xa8>)
 8006554:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006556:	4b26      	ldr	r3, [pc, #152]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006558:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800655c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800655e:	4b24      	ldr	r3, [pc, #144]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006560:	2200      	movs	r2, #0
 8006562:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8006564:	4b22      	ldr	r3, [pc, #136]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006566:	2203      	movs	r2, #3
 8006568:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800656a:	4b21      	ldr	r3, [pc, #132]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 800656c:	2200      	movs	r2, #0
 800656e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006570:	4b1f      	ldr	r3, [pc, #124]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006572:	2200      	movs	r2, #0
 8006574:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006576:	4b1e      	ldr	r3, [pc, #120]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006578:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800657c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800657e:	4b1c      	ldr	r3, [pc, #112]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006580:	2200      	movs	r2, #0
 8006582:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006584:	4b1a      	ldr	r3, [pc, #104]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006586:	2200      	movs	r2, #0
 8006588:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800658a:	4b19      	ldr	r3, [pc, #100]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 800658c:	2200      	movs	r2, #0
 800658e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006590:	4b17      	ldr	r3, [pc, #92]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006592:	2200      	movs	r2, #0
 8006594:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8006596:	4b16      	ldr	r3, [pc, #88]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 8006598:	2200      	movs	r2, #0
 800659a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800659c:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 800659e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80065a4:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80065aa:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80065b0:	4b0f      	ldr	r3, [pc, #60]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80065b6:	4b0e      	ldr	r3, [pc, #56]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80065bc:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065be:	2200      	movs	r2, #0
 80065c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80065c2:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80065c8:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80065ce:	4b08      	ldr	r3, [pc, #32]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80065d4:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80065da:	4805      	ldr	r0, [pc, #20]	@ (80065f0 <MX_SPI4_Init+0xa4>)
 80065dc:	f00b fad0 	bl	8011b80 <HAL_SPI_Init>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80065e6:	f000 ff79 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80065ea:	bf00      	nop
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	24001ac4 	.word	0x24001ac4
 80065f4:	40013400 	.word	0x40013400

080065f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b09c      	sub	sp, #112	@ 0x70
 80065fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	605a      	str	r2, [r3, #4]
 8006608:	609a      	str	r2, [r3, #8]
 800660a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800660c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006618:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	609a      	str	r2, [r3, #8]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	611a      	str	r2, [r3, #16]
 8006628:	615a      	str	r2, [r3, #20]
 800662a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800662c:	1d3b      	adds	r3, r7, #4
 800662e:	2234      	movs	r2, #52	@ 0x34
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f012 f85a 	bl	80186ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006638:	4b4f      	ldr	r3, [pc, #316]	@ (8006778 <MX_TIM1_Init+0x180>)
 800663a:	4a50      	ldr	r2, [pc, #320]	@ (800677c <MX_TIM1_Init+0x184>)
 800663c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800663e:	4b4e      	ldr	r3, [pc, #312]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006640:	2200      	movs	r2, #0
 8006642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006644:	4b4c      	ldr	r3, [pc, #304]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006646:	2200      	movs	r2, #0
 8006648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800664a:	4b4b      	ldr	r3, [pc, #300]	@ (8006778 <MX_TIM1_Init+0x180>)
 800664c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006650:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006652:	4b49      	ldr	r3, [pc, #292]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006654:	2200      	movs	r2, #0
 8006656:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006658:	4b47      	ldr	r3, [pc, #284]	@ (8006778 <MX_TIM1_Init+0x180>)
 800665a:	2200      	movs	r2, #0
 800665c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800665e:	4b46      	ldr	r3, [pc, #280]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006660:	2200      	movs	r2, #0
 8006662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006664:	4844      	ldr	r0, [pc, #272]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006666:	f00c f9c0 	bl	80129ea <HAL_TIM_Base_Init>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006670:	f000 ff34 	bl	80074dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006678:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800667a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800667e:	4619      	mov	r1, r3
 8006680:	483d      	ldr	r0, [pc, #244]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006682:	f00c fb75 	bl	8012d70 <HAL_TIM_ConfigClockSource>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800668c:	f000 ff26 	bl	80074dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006690:	4839      	ldr	r0, [pc, #228]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006692:	f00c fa01 	bl	8012a98 <HAL_TIM_PWM_Init>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800669c:	f000 ff1e 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066a0:	2300      	movs	r3, #0
 80066a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80066a4:	2300      	movs	r3, #0
 80066a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80066ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80066b0:	4619      	mov	r1, r3
 80066b2:	4831      	ldr	r0, [pc, #196]	@ (8006778 <MX_TIM1_Init+0x180>)
 80066b4:	f00d f87a 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80066be:	f000 ff0d 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066c2:	2360      	movs	r3, #96	@ 0x60
 80066c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066ca:	2300      	movs	r3, #0
 80066cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066ce:	2300      	movs	r3, #0
 80066d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066d6:	2300      	movs	r3, #0
 80066d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066da:	2300      	movs	r3, #0
 80066dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80066e2:	2200      	movs	r2, #0
 80066e4:	4619      	mov	r1, r3
 80066e6:	4824      	ldr	r0, [pc, #144]	@ (8006778 <MX_TIM1_Init+0x180>)
 80066e8:	f00c fa2e 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80066f2:	f000 fef3 	bl	80074dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80066f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80066fa:	2204      	movs	r2, #4
 80066fc:	4619      	mov	r1, r3
 80066fe:	481e      	ldr	r0, [pc, #120]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006700:	f00c fa22 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800670a:	f000 fee7 	bl	80074dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800670e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006712:	2208      	movs	r2, #8
 8006714:	4619      	mov	r1, r3
 8006716:	4818      	ldr	r0, [pc, #96]	@ (8006778 <MX_TIM1_Init+0x180>)
 8006718:	f00c fa16 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8006722:	f000 fedb 	bl	80074dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800673a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800673e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006744:	2300      	movs	r3, #0
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006748:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800674c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006752:	2300      	movs	r3, #0
 8006754:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4807      	ldr	r0, [pc, #28]	@ (8006778 <MX_TIM1_Init+0x180>)
 800675c:	f00d f8c2 	bl	80138e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8006766:	f000 feb9 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800676a:	4803      	ldr	r0, [pc, #12]	@ (8006778 <MX_TIM1_Init+0x180>)
 800676c:	f001 fb2c 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 8006770:	bf00      	nop
 8006772:	3770      	adds	r7, #112	@ 0x70
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	24001b4c 	.word	0x24001b4c
 800677c:	40010000 	.word	0x40010000

08006780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	@ 0x28
 8006784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006786:	f107 031c 	add.w	r3, r7, #28
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	605a      	str	r2, [r3, #4]
 8006790:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006792:	463b      	mov	r3, r7
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	60da      	str	r2, [r3, #12]
 800679e:	611a      	str	r2, [r3, #16]
 80067a0:	615a      	str	r2, [r3, #20]
 80067a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80067a4:	4b22      	ldr	r3, [pc, #136]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80067aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80067ac:	4b20      	ldr	r3, [pc, #128]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295
 80067be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80067cc:	4818      	ldr	r0, [pc, #96]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067ce:	f00c f963 	bl	8012a98 <HAL_TIM_PWM_Init>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80067d8:	f000 fe80 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80067e4:	f107 031c 	add.w	r3, r7, #28
 80067e8:	4619      	mov	r1, r3
 80067ea:	4811      	ldr	r0, [pc, #68]	@ (8006830 <MX_TIM2_Init+0xb0>)
 80067ec:	f00c ffde 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80067f6:	f000 fe71 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067fa:	2360      	movs	r3, #96	@ 0x60
 80067fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800680a:	463b      	mov	r3, r7
 800680c:	2200      	movs	r2, #0
 800680e:	4619      	mov	r1, r3
 8006810:	4807      	ldr	r0, [pc, #28]	@ (8006830 <MX_TIM2_Init+0xb0>)
 8006812:	f00c f999 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800681c:	f000 fe5e 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006820:	4803      	ldr	r0, [pc, #12]	@ (8006830 <MX_TIM2_Init+0xb0>)
 8006822:	f001 fad1 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 8006826:	bf00      	nop
 8006828:	3728      	adds	r7, #40	@ 0x28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	24001b98 	.word	0x24001b98

08006834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	@ 0x28
 8006838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800683a:	f107 031c 	add.w	r3, r7, #28
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	605a      	str	r2, [r3, #4]
 8006844:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006846:	463b      	mov	r3, r7
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	611a      	str	r2, [r3, #16]
 8006854:	615a      	str	r2, [r3, #20]
 8006856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006858:	4b21      	ldr	r3, [pc, #132]	@ (80068e0 <MX_TIM3_Init+0xac>)
 800685a:	4a22      	ldr	r2, [pc, #136]	@ (80068e4 <MX_TIM3_Init+0xb0>)
 800685c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800685e:	4b20      	ldr	r3, [pc, #128]	@ (80068e0 <MX_TIM3_Init+0xac>)
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006864:	4b1e      	ldr	r3, [pc, #120]	@ (80068e0 <MX_TIM3_Init+0xac>)
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800686a:	4b1d      	ldr	r3, [pc, #116]	@ (80068e0 <MX_TIM3_Init+0xac>)
 800686c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006870:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006872:	4b1b      	ldr	r3, [pc, #108]	@ (80068e0 <MX_TIM3_Init+0xac>)
 8006874:	2200      	movs	r2, #0
 8006876:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006878:	4b19      	ldr	r3, [pc, #100]	@ (80068e0 <MX_TIM3_Init+0xac>)
 800687a:	2200      	movs	r2, #0
 800687c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800687e:	4818      	ldr	r0, [pc, #96]	@ (80068e0 <MX_TIM3_Init+0xac>)
 8006880:	f00c f90a 	bl	8012a98 <HAL_TIM_PWM_Init>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800688a:	f000 fe27 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006896:	f107 031c 	add.w	r3, r7, #28
 800689a:	4619      	mov	r1, r3
 800689c:	4810      	ldr	r0, [pc, #64]	@ (80068e0 <MX_TIM3_Init+0xac>)
 800689e:	f00c ff85 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80068a8:	f000 fe18 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068ac:	2360      	movs	r3, #96	@ 0x60
 80068ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068bc:	463b      	mov	r3, r7
 80068be:	2200      	movs	r2, #0
 80068c0:	4619      	mov	r1, r3
 80068c2:	4807      	ldr	r0, [pc, #28]	@ (80068e0 <MX_TIM3_Init+0xac>)
 80068c4:	f00c f940 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80068ce:	f000 fe05 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80068d2:	4803      	ldr	r0, [pc, #12]	@ (80068e0 <MX_TIM3_Init+0xac>)
 80068d4:	f001 fa78 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 80068d8:	bf00      	nop
 80068da:	3728      	adds	r7, #40	@ 0x28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	24001be4 	.word	0x24001be4
 80068e4:	40000400 	.word	0x40000400

080068e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	@ 0x28
 80068ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068ee:	f107 031c 	add.w	r3, r7, #28
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	605a      	str	r2, [r3, #4]
 80068f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068fa:	463b      	mov	r3, r7
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	611a      	str	r2, [r3, #16]
 8006908:	615a      	str	r2, [r3, #20]
 800690a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800690c:	4b21      	ldr	r3, [pc, #132]	@ (8006994 <MX_TIM4_Init+0xac>)
 800690e:	4a22      	ldr	r2, [pc, #136]	@ (8006998 <MX_TIM4_Init+0xb0>)
 8006910:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006912:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <MX_TIM4_Init+0xac>)
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006918:	4b1e      	ldr	r3, [pc, #120]	@ (8006994 <MX_TIM4_Init+0xac>)
 800691a:	2200      	movs	r2, #0
 800691c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800691e:	4b1d      	ldr	r3, [pc, #116]	@ (8006994 <MX_TIM4_Init+0xac>)
 8006920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006924:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006926:	4b1b      	ldr	r3, [pc, #108]	@ (8006994 <MX_TIM4_Init+0xac>)
 8006928:	2200      	movs	r2, #0
 800692a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800692c:	4b19      	ldr	r3, [pc, #100]	@ (8006994 <MX_TIM4_Init+0xac>)
 800692e:	2200      	movs	r2, #0
 8006930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006932:	4818      	ldr	r0, [pc, #96]	@ (8006994 <MX_TIM4_Init+0xac>)
 8006934:	f00c f8b0 	bl	8012a98 <HAL_TIM_PWM_Init>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800693e:	f000 fdcd 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006946:	2300      	movs	r3, #0
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800694a:	f107 031c 	add.w	r3, r7, #28
 800694e:	4619      	mov	r1, r3
 8006950:	4810      	ldr	r0, [pc, #64]	@ (8006994 <MX_TIM4_Init+0xac>)
 8006952:	f00c ff2b 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800695c:	f000 fdbe 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006960:	2360      	movs	r3, #96	@ 0x60
 8006962:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006968:	2300      	movs	r3, #0
 800696a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006970:	463b      	mov	r3, r7
 8006972:	2200      	movs	r2, #0
 8006974:	4619      	mov	r1, r3
 8006976:	4807      	ldr	r0, [pc, #28]	@ (8006994 <MX_TIM4_Init+0xac>)
 8006978:	f00c f8e6 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8006982:	f000 fdab 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006986:	4803      	ldr	r0, [pc, #12]	@ (8006994 <MX_TIM4_Init+0xac>)
 8006988:	f001 fa1e 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 800698c:	bf00      	nop
 800698e:	3728      	adds	r7, #40	@ 0x28
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	24001c30 	.word	0x24001c30
 8006998:	40000800 	.word	0x40000800

0800699c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	@ 0x28
 80069a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069a2:	f107 031c 	add.w	r3, r7, #28
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069ae:	463b      	mov	r3, r7
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	609a      	str	r2, [r3, #8]
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	611a      	str	r2, [r3, #16]
 80069bc:	615a      	str	r2, [r3, #20]
 80069be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80069c0:	4b21      	ldr	r3, [pc, #132]	@ (8006a48 <MX_TIM5_Init+0xac>)
 80069c2:	4a22      	ldr	r2, [pc, #136]	@ (8006a4c <MX_TIM5_Init+0xb0>)
 80069c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80069c6:	4b20      	ldr	r3, [pc, #128]	@ (8006a48 <MX_TIM5_Init+0xac>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a48 <MX_TIM5_Init+0xac>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80069d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a48 <MX_TIM5_Init+0xac>)
 80069d4:	f04f 32ff 	mov.w	r2, #4294967295
 80069d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069da:	4b1b      	ldr	r3, [pc, #108]	@ (8006a48 <MX_TIM5_Init+0xac>)
 80069dc:	2200      	movs	r2, #0
 80069de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069e0:	4b19      	ldr	r3, [pc, #100]	@ (8006a48 <MX_TIM5_Init+0xac>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80069e6:	4818      	ldr	r0, [pc, #96]	@ (8006a48 <MX_TIM5_Init+0xac>)
 80069e8:	f00c f856 	bl	8012a98 <HAL_TIM_PWM_Init>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80069f2:	f000 fd73 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80069fe:	f107 031c 	add.w	r3, r7, #28
 8006a02:	4619      	mov	r1, r3
 8006a04:	4810      	ldr	r0, [pc, #64]	@ (8006a48 <MX_TIM5_Init+0xac>)
 8006a06:	f00c fed1 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8006a10:	f000 fd64 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a14:	2360      	movs	r3, #96	@ 0x60
 8006a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a24:	463b      	mov	r3, r7
 8006a26:	2200      	movs	r2, #0
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4807      	ldr	r0, [pc, #28]	@ (8006a48 <MX_TIM5_Init+0xac>)
 8006a2c:	f00c f88c 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8006a36:	f000 fd51 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8006a3a:	4803      	ldr	r0, [pc, #12]	@ (8006a48 <MX_TIM5_Init+0xac>)
 8006a3c:	f001 f9c4 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 8006a40:	bf00      	nop
 8006a42:	3728      	adds	r7, #40	@ 0x28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	24001c7c 	.word	0x24001c7c
 8006a4c:	40000c00 	.word	0x40000c00

08006a50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b098      	sub	sp, #96	@ 0x60
 8006a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
 8006a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	605a      	str	r2, [r3, #4]
 8006a6c:	609a      	str	r2, [r3, #8]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	611a      	str	r2, [r3, #16]
 8006a72:	615a      	str	r2, [r3, #20]
 8006a74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	2234      	movs	r2, #52	@ 0x34
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f011 fe35 	bl	80186ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006a82:	4b39      	ldr	r3, [pc, #228]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006a84:	4a39      	ldr	r2, [pc, #228]	@ (8006b6c <MX_TIM8_Init+0x11c>)
 8006a86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006a88:	4b37      	ldr	r3, [pc, #220]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a8e:	4b36      	ldr	r3, [pc, #216]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006a94:	4b34      	ldr	r3, [pc, #208]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a9c:	4b32      	ldr	r3, [pc, #200]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006aa2:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006aae:	482e      	ldr	r0, [pc, #184]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006ab0:	f00b fff2 	bl	8012a98 <HAL_TIM_PWM_Init>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8006aba:	f000 fd0f 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006aca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4825      	ldr	r0, [pc, #148]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006ad2:	f00c fe6b 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8006adc:	f000 fcfe 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ae0:	2360      	movs	r3, #96	@ 0x60
 8006ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006aec:	2300      	movs	r3, #0
 8006aee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006af4:	2300      	movs	r3, #0
 8006af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006af8:	2300      	movs	r3, #0
 8006afa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006afc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006b00:	2200      	movs	r2, #0
 8006b02:	4619      	mov	r1, r3
 8006b04:	4818      	ldr	r0, [pc, #96]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006b06:	f00c f81f 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8006b10:	f000 fce4 	bl	80074dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006b2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006b36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006b44:	1d3b      	adds	r3, r7, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4807      	ldr	r0, [pc, #28]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006b4a:	f00c fecb 	bl	80138e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8006b54:	f000 fcc2 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8006b58:	4803      	ldr	r0, [pc, #12]	@ (8006b68 <MX_TIM8_Init+0x118>)
 8006b5a:	f001 f935 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 8006b5e:	bf00      	nop
 8006b60:	3760      	adds	r7, #96	@ 0x60
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	24001cc8 	.word	0x24001cc8
 8006b6c:	40010400 	.word	0x40010400

08006b70 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	@ 0x28
 8006b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b76:	f107 031c 	add.w	r3, r7, #28
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b82:	463b      	mov	r3, r7
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	611a      	str	r2, [r3, #16]
 8006b90:	615a      	str	r2, [r3, #20]
 8006b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8006b94:	4b21      	ldr	r3, [pc, #132]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006b96:	4a22      	ldr	r2, [pc, #136]	@ (8006c20 <MX_TIM12_Init+0xb0>)
 8006b98:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8006b9a:	4b20      	ldr	r3, [pc, #128]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bac:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bae:	4b1b      	ldr	r3, [pc, #108]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bb4:	4b19      	ldr	r3, [pc, #100]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006bba:	4818      	ldr	r0, [pc, #96]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006bbc:	f00b ff6c 	bl	8012a98 <HAL_TIM_PWM_Init>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8006bc6:	f000 fc89 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8006bd2:	f107 031c 	add.w	r3, r7, #28
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4810      	ldr	r0, [pc, #64]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006bda:	f00c fde7 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8006be4:	f000 fc7a 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006be8:	2360      	movs	r3, #96	@ 0x60
 8006bea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4807      	ldr	r0, [pc, #28]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006c00:	f00b ffa2 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8006c0a:	f000 fc67 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8006c0e:	4803      	ldr	r0, [pc, #12]	@ (8006c1c <MX_TIM12_Init+0xac>)
 8006c10:	f001 f8da 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 8006c14:	bf00      	nop
 8006c16:	3728      	adds	r7, #40	@ 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	24001d14 	.word	0x24001d14
 8006c20:	40001800 	.word	0x40001800

08006c24 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b098      	sub	sp, #96	@ 0x60
 8006c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	609a      	str	r2, [r3, #8]
 8006c42:	60da      	str	r2, [r3, #12]
 8006c44:	611a      	str	r2, [r3, #16]
 8006c46:	615a      	str	r2, [r3, #20]
 8006c48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	2234      	movs	r2, #52	@ 0x34
 8006c4e:	2100      	movs	r1, #0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f011 fd4b 	bl	80186ec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8006c56:	4b34      	ldr	r3, [pc, #208]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c58:	4a34      	ldr	r2, [pc, #208]	@ (8006d2c <MX_TIM15_Init+0x108>)
 8006c5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8006c5c:	4b32      	ldr	r3, [pc, #200]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c62:	4b31      	ldr	r3, [pc, #196]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8006c68:	4b2f      	ldr	r3, [pc, #188]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c6e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c70:	4b2d      	ldr	r3, [pc, #180]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006c76:	4b2c      	ldr	r3, [pc, #176]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006c82:	4829      	ldr	r0, [pc, #164]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006c84:	f00b ff08 	bl	8012a98 <HAL_TIM_PWM_Init>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8006c8e:	f000 fc25 	bl	80074dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c92:	2300      	movs	r3, #0
 8006c94:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006c9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4821      	ldr	r0, [pc, #132]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006ca2:	f00c fd83 	bl	80137ac <HAL_TIMEx_MasterConfigSynchronization>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8006cac:	f000 fc16 	bl	80074dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006cb0:	2360      	movs	r3, #96	@ 0x60
 8006cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ccc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4814      	ldr	r0, [pc, #80]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006cd6:	f00b ff37 	bl	8012b48 <HAL_TIM_PWM_ConfigChannel>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8006ce0:	f000 fbfc 	bl	80074dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006cfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4807      	ldr	r0, [pc, #28]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006d0c:	f00c fdea 	bl	80138e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8006d16:	f000 fbe1 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8006d1a:	4803      	ldr	r0, [pc, #12]	@ (8006d28 <MX_TIM15_Init+0x104>)
 8006d1c:	f001 f854 	bl	8007dc8 <HAL_TIM_MspPostInit>

}
 8006d20:	bf00      	nop
 8006d22:	3760      	adds	r7, #96	@ 0x60
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	24001d60 	.word	0x24001d60
 8006d2c:	40014000 	.word	0x40014000

08006d30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006d34:	4b22      	ldr	r3, [pc, #136]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d36:	4a23      	ldr	r2, [pc, #140]	@ (8006dc4 <MX_UART4_Init+0x94>)
 8006d38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006d3a:	4b21      	ldr	r3, [pc, #132]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006d40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006d42:	4b1f      	ldr	r3, [pc, #124]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006d48:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006d54:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d56:	220c      	movs	r2, #12
 8006d58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d5a:	4b19      	ldr	r3, [pc, #100]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d60:	4b17      	ldr	r3, [pc, #92]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d66:	4b16      	ldr	r3, [pc, #88]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d6c:	4b14      	ldr	r3, [pc, #80]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d72:	4b13      	ldr	r3, [pc, #76]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006d78:	4811      	ldr	r0, [pc, #68]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d7a:	f00c fe3f 	bl	80139fc <HAL_UART_Init>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8006d84:	f000 fbaa 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d88:	2100      	movs	r1, #0
 8006d8a:	480d      	ldr	r0, [pc, #52]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d8c:	f00e fb84 	bl	8015498 <HAL_UARTEx_SetTxFifoThreshold>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8006d96:	f000 fba1 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4808      	ldr	r0, [pc, #32]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006d9e:	f00e fbb9 	bl	8015514 <HAL_UARTEx_SetRxFifoThreshold>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8006da8:	f000 fb98 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8006dac:	4804      	ldr	r0, [pc, #16]	@ (8006dc0 <MX_UART4_Init+0x90>)
 8006dae:	f00e fb3a 	bl	8015426 <HAL_UARTEx_DisableFifoMode>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8006db8:	f000 fb90 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006dbc:	bf00      	nop
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	24001dac 	.word	0x24001dac
 8006dc4:	40004c00 	.word	0x40004c00

08006dc8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006dcc:	4b22      	ldr	r3, [pc, #136]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006dce:	4a23      	ldr	r2, [pc, #140]	@ (8006e5c <MX_UART5_Init+0x94>)
 8006dd0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006dd2:	4b21      	ldr	r3, [pc, #132]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006dd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006dd8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006dda:	4b1f      	ldr	r3, [pc, #124]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006de0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006de6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006dec:	4b1a      	ldr	r3, [pc, #104]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006dee:	220c      	movs	r2, #12
 8006df0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006df2:	4b19      	ldr	r3, [pc, #100]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006df8:	4b17      	ldr	r3, [pc, #92]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006dfe:	4b16      	ldr	r3, [pc, #88]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006e04:	4b14      	ldr	r3, [pc, #80]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e0a:	4b13      	ldr	r3, [pc, #76]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006e10:	4811      	ldr	r0, [pc, #68]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006e12:	f00c fdf3 	bl	80139fc <HAL_UART_Init>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8006e1c:	f000 fb5e 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e20:	2100      	movs	r1, #0
 8006e22:	480d      	ldr	r0, [pc, #52]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006e24:	f00e fb38 	bl	8015498 <HAL_UARTEx_SetTxFifoThreshold>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8006e2e:	f000 fb55 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e32:	2100      	movs	r1, #0
 8006e34:	4808      	ldr	r0, [pc, #32]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006e36:	f00e fb6d 	bl	8015514 <HAL_UARTEx_SetRxFifoThreshold>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8006e40:	f000 fb4c 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8006e44:	4804      	ldr	r0, [pc, #16]	@ (8006e58 <MX_UART5_Init+0x90>)
 8006e46:	f00e faee 	bl	8015426 <HAL_UARTEx_DisableFifoMode>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8006e50:	f000 fb44 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006e54:	bf00      	nop
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	24001e40 	.word	0x24001e40
 8006e5c:	40005000 	.word	0x40005000

08006e60 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006e64:	4b22      	ldr	r3, [pc, #136]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e66:	4a23      	ldr	r2, [pc, #140]	@ (8006ef4 <MX_UART7_Init+0x94>)
 8006e68:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8006e6a:	4b21      	ldr	r3, [pc, #132]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006e70:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006e72:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006e78:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006e84:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e86:	220c      	movs	r2, #12
 8006e88:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e8a:	4b19      	ldr	r3, [pc, #100]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e90:	4b17      	ldr	r3, [pc, #92]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e96:	4b16      	ldr	r3, [pc, #88]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006e9c:	4b14      	ldr	r3, [pc, #80]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ea2:	4b13      	ldr	r3, [pc, #76]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006ea8:	4811      	ldr	r0, [pc, #68]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006eaa:	f00c fda7 	bl	80139fc <HAL_UART_Init>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8006eb4:	f000 fb12 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006eb8:	2100      	movs	r1, #0
 8006eba:	480d      	ldr	r0, [pc, #52]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006ebc:	f00e faec 	bl	8015498 <HAL_UARTEx_SetTxFifoThreshold>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8006ec6:	f000 fb09 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4808      	ldr	r0, [pc, #32]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006ece:	f00e fb21 	bl	8015514 <HAL_UARTEx_SetRxFifoThreshold>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8006ed8:	f000 fb00 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8006edc:	4804      	ldr	r0, [pc, #16]	@ (8006ef0 <MX_UART7_Init+0x90>)
 8006ede:	f00e faa2 	bl	8015426 <HAL_UARTEx_DisableFifoMode>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8006ee8:	f000 faf8 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006eec:	bf00      	nop
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	24001ed4 	.word	0x24001ed4
 8006ef4:	40007800 	.word	0x40007800

08006ef8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8006efc:	4b23      	ldr	r3, [pc, #140]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006efe:	4a24      	ldr	r2, [pc, #144]	@ (8006f90 <MX_UART8_Init+0x98>)
 8006f00:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8006f02:	4b22      	ldr	r3, [pc, #136]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006f08:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8006f0a:	4b20      	ldr	r3, [pc, #128]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8006f10:	4b1e      	ldr	r3, [pc, #120]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8006f16:	4b1d      	ldr	r3, [pc, #116]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8006f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f1e:	220c      	movs	r2, #12
 8006f20:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8006f22:	4b1a      	ldr	r3, [pc, #104]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f24:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006f28:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f2a:	4b18      	ldr	r3, [pc, #96]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f30:	4b16      	ldr	r3, [pc, #88]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f36:	4b15      	ldr	r3, [pc, #84]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f3c:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8006f42:	4812      	ldr	r0, [pc, #72]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f44:	f00c fd5a 	bl	80139fc <HAL_UART_Init>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8006f4e:	f000 fac5 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f52:	2100      	movs	r1, #0
 8006f54:	480d      	ldr	r0, [pc, #52]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f56:	f00e fa9f 	bl	8015498 <HAL_UARTEx_SetTxFifoThreshold>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8006f60:	f000 fabc 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f64:	2100      	movs	r1, #0
 8006f66:	4809      	ldr	r0, [pc, #36]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f68:	f00e fad4 	bl	8015514 <HAL_UARTEx_SetRxFifoThreshold>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8006f72:	f000 fab3 	bl	80074dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8006f76:	4805      	ldr	r0, [pc, #20]	@ (8006f8c <MX_UART8_Init+0x94>)
 8006f78:	f00e fa55 	bl	8015426 <HAL_UARTEx_DisableFifoMode>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8006f82:	f000 faab 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8006f86:	bf00      	nop
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	24001f68 	.word	0x24001f68
 8006f90:	40007c00 	.word	0x40007c00

08006f94 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8006f98:	4b2b      	ldr	r3, [pc, #172]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800704c <MX_USART1_Init+0xb8>)
 8006f9c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8006f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006fa4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8006fa6:	4b28      	ldr	r3, [pc, #160]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8006fac:	4b26      	ldr	r3, [pc, #152]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8006fb2:	4b25      	ldr	r3, [pc, #148]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8006fb8:	4b23      	ldr	r3, [pc, #140]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fba:	220c      	movs	r2, #12
 8006fbc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8006fbe:	4b22      	ldr	r3, [pc, #136]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8006fc4:	4b20      	ldr	r3, [pc, #128]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8006fca:	4b1f      	ldr	r3, [pc, #124]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8006fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8006fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8006fdc:	481a      	ldr	r0, [pc, #104]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006fde:	f00e fb25 	bl	801562c <HAL_USART_Init>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8006fe8:	f000 fa78 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fec:	2100      	movs	r1, #0
 8006fee:	4816      	ldr	r0, [pc, #88]	@ (8007048 <MX_USART1_Init+0xb4>)
 8006ff0:	f00f fa4c 	bl	801648c <HAL_USARTEx_SetTxFifoThreshold>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8006ffa:	f000 fa6f 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ffe:	2100      	movs	r1, #0
 8007000:	4811      	ldr	r0, [pc, #68]	@ (8007048 <MX_USART1_Init+0xb4>)
 8007002:	f00f fa81 	bl	8016508 <HAL_USARTEx_SetRxFifoThreshold>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 800700c:	f000 fa66 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8007010:	2100      	movs	r1, #0
 8007012:	480d      	ldr	r0, [pc, #52]	@ (8007048 <MX_USART1_Init+0xb4>)
 8007014:	f00f f9c4 	bl	80163a0 <HAL_USARTEx_ConfigNSS>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 800701e:	f000 fa5d 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8007022:	4809      	ldr	r0, [pc, #36]	@ (8007048 <MX_USART1_Init+0xb4>)
 8007024:	f00f f9f9 	bl	801641a <HAL_USARTEx_DisableFifoMode>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 800702e:	f000 fa55 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8007032:	4805      	ldr	r0, [pc, #20]	@ (8007048 <MX_USART1_Init+0xb4>)
 8007034:	f00f f95f 	bl	80162f6 <HAL_USARTEx_EnableSlaveMode>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <MX_USART1_Init+0xae>
  {
    Error_Handler();
 800703e:	f000 fa4d 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007042:	bf00      	nop
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	24001ffc 	.word	0x24001ffc
 800704c:	40011000 	.word	0x40011000

08007050 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8007054:	4b2b      	ldr	r3, [pc, #172]	@ (8007104 <MX_USART2_Init+0xb4>)
 8007056:	4a2c      	ldr	r2, [pc, #176]	@ (8007108 <MX_USART2_Init+0xb8>)
 8007058:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800705a:	4b2a      	ldr	r3, [pc, #168]	@ (8007104 <MX_USART2_Init+0xb4>)
 800705c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007060:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8007062:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <MX_USART2_Init+0xb4>)
 8007064:	2200      	movs	r2, #0
 8007066:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8007068:	4b26      	ldr	r3, [pc, #152]	@ (8007104 <MX_USART2_Init+0xb4>)
 800706a:	2200      	movs	r2, #0
 800706c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800706e:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <MX_USART2_Init+0xb4>)
 8007070:	2200      	movs	r2, #0
 8007072:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8007074:	4b23      	ldr	r3, [pc, #140]	@ (8007104 <MX_USART2_Init+0xb4>)
 8007076:	220c      	movs	r2, #12
 8007078:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800707a:	4b22      	ldr	r3, [pc, #136]	@ (8007104 <MX_USART2_Init+0xb4>)
 800707c:	2200      	movs	r2, #0
 800707e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8007080:	4b20      	ldr	r3, [pc, #128]	@ (8007104 <MX_USART2_Init+0xb4>)
 8007082:	2200      	movs	r2, #0
 8007084:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8007086:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <MX_USART2_Init+0xb4>)
 8007088:	2200      	movs	r2, #0
 800708a:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800708c:	4b1d      	ldr	r3, [pc, #116]	@ (8007104 <MX_USART2_Init+0xb4>)
 800708e:	2200      	movs	r2, #0
 8007090:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8007092:	4b1c      	ldr	r3, [pc, #112]	@ (8007104 <MX_USART2_Init+0xb4>)
 8007094:	2201      	movs	r2, #1
 8007096:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8007098:	481a      	ldr	r0, [pc, #104]	@ (8007104 <MX_USART2_Init+0xb4>)
 800709a:	f00e fac7 	bl	801562c <HAL_USART_Init>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 80070a4:	f000 fa1a 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070a8:	2100      	movs	r1, #0
 80070aa:	4816      	ldr	r0, [pc, #88]	@ (8007104 <MX_USART2_Init+0xb4>)
 80070ac:	f00f f9ee 	bl	801648c <HAL_USARTEx_SetTxFifoThreshold>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 80070b6:	f000 fa11 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070ba:	2100      	movs	r1, #0
 80070bc:	4811      	ldr	r0, [pc, #68]	@ (8007104 <MX_USART2_Init+0xb4>)
 80070be:	f00f fa23 	bl	8016508 <HAL_USARTEx_SetRxFifoThreshold>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 80070c8:	f000 fa08 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 80070cc:	2100      	movs	r1, #0
 80070ce:	480d      	ldr	r0, [pc, #52]	@ (8007104 <MX_USART2_Init+0xb4>)
 80070d0:	f00f f966 	bl	80163a0 <HAL_USARTEx_ConfigNSS>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 80070da:	f000 f9ff 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 80070de:	4809      	ldr	r0, [pc, #36]	@ (8007104 <MX_USART2_Init+0xb4>)
 80070e0:	f00f f99b 	bl	801641a <HAL_USARTEx_DisableFifoMode>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 80070ea:	f000 f9f7 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 80070ee:	4805      	ldr	r0, [pc, #20]	@ (8007104 <MX_USART2_Init+0xb4>)
 80070f0:	f00f f901 	bl	80162f6 <HAL_USARTEx_EnableSlaveMode>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <MX_USART2_Init+0xae>
  {
    Error_Handler();
 80070fa:	f000 f9ef 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80070fe:	bf00      	nop
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	2400205c 	.word	0x2400205c
 8007108:	40004400 	.word	0x40004400

0800710c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8007110:	4b2b      	ldr	r3, [pc, #172]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007112:	4a2c      	ldr	r2, [pc, #176]	@ (80071c4 <MX_USART3_Init+0xb8>)
 8007114:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8007116:	4b2a      	ldr	r3, [pc, #168]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800711c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800711e:	4b28      	ldr	r3, [pc, #160]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007120:	2200      	movs	r2, #0
 8007122:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8007124:	4b26      	ldr	r3, [pc, #152]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007126:	2200      	movs	r2, #0
 8007128:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 800712a:	4b25      	ldr	r3, [pc, #148]	@ (80071c0 <MX_USART3_Init+0xb4>)
 800712c:	2200      	movs	r2, #0
 800712e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8007130:	4b23      	ldr	r3, [pc, #140]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007132:	220c      	movs	r2, #12
 8007134:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8007136:	4b22      	ldr	r3, [pc, #136]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007138:	2200      	movs	r2, #0
 800713a:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 800713c:	4b20      	ldr	r3, [pc, #128]	@ (80071c0 <MX_USART3_Init+0xb4>)
 800713e:	2200      	movs	r2, #0
 8007140:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8007142:	4b1f      	ldr	r3, [pc, #124]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007144:	2200      	movs	r2, #0
 8007146:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8007148:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <MX_USART3_Init+0xb4>)
 800714a:	2200      	movs	r2, #0
 800714c:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 800714e:	4b1c      	ldr	r3, [pc, #112]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007150:	2201      	movs	r2, #1
 8007152:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8007154:	481a      	ldr	r0, [pc, #104]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007156:	f00e fa69 	bl	801562c <HAL_USART_Init>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8007160:	f000 f9bc 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007164:	2100      	movs	r1, #0
 8007166:	4816      	ldr	r0, [pc, #88]	@ (80071c0 <MX_USART3_Init+0xb4>)
 8007168:	f00f f990 	bl	801648c <HAL_USARTEx_SetTxFifoThreshold>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8007172:	f000 f9b3 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007176:	2100      	movs	r1, #0
 8007178:	4811      	ldr	r0, [pc, #68]	@ (80071c0 <MX_USART3_Init+0xb4>)
 800717a:	f00f f9c5 	bl	8016508 <HAL_USARTEx_SetRxFifoThreshold>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8007184:	f000 f9aa 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8007188:	2100      	movs	r1, #0
 800718a:	480d      	ldr	r0, [pc, #52]	@ (80071c0 <MX_USART3_Init+0xb4>)
 800718c:	f00f f908 	bl	80163a0 <HAL_USARTEx_ConfigNSS>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8007196:	f000 f9a1 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 800719a:	4809      	ldr	r0, [pc, #36]	@ (80071c0 <MX_USART3_Init+0xb4>)
 800719c:	f00f f93d 	bl	801641a <HAL_USARTEx_DisableFifoMode>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 80071a6:	f000 f999 	bl	80074dc <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 80071aa:	4805      	ldr	r0, [pc, #20]	@ (80071c0 <MX_USART3_Init+0xb4>)
 80071ac:	f00f f8a3 	bl	80162f6 <HAL_USARTEx_EnableSlaveMode>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <MX_USART3_Init+0xae>
  {
    Error_Handler();
 80071b6:	f000 f991 	bl	80074dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80071ba:	bf00      	nop
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	240020bc 	.word	0x240020bc
 80071c4:	40004800 	.word	0x40004800

080071c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08c      	sub	sp, #48	@ 0x30
 80071cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ce:	f107 031c 	add.w	r3, r7, #28
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	605a      	str	r2, [r3, #4]
 80071d8:	609a      	str	r2, [r3, #8]
 80071da:	60da      	str	r2, [r3, #12]
 80071dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80071de:	4ba3      	ldr	r3, [pc, #652]	@ (800746c <MX_GPIO_Init+0x2a4>)
 80071e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071e4:	4aa1      	ldr	r2, [pc, #644]	@ (800746c <MX_GPIO_Init+0x2a4>)
 80071e6:	f043 0304 	orr.w	r3, r3, #4
 80071ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071ee:	4b9f      	ldr	r3, [pc, #636]	@ (800746c <MX_GPIO_Init+0x2a4>)
 80071f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80071fc:	4b9b      	ldr	r3, [pc, #620]	@ (800746c <MX_GPIO_Init+0x2a4>)
 80071fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007202:	4a9a      	ldr	r2, [pc, #616]	@ (800746c <MX_GPIO_Init+0x2a4>)
 8007204:	f043 0310 	orr.w	r3, r3, #16
 8007208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800720c:	4b97      	ldr	r3, [pc, #604]	@ (800746c <MX_GPIO_Init+0x2a4>)
 800720e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800721a:	4b94      	ldr	r3, [pc, #592]	@ (800746c <MX_GPIO_Init+0x2a4>)
 800721c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007220:	4a92      	ldr	r2, [pc, #584]	@ (800746c <MX_GPIO_Init+0x2a4>)
 8007222:	f043 0302 	orr.w	r3, r3, #2
 8007226:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800722a:	4b90      	ldr	r3, [pc, #576]	@ (800746c <MX_GPIO_Init+0x2a4>)
 800722c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007238:	4b8c      	ldr	r3, [pc, #560]	@ (800746c <MX_GPIO_Init+0x2a4>)
 800723a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800723e:	4a8b      	ldr	r2, [pc, #556]	@ (800746c <MX_GPIO_Init+0x2a4>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007248:	4b88      	ldr	r3, [pc, #544]	@ (800746c <MX_GPIO_Init+0x2a4>)
 800724a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007256:	4b85      	ldr	r3, [pc, #532]	@ (800746c <MX_GPIO_Init+0x2a4>)
 8007258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800725c:	4a83      	ldr	r2, [pc, #524]	@ (800746c <MX_GPIO_Init+0x2a4>)
 800725e:	f043 0308 	orr.w	r3, r3, #8
 8007262:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007266:	4b81      	ldr	r3, [pc, #516]	@ (800746c <MX_GPIO_Init+0x2a4>)
 8007268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007274:	4b7d      	ldr	r3, [pc, #500]	@ (800746c <MX_GPIO_Init+0x2a4>)
 8007276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800727a:	4a7c      	ldr	r2, [pc, #496]	@ (800746c <MX_GPIO_Init+0x2a4>)
 800727c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007284:	4b79      	ldr	r3, [pc, #484]	@ (800746c <MX_GPIO_Init+0x2a4>)
 8007286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800728a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8007292:	2200      	movs	r2, #0
 8007294:	2110      	movs	r1, #16
 8007296:	4876      	ldr	r0, [pc, #472]	@ (8007470 <MX_GPIO_Init+0x2a8>)
 8007298:	f004 f82a 	bl	800b2f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800729c:	2200      	movs	r2, #0
 800729e:	2101      	movs	r1, #1
 80072a0:	4874      	ldr	r0, [pc, #464]	@ (8007474 <MX_GPIO_Init+0x2ac>)
 80072a2:	f004 f825 	bl	800b2f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 80072a6:	2200      	movs	r2, #0
 80072a8:	2110      	movs	r1, #16
 80072aa:	4873      	ldr	r0, [pc, #460]	@ (8007478 <MX_GPIO_Init+0x2b0>)
 80072ac:	f004 f820 	bl	800b2f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 80072b0:	2200      	movs	r2, #0
 80072b2:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80072b6:	4871      	ldr	r0, [pc, #452]	@ (800747c <MX_GPIO_Init+0x2b4>)
 80072b8:	f004 f81a 	bl	800b2f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 80072bc:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 80072c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072c2:	2300      	movs	r3, #0
 80072c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ca:	f107 031c 	add.w	r3, r7, #28
 80072ce:	4619      	mov	r1, r3
 80072d0:	4868      	ldr	r0, [pc, #416]	@ (8007474 <MX_GPIO_Init+0x2ac>)
 80072d2:	f003 fe4d 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 80072d6:	2308      	movs	r3, #8
 80072d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80072da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80072de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 80072e4:	f107 031c 	add.w	r3, r7, #28
 80072e8:	4619      	mov	r1, r3
 80072ea:	4861      	ldr	r0, [pc, #388]	@ (8007470 <MX_GPIO_Init+0x2a8>)
 80072ec:	f003 fe40 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80072f0:	2310      	movs	r3, #16
 80072f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072f4:	2301      	movs	r3, #1
 80072f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072fc:	2300      	movs	r3, #0
 80072fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8007300:	f107 031c 	add.w	r3, r7, #28
 8007304:	4619      	mov	r1, r3
 8007306:	485a      	ldr	r0, [pc, #360]	@ (8007470 <MX_GPIO_Init+0x2a8>)
 8007308:	f003 fe32 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin;
 800730c:	2310      	movs	r3, #16
 800730e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007310:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 800731a:	f107 031c 	add.w	r3, r7, #28
 800731e:	4619      	mov	r1, r3
 8007320:	4857      	ldr	r0, [pc, #348]	@ (8007480 <MX_GPIO_Init+0x2b8>)
 8007322:	f003 fe25 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007326:	2302      	movs	r3, #2
 8007328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800732a:	2303      	movs	r3, #3
 800732c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007332:	f107 031c 	add.w	r3, r7, #28
 8007336:	4619      	mov	r1, r3
 8007338:	4851      	ldr	r0, [pc, #324]	@ (8007480 <MX_GPIO_Init+0x2b8>)
 800733a:	f003 fe19 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800733e:	2301      	movs	r3, #1
 8007340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007342:	2301      	movs	r3, #1
 8007344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800734a:	2300      	movs	r3, #0
 800734c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800734e:	f107 031c 	add.w	r3, r7, #28
 8007352:	4619      	mov	r1, r3
 8007354:	4847      	ldr	r0, [pc, #284]	@ (8007474 <MX_GPIO_Init+0x2ac>)
 8007356:	f003 fe0b 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800735a:	2308      	movs	r3, #8
 800735c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800735e:	2303      	movs	r3, #3
 8007360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007366:	f107 031c 	add.w	r3, r7, #28
 800736a:	4619      	mov	r1, r3
 800736c:	4841      	ldr	r0, [pc, #260]	@ (8007474 <MX_GPIO_Init+0x2ac>)
 800736e:	f003 fdff 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8007372:	2310      	movs	r3, #16
 8007374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007376:	2301      	movs	r3, #1
 8007378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800737e:	2300      	movs	r3, #0
 8007380:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8007382:	f107 031c 	add.w	r3, r7, #28
 8007386:	4619      	mov	r1, r3
 8007388:	483b      	ldr	r0, [pc, #236]	@ (8007478 <MX_GPIO_Init+0x2b0>)
 800738a:	f003 fdf1 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800738e:	2304      	movs	r3, #4
 8007390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007392:	2303      	movs	r3, #3
 8007394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800739a:	f107 031c 	add.w	r3, r7, #28
 800739e:	4619      	mov	r1, r3
 80073a0:	4836      	ldr	r0, [pc, #216]	@ (800747c <MX_GPIO_Init+0x2b4>)
 80073a2:	f003 fde5 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80073a6:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80073aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ac:	2300      	movs	r3, #0
 80073ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073b4:	f107 031c 	add.w	r3, r7, #28
 80073b8:	4619      	mov	r1, r3
 80073ba:	482d      	ldr	r0, [pc, #180]	@ (8007470 <MX_GPIO_Init+0x2a8>)
 80073bc:	f003 fdd8 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80073c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073c6:	2301      	movs	r3, #1
 80073c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ce:	2300      	movs	r3, #0
 80073d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d2:	f107 031c 	add.w	r3, r7, #28
 80073d6:	4619      	mov	r1, r3
 80073d8:	4828      	ldr	r0, [pc, #160]	@ (800747c <MX_GPIO_Init+0x2b4>)
 80073da:	f003 fdc9 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80073de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073e4:	2303      	movs	r3, #3
 80073e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073ec:	f107 031c 	add.w	r3, r7, #28
 80073f0:	4619      	mov	r1, r3
 80073f2:	481f      	ldr	r0, [pc, #124]	@ (8007470 <MX_GPIO_Init+0x2a8>)
 80073f4:	f003 fdbc 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80073f8:	2308      	movs	r3, #8
 80073fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073fc:	2303      	movs	r3, #3
 80073fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007400:	2300      	movs	r3, #0
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007404:	f107 031c 	add.w	r3, r7, #28
 8007408:	4619      	mov	r1, r3
 800740a:	481b      	ldr	r0, [pc, #108]	@ (8007478 <MX_GPIO_Init+0x2b0>)
 800740c:	f003 fdb0 	bl	800af70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin;
 8007410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007416:	2301      	movs	r3, #1
 8007418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741a:	2300      	movs	r3, #0
 800741c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800741e:	2302      	movs	r3, #2
 8007420:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CSB_GPIO_Port, &GPIO_InitStruct);
 8007422:	f107 031c 	add.w	r3, r7, #28
 8007426:	4619      	mov	r1, r3
 8007428:	4814      	ldr	r0, [pc, #80]	@ (800747c <MX_GPIO_Init+0x2b4>)
 800742a:	f003 fda1 	bl	800af70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	2009      	movs	r0, #9
 8007434:	f002 ff7d 	bl	800a332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007438:	2009      	movs	r0, #9
 800743a:	f002 ff94 	bl	800a366 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800743e:	2200      	movs	r2, #0
 8007440:	2100      	movs	r1, #0
 8007442:	200a      	movs	r0, #10
 8007444:	f002 ff75 	bl	800a332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007448:	200a      	movs	r0, #10
 800744a:	f002 ff8c 	bl	800a366 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 800744e:	2200      	movs	r2, #0
 8007450:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007454:	4809      	ldr	r0, [pc, #36]	@ (800747c <MX_GPIO_Init+0x2b4>)
 8007456:	f003 ff4b 	bl	800b2f0 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 800745a:	2200      	movs	r2, #0
 800745c:	2110      	movs	r1, #16
 800745e:	4806      	ldr	r0, [pc, #24]	@ (8007478 <MX_GPIO_Init+0x2b0>)
 8007460:	f003 ff46 	bl	800b2f0 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8007464:	bf00      	nop
 8007466:	3730      	adds	r7, #48	@ 0x30
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	58024400 	.word	0x58024400
 8007470:	58021000 	.word	0x58021000
 8007474:	58020800 	.word	0x58020800
 8007478:	58020000 	.word	0x58020000
 800747c:	58020400 	.word	0x58020400
 8007480:	58020c00 	.word	0x58020c00

08007484 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800748a:	463b      	mov	r3, r7
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007496:	f002 ff81 	bl	800a39c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800749a:	2301      	movs	r3, #1
 800749c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800749e:	2300      	movs	r3, #0
 80074a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80074a6:	231f      	movs	r3, #31
 80074a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80074aa:	2387      	movs	r3, #135	@ 0x87
 80074ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80074b2:	2300      	movs	r3, #0
 80074b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80074ba:	2301      	movs	r3, #1
 80074bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80074be:	2300      	movs	r3, #0
 80074c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80074c6:	463b      	mov	r3, r7
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 ff9f 	bl	800a40c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80074ce:	2004      	movs	r0, #4
 80074d0:	f002 ff7c 	bl	800a3cc <HAL_MPU_Enable>

}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80074e0:	b672      	cpsid	i
}
 80074e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <Error_Handler+0x8>

080074e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <HAL_MspInit+0x30>)
 80074f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074f4:	4a08      	ldr	r2, [pc, #32]	@ (8007518 <HAL_MspInit+0x30>)
 80074f6:	f043 0302 	orr.w	r3, r3, #2
 80074fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80074fe:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <HAL_MspInit+0x30>)
 8007500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	58024400 	.word	0x58024400

0800751c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	@ 0x30
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007524:	f107 031c 	add.w	r3, r7, #28
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	605a      	str	r2, [r3, #4]
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	60da      	str	r2, [r3, #12]
 8007532:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a39      	ldr	r2, [pc, #228]	@ (8007620 <HAL_ADC_MspInit+0x104>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d133      	bne.n	80075a6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800753e:	4b39      	ldr	r3, [pc, #228]	@ (8007624 <HAL_ADC_MspInit+0x108>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	4a37      	ldr	r2, [pc, #220]	@ (8007624 <HAL_ADC_MspInit+0x108>)
 8007546:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007548:	4b36      	ldr	r3, [pc, #216]	@ (8007624 <HAL_ADC_MspInit+0x108>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d10e      	bne.n	800756e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8007550:	4b35      	ldr	r3, [pc, #212]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 8007552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007556:	4a34      	ldr	r2, [pc, #208]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 8007558:	f043 0320 	orr.w	r3, r3, #32
 800755c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007560:	4b31      	ldr	r3, [pc, #196]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 8007562:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	61bb      	str	r3, [r7, #24]
 800756c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800756e:	4b2e      	ldr	r3, [pc, #184]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 8007570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007574:	4a2c      	ldr	r2, [pc, #176]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 8007576:	f043 0304 	orr.w	r3, r3, #4
 800757a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800757e:	4b2a      	ldr	r3, [pc, #168]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 8007580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800758c:	2330      	movs	r3, #48	@ 0x30
 800758e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007590:	2303      	movs	r3, #3
 8007592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007594:	2300      	movs	r3, #0
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007598:	f107 031c 	add.w	r3, r7, #28
 800759c:	4619      	mov	r1, r3
 800759e:	4823      	ldr	r0, [pc, #140]	@ (800762c <HAL_ADC_MspInit+0x110>)
 80075a0:	f003 fce6 	bl	800af70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80075a4:	e037      	b.n	8007616 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a21      	ldr	r2, [pc, #132]	@ (8007630 <HAL_ADC_MspInit+0x114>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d132      	bne.n	8007616 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80075b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007624 <HAL_ADC_MspInit+0x108>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007624 <HAL_ADC_MspInit+0x108>)
 80075b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80075ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007624 <HAL_ADC_MspInit+0x108>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d10e      	bne.n	80075e0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80075c2:	4b19      	ldr	r3, [pc, #100]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 80075c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075c8:	4a17      	ldr	r2, [pc, #92]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 80075ca:	f043 0320 	orr.w	r3, r3, #32
 80075ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075d2:	4b15      	ldr	r3, [pc, #84]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 80075d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075e0:	4b11      	ldr	r3, [pc, #68]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 80075e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075e6:	4a10      	ldr	r2, [pc, #64]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 80075e8:	f043 0302 	orr.w	r3, r3, #2
 80075ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80075f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <HAL_ADC_MspInit+0x10c>)
 80075f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80075fe:	2303      	movs	r3, #3
 8007600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007602:	2303      	movs	r3, #3
 8007604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007606:	2300      	movs	r3, #0
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800760a:	f107 031c 	add.w	r3, r7, #28
 800760e:	4619      	mov	r1, r3
 8007610:	4808      	ldr	r0, [pc, #32]	@ (8007634 <HAL_ADC_MspInit+0x118>)
 8007612:	f003 fcad 	bl	800af70 <HAL_GPIO_Init>
}
 8007616:	bf00      	nop
 8007618:	3730      	adds	r7, #48	@ 0x30
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	40022000 	.word	0x40022000
 8007624:	2400211c 	.word	0x2400211c
 8007628:	58024400 	.word	0x58024400
 800762c:	58020800 	.word	0x58020800
 8007630:	40022100 	.word	0x40022100
 8007634:	58020400 	.word	0x58020400

08007638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b0bc      	sub	sp, #240	@ 0xf0
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007640:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	609a      	str	r2, [r3, #8]
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007650:	f107 0320 	add.w	r3, r7, #32
 8007654:	22b8      	movs	r2, #184	@ 0xb8
 8007656:	2100      	movs	r1, #0
 8007658:	4618      	mov	r0, r3
 800765a:	f011 f847 	bl	80186ec <memset>
  if(hi2c->Instance==I2C1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a7c      	ldr	r2, [pc, #496]	@ (8007854 <HAL_I2C_MspInit+0x21c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d147      	bne.n	80076f8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007668:	f04f 0208 	mov.w	r2, #8
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8007674:	2300      	movs	r3, #0
 8007676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800767a:	f107 0320 	add.w	r3, r7, #32
 800767e:	4618      	mov	r0, r3
 8007680:	f006 fae6 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800768a:	f7ff ff27 	bl	80074dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800768e:	4b72      	ldr	r3, [pc, #456]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 8007690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007694:	4a70      	ldr	r2, [pc, #448]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 8007696:	f043 0302 	orr.w	r3, r3, #2
 800769a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800769e:	4b6e      	ldr	r3, [pc, #440]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 80076a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80076ac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80076b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076b4:	2312      	movs	r3, #18
 80076b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c0:	2300      	movs	r3, #0
 80076c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80076c6:	2304      	movs	r3, #4
 80076c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80076d0:	4619      	mov	r1, r3
 80076d2:	4862      	ldr	r0, [pc, #392]	@ (800785c <HAL_I2C_MspInit+0x224>)
 80076d4:	f003 fc4c 	bl	800af70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80076d8:	4b5f      	ldr	r3, [pc, #380]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 80076da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076de:	4a5e      	ldr	r2, [pc, #376]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 80076e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80076e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 80076ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80076f6:	e0a8      	b.n	800784a <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C2)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a58      	ldr	r2, [pc, #352]	@ (8007860 <HAL_I2C_MspInit+0x228>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d147      	bne.n	8007792 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007702:	f04f 0208 	mov.w	r2, #8
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800770e:	2300      	movs	r3, #0
 8007710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007714:	f107 0320 	add.w	r3, r7, #32
 8007718:	4618      	mov	r0, r3
 800771a:	f006 fa99 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8007724:	f7ff feda 	bl	80074dc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007728:	4b4b      	ldr	r3, [pc, #300]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 800772a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800772e:	4a4a      	ldr	r2, [pc, #296]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 8007730:	f043 0302 	orr.w	r3, r3, #2
 8007734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007738:	4b47      	ldr	r3, [pc, #284]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 800773a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007746:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800774a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800774e:	2312      	movs	r3, #18
 8007750:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800775a:	2300      	movs	r3, #0
 800775c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007760:	2304      	movs	r3, #4
 8007762:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007766:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800776a:	4619      	mov	r1, r3
 800776c:	483b      	ldr	r0, [pc, #236]	@ (800785c <HAL_I2C_MspInit+0x224>)
 800776e:	f003 fbff 	bl	800af70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007772:	4b39      	ldr	r3, [pc, #228]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 8007774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007778:	4a37      	ldr	r2, [pc, #220]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 800777a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800777e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007782:	4b35      	ldr	r3, [pc, #212]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 8007784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	693b      	ldr	r3, [r7, #16]
}
 8007790:	e05b      	b.n	800784a <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C4)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a33      	ldr	r2, [pc, #204]	@ (8007864 <HAL_I2C_MspInit+0x22c>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d156      	bne.n	800784a <HAL_I2C_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800779c:	f04f 0210 	mov.w	r2, #16
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80077ae:	f107 0320 	add.w	r3, r7, #32
 80077b2:	4618      	mov	r0, r3
 80077b4:	f006 fa4c 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80077be:	f7ff fe8d 	bl	80074dc <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077c2:	4b25      	ldr	r3, [pc, #148]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 80077c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077c8:	4a23      	ldr	r2, [pc, #140]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 80077ca:	f043 0308 	orr.w	r3, r3, #8
 80077ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077d2:	4b21      	ldr	r3, [pc, #132]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 80077d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80077e0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80077e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077e8:	2312      	movs	r3, #18
 80077ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f4:	2303      	movs	r3, #3
 80077f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80077fa:	2304      	movs	r3, #4
 80077fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007800:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007804:	4619      	mov	r1, r3
 8007806:	4818      	ldr	r0, [pc, #96]	@ (8007868 <HAL_I2C_MspInit+0x230>)
 8007808:	f003 fbb2 	bl	800af70 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800780c:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 800780e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007812:	4a11      	ldr	r2, [pc, #68]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 8007814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007818:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800781c:	4b0e      	ldr	r3, [pc, #56]	@ (8007858 <HAL_I2C_MspInit+0x220>)
 800781e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007826:	60bb      	str	r3, [r7, #8]
 8007828:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 800782a:	2200      	movs	r2, #0
 800782c:	2100      	movs	r1, #0
 800782e:	205f      	movs	r0, #95	@ 0x5f
 8007830:	f002 fd7f 	bl	800a332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8007834:	205f      	movs	r0, #95	@ 0x5f
 8007836:	f002 fd96 	bl	800a366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	2060      	movs	r0, #96	@ 0x60
 8007840:	f002 fd77 	bl	800a332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8007844:	2060      	movs	r0, #96	@ 0x60
 8007846:	f002 fd8e 	bl	800a366 <HAL_NVIC_EnableIRQ>
}
 800784a:	bf00      	nop
 800784c:	37f0      	adds	r7, #240	@ 0xf0
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40005400 	.word	0x40005400
 8007858:	58024400 	.word	0x58024400
 800785c:	58020400 	.word	0x58020400
 8007860:	40005800 	.word	0x40005800
 8007864:	58001c00 	.word	0x58001c00
 8007868:	58020c00 	.word	0x58020c00

0800786c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b0ba      	sub	sp, #232	@ 0xe8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007874:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007884:	f107 0318 	add.w	r3, r7, #24
 8007888:	22b8      	movs	r2, #184	@ 0xb8
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f010 ff2d 	bl	80186ec <memset>
  if(hsd->Instance==SDMMC1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a38      	ldr	r2, [pc, #224]	@ (8007978 <HAL_SD_MspInit+0x10c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d169      	bne.n	8007970 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800789c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80078ac:	f107 0318 	add.w	r3, r7, #24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f006 f9cd 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80078bc:	f7ff fe0e 	bl	80074dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80078c0:	4b2e      	ldr	r3, [pc, #184]	@ (800797c <HAL_SD_MspInit+0x110>)
 80078c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80078c6:	4a2d      	ldr	r2, [pc, #180]	@ (800797c <HAL_SD_MspInit+0x110>)
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80078d0:	4b2a      	ldr	r3, [pc, #168]	@ (800797c <HAL_SD_MspInit+0x110>)
 80078d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80078d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078de:	4b27      	ldr	r3, [pc, #156]	@ (800797c <HAL_SD_MspInit+0x110>)
 80078e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078e4:	4a25      	ldr	r2, [pc, #148]	@ (800797c <HAL_SD_MspInit+0x110>)
 80078e6:	f043 0308 	orr.w	r3, r3, #8
 80078ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80078ee:	4b23      	ldr	r3, [pc, #140]	@ (800797c <HAL_SD_MspInit+0x110>)
 80078f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078fc:	4b1f      	ldr	r3, [pc, #124]	@ (800797c <HAL_SD_MspInit+0x110>)
 80078fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007902:	4a1e      	ldr	r2, [pc, #120]	@ (800797c <HAL_SD_MspInit+0x110>)
 8007904:	f043 0304 	orr.w	r3, r3, #4
 8007908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800790c:	4b1b      	ldr	r3, [pc, #108]	@ (800797c <HAL_SD_MspInit+0x110>)
 800790e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800791a:	2304      	movs	r3, #4
 800791c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007920:	2302      	movs	r3, #2
 8007922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007926:	2300      	movs	r3, #0
 8007928:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800792c:	2303      	movs	r3, #3
 800792e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8007932:	230c      	movs	r3, #12
 8007934:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007938:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800793c:	4619      	mov	r1, r3
 800793e:	4810      	ldr	r0, [pc, #64]	@ (8007980 <HAL_SD_MspInit+0x114>)
 8007940:	f003 fb16 	bl	800af70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8007944:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8007948:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800794c:	2302      	movs	r3, #2
 800794e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007958:	2303      	movs	r3, #3
 800795a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800795e:	230c      	movs	r3, #12
 8007960:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007964:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007968:	4619      	mov	r1, r3
 800796a:	4806      	ldr	r0, [pc, #24]	@ (8007984 <HAL_SD_MspInit+0x118>)
 800796c:	f003 fb00 	bl	800af70 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8007970:	bf00      	nop
 8007972:	37e8      	adds	r7, #232	@ 0xe8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	52007000 	.word	0x52007000
 800797c:	58024400 	.word	0x58024400
 8007980:	58020c00 	.word	0x58020c00
 8007984:	58020800 	.word	0x58020800

08007988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b0be      	sub	sp, #248	@ 0xf8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007990:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079a4:	22b8      	movs	r2, #184	@ 0xb8
 80079a6:	2100      	movs	r1, #0
 80079a8:	4618      	mov	r0, r3
 80079aa:	f010 fe9f 	bl	80186ec <memset>
  if(hspi->Instance==SPI1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a97      	ldr	r2, [pc, #604]	@ (8007c10 <HAL_SPI_MspInit+0x288>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d16a      	bne.n	8007a8e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80079b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80079ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079ce:	4618      	mov	r0, r3
 80079d0:	f006 f93e 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80079da:	f7ff fd7f 	bl	80074dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079de:	4b8d      	ldr	r3, [pc, #564]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 80079e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079e4:	4a8b      	ldr	r2, [pc, #556]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 80079e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079ee:	4b89      	ldr	r3, [pc, #548]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 80079f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079fc:	4b85      	ldr	r3, [pc, #532]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 80079fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a02:	4a84      	ldr	r2, [pc, #528]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007a04:	f043 0302 	orr.w	r3, r3, #2
 8007a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a0c:	4b81      	ldr	r3, [pc, #516]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1a:	4b7e      	ldr	r3, [pc, #504]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a20:	4a7c      	ldr	r2, [pc, #496]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007a22:	f043 0301 	orr.w	r3, r3, #1
 8007a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007a38:	2310      	movs	r3, #16
 8007a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a50:	2305      	movs	r3, #5
 8007a52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a56:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	486e      	ldr	r0, [pc, #440]	@ (8007c18 <HAL_SPI_MspInit+0x290>)
 8007a5e:	f003 fa87 	bl	800af70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007a62:	23a0      	movs	r3, #160	@ 0xa0
 8007a64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a7a:	2305      	movs	r3, #5
 8007a7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4865      	ldr	r0, [pc, #404]	@ (8007c1c <HAL_SPI_MspInit+0x294>)
 8007a88:	f003 fa72 	bl	800af70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007a8c:	e0bb      	b.n	8007c06 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a63      	ldr	r2, [pc, #396]	@ (8007c20 <HAL_SPI_MspInit+0x298>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d16b      	bne.n	8007b70 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8007a98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007a9c:	f04f 0300 	mov.w	r3, #0
 8007aa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f006 f8ce 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8007aba:	f7ff fd0f 	bl	80074dc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007abe:	4b55      	ldr	r3, [pc, #340]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ac4:	4a53      	ldr	r2, [pc, #332]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007aca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ace:	4b51      	ldr	r3, [pc, #324]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007adc:	4b4d      	ldr	r3, [pc, #308]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ae2:	4a4c      	ldr	r2, [pc, #304]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007aec:	4b49      	ldr	r3, [pc, #292]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afa:	4b46      	ldr	r3, [pc, #280]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b00:	4a44      	ldr	r2, [pc, #272]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007b02:	f043 0304 	orr.w	r3, r3, #4
 8007b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b0a:	4b42      	ldr	r3, [pc, #264]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b20:	2302      	movs	r3, #2
 8007b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b32:	2305      	movs	r3, #5
 8007b34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b38:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4837      	ldr	r0, [pc, #220]	@ (8007c1c <HAL_SPI_MspInit+0x294>)
 8007b40:	f003 fa16 	bl	800af70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8007b44:	2306      	movs	r3, #6
 8007b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b56:	2300      	movs	r3, #0
 8007b58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b5c:	2305      	movs	r3, #5
 8007b5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b62:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007b66:	4619      	mov	r1, r3
 8007b68:	482e      	ldr	r0, [pc, #184]	@ (8007c24 <HAL_SPI_MspInit+0x29c>)
 8007b6a:	f003 fa01 	bl	800af70 <HAL_GPIO_Init>
}
 8007b6e:	e04a      	b.n	8007c06 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a2c      	ldr	r2, [pc, #176]	@ (8007c28 <HAL_SPI_MspInit+0x2a0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d145      	bne.n	8007c06 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8007b7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b90:	4618      	mov	r0, r3
 8007b92:	f006 f85d 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8007b9c:	f7ff fc9e 	bl	80074dc <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007ba8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007bac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bb0:	4b18      	ldr	r3, [pc, #96]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bbe:	4b15      	ldr	r3, [pc, #84]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bc4:	4a13      	ldr	r2, [pc, #76]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007bc6:	f043 0310 	orr.w	r3, r3, #16
 8007bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007bce:	4b11      	ldr	r3, [pc, #68]	@ (8007c14 <HAL_SPI_MspInit+0x28c>)
 8007bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	60bb      	str	r3, [r7, #8]
 8007bda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8007bdc:	2364      	movs	r3, #100	@ 0x64
 8007bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007be2:	2302      	movs	r3, #2
 8007be4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007bf4:	2305      	movs	r3, #5
 8007bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bfa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	480a      	ldr	r0, [pc, #40]	@ (8007c2c <HAL_SPI_MspInit+0x2a4>)
 8007c02:	f003 f9b5 	bl	800af70 <HAL_GPIO_Init>
}
 8007c06:	bf00      	nop
 8007c08:	37f8      	adds	r7, #248	@ 0xf8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40013000 	.word	0x40013000
 8007c14:	58024400 	.word	0x58024400
 8007c18:	58020400 	.word	0x58020400
 8007c1c:	58020000 	.word	0x58020000
 8007c20:	40003800 	.word	0x40003800
 8007c24:	58020800 	.word	0x58020800
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	58021000 	.word	0x58021000

08007c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c6c <HAL_TIM_Base_MspInit+0x3c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d10e      	bne.n	8007c60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007c42:	4b0b      	ldr	r3, [pc, #44]	@ (8007c70 <HAL_TIM_Base_MspInit+0x40>)
 8007c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c48:	4a09      	ldr	r2, [pc, #36]	@ (8007c70 <HAL_TIM_Base_MspInit+0x40>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c52:	4b07      	ldr	r3, [pc, #28]	@ (8007c70 <HAL_TIM_Base_MspInit+0x40>)
 8007c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	40010000 	.word	0x40010000
 8007c70:	58024400 	.word	0x58024400

08007c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b08b      	sub	sp, #44	@ 0x2c
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c84:	d10f      	bne.n	8007ca6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c86:	4b49      	ldr	r3, [pc, #292]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c8c:	4a47      	ldr	r2, [pc, #284]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c96:	4b45      	ldr	r3, [pc, #276]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8007ca4:	e07c      	b.n	8007da0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a41      	ldr	r2, [pc, #260]	@ (8007db0 <HAL_TIM_PWM_MspInit+0x13c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10f      	bne.n	8007cd0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cb6:	4a3d      	ldr	r2, [pc, #244]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007cb8:	f043 0302 	orr.w	r3, r3, #2
 8007cbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
}
 8007cce:	e067      	b.n	8007da0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a37      	ldr	r2, [pc, #220]	@ (8007db4 <HAL_TIM_PWM_MspInit+0x140>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d10f      	bne.n	8007cfa <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007cda:	4b34      	ldr	r3, [pc, #208]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ce0:	4a32      	ldr	r2, [pc, #200]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007ce2:	f043 0304 	orr.w	r3, r3, #4
 8007ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007cea:	4b30      	ldr	r3, [pc, #192]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	69fb      	ldr	r3, [r7, #28]
}
 8007cf8:	e052      	b.n	8007da0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8007db8 <HAL_TIM_PWM_MspInit+0x144>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d10f      	bne.n	8007d24 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007d04:	4b29      	ldr	r3, [pc, #164]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d0a:	4a28      	ldr	r2, [pc, #160]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d0c:	f043 0308 	orr.w	r3, r3, #8
 8007d10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007d14:	4b25      	ldr	r3, [pc, #148]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	69bb      	ldr	r3, [r7, #24]
}
 8007d22:	e03d      	b.n	8007da0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a24      	ldr	r2, [pc, #144]	@ (8007dbc <HAL_TIM_PWM_MspInit+0x148>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d10f      	bne.n	8007d4e <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d34:	4a1d      	ldr	r2, [pc, #116]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d36:	f043 0302 	orr.w	r3, r3, #2
 8007d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	697b      	ldr	r3, [r7, #20]
}
 8007d4c:	e028      	b.n	8007da0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc0 <HAL_TIM_PWM_MspInit+0x14c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d10f      	bne.n	8007d78 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8007d58:	4b14      	ldr	r3, [pc, #80]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d5e:	4a13      	ldr	r2, [pc, #76]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007d68:	4b10      	ldr	r3, [pc, #64]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	693b      	ldr	r3, [r7, #16]
}
 8007d76:	e013      	b.n	8007da0 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a11      	ldr	r2, [pc, #68]	@ (8007dc4 <HAL_TIM_PWM_MspInit+0x150>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d10e      	bne.n	8007da0 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007d82:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d88:	4a08      	ldr	r2, [pc, #32]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007d92:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <HAL_TIM_PWM_MspInit+0x138>)
 8007d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
}
 8007da0:	bf00      	nop
 8007da2:	372c      	adds	r7, #44	@ 0x2c
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	58024400 	.word	0x58024400
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40000c00 	.word	0x40000c00
 8007dbc:	40010400 	.word	0x40010400
 8007dc0:	40001800 	.word	0x40001800
 8007dc4:	40014000 	.word	0x40014000

08007dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b090      	sub	sp, #64	@ 0x40
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a95      	ldr	r2, [pc, #596]	@ (800803c <HAL_TIM_MspPostInit+0x274>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d120      	bne.n	8007e2c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007dea:	4b95      	ldr	r3, [pc, #596]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007df0:	4a93      	ldr	r2, [pc, #588]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007df2:	f043 0310 	orr.w	r3, r3, #16
 8007df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007dfa:	4b91      	ldr	r3, [pc, #580]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e00:	f003 0310 	and.w	r3, r3, #16
 8007e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8007e08:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8007e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e22:	4619      	mov	r1, r3
 8007e24:	4887      	ldr	r0, [pc, #540]	@ (8008044 <HAL_TIM_MspPostInit+0x27c>)
 8007e26:	f003 f8a3 	bl	800af70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8007e2a:	e103      	b.n	8008034 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e34:	d120      	bne.n	8007e78 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e36:	4b82      	ldr	r3, [pc, #520]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e3c:	4a80      	ldr	r2, [pc, #512]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007e3e:	f043 0301 	orr.w	r3, r3, #1
 8007e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e46:	4b7e      	ldr	r3, [pc, #504]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007e54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e62:	2300      	movs	r3, #0
 8007e64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007e66:	2301      	movs	r3, #1
 8007e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4875      	ldr	r0, [pc, #468]	@ (8008048 <HAL_TIM_MspPostInit+0x280>)
 8007e72:	f003 f87d 	bl	800af70 <HAL_GPIO_Init>
}
 8007e76:	e0dd      	b.n	8008034 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a73      	ldr	r2, [pc, #460]	@ (800804c <HAL_TIM_MspPostInit+0x284>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d11f      	bne.n	8007ec2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e82:	4b6f      	ldr	r3, [pc, #444]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e88:	4a6d      	ldr	r2, [pc, #436]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007e8a:	f043 0301 	orr.w	r3, r3, #1
 8007e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e92:	4b6b      	ldr	r3, [pc, #428]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	623b      	str	r3, [r7, #32]
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ea0:	2340      	movs	r3, #64	@ 0x40
 8007ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eac:	2300      	movs	r3, #0
 8007eae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4863      	ldr	r0, [pc, #396]	@ (8008048 <HAL_TIM_MspPostInit+0x280>)
 8007ebc:	f003 f858 	bl	800af70 <HAL_GPIO_Init>
}
 8007ec0:	e0b8      	b.n	8008034 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a62      	ldr	r2, [pc, #392]	@ (8008050 <HAL_TIM_MspPostInit+0x288>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d11f      	bne.n	8007f0c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007ed4:	f043 0302 	orr.w	r3, r3, #2
 8007ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007edc:	4b58      	ldr	r3, [pc, #352]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007eea:	2340      	movs	r3, #64	@ 0x40
 8007eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007efa:	2302      	movs	r3, #2
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007efe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f02:	4619      	mov	r1, r3
 8007f04:	4853      	ldr	r0, [pc, #332]	@ (8008054 <HAL_TIM_MspPostInit+0x28c>)
 8007f06:	f003 f833 	bl	800af70 <HAL_GPIO_Init>
}
 8007f0a:	e093      	b.n	8008034 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a51      	ldr	r2, [pc, #324]	@ (8008058 <HAL_TIM_MspPostInit+0x290>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d11f      	bne.n	8007f56 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f16:	4b4a      	ldr	r3, [pc, #296]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f1c:	4a48      	ldr	r2, [pc, #288]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f26:	4b46      	ldr	r3, [pc, #280]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	61bb      	str	r3, [r7, #24]
 8007f32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007f34:	2301      	movs	r3, #1
 8007f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007f44:	2302      	movs	r3, #2
 8007f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	483e      	ldr	r0, [pc, #248]	@ (8008048 <HAL_TIM_MspPostInit+0x280>)
 8007f50:	f003 f80e 	bl	800af70 <HAL_GPIO_Init>
}
 8007f54:	e06e      	b.n	8008034 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a40      	ldr	r2, [pc, #256]	@ (800805c <HAL_TIM_MspPostInit+0x294>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d11f      	bne.n	8007fa0 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f60:	4b37      	ldr	r3, [pc, #220]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f66:	4a36      	ldr	r2, [pc, #216]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007f68:	f043 0304 	orr.w	r3, r3, #4
 8007f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f70:	4b33      	ldr	r3, [pc, #204]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007f7e:	2340      	movs	r3, #64	@ 0x40
 8007f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f82:	2302      	movs	r3, #2
 8007f84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f96:	4619      	mov	r1, r3
 8007f98:	4831      	ldr	r0, [pc, #196]	@ (8008060 <HAL_TIM_MspPostInit+0x298>)
 8007f9a:	f002 ffe9 	bl	800af70 <HAL_GPIO_Init>
}
 8007f9e:	e049      	b.n	8008034 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8008064 <HAL_TIM_MspPostInit+0x29c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d120      	bne.n	8007fec <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007faa:	4b25      	ldr	r3, [pc, #148]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fb0:	4a23      	ldr	r2, [pc, #140]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007fb2:	f043 0302 	orr.w	r3, r3, #2
 8007fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fba:	4b21      	ldr	r3, [pc, #132]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007fc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	481b      	ldr	r0, [pc, #108]	@ (8008054 <HAL_TIM_MspPostInit+0x28c>)
 8007fe6:	f002 ffc3 	bl	800af70 <HAL_GPIO_Init>
}
 8007fea:	e023      	b.n	8008034 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8008068 <HAL_TIM_MspPostInit+0x2a0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d11e      	bne.n	8008034 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ffc:	4a10      	ldr	r2, [pc, #64]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008006:	4b0e      	ldr	r3, [pc, #56]	@ (8008040 <HAL_TIM_MspPostInit+0x278>)
 8008008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008014:	2304      	movs	r3, #4
 8008016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008018:	2302      	movs	r3, #2
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800801c:	2300      	movs	r3, #0
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008020:	2300      	movs	r3, #0
 8008022:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8008024:	2304      	movs	r3, #4
 8008026:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800802c:	4619      	mov	r1, r3
 800802e:	4806      	ldr	r0, [pc, #24]	@ (8008048 <HAL_TIM_MspPostInit+0x280>)
 8008030:	f002 ff9e 	bl	800af70 <HAL_GPIO_Init>
}
 8008034:	bf00      	nop
 8008036:	3740      	adds	r7, #64	@ 0x40
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	40010000 	.word	0x40010000
 8008040:	58024400 	.word	0x58024400
 8008044:	58021000 	.word	0x58021000
 8008048:	58020000 	.word	0x58020000
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800
 8008054:	58020400 	.word	0x58020400
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40010400 	.word	0x40010400
 8008060:	58020800 	.word	0x58020800
 8008064:	40001800 	.word	0x40001800
 8008068:	40014000 	.word	0x40014000

0800806c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0c0      	sub	sp, #256	@ 0x100
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008074:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008084:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008088:	22b8      	movs	r2, #184	@ 0xb8
 800808a:	2100      	movs	r1, #0
 800808c:	4618      	mov	r0, r3
 800808e:	f010 fb2d 	bl	80186ec <memset>
  if(huart->Instance==UART4)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4ac3      	ldr	r2, [pc, #780]	@ (80083a4 <HAL_UART_MspInit+0x338>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d16b      	bne.n	8008174 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800809c:	f04f 0202 	mov.w	r2, #2
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80080b2:	4618      	mov	r0, r3
 80080b4:	f005 fdcc 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80080be:	f7ff fa0d 	bl	80074dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80080c2:	4bb9      	ldr	r3, [pc, #740]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80080c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080c8:	4ab7      	ldr	r2, [pc, #732]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80080ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80080d2:	4bb5      	ldr	r3, [pc, #724]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80080d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080e0:	4bb1      	ldr	r3, [pc, #708]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80080e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080e6:	4ab0      	ldr	r2, [pc, #704]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80080e8:	f043 0302 	orr.w	r3, r3, #2
 80080ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80080f0:	4bad      	ldr	r3, [pc, #692]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80080f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80080fe:	4baa      	ldr	r3, [pc, #680]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008104:	4aa8      	ldr	r2, [pc, #672]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008106:	f043 0308 	orr.w	r3, r3, #8
 800810a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800810e:	4ba6      	ldr	r3, [pc, #664]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800811c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008120:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008124:	2302      	movs	r3, #2
 8008126:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812a:	2300      	movs	r3, #0
 800812c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008130:	2300      	movs	r3, #0
 8008132:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008136:	2308      	movs	r3, #8
 8008138:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800813c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008140:	4619      	mov	r1, r3
 8008142:	489a      	ldr	r0, [pc, #616]	@ (80083ac <HAL_UART_MspInit+0x340>)
 8008144:	f002 ff14 	bl	800af70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008148:	2301      	movs	r3, #1
 800814a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814e:	2302      	movs	r3, #2
 8008150:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008154:	2300      	movs	r3, #0
 8008156:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800815a:	2300      	movs	r3, #0
 800815c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008160:	2308      	movs	r3, #8
 8008162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008166:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800816a:	4619      	mov	r1, r3
 800816c:	4890      	ldr	r0, [pc, #576]	@ (80083b0 <HAL_UART_MspInit+0x344>)
 800816e:	f002 feff 	bl	800af70 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8008172:	e111      	b.n	8008398 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART5)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a8e      	ldr	r2, [pc, #568]	@ (80083b4 <HAL_UART_MspInit+0x348>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d147      	bne.n	800820e <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800817e:	f04f 0202 	mov.w	r2, #2
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800818a:	2300      	movs	r3, #0
 800818c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008190:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008194:	4618      	mov	r0, r3
 8008196:	f005 fd5b 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80081a0:	f7ff f99c 	bl	80074dc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80081a4:	4b80      	ldr	r3, [pc, #512]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80081a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081aa:	4a7f      	ldr	r2, [pc, #508]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80081ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80081b4:	4b7c      	ldr	r3, [pc, #496]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80081b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081be:	623b      	str	r3, [r7, #32]
 80081c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081c2:	4b79      	ldr	r3, [pc, #484]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80081c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081c8:	4a77      	ldr	r2, [pc, #476]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80081ca:	f043 0302 	orr.w	r3, r3, #2
 80081ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80081d2:	4b75      	ldr	r3, [pc, #468]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80081d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 80081e0:	f242 0320 	movw	r3, #8224	@ 0x2020
 80081e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e8:	2302      	movs	r3, #2
 80081ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f4:	2300      	movs	r3, #0
 80081f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80081fa:	230e      	movs	r3, #14
 80081fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008200:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008204:	4619      	mov	r1, r3
 8008206:	4869      	ldr	r0, [pc, #420]	@ (80083ac <HAL_UART_MspInit+0x340>)
 8008208:	f002 feb2 	bl	800af70 <HAL_GPIO_Init>
}
 800820c:	e0c4      	b.n	8008398 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART7)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a69      	ldr	r2, [pc, #420]	@ (80083b8 <HAL_UART_MspInit+0x34c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d147      	bne.n	80082a8 <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8008218:	f04f 0202 	mov.w	r2, #2
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008224:	2300      	movs	r3, #0
 8008226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800822a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800822e:	4618      	mov	r0, r3
 8008230:	f005 fd0e 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 800823a:	f7ff f94f 	bl	80074dc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800823e:	4b5a      	ldr	r3, [pc, #360]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008244:	4a58      	ldr	r2, [pc, #352]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008246:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800824a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800824e:	4b56      	ldr	r3, [pc, #344]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008254:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008258:	61bb      	str	r3, [r7, #24]
 800825a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800825c:	4b52      	ldr	r3, [pc, #328]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 800825e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008262:	4a51      	ldr	r2, [pc, #324]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008264:	f043 0310 	orr.w	r3, r3, #16
 8008268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800826c:	4b4e      	ldr	r3, [pc, #312]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 800826e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008272:	f003 0310 	and.w	r3, r3, #16
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800827a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800827e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008282:	2302      	movs	r3, #2
 8008284:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800828e:	2300      	movs	r3, #0
 8008290:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8008294:	2307      	movs	r3, #7
 8008296:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800829a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800829e:	4619      	mov	r1, r3
 80082a0:	4846      	ldr	r0, [pc, #280]	@ (80083bc <HAL_UART_MspInit+0x350>)
 80082a2:	f002 fe65 	bl	800af70 <HAL_GPIO_Init>
}
 80082a6:	e077      	b.n	8008398 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART8)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a44      	ldr	r2, [pc, #272]	@ (80083c0 <HAL_UART_MspInit+0x354>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d172      	bne.n	8008398 <HAL_UART_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80082b2:	f04f 0202 	mov.w	r2, #2
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80082c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80082c8:	4618      	mov	r0, r3
 80082ca:	f005 fcc1 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80082d4:	f7ff f902 	bl	80074dc <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80082d8:	4b33      	ldr	r3, [pc, #204]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80082da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082de:	4a32      	ldr	r2, [pc, #200]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80082e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80082e8:	4b2f      	ldr	r3, [pc, #188]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80082ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80082f6:	4b2c      	ldr	r3, [pc, #176]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80082f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082fc:	4a2a      	ldr	r2, [pc, #168]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 80082fe:	f043 0310 	orr.w	r3, r3, #16
 8008302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008306:	4b28      	ldr	r3, [pc, #160]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800830c:	f003 0310 	and.w	r3, r3, #16
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008314:	4b24      	ldr	r3, [pc, #144]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800831a:	4a23      	ldr	r2, [pc, #140]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 800831c:	f043 0308 	orr.w	r3, r3, #8
 8008320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008324:	4b20      	ldr	r3, [pc, #128]	@ (80083a8 <HAL_UART_MspInit+0x33c>)
 8008326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8008332:	2303      	movs	r3, #3
 8008334:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008338:	2302      	movs	r3, #2
 800833a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833e:	2300      	movs	r3, #0
 8008340:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008344:	2300      	movs	r3, #0
 8008346:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800834a:	2308      	movs	r3, #8
 800834c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008350:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008354:	4619      	mov	r1, r3
 8008356:	4819      	ldr	r0, [pc, #100]	@ (80083bc <HAL_UART_MspInit+0x350>)
 8008358:	f002 fe0a 	bl	800af70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 800835c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8008360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008364:	2302      	movs	r3, #2
 8008366:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836a:	2300      	movs	r3, #0
 800836c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008370:	2300      	movs	r3, #0
 8008372:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8008376:	2308      	movs	r3, #8
 8008378:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800837c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008380:	4619      	mov	r1, r3
 8008382:	480b      	ldr	r0, [pc, #44]	@ (80083b0 <HAL_UART_MspInit+0x344>)
 8008384:	f002 fdf4 	bl	800af70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8008388:	2200      	movs	r2, #0
 800838a:	2100      	movs	r1, #0
 800838c:	2053      	movs	r0, #83	@ 0x53
 800838e:	f001 ffd0 	bl	800a332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8008392:	2053      	movs	r0, #83	@ 0x53
 8008394:	f001 ffe7 	bl	800a366 <HAL_NVIC_EnableIRQ>
}
 8008398:	bf00      	nop
 800839a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40004c00 	.word	0x40004c00
 80083a8:	58024400 	.word	0x58024400
 80083ac:	58020400 	.word	0x58020400
 80083b0:	58020c00 	.word	0x58020c00
 80083b4:	40005000 	.word	0x40005000
 80083b8:	40007800 	.word	0x40007800
 80083bc:	58021000 	.word	0x58021000
 80083c0:	40007c00 	.word	0x40007c00

080083c4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b0bc      	sub	sp, #240	@ 0xf0
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	605a      	str	r2, [r3, #4]
 80083d6:	609a      	str	r2, [r3, #8]
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80083dc:	f107 0320 	add.w	r3, r7, #32
 80083e0:	22b8      	movs	r2, #184	@ 0xb8
 80083e2:	2100      	movs	r1, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f010 f981 	bl	80186ec <memset>
  if(husart->Instance==USART1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a73      	ldr	r2, [pc, #460]	@ (80085bc <HAL_USART_MspInit+0x1f8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d147      	bne.n	8008484 <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80083f4:	f04f 0201 	mov.w	r2, #1
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008400:	2300      	movs	r3, #0
 8008402:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008406:	f107 0320 	add.w	r3, r7, #32
 800840a:	4618      	mov	r0, r3
 800840c:	f005 fc20 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8008416:	f7ff f861 	bl	80074dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800841a:	4b69      	ldr	r3, [pc, #420]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800841c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008420:	4a67      	ldr	r2, [pc, #412]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 8008422:	f043 0310 	orr.w	r3, r3, #16
 8008426:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800842a:	4b65      	ldr	r3, [pc, #404]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800842c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008430:	f003 0310 	and.w	r3, r3, #16
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008438:	4b61      	ldr	r3, [pc, #388]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800843a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800843e:	4a60      	ldr	r2, [pc, #384]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008448:	4b5d      	ldr	r3, [pc, #372]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800844a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	61bb      	str	r3, [r7, #24]
 8008454:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8008456:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800845a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845e:	2302      	movs	r3, #2
 8008460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008464:	2300      	movs	r3, #0
 8008466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008470:	2307      	movs	r3, #7
 8008472:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008476:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800847a:	4619      	mov	r1, r3
 800847c:	4851      	ldr	r0, [pc, #324]	@ (80085c4 <HAL_USART_MspInit+0x200>)
 800847e:	f002 fd77 	bl	800af70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008482:	e097      	b.n	80085b4 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a4f      	ldr	r2, [pc, #316]	@ (80085c8 <HAL_USART_MspInit+0x204>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d146      	bne.n	800851c <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800848e:	f04f 0202 	mov.w	r2, #2
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800849a:	2300      	movs	r3, #0
 800849c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084a0:	f107 0320 	add.w	r3, r7, #32
 80084a4:	4618      	mov	r0, r3
 80084a6:	f005 fbd3 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <HAL_USART_MspInit+0xf0>
      Error_Handler();
 80084b0:	f7ff f814 	bl	80074dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80084b4:	4b42      	ldr	r3, [pc, #264]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 80084b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084ba:	4a41      	ldr	r2, [pc, #260]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 80084bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80084c4:	4b3e      	ldr	r3, [pc, #248]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 80084c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084d2:	4b3b      	ldr	r3, [pc, #236]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 80084d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084d8:	4a39      	ldr	r2, [pc, #228]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 80084da:	f043 0308 	orr.w	r3, r3, #8
 80084de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084e2:	4b37      	ldr	r3, [pc, #220]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 80084e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 80084f0:	23e8      	movs	r3, #232	@ 0xe8
 80084f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f6:	2302      	movs	r3, #2
 80084f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008502:	2300      	movs	r3, #0
 8008504:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008508:	2307      	movs	r3, #7
 800850a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800850e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8008512:	4619      	mov	r1, r3
 8008514:	482d      	ldr	r0, [pc, #180]	@ (80085cc <HAL_USART_MspInit+0x208>)
 8008516:	f002 fd2b 	bl	800af70 <HAL_GPIO_Init>
}
 800851a:	e04b      	b.n	80085b4 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a2b      	ldr	r2, [pc, #172]	@ (80085d0 <HAL_USART_MspInit+0x20c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d146      	bne.n	80085b4 <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008526:	f04f 0202 	mov.w	r2, #2
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008532:	2300      	movs	r3, #0
 8008534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008538:	f107 0320 	add.w	r3, r7, #32
 800853c:	4618      	mov	r0, r3
 800853e:	f005 fb87 	bl	800dc50 <HAL_RCCEx_PeriphCLKConfig>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_USART_MspInit+0x188>
      Error_Handler();
 8008548:	f7fe ffc8 	bl	80074dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800854c:	4b1c      	ldr	r3, [pc, #112]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800854e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008552:	4a1b      	ldr	r2, [pc, #108]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 8008554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008558:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800855c:	4b18      	ldr	r3, [pc, #96]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800855e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800856a:	4b15      	ldr	r3, [pc, #84]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800856c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008570:	4a13      	ldr	r2, [pc, #76]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 8008572:	f043 0308 	orr.w	r3, r3, #8
 8008576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800857a:	4b11      	ldr	r3, [pc, #68]	@ (80085c0 <HAL_USART_MspInit+0x1fc>)
 800857c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8008588:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800858c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008590:	2302      	movs	r3, #2
 8008592:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008596:	2300      	movs	r3, #0
 8008598:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800859c:	2300      	movs	r3, #0
 800859e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80085a2:	2307      	movs	r3, #7
 80085a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80085ac:	4619      	mov	r1, r3
 80085ae:	4807      	ldr	r0, [pc, #28]	@ (80085cc <HAL_USART_MspInit+0x208>)
 80085b0:	f002 fcde 	bl	800af70 <HAL_GPIO_Init>
}
 80085b4:	bf00      	nop
 80085b6:	37f0      	adds	r7, #240	@ 0xf0
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40011000 	.word	0x40011000
 80085c0:	58024400 	.word	0x58024400
 80085c4:	58020000 	.word	0x58020000
 80085c8:	40004400 	.word	0x40004400
 80085cc:	58020c00 	.word	0x58020c00
 80085d0:	40004800 	.word	0x40004800

080085d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80085d8:	f005 fb1e 	bl	800dc18 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80085dc:	bf00      	nop
 80085de:	e7fd      	b.n	80085dc <NMI_Handler+0x8>

080085e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <HardFault_Handler+0x4>

080085e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085ec:	bf00      	nop
 80085ee:	e7fd      	b.n	80085ec <MemManage_Handler+0x4>

080085f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085f4:	bf00      	nop
 80085f6:	e7fd      	b.n	80085f4 <BusFault_Handler+0x4>

080085f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <UsageFault_Handler+0x4>

08008600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008604:	bf00      	nop
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800860e:	b480      	push	{r7}
 8008610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008612:	bf00      	nop
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008620:	bf00      	nop
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800862e:	f000 f9ed 	bl	8008a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008632:	bf00      	nop
 8008634:	bd80      	pop	{r7, pc}

08008636 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 800863a:	2008      	movs	r0, #8
 800863c:	f002 fe71 	bl	800b322 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008640:	bf00      	nop
 8008642:	bd80      	pop	{r7, pc}

08008644 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8008648:	2010      	movs	r0, #16
 800864a:	f002 fe6a 	bl	800b322 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800864e:	bf00      	nop
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8008658:	4802      	ldr	r0, [pc, #8]	@ (8008664 <UART8_IRQHandler+0x10>)
 800865a:	f00b fa1f 	bl	8013a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800865e:	bf00      	nop
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	24001f68 	.word	0x24001f68

08008668 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800866c:	4802      	ldr	r0, [pc, #8]	@ (8008678 <I2C4_EV_IRQHandler+0x10>)
 800866e:	f003 f91d 	bl	800b8ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8008672:	bf00      	nop
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	240018e4 	.word	0x240018e4

0800867c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8008680:	4802      	ldr	r0, [pc, #8]	@ (800868c <I2C4_ER_IRQHandler+0x10>)
 8008682:	f003 f92d 	bl	800b8e0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	240018e4 	.word	0x240018e4

08008690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  return 1;
 8008694:	2301      	movs	r3, #1
}
 8008696:	4618      	mov	r0, r3
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <_kill>:

int _kill(int pid, int sig)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80086aa:	f010 f871 	bl	8018790 <__errno>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2216      	movs	r2, #22
 80086b2:	601a      	str	r2, [r3, #0]
  return -1;
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <_exit>:

void _exit (int status)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80086c8:	f04f 31ff 	mov.w	r1, #4294967295
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ffe7 	bl	80086a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <_exit+0x12>

080086d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e00a      	b.n	80086fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80086e8:	f3af 8000 	nop.w
 80086ec:	4601      	mov	r1, r0
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	60ba      	str	r2, [r7, #8]
 80086f4:	b2ca      	uxtb	r2, r1
 80086f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3301      	adds	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	dbf0      	blt.n	80086e8 <_read+0x12>
  }

  return len;
 8008706:	687b      	ldr	r3, [r7, #4]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008738:	605a      	str	r2, [r3, #4]
  return 0;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <_isatty>:

int _isatty(int file)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008750:	2301      	movs	r3, #1
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800875e:	b480      	push	{r7}
 8008760:	b085      	sub	sp, #20
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008780:	4a14      	ldr	r2, [pc, #80]	@ (80087d4 <_sbrk+0x5c>)
 8008782:	4b15      	ldr	r3, [pc, #84]	@ (80087d8 <_sbrk+0x60>)
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <_sbrk+0x64>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008794:	4b11      	ldr	r3, [pc, #68]	@ (80087dc <_sbrk+0x64>)
 8008796:	4a12      	ldr	r2, [pc, #72]	@ (80087e0 <_sbrk+0x68>)
 8008798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800879a:	4b10      	ldr	r3, [pc, #64]	@ (80087dc <_sbrk+0x64>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d207      	bcs.n	80087b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80087a8:	f00f fff2 	bl	8018790 <__errno>
 80087ac:	4603      	mov	r3, r0
 80087ae:	220c      	movs	r2, #12
 80087b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80087b2:	f04f 33ff 	mov.w	r3, #4294967295
 80087b6:	e009      	b.n	80087cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80087b8:	4b08      	ldr	r3, [pc, #32]	@ (80087dc <_sbrk+0x64>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80087be:	4b07      	ldr	r3, [pc, #28]	@ (80087dc <_sbrk+0x64>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a05      	ldr	r2, [pc, #20]	@ (80087dc <_sbrk+0x64>)
 80087c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80087ca:	68fb      	ldr	r3, [r7, #12]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	24050000 	.word	0x24050000
 80087d8:	00000400 	.word	0x00000400
 80087dc:	24002120 	.word	0x24002120
 80087e0:	24002288 	.word	0x24002288

080087e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80087e8:	4b32      	ldr	r3, [pc, #200]	@ (80088b4 <SystemInit+0xd0>)
 80087ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ee:	4a31      	ldr	r2, [pc, #196]	@ (80088b4 <SystemInit+0xd0>)
 80087f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80087f8:	4b2f      	ldr	r3, [pc, #188]	@ (80088b8 <SystemInit+0xd4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 030f 	and.w	r3, r3, #15
 8008800:	2b06      	cmp	r3, #6
 8008802:	d807      	bhi.n	8008814 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008804:	4b2c      	ldr	r3, [pc, #176]	@ (80088b8 <SystemInit+0xd4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f023 030f 	bic.w	r3, r3, #15
 800880c:	4a2a      	ldr	r2, [pc, #168]	@ (80088b8 <SystemInit+0xd4>)
 800880e:	f043 0307 	orr.w	r3, r3, #7
 8008812:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008814:	4b29      	ldr	r3, [pc, #164]	@ (80088bc <SystemInit+0xd8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a28      	ldr	r2, [pc, #160]	@ (80088bc <SystemInit+0xd8>)
 800881a:	f043 0301 	orr.w	r3, r3, #1
 800881e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008820:	4b26      	ldr	r3, [pc, #152]	@ (80088bc <SystemInit+0xd8>)
 8008822:	2200      	movs	r2, #0
 8008824:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008826:	4b25      	ldr	r3, [pc, #148]	@ (80088bc <SystemInit+0xd8>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4924      	ldr	r1, [pc, #144]	@ (80088bc <SystemInit+0xd8>)
 800882c:	4b24      	ldr	r3, [pc, #144]	@ (80088c0 <SystemInit+0xdc>)
 800882e:	4013      	ands	r3, r2
 8008830:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008832:	4b21      	ldr	r3, [pc, #132]	@ (80088b8 <SystemInit+0xd4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d007      	beq.n	800884e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800883e:	4b1e      	ldr	r3, [pc, #120]	@ (80088b8 <SystemInit+0xd4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f023 030f 	bic.w	r3, r3, #15
 8008846:	4a1c      	ldr	r2, [pc, #112]	@ (80088b8 <SystemInit+0xd4>)
 8008848:	f043 0307 	orr.w	r3, r3, #7
 800884c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800884e:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <SystemInit+0xd8>)
 8008850:	2200      	movs	r2, #0
 8008852:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008854:	4b19      	ldr	r3, [pc, #100]	@ (80088bc <SystemInit+0xd8>)
 8008856:	2200      	movs	r2, #0
 8008858:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800885a:	4b18      	ldr	r3, [pc, #96]	@ (80088bc <SystemInit+0xd8>)
 800885c:	2200      	movs	r2, #0
 800885e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008860:	4b16      	ldr	r3, [pc, #88]	@ (80088bc <SystemInit+0xd8>)
 8008862:	4a18      	ldr	r2, [pc, #96]	@ (80088c4 <SystemInit+0xe0>)
 8008864:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008866:	4b15      	ldr	r3, [pc, #84]	@ (80088bc <SystemInit+0xd8>)
 8008868:	4a17      	ldr	r2, [pc, #92]	@ (80088c8 <SystemInit+0xe4>)
 800886a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800886c:	4b13      	ldr	r3, [pc, #76]	@ (80088bc <SystemInit+0xd8>)
 800886e:	4a17      	ldr	r2, [pc, #92]	@ (80088cc <SystemInit+0xe8>)
 8008870:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008872:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <SystemInit+0xd8>)
 8008874:	2200      	movs	r2, #0
 8008876:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008878:	4b10      	ldr	r3, [pc, #64]	@ (80088bc <SystemInit+0xd8>)
 800887a:	4a14      	ldr	r2, [pc, #80]	@ (80088cc <SystemInit+0xe8>)
 800887c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800887e:	4b0f      	ldr	r3, [pc, #60]	@ (80088bc <SystemInit+0xd8>)
 8008880:	2200      	movs	r2, #0
 8008882:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008884:	4b0d      	ldr	r3, [pc, #52]	@ (80088bc <SystemInit+0xd8>)
 8008886:	4a11      	ldr	r2, [pc, #68]	@ (80088cc <SystemInit+0xe8>)
 8008888:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800888a:	4b0c      	ldr	r3, [pc, #48]	@ (80088bc <SystemInit+0xd8>)
 800888c:	2200      	movs	r2, #0
 800888e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008890:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <SystemInit+0xd8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a09      	ldr	r2, [pc, #36]	@ (80088bc <SystemInit+0xd8>)
 8008896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800889a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <SystemInit+0xd8>)
 800889e:	2200      	movs	r2, #0
 80088a0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80088a2:	4b0b      	ldr	r3, [pc, #44]	@ (80088d0 <SystemInit+0xec>)
 80088a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80088a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80088aa:	bf00      	nop
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	e000ed00 	.word	0xe000ed00
 80088b8:	52002000 	.word	0x52002000
 80088bc:	58024400 	.word	0x58024400
 80088c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80088c4:	02020200 	.word	0x02020200
 80088c8:	01ff0000 	.word	0x01ff0000
 80088cc:	01010280 	.word	0x01010280
 80088d0:	52004000 	.word	0x52004000

080088d4 <Reset_Handler>:
 80088d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800890c <LoopFillZerobss+0xe>
 80088d8:	f7ff ff84 	bl	80087e4 <SystemInit>
 80088dc:	480c      	ldr	r0, [pc, #48]	@ (8008910 <LoopFillZerobss+0x12>)
 80088de:	490d      	ldr	r1, [pc, #52]	@ (8008914 <LoopFillZerobss+0x16>)
 80088e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008918 <LoopFillZerobss+0x1a>)
 80088e2:	2300      	movs	r3, #0
 80088e4:	e002      	b.n	80088ec <LoopCopyDataInit>

080088e6 <CopyDataInit>:
 80088e6:	58d4      	ldr	r4, [r2, r3]
 80088e8:	50c4      	str	r4, [r0, r3]
 80088ea:	3304      	adds	r3, #4

080088ec <LoopCopyDataInit>:
 80088ec:	18c4      	adds	r4, r0, r3
 80088ee:	428c      	cmp	r4, r1
 80088f0:	d3f9      	bcc.n	80088e6 <CopyDataInit>
 80088f2:	4a0a      	ldr	r2, [pc, #40]	@ (800891c <LoopFillZerobss+0x1e>)
 80088f4:	4c0a      	ldr	r4, [pc, #40]	@ (8008920 <LoopFillZerobss+0x22>)
 80088f6:	2300      	movs	r3, #0
 80088f8:	e001      	b.n	80088fe <LoopFillZerobss>

080088fa <FillZerobss>:
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	3204      	adds	r2, #4

080088fe <LoopFillZerobss>:
 80088fe:	42a2      	cmp	r2, r4
 8008900:	d3fb      	bcc.n	80088fa <FillZerobss>
 8008902:	f00f ff4b 	bl	801879c <__libc_init_array>
 8008906:	f7fd fac1 	bl	8005e8c <main>
 800890a:	4770      	bx	lr
 800890c:	24050000 	.word	0x24050000
 8008910:	24000000 	.word	0x24000000
 8008914:	24000324 	.word	0x24000324
 8008918:	0801cfb0 	.word	0x0801cfb0
 800891c:	24000324 	.word	0x24000324
 8008920:	24002288 	.word	0x24002288

08008924 <ADC3_IRQHandler>:
 8008924:	e7fe      	b.n	8008924 <ADC3_IRQHandler>
	...

08008928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800892e:	2003      	movs	r0, #3
 8008930:	f001 fcf4 	bl	800a31c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008934:	f004 ff9a 	bl	800d86c <HAL_RCC_GetSysClockFreq>
 8008938:	4602      	mov	r2, r0
 800893a:	4b15      	ldr	r3, [pc, #84]	@ (8008990 <HAL_Init+0x68>)
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	4913      	ldr	r1, [pc, #76]	@ (8008994 <HAL_Init+0x6c>)
 8008946:	5ccb      	ldrb	r3, [r1, r3]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
 8008950:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008952:	4b0f      	ldr	r3, [pc, #60]	@ (8008990 <HAL_Init+0x68>)
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	4a0e      	ldr	r2, [pc, #56]	@ (8008994 <HAL_Init+0x6c>)
 800895c:	5cd3      	ldrb	r3, [r2, r3]
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	4a0b      	ldr	r2, [pc, #44]	@ (8008998 <HAL_Init+0x70>)
 800896a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800896c:	4a0b      	ldr	r2, [pc, #44]	@ (800899c <HAL_Init+0x74>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008972:	200f      	movs	r0, #15
 8008974:	f000 f814 	bl	80089a0 <HAL_InitTick>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e002      	b.n	8008988 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008982:	f7fe fdb1 	bl	80074e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	58024400 	.word	0x58024400
 8008994:	0801cb14 	.word	0x0801cb14
 8008998:	24000150 	.word	0x24000150
 800899c:	2400014c 	.word	0x2400014c

080089a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80089a8:	4b15      	ldr	r3, [pc, #84]	@ (8008a00 <HAL_InitTick+0x60>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e021      	b.n	80089f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80089b4:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <HAL_InitTick+0x64>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <HAL_InitTick+0x60>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80089c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80089c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 fcd9 	bl	800a382 <HAL_SYSTICK_Config>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e00e      	b.n	80089f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b0f      	cmp	r3, #15
 80089de:	d80a      	bhi.n	80089f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089e0:	2200      	movs	r2, #0
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	f001 fca3 	bl	800a332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089ec:	4a06      	ldr	r2, [pc, #24]	@ (8008a08 <HAL_InitTick+0x68>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e000      	b.n	80089f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	24000158 	.word	0x24000158
 8008a04:	2400014c 	.word	0x2400014c
 8008a08:	24000154 	.word	0x24000154

08008a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008a10:	4b06      	ldr	r3, [pc, #24]	@ (8008a2c <HAL_IncTick+0x20>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	4b06      	ldr	r3, [pc, #24]	@ (8008a30 <HAL_IncTick+0x24>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	4a04      	ldr	r2, [pc, #16]	@ (8008a30 <HAL_IncTick+0x24>)
 8008a1e:	6013      	str	r3, [r2, #0]
}
 8008a20:	bf00      	nop
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	24000158 	.word	0x24000158
 8008a30:	24002124 	.word	0x24002124

08008a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  return uwTick;
 8008a38:	4b03      	ldr	r3, [pc, #12]	@ (8008a48 <HAL_GetTick+0x14>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	24002124 	.word	0x24002124

08008a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a54:	f7ff ffee 	bl	8008a34 <HAL_GetTick>
 8008a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d005      	beq.n	8008a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a66:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <HAL_Delay+0x44>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a72:	bf00      	nop
 8008a74:	f7ff ffde 	bl	8008a34 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d8f7      	bhi.n	8008a74 <HAL_Delay+0x28>
  {
  }
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	24000158 	.word	0x24000158

08008a94 <LL_ADC_SetCommonClock>:
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	609a      	str	r2, [r3, #8]
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <LL_ADC_SetCommonPathInternalCh>:
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	609a      	str	r2, [r3, #8]
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <LL_ADC_GetCommonPathInternalCh>:
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <LL_ADC_SetOffset>:
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3360      	adds	r3, #96	@ 0x60
 8008b0e:	461a      	mov	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4a10      	ldr	r2, [pc, #64]	@ (8008b5c <LL_ADC_SetOffset+0x60>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d10b      	bne.n	8008b38 <LL_ADC_SetOffset+0x3c>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	e00b      	b.n	8008b50 <LL_ADC_SetOffset+0x54>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	58026000 	.word	0x58026000

08008b60 <LL_ADC_GetOffsetChannel>:
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3360      	adds	r3, #96	@ 0x60
 8008b6e:	461a      	mov	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <LL_ADC_SetDataRightShift>:
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bac:	431a      	orrs	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	611a      	str	r2, [r3, #16]
 8008bb2:	bf00      	nop
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
	...

08008bc0 <LL_ADC_SetOffsetSignedSaturation>:
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4a0c      	ldr	r2, [pc, #48]	@ (8008c00 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00e      	beq.n	8008bf2 <LL_ADC_SetOffsetSignedSaturation+0x32>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3360      	adds	r3, #96	@ 0x60
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	bf00      	nop
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	58026000 	.word	0x58026000

08008c04 <LL_ADC_SetOffsetSaturation>:
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a0c      	ldr	r2, [pc, #48]	@ (8008c44 <LL_ADC_SetOffsetSaturation+0x40>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d10e      	bne.n	8008c36 <LL_ADC_SetOffsetSaturation+0x32>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3360      	adds	r3, #96	@ 0x60
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	58026000 	.word	0x58026000

08008c48 <LL_ADC_SetOffsetSign>:
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a0c      	ldr	r2, [pc, #48]	@ (8008c88 <LL_ADC_SetOffsetSign+0x40>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d10e      	bne.n	8008c7a <LL_ADC_SetOffsetSign+0x32>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3360      	adds	r3, #96	@ 0x60
 8008c60:	461a      	mov	r2, r3
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	431a      	orrs	r2, r3
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	58026000 	.word	0x58026000

08008c8c <LL_ADC_SetOffsetState>:
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3360      	adds	r3, #96	@ 0x60
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8008cdc <LL_ADC_SetOffsetState+0x50>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d108      	bne.n	8008cc0 <LL_ADC_SetOffsetState+0x34>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e007      	b.n	8008cd0 <LL_ADC_SetOffsetState+0x44>
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	bf00      	nop
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	58026000 	.word	0x58026000

08008ce0 <LL_ADC_REG_SetSequencerRanks>:
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3330      	adds	r3, #48	@ 0x30
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	0a1b      	lsrs	r3, r3, #8
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	f003 030c 	and.w	r3, r3, #12
 8008cfc:	4413      	add	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f003 031f 	and.w	r3, r3, #31
 8008d0a:	211f      	movs	r1, #31
 8008d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d10:	43db      	mvns	r3, r3
 8008d12:	401a      	ands	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	0e9b      	lsrs	r3, r3, #26
 8008d18:	f003 011f 	and.w	r1, r3, #31
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f003 031f 	and.w	r3, r3, #31
 8008d22:	fa01 f303 	lsl.w	r3, r1, r3
 8008d26:	431a      	orrs	r2, r3
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	bf00      	nop
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <LL_ADC_SetChannelSamplingTime>:
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	3314      	adds	r3, #20
 8008d48:	461a      	mov	r2, r3
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	0e5b      	lsrs	r3, r3, #25
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	4413      	add	r3, r2
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	0d1b      	lsrs	r3, r3, #20
 8008d60:	f003 031f 	and.w	r3, r3, #31
 8008d64:	2107      	movs	r1, #7
 8008d66:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	401a      	ands	r2, r3
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	0d1b      	lsrs	r3, r3, #20
 8008d72:	f003 031f 	and.w	r3, r3, #31
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
	...

08008d90 <LL_ADC_SetChannelSingleDiff>:
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8008e08 <LL_ADC_SetChannelSingleDiff+0x78>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d115      	bne.n	8008dd0 <LL_ADC_SetChannelSingleDiff+0x40>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008db0:	43db      	mvns	r3, r3
 8008db2:	401a      	ands	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f003 0318 	and.w	r3, r3, #24
 8008dba:	4914      	ldr	r1, [pc, #80]	@ (8008e0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008dbc:	40d9      	lsrs	r1, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	400b      	ands	r3, r1
 8008dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8008dce:	e014      	b.n	8008dfa <LL_ADC_SetChannelSingleDiff+0x6a>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ddc:	43db      	mvns	r3, r3
 8008dde:	401a      	ands	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f003 0318 	and.w	r3, r3, #24
 8008de6:	4909      	ldr	r1, [pc, #36]	@ (8008e0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008de8:	40d9      	lsrs	r1, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	400b      	ands	r3, r1
 8008dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008df2:	431a      	orrs	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	58026000 	.word	0x58026000
 8008e0c:	000fffff 	.word	0x000fffff

08008e10 <LL_ADC_DisableDeepPowerDown>:
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6093      	str	r3, [r2, #8]
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	5fffffc0 	.word	0x5fffffc0

08008e34 <LL_ADC_IsDeepPowerDownEnabled>:
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e48:	d101      	bne.n	8008e4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <LL_ADC_EnableInternalRegulator>:
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	4b05      	ldr	r3, [pc, #20]	@ (8008e80 <LL_ADC_EnableInternalRegulator+0x24>)
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	609a      	str	r2, [r3, #8]
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	6fffffc0 	.word	0x6fffffc0

08008e84 <LL_ADC_IsInternalRegulatorEnabled>:
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e98:	d101      	bne.n	8008e9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <LL_ADC_IsEnabled>:
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d101      	bne.n	8008ec4 <LL_ADC_IsEnabled+0x18>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e000      	b.n	8008ec6 <LL_ADC_IsEnabled+0x1a>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <LL_ADC_REG_IsConversionOngoing>:
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d101      	bne.n	8008eea <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008eea:	2300      	movs	r3, #0
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <LL_ADC_INJ_IsConversionOngoing>:
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0308 	and.w	r3, r3, #8
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d101      	bne.n	8008f10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008f10:	2300      	movs	r3, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <HAL_ADC_Init>:
 8008f20:	b590      	push	{r4, r7, lr}
 8008f22:	b089      	sub	sp, #36	@ 0x24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60bb      	str	r3, [r7, #8]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_ADC_Init+0x1a>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e1ee      	b.n	8009318 <HAL_ADC_Init+0x3f8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d109      	bne.n	8008f5c <HAL_ADC_Init+0x3c>
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7fe fae7 	bl	800751c <HAL_ADC_MspInit>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	665a      	str	r2, [r3, #100]	@ 0x64
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff ff67 	bl	8008e34 <LL_ADC_IsDeepPowerDownEnabled>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d004      	beq.n	8008f76 <HAL_ADC_Init+0x56>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff ff4d 	bl	8008e10 <LL_ADC_DisableDeepPowerDown>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff ff82 	bl	8008e84 <LL_ADC_IsInternalRegulatorEnabled>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d114      	bne.n	8008fb0 <HAL_ADC_Init+0x90>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff ff66 	bl	8008e5c <LL_ADC_EnableInternalRegulator>
 8008f90:	4b8e      	ldr	r3, [pc, #568]	@ (80091cc <HAL_ADC_Init+0x2ac>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	099b      	lsrs	r3, r3, #6
 8008f96:	4a8e      	ldr	r2, [pc, #568]	@ (80091d0 <HAL_ADC_Init+0x2b0>)
 8008f98:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9c:	099b      	lsrs	r3, r3, #6
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	e002      	b.n	8008faa <HAL_ADC_Init+0x8a>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	60bb      	str	r3, [r7, #8]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1f9      	bne.n	8008fa4 <HAL_ADC_Init+0x84>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff ff65 	bl	8008e84 <LL_ADC_IsInternalRegulatorEnabled>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10d      	bne.n	8008fdc <HAL_ADC_Init+0xbc>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fc4:	f043 0210 	orr.w	r2, r3, #16
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	661a      	str	r2, [r3, #96]	@ 0x60
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fd0:	f043 0201 	orr.w	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	665a      	str	r2, [r3, #100]	@ 0x64
 8008fd8:	2301      	movs	r3, #1
 8008fda:	77fb      	strb	r3, [r7, #31]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff ff76 	bl	8008ed2 <LL_ADC_REG_IsConversionOngoing>
 8008fe6:	6178      	str	r0, [r7, #20]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fec:	f003 0310 	and.w	r3, r3, #16
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f040 8188 	bne.w	8009306 <HAL_ADC_Init+0x3e6>
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f040 8184 	bne.w	8009306 <HAL_ADC_Init+0x3e6>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009002:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009006:	f043 0202 	orr.w	r2, r3, #2
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	661a      	str	r2, [r3, #96]	@ 0x60
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff ff4a 	bl	8008eac <LL_ADC_IsEnabled>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d136      	bne.n	800908c <HAL_ADC_Init+0x16c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a6c      	ldr	r2, [pc, #432]	@ (80091d4 <HAL_ADC_Init+0x2b4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d004      	beq.n	8009032 <HAL_ADC_Init+0x112>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a6a      	ldr	r2, [pc, #424]	@ (80091d8 <HAL_ADC_Init+0x2b8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d10e      	bne.n	8009050 <HAL_ADC_Init+0x130>
 8009032:	4868      	ldr	r0, [pc, #416]	@ (80091d4 <HAL_ADC_Init+0x2b4>)
 8009034:	f7ff ff3a 	bl	8008eac <LL_ADC_IsEnabled>
 8009038:	4604      	mov	r4, r0
 800903a:	4867      	ldr	r0, [pc, #412]	@ (80091d8 <HAL_ADC_Init+0x2b8>)
 800903c:	f7ff ff36 	bl	8008eac <LL_ADC_IsEnabled>
 8009040:	4603      	mov	r3, r0
 8009042:	4323      	orrs	r3, r4
 8009044:	2b00      	cmp	r3, #0
 8009046:	bf0c      	ite	eq
 8009048:	2301      	moveq	r3, #1
 800904a:	2300      	movne	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	e008      	b.n	8009062 <HAL_ADC_Init+0x142>
 8009050:	4862      	ldr	r0, [pc, #392]	@ (80091dc <HAL_ADC_Init+0x2bc>)
 8009052:	f7ff ff2b 	bl	8008eac <LL_ADC_IsEnabled>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	bf0c      	ite	eq
 800905c:	2301      	moveq	r3, #1
 800905e:	2300      	movne	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d012      	beq.n	800908c <HAL_ADC_Init+0x16c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a5a      	ldr	r2, [pc, #360]	@ (80091d4 <HAL_ADC_Init+0x2b4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d004      	beq.n	800907a <HAL_ADC_Init+0x15a>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a58      	ldr	r2, [pc, #352]	@ (80091d8 <HAL_ADC_Init+0x2b8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d101      	bne.n	800907e <HAL_ADC_Init+0x15e>
 800907a:	4a59      	ldr	r2, [pc, #356]	@ (80091e0 <HAL_ADC_Init+0x2c0>)
 800907c:	e000      	b.n	8009080 <HAL_ADC_Init+0x160>
 800907e:	4a59      	ldr	r2, [pc, #356]	@ (80091e4 <HAL_ADC_Init+0x2c4>)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7ff fd04 	bl	8008a94 <LL_ADC_SetCommonClock>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a52      	ldr	r2, [pc, #328]	@ (80091dc <HAL_ADC_Init+0x2bc>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d129      	bne.n	80090ea <HAL_ADC_Init+0x1ca>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7e5b      	ldrb	r3, [r3, #25]
 800909a:	035a      	lsls	r2, r3, #13
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d013      	beq.n	80090d8 <HAL_ADC_Init+0x1b8>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b0c      	cmp	r3, #12
 80090b6:	d00d      	beq.n	80090d4 <HAL_ADC_Init+0x1b4>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	2b1c      	cmp	r3, #28
 80090be:	d007      	beq.n	80090d0 <HAL_ADC_Init+0x1b0>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b18      	cmp	r3, #24
 80090c6:	d101      	bne.n	80090cc <HAL_ADC_Init+0x1ac>
 80090c8:	2318      	movs	r3, #24
 80090ca:	e006      	b.n	80090da <HAL_ADC_Init+0x1ba>
 80090cc:	2300      	movs	r3, #0
 80090ce:	e004      	b.n	80090da <HAL_ADC_Init+0x1ba>
 80090d0:	2310      	movs	r3, #16
 80090d2:	e002      	b.n	80090da <HAL_ADC_Init+0x1ba>
 80090d4:	2308      	movs	r3, #8
 80090d6:	e000      	b.n	80090da <HAL_ADC_Init+0x1ba>
 80090d8:	2300      	movs	r3, #0
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	4313      	orrs	r3, r2
 80090e6:	61bb      	str	r3, [r7, #24]
 80090e8:	e00e      	b.n	8009108 <HAL_ADC_Init+0x1e8>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7e5b      	ldrb	r3, [r3, #25]
 80090ee:	035a      	lsls	r2, r3, #13
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090f4:	431a      	orrs	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009102:	041b      	lsls	r3, r3, #16
 8009104:	4313      	orrs	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d106      	bne.n	8009120 <HAL_ADC_Init+0x200>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009116:	3b01      	subs	r3, #1
 8009118:	045b      	lsls	r3, r3, #17
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	4313      	orrs	r3, r2
 800911e:	61bb      	str	r3, [r7, #24]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009124:	2b00      	cmp	r3, #0
 8009126:	d009      	beq.n	800913c <HAL_ADC_Init+0x21c>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009134:	4313      	orrs	r3, r2
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	4313      	orrs	r3, r2
 800913a:	61bb      	str	r3, [r7, #24]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a26      	ldr	r2, [pc, #152]	@ (80091dc <HAL_ADC_Init+0x2bc>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d115      	bne.n	8009172 <HAL_ADC_Init+0x252>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	4b26      	ldr	r3, [pc, #152]	@ (80091e8 <HAL_ADC_Init+0x2c8>)
 800914e:	4013      	ands	r3, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	69b9      	ldr	r1, [r7, #24]
 8009156:	430b      	orrs	r3, r1
 8009158:	60d3      	str	r3, [r2, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	611a      	str	r2, [r3, #16]
 8009170:	e009      	b.n	8009186 <HAL_ADC_Init+0x266>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	4b1c      	ldr	r3, [pc, #112]	@ (80091ec <HAL_ADC_Init+0x2cc>)
 800917a:	4013      	ands	r3, r2
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6812      	ldr	r2, [r2, #0]
 8009180:	69b9      	ldr	r1, [r7, #24]
 8009182:	430b      	orrs	r3, r1
 8009184:	60d3      	str	r3, [r2, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fea1 	bl	8008ed2 <LL_ADC_REG_IsConversionOngoing>
 8009190:	6138      	str	r0, [r7, #16]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff feae 	bl	8008ef8 <LL_ADC_INJ_IsConversionOngoing>
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f040 808e 	bne.w	80092c2 <HAL_ADC_Init+0x3a2>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f040 808a 	bne.w	80092c2 <HAL_ADC_Init+0x3a2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a0a      	ldr	r2, [pc, #40]	@ (80091dc <HAL_ADC_Init+0x2bc>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d11b      	bne.n	80091f0 <HAL_ADC_Init+0x2d0>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7e1b      	ldrb	r3, [r3, #24]
 80091bc:	039a      	lsls	r2, r3, #14
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	4313      	orrs	r3, r2
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	e018      	b.n	80091fe <HAL_ADC_Init+0x2de>
 80091cc:	2400014c 	.word	0x2400014c
 80091d0:	053e2d63 	.word	0x053e2d63
 80091d4:	40022000 	.word	0x40022000
 80091d8:	40022100 	.word	0x40022100
 80091dc:	58026000 	.word	0x58026000
 80091e0:	40022300 	.word	0x40022300
 80091e4:	58026300 	.word	0x58026300
 80091e8:	fff04007 	.word	0xfff04007
 80091ec:	fff0c003 	.word	0xfff0c003
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7e1b      	ldrb	r3, [r3, #24]
 80091f4:	039a      	lsls	r2, r3, #14
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fa:	4313      	orrs	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	4b46      	ldr	r3, [pc, #280]	@ (8009320 <HAL_ADC_Init+0x400>)
 8009206:	4013      	ands	r3, r2
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	69b9      	ldr	r1, [r7, #24]
 800920e:	430b      	orrs	r3, r1
 8009210:	60d3      	str	r3, [r2, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009218:	2b01      	cmp	r3, #1
 800921a:	d137      	bne.n	800928c <HAL_ADC_Init+0x36c>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009220:	2b00      	cmp	r3, #0
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a3f      	ldr	r2, [pc, #252]	@ (8009324 <HAL_ADC_Init+0x404>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d116      	bne.n	800925a <HAL_ADC_Init+0x33a>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691a      	ldr	r2, [r3, #16]
 8009232:	4b3d      	ldr	r3, [pc, #244]	@ (8009328 <HAL_ADC_Init+0x408>)
 8009234:	4013      	ands	r3, r2
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800923e:	4311      	orrs	r1, r2
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009244:	4311      	orrs	r1, r2
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800924a:	430a      	orrs	r2, r1
 800924c:	431a      	orrs	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	611a      	str	r2, [r3, #16]
 8009258:	e020      	b.n	800929c <HAL_ADC_Init+0x37c>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	691a      	ldr	r2, [r3, #16]
 8009260:	4b32      	ldr	r3, [pc, #200]	@ (800932c <HAL_ADC_Init+0x40c>)
 8009262:	4013      	ands	r3, r2
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009268:	3a01      	subs	r2, #1
 800926a:	0411      	lsls	r1, r2, #16
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009270:	4311      	orrs	r1, r2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009276:	4311      	orrs	r1, r2
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800927c:	430a      	orrs	r2, r1
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0201 	orr.w	r2, r2, #1
 8009288:	611a      	str	r2, [r3, #16]
 800928a:	e007      	b.n	800929c <HAL_ADC_Init+0x37c>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0201 	bic.w	r2, r2, #1
 800929a:	611a      	str	r2, [r3, #16]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	611a      	str	r2, [r3, #16]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009324 <HAL_ADC_Init+0x404>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d002      	beq.n	80092c2 <HAL_ADC_Init+0x3a2>
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fd67 	bl	8009d90 <ADC_ConfigureBoostMode>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d10c      	bne.n	80092e4 <HAL_ADC_Init+0x3c4>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d0:	f023 010f 	bic.w	r1, r3, #15
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	1e5a      	subs	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80092e2:	e007      	b.n	80092f4 <HAL_ADC_Init+0x3d4>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 020f 	bic.w	r2, r2, #15
 80092f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f8:	f023 0303 	bic.w	r3, r3, #3
 80092fc:	f043 0201 	orr.w	r2, r3, #1
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	661a      	str	r2, [r3, #96]	@ 0x60
 8009304:	e007      	b.n	8009316 <HAL_ADC_Init+0x3f6>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800930a:	f043 0210 	orr.w	r2, r3, #16
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	661a      	str	r2, [r3, #96]	@ 0x60
 8009312:	2301      	movs	r3, #1
 8009314:	77fb      	strb	r3, [r7, #31]
 8009316:	7ffb      	ldrb	r3, [r7, #31]
 8009318:	4618      	mov	r0, r3
 800931a:	3724      	adds	r7, #36	@ 0x24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd90      	pop	{r4, r7, pc}
 8009320:	ffffbffc 	.word	0xffffbffc
 8009324:	58026000 	.word	0x58026000
 8009328:	fc00f81f 	.word	0xfc00f81f
 800932c:	fc00f81e 	.word	0xfc00f81e

08009330 <HAL_ADC_ConfigChannel>:
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b0b9      	sub	sp, #228	@ 0xe4
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	2300      	movs	r3, #0
 800933c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009340:	2300      	movs	r3, #0
 8009342:	60bb      	str	r3, [r7, #8]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800934a:	2b01      	cmp	r3, #1
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	4aab      	ldr	r2, [pc, #684]	@ (8009600 <HAL_ADC_ConfigChannel+0x2d0>)
 8009352:	4293      	cmp	r3, r2
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800935a:	2b01      	cmp	r3, #1
 800935c:	d102      	bne.n	8009364 <HAL_ADC_ConfigChannel+0x34>
 800935e:	2302      	movs	r3, #2
 8009360:	f000 bcfe 	b.w	8009d60 <HAL_ADC_ConfigChannel+0xa30>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff fdae 	bl	8008ed2 <LL_ADC_REG_IsConversionOngoing>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	f040 84e2 	bne.w	8009d42 <HAL_ADC_ConfigChannel+0xa12>
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	db38      	blt.n	80093f8 <HAL_ADC_ConfigChannel+0xc8>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a9e      	ldr	r2, [pc, #632]	@ (8009604 <HAL_ADC_ConfigChannel+0x2d4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d033      	beq.n	80093f8 <HAL_ADC_ConfigChannel+0xc8>
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009398:	2b00      	cmp	r3, #0
 800939a:	d108      	bne.n	80093ae <HAL_ADC_ConfigChannel+0x7e>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	0e9b      	lsrs	r3, r3, #26
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	2201      	movs	r2, #1
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	e01d      	b.n	80093ea <HAL_ADC_ConfigChannel+0xba>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80093ba:	fa93 f3a3 	rbit	r3, r3
 80093be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_ADC_ConfigChannel+0xa6>
 80093d2:	2320      	movs	r3, #32
 80093d4:	e004      	b.n	80093e0 <HAL_ADC_ConfigChannel+0xb0>
 80093d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093da:	fab3 f383 	clz	r3, r3
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 031f 	and.w	r3, r3, #31
 80093e4:	2201      	movs	r2, #1
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	69d1      	ldr	r1, [r2, #28]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	430b      	orrs	r3, r1
 80093f6:	61d3      	str	r3, [r2, #28]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	6859      	ldr	r1, [r3, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	f7ff fc6b 	bl	8008ce0 <LL_ADC_REG_SetSequencerRanks>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff fd5f 	bl	8008ed2 <LL_ADC_REG_IsConversionOngoing>
 8009414:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff fd6b 	bl	8008ef8 <LL_ADC_INJ_IsConversionOngoing>
 8009422:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 8009426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800942a:	2b00      	cmp	r3, #0
 800942c:	f040 8270 	bne.w	8009910 <HAL_ADC_ConfigChannel+0x5e0>
 8009430:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009434:	2b00      	cmp	r3, #0
 8009436:	f040 826b 	bne.w	8009910 <HAL_ADC_ConfigChannel+0x5e0>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	6819      	ldr	r1, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	461a      	mov	r2, r3
 8009448:	f7ff fc76 	bl	8008d38 <LL_ADC_SetChannelSamplingTime>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a6c      	ldr	r2, [pc, #432]	@ (8009604 <HAL_ADC_ConfigChannel+0x2d4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d10d      	bne.n	8009472 <HAL_ADC_ConfigChannel+0x142>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	695a      	ldr	r2, [r3, #20]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	08db      	lsrs	r3, r3, #3
 8009462:	f003 0303 	and.w	r3, r3, #3
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009470:	e032      	b.n	80094d8 <HAL_ADC_ConfigChannel+0x1a8>
 8009472:	4b65      	ldr	r3, [pc, #404]	@ (8009608 <HAL_ADC_ConfigChannel+0x2d8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800947a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800947e:	d10b      	bne.n	8009498 <HAL_ADC_ConfigChannel+0x168>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	695a      	ldr	r2, [r3, #20]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	089b      	lsrs	r3, r3, #2
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	fa02 f303 	lsl.w	r3, r2, r3
 8009496:	e01d      	b.n	80094d4 <HAL_ADC_ConfigChannel+0x1a4>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f003 0310 	and.w	r3, r3, #16
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10b      	bne.n	80094be <HAL_ADC_ConfigChannel+0x18e>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	695a      	ldr	r2, [r3, #20]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	089b      	lsrs	r3, r3, #2
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	fa02 f303 	lsl.w	r3, r2, r3
 80094bc:	e00a      	b.n	80094d4 <HAL_ADC_ConfigChannel+0x1a4>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	695a      	ldr	r2, [r3, #20]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	089b      	lsrs	r3, r3, #2
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d048      	beq.n	8009572 <HAL_ADC_ConfigChannel+0x242>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	6919      	ldr	r1, [r3, #16]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094f0:	f7ff fb04 	bl	8008afc <LL_ADC_SetOffset>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a42      	ldr	r2, [pc, #264]	@ (8009604 <HAL_ADC_ConfigChannel+0x2d4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d119      	bne.n	8009532 <HAL_ADC_ConfigChannel+0x202>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	6919      	ldr	r1, [r3, #16]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	461a      	mov	r2, r3
 800950c:	f7ff fb9c 	bl	8008c48 <LL_ADC_SetOffsetSign>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	6919      	ldr	r1, [r3, #16]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d102      	bne.n	8009528 <HAL_ADC_ConfigChannel+0x1f8>
 8009522:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009526:	e000      	b.n	800952a <HAL_ADC_ConfigChannel+0x1fa>
 8009528:	2300      	movs	r3, #0
 800952a:	461a      	mov	r2, r3
 800952c:	f7ff fb6a 	bl	8008c04 <LL_ADC_SetOffsetSaturation>
 8009530:	e1ee      	b.n	8009910 <HAL_ADC_ConfigChannel+0x5e0>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6919      	ldr	r1, [r3, #16]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009540:	2b01      	cmp	r3, #1
 8009542:	d102      	bne.n	800954a <HAL_ADC_ConfigChannel+0x21a>
 8009544:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009548:	e000      	b.n	800954c <HAL_ADC_ConfigChannel+0x21c>
 800954a:	2300      	movs	r3, #0
 800954c:	461a      	mov	r2, r3
 800954e:	f7ff fb37 	bl	8008bc0 <LL_ADC_SetOffsetSignedSaturation>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	6919      	ldr	r1, [r3, #16]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	7e1b      	ldrb	r3, [r3, #24]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d102      	bne.n	8009568 <HAL_ADC_ConfigChannel+0x238>
 8009562:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009566:	e000      	b.n	800956a <HAL_ADC_ConfigChannel+0x23a>
 8009568:	2300      	movs	r3, #0
 800956a:	461a      	mov	r2, r3
 800956c:	f7ff fb0e 	bl	8008b8c <LL_ADC_SetDataRightShift>
 8009570:	e1ce      	b.n	8009910 <HAL_ADC_ConfigChannel+0x5e0>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a23      	ldr	r2, [pc, #140]	@ (8009604 <HAL_ADC_ConfigChannel+0x2d4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	f040 8181 	bne.w	8009880 <HAL_ADC_ConfigChannel+0x550>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2100      	movs	r1, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff faeb 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 800958a:	4603      	mov	r3, r0
 800958c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <HAL_ADC_ConfigChannel+0x27a>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2100      	movs	r1, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff fae0 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 80095a0:	4603      	mov	r3, r0
 80095a2:	0e9b      	lsrs	r3, r3, #26
 80095a4:	f003 021f 	and.w	r2, r3, #31
 80095a8:	e01e      	b.n	80095e8 <HAL_ADC_ConfigChannel+0x2b8>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2100      	movs	r1, #0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff fad5 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095c0:	fa93 f3a3 	rbit	r3, r3
 80095c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80095d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <HAL_ADC_ConfigChannel+0x2ac>
 80095d8:	2320      	movs	r3, #32
 80095da:	e004      	b.n	80095e6 <HAL_ADC_ConfigChannel+0x2b6>
 80095dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80095e0:	fab3 f383 	clz	r3, r3
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	461a      	mov	r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10b      	bne.n	800960c <HAL_ADC_ConfigChannel+0x2dc>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	0e9b      	lsrs	r3, r3, #26
 80095fa:	f003 031f 	and.w	r3, r3, #31
 80095fe:	e01e      	b.n	800963e <HAL_ADC_ConfigChannel+0x30e>
 8009600:	47ff0000 	.word	0x47ff0000
 8009604:	58026000 	.word	0x58026000
 8009608:	5c001000 	.word	0x5c001000
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009618:	fa93 f3a3 	rbit	r3, r3
 800961c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <HAL_ADC_ConfigChannel+0x304>
 8009630:	2320      	movs	r3, #32
 8009632:	e004      	b.n	800963e <HAL_ADC_ConfigChannel+0x30e>
 8009634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009638:	fab3 f383 	clz	r3, r3
 800963c:	b2db      	uxtb	r3, r3
 800963e:	429a      	cmp	r2, r3
 8009640:	d106      	bne.n	8009650 <HAL_ADC_ConfigChannel+0x320>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2200      	movs	r2, #0
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff fb1e 	bl	8008c8c <LL_ADC_SetOffsetState>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2101      	movs	r1, #1
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fa82 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 800965c:	4603      	mov	r3, r0
 800965e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10a      	bne.n	800967c <HAL_ADC_ConfigChannel+0x34c>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2101      	movs	r1, #1
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff fa77 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 8009672:	4603      	mov	r3, r0
 8009674:	0e9b      	lsrs	r3, r3, #26
 8009676:	f003 021f 	and.w	r2, r3, #31
 800967a:	e01e      	b.n	80096ba <HAL_ADC_ConfigChannel+0x38a>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2101      	movs	r1, #1
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fa6c 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 8009688:	4603      	mov	r3, r0
 800968a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800968e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009692:	fa93 f3a3 	rbit	r3, r3
 8009696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800969a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800969e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_ADC_ConfigChannel+0x37e>
 80096aa:	2320      	movs	r3, #32
 80096ac:	e004      	b.n	80096b8 <HAL_ADC_ConfigChannel+0x388>
 80096ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80096b2:	fab3 f383 	clz	r3, r3
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d105      	bne.n	80096d2 <HAL_ADC_ConfigChannel+0x3a2>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	0e9b      	lsrs	r3, r3, #26
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	e018      	b.n	8009704 <HAL_ADC_ConfigChannel+0x3d4>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096de:	fa93 f3a3 	rbit	r3, r3
 80096e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_ADC_ConfigChannel+0x3ca>
 80096f6:	2320      	movs	r3, #32
 80096f8:	e004      	b.n	8009704 <HAL_ADC_ConfigChannel+0x3d4>
 80096fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096fe:	fab3 f383 	clz	r3, r3
 8009702:	b2db      	uxtb	r3, r3
 8009704:	429a      	cmp	r2, r3
 8009706:	d106      	bne.n	8009716 <HAL_ADC_ConfigChannel+0x3e6>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2200      	movs	r2, #0
 800970e:	2101      	movs	r1, #1
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fabb 	bl	8008c8c <LL_ADC_SetOffsetState>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2102      	movs	r1, #2
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fa1f 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 8009722:	4603      	mov	r3, r0
 8009724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <HAL_ADC_ConfigChannel+0x412>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2102      	movs	r1, #2
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fa14 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 8009738:	4603      	mov	r3, r0
 800973a:	0e9b      	lsrs	r3, r3, #26
 800973c:	f003 021f 	and.w	r2, r3, #31
 8009740:	e01e      	b.n	8009780 <HAL_ADC_ConfigChannel+0x450>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2102      	movs	r1, #2
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fa09 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 800974e:	4603      	mov	r3, r0
 8009750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009758:	fa93 f3a3 	rbit	r3, r3
 800975c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009764:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <HAL_ADC_ConfigChannel+0x444>
 8009770:	2320      	movs	r3, #32
 8009772:	e004      	b.n	800977e <HAL_ADC_ConfigChannel+0x44e>
 8009774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009778:	fab3 f383 	clz	r3, r3
 800977c:	b2db      	uxtb	r3, r3
 800977e:	461a      	mov	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009788:	2b00      	cmp	r3, #0
 800978a:	d105      	bne.n	8009798 <HAL_ADC_ConfigChannel+0x468>
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	0e9b      	lsrs	r3, r3, #26
 8009792:	f003 031f 	and.w	r3, r3, #31
 8009796:	e014      	b.n	80097c2 <HAL_ADC_ConfigChannel+0x492>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800979e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80097a0:	fa93 f3a3 	rbit	r3, r3
 80097a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <HAL_ADC_ConfigChannel+0x488>
 80097b4:	2320      	movs	r3, #32
 80097b6:	e004      	b.n	80097c2 <HAL_ADC_ConfigChannel+0x492>
 80097b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097bc:	fab3 f383 	clz	r3, r3
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d106      	bne.n	80097d4 <HAL_ADC_ConfigChannel+0x4a4>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2200      	movs	r2, #0
 80097cc:	2102      	movs	r1, #2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff fa5c 	bl	8008c8c <LL_ADC_SetOffsetState>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2103      	movs	r1, #3
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff f9c0 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10a      	bne.n	8009800 <HAL_ADC_ConfigChannel+0x4d0>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2103      	movs	r1, #3
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff f9b5 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 80097f6:	4603      	mov	r3, r0
 80097f8:	0e9b      	lsrs	r3, r3, #26
 80097fa:	f003 021f 	and.w	r2, r3, #31
 80097fe:	e017      	b.n	8009830 <HAL_ADC_ConfigChannel+0x500>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2103      	movs	r1, #3
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff f9aa 	bl	8008b60 <LL_ADC_GetOffsetChannel>
 800980c:	4603      	mov	r3, r0
 800980e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009812:	fa93 f3a3 	rbit	r3, r3
 8009816:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800981a:	677b      	str	r3, [r7, #116]	@ 0x74
 800981c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_ADC_ConfigChannel+0x4f6>
 8009822:	2320      	movs	r3, #32
 8009824:	e003      	b.n	800982e <HAL_ADC_ConfigChannel+0x4fe>
 8009826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009828:	fab3 f383 	clz	r3, r3
 800982c:	b2db      	uxtb	r3, r3
 800982e:	461a      	mov	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <HAL_ADC_ConfigChannel+0x518>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	0e9b      	lsrs	r3, r3, #26
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	e011      	b.n	800986c <HAL_ADC_ConfigChannel+0x53c>
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	667b      	str	r3, [r7, #100]	@ 0x64
 800984e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009850:	fa93 f3a3 	rbit	r3, r3
 8009854:	663b      	str	r3, [r7, #96]	@ 0x60
 8009856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800985a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <HAL_ADC_ConfigChannel+0x534>
 8009860:	2320      	movs	r3, #32
 8009862:	e003      	b.n	800986c <HAL_ADC_ConfigChannel+0x53c>
 8009864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009866:	fab3 f383 	clz	r3, r3
 800986a:	b2db      	uxtb	r3, r3
 800986c:	429a      	cmp	r2, r3
 800986e:	d14f      	bne.n	8009910 <HAL_ADC_ConfigChannel+0x5e0>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2200      	movs	r2, #0
 8009876:	2103      	movs	r1, #3
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fa07 	bl	8008c8c <LL_ADC_SetOffsetState>
 800987e:	e047      	b.n	8009910 <HAL_ADC_ConfigChannel+0x5e0>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	069b      	lsls	r3, r3, #26
 8009890:	429a      	cmp	r2, r3
 8009892:	d107      	bne.n	80098a4 <HAL_ADC_ConfigChannel+0x574>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80098a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	069b      	lsls	r3, r3, #26
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d107      	bne.n	80098c8 <HAL_ADC_ConfigChannel+0x598>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80098c6:	665a      	str	r2, [r3, #100]	@ 0x64
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	069b      	lsls	r3, r3, #26
 80098d8:	429a      	cmp	r2, r3
 80098da:	d107      	bne.n	80098ec <HAL_ADC_ConfigChannel+0x5bc>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80098ea:	669a      	str	r2, [r3, #104]	@ 0x68
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	069b      	lsls	r3, r3, #26
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d107      	bne.n	8009910 <HAL_ADC_ConfigChannel+0x5e0>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800990e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff fac9 	bl	8008eac <LL_ADC_IsEnabled>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	f040 8219 	bne.w	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6819      	ldr	r1, [r3, #0]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	461a      	mov	r2, r3
 8009930:	f7ff fa2e 	bl	8008d90 <LL_ADC_SetChannelSingleDiff>
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	4aa1      	ldr	r2, [pc, #644]	@ (8009bc0 <HAL_ADC_ConfigChannel+0x890>)
 800993a:	4293      	cmp	r3, r2
 800993c:	f040 812e 	bne.w	8009b9c <HAL_ADC_ConfigChannel+0x86c>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6818      	ldr	r0, [r3, #0]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10b      	bne.n	8009968 <HAL_ADC_ConfigChannel+0x638>
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	0e9b      	lsrs	r3, r3, #26
 8009956:	3301      	adds	r3, #1
 8009958:	f003 031f 	and.w	r3, r3, #31
 800995c:	2b09      	cmp	r3, #9
 800995e:	bf94      	ite	ls
 8009960:	2301      	movls	r3, #1
 8009962:	2300      	movhi	r3, #0
 8009964:	b2db      	uxtb	r3, r3
 8009966:	e019      	b.n	800999c <HAL_ADC_ConfigChannel+0x66c>
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800996e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009970:	fa93 f3a3 	rbit	r3, r3
 8009974:	657b      	str	r3, [r7, #84]	@ 0x54
 8009976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800997a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_ADC_ConfigChannel+0x654>
 8009980:	2320      	movs	r3, #32
 8009982:	e003      	b.n	800998c <HAL_ADC_ConfigChannel+0x65c>
 8009984:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009986:	fab3 f383 	clz	r3, r3
 800998a:	b2db      	uxtb	r3, r3
 800998c:	3301      	adds	r3, #1
 800998e:	f003 031f 	and.w	r3, r3, #31
 8009992:	2b09      	cmp	r3, #9
 8009994:	bf94      	ite	ls
 8009996:	2301      	movls	r3, #1
 8009998:	2300      	movhi	r3, #0
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	d079      	beq.n	8009a94 <HAL_ADC_ConfigChannel+0x764>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d107      	bne.n	80099bc <HAL_ADC_ConfigChannel+0x68c>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	0e9b      	lsrs	r3, r3, #26
 80099b2:	3301      	adds	r3, #1
 80099b4:	069b      	lsls	r3, r3, #26
 80099b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80099ba:	e015      	b.n	80099e8 <HAL_ADC_ConfigChannel+0x6b8>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099c4:	fa93 f3a3 	rbit	r3, r3
 80099c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80099ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <HAL_ADC_ConfigChannel+0x6a8>
 80099d4:	2320      	movs	r3, #32
 80099d6:	e003      	b.n	80099e0 <HAL_ADC_ConfigChannel+0x6b0>
 80099d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099da:	fab3 f383 	clz	r3, r3
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	3301      	adds	r3, #1
 80099e2:	069b      	lsls	r3, r3, #26
 80099e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <HAL_ADC_ConfigChannel+0x6d8>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	0e9b      	lsrs	r3, r3, #26
 80099fa:	3301      	adds	r3, #1
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	2101      	movs	r1, #1
 8009a02:	fa01 f303 	lsl.w	r3, r1, r3
 8009a06:	e017      	b.n	8009a38 <HAL_ADC_ConfigChannel+0x708>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a10:	fa93 f3a3 	rbit	r3, r3
 8009a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <HAL_ADC_ConfigChannel+0x6f4>
 8009a20:	2320      	movs	r3, #32
 8009a22:	e003      	b.n	8009a2c <HAL_ADC_ConfigChannel+0x6fc>
 8009a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a26:	fab3 f383 	clz	r3, r3
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	f003 031f 	and.w	r3, r3, #31
 8009a32:	2101      	movs	r1, #1
 8009a34:	fa01 f303 	lsl.w	r3, r1, r3
 8009a38:	ea42 0103 	orr.w	r1, r2, r3
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <HAL_ADC_ConfigChannel+0x72e>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	0e9b      	lsrs	r3, r3, #26
 8009a4e:	3301      	adds	r3, #1
 8009a50:	f003 021f 	and.w	r2, r3, #31
 8009a54:	4613      	mov	r3, r2
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	4413      	add	r3, r2
 8009a5a:	051b      	lsls	r3, r3, #20
 8009a5c:	e018      	b.n	8009a90 <HAL_ADC_ConfigChannel+0x760>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a66:	fa93 f3a3 	rbit	r3, r3
 8009a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_ADC_ConfigChannel+0x74a>
 8009a76:	2320      	movs	r3, #32
 8009a78:	e003      	b.n	8009a82 <HAL_ADC_ConfigChannel+0x752>
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7c:	fab3 f383 	clz	r3, r3
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	3301      	adds	r3, #1
 8009a84:	f003 021f 	and.w	r2, r3, #31
 8009a88:	4613      	mov	r3, r2
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	4413      	add	r3, r2
 8009a8e:	051b      	lsls	r3, r3, #20
 8009a90:	430b      	orrs	r3, r1
 8009a92:	e07e      	b.n	8009b92 <HAL_ADC_ConfigChannel+0x862>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d107      	bne.n	8009ab0 <HAL_ADC_ConfigChannel+0x780>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	0e9b      	lsrs	r3, r3, #26
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	069b      	lsls	r3, r3, #26
 8009aaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009aae:	e015      	b.n	8009adc <HAL_ADC_ConfigChannel+0x7ac>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	fa93 f3a3 	rbit	r3, r3
 8009abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_ADC_ConfigChannel+0x79c>
 8009ac8:	2320      	movs	r3, #32
 8009aca:	e003      	b.n	8009ad4 <HAL_ADC_ConfigChannel+0x7a4>
 8009acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ace:	fab3 f383 	clz	r3, r3
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	069b      	lsls	r3, r3, #26
 8009ad8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <HAL_ADC_ConfigChannel+0x7cc>
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	0e9b      	lsrs	r3, r3, #26
 8009aee:	3301      	adds	r3, #1
 8009af0:	f003 031f 	and.w	r3, r3, #31
 8009af4:	2101      	movs	r1, #1
 8009af6:	fa01 f303 	lsl.w	r3, r1, r3
 8009afa:	e017      	b.n	8009b2c <HAL_ADC_ConfigChannel+0x7fc>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	61fb      	str	r3, [r7, #28]
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	fa93 f3a3 	rbit	r3, r3
 8009b08:	61bb      	str	r3, [r7, #24]
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	623b      	str	r3, [r7, #32]
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <HAL_ADC_ConfigChannel+0x7e8>
 8009b14:	2320      	movs	r3, #32
 8009b16:	e003      	b.n	8009b20 <HAL_ADC_ConfigChannel+0x7f0>
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	fab3 f383 	clz	r3, r3
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	3301      	adds	r3, #1
 8009b22:	f003 031f 	and.w	r3, r3, #31
 8009b26:	2101      	movs	r1, #1
 8009b28:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2c:	ea42 0103 	orr.w	r1, r2, r3
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10d      	bne.n	8009b58 <HAL_ADC_ConfigChannel+0x828>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	0e9b      	lsrs	r3, r3, #26
 8009b42:	3301      	adds	r3, #1
 8009b44:	f003 021f 	and.w	r2, r3, #31
 8009b48:	4613      	mov	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	4413      	add	r3, r2
 8009b4e:	3b1e      	subs	r3, #30
 8009b50:	051b      	lsls	r3, r3, #20
 8009b52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009b56:	e01b      	b.n	8009b90 <HAL_ADC_ConfigChannel+0x860>
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	613b      	str	r3, [r7, #16]
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	fa93 f3a3 	rbit	r3, r3
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	617b      	str	r3, [r7, #20]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <HAL_ADC_ConfigChannel+0x844>
 8009b70:	2320      	movs	r3, #32
 8009b72:	e003      	b.n	8009b7c <HAL_ADC_ConfigChannel+0x84c>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	fab3 f383 	clz	r3, r3
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	f003 021f 	and.w	r2, r3, #31
 8009b82:	4613      	mov	r3, r2
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	4413      	add	r3, r2
 8009b88:	3b1e      	subs	r3, #30
 8009b8a:	051b      	lsls	r3, r3, #20
 8009b8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009b90:	430b      	orrs	r3, r1
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	6892      	ldr	r2, [r2, #8]
 8009b96:	4619      	mov	r1, r3
 8009b98:	f7ff f8ce 	bl	8008d38 <LL_ADC_SetChannelSamplingTime>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f280 80d7 	bge.w	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a06      	ldr	r2, [pc, #24]	@ (8009bc4 <HAL_ADC_ConfigChannel+0x894>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d004      	beq.n	8009bba <HAL_ADC_ConfigChannel+0x88a>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a04      	ldr	r2, [pc, #16]	@ (8009bc8 <HAL_ADC_ConfigChannel+0x898>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d10a      	bne.n	8009bd0 <HAL_ADC_ConfigChannel+0x8a0>
 8009bba:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <HAL_ADC_ConfigChannel+0x89c>)
 8009bbc:	e009      	b.n	8009bd2 <HAL_ADC_ConfigChannel+0x8a2>
 8009bbe:	bf00      	nop
 8009bc0:	47ff0000 	.word	0x47ff0000
 8009bc4:	40022000 	.word	0x40022000
 8009bc8:	40022100 	.word	0x40022100
 8009bcc:	40022300 	.word	0x40022300
 8009bd0:	4b65      	ldr	r3, [pc, #404]	@ (8009d68 <HAL_ADC_ConfigChannel+0xa38>)
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe ff84 	bl	8008ae0 <LL_ADC_GetCommonPathInternalCh>
 8009bd8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a62      	ldr	r2, [pc, #392]	@ (8009d6c <HAL_ADC_ConfigChannel+0xa3c>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d004      	beq.n	8009bf0 <HAL_ADC_ConfigChannel+0x8c0>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a61      	ldr	r2, [pc, #388]	@ (8009d70 <HAL_ADC_ConfigChannel+0xa40>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d10e      	bne.n	8009c0e <HAL_ADC_ConfigChannel+0x8de>
 8009bf0:	485e      	ldr	r0, [pc, #376]	@ (8009d6c <HAL_ADC_ConfigChannel+0xa3c>)
 8009bf2:	f7ff f95b 	bl	8008eac <LL_ADC_IsEnabled>
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	485d      	ldr	r0, [pc, #372]	@ (8009d70 <HAL_ADC_ConfigChannel+0xa40>)
 8009bfa:	f7ff f957 	bl	8008eac <LL_ADC_IsEnabled>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4323      	orrs	r3, r4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bf0c      	ite	eq
 8009c06:	2301      	moveq	r3, #1
 8009c08:	2300      	movne	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	e008      	b.n	8009c20 <HAL_ADC_ConfigChannel+0x8f0>
 8009c0e:	4859      	ldr	r0, [pc, #356]	@ (8009d74 <HAL_ADC_ConfigChannel+0xa44>)
 8009c10:	f7ff f94c 	bl	8008eac <LL_ADC_IsEnabled>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bf0c      	ite	eq
 8009c1a:	2301      	moveq	r3, #1
 8009c1c:	2300      	movne	r3, #0
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 8084 	beq.w	8009d2e <HAL_ADC_ConfigChannel+0x9fe>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a53      	ldr	r2, [pc, #332]	@ (8009d78 <HAL_ADC_ConfigChannel+0xa48>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d132      	bne.n	8009c96 <HAL_ADC_ConfigChannel+0x966>
 8009c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d12c      	bne.n	8009c96 <HAL_ADC_ConfigChannel+0x966>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a4c      	ldr	r2, [pc, #304]	@ (8009d74 <HAL_ADC_ConfigChannel+0xa44>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	f040 8086 	bne.w	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a47      	ldr	r2, [pc, #284]	@ (8009d6c <HAL_ADC_ConfigChannel+0xa3c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d004      	beq.n	8009c5c <HAL_ADC_ConfigChannel+0x92c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a46      	ldr	r2, [pc, #280]	@ (8009d70 <HAL_ADC_ConfigChannel+0xa40>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d101      	bne.n	8009c60 <HAL_ADC_ConfigChannel+0x930>
 8009c5c:	4a47      	ldr	r2, [pc, #284]	@ (8009d7c <HAL_ADC_ConfigChannel+0xa4c>)
 8009c5e:	e000      	b.n	8009c62 <HAL_ADC_ConfigChannel+0x932>
 8009c60:	4a41      	ldr	r2, [pc, #260]	@ (8009d68 <HAL_ADC_ConfigChannel+0xa38>)
 8009c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009c66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	f7fe ff24 	bl	8008aba <LL_ADC_SetCommonPathInternalCh>
 8009c72:	4b43      	ldr	r3, [pc, #268]	@ (8009d80 <HAL_ADC_ConfigChannel+0xa50>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a42      	ldr	r2, [pc, #264]	@ (8009d84 <HAL_ADC_ConfigChannel+0xa54>)
 8009c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7e:	099b      	lsrs	r3, r3, #6
 8009c80:	3301      	adds	r3, #1
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	60bb      	str	r3, [r7, #8]
 8009c86:	e002      	b.n	8009c8e <HAL_ADC_ConfigChannel+0x95e>
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	60bb      	str	r3, [r7, #8]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1f9      	bne.n	8009c88 <HAL_ADC_ConfigChannel+0x958>
 8009c94:	e05e      	b.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8009d88 <HAL_ADC_ConfigChannel+0xa58>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d120      	bne.n	8009ce2 <HAL_ADC_ConfigChannel+0x9b2>
 8009ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d11a      	bne.n	8009ce2 <HAL_ADC_ConfigChannel+0x9b2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a30      	ldr	r2, [pc, #192]	@ (8009d74 <HAL_ADC_ConfigChannel+0xa44>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d14e      	bne.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a2c      	ldr	r2, [pc, #176]	@ (8009d6c <HAL_ADC_ConfigChannel+0xa3c>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d004      	beq.n	8009cca <HAL_ADC_ConfigChannel+0x99a>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8009d70 <HAL_ADC_ConfigChannel+0xa40>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d101      	bne.n	8009cce <HAL_ADC_ConfigChannel+0x99e>
 8009cca:	4a2c      	ldr	r2, [pc, #176]	@ (8009d7c <HAL_ADC_ConfigChannel+0xa4c>)
 8009ccc:	e000      	b.n	8009cd0 <HAL_ADC_ConfigChannel+0x9a0>
 8009cce:	4a26      	ldr	r2, [pc, #152]	@ (8009d68 <HAL_ADC_ConfigChannel+0xa38>)
 8009cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009cd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f7fe feed 	bl	8008aba <LL_ADC_SetCommonPathInternalCh>
 8009ce0:	e038      	b.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a29      	ldr	r2, [pc, #164]	@ (8009d8c <HAL_ADC_ConfigChannel+0xa5c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d133      	bne.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d12d      	bne.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d74 <HAL_ADC_ConfigChannel+0xa44>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d128      	bne.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a19      	ldr	r2, [pc, #100]	@ (8009d6c <HAL_ADC_ConfigChannel+0xa3c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d004      	beq.n	8009d16 <HAL_ADC_ConfigChannel+0x9e6>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a17      	ldr	r2, [pc, #92]	@ (8009d70 <HAL_ADC_ConfigChannel+0xa40>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d101      	bne.n	8009d1a <HAL_ADC_ConfigChannel+0x9ea>
 8009d16:	4a19      	ldr	r2, [pc, #100]	@ (8009d7c <HAL_ADC_ConfigChannel+0xa4c>)
 8009d18:	e000      	b.n	8009d1c <HAL_ADC_ConfigChannel+0x9ec>
 8009d1a:	4a13      	ldr	r2, [pc, #76]	@ (8009d68 <HAL_ADC_ConfigChannel+0xa38>)
 8009d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009d24:	4619      	mov	r1, r3
 8009d26:	4610      	mov	r0, r2
 8009d28:	f7fe fec7 	bl	8008aba <LL_ADC_SetCommonPathInternalCh>
 8009d2c:	e012      	b.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d32:	f043 0220 	orr.w	r2, r3, #32
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	661a      	str	r2, [r3, #96]	@ 0x60
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009d40:	e008      	b.n	8009d54 <HAL_ADC_ConfigChannel+0xa24>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d46:	f043 0220 	orr.w	r2, r3, #32
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009d5c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8009d60:	4618      	mov	r0, r3
 8009d62:	37e4      	adds	r7, #228	@ 0xe4
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd90      	pop	{r4, r7, pc}
 8009d68:	58026300 	.word	0x58026300
 8009d6c:	40022000 	.word	0x40022000
 8009d70:	40022100 	.word	0x40022100
 8009d74:	58026000 	.word	0x58026000
 8009d78:	c7520000 	.word	0xc7520000
 8009d7c:	40022300 	.word	0x40022300
 8009d80:	2400014c 	.word	0x2400014c
 8009d84:	053e2d63 	.word	0x053e2d63
 8009d88:	c3210000 	.word	0xc3210000
 8009d8c:	cb840000 	.word	0xcb840000

08009d90 <ADC_ConfigureBoostMode>:
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a6c      	ldr	r2, [pc, #432]	@ (8009f50 <ADC_ConfigureBoostMode+0x1c0>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d004      	beq.n	8009dac <ADC_ConfigureBoostMode+0x1c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a6b      	ldr	r2, [pc, #428]	@ (8009f54 <ADC_ConfigureBoostMode+0x1c4>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d109      	bne.n	8009dc0 <ADC_ConfigureBoostMode+0x30>
 8009dac:	4b6a      	ldr	r3, [pc, #424]	@ (8009f58 <ADC_ConfigureBoostMode+0x1c8>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bf14      	ite	ne
 8009db8:	2301      	movne	r3, #1
 8009dba:	2300      	moveq	r3, #0
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	e008      	b.n	8009dd2 <ADC_ConfigureBoostMode+0x42>
 8009dc0:	4b66      	ldr	r3, [pc, #408]	@ (8009f5c <ADC_ConfigureBoostMode+0x1cc>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bf14      	ite	ne
 8009dcc:	2301      	movne	r3, #1
 8009dce:	2300      	moveq	r3, #0
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01c      	beq.n	8009e10 <ADC_ConfigureBoostMode+0x80>
 8009dd6:	f003 fec3 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009de4:	d010      	beq.n	8009e08 <ADC_ConfigureBoostMode+0x78>
 8009de6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009dea:	d873      	bhi.n	8009ed4 <ADC_ConfigureBoostMode+0x144>
 8009dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009df0:	d002      	beq.n	8009df8 <ADC_ConfigureBoostMode+0x68>
 8009df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009df6:	d16d      	bne.n	8009ed4 <ADC_ConfigureBoostMode+0x144>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	0c1b      	lsrs	r3, r3, #16
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	e068      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	089b      	lsrs	r3, r3, #2
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	e064      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009e10:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009e14:	f04f 0100 	mov.w	r1, #0
 8009e18:	f005 f8ba 	bl	800ef90 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8009e26:	d051      	beq.n	8009ecc <ADC_ConfigureBoostMode+0x13c>
 8009e28:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8009e2c:	d854      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e2e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8009e32:	d047      	beq.n	8009ec4 <ADC_ConfigureBoostMode+0x134>
 8009e34:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8009e38:	d84e      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e3a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8009e3e:	d03d      	beq.n	8009ebc <ADC_ConfigureBoostMode+0x12c>
 8009e40:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8009e44:	d848      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e4a:	d033      	beq.n	8009eb4 <ADC_ConfigureBoostMode+0x124>
 8009e4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e50:	d842      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e52:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8009e56:	d029      	beq.n	8009eac <ADC_ConfigureBoostMode+0x11c>
 8009e58:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8009e5c:	d83c      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e5e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009e62:	d01a      	beq.n	8009e9a <ADC_ConfigureBoostMode+0x10a>
 8009e64:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009e68:	d836      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e6a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009e6e:	d014      	beq.n	8009e9a <ADC_ConfigureBoostMode+0x10a>
 8009e70:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009e74:	d830      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e7a:	d00e      	beq.n	8009e9a <ADC_ConfigureBoostMode+0x10a>
 8009e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e80:	d82a      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009e86:	d008      	beq.n	8009e9a <ADC_ConfigureBoostMode+0x10a>
 8009e88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009e8c:	d824      	bhi.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e92:	d002      	beq.n	8009e9a <ADC_ConfigureBoostMode+0x10a>
 8009e94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e98:	d11e      	bne.n	8009ed8 <ADC_ConfigureBoostMode+0x148>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	0c9b      	lsrs	r3, r3, #18
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	e016      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	091b      	lsrs	r3, r3, #4
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	e012      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	095b      	lsrs	r3, r3, #5
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e00e      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	099b      	lsrs	r3, r3, #6
 8009ec0:	60fb      	str	r3, [r7, #12]
 8009ec2:	e00a      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	09db      	lsrs	r3, r3, #7
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	e006      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	0a1b      	lsrs	r3, r3, #8
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e002      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009ed4:	bf00      	nop
 8009ed6:	e000      	b.n	8009eda <ADC_ConfigureBoostMode+0x14a>
 8009ed8:	bf00      	nop
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	085b      	lsrs	r3, r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8009f60 <ADC_ConfigureBoostMode+0x1d0>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d808      	bhi.n	8009efa <ADC_ConfigureBoostMode+0x16a>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009ef6:	609a      	str	r2, [r3, #8]
 8009ef8:	e025      	b.n	8009f46 <ADC_ConfigureBoostMode+0x1b6>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4a19      	ldr	r2, [pc, #100]	@ (8009f64 <ADC_ConfigureBoostMode+0x1d4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d80a      	bhi.n	8009f18 <ADC_ConfigureBoostMode+0x188>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f14:	609a      	str	r2, [r3, #8]
 8009f16:	e016      	b.n	8009f46 <ADC_ConfigureBoostMode+0x1b6>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4a13      	ldr	r2, [pc, #76]	@ (8009f68 <ADC_ConfigureBoostMode+0x1d8>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d80a      	bhi.n	8009f36 <ADC_ConfigureBoostMode+0x1a6>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f32:	609a      	str	r2, [r3, #8]
 8009f34:	e007      	b.n	8009f46 <ADC_ConfigureBoostMode+0x1b6>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8009f44:	609a      	str	r2, [r3, #8]
 8009f46:	bf00      	nop
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	40022000 	.word	0x40022000
 8009f54:	40022100 	.word	0x40022100
 8009f58:	40022300 	.word	0x40022300
 8009f5c:	58026300 	.word	0x58026300
 8009f60:	005f5e10 	.word	0x005f5e10
 8009f64:	00bebc20 	.word	0x00bebc20
 8009f68:	017d7840 	.word	0x017d7840

08009f6c <LL_ADC_IsEnabled>:
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <LL_ADC_IsEnabled+0x18>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <LL_ADC_IsEnabled+0x1a>
 8009f84:	2300      	movs	r3, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <LL_ADC_REG_IsConversionOngoing>:
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 0304 	and.w	r3, r3, #4
 8009fa2:	2b04      	cmp	r3, #4
 8009fa4:	d101      	bne.n	8009faa <LL_ADC_REG_IsConversionOngoing+0x18>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e000      	b.n	8009fac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009faa:	2300      	movs	r3, #0
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_ADCEx_MultiModeConfigChannel>:
 8009fb8:	b590      	push	{r4, r7, lr}
 8009fba:	b0a3      	sub	sp, #140	@ 0x8c
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e0c1      	b.n	800a15a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009fde:	2300      	movs	r3, #0
 8009fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a5e      	ldr	r2, [pc, #376]	@ (800a164 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d102      	bne.n	8009ff6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009ff0:	4b5d      	ldr	r3, [pc, #372]	@ (800a168 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e001      	b.n	8009ffa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10b      	bne.n	800a018 <HAL_ADCEx_MultiModeConfigChannel+0x60>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a004:	f043 0220 	orr.w	r2, r3, #32
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	661a      	str	r2, [r3, #96]	@ 0x60
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a014:	2301      	movs	r3, #1
 800a016:	e0a0      	b.n	800a15a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff ffb9 	bl	8009f92 <LL_ADC_REG_IsConversionOngoing>
 800a020:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff ffb2 	bl	8009f92 <LL_ADC_REG_IsConversionOngoing>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	f040 8081 	bne.w	800a138 <HAL_ADCEx_MultiModeConfigChannel+0x180>
 800a036:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d17c      	bne.n	800a138 <HAL_ADCEx_MultiModeConfigChannel+0x180>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a48      	ldr	r2, [pc, #288]	@ (800a164 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d004      	beq.n	800a052 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a46      	ldr	r2, [pc, #280]	@ (800a168 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d101      	bne.n	800a056 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800a052:	4b46      	ldr	r3, [pc, #280]	@ (800a16c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800a054:	e000      	b.n	800a058 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a056:	4b46      	ldr	r3, [pc, #280]	@ (800a170 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800a058:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d039      	beq.n	800a0d6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 800a062:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	431a      	orrs	r2, r3
 800a070:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a072:	609a      	str	r2, [r3, #8]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a3a      	ldr	r2, [pc, #232]	@ (800a164 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a39      	ldr	r2, [pc, #228]	@ (800a168 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d10e      	bne.n	800a0a6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800a088:	4836      	ldr	r0, [pc, #216]	@ (800a164 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a08a:	f7ff ff6f 	bl	8009f6c <LL_ADC_IsEnabled>
 800a08e:	4604      	mov	r4, r0
 800a090:	4835      	ldr	r0, [pc, #212]	@ (800a168 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a092:	f7ff ff6b 	bl	8009f6c <LL_ADC_IsEnabled>
 800a096:	4603      	mov	r3, r0
 800a098:	4323      	orrs	r3, r4
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	bf0c      	ite	eq
 800a09e:	2301      	moveq	r3, #1
 800a0a0:	2300      	movne	r3, #0
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	e008      	b.n	800a0b8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a0a6:	4833      	ldr	r0, [pc, #204]	@ (800a174 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800a0a8:	f7ff ff60 	bl	8009f6c <LL_ADC_IsEnabled>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bf0c      	ite	eq
 800a0b2:	2301      	moveq	r3, #1
 800a0b4:	2300      	movne	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d047      	beq.n	800a14c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a0bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a178 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	6811      	ldr	r1, [r2, #0]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	6892      	ldr	r2, [r2, #8]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0d2:	609a      	str	r2, [r3, #8]
 800a0d4:	e03a      	b.n	800a14c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a0d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a0de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0e0:	609a      	str	r2, [r3, #8]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a1f      	ldr	r2, [pc, #124]	@ (800a164 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d004      	beq.n	800a0f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a168 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d10e      	bne.n	800a114 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800a0f6:	481b      	ldr	r0, [pc, #108]	@ (800a164 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a0f8:	f7ff ff38 	bl	8009f6c <LL_ADC_IsEnabled>
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	481a      	ldr	r0, [pc, #104]	@ (800a168 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a100:	f7ff ff34 	bl	8009f6c <LL_ADC_IsEnabled>
 800a104:	4603      	mov	r3, r0
 800a106:	4323      	orrs	r3, r4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bf0c      	ite	eq
 800a10c:	2301      	moveq	r3, #1
 800a10e:	2300      	movne	r3, #0
 800a110:	b2db      	uxtb	r3, r3
 800a112:	e008      	b.n	800a126 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800a114:	4817      	ldr	r0, [pc, #92]	@ (800a174 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800a116:	f7ff ff29 	bl	8009f6c <LL_ADC_IsEnabled>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bf0c      	ite	eq
 800a120:	2301      	moveq	r3, #1
 800a122:	2300      	movne	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d010      	beq.n	800a14c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a12a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a12c:	689a      	ldr	r2, [r3, #8]
 800a12e:	4b12      	ldr	r3, [pc, #72]	@ (800a178 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a130:	4013      	ands	r3, r2
 800a132:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a134:	6093      	str	r3, [r2, #8]
 800a136:	e009      	b.n	800a14c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a13c:	f043 0220 	orr.w	r2, r3, #32
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	661a      	str	r2, [r3, #96]	@ 0x60
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800a14a:	e000      	b.n	800a14e <HAL_ADCEx_MultiModeConfigChannel+0x196>
 800a14c:	bf00      	nop
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a156:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a15a:	4618      	mov	r0, r3
 800a15c:	378c      	adds	r7, #140	@ 0x8c
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd90      	pop	{r4, r7, pc}
 800a162:	bf00      	nop
 800a164:	40022000 	.word	0x40022000
 800a168:	40022100 	.word	0x40022100
 800a16c:	40022300 	.word	0x40022300
 800a170:	58026300 	.word	0x58026300
 800a174:	58026000 	.word	0x58026000
 800a178:	fffff0e0 	.word	0xfffff0e0

0800a17c <__NVIC_SetPriorityGrouping>:
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	4b0b      	ldr	r3, [pc, #44]	@ (800a1bc <__NVIC_SetPriorityGrouping+0x40>)
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	60bb      	str	r3, [r7, #8]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a198:	4013      	ands	r3, r2
 800a19a:	60bb      	str	r3, [r7, #8]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	021a      	lsls	r2, r3, #8
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	4b06      	ldr	r3, [pc, #24]	@ (800a1c0 <__NVIC_SetPriorityGrouping+0x44>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60bb      	str	r3, [r7, #8]
 800a1aa:	4a04      	ldr	r2, [pc, #16]	@ (800a1bc <__NVIC_SetPriorityGrouping+0x40>)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	60d3      	str	r3, [r2, #12]
 800a1b0:	bf00      	nop
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	e000ed00 	.word	0xe000ed00
 800a1c0:	05fa0000 	.word	0x05fa0000

0800a1c4 <__NVIC_GetPriorityGrouping>:
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	4b04      	ldr	r3, [pc, #16]	@ (800a1dc <__NVIC_GetPriorityGrouping+0x18>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	0a1b      	lsrs	r3, r3, #8
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	e000ed00 	.word	0xe000ed00

0800a1e0 <__NVIC_EnableIRQ>:
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	80fb      	strh	r3, [r7, #6]
 800a1ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	db0b      	blt.n	800a20a <__NVIC_EnableIRQ+0x2a>
 800a1f2:	88fb      	ldrh	r3, [r7, #6]
 800a1f4:	f003 021f 	and.w	r2, r3, #31
 800a1f8:	4907      	ldr	r1, [pc, #28]	@ (800a218 <__NVIC_EnableIRQ+0x38>)
 800a1fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1fe:	095b      	lsrs	r3, r3, #5
 800a200:	2001      	movs	r0, #1
 800a202:	fa00 f202 	lsl.w	r2, r0, r2
 800a206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	e000e100 	.word	0xe000e100

0800a21c <__NVIC_SetPriority>:
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	80fb      	strh	r3, [r7, #6]
 800a228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	db0a      	blt.n	800a246 <__NVIC_SetPriority+0x2a>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	b2da      	uxtb	r2, r3
 800a234:	490c      	ldr	r1, [pc, #48]	@ (800a268 <__NVIC_SetPriority+0x4c>)
 800a236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a23a:	0112      	lsls	r2, r2, #4
 800a23c:	b2d2      	uxtb	r2, r2
 800a23e:	440b      	add	r3, r1
 800a240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800a244:	e00a      	b.n	800a25c <__NVIC_SetPriority+0x40>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	4908      	ldr	r1, [pc, #32]	@ (800a26c <__NVIC_SetPriority+0x50>)
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	3b04      	subs	r3, #4
 800a254:	0112      	lsls	r2, r2, #4
 800a256:	b2d2      	uxtb	r2, r2
 800a258:	440b      	add	r3, r1
 800a25a:	761a      	strb	r2, [r3, #24]
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	e000e100 	.word	0xe000e100
 800a26c:	e000ed00 	.word	0xe000ed00

0800a270 <NVIC_EncodePriority>:
 800a270:	b480      	push	{r7}
 800a272:	b089      	sub	sp, #36	@ 0x24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	61fb      	str	r3, [r7, #28]
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	f1c3 0307 	rsb	r3, r3, #7
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	bf28      	it	cs
 800a28e:	2304      	movcs	r3, #4
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	3304      	adds	r3, #4
 800a296:	2b06      	cmp	r3, #6
 800a298:	d902      	bls.n	800a2a0 <NVIC_EncodePriority+0x30>
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	3b03      	subs	r3, #3
 800a29e:	e000      	b.n	800a2a2 <NVIC_EncodePriority+0x32>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ae:	43da      	mvns	r2, r3
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	409a      	lsls	r2, r3
 800a2b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c2:	43d9      	mvns	r1, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	400b      	ands	r3, r1
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3724      	adds	r7, #36	@ 0x24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <SysTick_Config>:
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2e8:	d301      	bcc.n	800a2ee <SysTick_Config+0x16>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e00f      	b.n	800a30e <SysTick_Config+0x36>
 800a2ee:	4a0a      	ldr	r2, [pc, #40]	@ (800a318 <SysTick_Config+0x40>)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	6053      	str	r3, [r2, #4]
 800a2f6:	210f      	movs	r1, #15
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	f7ff ff8e 	bl	800a21c <__NVIC_SetPriority>
 800a300:	4b05      	ldr	r3, [pc, #20]	@ (800a318 <SysTick_Config+0x40>)
 800a302:	2200      	movs	r2, #0
 800a304:	609a      	str	r2, [r3, #8]
 800a306:	4b04      	ldr	r3, [pc, #16]	@ (800a318 <SysTick_Config+0x40>)
 800a308:	2207      	movs	r2, #7
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	2300      	movs	r3, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	e000e010 	.word	0xe000e010

0800a31c <HAL_NVIC_SetPriorityGrouping>:
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff ff29 	bl	800a17c <__NVIC_SetPriorityGrouping>
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_NVIC_SetPriority>:
 800a332:	b580      	push	{r7, lr}
 800a334:	b086      	sub	sp, #24
 800a336:	af00      	add	r7, sp, #0
 800a338:	4603      	mov	r3, r0
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	81fb      	strh	r3, [r7, #14]
 800a340:	f7ff ff40 	bl	800a1c4 <__NVIC_GetPriorityGrouping>
 800a344:	6178      	str	r0, [r7, #20]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	6978      	ldr	r0, [r7, #20]
 800a34c:	f7ff ff90 	bl	800a270 <NVIC_EncodePriority>
 800a350:	4602      	mov	r2, r0
 800a352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a356:	4611      	mov	r1, r2
 800a358:	4618      	mov	r0, r3
 800a35a:	f7ff ff5f 	bl	800a21c <__NVIC_SetPriority>
 800a35e:	bf00      	nop
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <HAL_NVIC_EnableIRQ>:
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	4603      	mov	r3, r0
 800a36e:	80fb      	strh	r3, [r7, #6]
 800a370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff ff33 	bl	800a1e0 <__NVIC_EnableIRQ>
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_SYSTICK_Config>:
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f7ff ffa4 	bl	800a2d8 <SysTick_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <HAL_MPU_Disable>:
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	f3bf 8f5f 	dmb	sy
 800a3a4:	bf00      	nop
 800a3a6:	4b07      	ldr	r3, [pc, #28]	@ (800a3c4 <HAL_MPU_Disable+0x28>)
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3aa:	4a06      	ldr	r2, [pc, #24]	@ (800a3c4 <HAL_MPU_Disable+0x28>)
 800a3ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3b0:	6253      	str	r3, [r2, #36]	@ 0x24
 800a3b2:	4b05      	ldr	r3, [pc, #20]	@ (800a3c8 <HAL_MPU_Disable+0x2c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]
 800a3b8:	bf00      	nop
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	e000ed00 	.word	0xe000ed00
 800a3c8:	e000ed90 	.word	0xe000ed90

0800a3cc <HAL_MPU_Enable>:
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	4a0b      	ldr	r2, [pc, #44]	@ (800a404 <HAL_MPU_Enable+0x38>)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	6053      	str	r3, [r2, #4]
 800a3de:	4b0a      	ldr	r3, [pc, #40]	@ (800a408 <HAL_MPU_Enable+0x3c>)
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e2:	4a09      	ldr	r2, [pc, #36]	@ (800a408 <HAL_MPU_Enable+0x3c>)
 800a3e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3e8:	6253      	str	r3, [r2, #36]	@ 0x24
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	bf00      	nop
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	e000ed90 	.word	0xe000ed90
 800a408:	e000ed00 	.word	0xe000ed00

0800a40c <HAL_MPU_ConfigRegion>:
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	785a      	ldrb	r2, [r3, #1]
 800a418:	4b1b      	ldr	r3, [pc, #108]	@ (800a488 <HAL_MPU_ConfigRegion+0x7c>)
 800a41a:	609a      	str	r2, [r3, #8]
 800a41c:	4b1a      	ldr	r3, [pc, #104]	@ (800a488 <HAL_MPU_ConfigRegion+0x7c>)
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	4a19      	ldr	r2, [pc, #100]	@ (800a488 <HAL_MPU_ConfigRegion+0x7c>)
 800a422:	f023 0301 	bic.w	r3, r3, #1
 800a426:	6113      	str	r3, [r2, #16]
 800a428:	4a17      	ldr	r2, [pc, #92]	@ (800a488 <HAL_MPU_ConfigRegion+0x7c>)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	60d3      	str	r3, [r2, #12]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	7b1b      	ldrb	r3, [r3, #12]
 800a434:	071a      	lsls	r2, r3, #28
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	7adb      	ldrb	r3, [r3, #11]
 800a43a:	061b      	lsls	r3, r3, #24
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	7a9b      	ldrb	r3, [r3, #10]
 800a442:	04db      	lsls	r3, r3, #19
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	7b5b      	ldrb	r3, [r3, #13]
 800a44a:	049b      	lsls	r3, r3, #18
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	7b9b      	ldrb	r3, [r3, #14]
 800a452:	045b      	lsls	r3, r3, #17
 800a454:	431a      	orrs	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	7bdb      	ldrb	r3, [r3, #15]
 800a45a:	041b      	lsls	r3, r3, #16
 800a45c:	431a      	orrs	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	7a5b      	ldrb	r3, [r3, #9]
 800a462:	021b      	lsls	r3, r3, #8
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7a1b      	ldrb	r3, [r3, #8]
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	4611      	mov	r1, r2
 800a474:	4a04      	ldr	r2, [pc, #16]	@ (800a488 <HAL_MPU_ConfigRegion+0x7c>)
 800a476:	430b      	orrs	r3, r1
 800a478:	6113      	str	r3, [r2, #16]
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	e000ed90 	.word	0xe000ed90

0800a48c <HAL_DMA_Abort>:
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	f7fe face 	bl	8008a34 <HAL_GetTick>
 800a498:	6138      	str	r0, [r7, #16]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <HAL_DMA_Abort+0x18>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e2dc      	b.n	800aa5e <HAL_DMA_Abort+0x5d2>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d008      	beq.n	800a4c2 <HAL_DMA_Abort+0x36>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2280      	movs	r2, #128	@ 0x80
 800a4b4:	655a      	str	r2, [r3, #84]	@ 0x54
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e2cd      	b.n	800aa5e <HAL_DMA_Abort+0x5d2>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a76      	ldr	r2, [pc, #472]	@ (800a6a0 <HAL_DMA_Abort+0x214>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d04a      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a74      	ldr	r2, [pc, #464]	@ (800a6a4 <HAL_DMA_Abort+0x218>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d045      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a73      	ldr	r2, [pc, #460]	@ (800a6a8 <HAL_DMA_Abort+0x21c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d040      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a71      	ldr	r2, [pc, #452]	@ (800a6ac <HAL_DMA_Abort+0x220>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d03b      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a70      	ldr	r2, [pc, #448]	@ (800a6b0 <HAL_DMA_Abort+0x224>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d036      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a6e      	ldr	r2, [pc, #440]	@ (800a6b4 <HAL_DMA_Abort+0x228>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d031      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a6d      	ldr	r2, [pc, #436]	@ (800a6b8 <HAL_DMA_Abort+0x22c>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d02c      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a6b      	ldr	r2, [pc, #428]	@ (800a6bc <HAL_DMA_Abort+0x230>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d027      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a6a      	ldr	r2, [pc, #424]	@ (800a6c0 <HAL_DMA_Abort+0x234>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d022      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a68      	ldr	r2, [pc, #416]	@ (800a6c4 <HAL_DMA_Abort+0x238>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d01d      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a67      	ldr	r2, [pc, #412]	@ (800a6c8 <HAL_DMA_Abort+0x23c>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d018      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a65      	ldr	r2, [pc, #404]	@ (800a6cc <HAL_DMA_Abort+0x240>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d013      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a64      	ldr	r2, [pc, #400]	@ (800a6d0 <HAL_DMA_Abort+0x244>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d00e      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a62      	ldr	r2, [pc, #392]	@ (800a6d4 <HAL_DMA_Abort+0x248>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d009      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a61      	ldr	r2, [pc, #388]	@ (800a6d8 <HAL_DMA_Abort+0x24c>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d004      	beq.n	800a562 <HAL_DMA_Abort+0xd6>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a5f      	ldr	r2, [pc, #380]	@ (800a6dc <HAL_DMA_Abort+0x250>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d101      	bne.n	800a566 <HAL_DMA_Abort+0xda>
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <HAL_DMA_Abort+0xdc>
 800a566:	2300      	movs	r3, #0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d013      	beq.n	800a594 <HAL_DMA_Abort+0x108>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 021e 	bic.w	r2, r2, #30
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	695a      	ldr	r2, [r3, #20]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a58a:	615a      	str	r2, [r3, #20]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	e00a      	b.n	800a5aa <HAL_DMA_Abort+0x11e>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f022 020e 	bic.w	r2, r2, #14
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a3c      	ldr	r2, [pc, #240]	@ (800a6a0 <HAL_DMA_Abort+0x214>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d072      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a3a      	ldr	r2, [pc, #232]	@ (800a6a4 <HAL_DMA_Abort+0x218>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d06d      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a39      	ldr	r2, [pc, #228]	@ (800a6a8 <HAL_DMA_Abort+0x21c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d068      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a37      	ldr	r2, [pc, #220]	@ (800a6ac <HAL_DMA_Abort+0x220>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d063      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a36      	ldr	r2, [pc, #216]	@ (800a6b0 <HAL_DMA_Abort+0x224>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d05e      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a34      	ldr	r2, [pc, #208]	@ (800a6b4 <HAL_DMA_Abort+0x228>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d059      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a33      	ldr	r2, [pc, #204]	@ (800a6b8 <HAL_DMA_Abort+0x22c>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d054      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a31      	ldr	r2, [pc, #196]	@ (800a6bc <HAL_DMA_Abort+0x230>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d04f      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a30      	ldr	r2, [pc, #192]	@ (800a6c0 <HAL_DMA_Abort+0x234>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d04a      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a2e      	ldr	r2, [pc, #184]	@ (800a6c4 <HAL_DMA_Abort+0x238>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d045      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a2d      	ldr	r2, [pc, #180]	@ (800a6c8 <HAL_DMA_Abort+0x23c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d040      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a2b      	ldr	r2, [pc, #172]	@ (800a6cc <HAL_DMA_Abort+0x240>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d03b      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a2a      	ldr	r2, [pc, #168]	@ (800a6d0 <HAL_DMA_Abort+0x244>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d036      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a28      	ldr	r2, [pc, #160]	@ (800a6d4 <HAL_DMA_Abort+0x248>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d031      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a27      	ldr	r2, [pc, #156]	@ (800a6d8 <HAL_DMA_Abort+0x24c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d02c      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a25      	ldr	r2, [pc, #148]	@ (800a6dc <HAL_DMA_Abort+0x250>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d027      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a24      	ldr	r2, [pc, #144]	@ (800a6e0 <HAL_DMA_Abort+0x254>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d022      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a22      	ldr	r2, [pc, #136]	@ (800a6e4 <HAL_DMA_Abort+0x258>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d01d      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a21      	ldr	r2, [pc, #132]	@ (800a6e8 <HAL_DMA_Abort+0x25c>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d018      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a1f      	ldr	r2, [pc, #124]	@ (800a6ec <HAL_DMA_Abort+0x260>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d013      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a1e      	ldr	r2, [pc, #120]	@ (800a6f0 <HAL_DMA_Abort+0x264>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d00e      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f4 <HAL_DMA_Abort+0x268>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d009      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f8 <HAL_DMA_Abort+0x26c>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d004      	beq.n	800a69a <HAL_DMA_Abort+0x20e>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a19      	ldr	r2, [pc, #100]	@ (800a6fc <HAL_DMA_Abort+0x270>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d132      	bne.n	800a700 <HAL_DMA_Abort+0x274>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e031      	b.n	800a702 <HAL_DMA_Abort+0x276>
 800a69e:	bf00      	nop
 800a6a0:	40020010 	.word	0x40020010
 800a6a4:	40020028 	.word	0x40020028
 800a6a8:	40020040 	.word	0x40020040
 800a6ac:	40020058 	.word	0x40020058
 800a6b0:	40020070 	.word	0x40020070
 800a6b4:	40020088 	.word	0x40020088
 800a6b8:	400200a0 	.word	0x400200a0
 800a6bc:	400200b8 	.word	0x400200b8
 800a6c0:	40020410 	.word	0x40020410
 800a6c4:	40020428 	.word	0x40020428
 800a6c8:	40020440 	.word	0x40020440
 800a6cc:	40020458 	.word	0x40020458
 800a6d0:	40020470 	.word	0x40020470
 800a6d4:	40020488 	.word	0x40020488
 800a6d8:	400204a0 	.word	0x400204a0
 800a6dc:	400204b8 	.word	0x400204b8
 800a6e0:	58025408 	.word	0x58025408
 800a6e4:	5802541c 	.word	0x5802541c
 800a6e8:	58025430 	.word	0x58025430
 800a6ec:	58025444 	.word	0x58025444
 800a6f0:	58025458 	.word	0x58025458
 800a6f4:	5802546c 	.word	0x5802546c
 800a6f8:	58025480 	.word	0x58025480
 800a6fc:	58025494 	.word	0x58025494
 800a700:	2300      	movs	r3, #0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d007      	beq.n	800a716 <HAL_DMA_Abort+0x28a>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a6d      	ldr	r2, [pc, #436]	@ (800a8d0 <HAL_DMA_Abort+0x444>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d04a      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a6b      	ldr	r2, [pc, #428]	@ (800a8d4 <HAL_DMA_Abort+0x448>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d045      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a6a      	ldr	r2, [pc, #424]	@ (800a8d8 <HAL_DMA_Abort+0x44c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d040      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a68      	ldr	r2, [pc, #416]	@ (800a8dc <HAL_DMA_Abort+0x450>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d03b      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a67      	ldr	r2, [pc, #412]	@ (800a8e0 <HAL_DMA_Abort+0x454>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d036      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a65      	ldr	r2, [pc, #404]	@ (800a8e4 <HAL_DMA_Abort+0x458>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d031      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a64      	ldr	r2, [pc, #400]	@ (800a8e8 <HAL_DMA_Abort+0x45c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d02c      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a62      	ldr	r2, [pc, #392]	@ (800a8ec <HAL_DMA_Abort+0x460>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d027      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a61      	ldr	r2, [pc, #388]	@ (800a8f0 <HAL_DMA_Abort+0x464>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d022      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a5f      	ldr	r2, [pc, #380]	@ (800a8f4 <HAL_DMA_Abort+0x468>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d01d      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a5e      	ldr	r2, [pc, #376]	@ (800a8f8 <HAL_DMA_Abort+0x46c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d018      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a5c      	ldr	r2, [pc, #368]	@ (800a8fc <HAL_DMA_Abort+0x470>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d013      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a5b      	ldr	r2, [pc, #364]	@ (800a900 <HAL_DMA_Abort+0x474>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d00e      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a59      	ldr	r2, [pc, #356]	@ (800a904 <HAL_DMA_Abort+0x478>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d009      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a58      	ldr	r2, [pc, #352]	@ (800a908 <HAL_DMA_Abort+0x47c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d004      	beq.n	800a7b6 <HAL_DMA_Abort+0x32a>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a56      	ldr	r2, [pc, #344]	@ (800a90c <HAL_DMA_Abort+0x480>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d108      	bne.n	800a7c8 <HAL_DMA_Abort+0x33c>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f022 0201 	bic.w	r2, r2, #1
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	e007      	b.n	800a7d8 <HAL_DMA_Abort+0x34c>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 0201 	bic.w	r2, r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	e013      	b.n	800a802 <HAL_DMA_Abort+0x376>
 800a7da:	f7fe f92b 	bl	8008a34 <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	2b05      	cmp	r3, #5
 800a7e6:	d90c      	bls.n	800a802 <HAL_DMA_Abort+0x376>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	655a      	str	r2, [r3, #84]	@ 0x54
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2203      	movs	r2, #3
 800a7f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800a7fe:	2301      	movs	r3, #1
 800a800:	e12d      	b.n	800aa5e <HAL_DMA_Abort+0x5d2>
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1e5      	bne.n	800a7da <HAL_DMA_Abort+0x34e>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a2f      	ldr	r2, [pc, #188]	@ (800a8d0 <HAL_DMA_Abort+0x444>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d04a      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a2d      	ldr	r2, [pc, #180]	@ (800a8d4 <HAL_DMA_Abort+0x448>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d045      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a2c      	ldr	r2, [pc, #176]	@ (800a8d8 <HAL_DMA_Abort+0x44c>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d040      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a2a      	ldr	r2, [pc, #168]	@ (800a8dc <HAL_DMA_Abort+0x450>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d03b      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a29      	ldr	r2, [pc, #164]	@ (800a8e0 <HAL_DMA_Abort+0x454>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d036      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a27      	ldr	r2, [pc, #156]	@ (800a8e4 <HAL_DMA_Abort+0x458>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d031      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a26      	ldr	r2, [pc, #152]	@ (800a8e8 <HAL_DMA_Abort+0x45c>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d02c      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a24      	ldr	r2, [pc, #144]	@ (800a8ec <HAL_DMA_Abort+0x460>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d027      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a23      	ldr	r2, [pc, #140]	@ (800a8f0 <HAL_DMA_Abort+0x464>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d022      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a21      	ldr	r2, [pc, #132]	@ (800a8f4 <HAL_DMA_Abort+0x468>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d01d      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a20      	ldr	r2, [pc, #128]	@ (800a8f8 <HAL_DMA_Abort+0x46c>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d018      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a1e      	ldr	r2, [pc, #120]	@ (800a8fc <HAL_DMA_Abort+0x470>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d013      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a1d      	ldr	r2, [pc, #116]	@ (800a900 <HAL_DMA_Abort+0x474>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00e      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a1b      	ldr	r2, [pc, #108]	@ (800a904 <HAL_DMA_Abort+0x478>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d009      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a1a      	ldr	r2, [pc, #104]	@ (800a908 <HAL_DMA_Abort+0x47c>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d004      	beq.n	800a8ae <HAL_DMA_Abort+0x422>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a18      	ldr	r2, [pc, #96]	@ (800a90c <HAL_DMA_Abort+0x480>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d101      	bne.n	800a8b2 <HAL_DMA_Abort+0x426>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e000      	b.n	800a8b4 <HAL_DMA_Abort+0x428>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d02b      	beq.n	800a910 <HAL_DMA_Abort+0x484>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8bc:	60bb      	str	r3, [r7, #8]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c2:	f003 031f 	and.w	r3, r3, #31
 800a8c6:	223f      	movs	r2, #63	@ 0x3f
 800a8c8:	409a      	lsls	r2, r3
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	609a      	str	r2, [r3, #8]
 800a8ce:	e02a      	b.n	800a926 <HAL_DMA_Abort+0x49a>
 800a8d0:	40020010 	.word	0x40020010
 800a8d4:	40020028 	.word	0x40020028
 800a8d8:	40020040 	.word	0x40020040
 800a8dc:	40020058 	.word	0x40020058
 800a8e0:	40020070 	.word	0x40020070
 800a8e4:	40020088 	.word	0x40020088
 800a8e8:	400200a0 	.word	0x400200a0
 800a8ec:	400200b8 	.word	0x400200b8
 800a8f0:	40020410 	.word	0x40020410
 800a8f4:	40020428 	.word	0x40020428
 800a8f8:	40020440 	.word	0x40020440
 800a8fc:	40020458 	.word	0x40020458
 800a900:	40020470 	.word	0x40020470
 800a904:	40020488 	.word	0x40020488
 800a908:	400204a0 	.word	0x400204a0
 800a90c:	400204b8 	.word	0x400204b8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a91a:	f003 031f 	and.w	r3, r3, #31
 800a91e:	2201      	movs	r2, #1
 800a920:	409a      	lsls	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	605a      	str	r2, [r3, #4]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a4f      	ldr	r2, [pc, #316]	@ (800aa68 <HAL_DMA_Abort+0x5dc>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d072      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a4d      	ldr	r2, [pc, #308]	@ (800aa6c <HAL_DMA_Abort+0x5e0>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d06d      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a4c      	ldr	r2, [pc, #304]	@ (800aa70 <HAL_DMA_Abort+0x5e4>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d068      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a4a      	ldr	r2, [pc, #296]	@ (800aa74 <HAL_DMA_Abort+0x5e8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d063      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a49      	ldr	r2, [pc, #292]	@ (800aa78 <HAL_DMA_Abort+0x5ec>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d05e      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a47      	ldr	r2, [pc, #284]	@ (800aa7c <HAL_DMA_Abort+0x5f0>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d059      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a46      	ldr	r2, [pc, #280]	@ (800aa80 <HAL_DMA_Abort+0x5f4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d054      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a44      	ldr	r2, [pc, #272]	@ (800aa84 <HAL_DMA_Abort+0x5f8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d04f      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a43      	ldr	r2, [pc, #268]	@ (800aa88 <HAL_DMA_Abort+0x5fc>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d04a      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a41      	ldr	r2, [pc, #260]	@ (800aa8c <HAL_DMA_Abort+0x600>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d045      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a40      	ldr	r2, [pc, #256]	@ (800aa90 <HAL_DMA_Abort+0x604>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d040      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a3e      	ldr	r2, [pc, #248]	@ (800aa94 <HAL_DMA_Abort+0x608>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d03b      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a3d      	ldr	r2, [pc, #244]	@ (800aa98 <HAL_DMA_Abort+0x60c>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d036      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a3b      	ldr	r2, [pc, #236]	@ (800aa9c <HAL_DMA_Abort+0x610>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d031      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a3a      	ldr	r2, [pc, #232]	@ (800aaa0 <HAL_DMA_Abort+0x614>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d02c      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a38      	ldr	r2, [pc, #224]	@ (800aaa4 <HAL_DMA_Abort+0x618>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d027      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a37      	ldr	r2, [pc, #220]	@ (800aaa8 <HAL_DMA_Abort+0x61c>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d022      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a35      	ldr	r2, [pc, #212]	@ (800aaac <HAL_DMA_Abort+0x620>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d01d      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a34      	ldr	r2, [pc, #208]	@ (800aab0 <HAL_DMA_Abort+0x624>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d018      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a32      	ldr	r2, [pc, #200]	@ (800aab4 <HAL_DMA_Abort+0x628>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d013      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a31      	ldr	r2, [pc, #196]	@ (800aab8 <HAL_DMA_Abort+0x62c>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00e      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a2f      	ldr	r2, [pc, #188]	@ (800aabc <HAL_DMA_Abort+0x630>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d009      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a2e      	ldr	r2, [pc, #184]	@ (800aac0 <HAL_DMA_Abort+0x634>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d004      	beq.n	800aa16 <HAL_DMA_Abort+0x58a>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a2c      	ldr	r2, [pc, #176]	@ (800aac4 <HAL_DMA_Abort+0x638>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d101      	bne.n	800aa1a <HAL_DMA_Abort+0x58e>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <HAL_DMA_Abort+0x590>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d015      	beq.n	800aa4c <HAL_DMA_Abort+0x5c0>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800aa28:	605a      	str	r2, [r3, #4]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00c      	beq.n	800aa4c <HAL_DMA_Abort+0x5c0>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800aa4a:	605a      	str	r2, [r3, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	40020010 	.word	0x40020010
 800aa6c:	40020028 	.word	0x40020028
 800aa70:	40020040 	.word	0x40020040
 800aa74:	40020058 	.word	0x40020058
 800aa78:	40020070 	.word	0x40020070
 800aa7c:	40020088 	.word	0x40020088
 800aa80:	400200a0 	.word	0x400200a0
 800aa84:	400200b8 	.word	0x400200b8
 800aa88:	40020410 	.word	0x40020410
 800aa8c:	40020428 	.word	0x40020428
 800aa90:	40020440 	.word	0x40020440
 800aa94:	40020458 	.word	0x40020458
 800aa98:	40020470 	.word	0x40020470
 800aa9c:	40020488 	.word	0x40020488
 800aaa0:	400204a0 	.word	0x400204a0
 800aaa4:	400204b8 	.word	0x400204b8
 800aaa8:	58025408 	.word	0x58025408
 800aaac:	5802541c 	.word	0x5802541c
 800aab0:	58025430 	.word	0x58025430
 800aab4:	58025444 	.word	0x58025444
 800aab8:	58025458 	.word	0x58025458
 800aabc:	5802546c 	.word	0x5802546c
 800aac0:	58025480 	.word	0x58025480
 800aac4:	58025494 	.word	0x58025494

0800aac8 <HAL_DMA_Abort_IT>:
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_DMA_Abort_IT+0x12>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e237      	b.n	800af4a <HAL_DMA_Abort_IT+0x482>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d004      	beq.n	800aaf0 <HAL_DMA_Abort_IT+0x28>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2280      	movs	r2, #128	@ 0x80
 800aaea:	655a      	str	r2, [r3, #84]	@ 0x54
 800aaec:	2301      	movs	r3, #1
 800aaee:	e22c      	b.n	800af4a <HAL_DMA_Abort_IT+0x482>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a5c      	ldr	r2, [pc, #368]	@ (800ac68 <HAL_DMA_Abort_IT+0x1a0>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d04a      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a5b      	ldr	r2, [pc, #364]	@ (800ac6c <HAL_DMA_Abort_IT+0x1a4>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d045      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a59      	ldr	r2, [pc, #356]	@ (800ac70 <HAL_DMA_Abort_IT+0x1a8>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d040      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a58      	ldr	r2, [pc, #352]	@ (800ac74 <HAL_DMA_Abort_IT+0x1ac>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d03b      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a56      	ldr	r2, [pc, #344]	@ (800ac78 <HAL_DMA_Abort_IT+0x1b0>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d036      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a55      	ldr	r2, [pc, #340]	@ (800ac7c <HAL_DMA_Abort_IT+0x1b4>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d031      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a53      	ldr	r2, [pc, #332]	@ (800ac80 <HAL_DMA_Abort_IT+0x1b8>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d02c      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a52      	ldr	r2, [pc, #328]	@ (800ac84 <HAL_DMA_Abort_IT+0x1bc>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d027      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a50      	ldr	r2, [pc, #320]	@ (800ac88 <HAL_DMA_Abort_IT+0x1c0>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d022      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a4f      	ldr	r2, [pc, #316]	@ (800ac8c <HAL_DMA_Abort_IT+0x1c4>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d01d      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a4d      	ldr	r2, [pc, #308]	@ (800ac90 <HAL_DMA_Abort_IT+0x1c8>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d018      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a4c      	ldr	r2, [pc, #304]	@ (800ac94 <HAL_DMA_Abort_IT+0x1cc>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d013      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a4a      	ldr	r2, [pc, #296]	@ (800ac98 <HAL_DMA_Abort_IT+0x1d0>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d00e      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a49      	ldr	r2, [pc, #292]	@ (800ac9c <HAL_DMA_Abort_IT+0x1d4>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d009      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a47      	ldr	r2, [pc, #284]	@ (800aca0 <HAL_DMA_Abort_IT+0x1d8>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d004      	beq.n	800ab90 <HAL_DMA_Abort_IT+0xc8>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a46      	ldr	r2, [pc, #280]	@ (800aca4 <HAL_DMA_Abort_IT+0x1dc>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d101      	bne.n	800ab94 <HAL_DMA_Abort_IT+0xcc>
 800ab90:	2301      	movs	r3, #1
 800ab92:	e000      	b.n	800ab96 <HAL_DMA_Abort_IT+0xce>
 800ab94:	2300      	movs	r3, #0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 8086 	beq.w	800aca8 <HAL_DMA_Abort_IT+0x1e0>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2204      	movs	r2, #4
 800aba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a2f      	ldr	r2, [pc, #188]	@ (800ac68 <HAL_DMA_Abort_IT+0x1a0>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d04a      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a2e      	ldr	r2, [pc, #184]	@ (800ac6c <HAL_DMA_Abort_IT+0x1a4>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d045      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a2c      	ldr	r2, [pc, #176]	@ (800ac70 <HAL_DMA_Abort_IT+0x1a8>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d040      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a2b      	ldr	r2, [pc, #172]	@ (800ac74 <HAL_DMA_Abort_IT+0x1ac>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d03b      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a29      	ldr	r2, [pc, #164]	@ (800ac78 <HAL_DMA_Abort_IT+0x1b0>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d036      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a28      	ldr	r2, [pc, #160]	@ (800ac7c <HAL_DMA_Abort_IT+0x1b4>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d031      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a26      	ldr	r2, [pc, #152]	@ (800ac80 <HAL_DMA_Abort_IT+0x1b8>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d02c      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a25      	ldr	r2, [pc, #148]	@ (800ac84 <HAL_DMA_Abort_IT+0x1bc>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d027      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a23      	ldr	r2, [pc, #140]	@ (800ac88 <HAL_DMA_Abort_IT+0x1c0>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d022      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a22      	ldr	r2, [pc, #136]	@ (800ac8c <HAL_DMA_Abort_IT+0x1c4>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d01d      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a20      	ldr	r2, [pc, #128]	@ (800ac90 <HAL_DMA_Abort_IT+0x1c8>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d018      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a1f      	ldr	r2, [pc, #124]	@ (800ac94 <HAL_DMA_Abort_IT+0x1cc>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d013      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a1d      	ldr	r2, [pc, #116]	@ (800ac98 <HAL_DMA_Abort_IT+0x1d0>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d00e      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a1c      	ldr	r2, [pc, #112]	@ (800ac9c <HAL_DMA_Abort_IT+0x1d4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d009      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a1a      	ldr	r2, [pc, #104]	@ (800aca0 <HAL_DMA_Abort_IT+0x1d8>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d004      	beq.n	800ac44 <HAL_DMA_Abort_IT+0x17c>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a19      	ldr	r2, [pc, #100]	@ (800aca4 <HAL_DMA_Abort_IT+0x1dc>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d108      	bne.n	800ac56 <HAL_DMA_Abort_IT+0x18e>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f022 0201 	bic.w	r2, r2, #1
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	e178      	b.n	800af48 <HAL_DMA_Abort_IT+0x480>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f022 0201 	bic.w	r2, r2, #1
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	e16f      	b.n	800af48 <HAL_DMA_Abort_IT+0x480>
 800ac68:	40020010 	.word	0x40020010
 800ac6c:	40020028 	.word	0x40020028
 800ac70:	40020040 	.word	0x40020040
 800ac74:	40020058 	.word	0x40020058
 800ac78:	40020070 	.word	0x40020070
 800ac7c:	40020088 	.word	0x40020088
 800ac80:	400200a0 	.word	0x400200a0
 800ac84:	400200b8 	.word	0x400200b8
 800ac88:	40020410 	.word	0x40020410
 800ac8c:	40020428 	.word	0x40020428
 800ac90:	40020440 	.word	0x40020440
 800ac94:	40020458 	.word	0x40020458
 800ac98:	40020470 	.word	0x40020470
 800ac9c:	40020488 	.word	0x40020488
 800aca0:	400204a0 	.word	0x400204a0
 800aca4:	400204b8 	.word	0x400204b8
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 020e 	bic.w	r2, r2, #14
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a6c      	ldr	r2, [pc, #432]	@ (800ae70 <HAL_DMA_Abort_IT+0x3a8>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d04a      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a6b      	ldr	r2, [pc, #428]	@ (800ae74 <HAL_DMA_Abort_IT+0x3ac>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d045      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a69      	ldr	r2, [pc, #420]	@ (800ae78 <HAL_DMA_Abort_IT+0x3b0>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d040      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a68      	ldr	r2, [pc, #416]	@ (800ae7c <HAL_DMA_Abort_IT+0x3b4>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d03b      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a66      	ldr	r2, [pc, #408]	@ (800ae80 <HAL_DMA_Abort_IT+0x3b8>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d036      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a65      	ldr	r2, [pc, #404]	@ (800ae84 <HAL_DMA_Abort_IT+0x3bc>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d031      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a63      	ldr	r2, [pc, #396]	@ (800ae88 <HAL_DMA_Abort_IT+0x3c0>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d02c      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a62      	ldr	r2, [pc, #392]	@ (800ae8c <HAL_DMA_Abort_IT+0x3c4>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d027      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a60      	ldr	r2, [pc, #384]	@ (800ae90 <HAL_DMA_Abort_IT+0x3c8>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d022      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a5f      	ldr	r2, [pc, #380]	@ (800ae94 <HAL_DMA_Abort_IT+0x3cc>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d01d      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a5d      	ldr	r2, [pc, #372]	@ (800ae98 <HAL_DMA_Abort_IT+0x3d0>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d018      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a5c      	ldr	r2, [pc, #368]	@ (800ae9c <HAL_DMA_Abort_IT+0x3d4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d013      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a5a      	ldr	r2, [pc, #360]	@ (800aea0 <HAL_DMA_Abort_IT+0x3d8>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d00e      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a59      	ldr	r2, [pc, #356]	@ (800aea4 <HAL_DMA_Abort_IT+0x3dc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d009      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a57      	ldr	r2, [pc, #348]	@ (800aea8 <HAL_DMA_Abort_IT+0x3e0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d004      	beq.n	800ad58 <HAL_DMA_Abort_IT+0x290>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a56      	ldr	r2, [pc, #344]	@ (800aeac <HAL_DMA_Abort_IT+0x3e4>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d108      	bne.n	800ad6a <HAL_DMA_Abort_IT+0x2a2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f022 0201 	bic.w	r2, r2, #1
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	e007      	b.n	800ad7a <HAL_DMA_Abort_IT+0x2b2>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0201 	bic.w	r2, r2, #1
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a3c      	ldr	r2, [pc, #240]	@ (800ae70 <HAL_DMA_Abort_IT+0x3a8>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d072      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a3a      	ldr	r2, [pc, #232]	@ (800ae74 <HAL_DMA_Abort_IT+0x3ac>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d06d      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a39      	ldr	r2, [pc, #228]	@ (800ae78 <HAL_DMA_Abort_IT+0x3b0>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d068      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a37      	ldr	r2, [pc, #220]	@ (800ae7c <HAL_DMA_Abort_IT+0x3b4>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d063      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a36      	ldr	r2, [pc, #216]	@ (800ae80 <HAL_DMA_Abort_IT+0x3b8>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d05e      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a34      	ldr	r2, [pc, #208]	@ (800ae84 <HAL_DMA_Abort_IT+0x3bc>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d059      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a33      	ldr	r2, [pc, #204]	@ (800ae88 <HAL_DMA_Abort_IT+0x3c0>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d054      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a31      	ldr	r2, [pc, #196]	@ (800ae8c <HAL_DMA_Abort_IT+0x3c4>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d04f      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a30      	ldr	r2, [pc, #192]	@ (800ae90 <HAL_DMA_Abort_IT+0x3c8>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d04a      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a2e      	ldr	r2, [pc, #184]	@ (800ae94 <HAL_DMA_Abort_IT+0x3cc>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d045      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a2d      	ldr	r2, [pc, #180]	@ (800ae98 <HAL_DMA_Abort_IT+0x3d0>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d040      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a2b      	ldr	r2, [pc, #172]	@ (800ae9c <HAL_DMA_Abort_IT+0x3d4>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d03b      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aea0 <HAL_DMA_Abort_IT+0x3d8>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d036      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a28      	ldr	r2, [pc, #160]	@ (800aea4 <HAL_DMA_Abort_IT+0x3dc>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d031      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a27      	ldr	r2, [pc, #156]	@ (800aea8 <HAL_DMA_Abort_IT+0x3e0>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d02c      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a25      	ldr	r2, [pc, #148]	@ (800aeac <HAL_DMA_Abort_IT+0x3e4>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d027      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a24      	ldr	r2, [pc, #144]	@ (800aeb0 <HAL_DMA_Abort_IT+0x3e8>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d022      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a22      	ldr	r2, [pc, #136]	@ (800aeb4 <HAL_DMA_Abort_IT+0x3ec>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d01d      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a21      	ldr	r2, [pc, #132]	@ (800aeb8 <HAL_DMA_Abort_IT+0x3f0>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d018      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a1f      	ldr	r2, [pc, #124]	@ (800aebc <HAL_DMA_Abort_IT+0x3f4>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d013      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a1e      	ldr	r2, [pc, #120]	@ (800aec0 <HAL_DMA_Abort_IT+0x3f8>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00e      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a1c      	ldr	r2, [pc, #112]	@ (800aec4 <HAL_DMA_Abort_IT+0x3fc>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d009      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a1b      	ldr	r2, [pc, #108]	@ (800aec8 <HAL_DMA_Abort_IT+0x400>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d004      	beq.n	800ae6a <HAL_DMA_Abort_IT+0x3a2>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a19      	ldr	r2, [pc, #100]	@ (800aecc <HAL_DMA_Abort_IT+0x404>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d132      	bne.n	800aed0 <HAL_DMA_Abort_IT+0x408>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e031      	b.n	800aed2 <HAL_DMA_Abort_IT+0x40a>
 800ae6e:	bf00      	nop
 800ae70:	40020010 	.word	0x40020010
 800ae74:	40020028 	.word	0x40020028
 800ae78:	40020040 	.word	0x40020040
 800ae7c:	40020058 	.word	0x40020058
 800ae80:	40020070 	.word	0x40020070
 800ae84:	40020088 	.word	0x40020088
 800ae88:	400200a0 	.word	0x400200a0
 800ae8c:	400200b8 	.word	0x400200b8
 800ae90:	40020410 	.word	0x40020410
 800ae94:	40020428 	.word	0x40020428
 800ae98:	40020440 	.word	0x40020440
 800ae9c:	40020458 	.word	0x40020458
 800aea0:	40020470 	.word	0x40020470
 800aea4:	40020488 	.word	0x40020488
 800aea8:	400204a0 	.word	0x400204a0
 800aeac:	400204b8 	.word	0x400204b8
 800aeb0:	58025408 	.word	0x58025408
 800aeb4:	5802541c 	.word	0x5802541c
 800aeb8:	58025430 	.word	0x58025430
 800aebc:	58025444 	.word	0x58025444
 800aec0:	58025458 	.word	0x58025458
 800aec4:	5802546c 	.word	0x5802546c
 800aec8:	58025480 	.word	0x58025480
 800aecc:	58025494 	.word	0x58025494
 800aed0:	2300      	movs	r3, #0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d028      	beq.n	800af28 <HAL_DMA_Abort_IT+0x460>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aef0:	f003 031f 	and.w	r3, r3, #31
 800aef4:	2201      	movs	r2, #1
 800aef6:	409a      	lsls	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	605a      	str	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800af04:	605a      	str	r2, [r3, #4]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00c      	beq.n	800af28 <HAL_DMA_Abort_IT+0x460>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800af26:	605a      	str	r2, [r3, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d003      	beq.n	800af48 <HAL_DMA_Abort_IT+0x480>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	4798      	blx	r3
 800af48:	2300      	movs	r3, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop

0800af54 <HAL_DMA_GetState>:
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800af62:	b2db      	uxtb	r3, r3
 800af64:	4618      	mov	r0, r3
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_GPIO_Init>:
 800af70:	b480      	push	{r7}
 800af72:	b089      	sub	sp, #36	@ 0x24
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	4b86      	ldr	r3, [pc, #536]	@ (800b198 <HAL_GPIO_Init+0x228>)
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e18c      	b.n	800b29e <HAL_GPIO_Init+0x32e>
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	2101      	movs	r1, #1
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	fa01 f303 	lsl.w	r3, r1, r3
 800af90:	4013      	ands	r3, r2
 800af92:	613b      	str	r3, [r7, #16]
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 817e 	beq.w	800b298 <HAL_GPIO_Init+0x328>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d005      	beq.n	800afb4 <HAL_GPIO_Init+0x44>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f003 0303 	and.w	r3, r3, #3
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d130      	bne.n	800b016 <HAL_GPIO_Init+0xa6>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	61bb      	str	r3, [r7, #24]
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	2203      	movs	r2, #3
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	43db      	mvns	r3, r3
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	4013      	ands	r3, r2
 800afca:	61bb      	str	r3, [r7, #24]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	68da      	ldr	r2, [r3, #12]
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	4313      	orrs	r3, r2
 800afdc:	61bb      	str	r3, [r7, #24]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	609a      	str	r2, [r3, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	61bb      	str	r3, [r7, #24]
 800afea:	2201      	movs	r2, #1
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	fa02 f303 	lsl.w	r3, r2, r3
 800aff2:	43db      	mvns	r3, r3
 800aff4:	69ba      	ldr	r2, [r7, #24]
 800aff6:	4013      	ands	r3, r2
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	091b      	lsrs	r3, r3, #4
 800b000:	f003 0201 	and.w	r2, r3, #1
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	fa02 f303 	lsl.w	r3, r2, r3
 800b00a:	69ba      	ldr	r2, [r7, #24]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	61bb      	str	r3, [r7, #24]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d017      	beq.n	800b052 <HAL_GPIO_Init+0xe2>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	61bb      	str	r3, [r7, #24]
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	2203      	movs	r2, #3
 800b02e:	fa02 f303 	lsl.w	r3, r2, r3
 800b032:	43db      	mvns	r3, r3
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	4013      	ands	r3, r2
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	005b      	lsls	r3, r3, #1
 800b042:	fa02 f303 	lsl.w	r3, r2, r3
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	4313      	orrs	r3, r2
 800b04a:	61bb      	str	r3, [r7, #24]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d123      	bne.n	800b0a6 <HAL_GPIO_Init+0x136>
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	08da      	lsrs	r2, r3, #3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3208      	adds	r2, #8
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	220f      	movs	r2, #15
 800b076:	fa02 f303 	lsl.w	r3, r2, r3
 800b07a:	43db      	mvns	r3, r3
 800b07c:	69ba      	ldr	r2, [r7, #24]
 800b07e:	4013      	ands	r3, r2
 800b080:	61bb      	str	r3, [r7, #24]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	691a      	ldr	r2, [r3, #16]
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	f003 0307 	and.w	r3, r3, #7
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	fa02 f303 	lsl.w	r3, r2, r3
 800b092:	69ba      	ldr	r2, [r7, #24]
 800b094:	4313      	orrs	r3, r2
 800b096:	61bb      	str	r3, [r7, #24]
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	08da      	lsrs	r2, r3, #3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3208      	adds	r2, #8
 800b0a0:	69b9      	ldr	r1, [r7, #24]
 800b0a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	61bb      	str	r3, [r7, #24]
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	2203      	movs	r2, #3
 800b0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b6:	43db      	mvns	r3, r3
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f003 0203 	and.w	r2, r3, #3
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	61bb      	str	r3, [r7, #24]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	69ba      	ldr	r2, [r7, #24]
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 80d8 	beq.w	800b298 <HAL_GPIO_Init+0x328>
 800b0e8:	4b2c      	ldr	r3, [pc, #176]	@ (800b19c <HAL_GPIO_Init+0x22c>)
 800b0ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b0ee:	4a2b      	ldr	r2, [pc, #172]	@ (800b19c <HAL_GPIO_Init+0x22c>)
 800b0f0:	f043 0302 	orr.w	r3, r3, #2
 800b0f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b0f8:	4b28      	ldr	r3, [pc, #160]	@ (800b19c <HAL_GPIO_Init+0x22c>)
 800b0fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b0fe:	f003 0302 	and.w	r3, r3, #2
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4a26      	ldr	r2, [pc, #152]	@ (800b1a0 <HAL_GPIO_Init+0x230>)
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	089b      	lsrs	r3, r3, #2
 800b10c:	3302      	adds	r3, #2
 800b10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b112:	61bb      	str	r3, [r7, #24]
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	220f      	movs	r2, #15
 800b11e:	fa02 f303 	lsl.w	r3, r2, r3
 800b122:	43db      	mvns	r3, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	4013      	ands	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a1d      	ldr	r2, [pc, #116]	@ (800b1a4 <HAL_GPIO_Init+0x234>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d04a      	beq.n	800b1c8 <HAL_GPIO_Init+0x258>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a1c      	ldr	r2, [pc, #112]	@ (800b1a8 <HAL_GPIO_Init+0x238>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d02b      	beq.n	800b192 <HAL_GPIO_Init+0x222>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a1b      	ldr	r2, [pc, #108]	@ (800b1ac <HAL_GPIO_Init+0x23c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d025      	beq.n	800b18e <HAL_GPIO_Init+0x21e>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a1a      	ldr	r2, [pc, #104]	@ (800b1b0 <HAL_GPIO_Init+0x240>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d01f      	beq.n	800b18a <HAL_GPIO_Init+0x21a>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a19      	ldr	r2, [pc, #100]	@ (800b1b4 <HAL_GPIO_Init+0x244>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d019      	beq.n	800b186 <HAL_GPIO_Init+0x216>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a18      	ldr	r2, [pc, #96]	@ (800b1b8 <HAL_GPIO_Init+0x248>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d013      	beq.n	800b182 <HAL_GPIO_Init+0x212>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a17      	ldr	r2, [pc, #92]	@ (800b1bc <HAL_GPIO_Init+0x24c>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d00d      	beq.n	800b17e <HAL_GPIO_Init+0x20e>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a16      	ldr	r2, [pc, #88]	@ (800b1c0 <HAL_GPIO_Init+0x250>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d007      	beq.n	800b17a <HAL_GPIO_Init+0x20a>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a15      	ldr	r2, [pc, #84]	@ (800b1c4 <HAL_GPIO_Init+0x254>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d101      	bne.n	800b176 <HAL_GPIO_Init+0x206>
 800b172:	2309      	movs	r3, #9
 800b174:	e029      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b176:	230a      	movs	r3, #10
 800b178:	e027      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b17a:	2307      	movs	r3, #7
 800b17c:	e025      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b17e:	2306      	movs	r3, #6
 800b180:	e023      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b182:	2305      	movs	r3, #5
 800b184:	e021      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b186:	2304      	movs	r3, #4
 800b188:	e01f      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b18a:	2303      	movs	r3, #3
 800b18c:	e01d      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b18e:	2302      	movs	r3, #2
 800b190:	e01b      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b192:	2301      	movs	r3, #1
 800b194:	e019      	b.n	800b1ca <HAL_GPIO_Init+0x25a>
 800b196:	bf00      	nop
 800b198:	58000080 	.word	0x58000080
 800b19c:	58024400 	.word	0x58024400
 800b1a0:	58000400 	.word	0x58000400
 800b1a4:	58020000 	.word	0x58020000
 800b1a8:	58020400 	.word	0x58020400
 800b1ac:	58020800 	.word	0x58020800
 800b1b0:	58020c00 	.word	0x58020c00
 800b1b4:	58021000 	.word	0x58021000
 800b1b8:	58021400 	.word	0x58021400
 800b1bc:	58021800 	.word	0x58021800
 800b1c0:	58021c00 	.word	0x58021c00
 800b1c4:	58022400 	.word	0x58022400
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	69fa      	ldr	r2, [r7, #28]
 800b1cc:	f002 0203 	and.w	r2, r2, #3
 800b1d0:	0092      	lsls	r2, r2, #2
 800b1d2:	4093      	lsls	r3, r2
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	61bb      	str	r3, [r7, #24]
 800b1da:	4938      	ldr	r1, [pc, #224]	@ (800b2bc <HAL_GPIO_Init+0x34c>)
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	089b      	lsrs	r3, r3, #2
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	61bb      	str	r3, [r7, #24]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	43db      	mvns	r3, r3
 800b1f4:	69ba      	ldr	r2, [r7, #24]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	61bb      	str	r3, [r7, #24]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <HAL_GPIO_Init+0x29e>
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	61bb      	str	r3, [r7, #24]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	43db      	mvns	r3, r3
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	4013      	ands	r3, r2
 800b226:	61bb      	str	r3, [r7, #24]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d003      	beq.n	800b23c <HAL_GPIO_Init+0x2cc>
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	4313      	orrs	r3, r2
 800b23a:	61bb      	str	r3, [r7, #24]
 800b23c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	6053      	str	r3, [r2, #4]
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	61bb      	str	r3, [r7, #24]
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	43db      	mvns	r3, r3
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	4013      	ands	r3, r2
 800b252:	61bb      	str	r3, [r7, #24]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <HAL_GPIO_Init+0x2f8>
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	4313      	orrs	r3, r2
 800b266:	61bb      	str	r3, [r7, #24]
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	69ba      	ldr	r2, [r7, #24]
 800b26c:	605a      	str	r2, [r3, #4]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	43db      	mvns	r3, r3
 800b278:	69ba      	ldr	r2, [r7, #24]
 800b27a:	4013      	ands	r3, r2
 800b27c:	61bb      	str	r3, [r7, #24]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <HAL_GPIO_Init+0x322>
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	4313      	orrs	r3, r2
 800b290:	61bb      	str	r3, [r7, #24]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	3301      	adds	r3, #1
 800b29c:	61fb      	str	r3, [r7, #28]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f47f ae6b 	bne.w	800af84 <HAL_GPIO_Init+0x14>
 800b2ae:	bf00      	nop
 800b2b0:	bf00      	nop
 800b2b2:	3724      	adds	r7, #36	@ 0x24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	58000400 	.word	0x58000400

0800b2c0 <HAL_GPIO_ReadPin>:
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	807b      	strh	r3, [r7, #2]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	887b      	ldrh	r3, [r7, #2]
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <HAL_GPIO_ReadPin+0x1e>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	73fb      	strb	r3, [r7, #15]
 800b2dc:	e001      	b.n	800b2e2 <HAL_GPIO_ReadPin+0x22>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_GPIO_WritePin>:
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	807b      	strh	r3, [r7, #2]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	707b      	strb	r3, [r7, #1]
 800b300:	787b      	ldrb	r3, [r7, #1]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <HAL_GPIO_WritePin+0x1e>
 800b306:	887a      	ldrh	r2, [r7, #2]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	619a      	str	r2, [r3, #24]
 800b30c:	e003      	b.n	800b316 <HAL_GPIO_WritePin+0x26>
 800b30e:	887b      	ldrh	r3, [r7, #2]
 800b310:	041a      	lsls	r2, r3, #16
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	619a      	str	r2, [r3, #24]
 800b316:	bf00      	nop
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <HAL_GPIO_EXTI_IRQHandler>:
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	4603      	mov	r3, r0
 800b32a:	80fb      	strh	r3, [r7, #6]
 800b32c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b330:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b334:	88fb      	ldrh	r3, [r7, #6]
 800b336:	4013      	ands	r3, r2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d008      	beq.n	800b34e <HAL_GPIO_EXTI_IRQHandler+0x2c>
 800b33c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b340:	88fb      	ldrh	r3, [r7, #6]
 800b342:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fa fc03 	bl	8005b54 <HAL_GPIO_EXTI_Callback>
 800b34e:	bf00      	nop
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
	...

0800b358 <HAL_I2C_Init>:
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_I2C_Init+0x12>
 800b366:	2301      	movs	r3, #1
 800b368:	e08b      	b.n	800b482 <HAL_I2C_Init+0x12a>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d106      	bne.n	800b384 <HAL_I2C_Init+0x2c>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fc f95a 	bl	8007638 <HAL_I2C_MspInit>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2224      	movs	r2, #36	@ 0x24
 800b388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0201 	bic.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685a      	ldr	r2, [r3, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b3a8:	611a      	str	r2, [r3, #16]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b3b8:	609a      	str	r2, [r3, #8]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d107      	bne.n	800b3d2 <HAL_I2C_Init+0x7a>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b3ce:	609a      	str	r2, [r3, #8]
 800b3d0:	e006      	b.n	800b3e0 <HAL_I2C_Init+0x88>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689a      	ldr	r2, [r3, #8]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b3de:	609a      	str	r2, [r3, #8]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d108      	bne.n	800b3fa <HAL_I2C_Init+0xa2>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b3f6:	605a      	str	r2, [r3, #4]
 800b3f8:	e007      	b.n	800b40a <HAL_I2C_Init+0xb2>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b408:	605a      	str	r2, [r3, #4]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6859      	ldr	r1, [r3, #4]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	4b1d      	ldr	r3, [pc, #116]	@ (800b48c <HAL_I2C_Init+0x134>)
 800b416:	430b      	orrs	r3, r1
 800b418:	6053      	str	r3, [r2, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b428:	60da      	str	r2, [r3, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	691a      	ldr	r2, [r3, #16]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	ea42 0103 	orr.w	r1, r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	021a      	lsls	r2, r3, #8
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	60da      	str	r2, [r3, #12]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	69d9      	ldr	r1, [r3, #28]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a1a      	ldr	r2, [r3, #32]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	430a      	orrs	r2, r1
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f042 0201 	orr.w	r2, r2, #1
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	645a      	str	r2, [r3, #68]	@ 0x44
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	631a      	str	r2, [r3, #48]	@ 0x30
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b480:	2300      	movs	r3, #0
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	02008000 	.word	0x02008000

0800b490 <HAL_I2C_Master_Transmit>:
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af02      	add	r7, sp, #8
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	461a      	mov	r2, r3
 800b49c:	460b      	mov	r3, r1
 800b49e:	817b      	strh	r3, [r7, #10]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	813b      	strh	r3, [r7, #8]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	f040 80fd 	bne.w	800b6ac <HAL_I2C_Master_Transmit+0x21c>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d101      	bne.n	800b4c0 <HAL_I2C_Master_Transmit+0x30>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e0f6      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x21e>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4c8:	f7fd fab4 	bl	8008a34 <HAL_GetTick>
 800b4cc:	6138      	str	r0, [r7, #16]
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	2319      	movs	r3, #25
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f001 f875 	bl	800c5ca <I2C_WaitOnFlagUntilTimeout>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <HAL_I2C_Master_Transmit+0x5a>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e0e1      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x21e>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2221      	movs	r2, #33	@ 0x21
 800b4ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2210      	movs	r2, #16
 800b4f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	645a      	str	r2, [r3, #68]	@ 0x44
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	625a      	str	r2, [r3, #36]	@ 0x24
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	893a      	ldrh	r2, [r7, #8]
 800b50a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	635a      	str	r2, [r3, #52]	@ 0x34
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b516:	b29b      	uxth	r3, r3
 800b518:	2bff      	cmp	r3, #255	@ 0xff
 800b51a:	d906      	bls.n	800b52a <HAL_I2C_Master_Transmit+0x9a>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	22ff      	movs	r2, #255	@ 0xff
 800b520:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b526:	617b      	str	r3, [r7, #20]
 800b528:	e007      	b.n	800b53a <HAL_I2C_Master_Transmit+0xaa>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b52e:	b29a      	uxth	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b534:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d024      	beq.n	800b58c <HAL_I2C_Master_Transmit+0xfc>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b546:	781a      	ldrb	r2, [r3, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	625a      	str	r2, [r3, #36]	@ 0x24
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	3b01      	subs	r3, #1
 800b560:	b29a      	uxth	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b576:	b2db      	uxtb	r3, r3
 800b578:	3301      	adds	r3, #1
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	8979      	ldrh	r1, [r7, #10]
 800b57e:	4b4e      	ldr	r3, [pc, #312]	@ (800b6b8 <HAL_I2C_Master_Transmit+0x228>)
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f001 fa6f 	bl	800ca68 <I2C_TransferConfig>
 800b58a:	e066      	b.n	800b65a <HAL_I2C_Master_Transmit+0x1ca>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b590:	b2da      	uxtb	r2, r3
 800b592:	8979      	ldrh	r1, [r7, #10]
 800b594:	4b48      	ldr	r3, [pc, #288]	@ (800b6b8 <HAL_I2C_Master_Transmit+0x228>)
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f001 fa64 	bl	800ca68 <I2C_TransferConfig>
 800b5a0:	e05b      	b.n	800b65a <HAL_I2C_Master_Transmit+0x1ca>
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	6a39      	ldr	r1, [r7, #32]
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f001 f868 	bl	800c67c <I2C_WaitOnTXISFlagUntilTimeout>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <HAL_I2C_Master_Transmit+0x126>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e07b      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x21e>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ba:	781a      	ldrb	r2, [r3, #0]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	629a      	str	r2, [r3, #40]	@ 0x28
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d034      	beq.n	800b65a <HAL_I2C_Master_Transmit+0x1ca>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d130      	bne.n	800b65a <HAL_I2C_Master_Transmit+0x1ca>
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	2200      	movs	r2, #0
 800b600:	2180      	movs	r1, #128	@ 0x80
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 ffe1 	bl	800c5ca <I2C_WaitOnFlagUntilTimeout>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <HAL_I2C_Master_Transmit+0x182>
 800b60e:	2301      	movs	r3, #1
 800b610:	e04d      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x21e>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b616:	b29b      	uxth	r3, r3
 800b618:	2bff      	cmp	r3, #255	@ 0xff
 800b61a:	d90e      	bls.n	800b63a <HAL_I2C_Master_Transmit+0x1aa>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	22ff      	movs	r2, #255	@ 0xff
 800b620:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b626:	b2da      	uxtb	r2, r3
 800b628:	8979      	ldrh	r1, [r7, #10]
 800b62a:	2300      	movs	r3, #0
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f001 fa18 	bl	800ca68 <I2C_TransferConfig>
 800b638:	e00f      	b.n	800b65a <HAL_I2C_Master_Transmit+0x1ca>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b63e:	b29a      	uxth	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	8979      	ldrh	r1, [r7, #10]
 800b64c:	2300      	movs	r3, #0
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f001 fa07 	bl	800ca68 <I2C_TransferConfig>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b65e:	b29b      	uxth	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d19e      	bne.n	800b5a2 <HAL_I2C_Master_Transmit+0x112>
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	6a39      	ldr	r1, [r7, #32]
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f001 f84e 	bl	800c70a <I2C_WaitOnSTOPFlagUntilTimeout>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <HAL_I2C_Master_Transmit+0x1e8>
 800b674:	2301      	movs	r3, #1
 800b676:	e01a      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x21e>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2220      	movs	r2, #32
 800b67e:	61da      	str	r2, [r3, #28]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6859      	ldr	r1, [r3, #4]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	4b0c      	ldr	r3, [pc, #48]	@ (800b6bc <HAL_I2C_Master_Transmit+0x22c>)
 800b68c:	400b      	ands	r3, r1
 800b68e:	6053      	str	r3, [r2, #4]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2220      	movs	r2, #32
 800b694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e000      	b.n	800b6ae <HAL_I2C_Master_Transmit+0x21e>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	80002000 	.word	0x80002000
 800b6bc:	fe00e800 	.word	0xfe00e800

0800b6c0 <HAL_I2C_Master_Receive>:
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b088      	sub	sp, #32
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	607a      	str	r2, [r7, #4]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	817b      	strh	r3, [r7, #10]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	813b      	strh	r3, [r7, #8]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b20      	cmp	r3, #32
 800b6de:	f040 80db 	bne.w	800b898 <HAL_I2C_Master_Receive+0x1d8>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d101      	bne.n	800b6f0 <HAL_I2C_Master_Receive+0x30>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	e0d4      	b.n	800b89a <HAL_I2C_Master_Receive+0x1da>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6f8:	f7fd f99c 	bl	8008a34 <HAL_GetTick>
 800b6fc:	6178      	str	r0, [r7, #20]
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	2319      	movs	r3, #25
 800b704:	2201      	movs	r2, #1
 800b706:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f000 ff5d 	bl	800c5ca <I2C_WaitOnFlagUntilTimeout>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <HAL_I2C_Master_Receive+0x5a>
 800b716:	2301      	movs	r3, #1
 800b718:	e0bf      	b.n	800b89a <HAL_I2C_Master_Receive+0x1da>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2222      	movs	r2, #34	@ 0x22
 800b71e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2210      	movs	r2, #16
 800b726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	645a      	str	r2, [r3, #68]	@ 0x44
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	625a      	str	r2, [r3, #36]	@ 0x24
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	893a      	ldrh	r2, [r7, #8]
 800b73a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	635a      	str	r2, [r3, #52]	@ 0x34
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b746:	b29b      	uxth	r3, r3
 800b748:	2bff      	cmp	r3, #255	@ 0xff
 800b74a:	d90e      	bls.n	800b76a <HAL_I2C_Master_Receive+0xaa>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	22ff      	movs	r2, #255	@ 0xff
 800b750:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b756:	b2da      	uxtb	r2, r3
 800b758:	8979      	ldrh	r1, [r7, #10]
 800b75a:	4b52      	ldr	r3, [pc, #328]	@ (800b8a4 <HAL_I2C_Master_Receive+0x1e4>)
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f001 f980 	bl	800ca68 <I2C_TransferConfig>
 800b768:	e06d      	b.n	800b846 <HAL_I2C_Master_Receive+0x186>
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	8979      	ldrh	r1, [r7, #10]
 800b77c:	4b49      	ldr	r3, [pc, #292]	@ (800b8a4 <HAL_I2C_Master_Receive+0x1e4>)
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f001 f96f 	bl	800ca68 <I2C_TransferConfig>
 800b78a:	e05c      	b.n	800b846 <HAL_I2C_Master_Receive+0x186>
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	6a39      	ldr	r1, [r7, #32]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 fffd 	bl	800c790 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <HAL_I2C_Master_Receive+0xe0>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e07c      	b.n	800b89a <HAL_I2C_Master_Receive+0x1da>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	625a      	str	r2, [r3, #36]	@ 0x24
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d034      	beq.n	800b846 <HAL_I2C_Master_Receive+0x186>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d130      	bne.n	800b846 <HAL_I2C_Master_Receive+0x186>
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2180      	movs	r1, #128	@ 0x80
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 feeb 	bl	800c5ca <I2C_WaitOnFlagUntilTimeout>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <HAL_I2C_Master_Receive+0x13e>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e04d      	b.n	800b89a <HAL_I2C_Master_Receive+0x1da>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b802:	b29b      	uxth	r3, r3
 800b804:	2bff      	cmp	r3, #255	@ 0xff
 800b806:	d90e      	bls.n	800b826 <HAL_I2C_Master_Receive+0x166>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	22ff      	movs	r2, #255	@ 0xff
 800b80c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b812:	b2da      	uxtb	r2, r3
 800b814:	8979      	ldrh	r1, [r7, #10]
 800b816:	2300      	movs	r3, #0
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f001 f922 	bl	800ca68 <I2C_TransferConfig>
 800b824:	e00f      	b.n	800b846 <HAL_I2C_Master_Receive+0x186>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b834:	b2da      	uxtb	r2, r3
 800b836:	8979      	ldrh	r1, [r7, #10]
 800b838:	2300      	movs	r3, #0
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f001 f911 	bl	800ca68 <I2C_TransferConfig>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d19d      	bne.n	800b78c <HAL_I2C_Master_Receive+0xcc>
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	6a39      	ldr	r1, [r7, #32]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 ff58 	bl	800c70a <I2C_WaitOnSTOPFlagUntilTimeout>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d001      	beq.n	800b864 <HAL_I2C_Master_Receive+0x1a4>
 800b860:	2301      	movs	r3, #1
 800b862:	e01a      	b.n	800b89a <HAL_I2C_Master_Receive+0x1da>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2220      	movs	r2, #32
 800b86a:	61da      	str	r2, [r3, #28]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6859      	ldr	r1, [r3, #4]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a8 <HAL_I2C_Master_Receive+0x1e8>)
 800b878:	400b      	ands	r3, r1
 800b87a:	6053      	str	r3, [r2, #4]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2220      	movs	r2, #32
 800b880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b894:	2300      	movs	r3, #0
 800b896:	e000      	b.n	800b89a <HAL_I2C_Master_Receive+0x1da>
 800b898:	2302      	movs	r3, #2
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	80002400 	.word	0x80002400
 800b8a8:	fe00e800 	.word	0xfe00e800

0800b8ac <HAL_I2C_EV_IRQHandler>:
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60bb      	str	r3, [r7, #8]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d005      	beq.n	800b8d8 <HAL_I2C_EV_IRQHandler+0x2c>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	68f9      	ldr	r1, [r7, #12]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	4798      	blx	r3
 800b8d8:	bf00      	nop
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HAL_I2C_ER_IRQHandler>:
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00f      	beq.n	800b922 <HAL_I2C_ER_IRQHandler+0x42>
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00a      	beq.n	800b922 <HAL_I2C_ER_IRQHandler+0x42>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b910:	f043 0201 	orr.w	r2, r3, #1
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	645a      	str	r2, [r3, #68]	@ 0x44
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b920:	61da      	str	r2, [r3, #28]
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00f      	beq.n	800b94c <HAL_I2C_ER_IRQHandler+0x6c>
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <HAL_I2C_ER_IRQHandler+0x6c>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b93a:	f043 0208 	orr.w	r2, r3, #8
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	645a      	str	r2, [r3, #68]	@ 0x44
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b94a:	61da      	str	r2, [r3, #28]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00f      	beq.n	800b976 <HAL_I2C_ER_IRQHandler+0x96>
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00a      	beq.n	800b976 <HAL_I2C_ER_IRQHandler+0x96>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b964:	f043 0202 	orr.w	r2, r3, #2
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	645a      	str	r2, [r3, #68]	@ 0x44
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b974:	61da      	str	r2, [r3, #28]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f003 030b 	and.w	r3, r3, #11
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <HAL_I2C_ER_IRQHandler+0xae>
 800b986:	68f9      	ldr	r1, [r7, #12]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fcc5 	bl	800c318 <I2C_ITError>
 800b98e:	bf00      	nop
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <HAL_I2C_SlaveTxCpltCallback>:
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <HAL_I2C_SlaveRxCpltCallback>:
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	bf00      	nop
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <HAL_I2C_AddrCallback>:
 800b9be:	b480      	push	{r7}
 800b9c0:	b083      	sub	sp, #12
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	803b      	strh	r3, [r7, #0]
 800b9ce:	bf00      	nop
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <HAL_I2C_ListenCpltCallback>:
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	bf00      	nop
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <HAL_I2C_ErrorCallback>:
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	bf00      	nop
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <HAL_I2C_AbortCpltCallback>:
 800ba02:	b480      	push	{r7}
 800ba04:	b083      	sub	sp, #12
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	bf00      	nop
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <I2C_Slave_ISR_IT>:
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b086      	sub	sp, #24
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	607a      	str	r2, [r7, #4]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba26:	617b      	str	r3, [r7, #20]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	613b      	str	r3, [r7, #16]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <I2C_Slave_ISR_IT+0x24>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e0e2      	b.n	800bc00 <I2C_Slave_ISR_IT+0x1ea>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f003 0320 	and.w	r3, r3, #32
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d009      	beq.n	800ba60 <I2C_Slave_ISR_IT+0x4a>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f003 0320 	and.w	r3, r3, #32
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <I2C_Slave_ISR_IT+0x4a>
 800ba56:	6939      	ldr	r1, [r7, #16]
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f000 f9b5 	bl	800bdc8 <I2C_ITSlaveCplt>
 800ba5e:	e0ca      	b.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f003 0310 	and.w	r3, r3, #16
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d04b      	beq.n	800bb02 <I2C_Slave_ISR_IT+0xec>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f003 0310 	and.w	r3, r3, #16
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d046      	beq.n	800bb02 <I2C_Slave_ISR_IT+0xec>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d128      	bne.n	800bad0 <I2C_Slave_ISR_IT+0xba>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b28      	cmp	r3, #40	@ 0x28
 800ba88:	d108      	bne.n	800ba9c <I2C_Slave_ISR_IT+0x86>
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba90:	d104      	bne.n	800ba9c <I2C_Slave_ISR_IT+0x86>
 800ba92:	6939      	ldr	r1, [r7, #16]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fbeb 	bl	800c270 <I2C_ITListenCplt>
 800ba9a:	e031      	b.n	800bb00 <I2C_Slave_ISR_IT+0xea>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	2b29      	cmp	r3, #41	@ 0x29
 800baa6:	d10e      	bne.n	800bac6 <I2C_Slave_ISR_IT+0xb0>
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800baae:	d00a      	beq.n	800bac6 <I2C_Slave_ISR_IT+0xb0>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2210      	movs	r2, #16
 800bab6:	61da      	str	r2, [r3, #28]
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fd44 	bl	800c546 <I2C_Flush_TXDR>
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 f926 	bl	800bd10 <I2C_ITSlaveSeqCplt>
 800bac4:	e01c      	b.n	800bb00 <I2C_Slave_ISR_IT+0xea>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2210      	movs	r2, #16
 800bacc:	61da      	str	r2, [r3, #28]
 800bace:	e08f      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1da>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2210      	movs	r2, #16
 800bad6:	61da      	str	r2, [r3, #28]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800badc:	f043 0204 	orr.w	r2, r3, #4
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	645a      	str	r2, [r3, #68]	@ 0x44
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <I2C_Slave_ISR_IT+0xdc>
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baf0:	d17e      	bne.n	800bbf0 <I2C_Slave_ISR_IT+0x1da>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baf6:	4619      	mov	r1, r3
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 fc0d 	bl	800c318 <I2C_ITError>
 800bafe:	e077      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1da>
 800bb00:	e076      	b.n	800bbf0 <I2C_Slave_ISR_IT+0x1da>
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d02f      	beq.n	800bb6c <I2C_Slave_ISR_IT+0x156>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f003 0304 	and.w	r3, r3, #4
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d02a      	beq.n	800bb6c <I2C_Slave_ISR_IT+0x156>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d018      	beq.n	800bb52 <I2C_Slave_ISR_IT+0x13c>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2a:	b2d2      	uxtb	r2, r2
 800bb2c:	701a      	strb	r2, [r3, #0]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d14b      	bne.n	800bbf4 <I2C_Slave_ISR_IT+0x1de>
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bb62:	d047      	beq.n	800bbf4 <I2C_Slave_ISR_IT+0x1de>
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f8d3 	bl	800bd10 <I2C_ITSlaveSeqCplt>
 800bb6a:	e043      	b.n	800bbf4 <I2C_Slave_ISR_IT+0x1de>
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	f003 0308 	and.w	r3, r3, #8
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d009      	beq.n	800bb8a <I2C_Slave_ISR_IT+0x174>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f003 0308 	and.w	r3, r3, #8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d004      	beq.n	800bb8a <I2C_Slave_ISR_IT+0x174>
 800bb80:	6939      	ldr	r1, [r7, #16]
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f000 f840 	bl	800bc08 <I2C_ITAddrCplt>
 800bb88:	e035      	b.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f003 0302 	and.w	r3, r3, #2
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d030      	beq.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d02b      	beq.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d018      	beq.n	800bbda <I2C_Slave_ISR_IT+0x1c4>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbac:	781a      	ldrb	r2, [r3, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bbd8:	e00d      	b.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbe0:	d002      	beq.n	800bbe8 <I2C_Slave_ISR_IT+0x1d2>
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d106      	bne.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 f891 	bl	800bd10 <I2C_ITSlaveSeqCplt>
 800bbee:	e002      	b.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800bbf0:	bf00      	nop
 800bbf2:	e000      	b.n	800bbf6 <I2C_Slave_ISR_IT+0x1e0>
 800bbf4:	bf00      	nop
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4618      	mov	r0, r3
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <I2C_ITAddrCplt>:
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bc1e:	2b28      	cmp	r3, #40	@ 0x28
 800bc20:	d16a      	bne.n	800bcf8 <I2C_ITAddrCplt+0xf0>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	0c1b      	lsrs	r3, r3, #16
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	73fb      	strb	r3, [r7, #15]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	0c1b      	lsrs	r3, r3, #16
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800bc40:	81bb      	strh	r3, [r7, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc4e:	817b      	strh	r3, [r7, #10]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800bc5c:	813b      	strh	r3, [r7, #8]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d138      	bne.n	800bcd8 <I2C_ITAddrCplt+0xd0>
 800bc66:	897b      	ldrh	r3, [r7, #10]
 800bc68:	09db      	lsrs	r3, r3, #7
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	89bb      	ldrh	r3, [r7, #12]
 800bc6e:	4053      	eors	r3, r2
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f003 0306 	and.w	r3, r3, #6
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d11c      	bne.n	800bcb4 <I2C_ITAddrCplt+0xac>
 800bc7a:	897b      	ldrh	r3, [r7, #10]
 800bc7c:	81bb      	strh	r3, [r7, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	649a      	str	r2, [r3, #72]	@ 0x48
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d13b      	bne.n	800bd08 <I2C_ITAddrCplt+0x100>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	649a      	str	r2, [r3, #72]	@ 0x48
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	61da      	str	r2, [r3, #28]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bca6:	89ba      	ldrh	r2, [r7, #12]
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7ff fe86 	bl	800b9be <HAL_I2C_AddrCallback>
 800bcb2:	e029      	b.n	800bd08 <I2C_ITAddrCplt+0x100>
 800bcb4:	893b      	ldrh	r3, [r7, #8]
 800bcb6:	81bb      	strh	r3, [r7, #12]
 800bcb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 ff05 	bl	800cacc <I2C_Disable_IRQ>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcca:	89ba      	ldrh	r2, [r7, #12]
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff fe74 	bl	800b9be <HAL_I2C_AddrCallback>
 800bcd6:	e017      	b.n	800bd08 <I2C_ITAddrCplt+0x100>
 800bcd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fef5 	bl	800cacc <I2C_Disable_IRQ>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcea:	89ba      	ldrh	r2, [r7, #12]
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff fe64 	bl	800b9be <HAL_I2C_AddrCallback>
 800bcf6:	e007      	b.n	800bd08 <I2C_ITAddrCplt+0x100>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2208      	movs	r2, #8
 800bcfe:	61da      	str	r2, [r3, #28]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <I2C_ITSlaveSeqCplt>:
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d008      	beq.n	800bd44 <I2C_ITSlaveSeqCplt+0x34>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bd40:	601a      	str	r2, [r3, #0]
 800bd42:	e00c      	b.n	800bd5e <I2C_ITSlaveSeqCplt+0x4e>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d007      	beq.n	800bd5e <I2C_ITSlaveSeqCplt+0x4e>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b29      	cmp	r3, #41	@ 0x29
 800bd68:	d112      	bne.n	800bd90 <I2C_ITSlaveSeqCplt+0x80>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2228      	movs	r2, #40	@ 0x28
 800bd6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2221      	movs	r2, #33	@ 0x21
 800bd76:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd78:	2101      	movs	r1, #1
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fea6 	bl	800cacc <I2C_Disable_IRQ>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f7ff fe04 	bl	800b996 <HAL_I2C_SlaveTxCpltCallback>
 800bd8e:	e017      	b.n	800bdc0 <I2C_ITSlaveSeqCplt+0xb0>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd9a:	d111      	bne.n	800bdc0 <I2C_ITSlaveSeqCplt+0xb0>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2228      	movs	r2, #40	@ 0x28
 800bda0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2222      	movs	r2, #34	@ 0x22
 800bda8:	631a      	str	r2, [r3, #48]	@ 0x30
 800bdaa:	2102      	movs	r1, #2
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fe8d 	bl	800cacc <I2C_Disable_IRQ>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7ff fdf5 	bl	800b9aa <HAL_I2C_SlaveRxCpltCallback>
 800bdc0:	bf00      	nop
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <I2C_ITSlaveCplt>:
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	613b      	str	r3, [r7, #16]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bdea:	72fb      	strb	r3, [r7, #11]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2220      	movs	r2, #32
 800bdf2:	61da      	str	r2, [r3, #28]
 800bdf4:	7afb      	ldrb	r3, [r7, #11]
 800bdf6:	2b21      	cmp	r3, #33	@ 0x21
 800bdf8:	d002      	beq.n	800be00 <I2C_ITSlaveCplt+0x38>
 800bdfa:	7afb      	ldrb	r3, [r7, #11]
 800bdfc:	2b29      	cmp	r3, #41	@ 0x29
 800bdfe:	d108      	bne.n	800be12 <I2C_ITSlaveCplt+0x4a>
 800be00:	f248 0101 	movw	r1, #32769	@ 0x8001
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fe61 	bl	800cacc <I2C_Disable_IRQ>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2221      	movs	r2, #33	@ 0x21
 800be0e:	631a      	str	r2, [r3, #48]	@ 0x30
 800be10:	e019      	b.n	800be46 <I2C_ITSlaveCplt+0x7e>
 800be12:	7afb      	ldrb	r3, [r7, #11]
 800be14:	2b22      	cmp	r3, #34	@ 0x22
 800be16:	d002      	beq.n	800be1e <I2C_ITSlaveCplt+0x56>
 800be18:	7afb      	ldrb	r3, [r7, #11]
 800be1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be1c:	d108      	bne.n	800be30 <I2C_ITSlaveCplt+0x68>
 800be1e:	f248 0102 	movw	r1, #32770	@ 0x8002
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fe52 	bl	800cacc <I2C_Disable_IRQ>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2222      	movs	r2, #34	@ 0x22
 800be2c:	631a      	str	r2, [r3, #48]	@ 0x30
 800be2e:	e00a      	b.n	800be46 <I2C_ITSlaveCplt+0x7e>
 800be30:	7afb      	ldrb	r3, [r7, #11]
 800be32:	2b28      	cmp	r3, #40	@ 0x28
 800be34:	d107      	bne.n	800be46 <I2C_ITSlaveCplt+0x7e>
 800be36:	f248 0103 	movw	r1, #32771	@ 0x8003
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fe46 	bl	800cacc <I2C_Disable_IRQ>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	631a      	str	r2, [r3, #48]	@ 0x30
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800be54:	605a      	str	r2, [r3, #4]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6859      	ldr	r1, [r3, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	4b7f      	ldr	r3, [pc, #508]	@ (800c060 <I2C_ITSlaveCplt+0x298>)
 800be62:	400b      	ands	r3, r1
 800be64:	6053      	str	r3, [r2, #4]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fb6d 	bl	800c546 <I2C_Flush_TXDR>
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d07a      	beq.n	800bf6c <I2C_ITSlaveCplt+0x1a4>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 8111 	beq.w	800c0b2 <I2C_ITSlaveCplt+0x2ea>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a73      	ldr	r2, [pc, #460]	@ (800c064 <I2C_ITSlaveCplt+0x29c>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d059      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a71      	ldr	r2, [pc, #452]	@ (800c068 <I2C_ITSlaveCplt+0x2a0>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d053      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a6f      	ldr	r2, [pc, #444]	@ (800c06c <I2C_ITSlaveCplt+0x2a4>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d04d      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a6d      	ldr	r2, [pc, #436]	@ (800c070 <I2C_ITSlaveCplt+0x2a8>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d047      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a6b      	ldr	r2, [pc, #428]	@ (800c074 <I2C_ITSlaveCplt+0x2ac>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d041      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a69      	ldr	r2, [pc, #420]	@ (800c078 <I2C_ITSlaveCplt+0x2b0>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d03b      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a67      	ldr	r2, [pc, #412]	@ (800c07c <I2C_ITSlaveCplt+0x2b4>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d035      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a65      	ldr	r2, [pc, #404]	@ (800c080 <I2C_ITSlaveCplt+0x2b8>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d02f      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a63      	ldr	r2, [pc, #396]	@ (800c084 <I2C_ITSlaveCplt+0x2bc>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d029      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a61      	ldr	r2, [pc, #388]	@ (800c088 <I2C_ITSlaveCplt+0x2c0>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d023      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a5f      	ldr	r2, [pc, #380]	@ (800c08c <I2C_ITSlaveCplt+0x2c4>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d01d      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a5d      	ldr	r2, [pc, #372]	@ (800c090 <I2C_ITSlaveCplt+0x2c8>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d017      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a5b      	ldr	r2, [pc, #364]	@ (800c094 <I2C_ITSlaveCplt+0x2cc>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d011      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a59      	ldr	r2, [pc, #356]	@ (800c098 <I2C_ITSlaveCplt+0x2d0>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d00b      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a57      	ldr	r2, [pc, #348]	@ (800c09c <I2C_ITSlaveCplt+0x2d4>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d005      	beq.n	800bf50 <I2C_ITSlaveCplt+0x188>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a55      	ldr	r2, [pc, #340]	@ (800c0a0 <I2C_ITSlaveCplt+0x2d8>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d105      	bne.n	800bf5c <I2C_ITSlaveCplt+0x194>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	e004      	b.n	800bf66 <I2C_ITSlaveCplt+0x19e>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800bf6a:	e0a2      	b.n	800c0b2 <I2C_ITSlaveCplt+0x2ea>
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f000 809d 	beq.w	800c0b2 <I2C_ITSlaveCplt+0x2ea>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f000 8090 	beq.w	800c0b2 <I2C_ITSlaveCplt+0x2ea>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a32      	ldr	r2, [pc, #200]	@ (800c064 <I2C_ITSlaveCplt+0x29c>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d059      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a30      	ldr	r2, [pc, #192]	@ (800c068 <I2C_ITSlaveCplt+0x2a0>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d053      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a2e      	ldr	r2, [pc, #184]	@ (800c06c <I2C_ITSlaveCplt+0x2a4>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d04d      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a2c      	ldr	r2, [pc, #176]	@ (800c070 <I2C_ITSlaveCplt+0x2a8>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d047      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a2a      	ldr	r2, [pc, #168]	@ (800c074 <I2C_ITSlaveCplt+0x2ac>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d041      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a28      	ldr	r2, [pc, #160]	@ (800c078 <I2C_ITSlaveCplt+0x2b0>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d03b      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a26      	ldr	r2, [pc, #152]	@ (800c07c <I2C_ITSlaveCplt+0x2b4>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d035      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a24      	ldr	r2, [pc, #144]	@ (800c080 <I2C_ITSlaveCplt+0x2b8>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d02f      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a22      	ldr	r2, [pc, #136]	@ (800c084 <I2C_ITSlaveCplt+0x2bc>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d029      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a20      	ldr	r2, [pc, #128]	@ (800c088 <I2C_ITSlaveCplt+0x2c0>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d023      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a1e      	ldr	r2, [pc, #120]	@ (800c08c <I2C_ITSlaveCplt+0x2c4>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d01d      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a1c      	ldr	r2, [pc, #112]	@ (800c090 <I2C_ITSlaveCplt+0x2c8>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d017      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a1a      	ldr	r2, [pc, #104]	@ (800c094 <I2C_ITSlaveCplt+0x2cc>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d011      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a18      	ldr	r2, [pc, #96]	@ (800c098 <I2C_ITSlaveCplt+0x2d0>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d00b      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a16      	ldr	r2, [pc, #88]	@ (800c09c <I2C_ITSlaveCplt+0x2d4>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d005      	beq.n	800c052 <I2C_ITSlaveCplt+0x28a>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a14      	ldr	r2, [pc, #80]	@ (800c0a0 <I2C_ITSlaveCplt+0x2d8>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d128      	bne.n	800c0a4 <I2C_ITSlaveCplt+0x2dc>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	e027      	b.n	800c0ae <I2C_ITSlaveCplt+0x2e6>
 800c05e:	bf00      	nop
 800c060:	fe00e800 	.word	0xfe00e800
 800c064:	40020010 	.word	0x40020010
 800c068:	40020028 	.word	0x40020028
 800c06c:	40020040 	.word	0x40020040
 800c070:	40020058 	.word	0x40020058
 800c074:	40020070 	.word	0x40020070
 800c078:	40020088 	.word	0x40020088
 800c07c:	400200a0 	.word	0x400200a0
 800c080:	400200b8 	.word	0x400200b8
 800c084:	40020410 	.word	0x40020410
 800c088:	40020428 	.word	0x40020428
 800c08c:	40020440 	.word	0x40020440
 800c090:	40020458 	.word	0x40020458
 800c094:	40020470 	.word	0x40020470
 800c098:	40020488 	.word	0x40020488
 800c09c:	400204a0 	.word	0x400204a0
 800c0a0:	400204b8 	.word	0x400204b8
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f003 0304 	and.w	r3, r3, #4
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d020      	beq.n	800c0fe <I2C_ITSlaveCplt+0x336>
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f023 0304 	bic.w	r3, r3, #4
 800c0c2:	617b      	str	r3, [r7, #20]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ce:	b2d2      	uxtb	r2, r2
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	625a      	str	r2, [r3, #36]	@ 0x24
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00c      	beq.n	800c0fe <I2C_ITSlaveCplt+0x336>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c102:	b29b      	uxth	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d005      	beq.n	800c114 <I2C_ITSlaveCplt+0x34c>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c10c:	f043 0204 	orr.w	r2, r3, #4
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	645a      	str	r2, [r3, #68]	@ 0x44
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	f003 0310 	and.w	r3, r3, #16
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d049      	beq.n	800c1b2 <I2C_ITSlaveCplt+0x3ea>
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	f003 0310 	and.w	r3, r3, #16
 800c124:	2b00      	cmp	r3, #0
 800c126:	d044      	beq.n	800c1b2 <I2C_ITSlaveCplt+0x3ea>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d128      	bne.n	800c184 <I2C_ITSlaveCplt+0x3bc>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b28      	cmp	r3, #40	@ 0x28
 800c13c:	d108      	bne.n	800c150 <I2C_ITSlaveCplt+0x388>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c144:	d104      	bne.n	800c150 <I2C_ITSlaveCplt+0x388>
 800c146:	6979      	ldr	r1, [r7, #20]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f891 	bl	800c270 <I2C_ITListenCplt>
 800c14e:	e030      	b.n	800c1b2 <I2C_ITSlaveCplt+0x3ea>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b29      	cmp	r3, #41	@ 0x29
 800c15a:	d10e      	bne.n	800c17a <I2C_ITSlaveCplt+0x3b2>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c162:	d00a      	beq.n	800c17a <I2C_ITSlaveCplt+0x3b2>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2210      	movs	r2, #16
 800c16a:	61da      	str	r2, [r3, #28]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f9ea 	bl	800c546 <I2C_Flush_TXDR>
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff fdcc 	bl	800bd10 <I2C_ITSlaveSeqCplt>
 800c178:	e01b      	b.n	800c1b2 <I2C_ITSlaveCplt+0x3ea>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2210      	movs	r2, #16
 800c180:	61da      	str	r2, [r3, #28]
 800c182:	e016      	b.n	800c1b2 <I2C_ITSlaveCplt+0x3ea>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2210      	movs	r2, #16
 800c18a:	61da      	str	r2, [r3, #28]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c190:	f043 0204 	orr.w	r2, r3, #4
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	645a      	str	r2, [r3, #68]	@ 0x44
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <I2C_ITSlaveCplt+0x3de>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1a4:	d105      	bne.n	800c1b2 <I2C_ITSlaveCplt+0x3ea>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f8b3 	bl	800c318 <I2C_ITError>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	635a      	str	r2, [r3, #52]	@ 0x34
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d010      	beq.n	800c1ea <I2C_ITSlaveCplt+0x422>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f8a2 	bl	800c318 <I2C_ITError>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b28      	cmp	r3, #40	@ 0x28
 800c1de:	d141      	bne.n	800c264 <I2C_ITSlaveCplt+0x49c>
 800c1e0:	6979      	ldr	r1, [r7, #20]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f844 	bl	800c270 <I2C_ITListenCplt>
 800c1e8:	e03c      	b.n	800c264 <I2C_ITSlaveCplt+0x49c>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c1f2:	d014      	beq.n	800c21e <I2C_ITSlaveCplt+0x456>
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff fd8b 	bl	800bd10 <I2C_ITSlaveSeqCplt>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c26c <I2C_ITSlaveCplt+0x4a4>)
 800c1fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2220      	movs	r2, #32
 800c204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fbdf 	bl	800b9da <HAL_I2C_ListenCpltCallback>
 800c21c:	e022      	b.n	800c264 <I2C_ITSlaveCplt+0x49c>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b22      	cmp	r3, #34	@ 0x22
 800c228:	d10e      	bne.n	800c248 <I2C_ITSlaveCplt+0x480>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	631a      	str	r2, [r3, #48]	@ 0x30
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff fbb2 	bl	800b9aa <HAL_I2C_SlaveRxCpltCallback>
 800c246:	e00d      	b.n	800c264 <I2C_ITSlaveCplt+0x49c>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	631a      	str	r2, [r3, #48]	@ 0x30
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff fb99 	bl	800b996 <HAL_I2C_SlaveTxCpltCallback>
 800c264:	bf00      	nop
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	ffff0000 	.word	0xffff0000

0800c270 <I2C_ITListenCplt>:
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a25      	ldr	r2, [pc, #148]	@ (800c314 <I2C_ITListenCplt+0xa4>)
 800c27e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	631a      	str	r2, [r3, #48]	@ 0x30
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2220      	movs	r2, #32
 800c28a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	635a      	str	r2, [r3, #52]	@ 0x34
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d022      	beq.n	800c2ec <I2C_ITListenCplt+0x7c>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b0:	b2d2      	uxtb	r2, r2
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	625a      	str	r2, [r3, #36]	@ 0x24
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d012      	beq.n	800c2ec <I2C_ITListenCplt+0x7c>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2e4:	f043 0204 	orr.w	r2, r3, #4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	645a      	str	r2, [r3, #68]	@ 0x44
 800c2ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fbeb 	bl	800cacc <I2C_Disable_IRQ>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2210      	movs	r2, #16
 800c2fc:	61da      	str	r2, [r3, #28]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff fb67 	bl	800b9da <HAL_I2C_ListenCpltCallback>
 800c30c:	bf00      	nop
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	ffff0000 	.word	0xffff0000

0800c318 <I2C_ITError>:
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c328:	73fb      	strb	r3, [r7, #15]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a6d      	ldr	r2, [pc, #436]	@ (800c4ec <I2C_ITError+0x1d4>)
 800c336:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	431a      	orrs	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	645a      	str	r2, [r3, #68]	@ 0x44
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	2b28      	cmp	r3, #40	@ 0x28
 800c34e:	d005      	beq.n	800c35c <I2C_ITError+0x44>
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	2b29      	cmp	r3, #41	@ 0x29
 800c354:	d002      	beq.n	800c35c <I2C_ITError+0x44>
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	2b2a      	cmp	r3, #42	@ 0x2a
 800c35a:	d10b      	bne.n	800c374 <I2C_ITError+0x5c>
 800c35c:	2103      	movs	r1, #3
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fbb4 	bl	800cacc <I2C_Disable_IRQ>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2228      	movs	r2, #40	@ 0x28
 800c368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a60      	ldr	r2, [pc, #384]	@ (800c4f0 <I2C_ITError+0x1d8>)
 800c370:	635a      	str	r2, [r3, #52]	@ 0x34
 800c372:	e030      	b.n	800c3d6 <I2C_ITError+0xbe>
 800c374:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fba7 	bl	800cacc <I2C_Disable_IRQ>
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f8e1 	bl	800c546 <I2C_Flush_TXDR>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b60      	cmp	r3, #96	@ 0x60
 800c38e:	d01f      	beq.n	800c3d0 <I2C_ITError+0xb8>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2220      	movs	r2, #32
 800c394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	f003 0320 	and.w	r3, r3, #32
 800c3a2:	2b20      	cmp	r3, #32
 800c3a4:	d114      	bne.n	800c3d0 <I2C_ITError+0xb8>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	f003 0310 	and.w	r3, r3, #16
 800c3b0:	2b10      	cmp	r3, #16
 800c3b2:	d109      	bne.n	800c3c8 <I2C_ITError+0xb0>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2210      	movs	r2, #16
 800c3ba:	61da      	str	r2, [r3, #28]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c0:	f043 0204 	orr.w	r2, r3, #4
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	645a      	str	r2, [r3, #68]	@ 0x44
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	61da      	str	r2, [r3, #28]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	635a      	str	r2, [r3, #52]	@ 0x34
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3da:	60bb      	str	r3, [r7, #8]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d039      	beq.n	800c458 <I2C_ITError+0x140>
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	2b11      	cmp	r3, #17
 800c3e8:	d002      	beq.n	800c3f0 <I2C_ITError+0xd8>
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b21      	cmp	r3, #33	@ 0x21
 800c3ee:	d133      	bne.n	800c458 <I2C_ITError+0x140>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3fe:	d107      	bne.n	800c410 <I2C_ITError+0xf8>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c40e:	601a      	str	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c414:	4618      	mov	r0, r3
 800c416:	f7fe fd9d 	bl	800af54 <HAL_DMA_GetState>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d017      	beq.n	800c450 <I2C_ITError+0x138>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c424:	4a33      	ldr	r2, [pc, #204]	@ (800c4f4 <I2C_ITError+0x1dc>)
 800c426:	651a      	str	r2, [r3, #80]	@ 0x50
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c434:	4618      	mov	r0, r3
 800c436:	f7fe fb47 	bl	800aac8 <HAL_DMA_Abort_IT>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d04d      	beq.n	800c4dc <I2C_ITError+0x1c4>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c44a:	4610      	mov	r0, r2
 800c44c:	4798      	blx	r3
 800c44e:	e045      	b.n	800c4dc <I2C_ITError+0x1c4>
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f851 	bl	800c4f8 <I2C_TreatErrorCallback>
 800c456:	e041      	b.n	800c4dc <I2C_ITError+0x1c4>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d039      	beq.n	800c4d4 <I2C_ITError+0x1bc>
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b12      	cmp	r3, #18
 800c464:	d002      	beq.n	800c46c <I2C_ITError+0x154>
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	2b22      	cmp	r3, #34	@ 0x22
 800c46a:	d133      	bne.n	800c4d4 <I2C_ITError+0x1bc>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c47a:	d107      	bne.n	800c48c <I2C_ITError+0x174>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c48a:	601a      	str	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe fd5f 	bl	800af54 <HAL_DMA_GetState>
 800c496:	4603      	mov	r3, r0
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d017      	beq.n	800c4cc <I2C_ITError+0x1b4>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a0:	4a14      	ldr	r2, [pc, #80]	@ (800c4f4 <I2C_ITError+0x1dc>)
 800c4a2:	651a      	str	r2, [r3, #80]	@ 0x50
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe fb09 	bl	800aac8 <HAL_DMA_Abort_IT>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d011      	beq.n	800c4e0 <I2C_ITError+0x1c8>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	4798      	blx	r3
 800c4ca:	e009      	b.n	800c4e0 <I2C_ITError+0x1c8>
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f813 	bl	800c4f8 <I2C_TreatErrorCallback>
 800c4d2:	e005      	b.n	800c4e0 <I2C_ITError+0x1c8>
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f80f 	bl	800c4f8 <I2C_TreatErrorCallback>
 800c4da:	e002      	b.n	800c4e2 <I2C_ITError+0x1ca>
 800c4dc:	bf00      	nop
 800c4de:	e000      	b.n	800c4e2 <I2C_ITError+0x1ca>
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	ffff0000 	.word	0xffff0000
 800c4f0:	0800ba17 	.word	0x0800ba17
 800c4f4:	0800c58f 	.word	0x0800c58f

0800c4f8 <I2C_TreatErrorCallback>:
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c506:	b2db      	uxtb	r3, r3
 800c508:	2b60      	cmp	r3, #96	@ 0x60
 800c50a:	d10e      	bne.n	800c52a <I2C_TreatErrorCallback+0x32>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2220      	movs	r2, #32
 800c510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	631a      	str	r2, [r3, #48]	@ 0x30
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff fa6d 	bl	800ba02 <HAL_I2C_AbortCpltCallback>
 800c528:	e009      	b.n	800c53e <I2C_TreatErrorCallback+0x46>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	631a      	str	r2, [r3, #48]	@ 0x30
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff fa58 	bl	800b9ee <HAL_I2C_ErrorCallback>
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <I2C_Flush_TXDR>:
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	f003 0302 	and.w	r3, r3, #2
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d103      	bne.n	800c564 <I2C_Flush_TXDR+0x1e>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2200      	movs	r2, #0
 800c562:	629a      	str	r2, [r3, #40]	@ 0x28
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d007      	beq.n	800c582 <I2C_Flush_TXDR+0x3c>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	699a      	ldr	r2, [r3, #24]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f042 0201 	orr.w	r2, r2, #1
 800c580:	619a      	str	r2, [r3, #24]
 800c582:	bf00      	nop
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <I2C_DMAAbort>:
 800c58e:	b580      	push	{r7, lr}
 800c590:	b084      	sub	sp, #16
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c59a:	60fb      	str	r3, [r7, #12]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d003      	beq.n	800c5ac <I2C_DMAAbort+0x1e>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	651a      	str	r2, [r3, #80]	@ 0x50
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <I2C_DMAAbort+0x2e>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	651a      	str	r2, [r3, #80]	@ 0x50
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7ff ff9b 	bl	800c4f8 <I2C_TreatErrorCallback>
 800c5c2:	bf00      	nop
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <I2C_WaitOnFlagUntilTimeout>:
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	603b      	str	r3, [r7, #0]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	71fb      	strb	r3, [r7, #7]
 800c5da:	e03b      	b.n	800c654 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c5dc:	69ba      	ldr	r2, [r7, #24]
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f000 f961 	bl	800c8a8 <I2C_IsErrorOccurred>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <I2C_WaitOnFlagUntilTimeout+0x26>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e041      	b.n	800c674 <I2C_WaitOnFlagUntilTimeout+0xaa>
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f6:	d02d      	beq.n	800c654 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c5f8:	f7fc fa1c 	bl	8008a34 <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d302      	bcc.n	800c60e <I2C_WaitOnFlagUntilTimeout+0x44>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d122      	bne.n	800c654 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	699a      	ldr	r2, [r3, #24]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	4013      	ands	r3, r2
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	bf0c      	ite	eq
 800c61e:	2301      	moveq	r3, #1
 800c620:	2300      	movne	r3, #0
 800c622:	b2db      	uxtb	r3, r3
 800c624:	461a      	mov	r2, r3
 800c626:	79fb      	ldrb	r3, [r7, #7]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d113      	bne.n	800c654 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c630:	f043 0220 	orr.w	r2, r3, #32
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	645a      	str	r2, [r3, #68]	@ 0x44
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2220      	movs	r2, #32
 800c63c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c650:	2301      	movs	r3, #1
 800c652:	e00f      	b.n	800c674 <I2C_WaitOnFlagUntilTimeout+0xaa>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	699a      	ldr	r2, [r3, #24]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	4013      	ands	r3, r2
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	429a      	cmp	r2, r3
 800c662:	bf0c      	ite	eq
 800c664:	2301      	moveq	r3, #1
 800c666:	2300      	movne	r3, #0
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	461a      	mov	r2, r3
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d0b4      	beq.n	800c5dc <I2C_WaitOnFlagUntilTimeout+0x12>
 800c672:	2300      	movs	r3, #0
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <I2C_WaitOnTXISFlagUntilTimeout>:
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
 800c688:	e033      	b.n	800c6f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f000 f90a 	bl	800c8a8 <I2C_IsErrorOccurred>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 800c69a:	2301      	movs	r3, #1
 800c69c:	e031      	b.n	800c702 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a4:	d025      	beq.n	800c6f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c6a6:	f7fc f9c5 	bl	8008a34 <HAL_GetTick>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d302      	bcc.n	800c6bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d11a      	bne.n	800c6f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	f003 0302 	and.w	r3, r3, #2
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d013      	beq.n	800c6f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ce:	f043 0220 	orr.w	r2, r3, #32
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	645a      	str	r2, [r3, #68]	@ 0x44
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2220      	movs	r2, #32
 800c6da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e007      	b.n	800c702 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d1c4      	bne.n	800c68a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 800c700:	2300      	movs	r3, #0
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <I2C_WaitOnSTOPFlagUntilTimeout>:
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	e02f      	b.n	800c778 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	68b9      	ldr	r1, [r7, #8]
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f000 f8c3 	bl	800c8a8 <I2C_IsErrorOccurred>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 800c728:	2301      	movs	r3, #1
 800c72a:	e02d      	b.n	800c788 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 800c72c:	f7fc f982 	bl	8008a34 <HAL_GetTick>
 800c730:	4602      	mov	r2, r0
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d302      	bcc.n	800c742 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d11a      	bne.n	800c778 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	f003 0320 	and.w	r3, r3, #32
 800c74c:	2b20      	cmp	r3, #32
 800c74e:	d013      	beq.n	800c778 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c754:	f043 0220 	orr.w	r2, r3, #32
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	645a      	str	r2, [r3, #68]	@ 0x44
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2220      	movs	r2, #32
 800c760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c774:	2301      	movs	r3, #1
 800c776:	e007      	b.n	800c788 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	f003 0320 	and.w	r3, r3, #32
 800c782:	2b20      	cmp	r3, #32
 800c784:	d1c8      	bne.n	800c718 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 800c786:	2300      	movs	r3, #0
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <I2C_WaitOnRXNEFlagUntilTimeout>:
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	2300      	movs	r3, #0
 800c79e:	75fb      	strb	r3, [r7, #23]
 800c7a0:	e071      	b.n	800c886 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f000 f87e 	bl	800c8a8 <I2C_IsErrorOccurred>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	75fb      	strb	r3, [r7, #23]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	2b20      	cmp	r3, #32
 800c7c2:	d13b      	bne.n	800c83c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d138      	bne.n	800c83c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	f003 0304 	and.w	r3, r3, #4
 800c7d4:	2b04      	cmp	r3, #4
 800c7d6:	d105      	bne.n	800c7e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	75fb      	strb	r3, [r7, #23]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	f003 0310 	and.w	r3, r3, #16
 800c7ee:	2b10      	cmp	r3, #16
 800c7f0:	d121      	bne.n	800c836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2210      	movs	r2, #16
 800c7f8:	61da      	str	r2, [r3, #28]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2204      	movs	r2, #4
 800c7fe:	645a      	str	r2, [r3, #68]	@ 0x44
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2220      	movs	r2, #32
 800c806:	61da      	str	r2, [r3, #28]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6859      	ldr	r1, [r3, #4]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	4b24      	ldr	r3, [pc, #144]	@ (800c8a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800c814:	400b      	ands	r3, r1
 800c816:	6053      	str	r3, [r2, #4]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c830:	2301      	movs	r3, #1
 800c832:	75fb      	strb	r3, [r7, #23]
 800c834:	e002      	b.n	800c83c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	645a      	str	r2, [r3, #68]	@ 0x44
 800c83c:	f7fc f8fa 	bl	8008a34 <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d302      	bcc.n	800c852 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d119      	bne.n	800c886 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c852:	7dfb      	ldrb	r3, [r7, #23]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d116      	bne.n	800c886 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b04      	cmp	r3, #4
 800c864:	d00f      	beq.n	800c886 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c86a:	f043 0220 	orr.w	r2, r3, #32
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	645a      	str	r2, [r3, #68]	@ 0x44
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2220      	movs	r2, #32
 800c876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c882:	2301      	movs	r3, #1
 800c884:	75fb      	strb	r3, [r7, #23]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b04      	cmp	r3, #4
 800c892:	d002      	beq.n	800c89a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800c894:	7dfb      	ldrb	r3, [r7, #23]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d083      	beq.n	800c7a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	fe00e800 	.word	0xfe00e800

0800c8a8 <I2C_IsErrorOccurred>:
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08a      	sub	sp, #40	@ 0x28
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	61bb      	str	r3, [r7, #24]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	623b      	str	r3, [r7, #32]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	61fb      	str	r3, [r7, #28]
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	f003 0310 	and.w	r3, r3, #16
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d068      	beq.n	800c9a6 <I2C_IsErrorOccurred+0xfe>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2210      	movs	r2, #16
 800c8da:	61da      	str	r2, [r3, #28]
 800c8dc:	e049      	b.n	800c972 <I2C_IsErrorOccurred+0xca>
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e4:	d045      	beq.n	800c972 <I2C_IsErrorOccurred+0xca>
 800c8e6:	f7fc f8a5 	bl	8008a34 <HAL_GetTick>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d302      	bcc.n	800c8fc <I2C_IsErrorOccurred+0x54>
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d13a      	bne.n	800c972 <I2C_IsErrorOccurred+0xca>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c90e:	74fb      	strb	r3, [r7, #19]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c91a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c91e:	d121      	bne.n	800c964 <I2C_IsErrorOccurred+0xbc>
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c926:	d01d      	beq.n	800c964 <I2C_IsErrorOccurred+0xbc>
 800c928:	7cfb      	ldrb	r3, [r7, #19]
 800c92a:	2b20      	cmp	r3, #32
 800c92c:	d01a      	beq.n	800c964 <I2C_IsErrorOccurred+0xbc>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c93c:	605a      	str	r2, [r3, #4]
 800c93e:	f7fc f879 	bl	8008a34 <HAL_GetTick>
 800c942:	61f8      	str	r0, [r7, #28]
 800c944:	e00e      	b.n	800c964 <I2C_IsErrorOccurred+0xbc>
 800c946:	f7fc f875 	bl	8008a34 <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	2b19      	cmp	r3, #25
 800c952:	d907      	bls.n	800c964 <I2C_IsErrorOccurred+0xbc>
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	f043 0320 	orr.w	r3, r3, #32
 800c95a:	623b      	str	r3, [r7, #32]
 800c95c:	2301      	movs	r3, #1
 800c95e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c962:	e006      	b.n	800c972 <I2C_IsErrorOccurred+0xca>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	f003 0320 	and.w	r3, r3, #32
 800c96e:	2b20      	cmp	r3, #32
 800c970:	d1e9      	bne.n	800c946 <I2C_IsErrorOccurred+0x9e>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	699b      	ldr	r3, [r3, #24]
 800c978:	f003 0320 	and.w	r3, r3, #32
 800c97c:	2b20      	cmp	r3, #32
 800c97e:	d003      	beq.n	800c988 <I2C_IsErrorOccurred+0xe0>
 800c980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c984:	2b00      	cmp	r3, #0
 800c986:	d0aa      	beq.n	800c8de <I2C_IsErrorOccurred+0x36>
 800c988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d103      	bne.n	800c998 <I2C_IsErrorOccurred+0xf0>
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2220      	movs	r2, #32
 800c996:	61da      	str	r2, [r3, #28]
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	f043 0304 	orr.w	r3, r3, #4
 800c99e:	623b      	str	r3, [r7, #32]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	61bb      	str	r3, [r7, #24]
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00b      	beq.n	800c9d0 <I2C_IsErrorOccurred+0x128>
 800c9b8:	6a3b      	ldr	r3, [r7, #32]
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	623b      	str	r3, [r7, #32]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c9c8:	61da      	str	r2, [r3, #28]
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00b      	beq.n	800c9f2 <I2C_IsErrorOccurred+0x14a>
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	f043 0308 	orr.w	r3, r3, #8
 800c9e0:	623b      	str	r3, [r7, #32]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c9ea:	61da      	str	r2, [r3, #28]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00b      	beq.n	800ca14 <I2C_IsErrorOccurred+0x16c>
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	f043 0302 	orr.w	r3, r3, #2
 800ca02:	623b      	str	r3, [r7, #32]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca0c:	61da      	str	r2, [r3, #28]
 800ca0e:	2301      	movs	r3, #1
 800ca10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d01c      	beq.n	800ca56 <I2C_IsErrorOccurred+0x1ae>
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f7ff fd92 	bl	800c546 <I2C_Flush_TXDR>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6859      	ldr	r1, [r3, #4]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca64 <I2C_IsErrorOccurred+0x1bc>)
 800ca2e:	400b      	ands	r3, r1
 800ca30:	6053      	str	r3, [r2, #4]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	431a      	orrs	r2, r3
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	645a      	str	r2, [r3, #68]	@ 0x44
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2220      	movs	r2, #32
 800ca42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ca56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3728      	adds	r7, #40	@ 0x28
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	fe00e800 	.word	0xfe00e800

0800ca68 <I2C_TransferConfig>:
 800ca68:	b480      	push	{r7}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	607b      	str	r3, [r7, #4]
 800ca72:	460b      	mov	r3, r1
 800ca74:	817b      	strh	r3, [r7, #10]
 800ca76:	4613      	mov	r3, r2
 800ca78:	727b      	strb	r3, [r7, #9]
 800ca7a:	897b      	ldrh	r3, [r7, #10]
 800ca7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ca80:	7a7b      	ldrb	r3, [r7, #9]
 800ca82:	041b      	lsls	r3, r3, #16
 800ca84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca88:	431a      	orrs	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca96:	617b      	str	r3, [r7, #20]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	0d5b      	lsrs	r3, r3, #21
 800caa2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800caa6:	4b08      	ldr	r3, [pc, #32]	@ (800cac8 <I2C_TransferConfig+0x60>)
 800caa8:	430b      	orrs	r3, r1
 800caaa:	43db      	mvns	r3, r3
 800caac:	ea02 0103 	and.w	r1, r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	605a      	str	r2, [r3, #4]
 800caba:	bf00      	nop
 800cabc:	371c      	adds	r7, #28
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	03ff63ff 	.word	0x03ff63ff

0800cacc <I2C_Disable_IRQ>:
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	807b      	strh	r3, [r7, #2]
 800cad8:	2300      	movs	r3, #0
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	887b      	ldrh	r3, [r7, #2]
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00f      	beq.n	800cb06 <I2C_Disable_IRQ+0x3a>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cafa:	2b28      	cmp	r3, #40	@ 0x28
 800cafc:	d003      	beq.n	800cb06 <I2C_Disable_IRQ+0x3a>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	887b      	ldrh	r3, [r7, #2]
 800cb08:	f003 0302 	and.w	r3, r3, #2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00f      	beq.n	800cb30 <I2C_Disable_IRQ+0x64>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cb24:	2b28      	cmp	r3, #40	@ 0x28
 800cb26:	d003      	beq.n	800cb30 <I2C_Disable_IRQ+0x64>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	da03      	bge.n	800cb40 <I2C_Disable_IRQ+0x74>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800cb3e:	60fb      	str	r3, [r7, #12]
 800cb40:	887b      	ldrh	r3, [r7, #2]
 800cb42:	2b10      	cmp	r3, #16
 800cb44:	d103      	bne.n	800cb4e <I2C_Disable_IRQ+0x82>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800cb4c:	60fb      	str	r3, [r7, #12]
 800cb4e:	887b      	ldrh	r3, [r7, #2]
 800cb50:	2b20      	cmp	r3, #32
 800cb52:	d103      	bne.n	800cb5c <I2C_Disable_IRQ+0x90>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f043 0320 	orr.w	r3, r3, #32
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	887b      	ldrh	r3, [r7, #2]
 800cb5e:	2b40      	cmp	r3, #64	@ 0x40
 800cb60:	d103      	bne.n	800cb6a <I2C_Disable_IRQ+0x9e>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6819      	ldr	r1, [r3, #0]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	43da      	mvns	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	400a      	ands	r2, r1
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	bf00      	nop
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <HAL_I2CEx_ConfigAnalogFilter>:
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b20      	cmp	r3, #32
 800cb9c:	d138      	bne.n	800cc10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d101      	bne.n	800cbac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cba8:	2302      	movs	r3, #2
 800cbaa:	e032      	b.n	800cc12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2224      	movs	r2, #36	@ 0x24
 800cbb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f022 0201 	bic.w	r2, r2, #1
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6819      	ldr	r1, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	430a      	orrs	r2, r1
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0201 	orr.w	r2, r2, #1
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e000      	b.n	800cc12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cc10:	2302      	movs	r3, #2
 800cc12:	4618      	mov	r0, r3
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <HAL_I2CEx_ConfigDigitalFilter>:
 800cc1e:	b480      	push	{r7}
 800cc20:	b085      	sub	sp, #20
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	6039      	str	r1, [r7, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b20      	cmp	r3, #32
 800cc32:	d139      	bne.n	800cca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d101      	bne.n	800cc42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cc3e:	2302      	movs	r3, #2
 800cc40:	e033      	b.n	800ccaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2201      	movs	r2, #1
 800cc46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2224      	movs	r2, #36	@ 0x24
 800cc4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f022 0201 	bic.w	r2, r2, #1
 800cc60:	601a      	str	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	60fb      	str	r3, [r7, #12]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800cc70:	60fb      	str	r3, [r7, #12]
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	021b      	lsls	r3, r3, #8
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f042 0201 	orr.w	r2, r2, #1
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2220      	movs	r2, #32
 800cc98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cca4:	2300      	movs	r3, #0
 800cca6:	e000      	b.n	800ccaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cca8:	2302      	movs	r3, #2
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <HAL_PWREx_ConfigSupply>:
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	4b19      	ldr	r3, [pc, #100]	@ (800cd28 <HAL_PWREx_ConfigSupply+0x70>)
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d00a      	beq.n	800cce2 <HAL_PWREx_ConfigSupply+0x2a>
 800cccc:	4b16      	ldr	r3, [pc, #88]	@ (800cd28 <HAL_PWREx_ConfigSupply+0x70>)
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f003 0307 	and.w	r3, r3, #7
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d001      	beq.n	800ccde <HAL_PWREx_ConfigSupply+0x26>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e01f      	b.n	800cd1e <HAL_PWREx_ConfigSupply+0x66>
 800ccde:	2300      	movs	r3, #0
 800cce0:	e01d      	b.n	800cd1e <HAL_PWREx_ConfigSupply+0x66>
 800cce2:	4b11      	ldr	r3, [pc, #68]	@ (800cd28 <HAL_PWREx_ConfigSupply+0x70>)
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	f023 0207 	bic.w	r2, r3, #7
 800ccea:	490f      	ldr	r1, [pc, #60]	@ (800cd28 <HAL_PWREx_ConfigSupply+0x70>)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	60cb      	str	r3, [r1, #12]
 800ccf2:	f7fb fe9f 	bl	8008a34 <HAL_GetTick>
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	e009      	b.n	800cd0e <HAL_PWREx_ConfigSupply+0x56>
 800ccfa:	f7fb fe9b 	bl	8008a34 <HAL_GetTick>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd08:	d901      	bls.n	800cd0e <HAL_PWREx_ConfigSupply+0x56>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e007      	b.n	800cd1e <HAL_PWREx_ConfigSupply+0x66>
 800cd0e:	4b06      	ldr	r3, [pc, #24]	@ (800cd28 <HAL_PWREx_ConfigSupply+0x70>)
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd1a:	d1ee      	bne.n	800ccfa <HAL_PWREx_ConfigSupply+0x42>
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	58024800 	.word	0x58024800

0800cd2c <HAL_RCC_OscConfig>:
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08c      	sub	sp, #48	@ 0x30
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d101      	bne.n	800cd3e <HAL_RCC_OscConfig+0x12>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e3c8      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f000 8087 	beq.w	800ce5a <HAL_RCC_OscConfig+0x12e>
 800cd4c:	4b88      	ldr	r3, [pc, #544]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd56:	4b86      	ldr	r3, [pc, #536]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cd58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5e:	2b10      	cmp	r3, #16
 800cd60:	d007      	beq.n	800cd72 <HAL_RCC_OscConfig+0x46>
 800cd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd64:	2b18      	cmp	r3, #24
 800cd66:	d110      	bne.n	800cd8a <HAL_RCC_OscConfig+0x5e>
 800cd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6a:	f003 0303 	and.w	r3, r3, #3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d10b      	bne.n	800cd8a <HAL_RCC_OscConfig+0x5e>
 800cd72:	4b7f      	ldr	r3, [pc, #508]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d06c      	beq.n	800ce58 <HAL_RCC_OscConfig+0x12c>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d168      	bne.n	800ce58 <HAL_RCC_OscConfig+0x12c>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e3a2      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd92:	d106      	bne.n	800cda2 <HAL_RCC_OscConfig+0x76>
 800cd94:	4b76      	ldr	r3, [pc, #472]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a75      	ldr	r2, [pc, #468]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cd9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	e02e      	b.n	800ce00 <HAL_RCC_OscConfig+0xd4>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10c      	bne.n	800cdc4 <HAL_RCC_OscConfig+0x98>
 800cdaa:	4b71      	ldr	r3, [pc, #452]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a70      	ldr	r2, [pc, #448]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdb4:	6013      	str	r3, [r2, #0]
 800cdb6:	4b6e      	ldr	r3, [pc, #440]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a6d      	ldr	r2, [pc, #436]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	e01d      	b.n	800ce00 <HAL_RCC_OscConfig+0xd4>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cdcc:	d10c      	bne.n	800cde8 <HAL_RCC_OscConfig+0xbc>
 800cdce:	4b68      	ldr	r3, [pc, #416]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a67      	ldr	r2, [pc, #412]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cdd8:	6013      	str	r3, [r2, #0]
 800cdda:	4b65      	ldr	r3, [pc, #404]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a64      	ldr	r2, [pc, #400]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cde0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	e00b      	b.n	800ce00 <HAL_RCC_OscConfig+0xd4>
 800cde8:	4b61      	ldr	r3, [pc, #388]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a60      	ldr	r2, [pc, #384]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdf2:	6013      	str	r3, [r2, #0]
 800cdf4:	4b5e      	ldr	r3, [pc, #376]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a5d      	ldr	r2, [pc, #372]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cdfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d013      	beq.n	800ce30 <HAL_RCC_OscConfig+0x104>
 800ce08:	f7fb fe14 	bl	8008a34 <HAL_GetTick>
 800ce0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce0e:	e008      	b.n	800ce22 <HAL_RCC_OscConfig+0xf6>
 800ce10:	f7fb fe10 	bl	8008a34 <HAL_GetTick>
 800ce14:	4602      	mov	r2, r0
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	2b64      	cmp	r3, #100	@ 0x64
 800ce1c:	d901      	bls.n	800ce22 <HAL_RCC_OscConfig+0xf6>
 800ce1e:	2303      	movs	r3, #3
 800ce20:	e356      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800ce22:	4b53      	ldr	r3, [pc, #332]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0f0      	beq.n	800ce10 <HAL_RCC_OscConfig+0xe4>
 800ce2e:	e014      	b.n	800ce5a <HAL_RCC_OscConfig+0x12e>
 800ce30:	f7fb fe00 	bl	8008a34 <HAL_GetTick>
 800ce34:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce36:	e008      	b.n	800ce4a <HAL_RCC_OscConfig+0x11e>
 800ce38:	f7fb fdfc 	bl	8008a34 <HAL_GetTick>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	2b64      	cmp	r3, #100	@ 0x64
 800ce44:	d901      	bls.n	800ce4a <HAL_RCC_OscConfig+0x11e>
 800ce46:	2303      	movs	r3, #3
 800ce48:	e342      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800ce4a:	4b49      	ldr	r3, [pc, #292]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1f0      	bne.n	800ce38 <HAL_RCC_OscConfig+0x10c>
 800ce56:	e000      	b.n	800ce5a <HAL_RCC_OscConfig+0x12e>
 800ce58:	bf00      	nop
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 0302 	and.w	r3, r3, #2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 808c 	beq.w	800cf80 <HAL_RCC_OscConfig+0x254>
 800ce68:	4b41      	ldr	r3, [pc, #260]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce70:	623b      	str	r3, [r7, #32]
 800ce72:	4b3f      	ldr	r3, [pc, #252]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ce74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce76:	61fb      	str	r3, [r7, #28]
 800ce78:	6a3b      	ldr	r3, [r7, #32]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d007      	beq.n	800ce8e <HAL_RCC_OscConfig+0x162>
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	2b18      	cmp	r3, #24
 800ce82:	d137      	bne.n	800cef4 <HAL_RCC_OscConfig+0x1c8>
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d132      	bne.n	800cef4 <HAL_RCC_OscConfig+0x1c8>
 800ce8e:	4b38      	ldr	r3, [pc, #224]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d005      	beq.n	800cea6 <HAL_RCC_OscConfig+0x17a>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <HAL_RCC_OscConfig+0x17a>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e314      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800cea6:	4b32      	ldr	r3, [pc, #200]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f023 0219 	bic.w	r2, r3, #25
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	492f      	ldr	r1, [pc, #188]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	600b      	str	r3, [r1, #0]
 800ceb8:	f7fb fdbc 	bl	8008a34 <HAL_GetTick>
 800cebc:	6278      	str	r0, [r7, #36]	@ 0x24
 800cebe:	e008      	b.n	800ced2 <HAL_RCC_OscConfig+0x1a6>
 800cec0:	f7fb fdb8 	bl	8008a34 <HAL_GetTick>
 800cec4:	4602      	mov	r2, r0
 800cec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d901      	bls.n	800ced2 <HAL_RCC_OscConfig+0x1a6>
 800cece:	2303      	movs	r3, #3
 800ced0:	e2fe      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800ced2:	4b27      	ldr	r3, [pc, #156]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 0304 	and.w	r3, r3, #4
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0f0      	beq.n	800cec0 <HAL_RCC_OscConfig+0x194>
 800cede:	4b24      	ldr	r3, [pc, #144]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	061b      	lsls	r3, r3, #24
 800ceec:	4920      	ldr	r1, [pc, #128]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800ceee:	4313      	orrs	r3, r2
 800cef0:	604b      	str	r3, [r1, #4]
 800cef2:	e045      	b.n	800cf80 <HAL_RCC_OscConfig+0x254>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d026      	beq.n	800cf4a <HAL_RCC_OscConfig+0x21e>
 800cefc:	4b1c      	ldr	r3, [pc, #112]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f023 0219 	bic.w	r2, r3, #25
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	4919      	ldr	r1, [pc, #100]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	600b      	str	r3, [r1, #0]
 800cf0e:	f7fb fd91 	bl	8008a34 <HAL_GetTick>
 800cf12:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf14:	e008      	b.n	800cf28 <HAL_RCC_OscConfig+0x1fc>
 800cf16:	f7fb fd8d 	bl	8008a34 <HAL_GetTick>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d901      	bls.n	800cf28 <HAL_RCC_OscConfig+0x1fc>
 800cf24:	2303      	movs	r3, #3
 800cf26:	e2d3      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800cf28:	4b11      	ldr	r3, [pc, #68]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d0f0      	beq.n	800cf16 <HAL_RCC_OscConfig+0x1ea>
 800cf34:	4b0e      	ldr	r3, [pc, #56]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	061b      	lsls	r3, r3, #24
 800cf42:	490b      	ldr	r1, [pc, #44]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cf44:	4313      	orrs	r3, r2
 800cf46:	604b      	str	r3, [r1, #4]
 800cf48:	e01a      	b.n	800cf80 <HAL_RCC_OscConfig+0x254>
 800cf4a:	4b09      	ldr	r3, [pc, #36]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a08      	ldr	r2, [pc, #32]	@ (800cf70 <HAL_RCC_OscConfig+0x244>)
 800cf50:	f023 0301 	bic.w	r3, r3, #1
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	f7fb fd6d 	bl	8008a34 <HAL_GetTick>
 800cf5a:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf5c:	e00a      	b.n	800cf74 <HAL_RCC_OscConfig+0x248>
 800cf5e:	f7fb fd69 	bl	8008a34 <HAL_GetTick>
 800cf62:	4602      	mov	r2, r0
 800cf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d903      	bls.n	800cf74 <HAL_RCC_OscConfig+0x248>
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	e2af      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800cf70:	58024400 	.word	0x58024400
 800cf74:	4b96      	ldr	r3, [pc, #600]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0304 	and.w	r3, r3, #4
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1ee      	bne.n	800cf5e <HAL_RCC_OscConfig+0x232>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 0310 	and.w	r3, r3, #16
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d06a      	beq.n	800d062 <HAL_RCC_OscConfig+0x336>
 800cf8c:	4b90      	ldr	r3, [pc, #576]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf94:	61bb      	str	r3, [r7, #24]
 800cf96:	4b8e      	ldr	r3, [pc, #568]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cf98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	2b08      	cmp	r3, #8
 800cfa0:	d007      	beq.n	800cfb2 <HAL_RCC_OscConfig+0x286>
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	2b18      	cmp	r3, #24
 800cfa6:	d11b      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x2b4>
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	f003 0303 	and.w	r3, r3, #3
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d116      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x2b4>
 800cfb2:	4b87      	ldr	r3, [pc, #540]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d005      	beq.n	800cfca <HAL_RCC_OscConfig+0x29e>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	69db      	ldr	r3, [r3, #28]
 800cfc2:	2b80      	cmp	r3, #128	@ 0x80
 800cfc4:	d001      	beq.n	800cfca <HAL_RCC_OscConfig+0x29e>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e282      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800cfca:	4b81      	ldr	r3, [pc, #516]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a1b      	ldr	r3, [r3, #32]
 800cfd6:	061b      	lsls	r3, r3, #24
 800cfd8:	497d      	ldr	r1, [pc, #500]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	60cb      	str	r3, [r1, #12]
 800cfde:	e040      	b.n	800d062 <HAL_RCC_OscConfig+0x336>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d023      	beq.n	800d030 <HAL_RCC_OscConfig+0x304>
 800cfe8:	4b79      	ldr	r3, [pc, #484]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a78      	ldr	r2, [pc, #480]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800cfee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	f7fb fd1e 	bl	8008a34 <HAL_GetTick>
 800cff8:	6278      	str	r0, [r7, #36]	@ 0x24
 800cffa:	e008      	b.n	800d00e <HAL_RCC_OscConfig+0x2e2>
 800cffc:	f7fb fd1a 	bl	8008a34 <HAL_GetTick>
 800d000:	4602      	mov	r2, r0
 800d002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	2b02      	cmp	r3, #2
 800d008:	d901      	bls.n	800d00e <HAL_RCC_OscConfig+0x2e2>
 800d00a:	2303      	movs	r3, #3
 800d00c:	e260      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d00e:	4b70      	ldr	r3, [pc, #448]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d016:	2b00      	cmp	r3, #0
 800d018:	d0f0      	beq.n	800cffc <HAL_RCC_OscConfig+0x2d0>
 800d01a:	4b6d      	ldr	r3, [pc, #436]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a1b      	ldr	r3, [r3, #32]
 800d026:	061b      	lsls	r3, r3, #24
 800d028:	4969      	ldr	r1, [pc, #420]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	60cb      	str	r3, [r1, #12]
 800d02e:	e018      	b.n	800d062 <HAL_RCC_OscConfig+0x336>
 800d030:	4b67      	ldr	r3, [pc, #412]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a66      	ldr	r2, [pc, #408]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	f7fb fcfa 	bl	8008a34 <HAL_GetTick>
 800d040:	6278      	str	r0, [r7, #36]	@ 0x24
 800d042:	e008      	b.n	800d056 <HAL_RCC_OscConfig+0x32a>
 800d044:	f7fb fcf6 	bl	8008a34 <HAL_GetTick>
 800d048:	4602      	mov	r2, r0
 800d04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d901      	bls.n	800d056 <HAL_RCC_OscConfig+0x32a>
 800d052:	2303      	movs	r3, #3
 800d054:	e23c      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d056:	4b5e      	ldr	r3, [pc, #376]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1f0      	bne.n	800d044 <HAL_RCC_OscConfig+0x318>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 0308 	and.w	r3, r3, #8
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d036      	beq.n	800d0dc <HAL_RCC_OscConfig+0x3b0>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d019      	beq.n	800d0aa <HAL_RCC_OscConfig+0x37e>
 800d076:	4b56      	ldr	r3, [pc, #344]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d07a:	4a55      	ldr	r2, [pc, #340]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d07c:	f043 0301 	orr.w	r3, r3, #1
 800d080:	6753      	str	r3, [r2, #116]	@ 0x74
 800d082:	f7fb fcd7 	bl	8008a34 <HAL_GetTick>
 800d086:	6278      	str	r0, [r7, #36]	@ 0x24
 800d088:	e008      	b.n	800d09c <HAL_RCC_OscConfig+0x370>
 800d08a:	f7fb fcd3 	bl	8008a34 <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d901      	bls.n	800d09c <HAL_RCC_OscConfig+0x370>
 800d098:	2303      	movs	r3, #3
 800d09a:	e219      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d09c:	4b4c      	ldr	r3, [pc, #304]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0a0:	f003 0302 	and.w	r3, r3, #2
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0f0      	beq.n	800d08a <HAL_RCC_OscConfig+0x35e>
 800d0a8:	e018      	b.n	800d0dc <HAL_RCC_OscConfig+0x3b0>
 800d0aa:	4b49      	ldr	r3, [pc, #292]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d0ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0ae:	4a48      	ldr	r2, [pc, #288]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d0b0:	f023 0301 	bic.w	r3, r3, #1
 800d0b4:	6753      	str	r3, [r2, #116]	@ 0x74
 800d0b6:	f7fb fcbd 	bl	8008a34 <HAL_GetTick>
 800d0ba:	6278      	str	r0, [r7, #36]	@ 0x24
 800d0bc:	e008      	b.n	800d0d0 <HAL_RCC_OscConfig+0x3a4>
 800d0be:	f7fb fcb9 	bl	8008a34 <HAL_GetTick>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d901      	bls.n	800d0d0 <HAL_RCC_OscConfig+0x3a4>
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e1ff      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d0d0:	4b3f      	ldr	r3, [pc, #252]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d0d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0d4:	f003 0302 	and.w	r3, r3, #2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1f0      	bne.n	800d0be <HAL_RCC_OscConfig+0x392>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 0320 	and.w	r3, r3, #32
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d036      	beq.n	800d156 <HAL_RCC_OscConfig+0x42a>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	699b      	ldr	r3, [r3, #24]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d019      	beq.n	800d124 <HAL_RCC_OscConfig+0x3f8>
 800d0f0:	4b37      	ldr	r3, [pc, #220]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a36      	ldr	r2, [pc, #216]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d0f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	f7fb fc9a 	bl	8008a34 <HAL_GetTick>
 800d100:	6278      	str	r0, [r7, #36]	@ 0x24
 800d102:	e008      	b.n	800d116 <HAL_RCC_OscConfig+0x3ea>
 800d104:	f7fb fc96 	bl	8008a34 <HAL_GetTick>
 800d108:	4602      	mov	r2, r0
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	2b02      	cmp	r3, #2
 800d110:	d901      	bls.n	800d116 <HAL_RCC_OscConfig+0x3ea>
 800d112:	2303      	movs	r3, #3
 800d114:	e1dc      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d116:	4b2e      	ldr	r3, [pc, #184]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d0f0      	beq.n	800d104 <HAL_RCC_OscConfig+0x3d8>
 800d122:	e018      	b.n	800d156 <HAL_RCC_OscConfig+0x42a>
 800d124:	4b2a      	ldr	r3, [pc, #168]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a29      	ldr	r2, [pc, #164]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d12a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d12e:	6013      	str	r3, [r2, #0]
 800d130:	f7fb fc80 	bl	8008a34 <HAL_GetTick>
 800d134:	6278      	str	r0, [r7, #36]	@ 0x24
 800d136:	e008      	b.n	800d14a <HAL_RCC_OscConfig+0x41e>
 800d138:	f7fb fc7c 	bl	8008a34 <HAL_GetTick>
 800d13c:	4602      	mov	r2, r0
 800d13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	2b02      	cmp	r3, #2
 800d144:	d901      	bls.n	800d14a <HAL_RCC_OscConfig+0x41e>
 800d146:	2303      	movs	r3, #3
 800d148:	e1c2      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d14a:	4b21      	ldr	r3, [pc, #132]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1f0      	bne.n	800d138 <HAL_RCC_OscConfig+0x40c>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f003 0304 	and.w	r3, r3, #4
 800d15e:	2b00      	cmp	r3, #0
 800d160:	f000 8086 	beq.w	800d270 <HAL_RCC_OscConfig+0x544>
 800d164:	4b1b      	ldr	r3, [pc, #108]	@ (800d1d4 <HAL_RCC_OscConfig+0x4a8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a1a      	ldr	r2, [pc, #104]	@ (800d1d4 <HAL_RCC_OscConfig+0x4a8>)
 800d16a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d16e:	6013      	str	r3, [r2, #0]
 800d170:	f7fb fc60 	bl	8008a34 <HAL_GetTick>
 800d174:	6278      	str	r0, [r7, #36]	@ 0x24
 800d176:	e008      	b.n	800d18a <HAL_RCC_OscConfig+0x45e>
 800d178:	f7fb fc5c 	bl	8008a34 <HAL_GetTick>
 800d17c:	4602      	mov	r2, r0
 800d17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	2b64      	cmp	r3, #100	@ 0x64
 800d184:	d901      	bls.n	800d18a <HAL_RCC_OscConfig+0x45e>
 800d186:	2303      	movs	r3, #3
 800d188:	e1a2      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d18a:	4b12      	ldr	r3, [pc, #72]	@ (800d1d4 <HAL_RCC_OscConfig+0x4a8>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0f0      	beq.n	800d178 <HAL_RCC_OscConfig+0x44c>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d106      	bne.n	800d1ac <HAL_RCC_OscConfig+0x480>
 800d19e:	4b0c      	ldr	r3, [pc, #48]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d1a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1a2:	4a0b      	ldr	r2, [pc, #44]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d1a4:	f043 0301 	orr.w	r3, r3, #1
 800d1a8:	6713      	str	r3, [r2, #112]	@ 0x70
 800d1aa:	e032      	b.n	800d212 <HAL_RCC_OscConfig+0x4e6>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d111      	bne.n	800d1d8 <HAL_RCC_OscConfig+0x4ac>
 800d1b4:	4b06      	ldr	r3, [pc, #24]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d1b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1b8:	4a05      	ldr	r2, [pc, #20]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d1ba:	f023 0301 	bic.w	r3, r3, #1
 800d1be:	6713      	str	r3, [r2, #112]	@ 0x70
 800d1c0:	4b03      	ldr	r3, [pc, #12]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d1c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1c4:	4a02      	ldr	r2, [pc, #8]	@ (800d1d0 <HAL_RCC_OscConfig+0x4a4>)
 800d1c6:	f023 0304 	bic.w	r3, r3, #4
 800d1ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800d1cc:	e021      	b.n	800d212 <HAL_RCC_OscConfig+0x4e6>
 800d1ce:	bf00      	nop
 800d1d0:	58024400 	.word	0x58024400
 800d1d4:	58024800 	.word	0x58024800
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	2b05      	cmp	r3, #5
 800d1de:	d10c      	bne.n	800d1fa <HAL_RCC_OscConfig+0x4ce>
 800d1e0:	4b83      	ldr	r3, [pc, #524]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d1e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1e4:	4a82      	ldr	r2, [pc, #520]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d1e6:	f043 0304 	orr.w	r3, r3, #4
 800d1ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800d1ec:	4b80      	ldr	r3, [pc, #512]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d1ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1f0:	4a7f      	ldr	r2, [pc, #508]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d1f2:	f043 0301 	orr.w	r3, r3, #1
 800d1f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d1f8:	e00b      	b.n	800d212 <HAL_RCC_OscConfig+0x4e6>
 800d1fa:	4b7d      	ldr	r3, [pc, #500]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1fe:	4a7c      	ldr	r2, [pc, #496]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d200:	f023 0301 	bic.w	r3, r3, #1
 800d204:	6713      	str	r3, [r2, #112]	@ 0x70
 800d206:	4b7a      	ldr	r3, [pc, #488]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d20a:	4a79      	ldr	r2, [pc, #484]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d20c:	f023 0304 	bic.w	r3, r3, #4
 800d210:	6713      	str	r3, [r2, #112]	@ 0x70
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d015      	beq.n	800d246 <HAL_RCC_OscConfig+0x51a>
 800d21a:	f7fb fc0b 	bl	8008a34 <HAL_GetTick>
 800d21e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d220:	e00a      	b.n	800d238 <HAL_RCC_OscConfig+0x50c>
 800d222:	f7fb fc07 	bl	8008a34 <HAL_GetTick>
 800d226:	4602      	mov	r2, r0
 800d228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d230:	4293      	cmp	r3, r2
 800d232:	d901      	bls.n	800d238 <HAL_RCC_OscConfig+0x50c>
 800d234:	2303      	movs	r3, #3
 800d236:	e14b      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d238:	4b6d      	ldr	r3, [pc, #436]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d23a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d23c:	f003 0302 	and.w	r3, r3, #2
 800d240:	2b00      	cmp	r3, #0
 800d242:	d0ee      	beq.n	800d222 <HAL_RCC_OscConfig+0x4f6>
 800d244:	e014      	b.n	800d270 <HAL_RCC_OscConfig+0x544>
 800d246:	f7fb fbf5 	bl	8008a34 <HAL_GetTick>
 800d24a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d24c:	e00a      	b.n	800d264 <HAL_RCC_OscConfig+0x538>
 800d24e:	f7fb fbf1 	bl	8008a34 <HAL_GetTick>
 800d252:	4602      	mov	r2, r0
 800d254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d901      	bls.n	800d264 <HAL_RCC_OscConfig+0x538>
 800d260:	2303      	movs	r3, #3
 800d262:	e135      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d264:	4b62      	ldr	r3, [pc, #392]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d268:	f003 0302 	and.w	r3, r3, #2
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1ee      	bne.n	800d24e <HAL_RCC_OscConfig+0x522>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d274:	2b00      	cmp	r3, #0
 800d276:	f000 812a 	beq.w	800d4ce <HAL_RCC_OscConfig+0x7a2>
 800d27a:	4b5d      	ldr	r3, [pc, #372]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d282:	2b18      	cmp	r3, #24
 800d284:	f000 80ba 	beq.w	800d3fc <HAL_RCC_OscConfig+0x6d0>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	f040 8095 	bne.w	800d3bc <HAL_RCC_OscConfig+0x690>
 800d292:	4b57      	ldr	r3, [pc, #348]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a56      	ldr	r2, [pc, #344]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d298:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	f7fb fbc9 	bl	8008a34 <HAL_GetTick>
 800d2a2:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2a4:	e008      	b.n	800d2b8 <HAL_RCC_OscConfig+0x58c>
 800d2a6:	f7fb fbc5 	bl	8008a34 <HAL_GetTick>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d901      	bls.n	800d2b8 <HAL_RCC_OscConfig+0x58c>
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	e10b      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d2b8:	4b4d      	ldr	r3, [pc, #308]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1f0      	bne.n	800d2a6 <HAL_RCC_OscConfig+0x57a>
 800d2c4:	4b4a      	ldr	r3, [pc, #296]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d2c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d2c8:	4b4a      	ldr	r3, [pc, #296]	@ (800d3f4 <HAL_RCC_OscConfig+0x6c8>)
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d2d4:	0112      	lsls	r2, r2, #4
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	4945      	ldr	r1, [pc, #276]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	628b      	str	r3, [r1, #40]	@ 0x28
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	025b      	lsls	r3, r3, #9
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	431a      	orrs	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	041b      	lsls	r3, r3, #16
 800d2fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d300:	431a      	orrs	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d306:	3b01      	subs	r3, #1
 800d308:	061b      	lsls	r3, r3, #24
 800d30a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d30e:	4938      	ldr	r1, [pc, #224]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d310:	4313      	orrs	r3, r2
 800d312:	630b      	str	r3, [r1, #48]	@ 0x30
 800d314:	4b36      	ldr	r3, [pc, #216]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d318:	4a35      	ldr	r2, [pc, #212]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d31a:	f023 0301 	bic.w	r3, r3, #1
 800d31e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d320:	4b33      	ldr	r3, [pc, #204]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d324:	4b34      	ldr	r3, [pc, #208]	@ (800d3f8 <HAL_RCC_OscConfig+0x6cc>)
 800d326:	4013      	ands	r3, r2
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d32c:	00d2      	lsls	r2, r2, #3
 800d32e:	4930      	ldr	r1, [pc, #192]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d330:	4313      	orrs	r3, r2
 800d332:	634b      	str	r3, [r1, #52]	@ 0x34
 800d334:	4b2e      	ldr	r3, [pc, #184]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d338:	f023 020c 	bic.w	r2, r3, #12
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d340:	492b      	ldr	r1, [pc, #172]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d342:	4313      	orrs	r3, r2
 800d344:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d346:	4b2a      	ldr	r3, [pc, #168]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d34a:	f023 0202 	bic.w	r2, r3, #2
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d352:	4927      	ldr	r1, [pc, #156]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d354:	4313      	orrs	r3, r2
 800d356:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d358:	4b25      	ldr	r3, [pc, #148]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35c:	4a24      	ldr	r2, [pc, #144]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d35e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d362:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d364:	4b22      	ldr	r3, [pc, #136]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d368:	4a21      	ldr	r2, [pc, #132]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d36a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d36e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d370:	4b1f      	ldr	r3, [pc, #124]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d374:	4a1e      	ldr	r2, [pc, #120]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d376:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d37a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d37c:	4b1c      	ldr	r3, [pc, #112]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d380:	4a1b      	ldr	r2, [pc, #108]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d382:	f043 0301 	orr.w	r3, r3, #1
 800d386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d388:	4b19      	ldr	r3, [pc, #100]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a18      	ldr	r2, [pc, #96]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d38e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	f7fb fb4e 	bl	8008a34 <HAL_GetTick>
 800d398:	6278      	str	r0, [r7, #36]	@ 0x24
 800d39a:	e008      	b.n	800d3ae <HAL_RCC_OscConfig+0x682>
 800d39c:	f7fb fb4a 	bl	8008a34 <HAL_GetTick>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d901      	bls.n	800d3ae <HAL_RCC_OscConfig+0x682>
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e090      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d3ae:	4b10      	ldr	r3, [pc, #64]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0f0      	beq.n	800d39c <HAL_RCC_OscConfig+0x670>
 800d3ba:	e088      	b.n	800d4ce <HAL_RCC_OscConfig+0x7a2>
 800d3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a0b      	ldr	r2, [pc, #44]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d3c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	f7fb fb34 	bl	8008a34 <HAL_GetTick>
 800d3cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d3ce:	e008      	b.n	800d3e2 <HAL_RCC_OscConfig+0x6b6>
 800d3d0:	f7fb fb30 	bl	8008a34 <HAL_GetTick>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d901      	bls.n	800d3e2 <HAL_RCC_OscConfig+0x6b6>
 800d3de:	2303      	movs	r3, #3
 800d3e0:	e076      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d3e2:	4b03      	ldr	r3, [pc, #12]	@ (800d3f0 <HAL_RCC_OscConfig+0x6c4>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1f0      	bne.n	800d3d0 <HAL_RCC_OscConfig+0x6a4>
 800d3ee:	e06e      	b.n	800d4ce <HAL_RCC_OscConfig+0x7a2>
 800d3f0:	58024400 	.word	0x58024400
 800d3f4:	fffffc0c 	.word	0xfffffc0c
 800d3f8:	ffff0007 	.word	0xffff0007
 800d3fc:	4b36      	ldr	r3, [pc, #216]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d400:	613b      	str	r3, [r7, #16]
 800d402:	4b35      	ldr	r3, [pc, #212]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d406:	60fb      	str	r3, [r7, #12]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d031      	beq.n	800d474 <HAL_RCC_OscConfig+0x748>
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f003 0203 	and.w	r2, r3, #3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d12a      	bne.n	800d474 <HAL_RCC_OscConfig+0x748>
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	091b      	lsrs	r3, r3, #4
 800d422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d122      	bne.n	800d474 <HAL_RCC_OscConfig+0x748>
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d438:	3b01      	subs	r3, #1
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d11a      	bne.n	800d474 <HAL_RCC_OscConfig+0x748>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	0a5b      	lsrs	r3, r3, #9
 800d442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d44a:	3b01      	subs	r3, #1
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d111      	bne.n	800d474 <HAL_RCC_OscConfig+0x748>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	0c1b      	lsrs	r3, r3, #16
 800d454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d45c:	3b01      	subs	r3, #1
 800d45e:	429a      	cmp	r2, r3
 800d460:	d108      	bne.n	800d474 <HAL_RCC_OscConfig+0x748>
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	0e1b      	lsrs	r3, r3, #24
 800d466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d46e:	3b01      	subs	r3, #1
 800d470:	429a      	cmp	r2, r3
 800d472:	d001      	beq.n	800d478 <HAL_RCC_OscConfig+0x74c>
 800d474:	2301      	movs	r3, #1
 800d476:	e02b      	b.n	800d4d0 <HAL_RCC_OscConfig+0x7a4>
 800d478:	4b17      	ldr	r3, [pc, #92]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d47a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d47c:	08db      	lsrs	r3, r3, #3
 800d47e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d482:	613b      	str	r3, [r7, #16]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d488:	693a      	ldr	r2, [r7, #16]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d01f      	beq.n	800d4ce <HAL_RCC_OscConfig+0x7a2>
 800d48e:	4b12      	ldr	r3, [pc, #72]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d492:	4a11      	ldr	r2, [pc, #68]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d494:	f023 0301 	bic.w	r3, r3, #1
 800d498:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d49a:	f7fb facb 	bl	8008a34 <HAL_GetTick>
 800d49e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d4a0:	bf00      	nop
 800d4a2:	f7fb fac7 	bl	8008a34 <HAL_GetTick>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d0f9      	beq.n	800d4a2 <HAL_RCC_OscConfig+0x776>
 800d4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d4b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d4dc <HAL_RCC_OscConfig+0x7b0>)
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d4ba:	00d2      	lsls	r2, r2, #3
 800d4bc:	4906      	ldr	r1, [pc, #24]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	634b      	str	r3, [r1, #52]	@ 0x34
 800d4c2:	4b05      	ldr	r3, [pc, #20]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c6:	4a04      	ldr	r2, [pc, #16]	@ (800d4d8 <HAL_RCC_OscConfig+0x7ac>)
 800d4c8:	f043 0301 	orr.w	r3, r3, #1
 800d4cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3730      	adds	r7, #48	@ 0x30
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	58024400 	.word	0x58024400
 800d4dc:	ffff0007 	.word	0xffff0007

0800d4e0 <HAL_RCC_ClockConfig>:
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <HAL_RCC_ClockConfig+0x14>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e19c      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d4f4:	4b8a      	ldr	r3, [pc, #552]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d910      	bls.n	800d524 <HAL_RCC_ClockConfig+0x44>
 800d502:	4b87      	ldr	r3, [pc, #540]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f023 020f 	bic.w	r2, r3, #15
 800d50a:	4985      	ldr	r1, [pc, #532]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	4313      	orrs	r3, r2
 800d510:	600b      	str	r3, [r1, #0]
 800d512:	4b83      	ldr	r3, [pc, #524]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 030f 	and.w	r3, r3, #15
 800d51a:	683a      	ldr	r2, [r7, #0]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d001      	beq.n	800d524 <HAL_RCC_ClockConfig+0x44>
 800d520:	2301      	movs	r3, #1
 800d522:	e184      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 0304 	and.w	r3, r3, #4
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d010      	beq.n	800d552 <HAL_RCC_ClockConfig+0x72>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	691a      	ldr	r2, [r3, #16]
 800d534:	4b7b      	ldr	r3, [pc, #492]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d536:	699b      	ldr	r3, [r3, #24]
 800d538:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d908      	bls.n	800d552 <HAL_RCC_ClockConfig+0x72>
 800d540:	4b78      	ldr	r3, [pc, #480]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	4975      	ldr	r1, [pc, #468]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d54e:	4313      	orrs	r3, r2
 800d550:	618b      	str	r3, [r1, #24]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 0308 	and.w	r3, r3, #8
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d010      	beq.n	800d580 <HAL_RCC_ClockConfig+0xa0>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	695a      	ldr	r2, [r3, #20]
 800d562:	4b70      	ldr	r3, [pc, #448]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d564:	69db      	ldr	r3, [r3, #28]
 800d566:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d908      	bls.n	800d580 <HAL_RCC_ClockConfig+0xa0>
 800d56e:	4b6d      	ldr	r3, [pc, #436]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	496a      	ldr	r1, [pc, #424]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d57c:	4313      	orrs	r3, r2
 800d57e:	61cb      	str	r3, [r1, #28]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f003 0310 	and.w	r3, r3, #16
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d010      	beq.n	800d5ae <HAL_RCC_ClockConfig+0xce>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	699a      	ldr	r2, [r3, #24]
 800d590:	4b64      	ldr	r3, [pc, #400]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d598:	429a      	cmp	r2, r3
 800d59a:	d908      	bls.n	800d5ae <HAL_RCC_ClockConfig+0xce>
 800d59c:	4b61      	ldr	r3, [pc, #388]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	495e      	ldr	r1, [pc, #376]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	61cb      	str	r3, [r1, #28]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f003 0320 	and.w	r3, r3, #32
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d010      	beq.n	800d5dc <HAL_RCC_ClockConfig+0xfc>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	69da      	ldr	r2, [r3, #28]
 800d5be:	4b59      	ldr	r3, [pc, #356]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d908      	bls.n	800d5dc <HAL_RCC_ClockConfig+0xfc>
 800d5ca:	4b56      	ldr	r3, [pc, #344]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	4953      	ldr	r1, [pc, #332]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	620b      	str	r3, [r1, #32]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 0302 	and.w	r3, r3, #2
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d010      	beq.n	800d60a <HAL_RCC_ClockConfig+0x12a>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68da      	ldr	r2, [r3, #12]
 800d5ec:	4b4d      	ldr	r3, [pc, #308]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	f003 030f 	and.w	r3, r3, #15
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d908      	bls.n	800d60a <HAL_RCC_ClockConfig+0x12a>
 800d5f8:	4b4a      	ldr	r3, [pc, #296]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d5fa:	699b      	ldr	r3, [r3, #24]
 800d5fc:	f023 020f 	bic.w	r2, r3, #15
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	4947      	ldr	r1, [pc, #284]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d606:	4313      	orrs	r3, r2
 800d608:	618b      	str	r3, [r1, #24]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	2b00      	cmp	r3, #0
 800d614:	d055      	beq.n	800d6c2 <HAL_RCC_ClockConfig+0x1e2>
 800d616:	4b43      	ldr	r3, [pc, #268]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	4940      	ldr	r1, [pc, #256]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d624:	4313      	orrs	r3, r2
 800d626:	618b      	str	r3, [r1, #24]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	d107      	bne.n	800d640 <HAL_RCC_ClockConfig+0x160>
 800d630:	4b3c      	ldr	r3, [pc, #240]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d121      	bne.n	800d680 <HAL_RCC_ClockConfig+0x1a0>
 800d63c:	2301      	movs	r3, #1
 800d63e:	e0f6      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	2b03      	cmp	r3, #3
 800d646:	d107      	bne.n	800d658 <HAL_RCC_ClockConfig+0x178>
 800d648:	4b36      	ldr	r3, [pc, #216]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d650:	2b00      	cmp	r3, #0
 800d652:	d115      	bne.n	800d680 <HAL_RCC_ClockConfig+0x1a0>
 800d654:	2301      	movs	r3, #1
 800d656:	e0ea      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d107      	bne.n	800d670 <HAL_RCC_ClockConfig+0x190>
 800d660:	4b30      	ldr	r3, [pc, #192]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d109      	bne.n	800d680 <HAL_RCC_ClockConfig+0x1a0>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e0de      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d670:	4b2c      	ldr	r3, [pc, #176]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 0304 	and.w	r3, r3, #4
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d101      	bne.n	800d680 <HAL_RCC_ClockConfig+0x1a0>
 800d67c:	2301      	movs	r3, #1
 800d67e:	e0d6      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d680:	4b28      	ldr	r3, [pc, #160]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	f023 0207 	bic.w	r2, r3, #7
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	4925      	ldr	r1, [pc, #148]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d68e:	4313      	orrs	r3, r2
 800d690:	610b      	str	r3, [r1, #16]
 800d692:	f7fb f9cf 	bl	8008a34 <HAL_GetTick>
 800d696:	6178      	str	r0, [r7, #20]
 800d698:	e00a      	b.n	800d6b0 <HAL_RCC_ClockConfig+0x1d0>
 800d69a:	f7fb f9cb 	bl	8008a34 <HAL_GetTick>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d901      	bls.n	800d6b0 <HAL_RCC_ClockConfig+0x1d0>
 800d6ac:	2303      	movs	r3, #3
 800d6ae:	e0be      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d6b0:	4b1c      	ldr	r3, [pc, #112]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	00db      	lsls	r3, r3, #3
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d1eb      	bne.n	800d69a <HAL_RCC_ClockConfig+0x1ba>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 0302 	and.w	r3, r3, #2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d010      	beq.n	800d6f0 <HAL_RCC_ClockConfig+0x210>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68da      	ldr	r2, [r3, #12]
 800d6d2:	4b14      	ldr	r3, [pc, #80]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	f003 030f 	and.w	r3, r3, #15
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d208      	bcs.n	800d6f0 <HAL_RCC_ClockConfig+0x210>
 800d6de:	4b11      	ldr	r3, [pc, #68]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	f023 020f 	bic.w	r2, r3, #15
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	490e      	ldr	r1, [pc, #56]	@ (800d724 <HAL_RCC_ClockConfig+0x244>)
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	618b      	str	r3, [r1, #24]
 800d6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 030f 	and.w	r3, r3, #15
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d214      	bcs.n	800d728 <HAL_RCC_ClockConfig+0x248>
 800d6fe:	4b08      	ldr	r3, [pc, #32]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f023 020f 	bic.w	r2, r3, #15
 800d706:	4906      	ldr	r1, [pc, #24]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	600b      	str	r3, [r1, #0]
 800d70e:	4b04      	ldr	r3, [pc, #16]	@ (800d720 <HAL_RCC_ClockConfig+0x240>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 030f 	and.w	r3, r3, #15
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d005      	beq.n	800d728 <HAL_RCC_ClockConfig+0x248>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e086      	b.n	800d82e <HAL_RCC_ClockConfig+0x34e>
 800d720:	52002000 	.word	0x52002000
 800d724:	58024400 	.word	0x58024400
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f003 0304 	and.w	r3, r3, #4
 800d730:	2b00      	cmp	r3, #0
 800d732:	d010      	beq.n	800d756 <HAL_RCC_ClockConfig+0x276>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	691a      	ldr	r2, [r3, #16]
 800d738:	4b3f      	ldr	r3, [pc, #252]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d740:	429a      	cmp	r2, r3
 800d742:	d208      	bcs.n	800d756 <HAL_RCC_ClockConfig+0x276>
 800d744:	4b3c      	ldr	r3, [pc, #240]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d746:	699b      	ldr	r3, [r3, #24]
 800d748:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	4939      	ldr	r1, [pc, #228]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d752:	4313      	orrs	r3, r2
 800d754:	618b      	str	r3, [r1, #24]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0308 	and.w	r3, r3, #8
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d010      	beq.n	800d784 <HAL_RCC_ClockConfig+0x2a4>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	695a      	ldr	r2, [r3, #20]
 800d766:	4b34      	ldr	r3, [pc, #208]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d76e:	429a      	cmp	r2, r3
 800d770:	d208      	bcs.n	800d784 <HAL_RCC_ClockConfig+0x2a4>
 800d772:	4b31      	ldr	r3, [pc, #196]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	695b      	ldr	r3, [r3, #20]
 800d77e:	492e      	ldr	r1, [pc, #184]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d780:	4313      	orrs	r3, r2
 800d782:	61cb      	str	r3, [r1, #28]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f003 0310 	and.w	r3, r3, #16
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d010      	beq.n	800d7b2 <HAL_RCC_ClockConfig+0x2d2>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	699a      	ldr	r2, [r3, #24]
 800d794:	4b28      	ldr	r3, [pc, #160]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d796:	69db      	ldr	r3, [r3, #28]
 800d798:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d208      	bcs.n	800d7b2 <HAL_RCC_ClockConfig+0x2d2>
 800d7a0:	4b25      	ldr	r3, [pc, #148]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d7a2:	69db      	ldr	r3, [r3, #28]
 800d7a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	4922      	ldr	r1, [pc, #136]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	61cb      	str	r3, [r1, #28]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d010      	beq.n	800d7e0 <HAL_RCC_ClockConfig+0x300>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	69da      	ldr	r2, [r3, #28]
 800d7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d7c4:	6a1b      	ldr	r3, [r3, #32]
 800d7c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d208      	bcs.n	800d7e0 <HAL_RCC_ClockConfig+0x300>
 800d7ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	69db      	ldr	r3, [r3, #28]
 800d7da:	4917      	ldr	r1, [pc, #92]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	620b      	str	r3, [r1, #32]
 800d7e0:	f000 f844 	bl	800d86c <HAL_RCC_GetSysClockFreq>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	4b14      	ldr	r3, [pc, #80]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d7e8:	699b      	ldr	r3, [r3, #24]
 800d7ea:	0a1b      	lsrs	r3, r3, #8
 800d7ec:	f003 030f 	and.w	r3, r3, #15
 800d7f0:	4912      	ldr	r1, [pc, #72]	@ (800d83c <HAL_RCC_ClockConfig+0x35c>)
 800d7f2:	5ccb      	ldrb	r3, [r1, r3]
 800d7f4:	f003 031f 	and.w	r3, r3, #31
 800d7f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7fc:	613b      	str	r3, [r7, #16]
 800d7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d838 <HAL_RCC_ClockConfig+0x358>)
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	f003 030f 	and.w	r3, r3, #15
 800d806:	4a0d      	ldr	r2, [pc, #52]	@ (800d83c <HAL_RCC_ClockConfig+0x35c>)
 800d808:	5cd3      	ldrb	r3, [r2, r3]
 800d80a:	f003 031f 	and.w	r3, r3, #31
 800d80e:	693a      	ldr	r2, [r7, #16]
 800d810:	fa22 f303 	lsr.w	r3, r2, r3
 800d814:	4a0a      	ldr	r2, [pc, #40]	@ (800d840 <HAL_RCC_ClockConfig+0x360>)
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	4a0a      	ldr	r2, [pc, #40]	@ (800d844 <HAL_RCC_ClockConfig+0x364>)
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	6013      	str	r3, [r2, #0]
 800d81e:	4b0a      	ldr	r3, [pc, #40]	@ (800d848 <HAL_RCC_ClockConfig+0x368>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4618      	mov	r0, r3
 800d824:	f7fb f8bc 	bl	80089a0 <HAL_InitTick>
 800d828:	4603      	mov	r3, r0
 800d82a:	73fb      	strb	r3, [r7, #15]
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	58024400 	.word	0x58024400
 800d83c:	0801cb14 	.word	0x0801cb14
 800d840:	24000150 	.word	0x24000150
 800d844:	2400014c 	.word	0x2400014c
 800d848:	24000154 	.word	0x24000154

0800d84c <HAL_RCC_EnableCSS>:
 800d84c:	b480      	push	{r7}
 800d84e:	af00      	add	r7, sp, #0
 800d850:	4b05      	ldr	r3, [pc, #20]	@ (800d868 <HAL_RCC_EnableCSS+0x1c>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a04      	ldr	r2, [pc, #16]	@ (800d868 <HAL_RCC_EnableCSS+0x1c>)
 800d856:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d85a:	6013      	str	r3, [r2, #0]
 800d85c:	bf00      	nop
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	58024400 	.word	0x58024400

0800d86c <HAL_RCC_GetSysClockFreq>:
 800d86c:	b480      	push	{r7}
 800d86e:	b089      	sub	sp, #36	@ 0x24
 800d870:	af00      	add	r7, sp, #0
 800d872:	4bb3      	ldr	r3, [pc, #716]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d87a:	2b18      	cmp	r3, #24
 800d87c:	f200 8155 	bhi.w	800db2a <HAL_RCC_GetSysClockFreq+0x2be>
 800d880:	a201      	add	r2, pc, #4	@ (adr r2, 800d888 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d886:	bf00      	nop
 800d888:	0800d8ed 	.word	0x0800d8ed
 800d88c:	0800db2b 	.word	0x0800db2b
 800d890:	0800db2b 	.word	0x0800db2b
 800d894:	0800db2b 	.word	0x0800db2b
 800d898:	0800db2b 	.word	0x0800db2b
 800d89c:	0800db2b 	.word	0x0800db2b
 800d8a0:	0800db2b 	.word	0x0800db2b
 800d8a4:	0800db2b 	.word	0x0800db2b
 800d8a8:	0800d913 	.word	0x0800d913
 800d8ac:	0800db2b 	.word	0x0800db2b
 800d8b0:	0800db2b 	.word	0x0800db2b
 800d8b4:	0800db2b 	.word	0x0800db2b
 800d8b8:	0800db2b 	.word	0x0800db2b
 800d8bc:	0800db2b 	.word	0x0800db2b
 800d8c0:	0800db2b 	.word	0x0800db2b
 800d8c4:	0800db2b 	.word	0x0800db2b
 800d8c8:	0800d919 	.word	0x0800d919
 800d8cc:	0800db2b 	.word	0x0800db2b
 800d8d0:	0800db2b 	.word	0x0800db2b
 800d8d4:	0800db2b 	.word	0x0800db2b
 800d8d8:	0800db2b 	.word	0x0800db2b
 800d8dc:	0800db2b 	.word	0x0800db2b
 800d8e0:	0800db2b 	.word	0x0800db2b
 800d8e4:	0800db2b 	.word	0x0800db2b
 800d8e8:	0800d91f 	.word	0x0800d91f
 800d8ec:	4b94      	ldr	r3, [pc, #592]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f003 0320 	and.w	r3, r3, #32
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d009      	beq.n	800d90c <HAL_RCC_GetSysClockFreq+0xa0>
 800d8f8:	4b91      	ldr	r3, [pc, #580]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	08db      	lsrs	r3, r3, #3
 800d8fe:	f003 0303 	and.w	r3, r3, #3
 800d902:	4a90      	ldr	r2, [pc, #576]	@ (800db44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d904:	fa22 f303 	lsr.w	r3, r2, r3
 800d908:	61bb      	str	r3, [r7, #24]
 800d90a:	e111      	b.n	800db30 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d90c:	4b8d      	ldr	r3, [pc, #564]	@ (800db44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d90e:	61bb      	str	r3, [r7, #24]
 800d910:	e10e      	b.n	800db30 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d912:	4b8d      	ldr	r3, [pc, #564]	@ (800db48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d914:	61bb      	str	r3, [r7, #24]
 800d916:	e10b      	b.n	800db30 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d918:	4b8c      	ldr	r3, [pc, #560]	@ (800db4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d91a:	61bb      	str	r3, [r7, #24]
 800d91c:	e108      	b.n	800db30 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d91e:	4b88      	ldr	r3, [pc, #544]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d922:	f003 0303 	and.w	r3, r3, #3
 800d926:	617b      	str	r3, [r7, #20]
 800d928:	4b85      	ldr	r3, [pc, #532]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d92c:	091b      	lsrs	r3, r3, #4
 800d92e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d932:	613b      	str	r3, [r7, #16]
 800d934:	4b82      	ldr	r3, [pc, #520]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	4b80      	ldr	r3, [pc, #512]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d942:	08db      	lsrs	r3, r3, #3
 800d944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	fb02 f303 	mul.w	r3, r2, r3
 800d94e:	ee07 3a90 	vmov	s15, r3
 800d952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d956:	edc7 7a02 	vstr	s15, [r7, #8]
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 80e1 	beq.w	800db24 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2b02      	cmp	r3, #2
 800d966:	f000 8083 	beq.w	800da70 <HAL_RCC_GetSysClockFreq+0x204>
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	f200 80a1 	bhi.w	800dab4 <HAL_RCC_GetSysClockFreq+0x248>
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d003      	beq.n	800d980 <HAL_RCC_GetSysClockFreq+0x114>
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d056      	beq.n	800da2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d97e:	e099      	b.n	800dab4 <HAL_RCC_GetSysClockFreq+0x248>
 800d980:	4b6f      	ldr	r3, [pc, #444]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 0320 	and.w	r3, r3, #32
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d02d      	beq.n	800d9e8 <HAL_RCC_GetSysClockFreq+0x17c>
 800d98c:	4b6c      	ldr	r3, [pc, #432]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	08db      	lsrs	r3, r3, #3
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	4a6b      	ldr	r2, [pc, #428]	@ (800db44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d998:	fa22 f303 	lsr.w	r3, r2, r3
 800d99c:	607b      	str	r3, [r7, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	ee07 3a90 	vmov	s15, r3
 800d9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	ee07 3a90 	vmov	s15, r3
 800d9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9b6:	4b62      	ldr	r3, [pc, #392]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800db50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9e2:	edc7 7a07 	vstr	s15, [r7, #28]
 800d9e6:	e087      	b.n	800daf8 <HAL_RCC_GetSysClockFreq+0x28c>
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	ee07 3a90 	vmov	s15, r3
 800d9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800db54 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9fa:	4b51      	ldr	r3, [pc, #324]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da02:	ee07 3a90 	vmov	s15, r3
 800da06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800da0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800db50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da26:	edc7 7a07 	vstr	s15, [r7, #28]
 800da2a:	e065      	b.n	800daf8 <HAL_RCC_GetSysClockFreq+0x28c>
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	ee07 3a90 	vmov	s15, r3
 800da32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800db58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800da3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da3e:	4b40      	ldr	r3, [pc, #256]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800da52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800db50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da6a:	edc7 7a07 	vstr	s15, [r7, #28]
 800da6e:	e043      	b.n	800daf8 <HAL_RCC_GetSysClockFreq+0x28c>
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	ee07 3a90 	vmov	s15, r3
 800da76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800db5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800da7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da82:	4b2f      	ldr	r3, [pc, #188]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8a:	ee07 3a90 	vmov	s15, r3
 800da8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da92:	ed97 6a02 	vldr	s12, [r7, #8]
 800da96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800db50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daae:	edc7 7a07 	vstr	s15, [r7, #28]
 800dab2:	e021      	b.n	800daf8 <HAL_RCC_GetSysClockFreq+0x28c>
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	ee07 3a90 	vmov	s15, r3
 800daba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dabe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800db58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dac6:	4b1e      	ldr	r3, [pc, #120]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dace:	ee07 3a90 	vmov	s15, r3
 800dad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dad6:	ed97 6a02 	vldr	s12, [r7, #8]
 800dada:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800db50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf2:	edc7 7a07 	vstr	s15, [r7, #28]
 800daf6:	bf00      	nop
 800daf8:	4b11      	ldr	r3, [pc, #68]	@ (800db40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dafa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dafc:	0a5b      	lsrs	r3, r3, #9
 800dafe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db02:	3301      	adds	r3, #1
 800db04:	603b      	str	r3, [r7, #0]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	ee07 3a90 	vmov	s15, r3
 800db0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db10:	edd7 6a07 	vldr	s13, [r7, #28]
 800db14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1c:	ee17 3a90 	vmov	r3, s15
 800db20:	61bb      	str	r3, [r7, #24]
 800db22:	e005      	b.n	800db30 <HAL_RCC_GetSysClockFreq+0x2c4>
 800db24:	2300      	movs	r3, #0
 800db26:	61bb      	str	r3, [r7, #24]
 800db28:	e002      	b.n	800db30 <HAL_RCC_GetSysClockFreq+0x2c4>
 800db2a:	4b07      	ldr	r3, [pc, #28]	@ (800db48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	bf00      	nop
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	4618      	mov	r0, r3
 800db34:	3724      	adds	r7, #36	@ 0x24
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	58024400 	.word	0x58024400
 800db44:	03d09000 	.word	0x03d09000
 800db48:	003d0900 	.word	0x003d0900
 800db4c:	02dc6c00 	.word	0x02dc6c00
 800db50:	46000000 	.word	0x46000000
 800db54:	4c742400 	.word	0x4c742400
 800db58:	4a742400 	.word	0x4a742400
 800db5c:	4c371b00 	.word	0x4c371b00

0800db60 <HAL_RCC_GetHCLKFreq>:
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	f7ff fe81 	bl	800d86c <HAL_RCC_GetSysClockFreq>
 800db6a:	4602      	mov	r2, r0
 800db6c:	4b10      	ldr	r3, [pc, #64]	@ (800dbb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	0a1b      	lsrs	r3, r3, #8
 800db72:	f003 030f 	and.w	r3, r3, #15
 800db76:	490f      	ldr	r1, [pc, #60]	@ (800dbb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800db78:	5ccb      	ldrb	r3, [r1, r3]
 800db7a:	f003 031f 	and.w	r3, r3, #31
 800db7e:	fa22 f303 	lsr.w	r3, r2, r3
 800db82:	607b      	str	r3, [r7, #4]
 800db84:	4b0a      	ldr	r3, [pc, #40]	@ (800dbb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800db86:	699b      	ldr	r3, [r3, #24]
 800db88:	f003 030f 	and.w	r3, r3, #15
 800db8c:	4a09      	ldr	r2, [pc, #36]	@ (800dbb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800db8e:	5cd3      	ldrb	r3, [r2, r3]
 800db90:	f003 031f 	and.w	r3, r3, #31
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	fa22 f303 	lsr.w	r3, r2, r3
 800db9a:	4a07      	ldr	r2, [pc, #28]	@ (800dbb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	4a07      	ldr	r2, [pc, #28]	@ (800dbbc <HAL_RCC_GetHCLKFreq+0x5c>)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	4b04      	ldr	r3, [pc, #16]	@ (800dbb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	58024400 	.word	0x58024400
 800dbb4:	0801cb14 	.word	0x0801cb14
 800dbb8:	24000150 	.word	0x24000150
 800dbbc:	2400014c 	.word	0x2400014c

0800dbc0 <HAL_RCC_GetPCLK1Freq>:
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	f7ff ffcc 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	4b06      	ldr	r3, [pc, #24]	@ (800dbe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dbcc:	69db      	ldr	r3, [r3, #28]
 800dbce:	091b      	lsrs	r3, r3, #4
 800dbd0:	f003 0307 	and.w	r3, r3, #7
 800dbd4:	4904      	ldr	r1, [pc, #16]	@ (800dbe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dbd6:	5ccb      	ldrb	r3, [r1, r3]
 800dbd8:	f003 031f 	and.w	r3, r3, #31
 800dbdc:	fa22 f303 	lsr.w	r3, r2, r3
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	58024400 	.word	0x58024400
 800dbe8:	0801cb14 	.word	0x0801cb14

0800dbec <HAL_RCC_GetPCLK2Freq>:
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	f7ff ffb6 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	4b06      	ldr	r3, [pc, #24]	@ (800dc10 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dbf8:	69db      	ldr	r3, [r3, #28]
 800dbfa:	0a1b      	lsrs	r3, r3, #8
 800dbfc:	f003 0307 	and.w	r3, r3, #7
 800dc00:	4904      	ldr	r1, [pc, #16]	@ (800dc14 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dc02:	5ccb      	ldrb	r3, [r1, r3]
 800dc04:	f003 031f 	and.w	r3, r3, #31
 800dc08:	fa22 f303 	lsr.w	r3, r2, r3
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	58024400 	.word	0x58024400
 800dc14:	0801cb14 	.word	0x0801cb14

0800dc18 <HAL_RCC_NMI_IRQHandler>:
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	4b07      	ldr	r3, [pc, #28]	@ (800dc3c <HAL_RCC_NMI_IRQHandler+0x24>)
 800dc1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc28:	d105      	bne.n	800dc36 <HAL_RCC_NMI_IRQHandler+0x1e>
 800dc2a:	f000 f809 	bl	800dc40 <HAL_RCC_CSSCallback>
 800dc2e:	4b03      	ldr	r3, [pc, #12]	@ (800dc3c <HAL_RCC_NMI_IRQHandler+0x24>)
 800dc30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dc34:	669a      	str	r2, [r3, #104]	@ 0x68
 800dc36:	bf00      	nop
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	58024400 	.word	0x58024400

0800dc40 <HAL_RCC_CSSCallback>:
 800dc40:	b480      	push	{r7}
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	bf00      	nop
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr
	...

0800dc50 <HAL_RCCEx_PeriphCLKConfig>:
 800dc50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc54:	b0c6      	sub	sp, #280	@ 0x118
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dc62:	2300      	movs	r3, #0
 800dc64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800dc74:	2500      	movs	r5, #0
 800dc76:	ea54 0305 	orrs.w	r3, r4, r5
 800dc7a:	d049      	beq.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800dc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc86:	d02f      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800dc88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc8c:	d828      	bhi.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dc8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc92:	d01a      	beq.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dc94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc98:	d822      	bhi.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d003      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800dc9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dca2:	d007      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dca4:	e01c      	b.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dca6:	4bab      	ldr	r3, [pc, #684]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcaa:	4aaa      	ldr	r2, [pc, #680]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dcac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dcb2:	e01a      	b.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dcb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcb8:	3308      	adds	r3, #8
 800dcba:	2102      	movs	r1, #2
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f002 fa49 	bl	8010154 <RCCEx_PLL2_Config>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dcc8:	e00f      	b.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dcca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcce:	3328      	adds	r3, #40	@ 0x28
 800dcd0:	2102      	movs	r1, #2
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f002 faf0 	bl	80102b8 <RCCEx_PLL3_Config>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dcde:	e004      	b.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dce0:	2301      	movs	r3, #1
 800dce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dce6:	e000      	b.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dce8:	bf00      	nop
 800dcea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10a      	bne.n	800dd08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800dcf2:	4b98      	ldr	r3, [pc, #608]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dcf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcf6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd00:	4a94      	ldr	r2, [pc, #592]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd02:	430b      	orrs	r3, r1
 800dd04:	6513      	str	r3, [r2, #80]	@ 0x50
 800dd06:	e003      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800dd08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800dd1c:	f04f 0900 	mov.w	r9, #0
 800dd20:	ea58 0309 	orrs.w	r3, r8, r9
 800dd24:	d047      	beq.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800dd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd2c:	2b04      	cmp	r3, #4
 800dd2e:	d82a      	bhi.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dd30:	a201      	add	r2, pc, #4	@ (adr r2, 800dd38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd36:	bf00      	nop
 800dd38:	0800dd4d 	.word	0x0800dd4d
 800dd3c:	0800dd5b 	.word	0x0800dd5b
 800dd40:	0800dd71 	.word	0x0800dd71
 800dd44:	0800dd8f 	.word	0x0800dd8f
 800dd48:	0800dd8f 	.word	0x0800dd8f
 800dd4c:	4b81      	ldr	r3, [pc, #516]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd50:	4a80      	ldr	r2, [pc, #512]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd58:	e01a      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800dd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd5e:	3308      	adds	r3, #8
 800dd60:	2100      	movs	r1, #0
 800dd62:	4618      	mov	r0, r3
 800dd64:	f002 f9f6 	bl	8010154 <RCCEx_PLL2_Config>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd6e:	e00f      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800dd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd74:	3328      	adds	r3, #40	@ 0x28
 800dd76:	2100      	movs	r1, #0
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f002 fa9d 	bl	80102b8 <RCCEx_PLL3_Config>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd84:	e004      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800dd86:	2301      	movs	r3, #1
 800dd88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dd8c:	e000      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800dd8e:	bf00      	nop
 800dd90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10a      	bne.n	800ddae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800dd98:	4b6e      	ldr	r3, [pc, #440]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dd9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd9c:	f023 0107 	bic.w	r1, r3, #7
 800dda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dda4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dda6:	4a6b      	ldr	r2, [pc, #428]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dda8:	430b      	orrs	r3, r1
 800ddaa:	6513      	str	r3, [r2, #80]	@ 0x50
 800ddac:	e003      	b.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800ddae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ddb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800ddc2:	f04f 0b00 	mov.w	fp, #0
 800ddc6:	ea5a 030b 	orrs.w	r3, sl, fp
 800ddca:	d05b      	beq.n	800de84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ddcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ddd4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ddd8:	d03b      	beq.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ddda:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ddde:	d834      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dde0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dde4:	d037      	beq.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800dde6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ddea:	d82e      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ddec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ddf0:	d033      	beq.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ddf2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ddf6:	d828      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ddf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ddfc:	d01a      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ddfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800de02:	d822      	bhi.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800de04:	2b00      	cmp	r3, #0
 800de06:	d003      	beq.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800de08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de0c:	d007      	beq.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800de0e:	e01c      	b.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800de10:	4b50      	ldr	r3, [pc, #320]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de14:	4a4f      	ldr	r2, [pc, #316]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de1c:	e01e      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800de1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de22:	3308      	adds	r3, #8
 800de24:	2100      	movs	r1, #0
 800de26:	4618      	mov	r0, r3
 800de28:	f002 f994 	bl	8010154 <RCCEx_PLL2_Config>
 800de2c:	4603      	mov	r3, r0
 800de2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de32:	e013      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800de34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de38:	3328      	adds	r3, #40	@ 0x28
 800de3a:	2100      	movs	r1, #0
 800de3c:	4618      	mov	r0, r3
 800de3e:	f002 fa3b 	bl	80102b8 <RCCEx_PLL3_Config>
 800de42:	4603      	mov	r3, r0
 800de44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de48:	e008      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800de4a:	2301      	movs	r3, #1
 800de4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800de50:	e004      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800de52:	bf00      	nop
 800de54:	e002      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800de56:	bf00      	nop
 800de58:	e000      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800de5a:	bf00      	nop
 800de5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10b      	bne.n	800de7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800de64:	4b3b      	ldr	r3, [pc, #236]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de68:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800de6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de74:	4a37      	ldr	r2, [pc, #220]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de76:	430b      	orrs	r3, r1
 800de78:	6593      	str	r3, [r2, #88]	@ 0x58
 800de7a:	e003      	b.n	800de84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800de7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800de84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800de90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800de94:	2300      	movs	r3, #0
 800de96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800de9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800de9e:	460b      	mov	r3, r1
 800dea0:	4313      	orrs	r3, r2
 800dea2:	d05d      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800dea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dea8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800deac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800deb0:	d03b      	beq.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800deb2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800deb6:	d834      	bhi.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800deb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800debc:	d037      	beq.n	800df2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800debe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dec2:	d82e      	bhi.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dec4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dec8:	d033      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800deca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dece:	d828      	bhi.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ded0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ded4:	d01a      	beq.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ded6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800deda:	d822      	bhi.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d003      	beq.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800dee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dee4:	d007      	beq.n	800def6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800dee6:	e01c      	b.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dee8:	4b1a      	ldr	r3, [pc, #104]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800deea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deec:	4a19      	ldr	r2, [pc, #100]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800deee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800def2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800def4:	e01e      	b.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800def6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800defa:	3308      	adds	r3, #8
 800defc:	2100      	movs	r1, #0
 800defe:	4618      	mov	r0, r3
 800df00:	f002 f928 	bl	8010154 <RCCEx_PLL2_Config>
 800df04:	4603      	mov	r3, r0
 800df06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df0a:	e013      	b.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800df0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df10:	3328      	adds	r3, #40	@ 0x28
 800df12:	2100      	movs	r1, #0
 800df14:	4618      	mov	r0, r3
 800df16:	f002 f9cf 	bl	80102b8 <RCCEx_PLL3_Config>
 800df1a:	4603      	mov	r3, r0
 800df1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df20:	e008      	b.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800df22:	2301      	movs	r3, #1
 800df24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800df28:	e004      	b.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800df2a:	bf00      	nop
 800df2c:	e002      	b.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800df2e:	bf00      	nop
 800df30:	e000      	b.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800df32:	bf00      	nop
 800df34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10d      	bne.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800df3c:	4b05      	ldr	r3, [pc, #20]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df40:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800df44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800df4c:	4a01      	ldr	r2, [pc, #4]	@ (800df54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df4e:	430b      	orrs	r3, r1
 800df50:	6593      	str	r3, [r2, #88]	@ 0x58
 800df52:	e005      	b.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800df54:	58024400 	.word	0x58024400
 800df58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800df60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800df6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800df70:	2300      	movs	r3, #0
 800df72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800df76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4313      	orrs	r3, r2
 800df7e:	d03a      	beq.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800df80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df86:	2b30      	cmp	r3, #48	@ 0x30
 800df88:	d01f      	beq.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800df8a:	2b30      	cmp	r3, #48	@ 0x30
 800df8c:	d819      	bhi.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800df8e:	2b20      	cmp	r3, #32
 800df90:	d00c      	beq.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800df92:	2b20      	cmp	r3, #32
 800df94:	d815      	bhi.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800df96:	2b00      	cmp	r3, #0
 800df98:	d019      	beq.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800df9a:	2b10      	cmp	r3, #16
 800df9c:	d111      	bne.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800df9e:	4baa      	ldr	r3, [pc, #680]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa2:	4aa9      	ldr	r2, [pc, #676]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dfa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dfaa:	e011      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfb0:	3308      	adds	r3, #8
 800dfb2:	2102      	movs	r1, #2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f002 f8cd 	bl	8010154 <RCCEx_PLL2_Config>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dfc0:	e006      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800dfc8:	e002      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dfca:	bf00      	nop
 800dfcc:	e000      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800dfce:	bf00      	nop
 800dfd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x39e>
 800dfd8:	4b9b      	ldr	r3, [pc, #620]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dfda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfdc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfe6:	4a98      	ldr	r2, [pc, #608]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dfe8:	430b      	orrs	r3, r1
 800dfea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dfec:	e003      	b.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800dfee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dff2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e006:	2300      	movs	r3, #0
 800e008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e00c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e010:	460b      	mov	r3, r1
 800e012:	4313      	orrs	r3, r2
 800e014:	d051      	beq.n	800e0ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800e016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e01a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e01c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e020:	d035      	beq.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e026:	d82e      	bhi.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e028:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e02c:	d031      	beq.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e02e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e032:	d828      	bhi.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e038:	d01a      	beq.n	800e070 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e03a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e03e:	d822      	bhi.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e040:	2b00      	cmp	r3, #0
 800e042:	d003      	beq.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e048:	d007      	beq.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e04a:	e01c      	b.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e04c:	4b7e      	ldr	r3, [pc, #504]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e050:	4a7d      	ldr	r2, [pc, #500]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e058:	e01c      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e05e:	3308      	adds	r3, #8
 800e060:	2100      	movs	r1, #0
 800e062:	4618      	mov	r0, r3
 800e064:	f002 f876 	bl	8010154 <RCCEx_PLL2_Config>
 800e068:	4603      	mov	r3, r0
 800e06a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e06e:	e011      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e074:	3328      	adds	r3, #40	@ 0x28
 800e076:	2100      	movs	r1, #0
 800e078:	4618      	mov	r0, r3
 800e07a:	f002 f91d 	bl	80102b8 <RCCEx_PLL3_Config>
 800e07e:	4603      	mov	r3, r0
 800e080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e084:	e006      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e086:	2301      	movs	r3, #1
 800e088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e08c:	e002      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e08e:	bf00      	nop
 800e090:	e000      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800e092:	bf00      	nop
 800e094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10a      	bne.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800e09c:	4b6a      	ldr	r3, [pc, #424]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e09e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0aa:	4a67      	ldr	r2, [pc, #412]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e0ac:	430b      	orrs	r3, r1
 800e0ae:	6513      	str	r3, [r2, #80]	@ 0x50
 800e0b0:	e003      	b.n	800e0ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800e0b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e0c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e0d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	d053      	beq.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800e0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e0e4:	d033      	beq.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e0e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e0ea:	d82c      	bhi.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e0ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e0f0:	d02f      	beq.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e0f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e0f6:	d826      	bhi.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e0f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e0fc:	d02b      	beq.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e0fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e102:	d820      	bhi.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e108:	d012      	beq.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e10a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e10e:	d81a      	bhi.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e110:	2b00      	cmp	r3, #0
 800e112:	d022      	beq.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e118:	d115      	bne.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e11e:	3308      	adds	r3, #8
 800e120:	2101      	movs	r1, #1
 800e122:	4618      	mov	r0, r3
 800e124:	f002 f816 	bl	8010154 <RCCEx_PLL2_Config>
 800e128:	4603      	mov	r3, r0
 800e12a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e12e:	e015      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e134:	3328      	adds	r3, #40	@ 0x28
 800e136:	2101      	movs	r1, #1
 800e138:	4618      	mov	r0, r3
 800e13a:	f002 f8bd 	bl	80102b8 <RCCEx_PLL3_Config>
 800e13e:	4603      	mov	r3, r0
 800e140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e144:	e00a      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e146:	2301      	movs	r3, #1
 800e148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e14c:	e006      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e14e:	bf00      	nop
 800e150:	e004      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e152:	bf00      	nop
 800e154:	e002      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e156:	bf00      	nop
 800e158:	e000      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800e15a:	bf00      	nop
 800e15c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10a      	bne.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800e164:	4b38      	ldr	r3, [pc, #224]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e168:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e172:	4a35      	ldr	r2, [pc, #212]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e174:	430b      	orrs	r3, r1
 800e176:	6513      	str	r3, [r2, #80]	@ 0x50
 800e178:	e003      	b.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800e17a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e17e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e18e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e192:	2300      	movs	r3, #0
 800e194:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e198:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e19c:	460b      	mov	r3, r1
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	d058      	beq.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e1aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e1ae:	d033      	beq.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e1b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e1b4:	d82c      	bhi.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1ba:	d02f      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1c0:	d826      	bhi.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e1c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e1c6:	d02b      	beq.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e1c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e1cc:	d820      	bhi.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e1ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1d2:	d012      	beq.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1d8:	d81a      	bhi.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d022      	beq.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e1de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1e2:	d115      	bne.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1e8:	3308      	adds	r3, #8
 800e1ea:	2101      	movs	r1, #1
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f001 ffb1 	bl	8010154 <RCCEx_PLL2_Config>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e1f8:	e015      	b.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1fe:	3328      	adds	r3, #40	@ 0x28
 800e200:	2101      	movs	r1, #1
 800e202:	4618      	mov	r0, r3
 800e204:	f002 f858 	bl	80102b8 <RCCEx_PLL3_Config>
 800e208:	4603      	mov	r3, r0
 800e20a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e20e:	e00a      	b.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e210:	2301      	movs	r3, #1
 800e212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e216:	e006      	b.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e218:	bf00      	nop
 800e21a:	e004      	b.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e21c:	bf00      	nop
 800e21e:	e002      	b.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e220:	bf00      	nop
 800e222:	e000      	b.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800e224:	bf00      	nop
 800e226:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10e      	bne.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800e22e:	4b06      	ldr	r3, [pc, #24]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e232:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e23a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e23e:	4a02      	ldr	r2, [pc, #8]	@ (800e248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e240:	430b      	orrs	r3, r1
 800e242:	6593      	str	r3, [r2, #88]	@ 0x58
 800e244:	e006      	b.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e246:	bf00      	nop
 800e248:	58024400 	.word	0x58024400
 800e24c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e250:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e260:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e264:	2300      	movs	r3, #0
 800e266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e26a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e26e:	460b      	mov	r3, r1
 800e270:	4313      	orrs	r3, r2
 800e272:	d037      	beq.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800e274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e27a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e27e:	d00e      	beq.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e284:	d816      	bhi.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e286:	2b00      	cmp	r3, #0
 800e288:	d018      	beq.n	800e2bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e28a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e28e:	d111      	bne.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e290:	4bc4      	ldr	r3, [pc, #784]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e294:	4ac3      	ldr	r2, [pc, #780]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e29a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e29c:	e00f      	b.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	2101      	movs	r1, #1
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f001 ff54 	bl	8010154 <RCCEx_PLL2_Config>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e2b2:	e004      	b.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e2ba:	e000      	b.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e2bc:	bf00      	nop
 800e2be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d10a      	bne.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800e2c6:	4bb7      	ldr	r3, [pc, #732]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2d4:	4ab3      	ldr	r2, [pc, #716]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2d6:	430b      	orrs	r3, r1
 800e2d8:	6513      	str	r3, [r2, #80]	@ 0x50
 800e2da:	e003      	b.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800e2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e2e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e2f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e2fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e2fe:	460b      	mov	r3, r1
 800e300:	4313      	orrs	r3, r2
 800e302:	d039      	beq.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800e304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d81c      	bhi.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e30e:	a201      	add	r2, pc, #4	@ (adr r2, 800e314 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e314:	0800e351 	.word	0x0800e351
 800e318:	0800e325 	.word	0x0800e325
 800e31c:	0800e333 	.word	0x0800e333
 800e320:	0800e351 	.word	0x0800e351
 800e324:	4b9f      	ldr	r3, [pc, #636]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e328:	4a9e      	ldr	r2, [pc, #632]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e32a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e32e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e330:	e00f      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e336:	3308      	adds	r3, #8
 800e338:	2102      	movs	r1, #2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f001 ff0a 	bl	8010154 <RCCEx_PLL2_Config>
 800e340:	4603      	mov	r3, r0
 800e342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e346:	e004      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e348:	2301      	movs	r3, #1
 800e34a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e34e:	e000      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800e350:	bf00      	nop
 800e352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x720>
 800e35a:	4b92      	ldr	r3, [pc, #584]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e35c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e35e:	f023 0103 	bic.w	r1, r3, #3
 800e362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e368:	4a8e      	ldr	r2, [pc, #568]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e36a:	430b      	orrs	r3, r1
 800e36c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e36e:	e003      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800e370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e380:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e384:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e388:	2300      	movs	r3, #0
 800e38a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e38e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e392:	460b      	mov	r3, r1
 800e394:	4313      	orrs	r3, r2
 800e396:	f000 8099 	beq.w	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e39a:	4b83      	ldr	r3, [pc, #524]	@ (800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a82      	ldr	r2, [pc, #520]	@ (800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e3a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e3a4:	6013      	str	r3, [r2, #0]
 800e3a6:	f7fa fb45 	bl	8008a34 <HAL_GetTick>
 800e3aa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800e3ae:	e00b      	b.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
 800e3b0:	f7fa fb40 	bl	8008a34 <HAL_GetTick>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	2b64      	cmp	r3, #100	@ 0x64
 800e3be:	d903      	bls.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e3c6:	e005      	b.n	800e3d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
 800e3c8:	4b77      	ldr	r3, [pc, #476]	@ (800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d0ed      	beq.n	800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800e3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d173      	bne.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800e3dc:	4b71      	ldr	r3, [pc, #452]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e3e8:	4053      	eors	r3, r2
 800e3ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d015      	beq.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800e3f2:	4b6c      	ldr	r3, [pc, #432]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e3fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e3fe:	4b69      	ldr	r3, [pc, #420]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e402:	4a68      	ldr	r2, [pc, #416]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e408:	6713      	str	r3, [r2, #112]	@ 0x70
 800e40a:	4b66      	ldr	r3, [pc, #408]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e40c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e40e:	4a65      	ldr	r2, [pc, #404]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e414:	6713      	str	r3, [r2, #112]	@ 0x70
 800e416:	4a63      	ldr	r2, [pc, #396]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e41c:	6713      	str	r3, [r2, #112]	@ 0x70
 800e41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e42a:	d118      	bne.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e42c:	f7fa fb02 	bl	8008a34 <HAL_GetTick>
 800e430:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800e434:	e00d      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800e436:	f7fa fafd 	bl	8008a34 <HAL_GetTick>
 800e43a:	4602      	mov	r2, r0
 800e43c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e440:	1ad2      	subs	r2, r2, r3
 800e442:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e446:	429a      	cmp	r2, r3
 800e448:	d903      	bls.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800e44a:	2303      	movs	r3, #3
 800e44c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e450:	e005      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800e452:	4b54      	ldr	r3, [pc, #336]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d0eb      	beq.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800e45e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e462:	2b00      	cmp	r3, #0
 800e464:	d129      	bne.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800e466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e46a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e46e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e476:	d10e      	bne.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e478:	4b4a      	ldr	r3, [pc, #296]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e488:	091a      	lsrs	r2, r3, #4
 800e48a:	4b48      	ldr	r3, [pc, #288]	@ (800e5ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e48c:	4013      	ands	r3, r2
 800e48e:	4a45      	ldr	r2, [pc, #276]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e490:	430b      	orrs	r3, r1
 800e492:	6113      	str	r3, [r2, #16]
 800e494:	e005      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e496:	4b43      	ldr	r3, [pc, #268]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	4a42      	ldr	r2, [pc, #264]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e49c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e4a0:	6113      	str	r3, [r2, #16]
 800e4a2:	4b40      	ldr	r3, [pc, #256]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e4ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4b2:	4a3c      	ldr	r2, [pc, #240]	@ (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800e4b8:	e008      	b.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e4c2:	e003      	b.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e4c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d4:	f002 0301 	and.w	r3, r2, #1
 800e4d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e4e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	f000 808f 	beq.w	800e60c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800e4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4f4:	2b28      	cmp	r3, #40	@ 0x28
 800e4f6:	d871      	bhi.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e4f8:	a201      	add	r2, pc, #4	@ (adr r2, 800e500 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fe:	bf00      	nop
 800e500:	0800e5e5 	.word	0x0800e5e5
 800e504:	0800e5dd 	.word	0x0800e5dd
 800e508:	0800e5dd 	.word	0x0800e5dd
 800e50c:	0800e5dd 	.word	0x0800e5dd
 800e510:	0800e5dd 	.word	0x0800e5dd
 800e514:	0800e5dd 	.word	0x0800e5dd
 800e518:	0800e5dd 	.word	0x0800e5dd
 800e51c:	0800e5dd 	.word	0x0800e5dd
 800e520:	0800e5b1 	.word	0x0800e5b1
 800e524:	0800e5dd 	.word	0x0800e5dd
 800e528:	0800e5dd 	.word	0x0800e5dd
 800e52c:	0800e5dd 	.word	0x0800e5dd
 800e530:	0800e5dd 	.word	0x0800e5dd
 800e534:	0800e5dd 	.word	0x0800e5dd
 800e538:	0800e5dd 	.word	0x0800e5dd
 800e53c:	0800e5dd 	.word	0x0800e5dd
 800e540:	0800e5c7 	.word	0x0800e5c7
 800e544:	0800e5dd 	.word	0x0800e5dd
 800e548:	0800e5dd 	.word	0x0800e5dd
 800e54c:	0800e5dd 	.word	0x0800e5dd
 800e550:	0800e5dd 	.word	0x0800e5dd
 800e554:	0800e5dd 	.word	0x0800e5dd
 800e558:	0800e5dd 	.word	0x0800e5dd
 800e55c:	0800e5dd 	.word	0x0800e5dd
 800e560:	0800e5e5 	.word	0x0800e5e5
 800e564:	0800e5dd 	.word	0x0800e5dd
 800e568:	0800e5dd 	.word	0x0800e5dd
 800e56c:	0800e5dd 	.word	0x0800e5dd
 800e570:	0800e5dd 	.word	0x0800e5dd
 800e574:	0800e5dd 	.word	0x0800e5dd
 800e578:	0800e5dd 	.word	0x0800e5dd
 800e57c:	0800e5dd 	.word	0x0800e5dd
 800e580:	0800e5e5 	.word	0x0800e5e5
 800e584:	0800e5dd 	.word	0x0800e5dd
 800e588:	0800e5dd 	.word	0x0800e5dd
 800e58c:	0800e5dd 	.word	0x0800e5dd
 800e590:	0800e5dd 	.word	0x0800e5dd
 800e594:	0800e5dd 	.word	0x0800e5dd
 800e598:	0800e5dd 	.word	0x0800e5dd
 800e59c:	0800e5dd 	.word	0x0800e5dd
 800e5a0:	0800e5e5 	.word	0x0800e5e5
 800e5a4:	58024400 	.word	0x58024400
 800e5a8:	58024800 	.word	0x58024800
 800e5ac:	00ffffcf 	.word	0x00ffffcf
 800e5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f001 fdcb 	bl	8010154 <RCCEx_PLL2_Config>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e5c4:	e00f      	b.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ca:	3328      	adds	r3, #40	@ 0x28
 800e5cc:	2101      	movs	r1, #1
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f001 fe72 	bl	80102b8 <RCCEx_PLL3_Config>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e5da:	e004      	b.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e5e2:	e000      	b.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
 800e5e4:	bf00      	nop
 800e5e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10a      	bne.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 800e5ee:	4bbf      	ldr	r3, [pc, #764]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e5f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5fc:	4abb      	ldr	r2, [pc, #748]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e5fe:	430b      	orrs	r3, r1
 800e600:	6553      	str	r3, [r2, #84]	@ 0x54
 800e602:	e003      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800e604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e608:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	f002 0302 	and.w	r3, r2, #2
 800e618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e61c:	2300      	movs	r3, #0
 800e61e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e622:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e626:	460b      	mov	r3, r1
 800e628:	4313      	orrs	r3, r2
 800e62a:	d041      	beq.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800e62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e632:	2b05      	cmp	r3, #5
 800e634:	d824      	bhi.n	800e680 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e636:	a201      	add	r2, pc, #4	@ (adr r2, 800e63c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63c:	0800e689 	.word	0x0800e689
 800e640:	0800e655 	.word	0x0800e655
 800e644:	0800e66b 	.word	0x0800e66b
 800e648:	0800e689 	.word	0x0800e689
 800e64c:	0800e689 	.word	0x0800e689
 800e650:	0800e689 	.word	0x0800e689
 800e654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e658:	3308      	adds	r3, #8
 800e65a:	2101      	movs	r1, #1
 800e65c:	4618      	mov	r0, r3
 800e65e:	f001 fd79 	bl	8010154 <RCCEx_PLL2_Config>
 800e662:	4603      	mov	r3, r0
 800e664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e668:	e00f      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e66e:	3328      	adds	r3, #40	@ 0x28
 800e670:	2101      	movs	r1, #1
 800e672:	4618      	mov	r0, r3
 800e674:	f001 fe20 	bl	80102b8 <RCCEx_PLL3_Config>
 800e678:	4603      	mov	r3, r0
 800e67a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e67e:	e004      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e680:	2301      	movs	r3, #1
 800e682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e686:	e000      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e688:	bf00      	nop
 800e68a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10a      	bne.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800e692:	4b96      	ldr	r3, [pc, #600]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e696:	f023 0107 	bic.w	r1, r3, #7
 800e69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e69e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6a0:	4a92      	ldr	r2, [pc, #584]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e6a2:	430b      	orrs	r3, r1
 800e6a4:	6553      	str	r3, [r2, #84]	@ 0x54
 800e6a6:	e003      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800e6a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	f002 0304 	and.w	r3, r2, #4
 800e6bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e6c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	d044      	beq.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6d8:	2b05      	cmp	r3, #5
 800e6da:	d825      	bhi.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e2:	bf00      	nop
 800e6e4:	0800e731 	.word	0x0800e731
 800e6e8:	0800e6fd 	.word	0x0800e6fd
 800e6ec:	0800e713 	.word	0x0800e713
 800e6f0:	0800e731 	.word	0x0800e731
 800e6f4:	0800e731 	.word	0x0800e731
 800e6f8:	0800e731 	.word	0x0800e731
 800e6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e700:	3308      	adds	r3, #8
 800e702:	2101      	movs	r1, #1
 800e704:	4618      	mov	r0, r3
 800e706:	f001 fd25 	bl	8010154 <RCCEx_PLL2_Config>
 800e70a:	4603      	mov	r3, r0
 800e70c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e710:	e00f      	b.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e716:	3328      	adds	r3, #40	@ 0x28
 800e718:	2101      	movs	r1, #1
 800e71a:	4618      	mov	r0, r3
 800e71c:	f001 fdcc 	bl	80102b8 <RCCEx_PLL3_Config>
 800e720:	4603      	mov	r3, r0
 800e722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e726:	e004      	b.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e728:	2301      	movs	r3, #1
 800e72a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e72e:	e000      	b.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800e730:	bf00      	nop
 800e732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10b      	bne.n	800e752 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e73a:	4b6c      	ldr	r3, [pc, #432]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e73e:	f023 0107 	bic.w	r1, r3, #7
 800e742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e74a:	4a68      	ldr	r2, [pc, #416]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e74c:	430b      	orrs	r3, r1
 800e74e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e750:	e003      	b.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e752:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e756:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	f002 0320 	and.w	r3, r2, #32
 800e766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e76a:	2300      	movs	r3, #0
 800e76c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e770:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e774:	460b      	mov	r3, r1
 800e776:	4313      	orrs	r3, r2
 800e778:	d055      	beq.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800e77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e786:	d033      	beq.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e78c:	d82c      	bhi.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e792:	d02f      	beq.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e798:	d826      	bhi.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e79a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e79e:	d02b      	beq.n	800e7f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e7a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e7a4:	d820      	bhi.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7aa:	d012      	beq.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e7ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7b0:	d81a      	bhi.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d022      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e7b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7ba:	d115      	bne.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f001 fcc5 	bl	8010154 <RCCEx_PLL2_Config>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e7d0:	e015      	b.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d6:	3328      	adds	r3, #40	@ 0x28
 800e7d8:	2102      	movs	r1, #2
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f001 fd6c 	bl	80102b8 <RCCEx_PLL3_Config>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e7e6:	e00a      	b.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e7ee:	e006      	b.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e7f0:	bf00      	nop
 800e7f2:	e004      	b.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e7f4:	bf00      	nop
 800e7f6:	e002      	b.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e7f8:	bf00      	nop
 800e7fa:	e000      	b.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800e7fc:	bf00      	nop
 800e7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10b      	bne.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0xbce>
 800e806:	4b39      	ldr	r3, [pc, #228]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e80a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e816:	4a35      	ldr	r2, [pc, #212]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e818:	430b      	orrs	r3, r1
 800e81a:	6553      	str	r3, [r2, #84]	@ 0x54
 800e81c:	e003      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800e81e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e822:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e832:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e836:	2300      	movs	r3, #0
 800e838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e83c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e840:	460b      	mov	r3, r1
 800e842:	4313      	orrs	r3, r2
 800e844:	d058      	beq.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e84a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e84e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e852:	d033      	beq.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800e854:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e858:	d82c      	bhi.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e85a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e85e:	d02f      	beq.n	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e864:	d826      	bhi.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e866:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e86a:	d02b      	beq.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e86c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e870:	d820      	bhi.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e876:	d012      	beq.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800e878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e87c:	d81a      	bhi.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d022      	beq.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e886:	d115      	bne.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e88c:	3308      	adds	r3, #8
 800e88e:	2100      	movs	r1, #0
 800e890:	4618      	mov	r0, r3
 800e892:	f001 fc5f 	bl	8010154 <RCCEx_PLL2_Config>
 800e896:	4603      	mov	r3, r0
 800e898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e89c:	e015      	b.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8a2:	3328      	adds	r3, #40	@ 0x28
 800e8a4:	2102      	movs	r1, #2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f001 fd06 	bl	80102b8 <RCCEx_PLL3_Config>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e8b2:	e00a      	b.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e8ba:	e006      	b.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e8bc:	bf00      	nop
 800e8be:	e004      	b.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e8c0:	bf00      	nop
 800e8c2:	e002      	b.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e8c4:	bf00      	nop
 800e8c6:	e000      	b.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800e8c8:	bf00      	nop
 800e8ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d10e      	bne.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
 800e8d2:	4b06      	ldr	r3, [pc, #24]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e8d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e8e2:	4a02      	ldr	r2, [pc, #8]	@ (800e8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e8e4:	430b      	orrs	r3, r1
 800e8e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e8e8:	e006      	b.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e8ea:	bf00      	nop
 800e8ec:	58024400 	.word	0x58024400
 800e8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e900:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e908:	2300      	movs	r3, #0
 800e90a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e90e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e912:	460b      	mov	r3, r1
 800e914:	4313      	orrs	r3, r2
 800e916:	d055      	beq.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800e918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e91c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e920:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e924:	d033      	beq.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800e926:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e92a:	d82c      	bhi.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e92c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e930:	d02f      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e936:	d826      	bhi.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e938:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e93c:	d02b      	beq.n	800e996 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e93e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e942:	d820      	bhi.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e948:	d012      	beq.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800e94a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e94e:	d81a      	bhi.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e950:	2b00      	cmp	r3, #0
 800e952:	d022      	beq.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e958:	d115      	bne.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e95e:	3308      	adds	r3, #8
 800e960:	2100      	movs	r1, #0
 800e962:	4618      	mov	r0, r3
 800e964:	f001 fbf6 	bl	8010154 <RCCEx_PLL2_Config>
 800e968:	4603      	mov	r3, r0
 800e96a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e96e:	e015      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e974:	3328      	adds	r3, #40	@ 0x28
 800e976:	2102      	movs	r1, #2
 800e978:	4618      	mov	r0, r3
 800e97a:	f001 fc9d 	bl	80102b8 <RCCEx_PLL3_Config>
 800e97e:	4603      	mov	r3, r0
 800e980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e984:	e00a      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e986:	2301      	movs	r3, #1
 800e988:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800e98c:	e006      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e98e:	bf00      	nop
 800e990:	e004      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e992:	bf00      	nop
 800e994:	e002      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e996:	bf00      	nop
 800e998:	e000      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 800e99a:	bf00      	nop
 800e99c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10b      	bne.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800e9a4:	4ba0      	ldr	r3, [pc, #640]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e9a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e9b4:	4a9c      	ldr	r2, [pc, #624]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e9b6:	430b      	orrs	r3, r1
 800e9b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800e9ba:	e003      	b.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800e9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f002 0308 	and.w	r3, r2, #8
 800e9d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e9da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	d01e      	beq.n	800ea22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9f0:	d10c      	bne.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9f6:	3328      	adds	r3, #40	@ 0x28
 800e9f8:	2102      	movs	r1, #2
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f001 fc5c 	bl	80102b8 <RCCEx_PLL3_Config>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d002      	beq.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ea06:	2301      	movs	r3, #1
 800ea08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ea0c:	4b86      	ldr	r3, [pc, #536]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ea14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea1c:	4a82      	ldr	r2, [pc, #520]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea1e:	430b      	orrs	r3, r1
 800ea20:	6553      	str	r3, [r2, #84]	@ 0x54
 800ea22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2a:	f002 0310 	and.w	r3, r2, #16
 800ea2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ea32:	2300      	movs	r3, #0
 800ea34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea38:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	d01e      	beq.n	800ea80 <HAL_RCCEx_PeriphCLKConfig+0xe30>
 800ea42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ea4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea4e:	d10c      	bne.n	800ea6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 800ea50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea54:	3328      	adds	r3, #40	@ 0x28
 800ea56:	2102      	movs	r1, #2
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f001 fc2d 	bl	80102b8 <RCCEx_PLL3_Config>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d002      	beq.n	800ea6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 800ea64:	2301      	movs	r3, #1
 800ea66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ea6a:	4b6f      	ldr	r3, [pc, #444]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ea72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ea7a:	4a6b      	ldr	r2, [pc, #428]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ea7c:	430b      	orrs	r3, r1
 800ea7e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ea80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ea8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ea8e:	2300      	movs	r3, #0
 800ea90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea92:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ea96:	460b      	mov	r3, r1
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	d03e      	beq.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
 800ea9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eaa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eaa8:	d022      	beq.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800eaaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eaae:	d81b      	bhi.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d003      	beq.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800eab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eab8:	d00b      	beq.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800eaba:	e015      	b.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800eabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eac0:	3308      	adds	r3, #8
 800eac2:	2100      	movs	r1, #0
 800eac4:	4618      	mov	r0, r3
 800eac6:	f001 fb45 	bl	8010154 <RCCEx_PLL2_Config>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ead0:	e00f      	b.n	800eaf2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800ead2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ead6:	3328      	adds	r3, #40	@ 0x28
 800ead8:	2102      	movs	r1, #2
 800eada:	4618      	mov	r0, r3
 800eadc:	f001 fbec 	bl	80102b8 <RCCEx_PLL3_Config>
 800eae0:	4603      	mov	r3, r0
 800eae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eae6:	e004      	b.n	800eaf2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800eae8:	2301      	movs	r3, #1
 800eaea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eaee:	e000      	b.n	800eaf2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800eaf0:	bf00      	nop
 800eaf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10b      	bne.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0xec2>
 800eafa:	4b4b      	ldr	r3, [pc, #300]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eafc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eafe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800eb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eb0a:	4a47      	ldr	r2, [pc, #284]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb0c:	430b      	orrs	r3, r1
 800eb0e:	6593      	str	r3, [r2, #88]	@ 0x58
 800eb10:	e003      	b.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
 800eb12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800eb26:	673b      	str	r3, [r7, #112]	@ 0x70
 800eb28:	2300      	movs	r3, #0
 800eb2a:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800eb30:	460b      	mov	r3, r1
 800eb32:	4313      	orrs	r3, r2
 800eb34:	d03b      	beq.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 800eb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eb42:	d01f      	beq.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800eb44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eb48:	d818      	bhi.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800eb4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb4e:	d003      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800eb50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb54:	d007      	beq.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800eb56:	e011      	b.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800eb58:	4b33      	ldr	r3, [pc, #204]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5c:	4a32      	ldr	r2, [pc, #200]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800eb64:	e00f      	b.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800eb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb6a:	3328      	adds	r3, #40	@ 0x28
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f001 fba2 	bl	80102b8 <RCCEx_PLL3_Config>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eb7a:	e004      	b.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eb82:	e000      	b.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 800eb84:	bf00      	nop
 800eb86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10b      	bne.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
 800eb8e:	4b26      	ldr	r3, [pc, #152]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800eb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb9e:	4a22      	ldr	r2, [pc, #136]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eba0:	430b      	orrs	r3, r1
 800eba2:	6553      	str	r3, [r2, #84]	@ 0x54
 800eba4:	e003      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 800eba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ebae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ebba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ebc0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	d034      	beq.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ebca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d003      	beq.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ebd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebd8:	d007      	beq.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ebda:	e011      	b.n	800ec00 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 800ebdc:	4b12      	ldr	r3, [pc, #72]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ebde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebe0:	4a11      	ldr	r2, [pc, #68]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ebe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ebe8:	e00e      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800ebea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebee:	3308      	adds	r3, #8
 800ebf0:	2102      	movs	r1, #2
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f001 faae 	bl	8010154 <RCCEx_PLL2_Config>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ebfe:	e003      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800ec00:	2301      	movs	r3, #1
 800ec02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ec06:	bf00      	nop
 800ec08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d10d      	bne.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
 800ec10:	4b05      	ldr	r3, [pc, #20]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ec18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec1e:	4a02      	ldr	r2, [pc, #8]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec20:	430b      	orrs	r3, r1
 800ec22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ec24:	e006      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ec26:	bf00      	nop
 800ec28:	58024400 	.word	0x58024400
 800ec2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ec34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ec40:	663b      	str	r3, [r7, #96]	@ 0x60
 800ec42:	2300      	movs	r3, #0
 800ec44:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	d00c      	beq.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
 800ec50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec54:	3328      	adds	r3, #40	@ 0x28
 800ec56:	2102      	movs	r1, #2
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f001 fb2d 	bl	80102b8 <RCCEx_PLL3_Config>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
 800ec64:	2301      	movs	r3, #1
 800ec66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ec6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ec76:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec78:	2300      	movs	r3, #0
 800ec7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ec80:	460b      	mov	r3, r1
 800ec82:	4313      	orrs	r3, r2
 800ec84:	d036      	beq.n	800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800ec86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec90:	d018      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ec92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec96:	d811      	bhi.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ec98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec9c:	d014      	beq.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ec9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eca2:	d80b      	bhi.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d011      	beq.n	800eccc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800eca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecac:	d106      	bne.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ecae:	4bb7      	ldr	r3, [pc, #732]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ecb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb2:	4ab6      	ldr	r2, [pc, #728]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ecb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ecb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ecba:	e008      	b.n	800ecce <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ecc2:	e004      	b.n	800ecce <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ecc4:	bf00      	nop
 800ecc6:	e002      	b.n	800ecce <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ecc8:	bf00      	nop
 800ecca:	e000      	b.n	800ecce <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800eccc:	bf00      	nop
 800ecce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10a      	bne.n	800ecec <HAL_RCCEx_PeriphCLKConfig+0x109c>
 800ecd6:	4bad      	ldr	r3, [pc, #692]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ecd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ecde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ece2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ece4:	4aa9      	ldr	r2, [pc, #676]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ece6:	430b      	orrs	r3, r1
 800ece8:	6553      	str	r3, [r2, #84]	@ 0x54
 800ecea:	e003      	b.n	800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800ecec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ecf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ed00:	653b      	str	r3, [r7, #80]	@ 0x50
 800ed02:	2300      	movs	r3, #0
 800ed04:	657b      	str	r3, [r7, #84]	@ 0x54
 800ed06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	d009      	beq.n	800ed24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 800ed10:	4b9e      	ldr	r3, [pc, #632]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ed18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed1e:	4a9b      	ldr	r2, [pc, #620]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed20:	430b      	orrs	r3, r1
 800ed22:	6513      	str	r3, [r2, #80]	@ 0x50
 800ed24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ed30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed32:	2300      	movs	r3, #0
 800ed34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	d009      	beq.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
 800ed40:	4b92      	ldr	r3, [pc, #584]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed44:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ed48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed4e:	4a8f      	ldr	r2, [pc, #572]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed50:	430b      	orrs	r3, r1
 800ed52:	6513      	str	r3, [r2, #80]	@ 0x50
 800ed54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ed60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed62:	2300      	movs	r3, #0
 800ed64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	d00e      	beq.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
 800ed70:	4b86      	ldr	r3, [pc, #536]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	4a85      	ldr	r2, [pc, #532]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ed7a:	6113      	str	r3, [r2, #16]
 800ed7c:	4b83      	ldr	r3, [pc, #524]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed7e:	6919      	ldr	r1, [r3, #16]
 800ed80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ed88:	4a80      	ldr	r2, [pc, #512]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ed8a:	430b      	orrs	r3, r1
 800ed8c:	6113      	str	r3, [r2, #16]
 800ed8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ed9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eda0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800eda4:	460b      	mov	r3, r1
 800eda6:	4313      	orrs	r3, r2
 800eda8:	d009      	beq.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x116e>
 800edaa:	4b78      	ldr	r3, [pc, #480]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800edac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800edb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edb8:	4a74      	ldr	r2, [pc, #464]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800edba:	430b      	orrs	r3, r1
 800edbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800edbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800edca:	633b      	str	r3, [r7, #48]	@ 0x30
 800edcc:	2300      	movs	r3, #0
 800edce:	637b      	str	r3, [r7, #52]	@ 0x34
 800edd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800edd4:	460b      	mov	r3, r1
 800edd6:	4313      	orrs	r3, r2
 800edd8:	d00a      	beq.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 800edda:	4b6c      	ldr	r3, [pc, #432]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edde:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ede2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ede6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800edea:	4a68      	ldr	r2, [pc, #416]	@ (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800edec:	430b      	orrs	r3, r1
 800edee:	6553      	str	r3, [r2, #84]	@ 0x54
 800edf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	2100      	movs	r1, #0
 800edfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ee06:	460b      	mov	r3, r1
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	d011      	beq.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 800ee0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee10:	3308      	adds	r3, #8
 800ee12:	2100      	movs	r1, #0
 800ee14:	4618      	mov	r0, r3
 800ee16:	f001 f99d 	bl	8010154 <RCCEx_PLL2_Config>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ee20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 800ee28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ee30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	2100      	movs	r1, #0
 800ee3a:	6239      	str	r1, [r7, #32]
 800ee3c:	f003 0302 	and.w	r3, r3, #2
 800ee40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ee46:	460b      	mov	r3, r1
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	d011      	beq.n	800ee70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 800ee4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee50:	3308      	adds	r3, #8
 800ee52:	2101      	movs	r1, #1
 800ee54:	4618      	mov	r0, r3
 800ee56:	f001 f97d 	bl	8010154 <RCCEx_PLL2_Config>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ee60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d003      	beq.n	800ee70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 800ee68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ee70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	2100      	movs	r1, #0
 800ee7a:	61b9      	str	r1, [r7, #24]
 800ee7c:	f003 0304 	and.w	r3, r3, #4
 800ee80:	61fb      	str	r3, [r7, #28]
 800ee82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ee86:	460b      	mov	r3, r1
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	d011      	beq.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800ee8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee90:	3308      	adds	r3, #8
 800ee92:	2102      	movs	r1, #2
 800ee94:	4618      	mov	r0, r3
 800ee96:	f001 f95d 	bl	8010154 <RCCEx_PLL2_Config>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d003      	beq.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800eea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eeac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eeb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	2100      	movs	r1, #0
 800eeba:	6139      	str	r1, [r7, #16]
 800eebc:	f003 0308 	and.w	r3, r3, #8
 800eec0:	617b      	str	r3, [r7, #20]
 800eec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800eec6:	460b      	mov	r3, r1
 800eec8:	4313      	orrs	r3, r2
 800eeca:	d011      	beq.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 800eecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eed0:	3328      	adds	r3, #40	@ 0x28
 800eed2:	2100      	movs	r1, #0
 800eed4:	4618      	mov	r0, r3
 800eed6:	f001 f9ef 	bl	80102b8 <RCCEx_PLL3_Config>
 800eeda:	4603      	mov	r3, r0
 800eedc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800eee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d003      	beq.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 800eee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eeec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800eef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	2100      	movs	r1, #0
 800eefa:	60b9      	str	r1, [r7, #8]
 800eefc:	f003 0310 	and.w	r3, r3, #16
 800ef00:	60fb      	str	r3, [r7, #12]
 800ef02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ef06:	460b      	mov	r3, r1
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	d011      	beq.n	800ef30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800ef0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef10:	3328      	adds	r3, #40	@ 0x28
 800ef12:	2101      	movs	r1, #1
 800ef14:	4618      	mov	r0, r3
 800ef16:	f001 f9cf 	bl	80102b8 <RCCEx_PLL3_Config>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ef20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d003      	beq.n	800ef30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800ef28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ef30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef38:	2100      	movs	r1, #0
 800ef3a:	6039      	str	r1, [r7, #0]
 800ef3c:	f003 0320 	and.w	r3, r3, #32
 800ef40:	607b      	str	r3, [r7, #4]
 800ef42:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ef46:	460b      	mov	r3, r1
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	d011      	beq.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800ef4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef50:	3328      	adds	r3, #40	@ 0x28
 800ef52:	2102      	movs	r1, #2
 800ef54:	4618      	mov	r0, r3
 800ef56:	f001 f9af 	bl	80102b8 <RCCEx_PLL3_Config>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800ef60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d003      	beq.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800ef68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ef70:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d101      	bne.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	e000      	b.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ef84:	46bd      	mov	sp, r7
 800ef86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef8a:	bf00      	nop
 800ef8c:	58024400 	.word	0x58024400

0800ef90 <HAL_RCCEx_GetPeriphCLKFreq>:
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b090      	sub	sp, #64	@ 0x40
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	e9c7 0100 	strd	r0, r1, [r7]
 800ef9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef9e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800efa2:	430b      	orrs	r3, r1
 800efa4:	f040 8094 	bne.w	800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800efa8:	4b9b      	ldr	r3, [pc, #620]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800efaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efac:	f003 0307 	and.w	r3, r3, #7
 800efb0:	633b      	str	r3, [r7, #48]	@ 0x30
 800efb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb4:	2b04      	cmp	r3, #4
 800efb6:	f200 8087 	bhi.w	800f0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800efba:	a201      	add	r2, pc, #4	@ (adr r2, 800efc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800efbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc0:	0800efd5 	.word	0x0800efd5
 800efc4:	0800effd 	.word	0x0800effd
 800efc8:	0800f025 	.word	0x0800f025
 800efcc:	0800f0c1 	.word	0x0800f0c1
 800efd0:	0800f04d 	.word	0x0800f04d
 800efd4:	4b90      	ldr	r3, [pc, #576]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efe0:	d108      	bne.n	800eff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800efe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800efe6:	4618      	mov	r0, r3
 800efe8:	f000 ff62 	bl	800feb0 <HAL_RCCEx_GetPLL1ClockFreq>
 800efec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eff0:	f000 bc93 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eff4:	2300      	movs	r3, #0
 800eff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eff8:	f000 bc8f 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800effc:	4b86      	ldr	r3, [pc, #536]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f008:	d108      	bne.n	800f01c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 800f00a:	f107 0318 	add.w	r3, r7, #24
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 fca6 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f018:	f000 bc7f 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f01c:	2300      	movs	r3, #0
 800f01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f020:	f000 bc7b 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f024:	4b7c      	ldr	r3, [pc, #496]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f02c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f030:	d108      	bne.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800f032:	f107 030c 	add.w	r3, r7, #12
 800f036:	4618      	mov	r0, r3
 800f038:	f000 fde6 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f040:	f000 bc6b 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f044:	2300      	movs	r3, #0
 800f046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f048:	f000 bc67 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f04c:	4b72      	ldr	r3, [pc, #456]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f04e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f050:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f054:	637b      	str	r3, [r7, #52]	@ 0x34
 800f056:	4b70      	ldr	r3, [pc, #448]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f003 0304 	and.w	r3, r3, #4
 800f05e:	2b04      	cmp	r3, #4
 800f060:	d10c      	bne.n	800f07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f064:	2b00      	cmp	r3, #0
 800f066:	d109      	bne.n	800f07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f068:	4b6b      	ldr	r3, [pc, #428]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	08db      	lsrs	r3, r3, #3
 800f06e:	f003 0303 	and.w	r3, r3, #3
 800f072:	4a6a      	ldr	r2, [pc, #424]	@ (800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f074:	fa22 f303 	lsr.w	r3, r2, r3
 800f078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f07a:	e01f      	b.n	800f0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f07c:	4b66      	ldr	r3, [pc, #408]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f088:	d106      	bne.n	800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f08c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f090:	d102      	bne.n	800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f092:	4b63      	ldr	r3, [pc, #396]	@ (800f220 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f096:	e011      	b.n	800f0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f098:	4b5f      	ldr	r3, [pc, #380]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f0a4:	d106      	bne.n	800f0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0ac:	d102      	bne.n	800f0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f0ae:	4b5d      	ldr	r3, [pc, #372]	@ (800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0b2:	e003      	b.n	800f0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0b8:	f000 bc2f 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0bc:	f000 bc2d 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0c0:	4b59      	ldr	r3, [pc, #356]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0c4:	f000 bc29 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0cc:	f000 bc25 	b.w	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0d4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f0d8:	430b      	orrs	r3, r1
 800f0da:	f040 80a7 	bne.w	800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800f0de:	4b4e      	ldr	r3, [pc, #312]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f0e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0e2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f0e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f0ee:	d054      	beq.n	800f19a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f0f6:	f200 808b 	bhi.w	800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f100:	f000 8083 	beq.w	800f20a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800f104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f106:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f10a:	f200 8081 	bhi.w	800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f114:	d02f      	beq.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f11c:	d878      	bhi.n	800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f120:	2b00      	cmp	r3, #0
 800f122:	d004      	beq.n	800f12e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800f124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f12a:	d012      	beq.n	800f152 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800f12c:	e070      	b.n	800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f12e:	4b3a      	ldr	r3, [pc, #232]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f13a:	d107      	bne.n	800f14c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800f13c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f140:	4618      	mov	r0, r3
 800f142:	f000 feb5 	bl	800feb0 <HAL_RCCEx_GetPLL1ClockFreq>
 800f146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f14a:	e3e6      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f14c:	2300      	movs	r3, #0
 800f14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f150:	e3e3      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f152:	4b31      	ldr	r3, [pc, #196]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f15a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f15e:	d107      	bne.n	800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800f160:	f107 0318 	add.w	r3, r7, #24
 800f164:	4618      	mov	r0, r3
 800f166:	f000 fbfb 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f16e:	e3d4      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f170:	2300      	movs	r3, #0
 800f172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f174:	e3d1      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f176:	4b28      	ldr	r3, [pc, #160]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f17e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f182:	d107      	bne.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800f184:	f107 030c 	add.w	r3, r7, #12
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 fd3d 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f192:	e3c2      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f194:	2300      	movs	r3, #0
 800f196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f198:	e3bf      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f19a:	4b1f      	ldr	r3, [pc, #124]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f19c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f19e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1a4:	4b1c      	ldr	r3, [pc, #112]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f003 0304 	and.w	r3, r3, #4
 800f1ac:	2b04      	cmp	r3, #4
 800f1ae:	d10c      	bne.n	800f1ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d109      	bne.n	800f1ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f1b6:	4b18      	ldr	r3, [pc, #96]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	08db      	lsrs	r3, r3, #3
 800f1bc:	f003 0303 	and.w	r3, r3, #3
 800f1c0:	4a16      	ldr	r2, [pc, #88]	@ (800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1c8:	e01e      	b.n	800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800f1ca:	4b13      	ldr	r3, [pc, #76]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1d6:	d106      	bne.n	800f1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1de:	d102      	bne.n	800f1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f1e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f220 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1e4:	e010      	b.n	800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800f1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1f2:	d106      	bne.n	800f202 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1fa:	d102      	bne.n	800f202 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f1fc:	4b09      	ldr	r3, [pc, #36]	@ (800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f200:	e002      	b.n	800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800f202:	2300      	movs	r3, #0
 800f204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f206:	e388      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f208:	e387      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f20a:	4b07      	ldr	r3, [pc, #28]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f20e:	e384      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f210:	2300      	movs	r3, #0
 800f212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f214:	e381      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f216:	bf00      	nop
 800f218:	58024400 	.word	0x58024400
 800f21c:	03d09000 	.word	0x03d09000
 800f220:	003d0900 	.word	0x003d0900
 800f224:	02dc6c00 	.word	0x02dc6c00
 800f228:	00bb8000 	.word	0x00bb8000
 800f22c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f230:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f234:	430b      	orrs	r3, r1
 800f236:	f040 809c 	bne.w	800f372 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f23a:	4b9e      	ldr	r3, [pc, #632]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f23c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f23e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f242:	633b      	str	r3, [r7, #48]	@ 0x30
 800f244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f246:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f24a:	d054      	beq.n	800f2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800f24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f252:	f200 808b 	bhi.w	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f258:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f25c:	f000 8083 	beq.w	800f366 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800f260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f262:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f266:	f200 8081 	bhi.w	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f270:	d02f      	beq.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f278:	d878      	bhi.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f286:	d012      	beq.n	800f2ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f288:	e070      	b.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f28a:	4b8a      	ldr	r3, [pc, #552]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f292:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f296:	d107      	bne.n	800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800f298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 fe07 	bl	800feb0 <HAL_RCCEx_GetPLL1ClockFreq>
 800f2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2a6:	e338      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2ac:	e335      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2ae:	4b81      	ldr	r3, [pc, #516]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f2b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f2ba:	d107      	bne.n	800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800f2bc:	f107 0318 	add.w	r3, r7, #24
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 fb4d 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2ca:	e326      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2d0:	e323      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2d2:	4b78      	ldr	r3, [pc, #480]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f2da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2de:	d107      	bne.n	800f2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 800f2e0:	f107 030c 	add.w	r3, r7, #12
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f000 fc8f 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2ee:	e314      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2f4:	e311      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f2f6:	4b6f      	ldr	r3, [pc, #444]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f2f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f2fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800f300:	4b6c      	ldr	r3, [pc, #432]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f003 0304 	and.w	r3, r3, #4
 800f308:	2b04      	cmp	r3, #4
 800f30a:	d10c      	bne.n	800f326 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d109      	bne.n	800f326 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f312:	4b68      	ldr	r3, [pc, #416]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	08db      	lsrs	r3, r3, #3
 800f318:	f003 0303 	and.w	r3, r3, #3
 800f31c:	4a66      	ldr	r2, [pc, #408]	@ (800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f31e:	fa22 f303 	lsr.w	r3, r2, r3
 800f322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f324:	e01e      	b.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f326:	4b63      	ldr	r3, [pc, #396]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f32e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f332:	d106      	bne.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f33a:	d102      	bne.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f33c:	4b5f      	ldr	r3, [pc, #380]	@ (800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f340:	e010      	b.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f342:	4b5c      	ldr	r3, [pc, #368]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f34a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f34e:	d106      	bne.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f356:	d102      	bne.n	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f358:	4b59      	ldr	r3, [pc, #356]	@ (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f35c:	e002      	b.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800f35e:	2300      	movs	r3, #0
 800f360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f362:	e2da      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f364:	e2d9      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f366:	4b57      	ldr	r3, [pc, #348]	@ (800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f36a:	e2d6      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f36c:	2300      	movs	r3, #0
 800f36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f370:	e2d3      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f372:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f376:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f37a:	430b      	orrs	r3, r1
 800f37c:	f040 80a7 	bne.w	800f4ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 800f380:	4b4c      	ldr	r3, [pc, #304]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f384:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f388:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f390:	d055      	beq.n	800f43e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f398:	f200 8096 	bhi.w	800f4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f39e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f3a2:	f000 8084 	beq.w	800f4ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f3ac:	f200 808c 	bhi.w	800f4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3b6:	d030      	beq.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3be:	f200 8083 	bhi.w	800f4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d004      	beq.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3ce:	d012      	beq.n	800f3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f3d0:	e07a      	b.n	800f4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f3d2:	4b38      	ldr	r3, [pc, #224]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f3da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3de:	d107      	bne.n	800f3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800f3e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f000 fd63 	bl	800feb0 <HAL_RCCEx_GetPLL1ClockFreq>
 800f3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3ee:	e294      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3f4:	e291      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f3f6:	4b2f      	ldr	r3, [pc, #188]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f3fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f402:	d107      	bne.n	800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800f404:	f107 0318 	add.w	r3, r7, #24
 800f408:	4618      	mov	r0, r3
 800f40a:	f000 faa9 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f412:	e282      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f414:	2300      	movs	r3, #0
 800f416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f418:	e27f      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f41a:	4b26      	ldr	r3, [pc, #152]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f426:	d107      	bne.n	800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800f428:	f107 030c 	add.w	r3, r7, #12
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 fbeb 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f436:	e270      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f438:	2300      	movs	r3, #0
 800f43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f43c:	e26d      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f43e:	4b1d      	ldr	r3, [pc, #116]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f446:	637b      	str	r3, [r7, #52]	@ 0x34
 800f448:	4b1a      	ldr	r3, [pc, #104]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f003 0304 	and.w	r3, r3, #4
 800f450:	2b04      	cmp	r3, #4
 800f452:	d10c      	bne.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f456:	2b00      	cmp	r3, #0
 800f458:	d109      	bne.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f45a:	4b16      	ldr	r3, [pc, #88]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	08db      	lsrs	r3, r3, #3
 800f460:	f003 0303 	and.w	r3, r3, #3
 800f464:	4a14      	ldr	r2, [pc, #80]	@ (800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f466:	fa22 f303 	lsr.w	r3, r2, r3
 800f46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f46c:	e01e      	b.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f46e:	4b11      	ldr	r3, [pc, #68]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f47a:	d106      	bne.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f47e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f482:	d102      	bne.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f484:	4b0d      	ldr	r3, [pc, #52]	@ (800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f488:	e010      	b.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f48a:	4b0a      	ldr	r3, [pc, #40]	@ (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f496:	d106      	bne.n	800f4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f49a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f49e:	d102      	bne.n	800f4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f4a0:	4b07      	ldr	r3, [pc, #28]	@ (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4a4:	e002      	b.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4aa:	e236      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4ac:	e235      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4ae:	4b05      	ldr	r3, [pc, #20]	@ (800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4b2:	e232      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4b4:	58024400 	.word	0x58024400
 800f4b8:	03d09000 	.word	0x03d09000
 800f4bc:	003d0900 	.word	0x003d0900
 800f4c0:	02dc6c00 	.word	0x02dc6c00
 800f4c4:	00bb8000 	.word	0x00bb8000
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4cc:	e225      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f4ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4d2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f4d6:	430b      	orrs	r3, r1
 800f4d8:	f040 8085 	bne.w	800f5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 800f4dc:	4b9c      	ldr	r3, [pc, #624]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f4de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4e0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f4e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f4ec:	d06b      	beq.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f4f4:	d874      	bhi.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f4fc:	d056      	beq.n	800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f504:	d86c      	bhi.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f508:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f50c:	d03b      	beq.n	800f586 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f514:	d864      	bhi.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f51c:	d021      	beq.n	800f562 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f524:	d85c      	bhi.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d004      	beq.n	800f536 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f532:	d004      	beq.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f534:	e054      	b.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f536:	f7fe fb43 	bl	800dbc0 <HAL_RCC_GetPCLK1Freq>
 800f53a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f53c:	e1ed      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f53e:	4b84      	ldr	r3, [pc, #528]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f54a:	d107      	bne.n	800f55c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f54c:	f107 0318 	add.w	r3, r7, #24
 800f550:	4618      	mov	r0, r3
 800f552:	f000 fa05 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f55a:	e1de      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f55c:	2300      	movs	r3, #0
 800f55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f560:	e1db      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f562:	4b7b      	ldr	r3, [pc, #492]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f56a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f56e:	d107      	bne.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f570:	f107 030c 	add.w	r3, r7, #12
 800f574:	4618      	mov	r0, r3
 800f576:	f000 fb47 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f57e:	e1cc      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f580:	2300      	movs	r3, #0
 800f582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f584:	e1c9      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f586:	4b72      	ldr	r3, [pc, #456]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f003 0304 	and.w	r3, r3, #4
 800f58e:	2b04      	cmp	r3, #4
 800f590:	d109      	bne.n	800f5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800f592:	4b6f      	ldr	r3, [pc, #444]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	08db      	lsrs	r3, r3, #3
 800f598:	f003 0303 	and.w	r3, r3, #3
 800f59c:	4a6d      	ldr	r2, [pc, #436]	@ (800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f59e:	fa22 f303 	lsr.w	r3, r2, r3
 800f5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5a4:	e1b9      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5aa:	e1b6      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5ac:	4b68      	ldr	r3, [pc, #416]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5b8:	d102      	bne.n	800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800f5ba:	4b67      	ldr	r3, [pc, #412]	@ (800f758 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5be:	e1ac      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5c4:	e1a9      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5c6:	4b62      	ldr	r3, [pc, #392]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5d2:	d102      	bne.n	800f5da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800f5d4:	4b61      	ldr	r3, [pc, #388]	@ (800f75c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5d8:	e19f      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5de:	e19c      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5e4:	e199      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f5e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5ea:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f5ee:	430b      	orrs	r3, r1
 800f5f0:	d173      	bne.n	800f6da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800f5f2:	4b57      	ldr	r3, [pc, #348]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f5f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f5fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f602:	d02f      	beq.n	800f664 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800f604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f60a:	d863      	bhi.n	800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d004      	beq.n	800f61c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800f612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f618:	d012      	beq.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800f61a:	e05b      	b.n	800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f61c:	4b4c      	ldr	r3, [pc, #304]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f624:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f628:	d107      	bne.n	800f63a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 800f62a:	f107 0318 	add.w	r3, r7, #24
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 f996 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f638:	e16f      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f63a:	2300      	movs	r3, #0
 800f63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f63e:	e16c      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f640:	4b43      	ldr	r3, [pc, #268]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f64c:	d107      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800f64e:	f107 030c 	add.w	r3, r7, #12
 800f652:	4618      	mov	r0, r3
 800f654:	f000 fad8 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f65c:	e15d      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f65e:	2300      	movs	r3, #0
 800f660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f662:	e15a      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f664:	4b3a      	ldr	r3, [pc, #232]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f668:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f66c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f66e:	4b38      	ldr	r3, [pc, #224]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f003 0304 	and.w	r3, r3, #4
 800f676:	2b04      	cmp	r3, #4
 800f678:	d10c      	bne.n	800f694 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d109      	bne.n	800f694 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f680:	4b33      	ldr	r3, [pc, #204]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	08db      	lsrs	r3, r3, #3
 800f686:	f003 0303 	and.w	r3, r3, #3
 800f68a:	4a32      	ldr	r2, [pc, #200]	@ (800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f68c:	fa22 f303 	lsr.w	r3, r2, r3
 800f690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f692:	e01e      	b.n	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f694:	4b2e      	ldr	r3, [pc, #184]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f69c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f6a0:	d106      	bne.n	800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f6a8:	d102      	bne.n	800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f6aa:	4b2b      	ldr	r3, [pc, #172]	@ (800f758 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6ae:	e010      	b.n	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f6b0:	4b27      	ldr	r3, [pc, #156]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6bc:	d106      	bne.n	800f6cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f6c4:	d102      	bne.n	800f6cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f6c6:	4b25      	ldr	r3, [pc, #148]	@ (800f75c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6ca:	e002      	b.n	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6d0:	e123      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6d2:	e122      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6d8:	e11f      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6de:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f6e2:	430b      	orrs	r3, r1
 800f6e4:	d13c      	bne.n	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800f6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f6e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d004      	beq.n	800f700 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6fc:	d012      	beq.n	800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800f6fe:	e023      	b.n	800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800f700:	4b13      	ldr	r3, [pc, #76]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f70c:	d107      	bne.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 800f70e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fbcc 	bl	800feb0 <HAL_RCCEx_GetPLL1ClockFreq>
 800f718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f71c:	e0fd      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f71e:	2300      	movs	r3, #0
 800f720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f722:	e0fa      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f724:	4b0a      	ldr	r3, [pc, #40]	@ (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f72c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f730:	d107      	bne.n	800f742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800f732:	f107 0318 	add.w	r3, r7, #24
 800f736:	4618      	mov	r0, r3
 800f738:	f000 f912 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f73c:	6a3b      	ldr	r3, [r7, #32]
 800f73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f740:	e0eb      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f742:	2300      	movs	r3, #0
 800f744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f746:	e0e8      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f748:	2300      	movs	r3, #0
 800f74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f74c:	e0e5      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f74e:	bf00      	nop
 800f750:	58024400 	.word	0x58024400
 800f754:	03d09000 	.word	0x03d09000
 800f758:	003d0900 	.word	0x003d0900
 800f75c:	02dc6c00 	.word	0x02dc6c00
 800f760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f764:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f768:	430b      	orrs	r3, r1
 800f76a:	f040 8085 	bne.w	800f878 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800f76e:	4b6d      	ldr	r3, [pc, #436]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f772:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f776:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f77e:	d06b      	beq.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800f780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f786:	d874      	bhi.n	800f872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f78e:	d056      	beq.n	800f83e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800f790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f796:	d86c      	bhi.n	800f872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f79e:	d03b      	beq.n	800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800f7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f7a6:	d864      	bhi.n	800f872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7ae:	d021      	beq.n	800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7b6:	d85c      	bhi.n	800f872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d004      	beq.n	800f7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800f7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f7c4:	d004      	beq.n	800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800f7c6:	e054      	b.n	800f872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f7c8:	f000 f8b4 	bl	800f934 <HAL_RCCEx_GetD3PCLK1Freq>
 800f7cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f7ce:	e0a4      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f7d0:	4b54      	ldr	r3, [pc, #336]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f7d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f7dc:	d107      	bne.n	800f7ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800f7de:	f107 0318 	add.w	r3, r7, #24
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 f8bc 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7ec:	e095      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7f2:	e092      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f7f4:	4b4b      	ldr	r3, [pc, #300]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f7fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f800:	d107      	bne.n	800f812 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 800f802:	f107 030c 	add.w	r3, r7, #12
 800f806:	4618      	mov	r0, r3
 800f808:	f000 f9fe 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f810:	e083      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f812:	2300      	movs	r3, #0
 800f814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f816:	e080      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f818:	4b42      	ldr	r3, [pc, #264]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f003 0304 	and.w	r3, r3, #4
 800f820:	2b04      	cmp	r3, #4
 800f822:	d109      	bne.n	800f838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 800f824:	4b3f      	ldr	r3, [pc, #252]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	08db      	lsrs	r3, r3, #3
 800f82a:	f003 0303 	and.w	r3, r3, #3
 800f82e:	4a3e      	ldr	r2, [pc, #248]	@ (800f928 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800f830:	fa22 f303 	lsr.w	r3, r2, r3
 800f834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f836:	e070      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f838:	2300      	movs	r3, #0
 800f83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f83c:	e06d      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f83e:	4b39      	ldr	r3, [pc, #228]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f84a:	d102      	bne.n	800f852 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800f84c:	4b37      	ldr	r3, [pc, #220]	@ (800f92c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f850:	e063      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f852:	2300      	movs	r3, #0
 800f854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f856:	e060      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f858:	4b32      	ldr	r3, [pc, #200]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f864:	d102      	bne.n	800f86c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 800f866:	4b32      	ldr	r3, [pc, #200]	@ (800f930 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f86a:	e056      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f86c:	2300      	movs	r3, #0
 800f86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f870:	e053      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f872:	2300      	movs	r3, #0
 800f874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f876:	e050      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f87c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f880:	430b      	orrs	r3, r1
 800f882:	d148      	bne.n	800f916 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800f884:	4b27      	ldr	r3, [pc, #156]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f888:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f88c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f894:	d02a      	beq.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800f896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f89c:	d838      	bhi.n	800f910 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d004      	beq.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f8aa:	d00d      	beq.n	800f8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800f8ac:	e030      	b.n	800f910 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f8ae:	4b1d      	ldr	r3, [pc, #116]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f8b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8ba:	d102      	bne.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
 800f8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800f930 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8c0:	e02b      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8c6:	e028      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8c8:	4b16      	ldr	r3, [pc, #88]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f8d4:	d107      	bne.n	800f8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 800f8d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 fae8 	bl	800feb0 <HAL_RCCEx_GetPLL1ClockFreq>
 800f8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8e4:	e019      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8ea:	e016      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f8f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f8f8:	d107      	bne.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800f8fa:	f107 0318 	add.w	r3, r7, #24
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 f82e 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f908:	e007      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f90a:	2300      	movs	r3, #0
 800f90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f90e:	e004      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f910:	2300      	movs	r3, #0
 800f912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f914:	e001      	b.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f916:	2300      	movs	r3, #0
 800f918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f91a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f91c:	4618      	mov	r0, r3
 800f91e:	3740      	adds	r7, #64	@ 0x40
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	58024400 	.word	0x58024400
 800f928:	03d09000 	.word	0x03d09000
 800f92c:	003d0900 	.word	0x003d0900
 800f930:	02dc6c00 	.word	0x02dc6c00

0800f934 <HAL_RCCEx_GetD3PCLK1Freq>:
 800f934:	b580      	push	{r7, lr}
 800f936:	af00      	add	r7, sp, #0
 800f938:	f7fe f912 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800f93c:	4602      	mov	r2, r0
 800f93e:	4b06      	ldr	r3, [pc, #24]	@ (800f958 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f940:	6a1b      	ldr	r3, [r3, #32]
 800f942:	091b      	lsrs	r3, r3, #4
 800f944:	f003 0307 	and.w	r3, r3, #7
 800f948:	4904      	ldr	r1, [pc, #16]	@ (800f95c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f94a:	5ccb      	ldrb	r3, [r1, r3]
 800f94c:	f003 031f 	and.w	r3, r3, #31
 800f950:	fa22 f303 	lsr.w	r3, r2, r3
 800f954:	4618      	mov	r0, r3
 800f956:	bd80      	pop	{r7, pc}
 800f958:	58024400 	.word	0x58024400
 800f95c:	0801cb14 	.word	0x0801cb14

0800f960 <HAL_RCCEx_GetPLL2ClockFreq>:
 800f960:	b480      	push	{r7}
 800f962:	b089      	sub	sp, #36	@ 0x24
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	4ba1      	ldr	r3, [pc, #644]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f96c:	f003 0303 	and.w	r3, r3, #3
 800f970:	61bb      	str	r3, [r7, #24]
 800f972:	4b9f      	ldr	r3, [pc, #636]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f976:	0b1b      	lsrs	r3, r3, #12
 800f978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f97c:	617b      	str	r3, [r7, #20]
 800f97e:	4b9c      	ldr	r3, [pc, #624]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f982:	091b      	lsrs	r3, r3, #4
 800f984:	f003 0301 	and.w	r3, r3, #1
 800f988:	613b      	str	r3, [r7, #16]
 800f98a:	4b99      	ldr	r3, [pc, #612]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f98e:	08db      	lsrs	r3, r3, #3
 800f990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	fb02 f303 	mul.w	r3, r2, r3
 800f99a:	ee07 3a90 	vmov	s15, r3
 800f99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9a2:	edc7 7a03 	vstr	s15, [r7, #12]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 8111 	beq.w	800fbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	2b02      	cmp	r3, #2
 800f9b2:	f000 8083 	beq.w	800fabc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f9b6:	69bb      	ldr	r3, [r7, #24]
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	f200 80a1 	bhi.w	800fb00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d003      	beq.n	800f9cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d056      	beq.n	800fa78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f9ca:	e099      	b.n	800fb00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f9cc:	4b88      	ldr	r3, [pc, #544]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f003 0320 	and.w	r3, r3, #32
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d02d      	beq.n	800fa34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 800f9d8:	4b85      	ldr	r3, [pc, #532]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	08db      	lsrs	r3, r3, #3
 800f9de:	f003 0303 	and.w	r3, r3, #3
 800f9e2:	4a84      	ldr	r2, [pc, #528]	@ (800fbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800f9e8:	60bb      	str	r3, [r7, #8]
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	ee07 3a90 	vmov	s15, r3
 800f9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	ee07 3a90 	vmov	s15, r3
 800f9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa02:	4b7b      	ldr	r3, [pc, #492]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa0a:	ee07 3a90 	vmov	s15, r3
 800fa0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa12:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fa1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa2e:	edc7 7a07 	vstr	s15, [r7, #28]
 800fa32:	e087      	b.n	800fb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	ee07 3a90 	vmov	s15, r3
 800fa3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fbfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fa42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa46:	4b6a      	ldr	r3, [pc, #424]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa4e:	ee07 3a90 	vmov	s15, r3
 800fa52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa56:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fa5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa72:	edc7 7a07 	vstr	s15, [r7, #28]
 800fa76:	e065      	b.n	800fb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	ee07 3a90 	vmov	s15, r3
 800fa7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fc00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fa86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa8a:	4b59      	ldr	r3, [pc, #356]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa92:	ee07 3a90 	vmov	s15, r3
 800fa96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800faa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800faae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fab6:	edc7 7a07 	vstr	s15, [r7, #28]
 800faba:	e043      	b.n	800fb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	ee07 3a90 	vmov	s15, r3
 800fac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fac6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fc04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800faca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800face:	4b48      	ldr	r3, [pc, #288]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fad6:	ee07 3a90 	vmov	s15, r3
 800fada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fade:	ed97 6a03 	vldr	s12, [r7, #12]
 800fae2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800faf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fafa:	edc7 7a07 	vstr	s15, [r7, #28]
 800fafe:	e021      	b.n	800fb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	ee07 3a90 	vmov	s15, r3
 800fb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fc00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fb0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb12:	4b37      	ldr	r3, [pc, #220]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb1a:	ee07 3a90 	vmov	s15, r3
 800fb1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb22:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb3e:	edc7 7a07 	vstr	s15, [r7, #28]
 800fb42:	bf00      	nop
 800fb44:	4b2a      	ldr	r3, [pc, #168]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb48:	0a5b      	lsrs	r3, r3, #9
 800fb4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb4e:	ee07 3a90 	vmov	s15, r3
 800fb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb6a:	ee17 2a90 	vmov	r2, s15
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	4b1f      	ldr	r3, [pc, #124]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb76:	0c1b      	lsrs	r3, r3, #16
 800fb78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb7c:	ee07 3a90 	vmov	s15, r3
 800fb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb98:	ee17 2a90 	vmov	r2, s15
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	605a      	str	r2, [r3, #4]
 800fba0:	4b13      	ldr	r3, [pc, #76]	@ (800fbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba4:	0e1b      	lsrs	r3, r3, #24
 800fba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbaa:	ee07 3a90 	vmov	s15, r3
 800fbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fbba:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbc6:	ee17 2a90 	vmov	r2, s15
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	609a      	str	r2, [r3, #8]
 800fbce:	e008      	b.n	800fbe2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	605a      	str	r2, [r3, #4]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	609a      	str	r2, [r3, #8]
 800fbe2:	bf00      	nop
 800fbe4:	3724      	adds	r7, #36	@ 0x24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	58024400 	.word	0x58024400
 800fbf4:	03d09000 	.word	0x03d09000
 800fbf8:	46000000 	.word	0x46000000
 800fbfc:	4c742400 	.word	0x4c742400
 800fc00:	4a742400 	.word	0x4a742400
 800fc04:	4c371b00 	.word	0x4c371b00

0800fc08 <HAL_RCCEx_GetPLL3ClockFreq>:
 800fc08:	b480      	push	{r7}
 800fc0a:	b089      	sub	sp, #36	@ 0x24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	4ba1      	ldr	r3, [pc, #644]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc14:	f003 0303 	and.w	r3, r3, #3
 800fc18:	61bb      	str	r3, [r7, #24]
 800fc1a:	4b9f      	ldr	r3, [pc, #636]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc1e:	0d1b      	lsrs	r3, r3, #20
 800fc20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc24:	617b      	str	r3, [r7, #20]
 800fc26:	4b9c      	ldr	r3, [pc, #624]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2a:	0a1b      	lsrs	r3, r3, #8
 800fc2c:	f003 0301 	and.w	r3, r3, #1
 800fc30:	613b      	str	r3, [r7, #16]
 800fc32:	4b99      	ldr	r3, [pc, #612]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc36:	08db      	lsrs	r3, r3, #3
 800fc38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	fb02 f303 	mul.w	r3, r2, r3
 800fc42:	ee07 3a90 	vmov	s15, r3
 800fc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc4a:	edc7 7a03 	vstr	s15, [r7, #12]
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f000 8111 	beq.w	800fe78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	2b02      	cmp	r3, #2
 800fc5a:	f000 8083 	beq.w	800fd64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	2b02      	cmp	r3, #2
 800fc62:	f200 80a1 	bhi.w	800fda8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d003      	beq.n	800fc74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d056      	beq.n	800fd20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fc72:	e099      	b.n	800fda8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fc74:	4b88      	ldr	r3, [pc, #544]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f003 0320 	and.w	r3, r3, #32
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d02d      	beq.n	800fcdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 800fc80:	4b85      	ldr	r3, [pc, #532]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	08db      	lsrs	r3, r3, #3
 800fc86:	f003 0303 	and.w	r3, r3, #3
 800fc8a:	4a84      	ldr	r2, [pc, #528]	@ (800fe9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fc8c:	fa22 f303 	lsr.w	r3, r2, r3
 800fc90:	60bb      	str	r3, [r7, #8]
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	ee07 3a90 	vmov	s15, r3
 800fc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	ee07 3a90 	vmov	s15, r3
 800fca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcaa:	4b7b      	ldr	r3, [pc, #492]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcb2:	ee07 3a90 	vmov	s15, r3
 800fcb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcba:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fcc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcd6:	edc7 7a07 	vstr	s15, [r7, #28]
 800fcda:	e087      	b.n	800fdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	ee07 3a90 	vmov	s15, r3
 800fce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fce6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fea4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fcea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcee:	4b6a      	ldr	r3, [pc, #424]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcf6:	ee07 3a90 	vmov	s15, r3
 800fcfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd1a:	edc7 7a07 	vstr	s15, [r7, #28]
 800fd1e:	e065      	b.n	800fdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	ee07 3a90 	vmov	s15, r3
 800fd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fd2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd32:	4b59      	ldr	r3, [pc, #356]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd3a:	ee07 3a90 	vmov	s15, r3
 800fd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd42:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd5e:	edc7 7a07 	vstr	s15, [r7, #28]
 800fd62:	e043      	b.n	800fdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	ee07 3a90 	vmov	s15, r3
 800fd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800feac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd76:	4b48      	ldr	r3, [pc, #288]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd7e:	ee07 3a90 	vmov	s15, r3
 800fd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd86:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fda2:	edc7 7a07 	vstr	s15, [r7, #28]
 800fda6:	e021      	b.n	800fdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	ee07 3a90 	vmov	s15, r3
 800fdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdba:	4b37      	ldr	r3, [pc, #220]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc2:	ee07 3a90 	vmov	s15, r3
 800fdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdca:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde6:	edc7 7a07 	vstr	s15, [r7, #28]
 800fdea:	bf00      	nop
 800fdec:	4b2a      	ldr	r3, [pc, #168]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdf0:	0a5b      	lsrs	r3, r3, #9
 800fdf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdf6:	ee07 3a90 	vmov	s15, r3
 800fdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe06:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe12:	ee17 2a90 	vmov	r2, s15
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	601a      	str	r2, [r3, #0]
 800fe1a:	4b1f      	ldr	r3, [pc, #124]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe1e:	0c1b      	lsrs	r3, r3, #16
 800fe20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe24:	ee07 3a90 	vmov	s15, r3
 800fe28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe34:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe40:	ee17 2a90 	vmov	r2, s15
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	605a      	str	r2, [r3, #4]
 800fe48:	4b13      	ldr	r3, [pc, #76]	@ (800fe98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe4c:	0e1b      	lsrs	r3, r3, #24
 800fe4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe52:	ee07 3a90 	vmov	s15, r3
 800fe56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe62:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe6e:	ee17 2a90 	vmov	r2, s15
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	609a      	str	r2, [r3, #8]
 800fe76:	e008      	b.n	800fe8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	601a      	str	r2, [r3, #0]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	605a      	str	r2, [r3, #4]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	609a      	str	r2, [r3, #8]
 800fe8a:	bf00      	nop
 800fe8c:	3724      	adds	r7, #36	@ 0x24
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	58024400 	.word	0x58024400
 800fe9c:	03d09000 	.word	0x03d09000
 800fea0:	46000000 	.word	0x46000000
 800fea4:	4c742400 	.word	0x4c742400
 800fea8:	4a742400 	.word	0x4a742400
 800feac:	4c371b00 	.word	0x4c371b00

0800feb0 <HAL_RCCEx_GetPLL1ClockFreq>:
 800feb0:	b480      	push	{r7}
 800feb2:	b089      	sub	sp, #36	@ 0x24
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	4ba0      	ldr	r3, [pc, #640]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800feba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800febc:	f003 0303 	and.w	r3, r3, #3
 800fec0:	61bb      	str	r3, [r7, #24]
 800fec2:	4b9e      	ldr	r3, [pc, #632]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fec6:	091b      	lsrs	r3, r3, #4
 800fec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fecc:	617b      	str	r3, [r7, #20]
 800fece:	4b9b      	ldr	r3, [pc, #620]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fed2:	f003 0301 	and.w	r3, r3, #1
 800fed6:	613b      	str	r3, [r7, #16]
 800fed8:	4b98      	ldr	r3, [pc, #608]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800feda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fedc:	08db      	lsrs	r3, r3, #3
 800fede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fee2:	693a      	ldr	r2, [r7, #16]
 800fee4:	fb02 f303 	mul.w	r3, r2, r3
 800fee8:	ee07 3a90 	vmov	s15, r3
 800feec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fef0:	edc7 7a03 	vstr	s15, [r7, #12]
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	f000 8111 	beq.w	801011e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	f000 8083 	beq.w	801000a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	f200 80a1 	bhi.w	801004e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ff0c:	69bb      	ldr	r3, [r7, #24]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d003      	beq.n	800ff1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d056      	beq.n	800ffc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ff18:	e099      	b.n	801004e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ff1a:	4b88      	ldr	r3, [pc, #544]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f003 0320 	and.w	r3, r3, #32
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d02d      	beq.n	800ff82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 800ff26:	4b85      	ldr	r3, [pc, #532]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	08db      	lsrs	r3, r3, #3
 800ff2c:	f003 0303 	and.w	r3, r3, #3
 800ff30:	4a83      	ldr	r2, [pc, #524]	@ (8010140 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ff32:	fa22 f303 	lsr.w	r3, r2, r3
 800ff36:	60bb      	str	r3, [r7, #8]
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	ee07 3a90 	vmov	s15, r3
 800ff3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	ee07 3a90 	vmov	s15, r3
 800ff48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff50:	4b7a      	ldr	r3, [pc, #488]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff58:	ee07 3a90 	vmov	s15, r3
 800ff5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff60:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff64:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ff68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff7c:	edc7 7a07 	vstr	s15, [r7, #28]
 800ff80:	e087      	b.n	8010092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	ee07 3a90 	vmov	s15, r3
 800ff88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff8c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ff90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff94:	4b69      	ldr	r3, [pc, #420]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff9c:	ee07 3a90 	vmov	s15, r3
 800ffa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffa4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffa8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ffac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ffb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffc0:	edc7 7a07 	vstr	s15, [r7, #28]
 800ffc4:	e065      	b.n	8010092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	ee07 3a90 	vmov	s15, r3
 800ffcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffd0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801014c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ffd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffd8:	4b58      	ldr	r3, [pc, #352]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffe0:	ee07 3a90 	vmov	s15, r3
 800ffe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010004:	edc7 7a07 	vstr	s15, [r7, #28]
 8010008:	e043      	b.n	8010092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	ee07 3a90 	vmov	s15, r3
 8010010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010014:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801001c:	4b47      	ldr	r3, [pc, #284]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801001e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010024:	ee07 3a90 	vmov	s15, r3
 8010028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801002c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010030:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801003c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010048:	edc7 7a07 	vstr	s15, [r7, #28]
 801004c:	e021      	b.n	8010092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	ee07 3a90 	vmov	s15, r3
 8010054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010058:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801005c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010060:	4b36      	ldr	r3, [pc, #216]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010068:	ee07 3a90 	vmov	s15, r3
 801006c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010070:	ed97 6a03 	vldr	s12, [r7, #12]
 8010074:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801007c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010088:	ee67 7a27 	vmul.f32	s15, s14, s15
 801008c:	edc7 7a07 	vstr	s15, [r7, #28]
 8010090:	bf00      	nop
 8010092:	4b2a      	ldr	r3, [pc, #168]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010096:	0a5b      	lsrs	r3, r3, #9
 8010098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801009c:	ee07 3a90 	vmov	s15, r3
 80100a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80100a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80100b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100b8:	ee17 2a90 	vmov	r2, s15
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	601a      	str	r2, [r3, #0]
 80100c0:	4b1e      	ldr	r3, [pc, #120]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100c4:	0c1b      	lsrs	r3, r3, #16
 80100c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100ca:	ee07 3a90 	vmov	s15, r3
 80100ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80100d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100da:	edd7 6a07 	vldr	s13, [r7, #28]
 80100de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100e6:	ee17 2a90 	vmov	r2, s15
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	605a      	str	r2, [r3, #4]
 80100ee:	4b13      	ldr	r3, [pc, #76]	@ (801013c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100f2:	0e1b      	lsrs	r3, r3, #24
 80100f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100f8:	ee07 3a90 	vmov	s15, r3
 80100fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010104:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010108:	edd7 6a07 	vldr	s13, [r7, #28]
 801010c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010114:	ee17 2a90 	vmov	r2, s15
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	609a      	str	r2, [r3, #8]
 801011c:	e008      	b.n	8010130 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	605a      	str	r2, [r3, #4]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	609a      	str	r2, [r3, #8]
 8010130:	bf00      	nop
 8010132:	3724      	adds	r7, #36	@ 0x24
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	58024400 	.word	0x58024400
 8010140:	03d09000 	.word	0x03d09000
 8010144:	46000000 	.word	0x46000000
 8010148:	4c742400 	.word	0x4c742400
 801014c:	4a742400 	.word	0x4a742400
 8010150:	4c371b00 	.word	0x4c371b00

08010154 <RCCEx_PLL2_Config>:
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
 801015e:	2300      	movs	r3, #0
 8010160:	73fb      	strb	r3, [r7, #15]
 8010162:	4b53      	ldr	r3, [pc, #332]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010166:	f003 0303 	and.w	r3, r3, #3
 801016a:	2b03      	cmp	r3, #3
 801016c:	d101      	bne.n	8010172 <RCCEx_PLL2_Config+0x1e>
 801016e:	2301      	movs	r3, #1
 8010170:	e099      	b.n	80102a6 <RCCEx_PLL2_Config+0x152>
 8010172:	4b4f      	ldr	r3, [pc, #316]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4a4e      	ldr	r2, [pc, #312]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010178:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801017c:	6013      	str	r3, [r2, #0]
 801017e:	f7f8 fc59 	bl	8008a34 <HAL_GetTick>
 8010182:	60b8      	str	r0, [r7, #8]
 8010184:	e008      	b.n	8010198 <RCCEx_PLL2_Config+0x44>
 8010186:	f7f8 fc55 	bl	8008a34 <HAL_GetTick>
 801018a:	4602      	mov	r2, r0
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	2b02      	cmp	r3, #2
 8010192:	d901      	bls.n	8010198 <RCCEx_PLL2_Config+0x44>
 8010194:	2303      	movs	r3, #3
 8010196:	e086      	b.n	80102a6 <RCCEx_PLL2_Config+0x152>
 8010198:	4b45      	ldr	r3, [pc, #276]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1f0      	bne.n	8010186 <RCCEx_PLL2_Config+0x32>
 80101a4:	4b42      	ldr	r3, [pc, #264]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 80101a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	031b      	lsls	r3, r3, #12
 80101b2:	493f      	ldr	r1, [pc, #252]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 80101b4:	4313      	orrs	r3, r2
 80101b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	3b01      	subs	r3, #1
 80101be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	689b      	ldr	r3, [r3, #8]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	025b      	lsls	r3, r3, #9
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	431a      	orrs	r2, r3
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	3b01      	subs	r3, #1
 80101d4:	041b      	lsls	r3, r3, #16
 80101d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80101da:	431a      	orrs	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	3b01      	subs	r3, #1
 80101e2:	061b      	lsls	r3, r3, #24
 80101e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80101e8:	4931      	ldr	r1, [pc, #196]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 80101ea:	4313      	orrs	r3, r2
 80101ec:	638b      	str	r3, [r1, #56]	@ 0x38
 80101ee:	4b30      	ldr	r3, [pc, #192]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 80101f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	695b      	ldr	r3, [r3, #20]
 80101fa:	492d      	ldr	r1, [pc, #180]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 80101fc:	4313      	orrs	r3, r2
 80101fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010200:	4b2b      	ldr	r3, [pc, #172]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010204:	f023 0220 	bic.w	r2, r3, #32
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	699b      	ldr	r3, [r3, #24]
 801020c:	4928      	ldr	r1, [pc, #160]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801020e:	4313      	orrs	r3, r2
 8010210:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010212:	4b27      	ldr	r3, [pc, #156]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010216:	4a26      	ldr	r2, [pc, #152]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010218:	f023 0310 	bic.w	r3, r3, #16
 801021c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801021e:	4b24      	ldr	r3, [pc, #144]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010222:	4b24      	ldr	r3, [pc, #144]	@ (80102b4 <RCCEx_PLL2_Config+0x160>)
 8010224:	4013      	ands	r3, r2
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	69d2      	ldr	r2, [r2, #28]
 801022a:	00d2      	lsls	r2, r2, #3
 801022c:	4920      	ldr	r1, [pc, #128]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801022e:	4313      	orrs	r3, r2
 8010230:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8010232:	4b1f      	ldr	r3, [pc, #124]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010236:	4a1e      	ldr	r2, [pc, #120]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010238:	f043 0310 	orr.w	r3, r3, #16
 801023c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d106      	bne.n	8010252 <RCCEx_PLL2_Config+0xfe>
 8010244:	4b1a      	ldr	r3, [pc, #104]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010248:	4a19      	ldr	r2, [pc, #100]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801024a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801024e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010250:	e00f      	b.n	8010272 <RCCEx_PLL2_Config+0x11e>
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	2b01      	cmp	r3, #1
 8010256:	d106      	bne.n	8010266 <RCCEx_PLL2_Config+0x112>
 8010258:	4b15      	ldr	r3, [pc, #84]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801025a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025c:	4a14      	ldr	r2, [pc, #80]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801025e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010262:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010264:	e005      	b.n	8010272 <RCCEx_PLL2_Config+0x11e>
 8010266:	4b12      	ldr	r3, [pc, #72]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801026a:	4a11      	ldr	r2, [pc, #68]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801026c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010270:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010272:	4b0f      	ldr	r3, [pc, #60]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4a0e      	ldr	r2, [pc, #56]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 8010278:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801027c:	6013      	str	r3, [r2, #0]
 801027e:	f7f8 fbd9 	bl	8008a34 <HAL_GetTick>
 8010282:	60b8      	str	r0, [r7, #8]
 8010284:	e008      	b.n	8010298 <RCCEx_PLL2_Config+0x144>
 8010286:	f7f8 fbd5 	bl	8008a34 <HAL_GetTick>
 801028a:	4602      	mov	r2, r0
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	2b02      	cmp	r3, #2
 8010292:	d901      	bls.n	8010298 <RCCEx_PLL2_Config+0x144>
 8010294:	2303      	movs	r3, #3
 8010296:	e006      	b.n	80102a6 <RCCEx_PLL2_Config+0x152>
 8010298:	4b05      	ldr	r3, [pc, #20]	@ (80102b0 <RCCEx_PLL2_Config+0x15c>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d0f0      	beq.n	8010286 <RCCEx_PLL2_Config+0x132>
 80102a4:	7bfb      	ldrb	r3, [r7, #15]
 80102a6:	4618      	mov	r0, r3
 80102a8:	3710      	adds	r7, #16
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	58024400 	.word	0x58024400
 80102b4:	ffff0007 	.word	0xffff0007

080102b8 <RCCEx_PLL3_Config>:
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
 80102c2:	2300      	movs	r3, #0
 80102c4:	73fb      	strb	r3, [r7, #15]
 80102c6:	4b53      	ldr	r3, [pc, #332]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80102c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ca:	f003 0303 	and.w	r3, r3, #3
 80102ce:	2b03      	cmp	r3, #3
 80102d0:	d101      	bne.n	80102d6 <RCCEx_PLL3_Config+0x1e>
 80102d2:	2301      	movs	r3, #1
 80102d4:	e099      	b.n	801040a <RCCEx_PLL3_Config+0x152>
 80102d6:	4b4f      	ldr	r3, [pc, #316]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a4e      	ldr	r2, [pc, #312]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80102dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80102e0:	6013      	str	r3, [r2, #0]
 80102e2:	f7f8 fba7 	bl	8008a34 <HAL_GetTick>
 80102e6:	60b8      	str	r0, [r7, #8]
 80102e8:	e008      	b.n	80102fc <RCCEx_PLL3_Config+0x44>
 80102ea:	f7f8 fba3 	bl	8008a34 <HAL_GetTick>
 80102ee:	4602      	mov	r2, r0
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	d901      	bls.n	80102fc <RCCEx_PLL3_Config+0x44>
 80102f8:	2303      	movs	r3, #3
 80102fa:	e086      	b.n	801040a <RCCEx_PLL3_Config+0x152>
 80102fc:	4b45      	ldr	r3, [pc, #276]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1f0      	bne.n	80102ea <RCCEx_PLL3_Config+0x32>
 8010308:	4b42      	ldr	r3, [pc, #264]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 801030a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801030c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	051b      	lsls	r3, r3, #20
 8010316:	493f      	ldr	r1, [pc, #252]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010318:	4313      	orrs	r3, r2
 801031a:	628b      	str	r3, [r1, #40]	@ 0x28
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	3b01      	subs	r3, #1
 8010322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	689b      	ldr	r3, [r3, #8]
 801032a:	3b01      	subs	r3, #1
 801032c:	025b      	lsls	r3, r3, #9
 801032e:	b29b      	uxth	r3, r3
 8010330:	431a      	orrs	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	3b01      	subs	r3, #1
 8010338:	041b      	lsls	r3, r3, #16
 801033a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801033e:	431a      	orrs	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	3b01      	subs	r3, #1
 8010346:	061b      	lsls	r3, r3, #24
 8010348:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801034c:	4931      	ldr	r1, [pc, #196]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 801034e:	4313      	orrs	r3, r2
 8010350:	640b      	str	r3, [r1, #64]	@ 0x40
 8010352:	4b30      	ldr	r3, [pc, #192]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	695b      	ldr	r3, [r3, #20]
 801035e:	492d      	ldr	r1, [pc, #180]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010360:	4313      	orrs	r3, r2
 8010362:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010364:	4b2b      	ldr	r3, [pc, #172]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010368:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	699b      	ldr	r3, [r3, #24]
 8010370:	4928      	ldr	r1, [pc, #160]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010372:	4313      	orrs	r3, r2
 8010374:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010376:	4b27      	ldr	r3, [pc, #156]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801037a:	4a26      	ldr	r2, [pc, #152]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 801037c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010380:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010382:	4b24      	ldr	r3, [pc, #144]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010386:	4b24      	ldr	r3, [pc, #144]	@ (8010418 <RCCEx_PLL3_Config+0x160>)
 8010388:	4013      	ands	r3, r2
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	69d2      	ldr	r2, [r2, #28]
 801038e:	00d2      	lsls	r2, r2, #3
 8010390:	4920      	ldr	r1, [pc, #128]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010392:	4313      	orrs	r3, r2
 8010394:	644b      	str	r3, [r1, #68]	@ 0x44
 8010396:	4b1f      	ldr	r3, [pc, #124]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 8010398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801039a:	4a1e      	ldr	r2, [pc, #120]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 801039c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80103a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d106      	bne.n	80103b6 <RCCEx_PLL3_Config+0xfe>
 80103a8:	4b1a      	ldr	r3, [pc, #104]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ac:	4a19      	ldr	r2, [pc, #100]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80103b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80103b4:	e00f      	b.n	80103d6 <RCCEx_PLL3_Config+0x11e>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d106      	bne.n	80103ca <RCCEx_PLL3_Config+0x112>
 80103bc:	4b15      	ldr	r3, [pc, #84]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103c0:	4a14      	ldr	r2, [pc, #80]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80103c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80103c8:	e005      	b.n	80103d6 <RCCEx_PLL3_Config+0x11e>
 80103ca:	4b12      	ldr	r3, [pc, #72]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ce:	4a11      	ldr	r2, [pc, #68]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80103d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80103d6:	4b0f      	ldr	r3, [pc, #60]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	4a0e      	ldr	r2, [pc, #56]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80103e0:	6013      	str	r3, [r2, #0]
 80103e2:	f7f8 fb27 	bl	8008a34 <HAL_GetTick>
 80103e6:	60b8      	str	r0, [r7, #8]
 80103e8:	e008      	b.n	80103fc <RCCEx_PLL3_Config+0x144>
 80103ea:	f7f8 fb23 	bl	8008a34 <HAL_GetTick>
 80103ee:	4602      	mov	r2, r0
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	2b02      	cmp	r3, #2
 80103f6:	d901      	bls.n	80103fc <RCCEx_PLL3_Config+0x144>
 80103f8:	2303      	movs	r3, #3
 80103fa:	e006      	b.n	801040a <RCCEx_PLL3_Config+0x152>
 80103fc:	4b05      	ldr	r3, [pc, #20]	@ (8010414 <RCCEx_PLL3_Config+0x15c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010404:	2b00      	cmp	r3, #0
 8010406:	d0f0      	beq.n	80103ea <RCCEx_PLL3_Config+0x132>
 8010408:	7bfb      	ldrb	r3, [r7, #15]
 801040a:	4618      	mov	r0, r3
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	58024400 	.word	0x58024400
 8010418:	ffff0007 	.word	0xffff0007

0801041c <HAL_SD_Init>:
 801041c:	b580      	push	{r7, lr}
 801041e:	b08a      	sub	sp, #40	@ 0x28
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d101      	bne.n	801042e <HAL_SD_Init+0x12>
 801042a:	2301      	movs	r3, #1
 801042c:	e075      	b.n	801051a <HAL_SD_Init+0xfe>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010434:	b2db      	uxtb	r3, r3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d105      	bne.n	8010446 <HAL_SD_Init+0x2a>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	761a      	strb	r2, [r3, #24]
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f7f7 fa13 	bl	800786c <HAL_SD_MspInit>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2204      	movs	r2, #4
 801044a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 f868 	bl	8010524 <HAL_SD_InitCard>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d001      	beq.n	801045e <HAL_SD_Init+0x42>
 801045a:	2301      	movs	r3, #1
 801045c:	e05d      	b.n	801051a <HAL_SD_Init+0xfe>
 801045e:	f107 0308 	add.w	r3, r7, #8
 8010462:	4619      	mov	r1, r3
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 fdb5 	bl	8010fd4 <HAL_SD_GetCardStatus>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d001      	beq.n	8010474 <HAL_SD_Init+0x58>
 8010470:	2301      	movs	r3, #1
 8010472:	e052      	b.n	801051a <HAL_SD_Init+0xfe>
 8010474:	7e3b      	ldrb	r3, [r7, #24]
 8010476:	b2db      	uxtb	r3, r3
 8010478:	627b      	str	r3, [r7, #36]	@ 0x24
 801047a:	7e7b      	ldrb	r3, [r7, #25]
 801047c:	b2db      	uxtb	r3, r3
 801047e:	623b      	str	r3, [r7, #32]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010484:	2b01      	cmp	r3, #1
 8010486:	d10a      	bne.n	801049e <HAL_SD_Init+0x82>
 8010488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801048a:	2b00      	cmp	r3, #0
 801048c:	d102      	bne.n	8010494 <HAL_SD_Init+0x78>
 801048e:	6a3b      	ldr	r3, [r7, #32]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d004      	beq.n	801049e <HAL_SD_Init+0x82>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801049a:	659a      	str	r2, [r3, #88]	@ 0x58
 801049c:	e00b      	b.n	80104b6 <HAL_SD_Init+0x9a>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	d104      	bne.n	80104b0 <HAL_SD_Init+0x94>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80104ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80104ae:	e002      	b.n	80104b6 <HAL_SD_Init+0x9a>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	4619      	mov	r1, r3
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 fe73 	bl	80111a8 <HAL_SD_ConfigWideBusOperation>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <HAL_SD_Init+0xb0>
 80104c8:	2301      	movs	r3, #1
 80104ca:	e026      	b.n	801051a <HAL_SD_Init+0xfe>
 80104cc:	f7f8 fab2 	bl	8008a34 <HAL_GetTick>
 80104d0:	61f8      	str	r0, [r7, #28]
 80104d2:	e011      	b.n	80104f8 <HAL_SD_Init+0xdc>
 80104d4:	f7f8 faae 	bl	8008a34 <HAL_GetTick>
 80104d8:	4602      	mov	r2, r0
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e2:	d109      	bne.n	80104f8 <HAL_SD_Init+0xdc>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80104ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2201      	movs	r2, #1
 80104f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80104f4:	2303      	movs	r3, #3
 80104f6:	e010      	b.n	801051a <HAL_SD_Init+0xfe>
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 ff67 	bl	80113cc <HAL_SD_GetCardState>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b04      	cmp	r3, #4
 8010502:	d1e7      	bne.n	80104d4 <HAL_SD_Init+0xb8>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	635a      	str	r2, [r3, #52]	@ 0x34
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2200      	movs	r2, #0
 801050e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2201      	movs	r2, #1
 8010514:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010518:	2300      	movs	r3, #0
 801051a:	4618      	mov	r0, r3
 801051c:	3728      	adds	r7, #40	@ 0x28
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
	...

08010524 <HAL_SD_InitCard>:
 8010524:	b590      	push	{r4, r7, lr}
 8010526:	b08d      	sub	sp, #52	@ 0x34
 8010528:	af02      	add	r7, sp, #8
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	2300      	movs	r3, #0
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	2300      	movs	r3, #0
 8010532:	613b      	str	r3, [r7, #16]
 8010534:	2300      	movs	r3, #0
 8010536:	617b      	str	r3, [r7, #20]
 8010538:	2300      	movs	r3, #0
 801053a:	61bb      	str	r3, [r7, #24]
 801053c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8010540:	f04f 0100 	mov.w	r1, #0
 8010544:	f7fe fd24 	bl	800ef90 <HAL_RCCEx_GetPeriphCLKFreq>
 8010548:	6278      	str	r0, [r7, #36]	@ 0x24
 801054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054c:	2b00      	cmp	r3, #0
 801054e:	d109      	bne.n	8010564 <HAL_SD_InitCard+0x40>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801055e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010560:	2301      	movs	r3, #1
 8010562:	e070      	b.n	8010646 <HAL_SD_InitCard+0x122>
 8010564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010566:	0a1b      	lsrs	r3, r3, #8
 8010568:	4a39      	ldr	r2, [pc, #228]	@ (8010650 <HAL_SD_InitCard+0x12c>)
 801056a:	fba2 2303 	umull	r2, r3, r2, r3
 801056e:	091b      	lsrs	r3, r3, #4
 8010570:	61fb      	str	r3, [r7, #28]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681c      	ldr	r4, [r3, #0]
 8010576:	466a      	mov	r2, sp
 8010578:	f107 0318 	add.w	r3, r7, #24
 801057c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010580:	e882 0003 	stmia.w	r2, {r0, r1}
 8010584:	f107 030c 	add.w	r3, r7, #12
 8010588:	cb0e      	ldmia	r3, {r1, r2, r3}
 801058a:	4620      	mov	r0, r4
 801058c:	f006 f844 	bl	8016618 <SDMMC_Init>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4618      	mov	r0, r3
 8010596:	f006 f887 	bl	80166a8 <SDMMC_PowerState_ON>
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d005      	beq.n	80105ac <HAL_SD_InitCard+0x88>
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	005b      	lsls	r3, r3, #1
 80105a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80105aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80105ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d007      	beq.n	80105c2 <HAL_SD_InitCard+0x9e>
 80105b2:	4a28      	ldr	r2, [pc, #160]	@ (8010654 <HAL_SD_InitCard+0x130>)
 80105b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80105ba:	3301      	adds	r3, #1
 80105bc:	4618      	mov	r0, r3
 80105be:	f7f8 fa45 	bl	8008a4c <HAL_Delay>
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fff0 	bl	80115a8 <SD_PowerON>
 80105c8:	6238      	str	r0, [r7, #32]
 80105ca:	6a3b      	ldr	r3, [r7, #32]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00b      	beq.n	80105e8 <HAL_SD_InitCard+0xc4>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80105dc:	6a3b      	ldr	r3, [r7, #32]
 80105de:	431a      	orrs	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80105e4:	2301      	movs	r3, #1
 80105e6:	e02e      	b.n	8010646 <HAL_SD_InitCard+0x122>
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 ff0f 	bl	801140c <SD_InitCard>
 80105ee:	6238      	str	r0, [r7, #32]
 80105f0:	6a3b      	ldr	r3, [r7, #32]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d00b      	beq.n	801060e <HAL_SD_InitCard+0xea>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2201      	movs	r2, #1
 80105fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010602:	6a3b      	ldr	r3, [r7, #32]
 8010604:	431a      	orrs	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	635a      	str	r2, [r3, #52]	@ 0x34
 801060a:	2301      	movs	r3, #1
 801060c:	e01b      	b.n	8010646 <HAL_SD_InitCard+0x122>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010616:	4618      	mov	r0, r3
 8010618:	f006 f8dc 	bl	80167d4 <SDMMC_CmdBlockLength>
 801061c:	6238      	str	r0, [r7, #32]
 801061e:	6a3b      	ldr	r3, [r7, #32]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00f      	beq.n	8010644 <HAL_SD_InitCard+0x120>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a0b      	ldr	r2, [pc, #44]	@ (8010658 <HAL_SD_InitCard+0x134>)
 801062a:	639a      	str	r2, [r3, #56]	@ 0x38
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	431a      	orrs	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	635a      	str	r2, [r3, #52]	@ 0x34
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2201      	movs	r2, #1
 801063c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010640:	2301      	movs	r3, #1
 8010642:	e000      	b.n	8010646 <HAL_SD_InitCard+0x122>
 8010644:	2300      	movs	r3, #0
 8010646:	4618      	mov	r0, r3
 8010648:	372c      	adds	r7, #44	@ 0x2c
 801064a:	46bd      	mov	sp, r7
 801064c:	bd90      	pop	{r4, r7, pc}
 801064e:	bf00      	nop
 8010650:	014f8b59 	.word	0x014f8b59
 8010654:	00012110 	.word	0x00012110
 8010658:	1fe00fff 	.word	0x1fe00fff

0801065c <HAL_SD_ReadBlocks>:
 801065c:	b580      	push	{r7, lr}
 801065e:	b092      	sub	sp, #72	@ 0x48
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	603b      	str	r3, [r7, #0]
 801066a:	f7f8 f9e3 	bl	8008a34 <HAL_GetTick>
 801066e:	6338      	str	r0, [r7, #48]	@ 0x30
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	637b      	str	r3, [r7, #52]	@ 0x34
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d107      	bne.n	801068e <HAL_SD_ReadBlocks+0x32>
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010682:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	635a      	str	r2, [r3, #52]	@ 0x34
 801068a:	2301      	movs	r3, #1
 801068c:	e167      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010694:	b2db      	uxtb	r3, r3
 8010696:	2b01      	cmp	r3, #1
 8010698:	f040 815a 	bne.w	8010950 <HAL_SD_ReadBlocks+0x2f4>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2200      	movs	r2, #0
 80106a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80106a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	441a      	add	r2, r3
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d907      	bls.n	80106c0 <HAL_SD_ReadBlocks+0x64>
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80106bc:	2301      	movs	r3, #1
 80106be:	e14e      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2203      	movs	r2, #3
 80106c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2200      	movs	r2, #0
 80106ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d002      	beq.n	80106de <HAL_SD_ReadBlocks+0x82>
 80106d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106da:	025b      	lsls	r3, r3, #9
 80106dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80106de:	f04f 33ff 	mov.w	r3, #4294967295
 80106e2:	617b      	str	r3, [r7, #20]
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	025b      	lsls	r3, r3, #9
 80106e8:	61bb      	str	r3, [r7, #24]
 80106ea:	2390      	movs	r3, #144	@ 0x90
 80106ec:	61fb      	str	r3, [r7, #28]
 80106ee:	2302      	movs	r3, #2
 80106f0:	623b      	str	r3, [r7, #32]
 80106f2:	2300      	movs	r3, #0
 80106f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80106f6:	2300      	movs	r3, #0
 80106f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f107 0214 	add.w	r2, r7, #20
 8010702:	4611      	mov	r1, r2
 8010704:	4618      	mov	r0, r3
 8010706:	f006 f839 	bl	801677c <SDMMC_ConfigData>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68da      	ldr	r2, [r3, #12]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010718:	60da      	str	r2, [r3, #12]
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d90a      	bls.n	8010736 <HAL_SD_ReadBlocks+0xda>
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2202      	movs	r2, #2
 8010724:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801072c:	4618      	mov	r0, r3
 801072e:	f006 f897 	bl	8016860 <SDMMC_CmdReadMultiBlock>
 8010732:	6478      	str	r0, [r7, #68]	@ 0x44
 8010734:	e009      	b.n	801074a <HAL_SD_ReadBlocks+0xee>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2201      	movs	r2, #1
 801073a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010742:	4618      	mov	r0, r3
 8010744:	f006 f869 	bl	801681a <SDMMC_CmdReadSingleBlock>
 8010748:	6478      	str	r0, [r7, #68]	@ 0x44
 801074a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801074c:	2b00      	cmp	r3, #0
 801074e:	d012      	beq.n	8010776 <HAL_SD_ReadBlocks+0x11a>
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a84      	ldr	r2, [pc, #528]	@ (8010968 <HAL_SD_ReadBlocks+0x30c>)
 8010756:	639a      	str	r2, [r3, #56]	@ 0x38
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801075c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801075e:	431a      	orrs	r2, r3
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	635a      	str	r2, [r3, #52]	@ 0x34
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2200      	movs	r2, #0
 8010770:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010772:	2301      	movs	r3, #1
 8010774:	e0f3      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 8010776:	69bb      	ldr	r3, [r7, #24]
 8010778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801077a:	e058      	b.n	801082e <HAL_SD_ReadBlocks+0x1d2>
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010786:	2b00      	cmp	r3, #0
 8010788:	d033      	beq.n	80107f2 <HAL_SD_ReadBlocks+0x196>
 801078a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801078c:	2b1f      	cmp	r3, #31
 801078e:	d930      	bls.n	80107f2 <HAL_SD_ReadBlocks+0x196>
 8010790:	2300      	movs	r3, #0
 8010792:	643b      	str	r3, [r7, #64]	@ 0x40
 8010794:	e027      	b.n	80107e6 <HAL_SD_ReadBlocks+0x18a>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4618      	mov	r0, r3
 801079c:	f005 ff66 	bl	801666c <SDMMC_ReadFIFO>
 80107a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80107a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107a8:	701a      	strb	r2, [r3, #0]
 80107aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ac:	3301      	adds	r3, #1
 80107ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80107b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b2:	0a1b      	lsrs	r3, r3, #8
 80107b4:	b2da      	uxtb	r2, r3
 80107b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107b8:	701a      	strb	r2, [r3, #0]
 80107ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107bc:	3301      	adds	r3, #1
 80107be:	637b      	str	r3, [r7, #52]	@ 0x34
 80107c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c2:	0c1b      	lsrs	r3, r3, #16
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107c8:	701a      	strb	r2, [r3, #0]
 80107ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107cc:	3301      	adds	r3, #1
 80107ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80107d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d2:	0e1b      	lsrs	r3, r3, #24
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107d8:	701a      	strb	r2, [r3, #0]
 80107da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107dc:	3301      	adds	r3, #1
 80107de:	637b      	str	r3, [r7, #52]	@ 0x34
 80107e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107e2:	3301      	adds	r3, #1
 80107e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80107e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107e8:	2b07      	cmp	r3, #7
 80107ea:	d9d4      	bls.n	8010796 <HAL_SD_ReadBlocks+0x13a>
 80107ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ee:	3b20      	subs	r3, #32
 80107f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80107f2:	f7f8 f91f 	bl	8008a34 <HAL_GetTick>
 80107f6:	4602      	mov	r2, r0
 80107f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80107fe:	429a      	cmp	r2, r3
 8010800:	d902      	bls.n	8010808 <HAL_SD_ReadBlocks+0x1ac>
 8010802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010804:	2b00      	cmp	r3, #0
 8010806:	d112      	bne.n	801082e <HAL_SD_ReadBlocks+0x1d2>
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4a56      	ldr	r2, [pc, #344]	@ (8010968 <HAL_SD_ReadBlocks+0x30c>)
 801080e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010814:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	635a      	str	r2, [r3, #52]	@ 0x34
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2201      	movs	r2, #1
 8010820:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	62da      	str	r2, [r3, #44]	@ 0x2c
 801082a:	2303      	movs	r3, #3
 801082c:	e097      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010834:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8010838:	2b00      	cmp	r3, #0
 801083a:	d09f      	beq.n	801077c <HAL_SD_ReadBlocks+0x120>
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68da      	ldr	r2, [r3, #12]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801084a:	60da      	str	r2, [r3, #12]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010856:	2b00      	cmp	r3, #0
 8010858:	d022      	beq.n	80108a0 <HAL_SD_ReadBlocks+0x244>
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b01      	cmp	r3, #1
 801085e:	d91f      	bls.n	80108a0 <HAL_SD_ReadBlocks+0x244>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010864:	2b03      	cmp	r3, #3
 8010866:	d01b      	beq.n	80108a0 <HAL_SD_ReadBlocks+0x244>
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4618      	mov	r0, r3
 801086e:	f006 f861 	bl	8016934 <SDMMC_CmdStopTransfer>
 8010872:	6478      	str	r0, [r7, #68]	@ 0x44
 8010874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010876:	2b00      	cmp	r3, #0
 8010878:	d012      	beq.n	80108a0 <HAL_SD_ReadBlocks+0x244>
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4a3a      	ldr	r2, [pc, #232]	@ (8010968 <HAL_SD_ReadBlocks+0x30c>)
 8010880:	639a      	str	r2, [r3, #56]	@ 0x38
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010888:	431a      	orrs	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	635a      	str	r2, [r3, #52]	@ 0x34
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2201      	movs	r2, #1
 8010892:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2200      	movs	r2, #0
 801089a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801089c:	2301      	movs	r3, #1
 801089e:	e05e      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108a6:	f003 0308 	and.w	r3, r3, #8
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d012      	beq.n	80108d4 <HAL_SD_ReadBlocks+0x278>
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a2d      	ldr	r2, [pc, #180]	@ (8010968 <HAL_SD_ReadBlocks+0x30c>)
 80108b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108ba:	f043 0208 	orr.w	r2, r3, #8
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2201      	movs	r2, #1
 80108c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	2200      	movs	r2, #0
 80108ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80108d0:	2301      	movs	r3, #1
 80108d2:	e044      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108da:	f003 0302 	and.w	r3, r3, #2
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d012      	beq.n	8010908 <HAL_SD_ReadBlocks+0x2ac>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a20      	ldr	r2, [pc, #128]	@ (8010968 <HAL_SD_ReadBlocks+0x30c>)
 80108e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108ee:	f043 0202 	orr.w	r2, r3, #2
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2201      	movs	r2, #1
 80108fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2200      	movs	r2, #0
 8010902:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010904:	2301      	movs	r3, #1
 8010906:	e02a      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801090e:	f003 0320 	and.w	r3, r3, #32
 8010912:	2b00      	cmp	r3, #0
 8010914:	d012      	beq.n	801093c <HAL_SD_ReadBlocks+0x2e0>
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4a13      	ldr	r2, [pc, #76]	@ (8010968 <HAL_SD_ReadBlocks+0x30c>)
 801091c:	639a      	str	r2, [r3, #56]	@ 0x38
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010922:	f043 0220 	orr.w	r2, r3, #32
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	635a      	str	r2, [r3, #52]	@ 0x34
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2201      	movs	r2, #1
 801092e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2200      	movs	r2, #0
 8010936:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010938:	2301      	movs	r3, #1
 801093a:	e010      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a0a      	ldr	r2, [pc, #40]	@ (801096c <HAL_SD_ReadBlocks+0x310>)
 8010942:	639a      	str	r2, [r3, #56]	@ 0x38
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2201      	movs	r2, #1
 8010948:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801094c:	2300      	movs	r3, #0
 801094e:	e006      	b.n	801095e <HAL_SD_ReadBlocks+0x302>
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010954:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	635a      	str	r2, [r3, #52]	@ 0x34
 801095c:	2301      	movs	r3, #1
 801095e:	4618      	mov	r0, r3
 8010960:	3748      	adds	r7, #72	@ 0x48
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	1fe00fff 	.word	0x1fe00fff
 801096c:	18000f3a 	.word	0x18000f3a

08010970 <HAL_SD_WriteBlocks>:
 8010970:	b580      	push	{r7, lr}
 8010972:	b092      	sub	sp, #72	@ 0x48
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
 801097c:	603b      	str	r3, [r7, #0]
 801097e:	f7f8 f859 	bl	8008a34 <HAL_GetTick>
 8010982:	6338      	str	r0, [r7, #48]	@ 0x30
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	637b      	str	r3, [r7, #52]	@ 0x34
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d107      	bne.n	80109a2 <HAL_SD_WriteBlocks+0x32>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010996:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	635a      	str	r2, [r3, #52]	@ 0x34
 801099e:	2301      	movs	r3, #1
 80109a0:	e16b      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	f040 815e 	bne.w	8010c6c <HAL_SD_WriteBlocks+0x2fc>
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2200      	movs	r2, #0
 80109b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80109b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	441a      	add	r2, r3
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d907      	bls.n	80109d4 <HAL_SD_WriteBlocks+0x64>
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109c8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80109d0:	2301      	movs	r3, #1
 80109d2:	e152      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2203      	movs	r2, #3
 80109d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2200      	movs	r2, #0
 80109e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d002      	beq.n	80109f2 <HAL_SD_WriteBlocks+0x82>
 80109ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ee:	025b      	lsls	r3, r3, #9
 80109f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109f2:	f04f 33ff 	mov.w	r3, #4294967295
 80109f6:	61bb      	str	r3, [r7, #24]
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	025b      	lsls	r3, r3, #9
 80109fc:	61fb      	str	r3, [r7, #28]
 80109fe:	2390      	movs	r3, #144	@ 0x90
 8010a00:	623b      	str	r3, [r7, #32]
 8010a02:	2300      	movs	r3, #0
 8010a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a06:	2300      	movs	r3, #0
 8010a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f107 0218 	add.w	r2, r7, #24
 8010a16:	4611      	mov	r1, r2
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f005 feaf 	bl	801677c <SDMMC_ConfigData>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	68da      	ldr	r2, [r3, #12]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010a2c:	60da      	str	r2, [r3, #12]
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d90a      	bls.n	8010a4a <HAL_SD_WriteBlocks+0xda>
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2220      	movs	r2, #32
 8010a38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010a40:	4618      	mov	r0, r3
 8010a42:	f005 ff53 	bl	80168ec <SDMMC_CmdWriteMultiBlock>
 8010a46:	6478      	str	r0, [r7, #68]	@ 0x44
 8010a48:	e009      	b.n	8010a5e <HAL_SD_WriteBlocks+0xee>
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2210      	movs	r2, #16
 8010a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010a56:	4618      	mov	r0, r3
 8010a58:	f005 ff25 	bl	80168a6 <SDMMC_CmdWriteSingleBlock>
 8010a5c:	6478      	str	r0, [r7, #68]	@ 0x44
 8010a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d012      	beq.n	8010a8a <HAL_SD_WriteBlocks+0x11a>
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a86      	ldr	r2, [pc, #536]	@ (8010c84 <HAL_SD_WriteBlocks+0x314>)
 8010a6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a72:	431a      	orrs	r2, r3
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2200      	movs	r2, #0
 8010a84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010a86:	2301      	movs	r3, #1
 8010a88:	e0f7      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a8e:	e05c      	b.n	8010b4a <HAL_SD_WriteBlocks+0x1da>
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d037      	beq.n	8010b0e <HAL_SD_WriteBlocks+0x19e>
 8010a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa0:	2b1f      	cmp	r3, #31
 8010aa2:	d934      	bls.n	8010b0e <HAL_SD_WriteBlocks+0x19e>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8010aa8:	e02b      	b.n	8010b02 <HAL_SD_WriteBlocks+0x192>
 8010aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	617b      	str	r3, [r7, #20]
 8010ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	021a      	lsls	r2, r3, #8
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	617b      	str	r3, [r7, #20]
 8010ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	041a      	lsls	r2, r3, #16
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	617b      	str	r3, [r7, #20]
 8010ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	061a      	lsls	r2, r3, #24
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	617b      	str	r3, [r7, #20]
 8010ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ae8:	3301      	adds	r3, #1
 8010aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f107 0214 	add.w	r2, r7, #20
 8010af4:	4611      	mov	r1, r2
 8010af6:	4618      	mov	r0, r3
 8010af8:	f005 fdc5 	bl	8016686 <SDMMC_WriteFIFO>
 8010afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010afe:	3301      	adds	r3, #1
 8010b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b04:	2b07      	cmp	r3, #7
 8010b06:	d9d0      	bls.n	8010aaa <HAL_SD_WriteBlocks+0x13a>
 8010b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b0a:	3b20      	subs	r3, #32
 8010b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b0e:	f7f7 ff91 	bl	8008a34 <HAL_GetTick>
 8010b12:	4602      	mov	r2, r0
 8010b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d902      	bls.n	8010b24 <HAL_SD_WriteBlocks+0x1b4>
 8010b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d112      	bne.n	8010b4a <HAL_SD_WriteBlocks+0x1da>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4a56      	ldr	r2, [pc, #344]	@ (8010c84 <HAL_SD_WriteBlocks+0x314>)
 8010b2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b32:	431a      	orrs	r2, r3
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	635a      	str	r2, [r3, #52]	@ 0x34
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2200      	movs	r2, #0
 8010b44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010b46:	2303      	movs	r3, #3
 8010b48:	e097      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b50:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d09b      	beq.n	8010a90 <HAL_SD_WriteBlocks+0x120>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68da      	ldr	r2, [r3, #12]
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010b66:	60da      	str	r2, [r3, #12]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d022      	beq.n	8010bbc <HAL_SD_WriteBlocks+0x24c>
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d91f      	bls.n	8010bbc <HAL_SD_WriteBlocks+0x24c>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	d01b      	beq.n	8010bbc <HAL_SD_WriteBlocks+0x24c>
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f005 fed3 	bl	8016934 <SDMMC_CmdStopTransfer>
 8010b8e:	6478      	str	r0, [r7, #68]	@ 0x44
 8010b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d012      	beq.n	8010bbc <HAL_SD_WriteBlocks+0x24c>
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8010c84 <HAL_SD_WriteBlocks+0x314>)
 8010b9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ba4:	431a      	orrs	r2, r3
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2201      	movs	r2, #1
 8010bae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e05e      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bc2:	f003 0308 	and.w	r3, r3, #8
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d012      	beq.n	8010bf0 <HAL_SD_WriteBlocks+0x280>
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	4a2d      	ldr	r2, [pc, #180]	@ (8010c84 <HAL_SD_WriteBlocks+0x314>)
 8010bd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bd6:	f043 0208 	orr.w	r2, r3, #8
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2201      	movs	r2, #1
 8010be2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010bec:	2301      	movs	r3, #1
 8010bee:	e044      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bf6:	f003 0302 	and.w	r3, r3, #2
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d012      	beq.n	8010c24 <HAL_SD_WriteBlocks+0x2b4>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	4a20      	ldr	r2, [pc, #128]	@ (8010c84 <HAL_SD_WriteBlocks+0x314>)
 8010c04:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c0a:	f043 0202 	orr.w	r2, r3, #2
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2201      	movs	r2, #1
 8010c16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010c20:	2301      	movs	r3, #1
 8010c22:	e02a      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c2a:	f003 0310 	and.w	r3, r3, #16
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d012      	beq.n	8010c58 <HAL_SD_WriteBlocks+0x2e8>
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	4a13      	ldr	r2, [pc, #76]	@ (8010c84 <HAL_SD_WriteBlocks+0x314>)
 8010c38:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c3e:	f043 0210 	orr.w	r2, r3, #16
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2201      	movs	r2, #1
 8010c4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2200      	movs	r2, #0
 8010c52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010c54:	2301      	movs	r3, #1
 8010c56:	e010      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8010c88 <HAL_SD_WriteBlocks+0x318>)
 8010c5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010c68:	2300      	movs	r3, #0
 8010c6a:	e006      	b.n	8010c7a <HAL_SD_WriteBlocks+0x30a>
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c78:	2301      	movs	r3, #1
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3748      	adds	r7, #72	@ 0x48
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	1fe00fff 	.word	0x1fe00fff
 8010c88:	18000f3a 	.word	0x18000f3a

08010c8c <HAL_SD_GetCardCSD>:
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c9a:	0f9b      	lsrs	r3, r3, #30
 8010c9c:	b2da      	uxtb	r2, r3
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	701a      	strb	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ca6:	0e9b      	lsrs	r3, r3, #26
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	f003 030f 	and.w	r3, r3, #15
 8010cae:	b2da      	uxtb	r2, r3
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	705a      	strb	r2, [r3, #1]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cb8:	0e1b      	lsrs	r3, r3, #24
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	f003 0303 	and.w	r3, r3, #3
 8010cc0:	b2da      	uxtb	r2, r3
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	709a      	strb	r2, [r3, #2]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cca:	0c1b      	lsrs	r3, r3, #16
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	70da      	strb	r2, [r3, #3]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cd6:	0a1b      	lsrs	r3, r3, #8
 8010cd8:	b2da      	uxtb	r2, r3
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	711a      	strb	r2, [r3, #4]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ce2:	b2da      	uxtb	r2, r3
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	715a      	strb	r2, [r3, #5]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cec:	0d1b      	lsrs	r3, r3, #20
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	80da      	strh	r2, [r3, #6]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cf8:	0c1b      	lsrs	r3, r3, #16
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	f003 030f 	and.w	r3, r3, #15
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	721a      	strb	r2, [r3, #8]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010d0a:	0bdb      	lsrs	r3, r3, #15
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	f003 0301 	and.w	r3, r3, #1
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	725a      	strb	r2, [r3, #9]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010d1c:	0b9b      	lsrs	r3, r3, #14
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	729a      	strb	r2, [r3, #10]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010d2e:	0b5b      	lsrs	r3, r3, #13
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	f003 0301 	and.w	r3, r3, #1
 8010d36:	b2da      	uxtb	r2, r3
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	72da      	strb	r2, [r3, #11]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010d40:	0b1b      	lsrs	r3, r3, #12
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	f003 0301 	and.w	r3, r3, #1
 8010d48:	b2da      	uxtb	r2, r3
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	731a      	strb	r2, [r3, #12]
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	2200      	movs	r2, #0
 8010d52:	735a      	strb	r2, [r3, #13]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d163      	bne.n	8010e24 <HAL_SD_GetCardCSD+0x198>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010d60:	009a      	lsls	r2, r3, #2
 8010d62:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8010d66:	4013      	ands	r3, r2
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8010d6c:	0f92      	lsrs	r2, r2, #30
 8010d6e:	431a      	orrs	r2, r3
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	611a      	str	r2, [r3, #16]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d78:	0edb      	lsrs	r3, r3, #27
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	f003 0307 	and.w	r3, r3, #7
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	751a      	strb	r2, [r3, #20]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d8a:	0e1b      	lsrs	r3, r3, #24
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	f003 0307 	and.w	r3, r3, #7
 8010d92:	b2da      	uxtb	r2, r3
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	755a      	strb	r2, [r3, #21]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d9c:	0d5b      	lsrs	r3, r3, #21
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	f003 0307 	and.w	r3, r3, #7
 8010da4:	b2da      	uxtb	r2, r3
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	759a      	strb	r2, [r3, #22]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010dae:	0c9b      	lsrs	r3, r3, #18
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	f003 0307 	and.w	r3, r3, #7
 8010db6:	b2da      	uxtb	r2, r3
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	75da      	strb	r2, [r3, #23]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010dc0:	0bdb      	lsrs	r3, r3, #15
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	f003 0307 	and.w	r3, r3, #7
 8010dc8:	b2da      	uxtb	r2, r3
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	761a      	strb	r2, [r3, #24]
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	1c5a      	adds	r2, r3, #1
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	649a      	str	r2, [r3, #72]	@ 0x48
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	7e1b      	ldrb	r3, [r3, #24]
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	f003 0307 	and.w	r3, r3, #7
 8010de2:	3302      	adds	r3, #2
 8010de4:	2201      	movs	r2, #1
 8010de6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dea:	687a      	ldr	r2, [r7, #4]
 8010dec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010dee:	fb03 f202 	mul.w	r2, r3, r2
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	649a      	str	r2, [r3, #72]	@ 0x48
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	7a1b      	ldrb	r3, [r3, #8]
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	f003 030f 	and.w	r3, r3, #15
 8010e00:	2201      	movs	r2, #1
 8010e02:	409a      	lsls	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010e10:	0a52      	lsrs	r2, r2, #9
 8010e12:	fb03 f202 	mul.w	r2, r3, r2
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	651a      	str	r2, [r3, #80]	@ 0x50
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e20:	655a      	str	r2, [r3, #84]	@ 0x54
 8010e22:	e031      	b.n	8010e88 <HAL_SD_GetCardCSD+0x1fc>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	d11d      	bne.n	8010e68 <HAL_SD_GetCardCSD+0x1dc>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e30:	041b      	lsls	r3, r3, #16
 8010e32:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e3a:	0c1b      	lsrs	r3, r3, #16
 8010e3c:	431a      	orrs	r2, r3
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	611a      	str	r2, [r3, #16]
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	691b      	ldr	r3, [r3, #16]
 8010e46:	3301      	adds	r3, #1
 8010e48:	029a      	lsls	r2, r3, #10
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	649a      	str	r2, [r3, #72]	@ 0x48
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	651a      	str	r2, [r3, #80]	@ 0x50
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	655a      	str	r2, [r3, #84]	@ 0x54
 8010e66:	e00f      	b.n	8010e88 <HAL_SD_GetCardCSD+0x1fc>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4a58      	ldr	r2, [pc, #352]	@ (8010fd0 <HAL_SD_GetCardCSD+0x344>)
 8010e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010e84:	2301      	movs	r3, #1
 8010e86:	e09d      	b.n	8010fc4 <HAL_SD_GetCardCSD+0x338>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e8c:	0b9b      	lsrs	r3, r3, #14
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	f003 0301 	and.w	r3, r3, #1
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	765a      	strb	r2, [r3, #25]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e9e:	09db      	lsrs	r3, r3, #7
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	769a      	strb	r2, [r3, #26]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	76da      	strb	r2, [r3, #27]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ec0:	0fdb      	lsrs	r3, r3, #31
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	771a      	strb	r2, [r3, #28]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ecc:	0f5b      	lsrs	r3, r3, #29
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	f003 0303 	and.w	r3, r3, #3
 8010ed4:	b2da      	uxtb	r2, r3
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	775a      	strb	r2, [r3, #29]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ede:	0e9b      	lsrs	r3, r3, #26
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	f003 0307 	and.w	r3, r3, #7
 8010ee6:	b2da      	uxtb	r2, r3
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	779a      	strb	r2, [r3, #30]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010ef0:	0d9b      	lsrs	r3, r3, #22
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	f003 030f 	and.w	r3, r3, #15
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	77da      	strb	r2, [r3, #31]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f02:	0d5b      	lsrs	r3, r3, #21
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	f003 0301 	and.w	r3, r3, #1
 8010f0a:	b2da      	uxtb	r2, r3
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	f883 2020 	strb.w	r2, [r3, #32]
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	2200      	movs	r2, #0
 8010f16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f1e:	0c1b      	lsrs	r3, r3, #16
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	f003 0301 	and.w	r3, r3, #1
 8010f26:	b2da      	uxtb	r2, r3
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f32:	0bdb      	lsrs	r3, r3, #15
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	f003 0301 	and.w	r3, r3, #1
 8010f3a:	b2da      	uxtb	r2, r3
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f46:	0b9b      	lsrs	r3, r3, #14
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	f003 0301 	and.w	r3, r3, #1
 8010f4e:	b2da      	uxtb	r2, r3
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f5a:	0b5b      	lsrs	r3, r3, #13
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	b2da      	uxtb	r2, r3
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f6e:	0b1b      	lsrs	r3, r3, #12
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	f003 0301 	and.w	r3, r3, #1
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f82:	0a9b      	lsrs	r3, r3, #10
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	f003 0303 	and.w	r3, r3, #3
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f96:	0a1b      	lsrs	r3, r3, #8
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	f003 0303 	and.w	r3, r3, #3
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010faa:	085b      	lsrs	r3, r3, #1
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr
 8010fd0:	1fe00fff 	.word	0x1fe00fff

08010fd4 <HAL_SD_GetCardStatus>:
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b094      	sub	sp, #80	@ 0x50
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	2b03      	cmp	r3, #3
 8010fee:	d101      	bne.n	8010ff4 <HAL_SD_GetCardStatus+0x20>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e0a7      	b.n	8011144 <HAL_SD_GetCardStatus+0x170>
 8010ff4:	f107 0308 	add.w	r3, r7, #8
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 fb62 	bl	80116c4 <SD_SendSDStatus>
 8011000:	64b8      	str	r0, [r7, #72]	@ 0x48
 8011002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011004:	2b00      	cmp	r3, #0
 8011006:	d011      	beq.n	801102c <HAL_SD_GetCardStatus+0x58>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4a4f      	ldr	r2, [pc, #316]	@ (801114c <HAL_SD_GetCardStatus+0x178>)
 801100e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011016:	431a      	orrs	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	635a      	str	r2, [r3, #52]	@ 0x34
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8011024:	2301      	movs	r3, #1
 8011026:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801102a:	e070      	b.n	801110e <HAL_SD_GetCardStatus+0x13a>
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	099b      	lsrs	r3, r3, #6
 8011030:	b2db      	uxtb	r3, r3
 8011032:	f003 0303 	and.w	r3, r3, #3
 8011036:	b2da      	uxtb	r2, r3
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	701a      	strb	r2, [r3, #0]
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	095b      	lsrs	r3, r3, #5
 8011040:	b2db      	uxtb	r3, r3
 8011042:	f003 0301 	and.w	r3, r3, #1
 8011046:	b2da      	uxtb	r2, r3
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	705a      	strb	r2, [r3, #1]
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	0a1b      	lsrs	r3, r3, #8
 8011050:	b29b      	uxth	r3, r3
 8011052:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011056:	b29a      	uxth	r2, r3
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	0e1b      	lsrs	r3, r3, #24
 801105c:	b29b      	uxth	r3, r3
 801105e:	4313      	orrs	r3, r2
 8011060:	b29a      	uxth	r2, r3
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	805a      	strh	r2, [r3, #2]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	061a      	lsls	r2, r3, #24
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	021b      	lsls	r3, r3, #8
 801106e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011072:	431a      	orrs	r2, r3
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	0a1b      	lsrs	r3, r3, #8
 8011078:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801107c:	431a      	orrs	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	0e1b      	lsrs	r3, r3, #24
 8011082:	431a      	orrs	r2, r3
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	605a      	str	r2, [r3, #4]
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	b2da      	uxtb	r2, r3
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	721a      	strb	r2, [r3, #8]
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	0a1b      	lsrs	r3, r3, #8
 8011094:	b2da      	uxtb	r2, r3
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	725a      	strb	r2, [r3, #9]
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	0d1b      	lsrs	r3, r3, #20
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	f003 030f 	and.w	r3, r3, #15
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	729a      	strb	r2, [r3, #10]
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	0c1b      	lsrs	r3, r3, #16
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	b29b      	uxth	r3, r3
 80110be:	4313      	orrs	r3, r2
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	819a      	strh	r2, [r3, #12]
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	0a9b      	lsrs	r3, r3, #10
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	739a      	strb	r2, [r3, #14]
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	0a1b      	lsrs	r3, r3, #8
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	f003 0303 	and.w	r3, r3, #3
 80110e0:	b2da      	uxtb	r2, r3
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	73da      	strb	r2, [r3, #15]
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	091b      	lsrs	r3, r3, #4
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	f003 030f 	and.w	r3, r3, #15
 80110f0:	b2da      	uxtb	r2, r3
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	741a      	strb	r2, [r3, #16]
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	f003 030f 	and.w	r3, r3, #15
 80110fe:	b2da      	uxtb	r2, r3
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	745a      	strb	r2, [r3, #17]
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	0e1b      	lsrs	r3, r3, #24
 8011108:	b2da      	uxtb	r2, r3
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	749a      	strb	r2, [r3, #18]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011116:	4618      	mov	r0, r3
 8011118:	f005 fb5c 	bl	80167d4 <SDMMC_CmdBlockLength>
 801111c:	64b8      	str	r0, [r7, #72]	@ 0x48
 801111e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00d      	beq.n	8011140 <HAL_SD_GetCardStatus+0x16c>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4a08      	ldr	r2, [pc, #32]	@ (801114c <HAL_SD_GetCardStatus+0x178>)
 801112a:	639a      	str	r2, [r3, #56]	@ 0x38
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011130:	635a      	str	r2, [r3, #52]	@ 0x34
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2201      	movs	r2, #1
 8011136:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801113a:	2301      	movs	r3, #1
 801113c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011140:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8011144:	4618      	mov	r0, r3
 8011146:	3750      	adds	r7, #80	@ 0x50
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	1fe00fff 	.word	0x1fe00fff

08011150 <HAL_SD_GetCardInfo>:
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	601a      	str	r2, [r3, #0]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	605a      	str	r2, [r3, #4]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	609a      	str	r2, [r3, #8]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	60da      	str	r2, [r3, #12]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	611a      	str	r2, [r3, #16]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	615a      	str	r2, [r3, #20]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	619a      	str	r2, [r3, #24]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	61da      	str	r2, [r3, #28]
 801119a:	2300      	movs	r3, #0
 801119c:	4618      	mov	r0, r3
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <HAL_SD_ConfigWideBusOperation>:
 80111a8:	b590      	push	{r4, r7, lr}
 80111aa:	b08d      	sub	sp, #52	@ 0x34
 80111ac:	af02      	add	r7, sp, #8
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
 80111b2:	2300      	movs	r3, #0
 80111b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2203      	movs	r2, #3
 80111bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111c4:	2b03      	cmp	r3, #3
 80111c6:	d02e      	beq.n	8011226 <HAL_SD_ConfigWideBusOperation+0x7e>
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80111ce:	d106      	bne.n	80111de <HAL_SD_ConfigWideBusOperation+0x36>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	635a      	str	r2, [r3, #52]	@ 0x34
 80111dc:	e029      	b.n	8011232 <HAL_SD_ConfigWideBusOperation+0x8a>
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80111e4:	d10a      	bne.n	80111fc <HAL_SD_ConfigWideBusOperation+0x54>
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fb64 	bl	80118b4 <SD_WideBus_Enable>
 80111ec:	6238      	str	r0, [r7, #32]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	431a      	orrs	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80111fa:	e01a      	b.n	8011232 <HAL_SD_ConfigWideBusOperation+0x8a>
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d10a      	bne.n	8011218 <HAL_SD_ConfigWideBusOperation+0x70>
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 fba1 	bl	801194a <SD_WideBus_Disable>
 8011208:	6238      	str	r0, [r7, #32]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801120e:	6a3b      	ldr	r3, [r7, #32]
 8011210:	431a      	orrs	r2, r3
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	635a      	str	r2, [r3, #52]	@ 0x34
 8011216:	e00c      	b.n	8011232 <HAL_SD_ConfigWideBusOperation+0x8a>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801121c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	635a      	str	r2, [r3, #52]	@ 0x34
 8011224:	e005      	b.n	8011232 <HAL_SD_ConfigWideBusOperation+0x8a>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801122a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	635a      	str	r2, [r3, #52]	@ 0x34
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011236:	2b00      	cmp	r3, #0
 8011238:	d007      	beq.n	801124a <HAL_SD_ConfigWideBusOperation+0xa2>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a5f      	ldr	r2, [pc, #380]	@ (80113bc <HAL_SD_ConfigWideBusOperation+0x214>)
 8011240:	639a      	str	r2, [r3, #56]	@ 0x38
 8011242:	2301      	movs	r3, #1
 8011244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011248:	e096      	b.n	8011378 <HAL_SD_ConfigWideBusOperation+0x1d0>
 801124a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801124e:	f04f 0100 	mov.w	r1, #0
 8011252:	f7fd fe9d 	bl	800ef90 <HAL_RCCEx_GetPeriphCLKFreq>
 8011256:	61f8      	str	r0, [r7, #28]
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	2b00      	cmp	r3, #0
 801125c:	f000 8083 	beq.w	8011366 <HAL_SD_ConfigWideBusOperation+0x1be>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	60bb      	str	r3, [r7, #8]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	60fb      	str	r3, [r7, #12]
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	613b      	str	r3, [r7, #16]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	691b      	ldr	r3, [r3, #16]
 8011274:	617b      	str	r3, [r7, #20]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	695a      	ldr	r2, [r3, #20]
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	4950      	ldr	r1, [pc, #320]	@ (80113c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 801127e:	fba1 1303 	umull	r1, r3, r1, r3
 8011282:	0e1b      	lsrs	r3, r3, #24
 8011284:	429a      	cmp	r2, r3
 8011286:	d303      	bcc.n	8011290 <HAL_SD_ConfigWideBusOperation+0xe8>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	695b      	ldr	r3, [r3, #20]
 801128c:	61bb      	str	r3, [r7, #24]
 801128e:	e05a      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011298:	d103      	bne.n	80112a2 <HAL_SD_ConfigWideBusOperation+0xfa>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	695b      	ldr	r3, [r3, #20]
 801129e:	61bb      	str	r3, [r7, #24]
 80112a0:	e051      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80112aa:	d126      	bne.n	80112fa <HAL_SD_ConfigWideBusOperation+0x152>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	695b      	ldr	r3, [r3, #20]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10e      	bne.n	80112d2 <HAL_SD_ConfigWideBusOperation+0x12a>
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	4a43      	ldr	r2, [pc, #268]	@ (80113c4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d906      	bls.n	80112ca <HAL_SD_ConfigWideBusOperation+0x122>
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	4a40      	ldr	r2, [pc, #256]	@ (80113c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80112c0:	fba2 2303 	umull	r2, r3, r2, r3
 80112c4:	0e5b      	lsrs	r3, r3, #25
 80112c6:	61bb      	str	r3, [r7, #24]
 80112c8:	e03d      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	61bb      	str	r3, [r7, #24]
 80112d0:	e039      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	695b      	ldr	r3, [r3, #20]
 80112d6:	005b      	lsls	r3, r3, #1
 80112d8:	69fa      	ldr	r2, [r7, #28]
 80112da:	fbb2 f3f3 	udiv	r3, r2, r3
 80112de:	4a39      	ldr	r2, [pc, #228]	@ (80113c4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d906      	bls.n	80112f2 <HAL_SD_ConfigWideBusOperation+0x14a>
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	4a36      	ldr	r2, [pc, #216]	@ (80113c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80112e8:	fba2 2303 	umull	r2, r3, r2, r3
 80112ec:	0e5b      	lsrs	r3, r3, #25
 80112ee:	61bb      	str	r3, [r7, #24]
 80112f0:	e029      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	695b      	ldr	r3, [r3, #20]
 80112f6:	61bb      	str	r3, [r7, #24]
 80112f8:	e025      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	695b      	ldr	r3, [r3, #20]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d10e      	bne.n	8011320 <HAL_SD_ConfigWideBusOperation+0x178>
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	4a30      	ldr	r2, [pc, #192]	@ (80113c8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d906      	bls.n	8011318 <HAL_SD_ConfigWideBusOperation+0x170>
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	4a2c      	ldr	r2, [pc, #176]	@ (80113c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 801130e:	fba2 2303 	umull	r2, r3, r2, r3
 8011312:	0e1b      	lsrs	r3, r3, #24
 8011314:	61bb      	str	r3, [r7, #24]
 8011316:	e016      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	695b      	ldr	r3, [r3, #20]
 801131c:	61bb      	str	r3, [r7, #24]
 801131e:	e012      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	695b      	ldr	r3, [r3, #20]
 8011324:	005b      	lsls	r3, r3, #1
 8011326:	69fa      	ldr	r2, [r7, #28]
 8011328:	fbb2 f3f3 	udiv	r3, r2, r3
 801132c:	4a26      	ldr	r2, [pc, #152]	@ (80113c8 <HAL_SD_ConfigWideBusOperation+0x220>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d906      	bls.n	8011340 <HAL_SD_ConfigWideBusOperation+0x198>
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	4a22      	ldr	r2, [pc, #136]	@ (80113c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011336:	fba2 2303 	umull	r2, r3, r2, r3
 801133a:	0e1b      	lsrs	r3, r3, #24
 801133c:	61bb      	str	r3, [r7, #24]
 801133e:	e002      	b.n	8011346 <HAL_SD_ConfigWideBusOperation+0x19e>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	61bb      	str	r3, [r7, #24]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681c      	ldr	r4, [r3, #0]
 801134a:	466a      	mov	r2, sp
 801134c:	f107 0314 	add.w	r3, r7, #20
 8011350:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011354:	e882 0003 	stmia.w	r2, {r0, r1}
 8011358:	f107 0308 	add.w	r3, r7, #8
 801135c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801135e:	4620      	mov	r0, r4
 8011360:	f005 f95a 	bl	8016618 <SDMMC_Init>
 8011364:	e008      	b.n	8011378 <HAL_SD_ConfigWideBusOperation+0x1d0>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801136a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	635a      	str	r2, [r3, #52]	@ 0x34
 8011372:	2301      	movs	r3, #1
 8011374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011380:	4618      	mov	r0, r3
 8011382:	f005 fa27 	bl	80167d4 <SDMMC_CmdBlockLength>
 8011386:	6238      	str	r0, [r7, #32]
 8011388:	6a3b      	ldr	r3, [r7, #32]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00c      	beq.n	80113a8 <HAL_SD_ConfigWideBusOperation+0x200>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a0a      	ldr	r2, [pc, #40]	@ (80113bc <HAL_SD_ConfigWideBusOperation+0x214>)
 8011394:	639a      	str	r2, [r3, #56]	@ 0x38
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801139a:	6a3b      	ldr	r3, [r7, #32]
 801139c:	431a      	orrs	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80113a2:	2301      	movs	r3, #1
 80113a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2201      	movs	r2, #1
 80113ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80113b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113b4:	4618      	mov	r0, r3
 80113b6:	372c      	adds	r7, #44	@ 0x2c
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd90      	pop	{r4, r7, pc}
 80113bc:	1fe00fff 	.word	0x1fe00fff
 80113c0:	55e63b89 	.word	0x55e63b89
 80113c4:	02faf080 	.word	0x02faf080
 80113c8:	017d7840 	.word	0x017d7840

080113cc <HAL_SD_GetCardState>:
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	2300      	movs	r3, #0
 80113d6:	60fb      	str	r3, [r7, #12]
 80113d8:	f107 030c 	add.w	r3, r7, #12
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f000 fa40 	bl	8011864 <SD_SendStatus>
 80113e4:	6178      	str	r0, [r7, #20]
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d005      	beq.n	80113f8 <HAL_SD_GetCardState+0x2c>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	431a      	orrs	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	0a5b      	lsrs	r3, r3, #9
 80113fc:	f003 030f 	and.w	r3, r3, #15
 8011400:	613b      	str	r3, [r7, #16]
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	4618      	mov	r0, r3
 8011406:	3718      	adds	r7, #24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <SD_InitCard>:
 801140c:	b580      	push	{r7, lr}
 801140e:	b090      	sub	sp, #64	@ 0x40
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	2300      	movs	r3, #0
 8011416:	817b      	strh	r3, [r7, #10]
 8011418:	f7f7 fb0c 	bl	8008a34 <HAL_GetTick>
 801141c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4618      	mov	r0, r3
 8011424:	f005 f951 	bl	80166ca <SDMMC_GetPowerState>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d102      	bne.n	8011434 <SD_InitCard+0x28>
 801142e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011432:	e0b5      	b.n	80115a0 <SD_InitCard+0x194>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011438:	2b03      	cmp	r3, #3
 801143a:	d02e      	beq.n	801149a <SD_InitCard+0x8e>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4618      	mov	r0, r3
 8011442:	f005 fb9c 	bl	8016b7e <SDMMC_CmdSendCID>
 8011446:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801144a:	2b00      	cmp	r3, #0
 801144c:	d001      	beq.n	8011452 <SD_InitCard+0x46>
 801144e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011450:	e0a6      	b.n	80115a0 <SD_InitCard+0x194>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2100      	movs	r1, #0
 8011458:	4618      	mov	r0, r3
 801145a:	f005 f97c 	bl	8016756 <SDMMC_GetResponse>
 801145e:	4602      	mov	r2, r0
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2104      	movs	r1, #4
 801146a:	4618      	mov	r0, r3
 801146c:	f005 f973 	bl	8016756 <SDMMC_GetResponse>
 8011470:	4602      	mov	r2, r0
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	671a      	str	r2, [r3, #112]	@ 0x70
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2108      	movs	r1, #8
 801147c:	4618      	mov	r0, r3
 801147e:	f005 f96a 	bl	8016756 <SDMMC_GetResponse>
 8011482:	4602      	mov	r2, r0
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	675a      	str	r2, [r3, #116]	@ 0x74
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	210c      	movs	r1, #12
 801148e:	4618      	mov	r0, r3
 8011490:	f005 f961 	bl	8016756 <SDMMC_GetResponse>
 8011494:	4602      	mov	r2, r0
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	679a      	str	r2, [r3, #120]	@ 0x78
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801149e:	2b03      	cmp	r3, #3
 80114a0:	d01d      	beq.n	80114de <SD_InitCard+0xd2>
 80114a2:	e019      	b.n	80114d8 <SD_InitCard+0xcc>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	f107 020a 	add.w	r2, r7, #10
 80114ac:	4611      	mov	r1, r2
 80114ae:	4618      	mov	r0, r3
 80114b0:	f005 fba4 	bl	8016bfc <SDMMC_CmdSetRelAdd>
 80114b4:	63b8      	str	r0, [r7, #56]	@ 0x38
 80114b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d001      	beq.n	80114c0 <SD_InitCard+0xb4>
 80114bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114be:	e06f      	b.n	80115a0 <SD_InitCard+0x194>
 80114c0:	f7f7 fab8 	bl	8008a34 <HAL_GetTick>
 80114c4:	4602      	mov	r2, r0
 80114c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114c8:	1ad3      	subs	r3, r2, r3
 80114ca:	f241 3287 	movw	r2, #4999	@ 0x1387
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d902      	bls.n	80114d8 <SD_InitCard+0xcc>
 80114d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80114d6:	e063      	b.n	80115a0 <SD_InitCard+0x194>
 80114d8:	897b      	ldrh	r3, [r7, #10]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d0e2      	beq.n	80114a4 <SD_InitCard+0x98>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114e2:	2b03      	cmp	r3, #3
 80114e4:	d036      	beq.n	8011554 <SD_InitCard+0x148>
 80114e6:	897b      	ldrh	r3, [r7, #10]
 80114e8:	461a      	mov	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114f6:	041b      	lsls	r3, r3, #16
 80114f8:	4619      	mov	r1, r3
 80114fa:	4610      	mov	r0, r2
 80114fc:	f005 fb5e 	bl	8016bbc <SDMMC_CmdSendCSD>
 8011500:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011504:	2b00      	cmp	r3, #0
 8011506:	d001      	beq.n	801150c <SD_InitCard+0x100>
 8011508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150a:	e049      	b.n	80115a0 <SD_InitCard+0x194>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2100      	movs	r1, #0
 8011512:	4618      	mov	r0, r3
 8011514:	f005 f91f 	bl	8016756 <SDMMC_GetResponse>
 8011518:	4602      	mov	r2, r0
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2104      	movs	r1, #4
 8011524:	4618      	mov	r0, r3
 8011526:	f005 f916 	bl	8016756 <SDMMC_GetResponse>
 801152a:	4602      	mov	r2, r0
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	661a      	str	r2, [r3, #96]	@ 0x60
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2108      	movs	r1, #8
 8011536:	4618      	mov	r0, r3
 8011538:	f005 f90d 	bl	8016756 <SDMMC_GetResponse>
 801153c:	4602      	mov	r2, r0
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	665a      	str	r2, [r3, #100]	@ 0x64
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	210c      	movs	r1, #12
 8011548:	4618      	mov	r0, r3
 801154a:	f005 f904 	bl	8016756 <SDMMC_GetResponse>
 801154e:	4602      	mov	r2, r0
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	669a      	str	r2, [r3, #104]	@ 0x68
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2104      	movs	r1, #4
 801155a:	4618      	mov	r0, r3
 801155c:	f005 f8fb 	bl	8016756 <SDMMC_GetResponse>
 8011560:	4603      	mov	r3, r0
 8011562:	0d1a      	lsrs	r2, r3, #20
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	641a      	str	r2, [r3, #64]	@ 0x40
 8011568:	f107 030c 	add.w	r3, r7, #12
 801156c:	4619      	mov	r1, r3
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff fb8c 	bl	8010c8c <HAL_SD_GetCardCSD>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <SD_InitCard+0x174>
 801157a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801157e:	e00f      	b.n	80115a0 <SD_InitCard+0x194>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011588:	041b      	lsls	r3, r3, #16
 801158a:	4619      	mov	r1, r3
 801158c:	4610      	mov	r0, r2
 801158e:	f005 fa0d 	bl	80169ac <SDMMC_CmdSelDesel>
 8011592:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011596:	2b00      	cmp	r3, #0
 8011598:	d001      	beq.n	801159e <SD_InitCard+0x192>
 801159a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801159c:	e000      	b.n	80115a0 <SD_InitCard+0x194>
 801159e:	2300      	movs	r3, #0
 80115a0:	4618      	mov	r0, r3
 80115a2:	3740      	adds	r7, #64	@ 0x40
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <SD_PowerON>:
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b086      	sub	sp, #24
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	2300      	movs	r3, #0
 80115b2:	60bb      	str	r3, [r7, #8]
 80115b4:	2300      	movs	r3, #0
 80115b6:	617b      	str	r3, [r7, #20]
 80115b8:	2300      	movs	r3, #0
 80115ba:	613b      	str	r3, [r7, #16]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f005 fa16 	bl	80169f2 <SDMMC_CmdGoIdleState>
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d001      	beq.n	80115d2 <SD_PowerON+0x2a>
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	e072      	b.n	80116b8 <SD_PowerON+0x110>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4618      	mov	r0, r3
 80115d8:	f005 fa29 	bl	8016a2e <SDMMC_CmdOperCond>
 80115dc:	60f8      	str	r0, [r7, #12]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80115e4:	d10d      	bne.n	8011602 <SD_PowerON+0x5a>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f005 f9fe 	bl	80169f2 <SDMMC_CmdGoIdleState>
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d004      	beq.n	8011608 <SD_PowerON+0x60>
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	e05a      	b.n	80116b8 <SD_PowerON+0x110>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2201      	movs	r2, #1
 8011606:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801160c:	2b01      	cmp	r3, #1
 801160e:	d137      	bne.n	8011680 <SD_PowerON+0xd8>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2100      	movs	r1, #0
 8011616:	4618      	mov	r0, r3
 8011618:	f005 fa29 	bl	8016a6e <SDMMC_CmdAppCommand>
 801161c:	60f8      	str	r0, [r7, #12]
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d02d      	beq.n	8011680 <SD_PowerON+0xd8>
 8011624:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8011628:	e046      	b.n	80116b8 <SD_PowerON+0x110>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2100      	movs	r1, #0
 8011630:	4618      	mov	r0, r3
 8011632:	f005 fa1c 	bl	8016a6e <SDMMC_CmdAppCommand>
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <SD_PowerON+0x9a>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	e03a      	b.n	80116b8 <SD_PowerON+0x110>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	491e      	ldr	r1, [pc, #120]	@ (80116c0 <SD_PowerON+0x118>)
 8011648:	4618      	mov	r0, r3
 801164a:	f005 fa33 	bl	8016ab4 <SDMMC_CmdAppOperCommand>
 801164e:	60f8      	str	r0, [r7, #12]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d002      	beq.n	801165c <SD_PowerON+0xb4>
 8011656:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801165a:	e02d      	b.n	80116b8 <SD_PowerON+0x110>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2100      	movs	r1, #0
 8011662:	4618      	mov	r0, r3
 8011664:	f005 f877 	bl	8016756 <SDMMC_GetResponse>
 8011668:	6178      	str	r0, [r7, #20]
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	0fdb      	lsrs	r3, r3, #31
 801166e:	2b01      	cmp	r3, #1
 8011670:	d101      	bne.n	8011676 <SD_PowerON+0xce>
 8011672:	2301      	movs	r3, #1
 8011674:	e000      	b.n	8011678 <SD_PowerON+0xd0>
 8011676:	2300      	movs	r3, #0
 8011678:	613b      	str	r3, [r7, #16]
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	3301      	adds	r3, #1
 801167e:	60bb      	str	r3, [r7, #8]
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011686:	4293      	cmp	r3, r2
 8011688:	d802      	bhi.n	8011690 <SD_PowerON+0xe8>
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d0cc      	beq.n	801162a <SD_PowerON+0x82>
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011696:	4293      	cmp	r3, r2
 8011698:	d902      	bls.n	80116a0 <SD_PowerON+0xf8>
 801169a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801169e:	e00b      	b.n	80116b8 <SD_PowerON+0x110>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d002      	beq.n	80116b6 <SD_PowerON+0x10e>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2201      	movs	r2, #1
 80116b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80116b6:	2300      	movs	r3, #0
 80116b8:	4618      	mov	r0, r3
 80116ba:	3718      	adds	r7, #24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	c1100000 	.word	0xc1100000

080116c4 <SD_SendSDStatus>:
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b08c      	sub	sp, #48	@ 0x30
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
 80116ce:	f7f7 f9b1 	bl	8008a34 <HAL_GetTick>
 80116d2:	6278      	str	r0, [r7, #36]	@ 0x24
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2100      	movs	r1, #0
 80116de:	4618      	mov	r0, r3
 80116e0:	f005 f839 	bl	8016756 <SDMMC_GetResponse>
 80116e4:	4603      	mov	r3, r0
 80116e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80116ee:	d102      	bne.n	80116f6 <SD_SendSDStatus+0x32>
 80116f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80116f4:	e0b0      	b.n	8011858 <SD_SendSDStatus+0x194>
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2140      	movs	r1, #64	@ 0x40
 80116fc:	4618      	mov	r0, r3
 80116fe:	f005 f869 	bl	80167d4 <SDMMC_CmdBlockLength>
 8011702:	6238      	str	r0, [r7, #32]
 8011704:	6a3b      	ldr	r3, [r7, #32]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d005      	beq.n	8011716 <SD_SendSDStatus+0x52>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	635a      	str	r2, [r3, #52]	@ 0x34
 8011712:	6a3b      	ldr	r3, [r7, #32]
 8011714:	e0a0      	b.n	8011858 <SD_SendSDStatus+0x194>
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801171e:	041b      	lsls	r3, r3, #16
 8011720:	4619      	mov	r1, r3
 8011722:	4610      	mov	r0, r2
 8011724:	f005 f9a3 	bl	8016a6e <SDMMC_CmdAppCommand>
 8011728:	6238      	str	r0, [r7, #32]
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d005      	beq.n	801173c <SD_SendSDStatus+0x78>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	635a      	str	r2, [r3, #52]	@ 0x34
 8011738:	6a3b      	ldr	r3, [r7, #32]
 801173a:	e08d      	b.n	8011858 <SD_SendSDStatus+0x194>
 801173c:	f04f 33ff 	mov.w	r3, #4294967295
 8011740:	60bb      	str	r3, [r7, #8]
 8011742:	2340      	movs	r3, #64	@ 0x40
 8011744:	60fb      	str	r3, [r7, #12]
 8011746:	2360      	movs	r3, #96	@ 0x60
 8011748:	613b      	str	r3, [r7, #16]
 801174a:	2302      	movs	r3, #2
 801174c:	617b      	str	r3, [r7, #20]
 801174e:	2300      	movs	r3, #0
 8011750:	61bb      	str	r3, [r7, #24]
 8011752:	2301      	movs	r3, #1
 8011754:	61fb      	str	r3, [r7, #28]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f107 0208 	add.w	r2, r7, #8
 801175e:	4611      	mov	r1, r2
 8011760:	4618      	mov	r0, r3
 8011762:	f005 f80b 	bl	801677c <SDMMC_ConfigData>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4618      	mov	r0, r3
 801176c:	f005 fa8b 	bl	8016c86 <SDMMC_CmdStatusRegister>
 8011770:	6238      	str	r0, [r7, #32]
 8011772:	6a3b      	ldr	r3, [r7, #32]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d02b      	beq.n	80117d0 <SD_SendSDStatus+0x10c>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	635a      	str	r2, [r3, #52]	@ 0x34
 8011780:	6a3b      	ldr	r3, [r7, #32]
 8011782:	e069      	b.n	8011858 <SD_SendSDStatus+0x194>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801178a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801178e:	2b00      	cmp	r3, #0
 8011790:	d013      	beq.n	80117ba <SD_SendSDStatus+0xf6>
 8011792:	2300      	movs	r3, #0
 8011794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011796:	e00d      	b.n	80117b4 <SD_SendSDStatus+0xf0>
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	4618      	mov	r0, r3
 801179e:	f004 ff65 	bl	801666c <SDMMC_ReadFIFO>
 80117a2:	4602      	mov	r2, r0
 80117a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117a6:	601a      	str	r2, [r3, #0]
 80117a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117aa:	3304      	adds	r3, #4
 80117ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b0:	3301      	adds	r3, #1
 80117b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80117b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b6:	2b07      	cmp	r3, #7
 80117b8:	d9ee      	bls.n	8011798 <SD_SendSDStatus+0xd4>
 80117ba:	f7f7 f93b 	bl	8008a34 <HAL_GetTick>
 80117be:	4602      	mov	r2, r0
 80117c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c2:	1ad3      	subs	r3, r2, r3
 80117c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117c8:	d102      	bne.n	80117d0 <SD_SendSDStatus+0x10c>
 80117ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80117ce:	e043      	b.n	8011858 <SD_SendSDStatus+0x194>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117d6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d0d2      	beq.n	8011784 <SD_SendSDStatus+0xc0>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117e4:	f003 0308 	and.w	r3, r3, #8
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <SD_SendSDStatus+0x12c>
 80117ec:	2308      	movs	r3, #8
 80117ee:	e033      	b.n	8011858 <SD_SendSDStatus+0x194>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117f6:	f003 0302 	and.w	r3, r3, #2
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d001      	beq.n	8011802 <SD_SendSDStatus+0x13e>
 80117fe:	2302      	movs	r3, #2
 8011800:	e02a      	b.n	8011858 <SD_SendSDStatus+0x194>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011808:	f003 0320 	and.w	r3, r3, #32
 801180c:	2b00      	cmp	r3, #0
 801180e:	d017      	beq.n	8011840 <SD_SendSDStatus+0x17c>
 8011810:	2320      	movs	r3, #32
 8011812:	e021      	b.n	8011858 <SD_SendSDStatus+0x194>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4618      	mov	r0, r3
 801181a:	f004 ff27 	bl	801666c <SDMMC_ReadFIFO>
 801181e:	4602      	mov	r2, r0
 8011820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011826:	3304      	adds	r3, #4
 8011828:	62bb      	str	r3, [r7, #40]	@ 0x28
 801182a:	f7f7 f903 	bl	8008a34 <HAL_GetTick>
 801182e:	4602      	mov	r2, r0
 8011830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011838:	d102      	bne.n	8011840 <SD_SendSDStatus+0x17c>
 801183a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801183e:	e00b      	b.n	8011858 <SD_SendSDStatus+0x194>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1e2      	bne.n	8011814 <SD_SendSDStatus+0x150>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	4a03      	ldr	r2, [pc, #12]	@ (8011860 <SD_SendSDStatus+0x19c>)
 8011854:	639a      	str	r2, [r3, #56]	@ 0x38
 8011856:	2300      	movs	r3, #0
 8011858:	4618      	mov	r0, r3
 801185a:	3730      	adds	r7, #48	@ 0x30
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	18000f3a 	.word	0x18000f3a

08011864 <SD_SendStatus>:
 8011864:	b580      	push	{r7, lr}
 8011866:	b084      	sub	sp, #16
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	6039      	str	r1, [r7, #0]
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d102      	bne.n	801187a <SD_SendStatus+0x16>
 8011874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011878:	e018      	b.n	80118ac <SD_SendStatus+0x48>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011882:	041b      	lsls	r3, r3, #16
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f005 f9da 	bl	8016c40 <SDMMC_CmdSendStatus>
 801188c:	60f8      	str	r0, [r7, #12]
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <SD_SendStatus+0x34>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	e009      	b.n	80118ac <SD_SendStatus+0x48>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2100      	movs	r1, #0
 801189e:	4618      	mov	r0, r3
 80118a0:	f004 ff59 	bl	8016756 <SDMMC_GetResponse>
 80118a4:	4602      	mov	r2, r0
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	2300      	movs	r3, #0
 80118ac:	4618      	mov	r0, r3
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <SD_WideBus_Enable>:
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	2300      	movs	r3, #0
 80118be:	60fb      	str	r3, [r7, #12]
 80118c0:	2300      	movs	r3, #0
 80118c2:	613b      	str	r3, [r7, #16]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2100      	movs	r1, #0
 80118ca:	4618      	mov	r0, r3
 80118cc:	f004 ff43 	bl	8016756 <SDMMC_GetResponse>
 80118d0:	4603      	mov	r3, r0
 80118d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80118d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80118da:	d102      	bne.n	80118e2 <SD_WideBus_Enable+0x2e>
 80118dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80118e0:	e02f      	b.n	8011942 <SD_WideBus_Enable+0x8e>
 80118e2:	f107 030c 	add.w	r3, r7, #12
 80118e6:	4619      	mov	r1, r3
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 f879 	bl	80119e0 <SD_FindSCR>
 80118ee:	6178      	str	r0, [r7, #20]
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d001      	beq.n	80118fa <SD_WideBus_Enable+0x46>
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	e023      	b.n	8011942 <SD_WideBus_Enable+0x8e>
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011900:	2b00      	cmp	r3, #0
 8011902:	d01c      	beq.n	801193e <SD_WideBus_Enable+0x8a>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801190c:	041b      	lsls	r3, r3, #16
 801190e:	4619      	mov	r1, r3
 8011910:	4610      	mov	r0, r2
 8011912:	f005 f8ac 	bl	8016a6e <SDMMC_CmdAppCommand>
 8011916:	6178      	str	r0, [r7, #20]
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <SD_WideBus_Enable+0x6e>
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	e00f      	b.n	8011942 <SD_WideBus_Enable+0x8e>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2102      	movs	r1, #2
 8011928:	4618      	mov	r0, r3
 801192a:	f005 f8e3 	bl	8016af4 <SDMMC_CmdBusWidth>
 801192e:	6178      	str	r0, [r7, #20]
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d001      	beq.n	801193a <SD_WideBus_Enable+0x86>
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	e003      	b.n	8011942 <SD_WideBus_Enable+0x8e>
 801193a:	2300      	movs	r3, #0
 801193c:	e001      	b.n	8011942 <SD_WideBus_Enable+0x8e>
 801193e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011942:	4618      	mov	r0, r3
 8011944:	3718      	adds	r7, #24
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <SD_WideBus_Disable>:
 801194a:	b580      	push	{r7, lr}
 801194c:	b086      	sub	sp, #24
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	2300      	movs	r3, #0
 8011954:	60fb      	str	r3, [r7, #12]
 8011956:	2300      	movs	r3, #0
 8011958:	613b      	str	r3, [r7, #16]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2100      	movs	r1, #0
 8011960:	4618      	mov	r0, r3
 8011962:	f004 fef8 	bl	8016756 <SDMMC_GetResponse>
 8011966:	4603      	mov	r3, r0
 8011968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801196c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011970:	d102      	bne.n	8011978 <SD_WideBus_Disable+0x2e>
 8011972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011976:	e02f      	b.n	80119d8 <SD_WideBus_Disable+0x8e>
 8011978:	f107 030c 	add.w	r3, r7, #12
 801197c:	4619      	mov	r1, r3
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f000 f82e 	bl	80119e0 <SD_FindSCR>
 8011984:	6178      	str	r0, [r7, #20]
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <SD_WideBus_Disable+0x46>
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	e023      	b.n	80119d8 <SD_WideBus_Disable+0x8e>
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011996:	2b00      	cmp	r3, #0
 8011998:	d01c      	beq.n	80119d4 <SD_WideBus_Disable+0x8a>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119a2:	041b      	lsls	r3, r3, #16
 80119a4:	4619      	mov	r1, r3
 80119a6:	4610      	mov	r0, r2
 80119a8:	f005 f861 	bl	8016a6e <SDMMC_CmdAppCommand>
 80119ac:	6178      	str	r0, [r7, #20]
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <SD_WideBus_Disable+0x6e>
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	e00f      	b.n	80119d8 <SD_WideBus_Disable+0x8e>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2100      	movs	r1, #0
 80119be:	4618      	mov	r0, r3
 80119c0:	f005 f898 	bl	8016af4 <SDMMC_CmdBusWidth>
 80119c4:	6178      	str	r0, [r7, #20]
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <SD_WideBus_Disable+0x86>
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	e003      	b.n	80119d8 <SD_WideBus_Disable+0x8e>
 80119d0:	2300      	movs	r3, #0
 80119d2:	e001      	b.n	80119d8 <SD_WideBus_Disable+0x8e>
 80119d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80119d8:	4618      	mov	r0, r3
 80119da:	3718      	adds	r7, #24
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <SD_FindSCR>:
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b08e      	sub	sp, #56	@ 0x38
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
 80119ea:	f7f7 f823 	bl	8008a34 <HAL_GetTick>
 80119ee:	6338      	str	r0, [r7, #48]	@ 0x30
 80119f0:	2300      	movs	r3, #0
 80119f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80119f4:	2300      	movs	r3, #0
 80119f6:	60bb      	str	r3, [r7, #8]
 80119f8:	2300      	movs	r3, #0
 80119fa:	60fb      	str	r3, [r7, #12]
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2108      	movs	r1, #8
 8011a06:	4618      	mov	r0, r3
 8011a08:	f004 fee4 	bl	80167d4 <SDMMC_CmdBlockLength>
 8011a0c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d001      	beq.n	8011a18 <SD_FindSCR+0x38>
 8011a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a16:	e0ad      	b.n	8011b74 <SD_FindSCR+0x194>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a20:	041b      	lsls	r3, r3, #16
 8011a22:	4619      	mov	r1, r3
 8011a24:	4610      	mov	r0, r2
 8011a26:	f005 f822 	bl	8016a6e <SDMMC_CmdAppCommand>
 8011a2a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d001      	beq.n	8011a36 <SD_FindSCR+0x56>
 8011a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a34:	e09e      	b.n	8011b74 <SD_FindSCR+0x194>
 8011a36:	f04f 33ff 	mov.w	r3, #4294967295
 8011a3a:	613b      	str	r3, [r7, #16]
 8011a3c:	2308      	movs	r3, #8
 8011a3e:	617b      	str	r3, [r7, #20]
 8011a40:	2330      	movs	r3, #48	@ 0x30
 8011a42:	61bb      	str	r3, [r7, #24]
 8011a44:	2302      	movs	r3, #2
 8011a46:	61fb      	str	r3, [r7, #28]
 8011a48:	2300      	movs	r3, #0
 8011a4a:	623b      	str	r3, [r7, #32]
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f107 0210 	add.w	r2, r7, #16
 8011a58:	4611      	mov	r1, r2
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f004 fe8e 	bl	801677c <SDMMC_ConfigData>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f005 f868 	bl	8016b3a <SDMMC_CmdSendSCR>
 8011a6a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d027      	beq.n	8011ac2 <SD_FindSCR+0xe2>
 8011a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a74:	e07e      	b.n	8011b74 <SD_FindSCR+0x194>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d113      	bne.n	8011aac <SD_FindSCR+0xcc>
 8011a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d110      	bne.n	8011aac <SD_FindSCR+0xcc>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f004 fdec 	bl	801666c <SDMMC_ReadFIFO>
 8011a94:	4603      	mov	r3, r0
 8011a96:	60bb      	str	r3, [r7, #8]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f004 fde5 	bl	801666c <SDMMC_ReadFIFO>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	60fb      	str	r3, [r7, #12]
 8011aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8011aac:	f7f6 ffc2 	bl	8008a34 <HAL_GetTick>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab4:	1ad3      	subs	r3, r2, r3
 8011ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aba:	d102      	bne.n	8011ac2 <SD_FindSCR+0xe2>
 8011abc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011ac0:	e058      	b.n	8011b74 <SD_FindSCR+0x194>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ac8:	f240 532a 	movw	r3, #1322	@ 0x52a
 8011acc:	4013      	ands	r3, r2
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d0d1      	beq.n	8011a76 <SD_FindSCR+0x96>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ad8:	f003 0308 	and.w	r3, r3, #8
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d005      	beq.n	8011aec <SD_FindSCR+0x10c>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2208      	movs	r2, #8
 8011ae6:	639a      	str	r2, [r3, #56]	@ 0x38
 8011ae8:	2308      	movs	r3, #8
 8011aea:	e043      	b.n	8011b74 <SD_FindSCR+0x194>
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011af2:	f003 0302 	and.w	r3, r3, #2
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d005      	beq.n	8011b06 <SD_FindSCR+0x126>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2202      	movs	r2, #2
 8011b00:	639a      	str	r2, [r3, #56]	@ 0x38
 8011b02:	2302      	movs	r3, #2
 8011b04:	e036      	b.n	8011b74 <SD_FindSCR+0x194>
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b0c:	f003 0320 	and.w	r3, r3, #32
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d005      	beq.n	8011b20 <SD_FindSCR+0x140>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2220      	movs	r2, #32
 8011b1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8011b1c:	2320      	movs	r3, #32
 8011b1e:	e029      	b.n	8011b74 <SD_FindSCR+0x194>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4a15      	ldr	r2, [pc, #84]	@ (8011b7c <SD_FindSCR+0x19c>)
 8011b26:	639a      	str	r2, [r3, #56]	@ 0x38
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	061a      	lsls	r2, r3, #24
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	021b      	lsls	r3, r3, #8
 8011b30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b34:	431a      	orrs	r2, r3
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	0a1b      	lsrs	r3, r3, #8
 8011b3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b3e:	431a      	orrs	r2, r3
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	0e1b      	lsrs	r3, r3, #24
 8011b44:	431a      	orrs	r2, r3
 8011b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	061a      	lsls	r2, r3, #24
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	021b      	lsls	r3, r3, #8
 8011b58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b5c:	431a      	orrs	r2, r3
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	0a1b      	lsrs	r3, r3, #8
 8011b62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b66:	431a      	orrs	r2, r3
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	0e1b      	lsrs	r3, r3, #24
 8011b6c:	431a      	orrs	r2, r3
 8011b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b70:	601a      	str	r2, [r3, #0]
 8011b72:	2300      	movs	r3, #0
 8011b74:	4618      	mov	r0, r3
 8011b76:	3738      	adds	r7, #56	@ 0x38
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	18000f3a 	.word	0x18000f3a

08011b80 <HAL_SPI_Init>:
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <HAL_SPI_Init+0x12>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e10f      	b.n	8011db2 <HAL_SPI_Init+0x232>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	629a      	str	r2, [r3, #40]	@ 0x28
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	4a87      	ldr	r2, [pc, #540]	@ (8011dbc <HAL_SPI_Init+0x23c>)
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	d00f      	beq.n	8011bc2 <HAL_SPI_Init+0x42>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a86      	ldr	r2, [pc, #536]	@ (8011dc0 <HAL_SPI_Init+0x240>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d00a      	beq.n	8011bc2 <HAL_SPI_Init+0x42>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	4a84      	ldr	r2, [pc, #528]	@ (8011dc4 <HAL_SPI_Init+0x244>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d005      	beq.n	8011bc2 <HAL_SPI_Init+0x42>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	2b0f      	cmp	r3, #15
 8011bbc:	d901      	bls.n	8011bc2 <HAL_SPI_Init+0x42>
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	e0f7      	b.n	8011db2 <HAL_SPI_Init+0x232>
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f000 fef6 	bl	80129b4 <SPI_GetPacketSize>
 8011bc8:	60f8      	str	r0, [r7, #12]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	4a7b      	ldr	r2, [pc, #492]	@ (8011dbc <HAL_SPI_Init+0x23c>)
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	d00c      	beq.n	8011bee <HAL_SPI_Init+0x6e>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4a79      	ldr	r2, [pc, #484]	@ (8011dc0 <HAL_SPI_Init+0x240>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d007      	beq.n	8011bee <HAL_SPI_Init+0x6e>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4a78      	ldr	r2, [pc, #480]	@ (8011dc4 <HAL_SPI_Init+0x244>)
 8011be4:	4293      	cmp	r3, r2
 8011be6:	d002      	beq.n	8011bee <HAL_SPI_Init+0x6e>
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2b08      	cmp	r3, #8
 8011bec:	d811      	bhi.n	8011c12 <HAL_SPI_Init+0x92>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	4a72      	ldr	r2, [pc, #456]	@ (8011dbc <HAL_SPI_Init+0x23c>)
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d009      	beq.n	8011c0c <HAL_SPI_Init+0x8c>
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a70      	ldr	r2, [pc, #448]	@ (8011dc0 <HAL_SPI_Init+0x240>)
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d004      	beq.n	8011c0c <HAL_SPI_Init+0x8c>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	4a6f      	ldr	r2, [pc, #444]	@ (8011dc4 <HAL_SPI_Init+0x244>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d104      	bne.n	8011c16 <HAL_SPI_Init+0x96>
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2b10      	cmp	r3, #16
 8011c10:	d901      	bls.n	8011c16 <HAL_SPI_Init+0x96>
 8011c12:	2301      	movs	r3, #1
 8011c14:	e0cd      	b.n	8011db2 <HAL_SPI_Init+0x232>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d106      	bne.n	8011c30 <HAL_SPI_Init+0xb0>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f7f5 feac 	bl	8007988 <HAL_SPI_MspInit>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2202      	movs	r2, #2
 8011c34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f022 0201 	bic.w	r2, r2, #1
 8011c46:	601a      	str	r2, [r3, #0]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	689b      	ldr	r3, [r3, #8]
 8011c4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8011c52:	60bb      	str	r3, [r7, #8]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	699b      	ldr	r3, [r3, #24]
 8011c58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011c5c:	d119      	bne.n	8011c92 <HAL_SPI_Init+0x112>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011c66:	d103      	bne.n	8011c70 <HAL_SPI_Init+0xf0>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d008      	beq.n	8011c82 <HAL_SPI_Init+0x102>
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d10c      	bne.n	8011c92 <HAL_SPI_Init+0x112>
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011c80:	d107      	bne.n	8011c92 <HAL_SPI_Init+0x112>
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	681a      	ldr	r2, [r3, #0]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011c90:	601a      	str	r2, [r3, #0]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00f      	beq.n	8011cbe <HAL_SPI_Init+0x13e>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	2b06      	cmp	r3, #6
 8011ca4:	d90b      	bls.n	8011cbe <HAL_SPI_Init+0x13e>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	430a      	orrs	r2, r1
 8011cba:	601a      	str	r2, [r3, #0]
 8011cbc:	e007      	b.n	8011cce <HAL_SPI_Init+0x14e>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	69da      	ldr	r2, [r3, #28]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cd6:	431a      	orrs	r2, r3
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	431a      	orrs	r2, r3
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ce0:	ea42 0103 	orr.w	r1, r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	68da      	ldr	r2, [r3, #12]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	430a      	orrs	r2, r1
 8011cee:	609a      	str	r2, [r3, #8]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cf8:	431a      	orrs	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cfe:	431a      	orrs	r2, r3
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	699b      	ldr	r3, [r3, #24]
 8011d04:	431a      	orrs	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	691b      	ldr	r3, [r3, #16]
 8011d0a:	431a      	orrs	r2, r3
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	695b      	ldr	r3, [r3, #20]
 8011d10:	431a      	orrs	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6a1b      	ldr	r3, [r3, #32]
 8011d16:	431a      	orrs	r2, r3
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	431a      	orrs	r2, r3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d22:	431a      	orrs	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	689b      	ldr	r3, [r3, #8]
 8011d28:	431a      	orrs	r2, r3
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011d2e:	ea42 0103 	orr.w	r1, r2, r3
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	430a      	orrs	r2, r1
 8011d3c:	60da      	str	r2, [r3, #12]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d113      	bne.n	8011d6e <HAL_SPI_Init+0x1ee>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011d58:	609a      	str	r2, [r3, #8]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011d6c:	609a      	str	r2, [r3, #8]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f022 0201 	bic.w	r2, r2, #1
 8011d7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d00a      	beq.n	8011da0 <HAL_SPI_Init+0x220>
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	430a      	orrs	r2, r1
 8011d9e:	60da      	str	r2, [r3, #12]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2200      	movs	r2, #0
 8011da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2201      	movs	r2, #1
 8011dac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8011db0:	2300      	movs	r3, #0
 8011db2:	4618      	mov	r0, r3
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	40013000 	.word	0x40013000
 8011dc0:	40003800 	.word	0x40003800
 8011dc4:	40003c00 	.word	0x40003c00

08011dc8 <HAL_SPI_Transmit>:
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b088      	sub	sp, #32
 8011dcc:	af02      	add	r7, sp, #8
 8011dce:	60f8      	str	r0, [r7, #12]
 8011dd0:	60b9      	str	r1, [r7, #8]
 8011dd2:	603b      	str	r3, [r7, #0]
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	80fb      	strh	r3, [r7, #6]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	3320      	adds	r3, #32
 8011dde:	617b      	str	r3, [r7, #20]
 8011de0:	f7f6 fe28 	bl	8008a34 <HAL_GetTick>
 8011de4:	6138      	str	r0, [r7, #16]
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d001      	beq.n	8011df6 <HAL_SPI_Transmit+0x2e>
 8011df2:	2302      	movs	r3, #2
 8011df4:	e1d1      	b.n	801219a <HAL_SPI_Transmit+0x3d2>
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d002      	beq.n	8011e02 <HAL_SPI_Transmit+0x3a>
 8011dfc:	88fb      	ldrh	r3, [r7, #6]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d101      	bne.n	8011e06 <HAL_SPI_Transmit+0x3e>
 8011e02:	2301      	movs	r3, #1
 8011e04:	e1c9      	b.n	801219a <HAL_SPI_Transmit+0x3d2>
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d101      	bne.n	8011e14 <HAL_SPI_Transmit+0x4c>
 8011e10:	2302      	movs	r3, #2
 8011e12:	e1c2      	b.n	801219a <HAL_SPI_Transmit+0x3d2>
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2201      	movs	r2, #1
 8011e18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2203      	movs	r2, #3
 8011e20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	68ba      	ldr	r2, [r7, #8]
 8011e30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	88fa      	ldrh	r2, [r7, #6]
 8011e36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	88fa      	ldrh	r2, [r7, #6]
 8011e3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2200      	movs	r2, #0
 8011e46:	665a      	str	r2, [r3, #100]	@ 0x64
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2200      	movs	r2, #0
 8011e62:	671a      	str	r2, [r3, #112]	@ 0x70
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011e6c:	d108      	bne.n	8011e80 <HAL_SPI_Transmit+0xb8>
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	681a      	ldr	r2, [r3, #0]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e7c:	601a      	str	r2, [r3, #0]
 8011e7e:	e009      	b.n	8011e94 <HAL_SPI_Transmit+0xcc>
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011e92:	60da      	str	r2, [r3, #12]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	685a      	ldr	r2, [r3, #4]
 8011e9a:	4b96      	ldr	r3, [pc, #600]	@ (80120f4 <HAL_SPI_Transmit+0x32c>)
 8011e9c:	4013      	ands	r3, r2
 8011e9e:	88f9      	ldrh	r1, [r7, #6]
 8011ea0:	68fa      	ldr	r2, [r7, #12]
 8011ea2:	6812      	ldr	r2, [r2, #0]
 8011ea4:	430b      	orrs	r3, r1
 8011ea6:	6053      	str	r3, [r2, #4]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	f042 0201 	orr.w	r2, r2, #1
 8011eb6:	601a      	str	r2, [r3, #0]
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011ec0:	d107      	bne.n	8011ed2 <HAL_SPI_Transmit+0x10a>
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ed0:	601a      	str	r2, [r3, #0]
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	2b0f      	cmp	r3, #15
 8011ed8:	d947      	bls.n	8011f6a <HAL_SPI_Transmit+0x1a2>
 8011eda:	e03f      	b.n	8011f5c <HAL_SPI_Transmit+0x194>
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	695b      	ldr	r3, [r3, #20]
 8011ee2:	f003 0302 	and.w	r3, r3, #2
 8011ee6:	2b02      	cmp	r3, #2
 8011ee8:	d114      	bne.n	8011f14 <HAL_SPI_Transmit+0x14c>
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	6812      	ldr	r2, [r2, #0]
 8011ef4:	621a      	str	r2, [r3, #32]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011efa:	1d1a      	adds	r2, r3, #4
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	3b01      	subs	r3, #1
 8011f0a:	b29a      	uxth	r2, r3
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011f12:	e023      	b.n	8011f5c <HAL_SPI_Transmit+0x194>
 8011f14:	f7f6 fd8e 	bl	8008a34 <HAL_GetTick>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	1ad3      	subs	r3, r2, r3
 8011f1e:	683a      	ldr	r2, [r7, #0]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d803      	bhi.n	8011f2c <HAL_SPI_Transmit+0x164>
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f2a:	d102      	bne.n	8011f32 <HAL_SPI_Transmit+0x16a>
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d114      	bne.n	8011f5c <HAL_SPI_Transmit+0x194>
 8011f32:	68f8      	ldr	r0, [r7, #12]
 8011f34:	f000 fc70 	bl	8012818 <SPI_CloseTransfer>
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2200      	movs	r2, #0
 8011f54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8011f58:	2303      	movs	r3, #3
 8011f5a:	e11e      	b.n	801219a <HAL_SPI_Transmit+0x3d2>
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1b9      	bne.n	8011edc <HAL_SPI_Transmit+0x114>
 8011f68:	e0f1      	b.n	801214e <HAL_SPI_Transmit+0x386>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	2b07      	cmp	r3, #7
 8011f70:	f240 80e6 	bls.w	8012140 <HAL_SPI_Transmit+0x378>
 8011f74:	e05d      	b.n	8012032 <HAL_SPI_Transmit+0x26a>
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	695b      	ldr	r3, [r3, #20]
 8011f7c:	f003 0302 	and.w	r3, r3, #2
 8011f80:	2b02      	cmp	r3, #2
 8011f82:	d132      	bne.n	8011fea <HAL_SPI_Transmit+0x222>
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d918      	bls.n	8011fc2 <HAL_SPI_Transmit+0x1fa>
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d014      	beq.n	8011fc2 <HAL_SPI_Transmit+0x1fa>
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	6812      	ldr	r2, [r2, #0]
 8011fa2:	621a      	str	r2, [r3, #32]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fa8:	1d1a      	adds	r2, r3, #4
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	3b02      	subs	r3, #2
 8011fb8:	b29a      	uxth	r2, r3
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011fc0:	e037      	b.n	8012032 <HAL_SPI_Transmit+0x26a>
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fc6:	881a      	ldrh	r2, [r3, #0]
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	801a      	strh	r2, [r3, #0]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fd0:	1c9a      	adds	r2, r3, #2
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	3b01      	subs	r3, #1
 8011fe0:	b29a      	uxth	r2, r3
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011fe8:	e023      	b.n	8012032 <HAL_SPI_Transmit+0x26a>
 8011fea:	f7f6 fd23 	bl	8008a34 <HAL_GetTick>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	1ad3      	subs	r3, r2, r3
 8011ff4:	683a      	ldr	r2, [r7, #0]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d803      	bhi.n	8012002 <HAL_SPI_Transmit+0x23a>
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012000:	d102      	bne.n	8012008 <HAL_SPI_Transmit+0x240>
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d114      	bne.n	8012032 <HAL_SPI_Transmit+0x26a>
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f000 fc05 	bl	8012818 <SPI_CloseTransfer>
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012014:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2201      	movs	r2, #1
 8012022:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2200      	movs	r2, #0
 801202a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801202e:	2303      	movs	r3, #3
 8012030:	e0b3      	b.n	801219a <HAL_SPI_Transmit+0x3d2>
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012038:	b29b      	uxth	r3, r3
 801203a:	2b00      	cmp	r3, #0
 801203c:	d19b      	bne.n	8011f76 <HAL_SPI_Transmit+0x1ae>
 801203e:	e086      	b.n	801214e <HAL_SPI_Transmit+0x386>
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	695b      	ldr	r3, [r3, #20]
 8012046:	f003 0302 	and.w	r3, r3, #2
 801204a:	2b02      	cmp	r3, #2
 801204c:	d154      	bne.n	80120f8 <HAL_SPI_Transmit+0x330>
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012054:	b29b      	uxth	r3, r3
 8012056:	2b03      	cmp	r3, #3
 8012058:	d918      	bls.n	801208c <HAL_SPI_Transmit+0x2c4>
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801205e:	2b40      	cmp	r3, #64	@ 0x40
 8012060:	d914      	bls.n	801208c <HAL_SPI_Transmit+0x2c4>
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	6812      	ldr	r2, [r2, #0]
 801206c:	621a      	str	r2, [r3, #32]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012072:	1d1a      	adds	r2, r3, #4
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801207e:	b29b      	uxth	r3, r3
 8012080:	3b04      	subs	r3, #4
 8012082:	b29a      	uxth	r2, r3
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801208a:	e059      	b.n	8012140 <HAL_SPI_Transmit+0x378>
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012092:	b29b      	uxth	r3, r3
 8012094:	2b01      	cmp	r3, #1
 8012096:	d917      	bls.n	80120c8 <HAL_SPI_Transmit+0x300>
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801209c:	2b00      	cmp	r3, #0
 801209e:	d013      	beq.n	80120c8 <HAL_SPI_Transmit+0x300>
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120a4:	881a      	ldrh	r2, [r3, #0]
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	801a      	strh	r2, [r3, #0]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120ae:	1c9a      	adds	r2, r3, #2
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	3b02      	subs	r3, #2
 80120be:	b29a      	uxth	r2, r3
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80120c6:	e03b      	b.n	8012140 <HAL_SPI_Transmit+0x378>
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	3320      	adds	r3, #32
 80120d2:	7812      	ldrb	r2, [r2, #0]
 80120d4:	701a      	strb	r2, [r3, #0]
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120da:	1c5a      	adds	r2, r3, #1
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	3b01      	subs	r3, #1
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80120f2:	e025      	b.n	8012140 <HAL_SPI_Transmit+0x378>
 80120f4:	ffff0000 	.word	0xffff0000
 80120f8:	f7f6 fc9c 	bl	8008a34 <HAL_GetTick>
 80120fc:	4602      	mov	r2, r0
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	1ad3      	subs	r3, r2, r3
 8012102:	683a      	ldr	r2, [r7, #0]
 8012104:	429a      	cmp	r2, r3
 8012106:	d803      	bhi.n	8012110 <HAL_SPI_Transmit+0x348>
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210e:	d102      	bne.n	8012116 <HAL_SPI_Transmit+0x34e>
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d114      	bne.n	8012140 <HAL_SPI_Transmit+0x378>
 8012116:	68f8      	ldr	r0, [r7, #12]
 8012118:	f000 fb7e 	bl	8012818 <SPI_CloseTransfer>
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2201      	movs	r2, #1
 8012130:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2200      	movs	r2, #0
 8012138:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801213c:	2303      	movs	r3, #3
 801213e:	e02c      	b.n	801219a <HAL_SPI_Transmit+0x3d2>
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012146:	b29b      	uxth	r3, r3
 8012148:	2b00      	cmp	r3, #0
 801214a:	f47f af79 	bne.w	8012040 <HAL_SPI_Transmit+0x278>
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	9300      	str	r3, [sp, #0]
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	2200      	movs	r2, #0
 8012156:	2108      	movs	r1, #8
 8012158:	68f8      	ldr	r0, [r7, #12]
 801215a:	f000 fbfd 	bl	8012958 <SPI_WaitOnFlagUntilTimeout>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d007      	beq.n	8012174 <HAL_SPI_Transmit+0x3ac>
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801216a:	f043 0220 	orr.w	r2, r3, #32
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f000 fb4f 	bl	8012818 <SPI_CloseTransfer>
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2201      	movs	r2, #1
 801217e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2200      	movs	r2, #0
 8012186:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012190:	2b00      	cmp	r3, #0
 8012192:	d001      	beq.n	8012198 <HAL_SPI_Transmit+0x3d0>
 8012194:	2301      	movs	r3, #1
 8012196:	e000      	b.n	801219a <HAL_SPI_Transmit+0x3d2>
 8012198:	2300      	movs	r3, #0
 801219a:	4618      	mov	r0, r3
 801219c:	3718      	adds	r7, #24
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop

080121a4 <HAL_SPI_TransmitReceive>:
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b08e      	sub	sp, #56	@ 0x38
 80121a8:	af02      	add	r7, sp, #8
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	60b9      	str	r1, [r7, #8]
 80121ae:	607a      	str	r2, [r7, #4]
 80121b0:	807b      	strh	r3, [r7, #2]
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	3320      	adds	r3, #32
 80121b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	3330      	adds	r3, #48	@ 0x30
 80121c0:	623b      	str	r3, [r7, #32]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121c6:	095b      	lsrs	r3, r3, #5
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	3301      	adds	r3, #1
 80121cc:	83fb      	strh	r3, [r7, #30]
 80121ce:	f7f6 fc31 	bl	8008a34 <HAL_GetTick>
 80121d2:	61b8      	str	r0, [r7, #24]
 80121d4:	887b      	ldrh	r3, [r7, #2]
 80121d6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80121d8:	887b      	ldrh	r3, [r7, #2]
 80121da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d001      	beq.n	80121ec <HAL_SPI_TransmitReceive+0x48>
 80121e8:	2302      	movs	r3, #2
 80121ea:	e310      	b.n	801280e <HAL_SPI_TransmitReceive+0x66a>
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d005      	beq.n	80121fe <HAL_SPI_TransmitReceive+0x5a>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <HAL_SPI_TransmitReceive+0x5a>
 80121f8:	887b      	ldrh	r3, [r7, #2]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d101      	bne.n	8012202 <HAL_SPI_TransmitReceive+0x5e>
 80121fe:	2301      	movs	r3, #1
 8012200:	e305      	b.n	801280e <HAL_SPI_TransmitReceive+0x66a>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012208:	2b01      	cmp	r3, #1
 801220a:	d101      	bne.n	8012210 <HAL_SPI_TransmitReceive+0x6c>
 801220c:	2302      	movs	r3, #2
 801220e:	e2fe      	b.n	801280e <HAL_SPI_TransmitReceive+0x66a>
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2201      	movs	r2, #1
 8012214:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2205      	movs	r2, #5
 801221c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2200      	movs	r2, #0
 8012224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	687a      	ldr	r2, [r7, #4]
 801222c:	665a      	str	r2, [r3, #100]	@ 0x64
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	887a      	ldrh	r2, [r7, #2]
 8012232:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	887a      	ldrh	r2, [r7, #2]
 801223a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	887a      	ldrh	r2, [r7, #2]
 8012248:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	887a      	ldrh	r2, [r7, #2]
 8012250:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2200      	movs	r2, #0
 8012258:	671a      	str	r2, [r3, #112]	@ 0x70
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	2200      	movs	r2, #0
 801225e:	675a      	str	r2, [r3, #116]	@ 0x74
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	68da      	ldr	r2, [r3, #12]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801226e:	60da      	str	r2, [r3, #12]
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4a70      	ldr	r2, [pc, #448]	@ (8012438 <HAL_SPI_TransmitReceive+0x294>)
 8012276:	4293      	cmp	r3, r2
 8012278:	d009      	beq.n	801228e <HAL_SPI_TransmitReceive+0xea>
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	4a6f      	ldr	r2, [pc, #444]	@ (801243c <HAL_SPI_TransmitReceive+0x298>)
 8012280:	4293      	cmp	r3, r2
 8012282:	d004      	beq.n	801228e <HAL_SPI_TransmitReceive+0xea>
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4a6d      	ldr	r2, [pc, #436]	@ (8012440 <HAL_SPI_TransmitReceive+0x29c>)
 801228a:	4293      	cmp	r3, r2
 801228c:	d102      	bne.n	8012294 <HAL_SPI_TransmitReceive+0xf0>
 801228e:	2310      	movs	r3, #16
 8012290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012292:	e001      	b.n	8012298 <HAL_SPI_TransmitReceive+0xf4>
 8012294:	2308      	movs	r3, #8
 8012296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	685a      	ldr	r2, [r3, #4]
 801229e:	4b69      	ldr	r3, [pc, #420]	@ (8012444 <HAL_SPI_TransmitReceive+0x2a0>)
 80122a0:	4013      	ands	r3, r2
 80122a2:	8879      	ldrh	r1, [r7, #2]
 80122a4:	68fa      	ldr	r2, [r7, #12]
 80122a6:	6812      	ldr	r2, [r2, #0]
 80122a8:	430b      	orrs	r3, r1
 80122aa:	6053      	str	r3, [r2, #4]
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f042 0201 	orr.w	r2, r2, #1
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80122c4:	d107      	bne.n	80122d6 <HAL_SPI_TransmitReceive+0x132>
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122d4:	601a      	str	r2, [r3, #0]
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	68db      	ldr	r3, [r3, #12]
 80122da:	2b0f      	cmp	r3, #15
 80122dc:	f240 80a2 	bls.w	8012424 <HAL_SPI_TransmitReceive+0x280>
 80122e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e2:	089b      	lsrs	r3, r3, #2
 80122e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122e6:	e094      	b.n	8012412 <HAL_SPI_TransmitReceive+0x26e>
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	695b      	ldr	r3, [r3, #20]
 80122ee:	f003 0302 	and.w	r3, r3, #2
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d120      	bne.n	8012338 <HAL_SPI_TransmitReceive+0x194>
 80122f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d01d      	beq.n	8012338 <HAL_SPI_TransmitReceive+0x194>
 80122fc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80122fe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8012300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012302:	440b      	add	r3, r1
 8012304:	429a      	cmp	r2, r3
 8012306:	d217      	bcs.n	8012338 <HAL_SPI_TransmitReceive+0x194>
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	6812      	ldr	r2, [r2, #0]
 8012312:	621a      	str	r2, [r3, #32]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012318:	1d1a      	adds	r2, r3, #4
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012324:	b29b      	uxth	r3, r3
 8012326:	3b01      	subs	r3, #1
 8012328:	b29a      	uxth	r2, r3
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012336:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	695b      	ldr	r3, [r3, #20]
 801233e:	617b      	str	r3, [r7, #20]
 8012340:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012342:	2b00      	cmp	r3, #0
 8012344:	d065      	beq.n	8012412 <HAL_SPI_TransmitReceive+0x26e>
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	695b      	ldr	r3, [r3, #20]
 801234c:	f003 0301 	and.w	r3, r3, #1
 8012350:	2b01      	cmp	r3, #1
 8012352:	d118      	bne.n	8012386 <HAL_SPI_TransmitReceive+0x1e2>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801235c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801235e:	601a      	str	r2, [r3, #0]
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012364:	1d1a      	adds	r2, r3, #4
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	665a      	str	r2, [r3, #100]	@ 0x64
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012370:	b29b      	uxth	r3, r3
 8012372:	3b01      	subs	r3, #1
 8012374:	b29a      	uxth	r2, r3
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012382:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012384:	e045      	b.n	8012412 <HAL_SPI_TransmitReceive+0x26e>
 8012386:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012388:	8bfb      	ldrh	r3, [r7, #30]
 801238a:	429a      	cmp	r2, r3
 801238c:	d21d      	bcs.n	80123ca <HAL_SPI_TransmitReceive+0x226>
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012394:	2b00      	cmp	r3, #0
 8012396:	d018      	beq.n	80123ca <HAL_SPI_TransmitReceive+0x226>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681a      	ldr	r2, [r3, #0]
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80123a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80123a2:	601a      	str	r2, [r3, #0]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80123a8:	1d1a      	adds	r2, r3, #4
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	665a      	str	r2, [r3, #100]	@ 0x64
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	3b01      	subs	r3, #1
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80123c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80123c8:	e023      	b.n	8012412 <HAL_SPI_TransmitReceive+0x26e>
 80123ca:	f7f6 fb33 	bl	8008a34 <HAL_GetTick>
 80123ce:	4602      	mov	r2, r0
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d803      	bhi.n	80123e2 <HAL_SPI_TransmitReceive+0x23e>
 80123da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123e0:	d102      	bne.n	80123e8 <HAL_SPI_TransmitReceive+0x244>
 80123e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d114      	bne.n	8012412 <HAL_SPI_TransmitReceive+0x26e>
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f000 fa15 	bl	8012818 <SPI_CloseTransfer>
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80123f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2201      	movs	r2, #1
 8012402:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2200      	movs	r2, #0
 801240a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801240e:	2303      	movs	r3, #3
 8012410:	e1fd      	b.n	801280e <HAL_SPI_TransmitReceive+0x66a>
 8012412:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012414:	2b00      	cmp	r3, #0
 8012416:	f47f af67 	bne.w	80122e8 <HAL_SPI_TransmitReceive+0x144>
 801241a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801241c:	2b00      	cmp	r3, #0
 801241e:	f47f af63 	bne.w	80122e8 <HAL_SPI_TransmitReceive+0x144>
 8012422:	e1ce      	b.n	80127c2 <HAL_SPI_TransmitReceive+0x61e>
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	2b07      	cmp	r3, #7
 801242a:	f240 81c2 	bls.w	80127b2 <HAL_SPI_TransmitReceive+0x60e>
 801242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012430:	085b      	lsrs	r3, r3, #1
 8012432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012434:	e0c9      	b.n	80125ca <HAL_SPI_TransmitReceive+0x426>
 8012436:	bf00      	nop
 8012438:	40013000 	.word	0x40013000
 801243c:	40003800 	.word	0x40003800
 8012440:	40003c00 	.word	0x40003c00
 8012444:	ffff0000 	.word	0xffff0000
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	695b      	ldr	r3, [r3, #20]
 801244e:	f003 0302 	and.w	r3, r3, #2
 8012452:	2b02      	cmp	r3, #2
 8012454:	d11f      	bne.n	8012496 <HAL_SPI_TransmitReceive+0x2f2>
 8012456:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012458:	2b00      	cmp	r3, #0
 801245a:	d01c      	beq.n	8012496 <HAL_SPI_TransmitReceive+0x2f2>
 801245c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801245e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8012460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012462:	440b      	add	r3, r1
 8012464:	429a      	cmp	r2, r3
 8012466:	d216      	bcs.n	8012496 <HAL_SPI_TransmitReceive+0x2f2>
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801246c:	881a      	ldrh	r2, [r3, #0]
 801246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012470:	801a      	strh	r2, [r3, #0]
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012476:	1c9a      	adds	r2, r3, #2
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012482:	b29b      	uxth	r3, r3
 8012484:	3b01      	subs	r3, #1
 8012486:	b29a      	uxth	r2, r3
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012494:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	695b      	ldr	r3, [r3, #20]
 801249c:	617b      	str	r3, [r7, #20]
 801249e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	f000 8092 	beq.w	80125ca <HAL_SPI_TransmitReceive+0x426>
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	695b      	ldr	r3, [r3, #20]
 80124ac:	f003 0301 	and.w	r3, r3, #1
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d118      	bne.n	80124e6 <HAL_SPI_TransmitReceive+0x342>
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124b8:	6a3a      	ldr	r2, [r7, #32]
 80124ba:	8812      	ldrh	r2, [r2, #0]
 80124bc:	b292      	uxth	r2, r2
 80124be:	801a      	strh	r2, [r3, #0]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124c4:	1c9a      	adds	r2, r3, #2
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	665a      	str	r2, [r3, #100]	@ 0x64
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	3b01      	subs	r3, #1
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80124e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80124e4:	e071      	b.n	80125ca <HAL_SPI_TransmitReceive+0x426>
 80124e6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80124e8:	8bfb      	ldrh	r3, [r7, #30]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d228      	bcs.n	8012540 <HAL_SPI_TransmitReceive+0x39c>
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d023      	beq.n	8012540 <HAL_SPI_TransmitReceive+0x39c>
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124fc:	6a3a      	ldr	r2, [r7, #32]
 80124fe:	8812      	ldrh	r2, [r2, #0]
 8012500:	b292      	uxth	r2, r2
 8012502:	801a      	strh	r2, [r3, #0]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012508:	1c9a      	adds	r2, r3, #2
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	665a      	str	r2, [r3, #100]	@ 0x64
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012512:	6a3a      	ldr	r2, [r7, #32]
 8012514:	8812      	ldrh	r2, [r2, #0]
 8012516:	b292      	uxth	r2, r2
 8012518:	801a      	strh	r2, [r3, #0]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801251e:	1c9a      	adds	r2, r3, #2
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	665a      	str	r2, [r3, #100]	@ 0x64
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801252a:	b29b      	uxth	r3, r3
 801252c:	3b02      	subs	r3, #2
 801252e:	b29a      	uxth	r2, r3
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801253c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801253e:	e044      	b.n	80125ca <HAL_SPI_TransmitReceive+0x426>
 8012540:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012542:	2b01      	cmp	r3, #1
 8012544:	d11d      	bne.n	8012582 <HAL_SPI_TransmitReceive+0x3de>
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801254c:	2b00      	cmp	r3, #0
 801254e:	d018      	beq.n	8012582 <HAL_SPI_TransmitReceive+0x3de>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012554:	6a3a      	ldr	r2, [r7, #32]
 8012556:	8812      	ldrh	r2, [r2, #0]
 8012558:	b292      	uxth	r2, r2
 801255a:	801a      	strh	r2, [r3, #0]
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012560:	1c9a      	adds	r2, r3, #2
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	665a      	str	r2, [r3, #100]	@ 0x64
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801256c:	b29b      	uxth	r3, r3
 801256e:	3b01      	subs	r3, #1
 8012570:	b29a      	uxth	r2, r3
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801257e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012580:	e023      	b.n	80125ca <HAL_SPI_TransmitReceive+0x426>
 8012582:	f7f6 fa57 	bl	8008a34 <HAL_GetTick>
 8012586:	4602      	mov	r2, r0
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801258e:	429a      	cmp	r2, r3
 8012590:	d803      	bhi.n	801259a <HAL_SPI_TransmitReceive+0x3f6>
 8012592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012598:	d102      	bne.n	80125a0 <HAL_SPI_TransmitReceive+0x3fc>
 801259a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801259c:	2b00      	cmp	r3, #0
 801259e:	d114      	bne.n	80125ca <HAL_SPI_TransmitReceive+0x426>
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f000 f939 	bl	8012818 <SPI_CloseTransfer>
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80125ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	2201      	movs	r2, #1
 80125ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80125c6:	2303      	movs	r3, #3
 80125c8:	e121      	b.n	801280e <HAL_SPI_TransmitReceive+0x66a>
 80125ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	f47f af3b 	bne.w	8012448 <HAL_SPI_TransmitReceive+0x2a4>
 80125d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	f47f af37 	bne.w	8012448 <HAL_SPI_TransmitReceive+0x2a4>
 80125da:	e0f2      	b.n	80127c2 <HAL_SPI_TransmitReceive+0x61e>
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	695b      	ldr	r3, [r3, #20]
 80125e2:	f003 0302 	and.w	r3, r3, #2
 80125e6:	2b02      	cmp	r3, #2
 80125e8:	d121      	bne.n	801262e <HAL_SPI_TransmitReceive+0x48a>
 80125ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d01e      	beq.n	801262e <HAL_SPI_TransmitReceive+0x48a>
 80125f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80125f2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80125f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f6:	440b      	add	r3, r1
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d218      	bcs.n	801262e <HAL_SPI_TransmitReceive+0x48a>
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	3320      	adds	r3, #32
 8012606:	7812      	ldrb	r2, [r2, #0]
 8012608:	701a      	strb	r2, [r3, #0]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801260e:	1c5a      	adds	r2, r3, #1
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801261a:	b29b      	uxth	r3, r3
 801261c:	3b01      	subs	r3, #1
 801261e:	b29a      	uxth	r2, r3
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801262c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	617b      	str	r3, [r7, #20]
 8012636:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012638:	2b00      	cmp	r3, #0
 801263a:	f000 80ba 	beq.w	80127b2 <HAL_SPI_TransmitReceive+0x60e>
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	695b      	ldr	r3, [r3, #20]
 8012644:	f003 0301 	and.w	r3, r3, #1
 8012648:	2b01      	cmp	r3, #1
 801264a:	d11b      	bne.n	8012684 <HAL_SPI_TransmitReceive+0x4e0>
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012658:	7812      	ldrb	r2, [r2, #0]
 801265a:	b2d2      	uxtb	r2, r2
 801265c:	701a      	strb	r2, [r3, #0]
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012662:	1c5a      	adds	r2, r3, #1
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	665a      	str	r2, [r3, #100]	@ 0x64
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801266e:	b29b      	uxth	r3, r3
 8012670:	3b01      	subs	r3, #1
 8012672:	b29a      	uxth	r2, r3
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012680:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012682:	e096      	b.n	80127b2 <HAL_SPI_TransmitReceive+0x60e>
 8012684:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012686:	8bfb      	ldrh	r3, [r7, #30]
 8012688:	429a      	cmp	r2, r3
 801268a:	d24a      	bcs.n	8012722 <HAL_SPI_TransmitReceive+0x57e>
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012692:	2b00      	cmp	r3, #0
 8012694:	d045      	beq.n	8012722 <HAL_SPI_TransmitReceive+0x57e>
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126a2:	7812      	ldrb	r2, [r2, #0]
 80126a4:	b2d2      	uxtb	r2, r2
 80126a6:	701a      	strb	r2, [r3, #0]
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126ac:	1c5a      	adds	r2, r3, #1
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	665a      	str	r2, [r3, #100]	@ 0x64
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126be:	7812      	ldrb	r2, [r2, #0]
 80126c0:	b2d2      	uxtb	r2, r2
 80126c2:	701a      	strb	r2, [r3, #0]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126c8:	1c5a      	adds	r2, r3, #1
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126da:	7812      	ldrb	r2, [r2, #0]
 80126dc:	b2d2      	uxtb	r2, r2
 80126de:	701a      	strb	r2, [r3, #0]
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126e4:	1c5a      	adds	r2, r3, #1
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	665a      	str	r2, [r3, #100]	@ 0x64
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80126f6:	7812      	ldrb	r2, [r2, #0]
 80126f8:	b2d2      	uxtb	r2, r2
 80126fa:	701a      	strb	r2, [r3, #0]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012700:	1c5a      	adds	r2, r3, #1
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	665a      	str	r2, [r3, #100]	@ 0x64
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801270c:	b29b      	uxth	r3, r3
 801270e:	3b04      	subs	r3, #4
 8012710:	b29a      	uxth	r2, r3
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801271e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012720:	e047      	b.n	80127b2 <HAL_SPI_TransmitReceive+0x60e>
 8012722:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012724:	2b03      	cmp	r3, #3
 8012726:	d820      	bhi.n	801276a <HAL_SPI_TransmitReceive+0x5c6>
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801272e:	2b00      	cmp	r3, #0
 8012730:	d01b      	beq.n	801276a <HAL_SPI_TransmitReceive+0x5c6>
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801273e:	7812      	ldrb	r2, [r2, #0]
 8012740:	b2d2      	uxtb	r2, r2
 8012742:	701a      	strb	r2, [r3, #0]
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012748:	1c5a      	adds	r2, r3, #1
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	665a      	str	r2, [r3, #100]	@ 0x64
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012754:	b29b      	uxth	r3, r3
 8012756:	3b01      	subs	r3, #1
 8012758:	b29a      	uxth	r2, r3
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012766:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012768:	e023      	b.n	80127b2 <HAL_SPI_TransmitReceive+0x60e>
 801276a:	f7f6 f963 	bl	8008a34 <HAL_GetTick>
 801276e:	4602      	mov	r2, r0
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	1ad3      	subs	r3, r2, r3
 8012774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012776:	429a      	cmp	r2, r3
 8012778:	d803      	bhi.n	8012782 <HAL_SPI_TransmitReceive+0x5de>
 801277a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012780:	d102      	bne.n	8012788 <HAL_SPI_TransmitReceive+0x5e4>
 8012782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012784:	2b00      	cmp	r3, #0
 8012786:	d114      	bne.n	80127b2 <HAL_SPI_TransmitReceive+0x60e>
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f000 f845 	bl	8012818 <SPI_CloseTransfer>
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012794:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2201      	movs	r2, #1
 80127a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2200      	movs	r2, #0
 80127aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80127ae:	2303      	movs	r3, #3
 80127b0:	e02d      	b.n	801280e <HAL_SPI_TransmitReceive+0x66a>
 80127b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	f47f af11 	bne.w	80125dc <HAL_SPI_TransmitReceive+0x438>
 80127ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f47f af0d 	bne.w	80125dc <HAL_SPI_TransmitReceive+0x438>
 80127c2:	69bb      	ldr	r3, [r7, #24]
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127c8:	2200      	movs	r2, #0
 80127ca:	2108      	movs	r1, #8
 80127cc:	68f8      	ldr	r0, [r7, #12]
 80127ce:	f000 f8c3 	bl	8012958 <SPI_WaitOnFlagUntilTimeout>
 80127d2:	4603      	mov	r3, r0
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d007      	beq.n	80127e8 <HAL_SPI_TransmitReceive+0x644>
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127de:	f043 0220 	orr.w	r2, r3, #32
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f000 f815 	bl	8012818 <SPI_CloseTransfer>
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2201      	movs	r2, #1
 80127f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2200      	movs	r2, #0
 80127fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012804:	2b00      	cmp	r3, #0
 8012806:	d001      	beq.n	801280c <HAL_SPI_TransmitReceive+0x668>
 8012808:	2301      	movs	r3, #1
 801280a:	e000      	b.n	801280e <HAL_SPI_TransmitReceive+0x66a>
 801280c:	2300      	movs	r3, #0
 801280e:	4618      	mov	r0, r3
 8012810:	3730      	adds	r7, #48	@ 0x30
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop

08012818 <SPI_CloseTransfer>:
 8012818:	b480      	push	{r7}
 801281a:	b085      	sub	sp, #20
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	695b      	ldr	r3, [r3, #20]
 8012826:	60fb      	str	r3, [r7, #12]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	699a      	ldr	r2, [r3, #24]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f042 0208 	orr.w	r2, r2, #8
 8012836:	619a      	str	r2, [r3, #24]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	699a      	ldr	r2, [r3, #24]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	f042 0210 	orr.w	r2, r2, #16
 8012846:	619a      	str	r2, [r3, #24]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f022 0201 	bic.w	r2, r2, #1
 8012856:	601a      	str	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	6919      	ldr	r1, [r3, #16]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	4b3c      	ldr	r3, [pc, #240]	@ (8012954 <SPI_CloseTransfer+0x13c>)
 8012864:	400b      	ands	r3, r1
 8012866:	6113      	str	r3, [r2, #16]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	689a      	ldr	r2, [r3, #8]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8012876:	609a      	str	r2, [r3, #8]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b04      	cmp	r3, #4
 8012882:	d014      	beq.n	80128ae <SPI_CloseTransfer+0x96>
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f003 0320 	and.w	r3, r3, #32
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00f      	beq.n	80128ae <SPI_CloseTransfer+0x96>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012894:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	699a      	ldr	r2, [r3, #24]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f042 0220 	orr.w	r2, r2, #32
 80128ac:	619a      	str	r2, [r3, #24]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	2b03      	cmp	r3, #3
 80128b8:	d014      	beq.n	80128e4 <SPI_CloseTransfer+0xcc>
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d00f      	beq.n	80128e4 <SPI_CloseTransfer+0xcc>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80128ca:	f043 0204 	orr.w	r2, r3, #4
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	699a      	ldr	r2, [r3, #24]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80128e2:	619a      	str	r2, [r3, #24]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00f      	beq.n	801290e <SPI_CloseTransfer+0xf6>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80128f4:	f043 0201 	orr.w	r2, r3, #1
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	699a      	ldr	r2, [r3, #24]
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801290c:	619a      	str	r2, [r3, #24]
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012914:	2b00      	cmp	r3, #0
 8012916:	d00f      	beq.n	8012938 <SPI_CloseTransfer+0x120>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801291e:	f043 0208 	orr.w	r2, r3, #8
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	699a      	ldr	r2, [r3, #24]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012936:	619a      	str	r2, [r3, #24]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2200      	movs	r2, #0
 801293c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2200      	movs	r2, #0
 8012944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012948:	bf00      	nop
 801294a:	3714      	adds	r7, #20
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr
 8012954:	fffffc90 	.word	0xfffffc90

08012958 <SPI_WaitOnFlagUntilTimeout>:
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	603b      	str	r3, [r7, #0]
 8012964:	4613      	mov	r3, r2
 8012966:	71fb      	strb	r3, [r7, #7]
 8012968:	e010      	b.n	801298c <SPI_WaitOnFlagUntilTimeout+0x34>
 801296a:	f7f6 f863 	bl	8008a34 <HAL_GetTick>
 801296e:	4602      	mov	r2, r0
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	683a      	ldr	r2, [r7, #0]
 8012976:	429a      	cmp	r2, r3
 8012978:	d803      	bhi.n	8012982 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012980:	d102      	bne.n	8012988 <SPI_WaitOnFlagUntilTimeout+0x30>
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d101      	bne.n	801298c <SPI_WaitOnFlagUntilTimeout+0x34>
 8012988:	2303      	movs	r3, #3
 801298a:	e00f      	b.n	80129ac <SPI_WaitOnFlagUntilTimeout+0x54>
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	695a      	ldr	r2, [r3, #20]
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	4013      	ands	r3, r2
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	429a      	cmp	r2, r3
 801299a:	bf0c      	ite	eq
 801299c:	2301      	moveq	r3, #1
 801299e:	2300      	movne	r3, #0
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	461a      	mov	r2, r3
 80129a4:	79fb      	ldrb	r3, [r7, #7]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d0df      	beq.n	801296a <SPI_WaitOnFlagUntilTimeout+0x12>
 80129aa:	2300      	movs	r3, #0
 80129ac:	4618      	mov	r0, r3
 80129ae:	3710      	adds	r7, #16
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <SPI_GetPacketSize>:
 80129b4:	b480      	push	{r7}
 80129b6:	b085      	sub	sp, #20
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129c0:	095b      	lsrs	r3, r3, #5
 80129c2:	3301      	adds	r3, #1
 80129c4:	60fb      	str	r3, [r7, #12]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	68db      	ldr	r3, [r3, #12]
 80129ca:	3301      	adds	r3, #1
 80129cc:	60bb      	str	r3, [r7, #8]
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	3307      	adds	r3, #7
 80129d2:	08db      	lsrs	r3, r3, #3
 80129d4:	60bb      	str	r3, [r7, #8]
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	fb02 f303 	mul.w	r3, r2, r3
 80129de:	4618      	mov	r0, r3
 80129e0:	3714      	adds	r7, #20
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr

080129ea <HAL_TIM_Base_Init>:
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b082      	sub	sp, #8
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d101      	bne.n	80129fc <HAL_TIM_Base_Init+0x12>
 80129f8:	2301      	movs	r3, #1
 80129fa:	e049      	b.n	8012a90 <HAL_TIM_Base_Init+0xa6>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d106      	bne.n	8012a16 <HAL_TIM_Base_Init+0x2c>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7f5 f90d 	bl	8007c30 <HAL_TIM_Base_MspInit>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2202      	movs	r2, #2
 8012a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	3304      	adds	r3, #4
 8012a26:	4619      	mov	r1, r3
 8012a28:	4610      	mov	r0, r2
 8012a2a:	f000 fa99 	bl	8012f60 <TIM_Base_SetConfig>
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2201      	movs	r2, #1
 8012a32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2201      	movs	r2, #1
 8012a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2201      	movs	r2, #1
 8012a42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2201      	movs	r2, #1
 8012a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2201      	movs	r2, #1
 8012a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2201      	movs	r2, #1
 8012a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2201      	movs	r2, #1
 8012a62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2201      	movs	r2, #1
 8012a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2201      	movs	r2, #1
 8012a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2201      	movs	r2, #1
 8012a7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2201      	movs	r2, #1
 8012a82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2201      	movs	r2, #1
 8012a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012a8e:	2300      	movs	r3, #0
 8012a90:	4618      	mov	r0, r3
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <HAL_TIM_PWM_Init>:
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d101      	bne.n	8012aaa <HAL_TIM_PWM_Init+0x12>
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	e049      	b.n	8012b3e <HAL_TIM_PWM_Init+0xa6>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d106      	bne.n	8012ac4 <HAL_TIM_PWM_Init+0x2c>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f7f5 f8d8 	bl	8007c74 <HAL_TIM_PWM_MspInit>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2202      	movs	r2, #2
 8012ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	3304      	adds	r3, #4
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	4610      	mov	r0, r2
 8012ad8:	f000 fa42 	bl	8012f60 <TIM_Base_SetConfig>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2201      	movs	r2, #1
 8012ae0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2201      	movs	r2, #1
 8012af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2201      	movs	r2, #1
 8012af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2201      	movs	r2, #1
 8012b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2201      	movs	r2, #1
 8012b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2201      	movs	r2, #1
 8012b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2201      	movs	r2, #1
 8012b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2201      	movs	r2, #1
 8012b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2201      	movs	r2, #1
 8012b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2201      	movs	r2, #1
 8012b30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2201      	movs	r2, #1
 8012b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
	...

08012b48 <HAL_TIM_PWM_ConfigChannel>:
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b086      	sub	sp, #24
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
 8012b54:	2300      	movs	r3, #0
 8012b56:	75fb      	strb	r3, [r7, #23]
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012b5e:	2b01      	cmp	r3, #1
 8012b60:	d101      	bne.n	8012b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012b62:	2302      	movs	r3, #2
 8012b64:	e0ff      	b.n	8012d66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	2201      	movs	r2, #1
 8012b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2b14      	cmp	r3, #20
 8012b72:	f200 80f0 	bhi.w	8012d56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012b76:	a201      	add	r2, pc, #4	@ (adr r2, 8012b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b7c:	08012bd1 	.word	0x08012bd1
 8012b80:	08012d57 	.word	0x08012d57
 8012b84:	08012d57 	.word	0x08012d57
 8012b88:	08012d57 	.word	0x08012d57
 8012b8c:	08012c11 	.word	0x08012c11
 8012b90:	08012d57 	.word	0x08012d57
 8012b94:	08012d57 	.word	0x08012d57
 8012b98:	08012d57 	.word	0x08012d57
 8012b9c:	08012c53 	.word	0x08012c53
 8012ba0:	08012d57 	.word	0x08012d57
 8012ba4:	08012d57 	.word	0x08012d57
 8012ba8:	08012d57 	.word	0x08012d57
 8012bac:	08012c93 	.word	0x08012c93
 8012bb0:	08012d57 	.word	0x08012d57
 8012bb4:	08012d57 	.word	0x08012d57
 8012bb8:	08012d57 	.word	0x08012d57
 8012bbc:	08012cd5 	.word	0x08012cd5
 8012bc0:	08012d57 	.word	0x08012d57
 8012bc4:	08012d57 	.word	0x08012d57
 8012bc8:	08012d57 	.word	0x08012d57
 8012bcc:	08012d15 	.word	0x08012d15
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	68b9      	ldr	r1, [r7, #8]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f000 fa74 	bl	80130c4 <TIM_OC1_SetConfig>
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	699a      	ldr	r2, [r3, #24]
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f042 0208 	orr.w	r2, r2, #8
 8012bea:	619a      	str	r2, [r3, #24]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	699a      	ldr	r2, [r3, #24]
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f022 0204 	bic.w	r2, r2, #4
 8012bfa:	619a      	str	r2, [r3, #24]
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	6999      	ldr	r1, [r3, #24]
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	691a      	ldr	r2, [r3, #16]
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	430a      	orrs	r2, r1
 8012c0c:	619a      	str	r2, [r3, #24]
 8012c0e:	e0a5      	b.n	8012d5c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	68b9      	ldr	r1, [r7, #8]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f000 fae4 	bl	80131e4 <TIM_OC2_SetConfig>
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	699a      	ldr	r2, [r3, #24]
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012c2a:	619a      	str	r2, [r3, #24]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	699a      	ldr	r2, [r3, #24]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012c3a:	619a      	str	r2, [r3, #24]
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	6999      	ldr	r1, [r3, #24]
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	691b      	ldr	r3, [r3, #16]
 8012c46:	021a      	lsls	r2, r3, #8
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	430a      	orrs	r2, r1
 8012c4e:	619a      	str	r2, [r3, #24]
 8012c50:	e084      	b.n	8012d5c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	68b9      	ldr	r1, [r7, #8]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f000 fb4d 	bl	80132f8 <TIM_OC3_SetConfig>
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	69da      	ldr	r2, [r3, #28]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f042 0208 	orr.w	r2, r2, #8
 8012c6c:	61da      	str	r2, [r3, #28]
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	69da      	ldr	r2, [r3, #28]
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f022 0204 	bic.w	r2, r2, #4
 8012c7c:	61da      	str	r2, [r3, #28]
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	69d9      	ldr	r1, [r3, #28]
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	691a      	ldr	r2, [r3, #16]
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	430a      	orrs	r2, r1
 8012c8e:	61da      	str	r2, [r3, #28]
 8012c90:	e064      	b.n	8012d5c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	68b9      	ldr	r1, [r7, #8]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f000 fbb5 	bl	8013408 <TIM_OC4_SetConfig>
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	69da      	ldr	r2, [r3, #28]
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012cac:	61da      	str	r2, [r3, #28]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	69da      	ldr	r2, [r3, #28]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012cbc:	61da      	str	r2, [r3, #28]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	69d9      	ldr	r1, [r3, #28]
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	691b      	ldr	r3, [r3, #16]
 8012cc8:	021a      	lsls	r2, r3, #8
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	430a      	orrs	r2, r1
 8012cd0:	61da      	str	r2, [r3, #28]
 8012cd2:	e043      	b.n	8012d5c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	68b9      	ldr	r1, [r7, #8]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f000 fbfe 	bl	80134dc <TIM_OC5_SetConfig>
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	f042 0208 	orr.w	r2, r2, #8
 8012cee:	655a      	str	r2, [r3, #84]	@ 0x54
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	f022 0204 	bic.w	r2, r2, #4
 8012cfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	691a      	ldr	r2, [r3, #16]
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	430a      	orrs	r2, r1
 8012d10:	655a      	str	r2, [r3, #84]	@ 0x54
 8012d12:	e023      	b.n	8012d5c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	68b9      	ldr	r1, [r7, #8]
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f000 fc42 	bl	80135a4 <TIM_OC6_SetConfig>
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012d2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012d3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	691b      	ldr	r3, [r3, #16]
 8012d4a:	021a      	lsls	r2, r3, #8
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	430a      	orrs	r2, r1
 8012d52:	655a      	str	r2, [r3, #84]	@ 0x54
 8012d54:	e002      	b.n	8012d5c <HAL_TIM_PWM_ConfigChannel+0x214>
 8012d56:	2301      	movs	r3, #1
 8012d58:	75fb      	strb	r3, [r7, #23]
 8012d5a:	bf00      	nop
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012d64:	7dfb      	ldrb	r3, [r7, #23]
 8012d66:	4618      	mov	r0, r3
 8012d68:	3718      	adds	r7, #24
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop

08012d70 <HAL_TIM_ConfigClockSource>:
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	73fb      	strb	r3, [r7, #15]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	d101      	bne.n	8012d8c <HAL_TIM_ConfigClockSource+0x1c>
 8012d88:	2302      	movs	r3, #2
 8012d8a:	e0dc      	b.n	8012f46 <HAL_TIM_ConfigClockSource+0x1d6>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2201      	movs	r2, #1
 8012d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2202      	movs	r2, #2
 8012d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	60bb      	str	r3, [r7, #8]
 8012da4:	68ba      	ldr	r2, [r7, #8]
 8012da6:	4b6a      	ldr	r3, [pc, #424]	@ (8012f50 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012da8:	4013      	ands	r3, r2
 8012daa:	60bb      	str	r3, [r7, #8]
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012db2:	60bb      	str	r3, [r7, #8]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	68ba      	ldr	r2, [r7, #8]
 8012dba:	609a      	str	r2, [r3, #8]
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4a64      	ldr	r2, [pc, #400]	@ (8012f54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	f000 80a9 	beq.w	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012dc8:	4a62      	ldr	r2, [pc, #392]	@ (8012f54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012dca:	4293      	cmp	r3, r2
 8012dcc:	f200 80ae 	bhi.w	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012dd0:	4a61      	ldr	r2, [pc, #388]	@ (8012f58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012dd2:	4293      	cmp	r3, r2
 8012dd4:	f000 80a1 	beq.w	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012dd8:	4a5f      	ldr	r2, [pc, #380]	@ (8012f58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	f200 80a6 	bhi.w	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012de0:	4a5e      	ldr	r2, [pc, #376]	@ (8012f5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8012de2:	4293      	cmp	r3, r2
 8012de4:	f000 8099 	beq.w	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012de8:	4a5c      	ldr	r2, [pc, #368]	@ (8012f5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	f200 809e 	bhi.w	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012df0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012df4:	f000 8091 	beq.w	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012df8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012dfc:	f200 8096 	bhi.w	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012e04:	f000 8089 	beq.w	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012e08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012e0c:	f200 808e 	bhi.w	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012e14:	d03e      	beq.n	8012e94 <HAL_TIM_ConfigClockSource+0x124>
 8012e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012e1a:	f200 8087 	bhi.w	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e22:	f000 8086 	beq.w	8012f32 <HAL_TIM_ConfigClockSource+0x1c2>
 8012e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e2a:	d87f      	bhi.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e2c:	2b70      	cmp	r3, #112	@ 0x70
 8012e2e:	d01a      	beq.n	8012e66 <HAL_TIM_ConfigClockSource+0xf6>
 8012e30:	2b70      	cmp	r3, #112	@ 0x70
 8012e32:	d87b      	bhi.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e34:	2b60      	cmp	r3, #96	@ 0x60
 8012e36:	d050      	beq.n	8012eda <HAL_TIM_ConfigClockSource+0x16a>
 8012e38:	2b60      	cmp	r3, #96	@ 0x60
 8012e3a:	d877      	bhi.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e3c:	2b50      	cmp	r3, #80	@ 0x50
 8012e3e:	d03c      	beq.n	8012eba <HAL_TIM_ConfigClockSource+0x14a>
 8012e40:	2b50      	cmp	r3, #80	@ 0x50
 8012e42:	d873      	bhi.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e44:	2b40      	cmp	r3, #64	@ 0x40
 8012e46:	d058      	beq.n	8012efa <HAL_TIM_ConfigClockSource+0x18a>
 8012e48:	2b40      	cmp	r3, #64	@ 0x40
 8012e4a:	d86f      	bhi.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e4c:	2b30      	cmp	r3, #48	@ 0x30
 8012e4e:	d064      	beq.n	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012e50:	2b30      	cmp	r3, #48	@ 0x30
 8012e52:	d86b      	bhi.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e54:	2b20      	cmp	r3, #32
 8012e56:	d060      	beq.n	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012e58:	2b20      	cmp	r3, #32
 8012e5a:	d867      	bhi.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d05c      	beq.n	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012e60:	2b10      	cmp	r3, #16
 8012e62:	d05a      	beq.n	8012f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8012e64:	e062      	b.n	8012f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6818      	ldr	r0, [r3, #0]
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	6899      	ldr	r1, [r3, #8]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	685a      	ldr	r2, [r3, #4]
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	68db      	ldr	r3, [r3, #12]
 8012e76:	f000 fc79 	bl	801376c <TIM_ETR_SetConfig>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	60bb      	str	r3, [r7, #8]
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012e88:	60bb      	str	r3, [r7, #8]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	68ba      	ldr	r2, [r7, #8]
 8012e90:	609a      	str	r2, [r3, #8]
 8012e92:	e04f      	b.n	8012f34 <HAL_TIM_ConfigClockSource+0x1c4>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6818      	ldr	r0, [r3, #0]
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	6899      	ldr	r1, [r3, #8]
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	685a      	ldr	r2, [r3, #4]
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	f000 fc62 	bl	801376c <TIM_ETR_SetConfig>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	689a      	ldr	r2, [r3, #8]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012eb6:	609a      	str	r2, [r3, #8]
 8012eb8:	e03c      	b.n	8012f34 <HAL_TIM_ConfigClockSource+0x1c4>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6818      	ldr	r0, [r3, #0]
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	6859      	ldr	r1, [r3, #4]
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	f000 fbd2 	bl	8013670 <TIM_TI1_ConfigInputStage>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2150      	movs	r1, #80	@ 0x50
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 fc2c 	bl	8013730 <TIM_ITRx_SetConfig>
 8012ed8:	e02c      	b.n	8012f34 <HAL_TIM_ConfigClockSource+0x1c4>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6818      	ldr	r0, [r3, #0]
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	6859      	ldr	r1, [r3, #4]
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	f000 fbf1 	bl	80136ce <TIM_TI2_ConfigInputStage>
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2160      	movs	r1, #96	@ 0x60
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f000 fc1c 	bl	8013730 <TIM_ITRx_SetConfig>
 8012ef8:	e01c      	b.n	8012f34 <HAL_TIM_ConfigClockSource+0x1c4>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6818      	ldr	r0, [r3, #0]
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	6859      	ldr	r1, [r3, #4]
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	461a      	mov	r2, r3
 8012f08:	f000 fbb2 	bl	8013670 <TIM_TI1_ConfigInputStage>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2140      	movs	r1, #64	@ 0x40
 8012f12:	4618      	mov	r0, r3
 8012f14:	f000 fc0c 	bl	8013730 <TIM_ITRx_SetConfig>
 8012f18:	e00c      	b.n	8012f34 <HAL_TIM_ConfigClockSource+0x1c4>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4619      	mov	r1, r3
 8012f24:	4610      	mov	r0, r2
 8012f26:	f000 fc03 	bl	8013730 <TIM_ITRx_SetConfig>
 8012f2a:	e003      	b.n	8012f34 <HAL_TIM_ConfigClockSource+0x1c4>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	73fb      	strb	r3, [r7, #15]
 8012f30:	e000      	b.n	8012f34 <HAL_TIM_ConfigClockSource+0x1c4>
 8012f32:	bf00      	nop
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2201      	movs	r2, #1
 8012f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012f44:	7bfb      	ldrb	r3, [r7, #15]
 8012f46:	4618      	mov	r0, r3
 8012f48:	3710      	adds	r7, #16
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	ffceff88 	.word	0xffceff88
 8012f54:	00100040 	.word	0x00100040
 8012f58:	00100030 	.word	0x00100030
 8012f5c:	00100020 	.word	0x00100020

08012f60 <TIM_Base_SetConfig>:
 8012f60:	b480      	push	{r7}
 8012f62:	b085      	sub	sp, #20
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	60fb      	str	r3, [r7, #12]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	4a4a      	ldr	r2, [pc, #296]	@ (801309c <TIM_Base_SetConfig+0x13c>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d013      	beq.n	8012fa0 <TIM_Base_SetConfig+0x40>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f7e:	d00f      	beq.n	8012fa0 <TIM_Base_SetConfig+0x40>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	4a47      	ldr	r2, [pc, #284]	@ (80130a0 <TIM_Base_SetConfig+0x140>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d00b      	beq.n	8012fa0 <TIM_Base_SetConfig+0x40>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	4a46      	ldr	r2, [pc, #280]	@ (80130a4 <TIM_Base_SetConfig+0x144>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d007      	beq.n	8012fa0 <TIM_Base_SetConfig+0x40>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	4a45      	ldr	r2, [pc, #276]	@ (80130a8 <TIM_Base_SetConfig+0x148>)
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d003      	beq.n	8012fa0 <TIM_Base_SetConfig+0x40>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	4a44      	ldr	r2, [pc, #272]	@ (80130ac <TIM_Base_SetConfig+0x14c>)
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	d108      	bne.n	8012fb2 <TIM_Base_SetConfig+0x52>
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	60fb      	str	r3, [r7, #12]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	4a39      	ldr	r2, [pc, #228]	@ (801309c <TIM_Base_SetConfig+0x13c>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d027      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012fc0:	d023      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	4a36      	ldr	r2, [pc, #216]	@ (80130a0 <TIM_Base_SetConfig+0x140>)
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d01f      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4a35      	ldr	r2, [pc, #212]	@ (80130a4 <TIM_Base_SetConfig+0x144>)
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	d01b      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	4a34      	ldr	r2, [pc, #208]	@ (80130a8 <TIM_Base_SetConfig+0x148>)
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d017      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4a33      	ldr	r2, [pc, #204]	@ (80130ac <TIM_Base_SetConfig+0x14c>)
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d013      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4a32      	ldr	r2, [pc, #200]	@ (80130b0 <TIM_Base_SetConfig+0x150>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d00f      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4a31      	ldr	r2, [pc, #196]	@ (80130b4 <TIM_Base_SetConfig+0x154>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d00b      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4a30      	ldr	r2, [pc, #192]	@ (80130b8 <TIM_Base_SetConfig+0x158>)
 8012ff6:	4293      	cmp	r3, r2
 8012ff8:	d007      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80130bc <TIM_Base_SetConfig+0x15c>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d003      	beq.n	801300a <TIM_Base_SetConfig+0xaa>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4a2e      	ldr	r2, [pc, #184]	@ (80130c0 <TIM_Base_SetConfig+0x160>)
 8013006:	4293      	cmp	r3, r2
 8013008:	d108      	bne.n	801301c <TIM_Base_SetConfig+0xbc>
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013010:	60fb      	str	r3, [r7, #12]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	4313      	orrs	r3, r2
 801301a:	60fb      	str	r3, [r7, #12]
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	695b      	ldr	r3, [r3, #20]
 8013026:	4313      	orrs	r3, r2
 8013028:	60fb      	str	r3, [r7, #12]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	68fa      	ldr	r2, [r7, #12]
 801302e:	601a      	str	r2, [r3, #0]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	689a      	ldr	r2, [r3, #8]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	629a      	str	r2, [r3, #40]	@ 0x28
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	4a16      	ldr	r2, [pc, #88]	@ (801309c <TIM_Base_SetConfig+0x13c>)
 8013044:	4293      	cmp	r3, r2
 8013046:	d00f      	beq.n	8013068 <TIM_Base_SetConfig+0x108>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	4a18      	ldr	r2, [pc, #96]	@ (80130ac <TIM_Base_SetConfig+0x14c>)
 801304c:	4293      	cmp	r3, r2
 801304e:	d00b      	beq.n	8013068 <TIM_Base_SetConfig+0x108>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	4a17      	ldr	r2, [pc, #92]	@ (80130b0 <TIM_Base_SetConfig+0x150>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d007      	beq.n	8013068 <TIM_Base_SetConfig+0x108>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4a16      	ldr	r2, [pc, #88]	@ (80130b4 <TIM_Base_SetConfig+0x154>)
 801305c:	4293      	cmp	r3, r2
 801305e:	d003      	beq.n	8013068 <TIM_Base_SetConfig+0x108>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4a15      	ldr	r2, [pc, #84]	@ (80130b8 <TIM_Base_SetConfig+0x158>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d103      	bne.n	8013070 <TIM_Base_SetConfig+0x110>
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	691a      	ldr	r2, [r3, #16]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	631a      	str	r2, [r3, #48]	@ 0x30
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2201      	movs	r2, #1
 8013074:	615a      	str	r2, [r3, #20]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	f003 0301 	and.w	r3, r3, #1
 801307e:	2b01      	cmp	r3, #1
 8013080:	d105      	bne.n	801308e <TIM_Base_SetConfig+0x12e>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	691b      	ldr	r3, [r3, #16]
 8013086:	f023 0201 	bic.w	r2, r3, #1
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	611a      	str	r2, [r3, #16]
 801308e:	bf00      	nop
 8013090:	3714      	adds	r7, #20
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	40010000 	.word	0x40010000
 80130a0:	40000400 	.word	0x40000400
 80130a4:	40000800 	.word	0x40000800
 80130a8:	40000c00 	.word	0x40000c00
 80130ac:	40010400 	.word	0x40010400
 80130b0:	40014000 	.word	0x40014000
 80130b4:	40014400 	.word	0x40014400
 80130b8:	40014800 	.word	0x40014800
 80130bc:	4000e000 	.word	0x4000e000
 80130c0:	4000e400 	.word	0x4000e400

080130c4 <TIM_OC1_SetConfig>:
 80130c4:	b480      	push	{r7}
 80130c6:	b087      	sub	sp, #28
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	6039      	str	r1, [r7, #0]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	6a1b      	ldr	r3, [r3, #32]
 80130d2:	617b      	str	r3, [r7, #20]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6a1b      	ldr	r3, [r3, #32]
 80130d8:	f023 0201 	bic.w	r2, r3, #1
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	621a      	str	r2, [r3, #32]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	613b      	str	r3, [r7, #16]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	699b      	ldr	r3, [r3, #24]
 80130ea:	60fb      	str	r3, [r7, #12]
 80130ec:	68fa      	ldr	r2, [r7, #12]
 80130ee:	4b37      	ldr	r3, [pc, #220]	@ (80131cc <TIM_OC1_SetConfig+0x108>)
 80130f0:	4013      	ands	r3, r2
 80130f2:	60fb      	str	r3, [r7, #12]
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f023 0303 	bic.w	r3, r3, #3
 80130fa:	60fb      	str	r3, [r7, #12]
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	68fa      	ldr	r2, [r7, #12]
 8013102:	4313      	orrs	r3, r2
 8013104:	60fb      	str	r3, [r7, #12]
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	f023 0302 	bic.w	r3, r3, #2
 801310c:	617b      	str	r3, [r7, #20]
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	697a      	ldr	r2, [r7, #20]
 8013114:	4313      	orrs	r3, r2
 8013116:	617b      	str	r3, [r7, #20]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4a2d      	ldr	r2, [pc, #180]	@ (80131d0 <TIM_OC1_SetConfig+0x10c>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d00f      	beq.n	8013140 <TIM_OC1_SetConfig+0x7c>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	4a2c      	ldr	r2, [pc, #176]	@ (80131d4 <TIM_OC1_SetConfig+0x110>)
 8013124:	4293      	cmp	r3, r2
 8013126:	d00b      	beq.n	8013140 <TIM_OC1_SetConfig+0x7c>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	4a2b      	ldr	r2, [pc, #172]	@ (80131d8 <TIM_OC1_SetConfig+0x114>)
 801312c:	4293      	cmp	r3, r2
 801312e:	d007      	beq.n	8013140 <TIM_OC1_SetConfig+0x7c>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4a2a      	ldr	r2, [pc, #168]	@ (80131dc <TIM_OC1_SetConfig+0x118>)
 8013134:	4293      	cmp	r3, r2
 8013136:	d003      	beq.n	8013140 <TIM_OC1_SetConfig+0x7c>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	4a29      	ldr	r2, [pc, #164]	@ (80131e0 <TIM_OC1_SetConfig+0x11c>)
 801313c:	4293      	cmp	r3, r2
 801313e:	d10c      	bne.n	801315a <TIM_OC1_SetConfig+0x96>
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	f023 0308 	bic.w	r3, r3, #8
 8013146:	617b      	str	r3, [r7, #20]
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	697a      	ldr	r2, [r7, #20]
 801314e:	4313      	orrs	r3, r2
 8013150:	617b      	str	r3, [r7, #20]
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	f023 0304 	bic.w	r3, r3, #4
 8013158:	617b      	str	r3, [r7, #20]
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4a1c      	ldr	r2, [pc, #112]	@ (80131d0 <TIM_OC1_SetConfig+0x10c>)
 801315e:	4293      	cmp	r3, r2
 8013160:	d00f      	beq.n	8013182 <TIM_OC1_SetConfig+0xbe>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	4a1b      	ldr	r2, [pc, #108]	@ (80131d4 <TIM_OC1_SetConfig+0x110>)
 8013166:	4293      	cmp	r3, r2
 8013168:	d00b      	beq.n	8013182 <TIM_OC1_SetConfig+0xbe>
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4a1a      	ldr	r2, [pc, #104]	@ (80131d8 <TIM_OC1_SetConfig+0x114>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d007      	beq.n	8013182 <TIM_OC1_SetConfig+0xbe>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4a19      	ldr	r2, [pc, #100]	@ (80131dc <TIM_OC1_SetConfig+0x118>)
 8013176:	4293      	cmp	r3, r2
 8013178:	d003      	beq.n	8013182 <TIM_OC1_SetConfig+0xbe>
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4a18      	ldr	r2, [pc, #96]	@ (80131e0 <TIM_OC1_SetConfig+0x11c>)
 801317e:	4293      	cmp	r3, r2
 8013180:	d111      	bne.n	80131a6 <TIM_OC1_SetConfig+0xe2>
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013188:	613b      	str	r3, [r7, #16]
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013190:	613b      	str	r3, [r7, #16]
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	695b      	ldr	r3, [r3, #20]
 8013196:	693a      	ldr	r2, [r7, #16]
 8013198:	4313      	orrs	r3, r2
 801319a:	613b      	str	r3, [r7, #16]
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	699b      	ldr	r3, [r3, #24]
 80131a0:	693a      	ldr	r2, [r7, #16]
 80131a2:	4313      	orrs	r3, r2
 80131a4:	613b      	str	r3, [r7, #16]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	605a      	str	r2, [r3, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	68fa      	ldr	r2, [r7, #12]
 80131b0:	619a      	str	r2, [r3, #24]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	685a      	ldr	r2, [r3, #4]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	697a      	ldr	r2, [r7, #20]
 80131be:	621a      	str	r2, [r3, #32]
 80131c0:	bf00      	nop
 80131c2:	371c      	adds	r7, #28
 80131c4:	46bd      	mov	sp, r7
 80131c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ca:	4770      	bx	lr
 80131cc:	fffeff8f 	.word	0xfffeff8f
 80131d0:	40010000 	.word	0x40010000
 80131d4:	40010400 	.word	0x40010400
 80131d8:	40014000 	.word	0x40014000
 80131dc:	40014400 	.word	0x40014400
 80131e0:	40014800 	.word	0x40014800

080131e4 <TIM_OC2_SetConfig>:
 80131e4:	b480      	push	{r7}
 80131e6:	b087      	sub	sp, #28
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6a1b      	ldr	r3, [r3, #32]
 80131f2:	617b      	str	r3, [r7, #20]
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6a1b      	ldr	r3, [r3, #32]
 80131f8:	f023 0210 	bic.w	r2, r3, #16
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	621a      	str	r2, [r3, #32]
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	613b      	str	r3, [r7, #16]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	699b      	ldr	r3, [r3, #24]
 801320a:	60fb      	str	r3, [r7, #12]
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	4b34      	ldr	r3, [pc, #208]	@ (80132e0 <TIM_OC2_SetConfig+0xfc>)
 8013210:	4013      	ands	r3, r2
 8013212:	60fb      	str	r3, [r7, #12]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801321a:	60fb      	str	r3, [r7, #12]
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	021b      	lsls	r3, r3, #8
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	4313      	orrs	r3, r2
 8013226:	60fb      	str	r3, [r7, #12]
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	f023 0320 	bic.w	r3, r3, #32
 801322e:	617b      	str	r3, [r7, #20]
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	689b      	ldr	r3, [r3, #8]
 8013234:	011b      	lsls	r3, r3, #4
 8013236:	697a      	ldr	r2, [r7, #20]
 8013238:	4313      	orrs	r3, r2
 801323a:	617b      	str	r3, [r7, #20]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4a29      	ldr	r2, [pc, #164]	@ (80132e4 <TIM_OC2_SetConfig+0x100>)
 8013240:	4293      	cmp	r3, r2
 8013242:	d003      	beq.n	801324c <TIM_OC2_SetConfig+0x68>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	4a28      	ldr	r2, [pc, #160]	@ (80132e8 <TIM_OC2_SetConfig+0x104>)
 8013248:	4293      	cmp	r3, r2
 801324a:	d10d      	bne.n	8013268 <TIM_OC2_SetConfig+0x84>
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013252:	617b      	str	r3, [r7, #20]
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	68db      	ldr	r3, [r3, #12]
 8013258:	011b      	lsls	r3, r3, #4
 801325a:	697a      	ldr	r2, [r7, #20]
 801325c:	4313      	orrs	r3, r2
 801325e:	617b      	str	r3, [r7, #20]
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013266:	617b      	str	r3, [r7, #20]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	4a1e      	ldr	r2, [pc, #120]	@ (80132e4 <TIM_OC2_SetConfig+0x100>)
 801326c:	4293      	cmp	r3, r2
 801326e:	d00f      	beq.n	8013290 <TIM_OC2_SetConfig+0xac>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	4a1d      	ldr	r2, [pc, #116]	@ (80132e8 <TIM_OC2_SetConfig+0x104>)
 8013274:	4293      	cmp	r3, r2
 8013276:	d00b      	beq.n	8013290 <TIM_OC2_SetConfig+0xac>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	4a1c      	ldr	r2, [pc, #112]	@ (80132ec <TIM_OC2_SetConfig+0x108>)
 801327c:	4293      	cmp	r3, r2
 801327e:	d007      	beq.n	8013290 <TIM_OC2_SetConfig+0xac>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	4a1b      	ldr	r2, [pc, #108]	@ (80132f0 <TIM_OC2_SetConfig+0x10c>)
 8013284:	4293      	cmp	r3, r2
 8013286:	d003      	beq.n	8013290 <TIM_OC2_SetConfig+0xac>
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	4a1a      	ldr	r2, [pc, #104]	@ (80132f4 <TIM_OC2_SetConfig+0x110>)
 801328c:	4293      	cmp	r3, r2
 801328e:	d113      	bne.n	80132b8 <TIM_OC2_SetConfig+0xd4>
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013296:	613b      	str	r3, [r7, #16]
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801329e:	613b      	str	r3, [r7, #16]
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	695b      	ldr	r3, [r3, #20]
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	693a      	ldr	r2, [r7, #16]
 80132a8:	4313      	orrs	r3, r2
 80132aa:	613b      	str	r3, [r7, #16]
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	699b      	ldr	r3, [r3, #24]
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	693a      	ldr	r2, [r7, #16]
 80132b4:	4313      	orrs	r3, r2
 80132b6:	613b      	str	r3, [r7, #16]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	693a      	ldr	r2, [r7, #16]
 80132bc:	605a      	str	r2, [r3, #4]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	619a      	str	r2, [r3, #24]
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	685a      	ldr	r2, [r3, #4]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	697a      	ldr	r2, [r7, #20]
 80132d0:	621a      	str	r2, [r3, #32]
 80132d2:	bf00      	nop
 80132d4:	371c      	adds	r7, #28
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	feff8fff 	.word	0xfeff8fff
 80132e4:	40010000 	.word	0x40010000
 80132e8:	40010400 	.word	0x40010400
 80132ec:	40014000 	.word	0x40014000
 80132f0:	40014400 	.word	0x40014400
 80132f4:	40014800 	.word	0x40014800

080132f8 <TIM_OC3_SetConfig>:
 80132f8:	b480      	push	{r7}
 80132fa:	b087      	sub	sp, #28
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6a1b      	ldr	r3, [r3, #32]
 8013306:	617b      	str	r3, [r7, #20]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6a1b      	ldr	r3, [r3, #32]
 801330c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	621a      	str	r2, [r3, #32]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	613b      	str	r3, [r7, #16]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	69db      	ldr	r3, [r3, #28]
 801331e:	60fb      	str	r3, [r7, #12]
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	4b33      	ldr	r3, [pc, #204]	@ (80133f0 <TIM_OC3_SetConfig+0xf8>)
 8013324:	4013      	ands	r3, r2
 8013326:	60fb      	str	r3, [r7, #12]
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f023 0303 	bic.w	r3, r3, #3
 801332e:	60fb      	str	r3, [r7, #12]
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	68fa      	ldr	r2, [r7, #12]
 8013336:	4313      	orrs	r3, r2
 8013338:	60fb      	str	r3, [r7, #12]
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013340:	617b      	str	r3, [r7, #20]
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	689b      	ldr	r3, [r3, #8]
 8013346:	021b      	lsls	r3, r3, #8
 8013348:	697a      	ldr	r2, [r7, #20]
 801334a:	4313      	orrs	r3, r2
 801334c:	617b      	str	r3, [r7, #20]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	4a28      	ldr	r2, [pc, #160]	@ (80133f4 <TIM_OC3_SetConfig+0xfc>)
 8013352:	4293      	cmp	r3, r2
 8013354:	d003      	beq.n	801335e <TIM_OC3_SetConfig+0x66>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4a27      	ldr	r2, [pc, #156]	@ (80133f8 <TIM_OC3_SetConfig+0x100>)
 801335a:	4293      	cmp	r3, r2
 801335c:	d10d      	bne.n	801337a <TIM_OC3_SetConfig+0x82>
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013364:	617b      	str	r3, [r7, #20]
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	021b      	lsls	r3, r3, #8
 801336c:	697a      	ldr	r2, [r7, #20]
 801336e:	4313      	orrs	r3, r2
 8013370:	617b      	str	r3, [r7, #20]
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013378:	617b      	str	r3, [r7, #20]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	4a1d      	ldr	r2, [pc, #116]	@ (80133f4 <TIM_OC3_SetConfig+0xfc>)
 801337e:	4293      	cmp	r3, r2
 8013380:	d00f      	beq.n	80133a2 <TIM_OC3_SetConfig+0xaa>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	4a1c      	ldr	r2, [pc, #112]	@ (80133f8 <TIM_OC3_SetConfig+0x100>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d00b      	beq.n	80133a2 <TIM_OC3_SetConfig+0xaa>
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4a1b      	ldr	r2, [pc, #108]	@ (80133fc <TIM_OC3_SetConfig+0x104>)
 801338e:	4293      	cmp	r3, r2
 8013390:	d007      	beq.n	80133a2 <TIM_OC3_SetConfig+0xaa>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	4a1a      	ldr	r2, [pc, #104]	@ (8013400 <TIM_OC3_SetConfig+0x108>)
 8013396:	4293      	cmp	r3, r2
 8013398:	d003      	beq.n	80133a2 <TIM_OC3_SetConfig+0xaa>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	4a19      	ldr	r2, [pc, #100]	@ (8013404 <TIM_OC3_SetConfig+0x10c>)
 801339e:	4293      	cmp	r3, r2
 80133a0:	d113      	bne.n	80133ca <TIM_OC3_SetConfig+0xd2>
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80133a8:	613b      	str	r3, [r7, #16]
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80133b0:	613b      	str	r3, [r7, #16]
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	695b      	ldr	r3, [r3, #20]
 80133b6:	011b      	lsls	r3, r3, #4
 80133b8:	693a      	ldr	r2, [r7, #16]
 80133ba:	4313      	orrs	r3, r2
 80133bc:	613b      	str	r3, [r7, #16]
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	699b      	ldr	r3, [r3, #24]
 80133c2:	011b      	lsls	r3, r3, #4
 80133c4:	693a      	ldr	r2, [r7, #16]
 80133c6:	4313      	orrs	r3, r2
 80133c8:	613b      	str	r3, [r7, #16]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	693a      	ldr	r2, [r7, #16]
 80133ce:	605a      	str	r2, [r3, #4]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	68fa      	ldr	r2, [r7, #12]
 80133d4:	61da      	str	r2, [r3, #28]
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	685a      	ldr	r2, [r3, #4]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	697a      	ldr	r2, [r7, #20]
 80133e2:	621a      	str	r2, [r3, #32]
 80133e4:	bf00      	nop
 80133e6:	371c      	adds	r7, #28
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr
 80133f0:	fffeff8f 	.word	0xfffeff8f
 80133f4:	40010000 	.word	0x40010000
 80133f8:	40010400 	.word	0x40010400
 80133fc:	40014000 	.word	0x40014000
 8013400:	40014400 	.word	0x40014400
 8013404:	40014800 	.word	0x40014800

08013408 <TIM_OC4_SetConfig>:
 8013408:	b480      	push	{r7}
 801340a:	b087      	sub	sp, #28
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6a1b      	ldr	r3, [r3, #32]
 8013416:	613b      	str	r3, [r7, #16]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6a1b      	ldr	r3, [r3, #32]
 801341c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	621a      	str	r2, [r3, #32]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	617b      	str	r3, [r7, #20]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	69db      	ldr	r3, [r3, #28]
 801342e:	60fb      	str	r3, [r7, #12]
 8013430:	68fa      	ldr	r2, [r7, #12]
 8013432:	4b24      	ldr	r3, [pc, #144]	@ (80134c4 <TIM_OC4_SetConfig+0xbc>)
 8013434:	4013      	ands	r3, r2
 8013436:	60fb      	str	r3, [r7, #12]
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801343e:	60fb      	str	r3, [r7, #12]
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	021b      	lsls	r3, r3, #8
 8013446:	68fa      	ldr	r2, [r7, #12]
 8013448:	4313      	orrs	r3, r2
 801344a:	60fb      	str	r3, [r7, #12]
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013452:	613b      	str	r3, [r7, #16]
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	689b      	ldr	r3, [r3, #8]
 8013458:	031b      	lsls	r3, r3, #12
 801345a:	693a      	ldr	r2, [r7, #16]
 801345c:	4313      	orrs	r3, r2
 801345e:	613b      	str	r3, [r7, #16]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	4a19      	ldr	r2, [pc, #100]	@ (80134c8 <TIM_OC4_SetConfig+0xc0>)
 8013464:	4293      	cmp	r3, r2
 8013466:	d00f      	beq.n	8013488 <TIM_OC4_SetConfig+0x80>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	4a18      	ldr	r2, [pc, #96]	@ (80134cc <TIM_OC4_SetConfig+0xc4>)
 801346c:	4293      	cmp	r3, r2
 801346e:	d00b      	beq.n	8013488 <TIM_OC4_SetConfig+0x80>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	4a17      	ldr	r2, [pc, #92]	@ (80134d0 <TIM_OC4_SetConfig+0xc8>)
 8013474:	4293      	cmp	r3, r2
 8013476:	d007      	beq.n	8013488 <TIM_OC4_SetConfig+0x80>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	4a16      	ldr	r2, [pc, #88]	@ (80134d4 <TIM_OC4_SetConfig+0xcc>)
 801347c:	4293      	cmp	r3, r2
 801347e:	d003      	beq.n	8013488 <TIM_OC4_SetConfig+0x80>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	4a15      	ldr	r2, [pc, #84]	@ (80134d8 <TIM_OC4_SetConfig+0xd0>)
 8013484:	4293      	cmp	r3, r2
 8013486:	d109      	bne.n	801349c <TIM_OC4_SetConfig+0x94>
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801348e:	617b      	str	r3, [r7, #20]
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	695b      	ldr	r3, [r3, #20]
 8013494:	019b      	lsls	r3, r3, #6
 8013496:	697a      	ldr	r2, [r7, #20]
 8013498:	4313      	orrs	r3, r2
 801349a:	617b      	str	r3, [r7, #20]
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	697a      	ldr	r2, [r7, #20]
 80134a0:	605a      	str	r2, [r3, #4]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	68fa      	ldr	r2, [r7, #12]
 80134a6:	61da      	str	r2, [r3, #28]
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	685a      	ldr	r2, [r3, #4]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	693a      	ldr	r2, [r7, #16]
 80134b4:	621a      	str	r2, [r3, #32]
 80134b6:	bf00      	nop
 80134b8:	371c      	adds	r7, #28
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr
 80134c2:	bf00      	nop
 80134c4:	feff8fff 	.word	0xfeff8fff
 80134c8:	40010000 	.word	0x40010000
 80134cc:	40010400 	.word	0x40010400
 80134d0:	40014000 	.word	0x40014000
 80134d4:	40014400 	.word	0x40014400
 80134d8:	40014800 	.word	0x40014800

080134dc <TIM_OC5_SetConfig>:
 80134dc:	b480      	push	{r7}
 80134de:	b087      	sub	sp, #28
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6a1b      	ldr	r3, [r3, #32]
 80134ea:	613b      	str	r3, [r7, #16]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6a1b      	ldr	r3, [r3, #32]
 80134f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	621a      	str	r2, [r3, #32]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	685b      	ldr	r3, [r3, #4]
 80134fc:	617b      	str	r3, [r7, #20]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013502:	60fb      	str	r3, [r7, #12]
 8013504:	68fa      	ldr	r2, [r7, #12]
 8013506:	4b21      	ldr	r3, [pc, #132]	@ (801358c <TIM_OC5_SetConfig+0xb0>)
 8013508:	4013      	ands	r3, r2
 801350a:	60fb      	str	r3, [r7, #12]
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	68fa      	ldr	r2, [r7, #12]
 8013512:	4313      	orrs	r3, r2
 8013514:	60fb      	str	r3, [r7, #12]
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801351c:	613b      	str	r3, [r7, #16]
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	689b      	ldr	r3, [r3, #8]
 8013522:	041b      	lsls	r3, r3, #16
 8013524:	693a      	ldr	r2, [r7, #16]
 8013526:	4313      	orrs	r3, r2
 8013528:	613b      	str	r3, [r7, #16]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4a18      	ldr	r2, [pc, #96]	@ (8013590 <TIM_OC5_SetConfig+0xb4>)
 801352e:	4293      	cmp	r3, r2
 8013530:	d00f      	beq.n	8013552 <TIM_OC5_SetConfig+0x76>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4a17      	ldr	r2, [pc, #92]	@ (8013594 <TIM_OC5_SetConfig+0xb8>)
 8013536:	4293      	cmp	r3, r2
 8013538:	d00b      	beq.n	8013552 <TIM_OC5_SetConfig+0x76>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	4a16      	ldr	r2, [pc, #88]	@ (8013598 <TIM_OC5_SetConfig+0xbc>)
 801353e:	4293      	cmp	r3, r2
 8013540:	d007      	beq.n	8013552 <TIM_OC5_SetConfig+0x76>
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4a15      	ldr	r2, [pc, #84]	@ (801359c <TIM_OC5_SetConfig+0xc0>)
 8013546:	4293      	cmp	r3, r2
 8013548:	d003      	beq.n	8013552 <TIM_OC5_SetConfig+0x76>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	4a14      	ldr	r2, [pc, #80]	@ (80135a0 <TIM_OC5_SetConfig+0xc4>)
 801354e:	4293      	cmp	r3, r2
 8013550:	d109      	bne.n	8013566 <TIM_OC5_SetConfig+0x8a>
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013558:	617b      	str	r3, [r7, #20]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	695b      	ldr	r3, [r3, #20]
 801355e:	021b      	lsls	r3, r3, #8
 8013560:	697a      	ldr	r2, [r7, #20]
 8013562:	4313      	orrs	r3, r2
 8013564:	617b      	str	r3, [r7, #20]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	697a      	ldr	r2, [r7, #20]
 801356a:	605a      	str	r2, [r3, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	655a      	str	r2, [r3, #84]	@ 0x54
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	685a      	ldr	r2, [r3, #4]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	659a      	str	r2, [r3, #88]	@ 0x58
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	693a      	ldr	r2, [r7, #16]
 801357e:	621a      	str	r2, [r3, #32]
 8013580:	bf00      	nop
 8013582:	371c      	adds	r7, #28
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr
 801358c:	fffeff8f 	.word	0xfffeff8f
 8013590:	40010000 	.word	0x40010000
 8013594:	40010400 	.word	0x40010400
 8013598:	40014000 	.word	0x40014000
 801359c:	40014400 	.word	0x40014400
 80135a0:	40014800 	.word	0x40014800

080135a4 <TIM_OC6_SetConfig>:
 80135a4:	b480      	push	{r7}
 80135a6:	b087      	sub	sp, #28
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6a1b      	ldr	r3, [r3, #32]
 80135b2:	613b      	str	r3, [r7, #16]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6a1b      	ldr	r3, [r3, #32]
 80135b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	621a      	str	r2, [r3, #32]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	617b      	str	r3, [r7, #20]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135ca:	60fb      	str	r3, [r7, #12]
 80135cc:	68fa      	ldr	r2, [r7, #12]
 80135ce:	4b22      	ldr	r3, [pc, #136]	@ (8013658 <TIM_OC6_SetConfig+0xb4>)
 80135d0:	4013      	ands	r3, r2
 80135d2:	60fb      	str	r3, [r7, #12]
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	021b      	lsls	r3, r3, #8
 80135da:	68fa      	ldr	r2, [r7, #12]
 80135dc:	4313      	orrs	r3, r2
 80135de:	60fb      	str	r3, [r7, #12]
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80135e6:	613b      	str	r3, [r7, #16]
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	689b      	ldr	r3, [r3, #8]
 80135ec:	051b      	lsls	r3, r3, #20
 80135ee:	693a      	ldr	r2, [r7, #16]
 80135f0:	4313      	orrs	r3, r2
 80135f2:	613b      	str	r3, [r7, #16]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	4a19      	ldr	r2, [pc, #100]	@ (801365c <TIM_OC6_SetConfig+0xb8>)
 80135f8:	4293      	cmp	r3, r2
 80135fa:	d00f      	beq.n	801361c <TIM_OC6_SetConfig+0x78>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	4a18      	ldr	r2, [pc, #96]	@ (8013660 <TIM_OC6_SetConfig+0xbc>)
 8013600:	4293      	cmp	r3, r2
 8013602:	d00b      	beq.n	801361c <TIM_OC6_SetConfig+0x78>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	4a17      	ldr	r2, [pc, #92]	@ (8013664 <TIM_OC6_SetConfig+0xc0>)
 8013608:	4293      	cmp	r3, r2
 801360a:	d007      	beq.n	801361c <TIM_OC6_SetConfig+0x78>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	4a16      	ldr	r2, [pc, #88]	@ (8013668 <TIM_OC6_SetConfig+0xc4>)
 8013610:	4293      	cmp	r3, r2
 8013612:	d003      	beq.n	801361c <TIM_OC6_SetConfig+0x78>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4a15      	ldr	r2, [pc, #84]	@ (801366c <TIM_OC6_SetConfig+0xc8>)
 8013618:	4293      	cmp	r3, r2
 801361a:	d109      	bne.n	8013630 <TIM_OC6_SetConfig+0x8c>
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013622:	617b      	str	r3, [r7, #20]
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	695b      	ldr	r3, [r3, #20]
 8013628:	029b      	lsls	r3, r3, #10
 801362a:	697a      	ldr	r2, [r7, #20]
 801362c:	4313      	orrs	r3, r2
 801362e:	617b      	str	r3, [r7, #20]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	697a      	ldr	r2, [r7, #20]
 8013634:	605a      	str	r2, [r3, #4]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	68fa      	ldr	r2, [r7, #12]
 801363a:	655a      	str	r2, [r3, #84]	@ 0x54
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	685a      	ldr	r2, [r3, #4]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	693a      	ldr	r2, [r7, #16]
 8013648:	621a      	str	r2, [r3, #32]
 801364a:	bf00      	nop
 801364c:	371c      	adds	r7, #28
 801364e:	46bd      	mov	sp, r7
 8013650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013654:	4770      	bx	lr
 8013656:	bf00      	nop
 8013658:	feff8fff 	.word	0xfeff8fff
 801365c:	40010000 	.word	0x40010000
 8013660:	40010400 	.word	0x40010400
 8013664:	40014000 	.word	0x40014000
 8013668:	40014400 	.word	0x40014400
 801366c:	40014800 	.word	0x40014800

08013670 <TIM_TI1_ConfigInputStage>:
 8013670:	b480      	push	{r7}
 8013672:	b087      	sub	sp, #28
 8013674:	af00      	add	r7, sp, #0
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	6a1b      	ldr	r3, [r3, #32]
 8013680:	617b      	str	r3, [r7, #20]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	6a1b      	ldr	r3, [r3, #32]
 8013686:	f023 0201 	bic.w	r2, r3, #1
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	621a      	str	r2, [r3, #32]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	699b      	ldr	r3, [r3, #24]
 8013692:	613b      	str	r3, [r7, #16]
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801369a:	613b      	str	r3, [r7, #16]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	011b      	lsls	r3, r3, #4
 80136a0:	693a      	ldr	r2, [r7, #16]
 80136a2:	4313      	orrs	r3, r2
 80136a4:	613b      	str	r3, [r7, #16]
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	f023 030a 	bic.w	r3, r3, #10
 80136ac:	617b      	str	r3, [r7, #20]
 80136ae:	697a      	ldr	r2, [r7, #20]
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	4313      	orrs	r3, r2
 80136b4:	617b      	str	r3, [r7, #20]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	693a      	ldr	r2, [r7, #16]
 80136ba:	619a      	str	r2, [r3, #24]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	697a      	ldr	r2, [r7, #20]
 80136c0:	621a      	str	r2, [r3, #32]
 80136c2:	bf00      	nop
 80136c4:	371c      	adds	r7, #28
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr

080136ce <TIM_TI2_ConfigInputStage>:
 80136ce:	b480      	push	{r7}
 80136d0:	b087      	sub	sp, #28
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	60f8      	str	r0, [r7, #12]
 80136d6:	60b9      	str	r1, [r7, #8]
 80136d8:	607a      	str	r2, [r7, #4]
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6a1b      	ldr	r3, [r3, #32]
 80136de:	617b      	str	r3, [r7, #20]
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6a1b      	ldr	r3, [r3, #32]
 80136e4:	f023 0210 	bic.w	r2, r3, #16
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	621a      	str	r2, [r3, #32]
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	699b      	ldr	r3, [r3, #24]
 80136f0:	613b      	str	r3, [r7, #16]
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80136f8:	613b      	str	r3, [r7, #16]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	031b      	lsls	r3, r3, #12
 80136fe:	693a      	ldr	r2, [r7, #16]
 8013700:	4313      	orrs	r3, r2
 8013702:	613b      	str	r3, [r7, #16]
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801370a:	617b      	str	r3, [r7, #20]
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	011b      	lsls	r3, r3, #4
 8013710:	697a      	ldr	r2, [r7, #20]
 8013712:	4313      	orrs	r3, r2
 8013714:	617b      	str	r3, [r7, #20]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	693a      	ldr	r2, [r7, #16]
 801371a:	619a      	str	r2, [r3, #24]
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	697a      	ldr	r2, [r7, #20]
 8013720:	621a      	str	r2, [r3, #32]
 8013722:	bf00      	nop
 8013724:	371c      	adds	r7, #28
 8013726:	46bd      	mov	sp, r7
 8013728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372c:	4770      	bx	lr
	...

08013730 <TIM_ITRx_SetConfig>:
 8013730:	b480      	push	{r7}
 8013732:	b085      	sub	sp, #20
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	689b      	ldr	r3, [r3, #8]
 801373e:	60fb      	str	r3, [r7, #12]
 8013740:	68fa      	ldr	r2, [r7, #12]
 8013742:	4b09      	ldr	r3, [pc, #36]	@ (8013768 <TIM_ITRx_SetConfig+0x38>)
 8013744:	4013      	ands	r3, r2
 8013746:	60fb      	str	r3, [r7, #12]
 8013748:	683a      	ldr	r2, [r7, #0]
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	4313      	orrs	r3, r2
 801374e:	f043 0307 	orr.w	r3, r3, #7
 8013752:	60fb      	str	r3, [r7, #12]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	68fa      	ldr	r2, [r7, #12]
 8013758:	609a      	str	r2, [r3, #8]
 801375a:	bf00      	nop
 801375c:	3714      	adds	r7, #20
 801375e:	46bd      	mov	sp, r7
 8013760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013764:	4770      	bx	lr
 8013766:	bf00      	nop
 8013768:	ffcfff8f 	.word	0xffcfff8f

0801376c <TIM_ETR_SetConfig>:
 801376c:	b480      	push	{r7}
 801376e:	b087      	sub	sp, #28
 8013770:	af00      	add	r7, sp, #0
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	607a      	str	r2, [r7, #4]
 8013778:	603b      	str	r3, [r7, #0]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	689b      	ldr	r3, [r3, #8]
 801377e:	617b      	str	r3, [r7, #20]
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013786:	617b      	str	r3, [r7, #20]
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	021a      	lsls	r2, r3, #8
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	431a      	orrs	r2, r3
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	4313      	orrs	r3, r2
 8013794:	697a      	ldr	r2, [r7, #20]
 8013796:	4313      	orrs	r3, r2
 8013798:	617b      	str	r3, [r7, #20]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	697a      	ldr	r2, [r7, #20]
 801379e:	609a      	str	r2, [r3, #8]
 80137a0:	bf00      	nop
 80137a2:	371c      	adds	r7, #28
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <HAL_TIMEx_MasterConfigSynchronization>:
 80137ac:	b480      	push	{r7}
 80137ae:	b085      	sub	sp, #20
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d101      	bne.n	80137c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80137c0:	2302      	movs	r3, #2
 80137c2:	e077      	b.n	80138b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2201      	movs	r2, #1
 80137c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2202      	movs	r2, #2
 80137d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	685b      	ldr	r3, [r3, #4]
 80137da:	60fb      	str	r3, [r7, #12]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	689b      	ldr	r3, [r3, #8]
 80137e2:	60bb      	str	r3, [r7, #8]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	4a35      	ldr	r2, [pc, #212]	@ (80138c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d004      	beq.n	80137f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	4a34      	ldr	r2, [pc, #208]	@ (80138c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80137f4:	4293      	cmp	r3, r2
 80137f6:	d108      	bne.n	801380a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80137fe:	60fb      	str	r3, [r7, #12]
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	68fa      	ldr	r2, [r7, #12]
 8013806:	4313      	orrs	r3, r2
 8013808:	60fb      	str	r3, [r7, #12]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013810:	60fb      	str	r3, [r7, #12]
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	68fa      	ldr	r2, [r7, #12]
 8013818:	4313      	orrs	r3, r2
 801381a:	60fb      	str	r3, [r7, #12]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	68fa      	ldr	r2, [r7, #12]
 8013822:	605a      	str	r2, [r3, #4]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	4a25      	ldr	r2, [pc, #148]	@ (80138c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801382a:	4293      	cmp	r3, r2
 801382c:	d02c      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013836:	d027      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4a22      	ldr	r2, [pc, #136]	@ (80138c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801383e:	4293      	cmp	r3, r2
 8013840:	d022      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	4a21      	ldr	r2, [pc, #132]	@ (80138cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d01d      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	4a1f      	ldr	r2, [pc, #124]	@ (80138d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8013852:	4293      	cmp	r3, r2
 8013854:	d018      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	4a1a      	ldr	r2, [pc, #104]	@ (80138c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801385c:	4293      	cmp	r3, r2
 801385e:	d013      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	4a1b      	ldr	r2, [pc, #108]	@ (80138d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8013866:	4293      	cmp	r3, r2
 8013868:	d00e      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	4a1a      	ldr	r2, [pc, #104]	@ (80138d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013870:	4293      	cmp	r3, r2
 8013872:	d009      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	4a18      	ldr	r2, [pc, #96]	@ (80138dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801387a:	4293      	cmp	r3, r2
 801387c:	d004      	beq.n	8013888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	4a17      	ldr	r2, [pc, #92]	@ (80138e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8013884:	4293      	cmp	r3, r2
 8013886:	d10c      	bne.n	80138a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801388e:	60bb      	str	r3, [r7, #8]
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	689b      	ldr	r3, [r3, #8]
 8013894:	68ba      	ldr	r2, [r7, #8]
 8013896:	4313      	orrs	r3, r2
 8013898:	60bb      	str	r3, [r7, #8]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	68ba      	ldr	r2, [r7, #8]
 80138a0:	609a      	str	r2, [r3, #8]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2201      	movs	r2, #1
 80138a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2200      	movs	r2, #0
 80138ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80138b2:	2300      	movs	r3, #0
 80138b4:	4618      	mov	r0, r3
 80138b6:	3714      	adds	r7, #20
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr
 80138c0:	40010000 	.word	0x40010000
 80138c4:	40010400 	.word	0x40010400
 80138c8:	40000400 	.word	0x40000400
 80138cc:	40000800 	.word	0x40000800
 80138d0:	40000c00 	.word	0x40000c00
 80138d4:	40001800 	.word	0x40001800
 80138d8:	40014000 	.word	0x40014000
 80138dc:	4000e000 	.word	0x4000e000
 80138e0:	4000e400 	.word	0x4000e400

080138e4 <HAL_TIMEx_ConfigBreakDeadTime>:
 80138e4:	b480      	push	{r7}
 80138e6:	b085      	sub	sp, #20
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
 80138ee:	2300      	movs	r3, #0
 80138f0:	60fb      	str	r3, [r7, #12]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d101      	bne.n	8013900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80138fc:	2302      	movs	r3, #2
 80138fe:	e073      	b.n	80139e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2201      	movs	r2, #1
 8013904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	4313      	orrs	r3, r2
 8013914:	60fb      	str	r3, [r7, #12]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	689b      	ldr	r3, [r3, #8]
 8013920:	4313      	orrs	r3, r2
 8013922:	60fb      	str	r3, [r7, #12]
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	4313      	orrs	r3, r2
 8013930:	60fb      	str	r3, [r7, #12]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4313      	orrs	r3, r2
 801393e:	60fb      	str	r3, [r7, #12]
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	691b      	ldr	r3, [r3, #16]
 801394a:	4313      	orrs	r3, r2
 801394c:	60fb      	str	r3, [r7, #12]
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	695b      	ldr	r3, [r3, #20]
 8013958:	4313      	orrs	r3, r2
 801395a:	60fb      	str	r3, [r7, #12]
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013966:	4313      	orrs	r3, r2
 8013968:	60fb      	str	r3, [r7, #12]
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	699b      	ldr	r3, [r3, #24]
 8013974:	041b      	lsls	r3, r3, #16
 8013976:	4313      	orrs	r3, r2
 8013978:	60fb      	str	r3, [r7, #12]
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	69db      	ldr	r3, [r3, #28]
 8013984:	4313      	orrs	r3, r2
 8013986:	60fb      	str	r3, [r7, #12]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	4a19      	ldr	r2, [pc, #100]	@ (80139f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 801398e:	4293      	cmp	r3, r2
 8013990:	d004      	beq.n	801399c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	4a18      	ldr	r2, [pc, #96]	@ (80139f8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8013998:	4293      	cmp	r3, r2
 801399a:	d11c      	bne.n	80139d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139a6:	051b      	lsls	r3, r3, #20
 80139a8:	4313      	orrs	r3, r2
 80139aa:	60fb      	str	r3, [r7, #12]
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	6a1b      	ldr	r3, [r3, #32]
 80139b6:	4313      	orrs	r3, r2
 80139b8:	60fb      	str	r3, [r7, #12]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139c4:	4313      	orrs	r3, r2
 80139c6:	60fb      	str	r3, [r7, #12]
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139d2:	4313      	orrs	r3, r2
 80139d4:	60fb      	str	r3, [r7, #12]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2200      	movs	r2, #0
 80139e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80139e6:	2300      	movs	r3, #0
 80139e8:	4618      	mov	r0, r3
 80139ea:	3714      	adds	r7, #20
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr
 80139f4:	40010000 	.word	0x40010000
 80139f8:	40010400 	.word	0x40010400

080139fc <HAL_UART_Init>:
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <HAL_UART_Init+0x12>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e042      	b.n	8013a94 <HAL_UART_Init+0x98>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d106      	bne.n	8013a26 <HAL_UART_Init+0x2a>
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7f4 fb23 	bl	800806c <HAL_UART_MspInit>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	2224      	movs	r2, #36	@ 0x24
 8013a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	681a      	ldr	r2, [r3, #0]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	f022 0201 	bic.w	r2, r2, #1
 8013a3c:	601a      	str	r2, [r3, #0]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d002      	beq.n	8013a4c <HAL_UART_Init+0x50>
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f001 fa6e 	bl	8014f28 <UART_AdvFeatureConfig>
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 fbff 	bl	8014250 <UART_SetConfig>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b01      	cmp	r3, #1
 8013a56:	d101      	bne.n	8013a5c <HAL_UART_Init+0x60>
 8013a58:	2301      	movs	r3, #1
 8013a5a:	e01b      	b.n	8013a94 <HAL_UART_Init+0x98>
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	685a      	ldr	r2, [r3, #4]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013a6a:	605a      	str	r2, [r3, #4]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	689a      	ldr	r2, [r3, #8]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013a7a:	609a      	str	r2, [r3, #8]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	681a      	ldr	r2, [r3, #0]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	f042 0201 	orr.w	r2, r2, #1
 8013a8a:	601a      	str	r2, [r3, #0]
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f001 faed 	bl	801506c <UART_CheckIdleState>
 8013a92:	4603      	mov	r3, r0
 8013a94:	4618      	mov	r0, r3
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <HAL_UART_IRQHandler>:
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b0ba      	sub	sp, #232	@ 0xe8
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	69db      	ldr	r3, [r3, #28]
 8013aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	689b      	ldr	r3, [r3, #8]
 8013abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013ac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013ac6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013aca:	4013      	ands	r3, r2
 8013acc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d11b      	bne.n	8013b10 <HAL_UART_IRQHandler+0x74>
 8013ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013adc:	f003 0320 	and.w	r3, r3, #32
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d015      	beq.n	8013b10 <HAL_UART_IRQHandler+0x74>
 8013ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013ae8:	f003 0320 	and.w	r3, r3, #32
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d105      	bne.n	8013afc <HAL_UART_IRQHandler+0x60>
 8013af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d009      	beq.n	8013b10 <HAL_UART_IRQHandler+0x74>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f000 8377 	beq.w	80141f4 <HAL_UART_IRQHandler+0x758>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	4798      	blx	r3
 8013b0e:	e371      	b.n	80141f4 <HAL_UART_IRQHandler+0x758>
 8013b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	f000 8123 	beq.w	8013d60 <HAL_UART_IRQHandler+0x2c4>
 8013b1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8013d54 <HAL_UART_IRQHandler+0x2b8>)
 8013b20:	4013      	ands	r3, r2
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d106      	bne.n	8013b34 <HAL_UART_IRQHandler+0x98>
 8013b26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013b2a:	4b8b      	ldr	r3, [pc, #556]	@ (8013d58 <HAL_UART_IRQHandler+0x2bc>)
 8013b2c:	4013      	ands	r3, r2
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f000 8116 	beq.w	8013d60 <HAL_UART_IRQHandler+0x2c4>
 8013b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013b38:	f003 0301 	and.w	r3, r3, #1
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d011      	beq.n	8013b64 <HAL_UART_IRQHandler+0xc8>
 8013b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00b      	beq.n	8013b64 <HAL_UART_IRQHandler+0xc8>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2201      	movs	r2, #1
 8013b52:	621a      	str	r2, [r3, #32]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013b5a:	f043 0201 	orr.w	r2, r3, #1
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013b68:	f003 0302 	and.w	r3, r3, #2
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d011      	beq.n	8013b94 <HAL_UART_IRQHandler+0xf8>
 8013b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013b74:	f003 0301 	and.w	r3, r3, #1
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d00b      	beq.n	8013b94 <HAL_UART_IRQHandler+0xf8>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2202      	movs	r2, #2
 8013b82:	621a      	str	r2, [r3, #32]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013b8a:	f043 0204 	orr.w	r2, r3, #4
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013b98:	f003 0304 	and.w	r3, r3, #4
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d011      	beq.n	8013bc4 <HAL_UART_IRQHandler+0x128>
 8013ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013ba4:	f003 0301 	and.w	r3, r3, #1
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d00b      	beq.n	8013bc4 <HAL_UART_IRQHandler+0x128>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	2204      	movs	r2, #4
 8013bb2:	621a      	str	r2, [r3, #32]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013bba:	f043 0202 	orr.w	r2, r3, #2
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013bc8:	f003 0308 	and.w	r3, r3, #8
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d017      	beq.n	8013c00 <HAL_UART_IRQHandler+0x164>
 8013bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013bd4:	f003 0320 	and.w	r3, r3, #32
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d105      	bne.n	8013be8 <HAL_UART_IRQHandler+0x14c>
 8013bdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013be0:	4b5c      	ldr	r3, [pc, #368]	@ (8013d54 <HAL_UART_IRQHandler+0x2b8>)
 8013be2:	4013      	ands	r3, r2
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00b      	beq.n	8013c00 <HAL_UART_IRQHandler+0x164>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2208      	movs	r2, #8
 8013bee:	621a      	str	r2, [r3, #32]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013bf6:	f043 0208 	orr.w	r2, r3, #8
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d012      	beq.n	8013c32 <HAL_UART_IRQHandler+0x196>
 8013c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013c10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00c      	beq.n	8013c32 <HAL_UART_IRQHandler+0x196>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013c20:	621a      	str	r2, [r3, #32]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c28:	f043 0220 	orr.w	r2, r3, #32
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	f000 82dd 	beq.w	80141f8 <HAL_UART_IRQHandler+0x75c>
 8013c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c42:	f003 0320 	and.w	r3, r3, #32
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d013      	beq.n	8013c72 <HAL_UART_IRQHandler+0x1d6>
 8013c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013c4e:	f003 0320 	and.w	r3, r3, #32
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d105      	bne.n	8013c62 <HAL_UART_IRQHandler+0x1c6>
 8013c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d007      	beq.n	8013c72 <HAL_UART_IRQHandler+0x1d6>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d003      	beq.n	8013c72 <HAL_UART_IRQHandler+0x1d6>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	4798      	blx	r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013c86:	2b40      	cmp	r3, #64	@ 0x40
 8013c88:	d005      	beq.n	8013c96 <HAL_UART_IRQHandler+0x1fa>
 8013c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013c8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d054      	beq.n	8013d40 <HAL_UART_IRQHandler+0x2a4>
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f001 fb00 	bl	801529c <UART_EndRxTransfer>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	689b      	ldr	r3, [r3, #8]
 8013ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ca6:	2b40      	cmp	r3, #64	@ 0x40
 8013ca8:	d146      	bne.n	8013d38 <HAL_UART_IRQHandler+0x29c>
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	3308      	adds	r3, #8
 8013cb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013cb8:	e853 3f00 	ldrex	r3, [r3]
 8013cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	3308      	adds	r3, #8
 8013cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8013cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013ce6:	e841 2300 	strex	r3, r2, [r1]
 8013cea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d1d9      	bne.n	8013caa <HAL_UART_IRQHandler+0x20e>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d017      	beq.n	8013d30 <HAL_UART_IRQHandler+0x294>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d06:	4a15      	ldr	r2, [pc, #84]	@ (8013d5c <HAL_UART_IRQHandler+0x2c0>)
 8013d08:	651a      	str	r2, [r3, #80]	@ 0x50
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7f6 fed9 	bl	800aac8 <HAL_DMA_Abort_IT>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d019      	beq.n	8013d50 <HAL_UART_IRQHandler+0x2b4>
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013d2a:	4610      	mov	r0, r2
 8013d2c:	4798      	blx	r3
 8013d2e:	e00f      	b.n	8013d50 <HAL_UART_IRQHandler+0x2b4>
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 fa77 	bl	8014224 <HAL_UART_ErrorCallback>
 8013d36:	e00b      	b.n	8013d50 <HAL_UART_IRQHandler+0x2b4>
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f000 fa73 	bl	8014224 <HAL_UART_ErrorCallback>
 8013d3e:	e007      	b.n	8013d50 <HAL_UART_IRQHandler+0x2b4>
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f000 fa6f 	bl	8014224 <HAL_UART_ErrorCallback>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013d4e:	e253      	b.n	80141f8 <HAL_UART_IRQHandler+0x75c>
 8013d50:	bf00      	nop
 8013d52:	e251      	b.n	80141f8 <HAL_UART_IRQHandler+0x75c>
 8013d54:	10000001 	.word	0x10000001
 8013d58:	04000120 	.word	0x04000120
 8013d5c:	08015369 	.word	0x08015369
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	f040 81e7 	bne.w	8014138 <HAL_UART_IRQHandler+0x69c>
 8013d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d6e:	f003 0310 	and.w	r3, r3, #16
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	f000 81e0 	beq.w	8014138 <HAL_UART_IRQHandler+0x69c>
 8013d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013d7c:	f003 0310 	and.w	r3, r3, #16
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	f000 81d9 	beq.w	8014138 <HAL_UART_IRQHandler+0x69c>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	2210      	movs	r2, #16
 8013d8c:	621a      	str	r2, [r3, #32]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	689b      	ldr	r3, [r3, #8]
 8013d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d98:	2b40      	cmp	r3, #64	@ 0x40
 8013d9a:	f040 8151 	bne.w	8014040 <HAL_UART_IRQHandler+0x5a4>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	4a96      	ldr	r2, [pc, #600]	@ (8014000 <HAL_UART_IRQHandler+0x564>)
 8013da8:	4293      	cmp	r3, r2
 8013daa:	d068      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	4a93      	ldr	r2, [pc, #588]	@ (8014004 <HAL_UART_IRQHandler+0x568>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d061      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	4a91      	ldr	r2, [pc, #580]	@ (8014008 <HAL_UART_IRQHandler+0x56c>)
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d05a      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4a8e      	ldr	r2, [pc, #568]	@ (801400c <HAL_UART_IRQHandler+0x570>)
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	d053      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	4a8c      	ldr	r2, [pc, #560]	@ (8014010 <HAL_UART_IRQHandler+0x574>)
 8013de0:	4293      	cmp	r3, r2
 8013de2:	d04c      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	4a89      	ldr	r2, [pc, #548]	@ (8014014 <HAL_UART_IRQHandler+0x578>)
 8013dee:	4293      	cmp	r3, r2
 8013df0:	d045      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4a87      	ldr	r2, [pc, #540]	@ (8014018 <HAL_UART_IRQHandler+0x57c>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d03e      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	4a84      	ldr	r2, [pc, #528]	@ (801401c <HAL_UART_IRQHandler+0x580>)
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d037      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4a82      	ldr	r2, [pc, #520]	@ (8014020 <HAL_UART_IRQHandler+0x584>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d030      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	4a7f      	ldr	r2, [pc, #508]	@ (8014024 <HAL_UART_IRQHandler+0x588>)
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d029      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	4a7d      	ldr	r2, [pc, #500]	@ (8014028 <HAL_UART_IRQHandler+0x58c>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d022      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	4a7a      	ldr	r2, [pc, #488]	@ (801402c <HAL_UART_IRQHandler+0x590>)
 8013e42:	4293      	cmp	r3, r2
 8013e44:	d01b      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	4a78      	ldr	r2, [pc, #480]	@ (8014030 <HAL_UART_IRQHandler+0x594>)
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d014      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4a75      	ldr	r2, [pc, #468]	@ (8014034 <HAL_UART_IRQHandler+0x598>)
 8013e5e:	4293      	cmp	r3, r2
 8013e60:	d00d      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	4a73      	ldr	r2, [pc, #460]	@ (8014038 <HAL_UART_IRQHandler+0x59c>)
 8013e6c:	4293      	cmp	r3, r2
 8013e6e:	d006      	beq.n	8013e7e <HAL_UART_IRQHandler+0x3e2>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	4a70      	ldr	r2, [pc, #448]	@ (801403c <HAL_UART_IRQHandler+0x5a0>)
 8013e7a:	4293      	cmp	r3, r2
 8013e7c:	d106      	bne.n	8013e8c <HAL_UART_IRQHandler+0x3f0>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	e005      	b.n	8013e98 <HAL_UART_IRQHandler+0x3fc>
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8013e9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	f000 81ab 	beq.w	80141fc <HAL_UART_IRQHandler+0x760>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013eac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	f080 81a3 	bcs.w	80141fc <HAL_UART_IRQHandler+0x760>
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ec6:	69db      	ldr	r3, [r3, #28]
 8013ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ecc:	f000 8087 	beq.w	8013fde <HAL_UART_IRQHandler+0x542>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013edc:	e853 3f00 	ldrex	r3, [r3]
 8013ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013efe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8013f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013f0a:	e841 2300 	strex	r3, r2, [r1]
 8013f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d1da      	bne.n	8013ed0 <HAL_UART_IRQHandler+0x434>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	3308      	adds	r3, #8
 8013f20:	677b      	str	r3, [r7, #116]	@ 0x74
 8013f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013f24:	e853 3f00 	ldrex	r3, [r3]
 8013f28:	673b      	str	r3, [r7, #112]	@ 0x70
 8013f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f2c:	f023 0301 	bic.w	r3, r3, #1
 8013f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	3308      	adds	r3, #8
 8013f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8013f3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8013f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013f4a:	e841 2300 	strex	r3, r2, [r1]
 8013f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1e1      	bne.n	8013f1a <HAL_UART_IRQHandler+0x47e>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	3308      	adds	r3, #8
 8013f5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013f5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013f60:	e853 3f00 	ldrex	r3, [r3]
 8013f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	3308      	adds	r3, #8
 8013f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8013f7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013f7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013f80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013f82:	e841 2300 	strex	r3, r2, [r1]
 8013f86:	667b      	str	r3, [r7, #100]	@ 0x64
 8013f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d1e3      	bne.n	8013f56 <HAL_UART_IRQHandler+0x4ba>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2220      	movs	r2, #32
 8013f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fa4:	e853 3f00 	ldrex	r3, [r3]
 8013fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013fac:	f023 0310 	bic.w	r3, r3, #16
 8013fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	461a      	mov	r2, r3
 8013fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013fc0:	657a      	str	r2, [r7, #84]	@ 0x54
 8013fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013fc6:	e841 2300 	strex	r3, r2, [r1]
 8013fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8013fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d1e4      	bne.n	8013f9c <HAL_UART_IRQHandler+0x500>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7f6 fa57 	bl	800a48c <HAL_DMA_Abort>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2202      	movs	r2, #2
 8013fe2:	671a      	str	r2, [r3, #112]	@ 0x70
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f000 f91d 	bl	8014238 <HAL_UARTEx_RxEventCallback>
 8013ffe:	e0fd      	b.n	80141fc <HAL_UART_IRQHandler+0x760>
 8014000:	40020010 	.word	0x40020010
 8014004:	40020028 	.word	0x40020028
 8014008:	40020040 	.word	0x40020040
 801400c:	40020058 	.word	0x40020058
 8014010:	40020070 	.word	0x40020070
 8014014:	40020088 	.word	0x40020088
 8014018:	400200a0 	.word	0x400200a0
 801401c:	400200b8 	.word	0x400200b8
 8014020:	40020410 	.word	0x40020410
 8014024:	40020428 	.word	0x40020428
 8014028:	40020440 	.word	0x40020440
 801402c:	40020458 	.word	0x40020458
 8014030:	40020470 	.word	0x40020470
 8014034:	40020488 	.word	0x40020488
 8014038:	400204a0 	.word	0x400204a0
 801403c:	400204b8 	.word	0x400204b8
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801404c:	b29b      	uxth	r3, r3
 801404e:	1ad3      	subs	r3, r2, r3
 8014050:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801405a:	b29b      	uxth	r3, r3
 801405c:	2b00      	cmp	r3, #0
 801405e:	f000 80cf 	beq.w	8014200 <HAL_UART_IRQHandler+0x764>
 8014062:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014066:	2b00      	cmp	r3, #0
 8014068:	f000 80ca 	beq.w	8014200 <HAL_UART_IRQHandler+0x764>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014074:	e853 3f00 	ldrex	r3, [r3]
 8014078:	637b      	str	r3, [r7, #52]	@ 0x34
 801407a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801407c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014080:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	461a      	mov	r2, r3
 801408a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801408e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014090:	643a      	str	r2, [r7, #64]	@ 0x40
 8014092:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014096:	e841 2300 	strex	r3, r2, [r1]
 801409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801409c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d1e4      	bne.n	801406c <HAL_UART_IRQHandler+0x5d0>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	3308      	adds	r3, #8
 80140a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80140aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ac:	e853 3f00 	ldrex	r3, [r3]
 80140b0:	623b      	str	r3, [r7, #32]
 80140b2:	6a3a      	ldr	r2, [r7, #32]
 80140b4:	4b55      	ldr	r3, [pc, #340]	@ (801420c <HAL_UART_IRQHandler+0x770>)
 80140b6:	4013      	ands	r3, r2
 80140b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	3308      	adds	r3, #8
 80140c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80140c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80140c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80140ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80140cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140ce:	e841 2300 	strex	r3, r2, [r1]
 80140d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80140d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d1e3      	bne.n	80140a2 <HAL_UART_IRQHandler+0x606>
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2220      	movs	r2, #32
 80140de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2200      	movs	r2, #0
 80140e6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	613b      	str	r3, [r7, #16]
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	e853 3f00 	ldrex	r3, [r3]
 80140fa:	60fb      	str	r3, [r7, #12]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	f023 0310 	bic.w	r3, r3, #16
 8014102:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	461a      	mov	r2, r3
 801410c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014110:	61fb      	str	r3, [r7, #28]
 8014112:	61ba      	str	r2, [r7, #24]
 8014114:	69b9      	ldr	r1, [r7, #24]
 8014116:	69fa      	ldr	r2, [r7, #28]
 8014118:	e841 2300 	strex	r3, r2, [r1]
 801411c:	617b      	str	r3, [r7, #20]
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d1e4      	bne.n	80140ee <HAL_UART_IRQHandler+0x652>
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2202      	movs	r2, #2
 8014128:	671a      	str	r2, [r3, #112]	@ 0x70
 801412a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801412e:	4619      	mov	r1, r3
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f000 f881 	bl	8014238 <HAL_UARTEx_RxEventCallback>
 8014136:	e063      	b.n	8014200 <HAL_UART_IRQHandler+0x764>
 8014138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801413c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014140:	2b00      	cmp	r3, #0
 8014142:	d00e      	beq.n	8014162 <HAL_UART_IRQHandler+0x6c6>
 8014144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801414c:	2b00      	cmp	r3, #0
 801414e:	d008      	beq.n	8014162 <HAL_UART_IRQHandler+0x6c6>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014158:	621a      	str	r2, [r3, #32]
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f001 f945 	bl	80153ea <HAL_UARTEx_WakeupCallback>
 8014160:	e051      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 8014162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801416a:	2b00      	cmp	r3, #0
 801416c:	d014      	beq.n	8014198 <HAL_UART_IRQHandler+0x6fc>
 801416e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014176:	2b00      	cmp	r3, #0
 8014178:	d105      	bne.n	8014186 <HAL_UART_IRQHandler+0x6ea>
 801417a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801417e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014182:	2b00      	cmp	r3, #0
 8014184:	d008      	beq.n	8014198 <HAL_UART_IRQHandler+0x6fc>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801418a:	2b00      	cmp	r3, #0
 801418c:	d03a      	beq.n	8014204 <HAL_UART_IRQHandler+0x768>
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	4798      	blx	r3
 8014196:	e035      	b.n	8014204 <HAL_UART_IRQHandler+0x768>
 8014198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d009      	beq.n	80141b8 <HAL_UART_IRQHandler+0x71c>
 80141a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80141a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d003      	beq.n	80141b8 <HAL_UART_IRQHandler+0x71c>
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f001 f8ef 	bl	8015394 <UART_EndTransmit_IT>
 80141b6:	e026      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 80141b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d009      	beq.n	80141d8 <HAL_UART_IRQHandler+0x73c>
 80141c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80141c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d003      	beq.n	80141d8 <HAL_UART_IRQHandler+0x73c>
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f001 f91e 	bl	8015412 <HAL_UARTEx_TxFifoEmptyCallback>
 80141d6:	e016      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 80141d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d010      	beq.n	8014206 <HAL_UART_IRQHandler+0x76a>
 80141e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	da0c      	bge.n	8014206 <HAL_UART_IRQHandler+0x76a>
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f001 f906 	bl	80153fe <HAL_UARTEx_RxFifoFullCallback>
 80141f2:	e008      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 80141f4:	bf00      	nop
 80141f6:	e006      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 80141f8:	bf00      	nop
 80141fa:	e004      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 80141fc:	bf00      	nop
 80141fe:	e002      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 8014200:	bf00      	nop
 8014202:	e000      	b.n	8014206 <HAL_UART_IRQHandler+0x76a>
 8014204:	bf00      	nop
 8014206:	37e8      	adds	r7, #232	@ 0xe8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	effffffe 	.word	0xeffffffe

08014210 <HAL_UART_TxCpltCallback>:
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	bf00      	nop
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <HAL_UART_ErrorCallback>:
 8014224:	b480      	push	{r7}
 8014226:	b083      	sub	sp, #12
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	bf00      	nop
 801422e:	370c      	adds	r7, #12
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr

08014238 <HAL_UARTEx_RxEventCallback>:
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	460b      	mov	r3, r1
 8014242:	807b      	strh	r3, [r7, #2]
 8014244:	bf00      	nop
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <UART_SetConfig>:
 8014250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014254:	b092      	sub	sp, #72	@ 0x48
 8014256:	af00      	add	r7, sp, #0
 8014258:	6178      	str	r0, [r7, #20]
 801425a:	2300      	movs	r3, #0
 801425c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	689a      	ldr	r2, [r3, #8]
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	691b      	ldr	r3, [r3, #16]
 8014268:	431a      	orrs	r2, r3
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	695b      	ldr	r3, [r3, #20]
 801426e:	431a      	orrs	r2, r3
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	69db      	ldr	r3, [r3, #28]
 8014274:	4313      	orrs	r3, r2
 8014276:	647b      	str	r3, [r7, #68]	@ 0x44
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	681a      	ldr	r2, [r3, #0]
 801427e:	4bbe      	ldr	r3, [pc, #760]	@ (8014578 <UART_SetConfig+0x328>)
 8014280:	4013      	ands	r3, r2
 8014282:	697a      	ldr	r2, [r7, #20]
 8014284:	6812      	ldr	r2, [r2, #0]
 8014286:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014288:	430b      	orrs	r3, r1
 801428a:	6013      	str	r3, [r2, #0]
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	685b      	ldr	r3, [r3, #4]
 8014292:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	68da      	ldr	r2, [r3, #12]
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	430a      	orrs	r2, r1
 80142a0:	605a      	str	r2, [r3, #4]
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	699b      	ldr	r3, [r3, #24]
 80142a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	4ab3      	ldr	r2, [pc, #716]	@ (801457c <UART_SetConfig+0x32c>)
 80142ae:	4293      	cmp	r3, r2
 80142b0:	d004      	beq.n	80142bc <UART_SetConfig+0x6c>
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	6a1b      	ldr	r3, [r3, #32]
 80142b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80142b8:	4313      	orrs	r3, r2
 80142ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	689a      	ldr	r2, [r3, #8]
 80142c2:	4baf      	ldr	r3, [pc, #700]	@ (8014580 <UART_SetConfig+0x330>)
 80142c4:	4013      	ands	r3, r2
 80142c6:	697a      	ldr	r2, [r7, #20]
 80142c8:	6812      	ldr	r2, [r2, #0]
 80142ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80142cc:	430b      	orrs	r3, r1
 80142ce:	6093      	str	r3, [r2, #8]
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142d6:	f023 010f 	bic.w	r1, r3, #15
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	430a      	orrs	r2, r1
 80142e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	4aa6      	ldr	r2, [pc, #664]	@ (8014584 <UART_SetConfig+0x334>)
 80142ec:	4293      	cmp	r3, r2
 80142ee:	d177      	bne.n	80143e0 <UART_SetConfig+0x190>
 80142f0:	4ba5      	ldr	r3, [pc, #660]	@ (8014588 <UART_SetConfig+0x338>)
 80142f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80142f8:	2b28      	cmp	r3, #40	@ 0x28
 80142fa:	d86d      	bhi.n	80143d8 <UART_SetConfig+0x188>
 80142fc:	a201      	add	r2, pc, #4	@ (adr r2, 8014304 <UART_SetConfig+0xb4>)
 80142fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014302:	bf00      	nop
 8014304:	080143a9 	.word	0x080143a9
 8014308:	080143d9 	.word	0x080143d9
 801430c:	080143d9 	.word	0x080143d9
 8014310:	080143d9 	.word	0x080143d9
 8014314:	080143d9 	.word	0x080143d9
 8014318:	080143d9 	.word	0x080143d9
 801431c:	080143d9 	.word	0x080143d9
 8014320:	080143d9 	.word	0x080143d9
 8014324:	080143b1 	.word	0x080143b1
 8014328:	080143d9 	.word	0x080143d9
 801432c:	080143d9 	.word	0x080143d9
 8014330:	080143d9 	.word	0x080143d9
 8014334:	080143d9 	.word	0x080143d9
 8014338:	080143d9 	.word	0x080143d9
 801433c:	080143d9 	.word	0x080143d9
 8014340:	080143d9 	.word	0x080143d9
 8014344:	080143b9 	.word	0x080143b9
 8014348:	080143d9 	.word	0x080143d9
 801434c:	080143d9 	.word	0x080143d9
 8014350:	080143d9 	.word	0x080143d9
 8014354:	080143d9 	.word	0x080143d9
 8014358:	080143d9 	.word	0x080143d9
 801435c:	080143d9 	.word	0x080143d9
 8014360:	080143d9 	.word	0x080143d9
 8014364:	080143c1 	.word	0x080143c1
 8014368:	080143d9 	.word	0x080143d9
 801436c:	080143d9 	.word	0x080143d9
 8014370:	080143d9 	.word	0x080143d9
 8014374:	080143d9 	.word	0x080143d9
 8014378:	080143d9 	.word	0x080143d9
 801437c:	080143d9 	.word	0x080143d9
 8014380:	080143d9 	.word	0x080143d9
 8014384:	080143c9 	.word	0x080143c9
 8014388:	080143d9 	.word	0x080143d9
 801438c:	080143d9 	.word	0x080143d9
 8014390:	080143d9 	.word	0x080143d9
 8014394:	080143d9 	.word	0x080143d9
 8014398:	080143d9 	.word	0x080143d9
 801439c:	080143d9 	.word	0x080143d9
 80143a0:	080143d9 	.word	0x080143d9
 80143a4:	080143d1 	.word	0x080143d1
 80143a8:	2301      	movs	r3, #1
 80143aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143ae:	e326      	b.n	80149fe <UART_SetConfig+0x7ae>
 80143b0:	2304      	movs	r3, #4
 80143b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143b6:	e322      	b.n	80149fe <UART_SetConfig+0x7ae>
 80143b8:	2308      	movs	r3, #8
 80143ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143be:	e31e      	b.n	80149fe <UART_SetConfig+0x7ae>
 80143c0:	2310      	movs	r3, #16
 80143c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143c6:	e31a      	b.n	80149fe <UART_SetConfig+0x7ae>
 80143c8:	2320      	movs	r3, #32
 80143ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143ce:	e316      	b.n	80149fe <UART_SetConfig+0x7ae>
 80143d0:	2340      	movs	r3, #64	@ 0x40
 80143d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143d6:	e312      	b.n	80149fe <UART_SetConfig+0x7ae>
 80143d8:	2380      	movs	r3, #128	@ 0x80
 80143da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143de:	e30e      	b.n	80149fe <UART_SetConfig+0x7ae>
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	4a69      	ldr	r2, [pc, #420]	@ (801458c <UART_SetConfig+0x33c>)
 80143e6:	4293      	cmp	r3, r2
 80143e8:	d130      	bne.n	801444c <UART_SetConfig+0x1fc>
 80143ea:	4b67      	ldr	r3, [pc, #412]	@ (8014588 <UART_SetConfig+0x338>)
 80143ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80143ee:	f003 0307 	and.w	r3, r3, #7
 80143f2:	2b05      	cmp	r3, #5
 80143f4:	d826      	bhi.n	8014444 <UART_SetConfig+0x1f4>
 80143f6:	a201      	add	r2, pc, #4	@ (adr r2, 80143fc <UART_SetConfig+0x1ac>)
 80143f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143fc:	08014415 	.word	0x08014415
 8014400:	0801441d 	.word	0x0801441d
 8014404:	08014425 	.word	0x08014425
 8014408:	0801442d 	.word	0x0801442d
 801440c:	08014435 	.word	0x08014435
 8014410:	0801443d 	.word	0x0801443d
 8014414:	2300      	movs	r3, #0
 8014416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801441a:	e2f0      	b.n	80149fe <UART_SetConfig+0x7ae>
 801441c:	2304      	movs	r3, #4
 801441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014422:	e2ec      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014424:	2308      	movs	r3, #8
 8014426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801442a:	e2e8      	b.n	80149fe <UART_SetConfig+0x7ae>
 801442c:	2310      	movs	r3, #16
 801442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014432:	e2e4      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014434:	2320      	movs	r3, #32
 8014436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801443a:	e2e0      	b.n	80149fe <UART_SetConfig+0x7ae>
 801443c:	2340      	movs	r3, #64	@ 0x40
 801443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014442:	e2dc      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014444:	2380      	movs	r3, #128	@ 0x80
 8014446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801444a:	e2d8      	b.n	80149fe <UART_SetConfig+0x7ae>
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	4a4f      	ldr	r2, [pc, #316]	@ (8014590 <UART_SetConfig+0x340>)
 8014452:	4293      	cmp	r3, r2
 8014454:	d130      	bne.n	80144b8 <UART_SetConfig+0x268>
 8014456:	4b4c      	ldr	r3, [pc, #304]	@ (8014588 <UART_SetConfig+0x338>)
 8014458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801445a:	f003 0307 	and.w	r3, r3, #7
 801445e:	2b05      	cmp	r3, #5
 8014460:	d826      	bhi.n	80144b0 <UART_SetConfig+0x260>
 8014462:	a201      	add	r2, pc, #4	@ (adr r2, 8014468 <UART_SetConfig+0x218>)
 8014464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014468:	08014481 	.word	0x08014481
 801446c:	08014489 	.word	0x08014489
 8014470:	08014491 	.word	0x08014491
 8014474:	08014499 	.word	0x08014499
 8014478:	080144a1 	.word	0x080144a1
 801447c:	080144a9 	.word	0x080144a9
 8014480:	2300      	movs	r3, #0
 8014482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014486:	e2ba      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014488:	2304      	movs	r3, #4
 801448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801448e:	e2b6      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014490:	2308      	movs	r3, #8
 8014492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014496:	e2b2      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014498:	2310      	movs	r3, #16
 801449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801449e:	e2ae      	b.n	80149fe <UART_SetConfig+0x7ae>
 80144a0:	2320      	movs	r3, #32
 80144a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144a6:	e2aa      	b.n	80149fe <UART_SetConfig+0x7ae>
 80144a8:	2340      	movs	r3, #64	@ 0x40
 80144aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144ae:	e2a6      	b.n	80149fe <UART_SetConfig+0x7ae>
 80144b0:	2380      	movs	r3, #128	@ 0x80
 80144b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144b6:	e2a2      	b.n	80149fe <UART_SetConfig+0x7ae>
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4a35      	ldr	r2, [pc, #212]	@ (8014594 <UART_SetConfig+0x344>)
 80144be:	4293      	cmp	r3, r2
 80144c0:	d130      	bne.n	8014524 <UART_SetConfig+0x2d4>
 80144c2:	4b31      	ldr	r3, [pc, #196]	@ (8014588 <UART_SetConfig+0x338>)
 80144c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144c6:	f003 0307 	and.w	r3, r3, #7
 80144ca:	2b05      	cmp	r3, #5
 80144cc:	d826      	bhi.n	801451c <UART_SetConfig+0x2cc>
 80144ce:	a201      	add	r2, pc, #4	@ (adr r2, 80144d4 <UART_SetConfig+0x284>)
 80144d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144d4:	080144ed 	.word	0x080144ed
 80144d8:	080144f5 	.word	0x080144f5
 80144dc:	080144fd 	.word	0x080144fd
 80144e0:	08014505 	.word	0x08014505
 80144e4:	0801450d 	.word	0x0801450d
 80144e8:	08014515 	.word	0x08014515
 80144ec:	2300      	movs	r3, #0
 80144ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144f2:	e284      	b.n	80149fe <UART_SetConfig+0x7ae>
 80144f4:	2304      	movs	r3, #4
 80144f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144fa:	e280      	b.n	80149fe <UART_SetConfig+0x7ae>
 80144fc:	2308      	movs	r3, #8
 80144fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014502:	e27c      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014504:	2310      	movs	r3, #16
 8014506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801450a:	e278      	b.n	80149fe <UART_SetConfig+0x7ae>
 801450c:	2320      	movs	r3, #32
 801450e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014512:	e274      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014514:	2340      	movs	r3, #64	@ 0x40
 8014516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801451a:	e270      	b.n	80149fe <UART_SetConfig+0x7ae>
 801451c:	2380      	movs	r3, #128	@ 0x80
 801451e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014522:	e26c      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4a1b      	ldr	r2, [pc, #108]	@ (8014598 <UART_SetConfig+0x348>)
 801452a:	4293      	cmp	r3, r2
 801452c:	d142      	bne.n	80145b4 <UART_SetConfig+0x364>
 801452e:	4b16      	ldr	r3, [pc, #88]	@ (8014588 <UART_SetConfig+0x338>)
 8014530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014532:	f003 0307 	and.w	r3, r3, #7
 8014536:	2b05      	cmp	r3, #5
 8014538:	d838      	bhi.n	80145ac <UART_SetConfig+0x35c>
 801453a:	a201      	add	r2, pc, #4	@ (adr r2, 8014540 <UART_SetConfig+0x2f0>)
 801453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014540:	08014559 	.word	0x08014559
 8014544:	08014561 	.word	0x08014561
 8014548:	08014569 	.word	0x08014569
 801454c:	08014571 	.word	0x08014571
 8014550:	0801459d 	.word	0x0801459d
 8014554:	080145a5 	.word	0x080145a5
 8014558:	2300      	movs	r3, #0
 801455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801455e:	e24e      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014560:	2304      	movs	r3, #4
 8014562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014566:	e24a      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014568:	2308      	movs	r3, #8
 801456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801456e:	e246      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014570:	2310      	movs	r3, #16
 8014572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014576:	e242      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014578:	cfff69f3 	.word	0xcfff69f3
 801457c:	58000c00 	.word	0x58000c00
 8014580:	11fff4ff 	.word	0x11fff4ff
 8014584:	40011000 	.word	0x40011000
 8014588:	58024400 	.word	0x58024400
 801458c:	40004400 	.word	0x40004400
 8014590:	40004800 	.word	0x40004800
 8014594:	40004c00 	.word	0x40004c00
 8014598:	40005000 	.word	0x40005000
 801459c:	2320      	movs	r3, #32
 801459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145a2:	e22c      	b.n	80149fe <UART_SetConfig+0x7ae>
 80145a4:	2340      	movs	r3, #64	@ 0x40
 80145a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145aa:	e228      	b.n	80149fe <UART_SetConfig+0x7ae>
 80145ac:	2380      	movs	r3, #128	@ 0x80
 80145ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145b2:	e224      	b.n	80149fe <UART_SetConfig+0x7ae>
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	4ab1      	ldr	r2, [pc, #708]	@ (8014880 <UART_SetConfig+0x630>)
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d176      	bne.n	80146ac <UART_SetConfig+0x45c>
 80145be:	4bb1      	ldr	r3, [pc, #708]	@ (8014884 <UART_SetConfig+0x634>)
 80145c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80145c6:	2b28      	cmp	r3, #40	@ 0x28
 80145c8:	d86c      	bhi.n	80146a4 <UART_SetConfig+0x454>
 80145ca:	a201      	add	r2, pc, #4	@ (adr r2, 80145d0 <UART_SetConfig+0x380>)
 80145cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145d0:	08014675 	.word	0x08014675
 80145d4:	080146a5 	.word	0x080146a5
 80145d8:	080146a5 	.word	0x080146a5
 80145dc:	080146a5 	.word	0x080146a5
 80145e0:	080146a5 	.word	0x080146a5
 80145e4:	080146a5 	.word	0x080146a5
 80145e8:	080146a5 	.word	0x080146a5
 80145ec:	080146a5 	.word	0x080146a5
 80145f0:	0801467d 	.word	0x0801467d
 80145f4:	080146a5 	.word	0x080146a5
 80145f8:	080146a5 	.word	0x080146a5
 80145fc:	080146a5 	.word	0x080146a5
 8014600:	080146a5 	.word	0x080146a5
 8014604:	080146a5 	.word	0x080146a5
 8014608:	080146a5 	.word	0x080146a5
 801460c:	080146a5 	.word	0x080146a5
 8014610:	08014685 	.word	0x08014685
 8014614:	080146a5 	.word	0x080146a5
 8014618:	080146a5 	.word	0x080146a5
 801461c:	080146a5 	.word	0x080146a5
 8014620:	080146a5 	.word	0x080146a5
 8014624:	080146a5 	.word	0x080146a5
 8014628:	080146a5 	.word	0x080146a5
 801462c:	080146a5 	.word	0x080146a5
 8014630:	0801468d 	.word	0x0801468d
 8014634:	080146a5 	.word	0x080146a5
 8014638:	080146a5 	.word	0x080146a5
 801463c:	080146a5 	.word	0x080146a5
 8014640:	080146a5 	.word	0x080146a5
 8014644:	080146a5 	.word	0x080146a5
 8014648:	080146a5 	.word	0x080146a5
 801464c:	080146a5 	.word	0x080146a5
 8014650:	08014695 	.word	0x08014695
 8014654:	080146a5 	.word	0x080146a5
 8014658:	080146a5 	.word	0x080146a5
 801465c:	080146a5 	.word	0x080146a5
 8014660:	080146a5 	.word	0x080146a5
 8014664:	080146a5 	.word	0x080146a5
 8014668:	080146a5 	.word	0x080146a5
 801466c:	080146a5 	.word	0x080146a5
 8014670:	0801469d 	.word	0x0801469d
 8014674:	2301      	movs	r3, #1
 8014676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801467a:	e1c0      	b.n	80149fe <UART_SetConfig+0x7ae>
 801467c:	2304      	movs	r3, #4
 801467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014682:	e1bc      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014684:	2308      	movs	r3, #8
 8014686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801468a:	e1b8      	b.n	80149fe <UART_SetConfig+0x7ae>
 801468c:	2310      	movs	r3, #16
 801468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014692:	e1b4      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014694:	2320      	movs	r3, #32
 8014696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801469a:	e1b0      	b.n	80149fe <UART_SetConfig+0x7ae>
 801469c:	2340      	movs	r3, #64	@ 0x40
 801469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146a2:	e1ac      	b.n	80149fe <UART_SetConfig+0x7ae>
 80146a4:	2380      	movs	r3, #128	@ 0x80
 80146a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146aa:	e1a8      	b.n	80149fe <UART_SetConfig+0x7ae>
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	4a75      	ldr	r2, [pc, #468]	@ (8014888 <UART_SetConfig+0x638>)
 80146b2:	4293      	cmp	r3, r2
 80146b4:	d130      	bne.n	8014718 <UART_SetConfig+0x4c8>
 80146b6:	4b73      	ldr	r3, [pc, #460]	@ (8014884 <UART_SetConfig+0x634>)
 80146b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146ba:	f003 0307 	and.w	r3, r3, #7
 80146be:	2b05      	cmp	r3, #5
 80146c0:	d826      	bhi.n	8014710 <UART_SetConfig+0x4c0>
 80146c2:	a201      	add	r2, pc, #4	@ (adr r2, 80146c8 <UART_SetConfig+0x478>)
 80146c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146c8:	080146e1 	.word	0x080146e1
 80146cc:	080146e9 	.word	0x080146e9
 80146d0:	080146f1 	.word	0x080146f1
 80146d4:	080146f9 	.word	0x080146f9
 80146d8:	08014701 	.word	0x08014701
 80146dc:	08014709 	.word	0x08014709
 80146e0:	2300      	movs	r3, #0
 80146e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146e6:	e18a      	b.n	80149fe <UART_SetConfig+0x7ae>
 80146e8:	2304      	movs	r3, #4
 80146ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146ee:	e186      	b.n	80149fe <UART_SetConfig+0x7ae>
 80146f0:	2308      	movs	r3, #8
 80146f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146f6:	e182      	b.n	80149fe <UART_SetConfig+0x7ae>
 80146f8:	2310      	movs	r3, #16
 80146fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146fe:	e17e      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014700:	2320      	movs	r3, #32
 8014702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014706:	e17a      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014708:	2340      	movs	r3, #64	@ 0x40
 801470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801470e:	e176      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014710:	2380      	movs	r3, #128	@ 0x80
 8014712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014716:	e172      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	4a5b      	ldr	r2, [pc, #364]	@ (801488c <UART_SetConfig+0x63c>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d130      	bne.n	8014784 <UART_SetConfig+0x534>
 8014722:	4b58      	ldr	r3, [pc, #352]	@ (8014884 <UART_SetConfig+0x634>)
 8014724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014726:	f003 0307 	and.w	r3, r3, #7
 801472a:	2b05      	cmp	r3, #5
 801472c:	d826      	bhi.n	801477c <UART_SetConfig+0x52c>
 801472e:	a201      	add	r2, pc, #4	@ (adr r2, 8014734 <UART_SetConfig+0x4e4>)
 8014730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014734:	0801474d 	.word	0x0801474d
 8014738:	08014755 	.word	0x08014755
 801473c:	0801475d 	.word	0x0801475d
 8014740:	08014765 	.word	0x08014765
 8014744:	0801476d 	.word	0x0801476d
 8014748:	08014775 	.word	0x08014775
 801474c:	2300      	movs	r3, #0
 801474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014752:	e154      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014754:	2304      	movs	r3, #4
 8014756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801475a:	e150      	b.n	80149fe <UART_SetConfig+0x7ae>
 801475c:	2308      	movs	r3, #8
 801475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014762:	e14c      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014764:	2310      	movs	r3, #16
 8014766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801476a:	e148      	b.n	80149fe <UART_SetConfig+0x7ae>
 801476c:	2320      	movs	r3, #32
 801476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014772:	e144      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014774:	2340      	movs	r3, #64	@ 0x40
 8014776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801477a:	e140      	b.n	80149fe <UART_SetConfig+0x7ae>
 801477c:	2380      	movs	r3, #128	@ 0x80
 801477e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014782:	e13c      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	4a41      	ldr	r2, [pc, #260]	@ (8014890 <UART_SetConfig+0x640>)
 801478a:	4293      	cmp	r3, r2
 801478c:	f040 8082 	bne.w	8014894 <UART_SetConfig+0x644>
 8014790:	4b3c      	ldr	r3, [pc, #240]	@ (8014884 <UART_SetConfig+0x634>)
 8014792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014794:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014798:	2b28      	cmp	r3, #40	@ 0x28
 801479a:	d86d      	bhi.n	8014878 <UART_SetConfig+0x628>
 801479c:	a201      	add	r2, pc, #4	@ (adr r2, 80147a4 <UART_SetConfig+0x554>)
 801479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147a2:	bf00      	nop
 80147a4:	08014849 	.word	0x08014849
 80147a8:	08014879 	.word	0x08014879
 80147ac:	08014879 	.word	0x08014879
 80147b0:	08014879 	.word	0x08014879
 80147b4:	08014879 	.word	0x08014879
 80147b8:	08014879 	.word	0x08014879
 80147bc:	08014879 	.word	0x08014879
 80147c0:	08014879 	.word	0x08014879
 80147c4:	08014851 	.word	0x08014851
 80147c8:	08014879 	.word	0x08014879
 80147cc:	08014879 	.word	0x08014879
 80147d0:	08014879 	.word	0x08014879
 80147d4:	08014879 	.word	0x08014879
 80147d8:	08014879 	.word	0x08014879
 80147dc:	08014879 	.word	0x08014879
 80147e0:	08014879 	.word	0x08014879
 80147e4:	08014859 	.word	0x08014859
 80147e8:	08014879 	.word	0x08014879
 80147ec:	08014879 	.word	0x08014879
 80147f0:	08014879 	.word	0x08014879
 80147f4:	08014879 	.word	0x08014879
 80147f8:	08014879 	.word	0x08014879
 80147fc:	08014879 	.word	0x08014879
 8014800:	08014879 	.word	0x08014879
 8014804:	08014861 	.word	0x08014861
 8014808:	08014879 	.word	0x08014879
 801480c:	08014879 	.word	0x08014879
 8014810:	08014879 	.word	0x08014879
 8014814:	08014879 	.word	0x08014879
 8014818:	08014879 	.word	0x08014879
 801481c:	08014879 	.word	0x08014879
 8014820:	08014879 	.word	0x08014879
 8014824:	08014869 	.word	0x08014869
 8014828:	08014879 	.word	0x08014879
 801482c:	08014879 	.word	0x08014879
 8014830:	08014879 	.word	0x08014879
 8014834:	08014879 	.word	0x08014879
 8014838:	08014879 	.word	0x08014879
 801483c:	08014879 	.word	0x08014879
 8014840:	08014879 	.word	0x08014879
 8014844:	08014871 	.word	0x08014871
 8014848:	2301      	movs	r3, #1
 801484a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801484e:	e0d6      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014850:	2304      	movs	r3, #4
 8014852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014856:	e0d2      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014858:	2308      	movs	r3, #8
 801485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801485e:	e0ce      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014860:	2310      	movs	r3, #16
 8014862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014866:	e0ca      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014868:	2320      	movs	r3, #32
 801486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801486e:	e0c6      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014870:	2340      	movs	r3, #64	@ 0x40
 8014872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014876:	e0c2      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014878:	2380      	movs	r3, #128	@ 0x80
 801487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801487e:	e0be      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014880:	40011400 	.word	0x40011400
 8014884:	58024400 	.word	0x58024400
 8014888:	40007800 	.word	0x40007800
 801488c:	40007c00 	.word	0x40007c00
 8014890:	40011800 	.word	0x40011800
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	4aad      	ldr	r2, [pc, #692]	@ (8014b50 <UART_SetConfig+0x900>)
 801489a:	4293      	cmp	r3, r2
 801489c:	d176      	bne.n	801498c <UART_SetConfig+0x73c>
 801489e:	4bad      	ldr	r3, [pc, #692]	@ (8014b54 <UART_SetConfig+0x904>)
 80148a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80148a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80148a6:	2b28      	cmp	r3, #40	@ 0x28
 80148a8:	d86c      	bhi.n	8014984 <UART_SetConfig+0x734>
 80148aa:	a201      	add	r2, pc, #4	@ (adr r2, 80148b0 <UART_SetConfig+0x660>)
 80148ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148b0:	08014955 	.word	0x08014955
 80148b4:	08014985 	.word	0x08014985
 80148b8:	08014985 	.word	0x08014985
 80148bc:	08014985 	.word	0x08014985
 80148c0:	08014985 	.word	0x08014985
 80148c4:	08014985 	.word	0x08014985
 80148c8:	08014985 	.word	0x08014985
 80148cc:	08014985 	.word	0x08014985
 80148d0:	0801495d 	.word	0x0801495d
 80148d4:	08014985 	.word	0x08014985
 80148d8:	08014985 	.word	0x08014985
 80148dc:	08014985 	.word	0x08014985
 80148e0:	08014985 	.word	0x08014985
 80148e4:	08014985 	.word	0x08014985
 80148e8:	08014985 	.word	0x08014985
 80148ec:	08014985 	.word	0x08014985
 80148f0:	08014965 	.word	0x08014965
 80148f4:	08014985 	.word	0x08014985
 80148f8:	08014985 	.word	0x08014985
 80148fc:	08014985 	.word	0x08014985
 8014900:	08014985 	.word	0x08014985
 8014904:	08014985 	.word	0x08014985
 8014908:	08014985 	.word	0x08014985
 801490c:	08014985 	.word	0x08014985
 8014910:	0801496d 	.word	0x0801496d
 8014914:	08014985 	.word	0x08014985
 8014918:	08014985 	.word	0x08014985
 801491c:	08014985 	.word	0x08014985
 8014920:	08014985 	.word	0x08014985
 8014924:	08014985 	.word	0x08014985
 8014928:	08014985 	.word	0x08014985
 801492c:	08014985 	.word	0x08014985
 8014930:	08014975 	.word	0x08014975
 8014934:	08014985 	.word	0x08014985
 8014938:	08014985 	.word	0x08014985
 801493c:	08014985 	.word	0x08014985
 8014940:	08014985 	.word	0x08014985
 8014944:	08014985 	.word	0x08014985
 8014948:	08014985 	.word	0x08014985
 801494c:	08014985 	.word	0x08014985
 8014950:	0801497d 	.word	0x0801497d
 8014954:	2301      	movs	r3, #1
 8014956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801495a:	e050      	b.n	80149fe <UART_SetConfig+0x7ae>
 801495c:	2304      	movs	r3, #4
 801495e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014962:	e04c      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014964:	2308      	movs	r3, #8
 8014966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801496a:	e048      	b.n	80149fe <UART_SetConfig+0x7ae>
 801496c:	2310      	movs	r3, #16
 801496e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014972:	e044      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014974:	2320      	movs	r3, #32
 8014976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801497a:	e040      	b.n	80149fe <UART_SetConfig+0x7ae>
 801497c:	2340      	movs	r3, #64	@ 0x40
 801497e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014982:	e03c      	b.n	80149fe <UART_SetConfig+0x7ae>
 8014984:	2380      	movs	r3, #128	@ 0x80
 8014986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801498a:	e038      	b.n	80149fe <UART_SetConfig+0x7ae>
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	4a71      	ldr	r2, [pc, #452]	@ (8014b58 <UART_SetConfig+0x908>)
 8014992:	4293      	cmp	r3, r2
 8014994:	d130      	bne.n	80149f8 <UART_SetConfig+0x7a8>
 8014996:	4b6f      	ldr	r3, [pc, #444]	@ (8014b54 <UART_SetConfig+0x904>)
 8014998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801499a:	f003 0307 	and.w	r3, r3, #7
 801499e:	2b05      	cmp	r3, #5
 80149a0:	d826      	bhi.n	80149f0 <UART_SetConfig+0x7a0>
 80149a2:	a201      	add	r2, pc, #4	@ (adr r2, 80149a8 <UART_SetConfig+0x758>)
 80149a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a8:	080149c1 	.word	0x080149c1
 80149ac:	080149c9 	.word	0x080149c9
 80149b0:	080149d1 	.word	0x080149d1
 80149b4:	080149d9 	.word	0x080149d9
 80149b8:	080149e1 	.word	0x080149e1
 80149bc:	080149e9 	.word	0x080149e9
 80149c0:	2302      	movs	r3, #2
 80149c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149c6:	e01a      	b.n	80149fe <UART_SetConfig+0x7ae>
 80149c8:	2304      	movs	r3, #4
 80149ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149ce:	e016      	b.n	80149fe <UART_SetConfig+0x7ae>
 80149d0:	2308      	movs	r3, #8
 80149d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149d6:	e012      	b.n	80149fe <UART_SetConfig+0x7ae>
 80149d8:	2310      	movs	r3, #16
 80149da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149de:	e00e      	b.n	80149fe <UART_SetConfig+0x7ae>
 80149e0:	2320      	movs	r3, #32
 80149e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149e6:	e00a      	b.n	80149fe <UART_SetConfig+0x7ae>
 80149e8:	2340      	movs	r3, #64	@ 0x40
 80149ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149ee:	e006      	b.n	80149fe <UART_SetConfig+0x7ae>
 80149f0:	2380      	movs	r3, #128	@ 0x80
 80149f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149f6:	e002      	b.n	80149fe <UART_SetConfig+0x7ae>
 80149f8:	2380      	movs	r3, #128	@ 0x80
 80149fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	4a55      	ldr	r2, [pc, #340]	@ (8014b58 <UART_SetConfig+0x908>)
 8014a04:	4293      	cmp	r3, r2
 8014a06:	f040 80f8 	bne.w	8014bfa <UART_SetConfig+0x9aa>
 8014a0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014a0e:	2b20      	cmp	r3, #32
 8014a10:	dc46      	bgt.n	8014aa0 <UART_SetConfig+0x850>
 8014a12:	2b02      	cmp	r3, #2
 8014a14:	db75      	blt.n	8014b02 <UART_SetConfig+0x8b2>
 8014a16:	3b02      	subs	r3, #2
 8014a18:	2b1e      	cmp	r3, #30
 8014a1a:	d872      	bhi.n	8014b02 <UART_SetConfig+0x8b2>
 8014a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8014a24 <UART_SetConfig+0x7d4>)
 8014a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a22:	bf00      	nop
 8014a24:	08014aa7 	.word	0x08014aa7
 8014a28:	08014b03 	.word	0x08014b03
 8014a2c:	08014aaf 	.word	0x08014aaf
 8014a30:	08014b03 	.word	0x08014b03
 8014a34:	08014b03 	.word	0x08014b03
 8014a38:	08014b03 	.word	0x08014b03
 8014a3c:	08014abf 	.word	0x08014abf
 8014a40:	08014b03 	.word	0x08014b03
 8014a44:	08014b03 	.word	0x08014b03
 8014a48:	08014b03 	.word	0x08014b03
 8014a4c:	08014b03 	.word	0x08014b03
 8014a50:	08014b03 	.word	0x08014b03
 8014a54:	08014b03 	.word	0x08014b03
 8014a58:	08014b03 	.word	0x08014b03
 8014a5c:	08014acf 	.word	0x08014acf
 8014a60:	08014b03 	.word	0x08014b03
 8014a64:	08014b03 	.word	0x08014b03
 8014a68:	08014b03 	.word	0x08014b03
 8014a6c:	08014b03 	.word	0x08014b03
 8014a70:	08014b03 	.word	0x08014b03
 8014a74:	08014b03 	.word	0x08014b03
 8014a78:	08014b03 	.word	0x08014b03
 8014a7c:	08014b03 	.word	0x08014b03
 8014a80:	08014b03 	.word	0x08014b03
 8014a84:	08014b03 	.word	0x08014b03
 8014a88:	08014b03 	.word	0x08014b03
 8014a8c:	08014b03 	.word	0x08014b03
 8014a90:	08014b03 	.word	0x08014b03
 8014a94:	08014b03 	.word	0x08014b03
 8014a98:	08014b03 	.word	0x08014b03
 8014a9c:	08014af5 	.word	0x08014af5
 8014aa0:	2b40      	cmp	r3, #64	@ 0x40
 8014aa2:	d02a      	beq.n	8014afa <UART_SetConfig+0x8aa>
 8014aa4:	e02d      	b.n	8014b02 <UART_SetConfig+0x8b2>
 8014aa6:	f7fa ff45 	bl	800f934 <HAL_RCCEx_GetD3PCLK1Freq>
 8014aaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014aac:	e02f      	b.n	8014b0e <UART_SetConfig+0x8be>
 8014aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fa ff54 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 8014ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014abc:	e027      	b.n	8014b0e <UART_SetConfig+0x8be>
 8014abe:	f107 0318 	add.w	r3, r7, #24
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fb f8a0 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014acc:	e01f      	b.n	8014b0e <UART_SetConfig+0x8be>
 8014ace:	4b21      	ldr	r3, [pc, #132]	@ (8014b54 <UART_SetConfig+0x904>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f003 0320 	and.w	r3, r3, #32
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d009      	beq.n	8014aee <UART_SetConfig+0x89e>
 8014ada:	4b1e      	ldr	r3, [pc, #120]	@ (8014b54 <UART_SetConfig+0x904>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	08db      	lsrs	r3, r3, #3
 8014ae0:	f003 0303 	and.w	r3, r3, #3
 8014ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8014b5c <UART_SetConfig+0x90c>)
 8014ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8014aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014aec:	e00f      	b.n	8014b0e <UART_SetConfig+0x8be>
 8014aee:	4b1b      	ldr	r3, [pc, #108]	@ (8014b5c <UART_SetConfig+0x90c>)
 8014af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014af2:	e00c      	b.n	8014b0e <UART_SetConfig+0x8be>
 8014af4:	4b1a      	ldr	r3, [pc, #104]	@ (8014b60 <UART_SetConfig+0x910>)
 8014af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014af8:	e009      	b.n	8014b0e <UART_SetConfig+0x8be>
 8014afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b00:	e005      	b.n	8014b0e <UART_SetConfig+0x8be>
 8014b02:	2300      	movs	r3, #0
 8014b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b06:	2301      	movs	r3, #1
 8014b08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014b0c:	bf00      	nop
 8014b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	f000 81ee 	beq.w	8014ef2 <UART_SetConfig+0xca2>
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b1a:	4a12      	ldr	r2, [pc, #72]	@ (8014b64 <UART_SetConfig+0x914>)
 8014b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b20:	461a      	mov	r2, r3
 8014b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	685a      	ldr	r2, [r3, #4]
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d305      	bcc.n	8014b46 <UART_SetConfig+0x8f6>
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	031b      	lsls	r3, r3, #12
 8014b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d910      	bls.n	8014b68 <UART_SetConfig+0x918>
 8014b46:	2301      	movs	r3, #1
 8014b48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014b4c:	e1d1      	b.n	8014ef2 <UART_SetConfig+0xca2>
 8014b4e:	bf00      	nop
 8014b50:	40011c00 	.word	0x40011c00
 8014b54:	58024400 	.word	0x58024400
 8014b58:	58000c00 	.word	0x58000c00
 8014b5c:	03d09000 	.word	0x03d09000
 8014b60:	003d0900 	.word	0x003d0900
 8014b64:	0801cb24 	.word	0x0801cb24
 8014b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	60bb      	str	r3, [r7, #8]
 8014b6e:	60fa      	str	r2, [r7, #12]
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b74:	4ac0      	ldr	r2, [pc, #768]	@ (8014e78 <UART_SetConfig+0xc28>)
 8014b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b7a:	b29b      	uxth	r3, r3
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	603b      	str	r3, [r7, #0]
 8014b80:	607a      	str	r2, [r7, #4]
 8014b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014b8a:	f7eb fdd5 	bl	8000738 <__aeabi_uldivmod>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	460b      	mov	r3, r1
 8014b92:	4610      	mov	r0, r2
 8014b94:	4619      	mov	r1, r3
 8014b96:	f04f 0200 	mov.w	r2, #0
 8014b9a:	f04f 0300 	mov.w	r3, #0
 8014b9e:	020b      	lsls	r3, r1, #8
 8014ba0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014ba4:	0202      	lsls	r2, r0, #8
 8014ba6:	6979      	ldr	r1, [r7, #20]
 8014ba8:	6849      	ldr	r1, [r1, #4]
 8014baa:	0849      	lsrs	r1, r1, #1
 8014bac:	2000      	movs	r0, #0
 8014bae:	460c      	mov	r4, r1
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	eb12 0804 	adds.w	r8, r2, r4
 8014bb6:	eb43 0905 	adc.w	r9, r3, r5
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	469a      	mov	sl, r3
 8014bc2:	4693      	mov	fp, r2
 8014bc4:	4652      	mov	r2, sl
 8014bc6:	465b      	mov	r3, fp
 8014bc8:	4640      	mov	r0, r8
 8014bca:	4649      	mov	r1, r9
 8014bcc:	f7eb fdb4 	bl	8000738 <__aeabi_uldivmod>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014bde:	d308      	bcc.n	8014bf2 <UART_SetConfig+0x9a2>
 8014be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014be6:	d204      	bcs.n	8014bf2 <UART_SetConfig+0x9a2>
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014bee:	60da      	str	r2, [r3, #12]
 8014bf0:	e17f      	b.n	8014ef2 <UART_SetConfig+0xca2>
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014bf8:	e17b      	b.n	8014ef2 <UART_SetConfig+0xca2>
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	69db      	ldr	r3, [r3, #28]
 8014bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014c02:	f040 80bd 	bne.w	8014d80 <UART_SetConfig+0xb30>
 8014c06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014c0a:	2b20      	cmp	r3, #32
 8014c0c:	dc48      	bgt.n	8014ca0 <UART_SetConfig+0xa50>
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	db7b      	blt.n	8014d0a <UART_SetConfig+0xaba>
 8014c12:	2b20      	cmp	r3, #32
 8014c14:	d879      	bhi.n	8014d0a <UART_SetConfig+0xaba>
 8014c16:	a201      	add	r2, pc, #4	@ (adr r2, 8014c1c <UART_SetConfig+0x9cc>)
 8014c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c1c:	08014ca7 	.word	0x08014ca7
 8014c20:	08014caf 	.word	0x08014caf
 8014c24:	08014d0b 	.word	0x08014d0b
 8014c28:	08014d0b 	.word	0x08014d0b
 8014c2c:	08014cb7 	.word	0x08014cb7
 8014c30:	08014d0b 	.word	0x08014d0b
 8014c34:	08014d0b 	.word	0x08014d0b
 8014c38:	08014d0b 	.word	0x08014d0b
 8014c3c:	08014cc7 	.word	0x08014cc7
 8014c40:	08014d0b 	.word	0x08014d0b
 8014c44:	08014d0b 	.word	0x08014d0b
 8014c48:	08014d0b 	.word	0x08014d0b
 8014c4c:	08014d0b 	.word	0x08014d0b
 8014c50:	08014d0b 	.word	0x08014d0b
 8014c54:	08014d0b 	.word	0x08014d0b
 8014c58:	08014d0b 	.word	0x08014d0b
 8014c5c:	08014cd7 	.word	0x08014cd7
 8014c60:	08014d0b 	.word	0x08014d0b
 8014c64:	08014d0b 	.word	0x08014d0b
 8014c68:	08014d0b 	.word	0x08014d0b
 8014c6c:	08014d0b 	.word	0x08014d0b
 8014c70:	08014d0b 	.word	0x08014d0b
 8014c74:	08014d0b 	.word	0x08014d0b
 8014c78:	08014d0b 	.word	0x08014d0b
 8014c7c:	08014d0b 	.word	0x08014d0b
 8014c80:	08014d0b 	.word	0x08014d0b
 8014c84:	08014d0b 	.word	0x08014d0b
 8014c88:	08014d0b 	.word	0x08014d0b
 8014c8c:	08014d0b 	.word	0x08014d0b
 8014c90:	08014d0b 	.word	0x08014d0b
 8014c94:	08014d0b 	.word	0x08014d0b
 8014c98:	08014d0b 	.word	0x08014d0b
 8014c9c:	08014cfd 	.word	0x08014cfd
 8014ca0:	2b40      	cmp	r3, #64	@ 0x40
 8014ca2:	d02e      	beq.n	8014d02 <UART_SetConfig+0xab2>
 8014ca4:	e031      	b.n	8014d0a <UART_SetConfig+0xaba>
 8014ca6:	f7f8 ff8b 	bl	800dbc0 <HAL_RCC_GetPCLK1Freq>
 8014caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014cac:	e033      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014cae:	f7f8 ff9d 	bl	800dbec <HAL_RCC_GetPCLK2Freq>
 8014cb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014cb4:	e02f      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fa fe50 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 8014cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014cc4:	e027      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014cc6:	f107 0318 	add.w	r3, r7, #24
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fa ff9c 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014cd4:	e01f      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014cd6:	4b69      	ldr	r3, [pc, #420]	@ (8014e7c <UART_SetConfig+0xc2c>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	f003 0320 	and.w	r3, r3, #32
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d009      	beq.n	8014cf6 <UART_SetConfig+0xaa6>
 8014ce2:	4b66      	ldr	r3, [pc, #408]	@ (8014e7c <UART_SetConfig+0xc2c>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	08db      	lsrs	r3, r3, #3
 8014ce8:	f003 0303 	and.w	r3, r3, #3
 8014cec:	4a64      	ldr	r2, [pc, #400]	@ (8014e80 <UART_SetConfig+0xc30>)
 8014cee:	fa22 f303 	lsr.w	r3, r2, r3
 8014cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014cf4:	e00f      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014cf6:	4b62      	ldr	r3, [pc, #392]	@ (8014e80 <UART_SetConfig+0xc30>)
 8014cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014cfa:	e00c      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014cfc:	4b61      	ldr	r3, [pc, #388]	@ (8014e84 <UART_SetConfig+0xc34>)
 8014cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d00:	e009      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d08:	e005      	b.n	8014d16 <UART_SetConfig+0xac6>
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d0e:	2301      	movs	r3, #1
 8014d10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014d14:	bf00      	nop
 8014d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	f000 80ea 	beq.w	8014ef2 <UART_SetConfig+0xca2>
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d22:	4a55      	ldr	r2, [pc, #340]	@ (8014e78 <UART_SetConfig+0xc28>)
 8014d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014d28:	461a      	mov	r2, r3
 8014d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d30:	005a      	lsls	r2, r3, #1
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	085b      	lsrs	r3, r3, #1
 8014d38:	441a      	add	r2, r3
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d46:	2b0f      	cmp	r3, #15
 8014d48:	d916      	bls.n	8014d78 <UART_SetConfig+0xb28>
 8014d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d50:	d212      	bcs.n	8014d78 <UART_SetConfig+0xb28>
 8014d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	f023 030f 	bic.w	r3, r3, #15
 8014d5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d5e:	085b      	lsrs	r3, r3, #1
 8014d60:	b29b      	uxth	r3, r3
 8014d62:	f003 0307 	and.w	r3, r3, #7
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014d6a:	4313      	orrs	r3, r2
 8014d6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014d74:	60da      	str	r2, [r3, #12]
 8014d76:	e0bc      	b.n	8014ef2 <UART_SetConfig+0xca2>
 8014d78:	2301      	movs	r3, #1
 8014d7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014d7e:	e0b8      	b.n	8014ef2 <UART_SetConfig+0xca2>
 8014d80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014d84:	2b20      	cmp	r3, #32
 8014d86:	dc4b      	bgt.n	8014e20 <UART_SetConfig+0xbd0>
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	f2c0 8087 	blt.w	8014e9c <UART_SetConfig+0xc4c>
 8014d8e:	2b20      	cmp	r3, #32
 8014d90:	f200 8084 	bhi.w	8014e9c <UART_SetConfig+0xc4c>
 8014d94:	a201      	add	r2, pc, #4	@ (adr r2, 8014d9c <UART_SetConfig+0xb4c>)
 8014d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d9a:	bf00      	nop
 8014d9c:	08014e27 	.word	0x08014e27
 8014da0:	08014e2f 	.word	0x08014e2f
 8014da4:	08014e9d 	.word	0x08014e9d
 8014da8:	08014e9d 	.word	0x08014e9d
 8014dac:	08014e37 	.word	0x08014e37
 8014db0:	08014e9d 	.word	0x08014e9d
 8014db4:	08014e9d 	.word	0x08014e9d
 8014db8:	08014e9d 	.word	0x08014e9d
 8014dbc:	08014e47 	.word	0x08014e47
 8014dc0:	08014e9d 	.word	0x08014e9d
 8014dc4:	08014e9d 	.word	0x08014e9d
 8014dc8:	08014e9d 	.word	0x08014e9d
 8014dcc:	08014e9d 	.word	0x08014e9d
 8014dd0:	08014e9d 	.word	0x08014e9d
 8014dd4:	08014e9d 	.word	0x08014e9d
 8014dd8:	08014e9d 	.word	0x08014e9d
 8014ddc:	08014e57 	.word	0x08014e57
 8014de0:	08014e9d 	.word	0x08014e9d
 8014de4:	08014e9d 	.word	0x08014e9d
 8014de8:	08014e9d 	.word	0x08014e9d
 8014dec:	08014e9d 	.word	0x08014e9d
 8014df0:	08014e9d 	.word	0x08014e9d
 8014df4:	08014e9d 	.word	0x08014e9d
 8014df8:	08014e9d 	.word	0x08014e9d
 8014dfc:	08014e9d 	.word	0x08014e9d
 8014e00:	08014e9d 	.word	0x08014e9d
 8014e04:	08014e9d 	.word	0x08014e9d
 8014e08:	08014e9d 	.word	0x08014e9d
 8014e0c:	08014e9d 	.word	0x08014e9d
 8014e10:	08014e9d 	.word	0x08014e9d
 8014e14:	08014e9d 	.word	0x08014e9d
 8014e18:	08014e9d 	.word	0x08014e9d
 8014e1c:	08014e8f 	.word	0x08014e8f
 8014e20:	2b40      	cmp	r3, #64	@ 0x40
 8014e22:	d037      	beq.n	8014e94 <UART_SetConfig+0xc44>
 8014e24:	e03a      	b.n	8014e9c <UART_SetConfig+0xc4c>
 8014e26:	f7f8 fecb 	bl	800dbc0 <HAL_RCC_GetPCLK1Freq>
 8014e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014e2c:	e03c      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e2e:	f7f8 fedd 	bl	800dbec <HAL_RCC_GetPCLK2Freq>
 8014e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014e34:	e038      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7fa fd90 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 8014e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e44:	e030      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e46:	f107 0318 	add.w	r3, r7, #24
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7fa fedc 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 8014e50:	69fb      	ldr	r3, [r7, #28]
 8014e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e54:	e028      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e56:	4b09      	ldr	r3, [pc, #36]	@ (8014e7c <UART_SetConfig+0xc2c>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	f003 0320 	and.w	r3, r3, #32
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d012      	beq.n	8014e88 <UART_SetConfig+0xc38>
 8014e62:	4b06      	ldr	r3, [pc, #24]	@ (8014e7c <UART_SetConfig+0xc2c>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	08db      	lsrs	r3, r3, #3
 8014e68:	f003 0303 	and.w	r3, r3, #3
 8014e6c:	4a04      	ldr	r2, [pc, #16]	@ (8014e80 <UART_SetConfig+0xc30>)
 8014e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8014e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e74:	e018      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e76:	bf00      	nop
 8014e78:	0801cb24 	.word	0x0801cb24
 8014e7c:	58024400 	.word	0x58024400
 8014e80:	03d09000 	.word	0x03d09000
 8014e84:	003d0900 	.word	0x003d0900
 8014e88:	4b24      	ldr	r3, [pc, #144]	@ (8014f1c <UART_SetConfig+0xccc>)
 8014e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e8c:	e00c      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e8e:	4b24      	ldr	r3, [pc, #144]	@ (8014f20 <UART_SetConfig+0xcd0>)
 8014e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e92:	e009      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e9a:	e005      	b.n	8014ea8 <UART_SetConfig+0xc58>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014ea6:	bf00      	nop
 8014ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d021      	beq.n	8014ef2 <UART_SetConfig+0xca2>
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8014f24 <UART_SetConfig+0xcd4>)
 8014eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014eb8:	461a      	mov	r2, r3
 8014eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ebc:	fbb3 f2f2 	udiv	r2, r3, r2
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	085b      	lsrs	r3, r3, #1
 8014ec6:	441a      	add	r2, r3
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ed4:	2b0f      	cmp	r3, #15
 8014ed6:	d909      	bls.n	8014eec <UART_SetConfig+0xc9c>
 8014ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014ede:	d205      	bcs.n	8014eec <UART_SetConfig+0xc9c>
 8014ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	60da      	str	r2, [r3, #12]
 8014eea:	e002      	b.n	8014ef2 <UART_SetConfig+0xca2>
 8014eec:	2301      	movs	r3, #1
 8014eee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	2201      	movs	r2, #1
 8014ef6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	2201      	movs	r2, #1
 8014efe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	2200      	movs	r2, #0
 8014f06:	675a      	str	r2, [r3, #116]	@ 0x74
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	679a      	str	r2, [r3, #120]	@ 0x78
 8014f0e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8014f12:	4618      	mov	r0, r3
 8014f14:	3748      	adds	r7, #72	@ 0x48
 8014f16:	46bd      	mov	sp, r7
 8014f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014f1c:	03d09000 	.word	0x03d09000
 8014f20:	003d0900 	.word	0x003d0900
 8014f24:	0801cb24 	.word	0x0801cb24

08014f28 <UART_AdvFeatureConfig>:
 8014f28:	b480      	push	{r7}
 8014f2a:	b083      	sub	sp, #12
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f34:	f003 0308 	and.w	r3, r3, #8
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d00a      	beq.n	8014f52 <UART_AdvFeatureConfig+0x2a>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	685b      	ldr	r3, [r3, #4]
 8014f42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	430a      	orrs	r2, r1
 8014f50:	605a      	str	r2, [r3, #4]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f56:	f003 0301 	and.w	r3, r3, #1
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d00a      	beq.n	8014f74 <UART_AdvFeatureConfig+0x4c>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	430a      	orrs	r2, r1
 8014f72:	605a      	str	r2, [r3, #4]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f78:	f003 0302 	and.w	r3, r3, #2
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d00a      	beq.n	8014f96 <UART_AdvFeatureConfig+0x6e>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	430a      	orrs	r2, r1
 8014f94:	605a      	str	r2, [r3, #4]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f9a:	f003 0304 	and.w	r3, r3, #4
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d00a      	beq.n	8014fb8 <UART_AdvFeatureConfig+0x90>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	430a      	orrs	r2, r1
 8014fb6:	605a      	str	r2, [r3, #4]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014fbc:	f003 0310 	and.w	r3, r3, #16
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00a      	beq.n	8014fda <UART_AdvFeatureConfig+0xb2>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	689b      	ldr	r3, [r3, #8]
 8014fca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	430a      	orrs	r2, r1
 8014fd8:	609a      	str	r2, [r3, #8]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014fde:	f003 0320 	and.w	r3, r3, #32
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d00a      	beq.n	8014ffc <UART_AdvFeatureConfig+0xd4>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	689b      	ldr	r3, [r3, #8]
 8014fec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	430a      	orrs	r2, r1
 8014ffa:	609a      	str	r2, [r3, #8]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015004:	2b00      	cmp	r3, #0
 8015006:	d01a      	beq.n	801503e <UART_AdvFeatureConfig+0x116>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	430a      	orrs	r2, r1
 801501c:	605a      	str	r2, [r3, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015026:	d10a      	bne.n	801503e <UART_AdvFeatureConfig+0x116>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	430a      	orrs	r2, r1
 801503c:	605a      	str	r2, [r3, #4]
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015046:	2b00      	cmp	r3, #0
 8015048:	d00a      	beq.n	8015060 <UART_AdvFeatureConfig+0x138>
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	430a      	orrs	r2, r1
 801505e:	605a      	str	r2, [r3, #4]
 8015060:	bf00      	nop
 8015062:	370c      	adds	r7, #12
 8015064:	46bd      	mov	sp, r7
 8015066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506a:	4770      	bx	lr

0801506c <UART_CheckIdleState>:
 801506c:	b580      	push	{r7, lr}
 801506e:	b098      	sub	sp, #96	@ 0x60
 8015070:	af02      	add	r7, sp, #8
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801507c:	f7f3 fcda 	bl	8008a34 <HAL_GetTick>
 8015080:	6578      	str	r0, [r7, #84]	@ 0x54
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f003 0308 	and.w	r3, r3, #8
 801508c:	2b08      	cmp	r3, #8
 801508e:	d12f      	bne.n	80150f0 <UART_CheckIdleState+0x84>
 8015090:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015098:	2200      	movs	r2, #0
 801509a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f000 f88e 	bl	80151c0 <UART_WaitOnFlagUntilTimeout>
 80150a4:	4603      	mov	r3, r0
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d022      	beq.n	80150f0 <UART_CheckIdleState+0x84>
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80150b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150b2:	e853 3f00 	ldrex	r3, [r3]
 80150b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80150b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80150be:	653b      	str	r3, [r7, #80]	@ 0x50
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	461a      	mov	r2, r3
 80150c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80150c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80150ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80150cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80150ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80150d0:	e841 2300 	strex	r3, r2, [r1]
 80150d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80150d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d1e6      	bne.n	80150aa <UART_CheckIdleState+0x3e>
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2220      	movs	r2, #32
 80150e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2200      	movs	r2, #0
 80150e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80150ec:	2303      	movs	r3, #3
 80150ee:	e063      	b.n	80151b8 <UART_CheckIdleState+0x14c>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f003 0304 	and.w	r3, r3, #4
 80150fa:	2b04      	cmp	r3, #4
 80150fc:	d149      	bne.n	8015192 <UART_CheckIdleState+0x126>
 80150fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015102:	9300      	str	r3, [sp, #0]
 8015104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015106:	2200      	movs	r2, #0
 8015108:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f000 f857 	bl	80151c0 <UART_WaitOnFlagUntilTimeout>
 8015112:	4603      	mov	r3, r0
 8015114:	2b00      	cmp	r3, #0
 8015116:	d03c      	beq.n	8015192 <UART_CheckIdleState+0x126>
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	627b      	str	r3, [r7, #36]	@ 0x24
 801511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015120:	e853 3f00 	ldrex	r3, [r3]
 8015124:	623b      	str	r3, [r7, #32]
 8015126:	6a3b      	ldr	r3, [r7, #32]
 8015128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801512c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	461a      	mov	r2, r3
 8015134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015136:	633b      	str	r3, [r7, #48]	@ 0x30
 8015138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801513a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801513c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801513e:	e841 2300 	strex	r3, r2, [r1]
 8015142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015146:	2b00      	cmp	r3, #0
 8015148:	d1e6      	bne.n	8015118 <UART_CheckIdleState+0xac>
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	3308      	adds	r3, #8
 8015150:	613b      	str	r3, [r7, #16]
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	e853 3f00 	ldrex	r3, [r3]
 8015158:	60fb      	str	r3, [r7, #12]
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f023 0301 	bic.w	r3, r3, #1
 8015160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	3308      	adds	r3, #8
 8015168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801516a:	61fa      	str	r2, [r7, #28]
 801516c:	61bb      	str	r3, [r7, #24]
 801516e:	69b9      	ldr	r1, [r7, #24]
 8015170:	69fa      	ldr	r2, [r7, #28]
 8015172:	e841 2300 	strex	r3, r2, [r1]
 8015176:	617b      	str	r3, [r7, #20]
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d1e5      	bne.n	801514a <UART_CheckIdleState+0xde>
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	2220      	movs	r2, #32
 8015182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2200      	movs	r2, #0
 801518a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801518e:	2303      	movs	r3, #3
 8015190:	e012      	b.n	80151b8 <UART_CheckIdleState+0x14c>
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	2220      	movs	r2, #32
 8015196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2220      	movs	r2, #32
 801519e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2200      	movs	r2, #0
 80151a6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2200      	movs	r2, #0
 80151ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2200      	movs	r2, #0
 80151b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80151b6:	2300      	movs	r3, #0
 80151b8:	4618      	mov	r0, r3
 80151ba:	3758      	adds	r7, #88	@ 0x58
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <UART_WaitOnFlagUntilTimeout>:
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	60f8      	str	r0, [r7, #12]
 80151c8:	60b9      	str	r1, [r7, #8]
 80151ca:	603b      	str	r3, [r7, #0]
 80151cc:	4613      	mov	r3, r2
 80151ce:	71fb      	strb	r3, [r7, #7]
 80151d0:	e04f      	b.n	8015272 <UART_WaitOnFlagUntilTimeout+0xb2>
 80151d2:	69bb      	ldr	r3, [r7, #24]
 80151d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d8:	d04b      	beq.n	8015272 <UART_WaitOnFlagUntilTimeout+0xb2>
 80151da:	f7f3 fc2b 	bl	8008a34 <HAL_GetTick>
 80151de:	4602      	mov	r2, r0
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	1ad3      	subs	r3, r2, r3
 80151e4:	69ba      	ldr	r2, [r7, #24]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d302      	bcc.n	80151f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80151ea:	69bb      	ldr	r3, [r7, #24]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d101      	bne.n	80151f4 <UART_WaitOnFlagUntilTimeout+0x34>
 80151f0:	2303      	movs	r3, #3
 80151f2:	e04e      	b.n	8015292 <UART_WaitOnFlagUntilTimeout+0xd2>
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	f003 0304 	and.w	r3, r3, #4
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d037      	beq.n	8015272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	2b80      	cmp	r3, #128	@ 0x80
 8015206:	d034      	beq.n	8015272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	2b40      	cmp	r3, #64	@ 0x40
 801520c:	d031      	beq.n	8015272 <UART_WaitOnFlagUntilTimeout+0xb2>
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	69db      	ldr	r3, [r3, #28]
 8015214:	f003 0308 	and.w	r3, r3, #8
 8015218:	2b08      	cmp	r3, #8
 801521a:	d110      	bne.n	801523e <UART_WaitOnFlagUntilTimeout+0x7e>
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	2208      	movs	r2, #8
 8015222:	621a      	str	r2, [r3, #32]
 8015224:	68f8      	ldr	r0, [r7, #12]
 8015226:	f000 f839 	bl	801529c <UART_EndRxTransfer>
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2208      	movs	r2, #8
 801522e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	2200      	movs	r2, #0
 8015236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801523a:	2301      	movs	r3, #1
 801523c:	e029      	b.n	8015292 <UART_WaitOnFlagUntilTimeout+0xd2>
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	69db      	ldr	r3, [r3, #28]
 8015244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801524c:	d111      	bne.n	8015272 <UART_WaitOnFlagUntilTimeout+0xb2>
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015256:	621a      	str	r2, [r3, #32]
 8015258:	68f8      	ldr	r0, [r7, #12]
 801525a:	f000 f81f 	bl	801529c <UART_EndRxTransfer>
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	2220      	movs	r2, #32
 8015262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2200      	movs	r2, #0
 801526a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801526e:	2303      	movs	r3, #3
 8015270:	e00f      	b.n	8015292 <UART_WaitOnFlagUntilTimeout+0xd2>
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	69da      	ldr	r2, [r3, #28]
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	4013      	ands	r3, r2
 801527c:	68ba      	ldr	r2, [r7, #8]
 801527e:	429a      	cmp	r2, r3
 8015280:	bf0c      	ite	eq
 8015282:	2301      	moveq	r3, #1
 8015284:	2300      	movne	r3, #0
 8015286:	b2db      	uxtb	r3, r3
 8015288:	461a      	mov	r2, r3
 801528a:	79fb      	ldrb	r3, [r7, #7]
 801528c:	429a      	cmp	r2, r3
 801528e:	d0a0      	beq.n	80151d2 <UART_WaitOnFlagUntilTimeout+0x12>
 8015290:	2300      	movs	r3, #0
 8015292:	4618      	mov	r0, r3
 8015294:	3710      	adds	r7, #16
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
	...

0801529c <UART_EndRxTransfer>:
 801529c:	b480      	push	{r7}
 801529e:	b095      	sub	sp, #84	@ 0x54
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80152aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152ac:	e853 3f00 	ldrex	r3, [r3]
 80152b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80152b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80152b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	461a      	mov	r2, r3
 80152c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80152c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80152c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80152c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80152c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80152ca:	e841 2300 	strex	r3, r2, [r1]
 80152ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80152d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d1e6      	bne.n	80152a4 <UART_EndRxTransfer+0x8>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	3308      	adds	r3, #8
 80152dc:	623b      	str	r3, [r7, #32]
 80152de:	6a3b      	ldr	r3, [r7, #32]
 80152e0:	e853 3f00 	ldrex	r3, [r3]
 80152e4:	61fb      	str	r3, [r7, #28]
 80152e6:	69fa      	ldr	r2, [r7, #28]
 80152e8:	4b1e      	ldr	r3, [pc, #120]	@ (8015364 <UART_EndRxTransfer+0xc8>)
 80152ea:	4013      	ands	r3, r2
 80152ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	3308      	adds	r3, #8
 80152f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80152f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80152f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80152fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80152fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80152fe:	e841 2300 	strex	r3, r2, [r1]
 8015302:	627b      	str	r3, [r7, #36]	@ 0x24
 8015304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015306:	2b00      	cmp	r3, #0
 8015308:	d1e5      	bne.n	80152d6 <UART_EndRxTransfer+0x3a>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801530e:	2b01      	cmp	r3, #1
 8015310:	d118      	bne.n	8015344 <UART_EndRxTransfer+0xa8>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	60fb      	str	r3, [r7, #12]
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	e853 3f00 	ldrex	r3, [r3]
 801531e:	60bb      	str	r3, [r7, #8]
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	f023 0310 	bic.w	r3, r3, #16
 8015326:	647b      	str	r3, [r7, #68]	@ 0x44
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	461a      	mov	r2, r3
 801532e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015330:	61bb      	str	r3, [r7, #24]
 8015332:	617a      	str	r2, [r7, #20]
 8015334:	6979      	ldr	r1, [r7, #20]
 8015336:	69ba      	ldr	r2, [r7, #24]
 8015338:	e841 2300 	strex	r3, r2, [r1]
 801533c:	613b      	str	r3, [r7, #16]
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d1e6      	bne.n	8015312 <UART_EndRxTransfer+0x76>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2220      	movs	r2, #32
 8015348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2200      	movs	r2, #0
 8015350:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2200      	movs	r2, #0
 8015356:	675a      	str	r2, [r3, #116]	@ 0x74
 8015358:	bf00      	nop
 801535a:	3754      	adds	r7, #84	@ 0x54
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr
 8015364:	effffffe 	.word	0xeffffffe

08015368 <UART_DMAAbortOnError>:
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015374:	60fb      	str	r3, [r7, #12]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2200      	movs	r2, #0
 801537a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2200      	movs	r2, #0
 8015382:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8015386:	68f8      	ldr	r0, [r7, #12]
 8015388:	f7fe ff4c 	bl	8014224 <HAL_UART_ErrorCallback>
 801538c:	bf00      	nop
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <UART_EndTransmit_IT>:
 8015394:	b580      	push	{r7, lr}
 8015396:	b088      	sub	sp, #32
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	60fb      	str	r3, [r7, #12]
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	e853 3f00 	ldrex	r3, [r3]
 80153a8:	60bb      	str	r3, [r7, #8]
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80153b0:	61fb      	str	r3, [r7, #28]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	461a      	mov	r2, r3
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	61bb      	str	r3, [r7, #24]
 80153bc:	617a      	str	r2, [r7, #20]
 80153be:	6979      	ldr	r1, [r7, #20]
 80153c0:	69ba      	ldr	r2, [r7, #24]
 80153c2:	e841 2300 	strex	r3, r2, [r1]
 80153c6:	613b      	str	r3, [r7, #16]
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d1e6      	bne.n	801539c <UART_EndTransmit_IT+0x8>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2220      	movs	r2, #32
 80153d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2200      	movs	r2, #0
 80153da:	679a      	str	r2, [r3, #120]	@ 0x78
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f7fe ff17 	bl	8014210 <HAL_UART_TxCpltCallback>
 80153e2:	bf00      	nop
 80153e4:	3720      	adds	r7, #32
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}

080153ea <HAL_UARTEx_WakeupCallback>:
 80153ea:	b480      	push	{r7}
 80153ec:	b083      	sub	sp, #12
 80153ee:	af00      	add	r7, sp, #0
 80153f0:	6078      	str	r0, [r7, #4]
 80153f2:	bf00      	nop
 80153f4:	370c      	adds	r7, #12
 80153f6:	46bd      	mov	sp, r7
 80153f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fc:	4770      	bx	lr

080153fe <HAL_UARTEx_RxFifoFullCallback>:
 80153fe:	b480      	push	{r7}
 8015400:	b083      	sub	sp, #12
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
 8015406:	bf00      	nop
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr

08015412 <HAL_UARTEx_TxFifoEmptyCallback>:
 8015412:	b480      	push	{r7}
 8015414:	b083      	sub	sp, #12
 8015416:	af00      	add	r7, sp, #0
 8015418:	6078      	str	r0, [r7, #4]
 801541a:	bf00      	nop
 801541c:	370c      	adds	r7, #12
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr

08015426 <HAL_UARTEx_DisableFifoMode>:
 8015426:	b480      	push	{r7}
 8015428:	b085      	sub	sp, #20
 801542a:	af00      	add	r7, sp, #0
 801542c:	6078      	str	r0, [r7, #4]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015434:	2b01      	cmp	r3, #1
 8015436:	d101      	bne.n	801543c <HAL_UARTEx_DisableFifoMode+0x16>
 8015438:	2302      	movs	r3, #2
 801543a:	e027      	b.n	801548c <HAL_UARTEx_DisableFifoMode+0x66>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2201      	movs	r2, #1
 8015440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2224      	movs	r2, #36	@ 0x24
 8015448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	60fb      	str	r3, [r7, #12]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	f022 0201 	bic.w	r2, r2, #1
 8015462:	601a      	str	r2, [r3, #0]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801546a:	60fb      	str	r3, [r7, #12]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2200      	movs	r2, #0
 8015470:	665a      	str	r2, [r3, #100]	@ 0x64
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	601a      	str	r2, [r3, #0]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2220      	movs	r2, #32
 801547e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2200      	movs	r2, #0
 8015486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801548a:	2300      	movs	r3, #0
 801548c:	4618      	mov	r0, r3
 801548e:	3714      	adds	r7, #20
 8015490:	46bd      	mov	sp, r7
 8015492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015496:	4770      	bx	lr

08015498 <HAL_UARTEx_SetTxFifoThreshold>:
 8015498:	b580      	push	{r7, lr}
 801549a:	b084      	sub	sp, #16
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	6039      	str	r1, [r7, #0]
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80154a8:	2b01      	cmp	r3, #1
 80154aa:	d101      	bne.n	80154b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80154ac:	2302      	movs	r3, #2
 80154ae:	e02d      	b.n	801550c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2201      	movs	r2, #1
 80154b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2224      	movs	r2, #36	@ 0x24
 80154bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	60fb      	str	r3, [r7, #12]
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	f022 0201 	bic.w	r2, r2, #1
 80154d6:	601a      	str	r2, [r3, #0]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	689b      	ldr	r3, [r3, #8]
 80154de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	430a      	orrs	r2, r1
 80154ea:	609a      	str	r2, [r3, #8]
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f000 f84f 	bl	8015590 <UARTEx_SetNbDataToProcess>
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	601a      	str	r2, [r3, #0]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2220      	movs	r2, #32
 80154fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2200      	movs	r2, #0
 8015506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801550a:	2300      	movs	r3, #0
 801550c:	4618      	mov	r0, r3
 801550e:	3710      	adds	r7, #16
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <HAL_UARTEx_SetRxFifoThreshold>:
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	6039      	str	r1, [r7, #0]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015524:	2b01      	cmp	r3, #1
 8015526:	d101      	bne.n	801552c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015528:	2302      	movs	r3, #2
 801552a:	e02d      	b.n	8015588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2201      	movs	r2, #1
 8015530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2224      	movs	r2, #36	@ 0x24
 8015538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	60fb      	str	r3, [r7, #12]
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f022 0201 	bic.w	r2, r2, #1
 8015552:	601a      	str	r2, [r3, #0]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	689b      	ldr	r3, [r3, #8]
 801555a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	683a      	ldr	r2, [r7, #0]
 8015564:	430a      	orrs	r2, r1
 8015566:	609a      	str	r2, [r3, #8]
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 f811 	bl	8015590 <UARTEx_SetNbDataToProcess>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	68fa      	ldr	r2, [r7, #12]
 8015574:	601a      	str	r2, [r3, #0]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2220      	movs	r2, #32
 801557a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2200      	movs	r2, #0
 8015582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8015586:	2300      	movs	r3, #0
 8015588:	4618      	mov	r0, r3
 801558a:	3710      	adds	r7, #16
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}

08015590 <UARTEx_SetNbDataToProcess>:
 8015590:	b480      	push	{r7}
 8015592:	b085      	sub	sp, #20
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801559c:	2b00      	cmp	r3, #0
 801559e:	d108      	bne.n	80155b2 <UARTEx_SetNbDataToProcess+0x22>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2201      	movs	r2, #1
 80155a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2201      	movs	r2, #1
 80155ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80155b0:	e031      	b.n	8015616 <UARTEx_SetNbDataToProcess+0x86>
 80155b2:	2310      	movs	r3, #16
 80155b4:	73fb      	strb	r3, [r7, #15]
 80155b6:	2310      	movs	r3, #16
 80155b8:	73bb      	strb	r3, [r7, #14]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	689b      	ldr	r3, [r3, #8]
 80155c0:	0e5b      	lsrs	r3, r3, #25
 80155c2:	b2db      	uxtb	r3, r3
 80155c4:	f003 0307 	and.w	r3, r3, #7
 80155c8:	737b      	strb	r3, [r7, #13]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	689b      	ldr	r3, [r3, #8]
 80155d0:	0f5b      	lsrs	r3, r3, #29
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	f003 0307 	and.w	r3, r3, #7
 80155d8:	733b      	strb	r3, [r7, #12]
 80155da:	7bbb      	ldrb	r3, [r7, #14]
 80155dc:	7b3a      	ldrb	r2, [r7, #12]
 80155de:	4911      	ldr	r1, [pc, #68]	@ (8015624 <UARTEx_SetNbDataToProcess+0x94>)
 80155e0:	5c8a      	ldrb	r2, [r1, r2]
 80155e2:	fb02 f303 	mul.w	r3, r2, r3
 80155e6:	7b3a      	ldrb	r2, [r7, #12]
 80155e8:	490f      	ldr	r1, [pc, #60]	@ (8015628 <UARTEx_SetNbDataToProcess+0x98>)
 80155ea:	5c8a      	ldrb	r2, [r1, r2]
 80155ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80155f0:	b29a      	uxth	r2, r3
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80155f8:	7bfb      	ldrb	r3, [r7, #15]
 80155fa:	7b7a      	ldrb	r2, [r7, #13]
 80155fc:	4909      	ldr	r1, [pc, #36]	@ (8015624 <UARTEx_SetNbDataToProcess+0x94>)
 80155fe:	5c8a      	ldrb	r2, [r1, r2]
 8015600:	fb02 f303 	mul.w	r3, r2, r3
 8015604:	7b7a      	ldrb	r2, [r7, #13]
 8015606:	4908      	ldr	r1, [pc, #32]	@ (8015628 <UARTEx_SetNbDataToProcess+0x98>)
 8015608:	5c8a      	ldrb	r2, [r1, r2]
 801560a:	fb93 f3f2 	sdiv	r3, r3, r2
 801560e:	b29a      	uxth	r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015616:	bf00      	nop
 8015618:	3714      	adds	r7, #20
 801561a:	46bd      	mov	sp, r7
 801561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015620:	4770      	bx	lr
 8015622:	bf00      	nop
 8015624:	0801cb3c 	.word	0x0801cb3c
 8015628:	0801cb44 	.word	0x0801cb44

0801562c <HAL_USART_Init>:
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d101      	bne.n	801563e <HAL_USART_Init+0x12>
 801563a:	2301      	movs	r3, #1
 801563c:	e03c      	b.n	80156b8 <HAL_USART_Init+0x8c>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8015644:	b2db      	uxtb	r3, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	d106      	bne.n	8015658 <HAL_USART_Init+0x2c>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2200      	movs	r2, #0
 801564e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f7f2 feb6 	bl	80083c4 <HAL_USART_MspInit>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2202      	movs	r2, #2
 801565c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	f022 0201 	bic.w	r2, r2, #1
 801566e:	601a      	str	r2, [r3, #0]
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f000 f85b 	bl	801572c <USART_SetConfig>
 8015676:	4603      	mov	r3, r0
 8015678:	2b01      	cmp	r3, #1
 801567a:	d101      	bne.n	8015680 <HAL_USART_Init+0x54>
 801567c:	2301      	movs	r3, #1
 801567e:	e01b      	b.n	80156b8 <HAL_USART_Init+0x8c>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	685a      	ldr	r2, [r3, #4]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801568e:	605a      	str	r2, [r3, #4]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	689a      	ldr	r2, [r3, #8]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801569e:	609a      	str	r2, [r3, #8]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f042 0201 	orr.w	r2, r2, #1
 80156ae:	601a      	str	r2, [r3, #0]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f000 fddd 	bl	8016270 <USART_CheckIdleState>
 80156b6:	4603      	mov	r3, r0
 80156b8:	4618      	mov	r0, r3
 80156ba:	3708      	adds	r7, #8
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <USART_WaitOnFlagUntilTimeout>:
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	60f8      	str	r0, [r7, #12]
 80156c8:	60b9      	str	r1, [r7, #8]
 80156ca:	603b      	str	r3, [r7, #0]
 80156cc:	4613      	mov	r3, r2
 80156ce:	71fb      	strb	r3, [r7, #7]
 80156d0:	e018      	b.n	8015704 <USART_WaitOnFlagUntilTimeout+0x44>
 80156d2:	69bb      	ldr	r3, [r7, #24]
 80156d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156d8:	d014      	beq.n	8015704 <USART_WaitOnFlagUntilTimeout+0x44>
 80156da:	f7f3 f9ab 	bl	8008a34 <HAL_GetTick>
 80156de:	4602      	mov	r2, r0
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	1ad3      	subs	r3, r2, r3
 80156e4:	69ba      	ldr	r2, [r7, #24]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d302      	bcc.n	80156f0 <USART_WaitOnFlagUntilTimeout+0x30>
 80156ea:	69bb      	ldr	r3, [r7, #24]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d109      	bne.n	8015704 <USART_WaitOnFlagUntilTimeout+0x44>
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	2201      	movs	r2, #1
 80156f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2200      	movs	r2, #0
 80156fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8015700:	2303      	movs	r3, #3
 8015702:	e00f      	b.n	8015724 <USART_WaitOnFlagUntilTimeout+0x64>
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	69da      	ldr	r2, [r3, #28]
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	4013      	ands	r3, r2
 801570e:	68ba      	ldr	r2, [r7, #8]
 8015710:	429a      	cmp	r2, r3
 8015712:	bf0c      	ite	eq
 8015714:	2301      	moveq	r3, #1
 8015716:	2300      	movne	r3, #0
 8015718:	b2db      	uxtb	r3, r3
 801571a:	461a      	mov	r2, r3
 801571c:	79fb      	ldrb	r3, [r7, #7]
 801571e:	429a      	cmp	r2, r3
 8015720:	d0d7      	beq.n	80156d2 <USART_WaitOnFlagUntilTimeout+0x12>
 8015722:	2300      	movs	r3, #0
 8015724:	4618      	mov	r0, r3
 8015726:	3710      	adds	r7, #16
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <USART_SetConfig>:
 801572c:	b580      	push	{r7, lr}
 801572e:	b08e      	sub	sp, #56	@ 0x38
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	2300      	movs	r3, #0
 8015736:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 801573a:	2300      	movs	r3, #0
 801573c:	633b      	str	r3, [r7, #48]	@ 0x30
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	689a      	ldr	r2, [r3, #8]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	691b      	ldr	r3, [r3, #16]
 8015746:	431a      	orrs	r2, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	695b      	ldr	r3, [r3, #20]
 801574c:	4313      	orrs	r3, r2
 801574e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	681a      	ldr	r2, [r3, #0]
 801575a:	4bc9      	ldr	r3, [pc, #804]	@ (8015a80 <USART_SetConfig+0x354>)
 801575c:	4013      	ands	r3, r2
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	6812      	ldr	r2, [r2, #0]
 8015762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015764:	430b      	orrs	r3, r1
 8015766:	6013      	str	r3, [r2, #0]
 8015768:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801576c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6a1b      	ldr	r3, [r3, #32]
 8015772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015774:	4313      	orrs	r3, r2
 8015776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	699a      	ldr	r2, [r3, #24]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	69db      	ldr	r3, [r3, #28]
 8015780:	4313      	orrs	r3, r2
 8015782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015784:	4313      	orrs	r3, r2
 8015786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	68db      	ldr	r3, [r3, #12]
 801578c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801578e:	4313      	orrs	r3, r2
 8015790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	685a      	ldr	r2, [r3, #4]
 8015798:	4bba      	ldr	r3, [pc, #744]	@ (8015a84 <USART_SetConfig+0x358>)
 801579a:	4013      	ands	r3, r2
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	6812      	ldr	r2, [r2, #0]
 80157a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80157a2:	430b      	orrs	r3, r1
 80157a4:	6053      	str	r3, [r2, #4]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157ac:	f023 010f 	bic.w	r1, r3, #15
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	430a      	orrs	r2, r1
 80157ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	4ab1      	ldr	r2, [pc, #708]	@ (8015a88 <USART_SetConfig+0x35c>)
 80157c2:	4293      	cmp	r3, r2
 80157c4:	d176      	bne.n	80158b4 <USART_SetConfig+0x188>
 80157c6:	4bb1      	ldr	r3, [pc, #708]	@ (8015a8c <USART_SetConfig+0x360>)
 80157c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80157ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80157ce:	2b28      	cmp	r3, #40	@ 0x28
 80157d0:	d86c      	bhi.n	80158ac <USART_SetConfig+0x180>
 80157d2:	a201      	add	r2, pc, #4	@ (adr r2, 80157d8 <USART_SetConfig+0xac>)
 80157d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157d8:	0801587d 	.word	0x0801587d
 80157dc:	080158ad 	.word	0x080158ad
 80157e0:	080158ad 	.word	0x080158ad
 80157e4:	080158ad 	.word	0x080158ad
 80157e8:	080158ad 	.word	0x080158ad
 80157ec:	080158ad 	.word	0x080158ad
 80157f0:	080158ad 	.word	0x080158ad
 80157f4:	080158ad 	.word	0x080158ad
 80157f8:	08015885 	.word	0x08015885
 80157fc:	080158ad 	.word	0x080158ad
 8015800:	080158ad 	.word	0x080158ad
 8015804:	080158ad 	.word	0x080158ad
 8015808:	080158ad 	.word	0x080158ad
 801580c:	080158ad 	.word	0x080158ad
 8015810:	080158ad 	.word	0x080158ad
 8015814:	080158ad 	.word	0x080158ad
 8015818:	0801588d 	.word	0x0801588d
 801581c:	080158ad 	.word	0x080158ad
 8015820:	080158ad 	.word	0x080158ad
 8015824:	080158ad 	.word	0x080158ad
 8015828:	080158ad 	.word	0x080158ad
 801582c:	080158ad 	.word	0x080158ad
 8015830:	080158ad 	.word	0x080158ad
 8015834:	080158ad 	.word	0x080158ad
 8015838:	08015895 	.word	0x08015895
 801583c:	080158ad 	.word	0x080158ad
 8015840:	080158ad 	.word	0x080158ad
 8015844:	080158ad 	.word	0x080158ad
 8015848:	080158ad 	.word	0x080158ad
 801584c:	080158ad 	.word	0x080158ad
 8015850:	080158ad 	.word	0x080158ad
 8015854:	080158ad 	.word	0x080158ad
 8015858:	0801589d 	.word	0x0801589d
 801585c:	080158ad 	.word	0x080158ad
 8015860:	080158ad 	.word	0x080158ad
 8015864:	080158ad 	.word	0x080158ad
 8015868:	080158ad 	.word	0x080158ad
 801586c:	080158ad 	.word	0x080158ad
 8015870:	080158ad 	.word	0x080158ad
 8015874:	080158ad 	.word	0x080158ad
 8015878:	080158a5 	.word	0x080158a5
 801587c:	2301      	movs	r3, #1
 801587e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015882:	e18e      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015884:	2302      	movs	r3, #2
 8015886:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801588a:	e18a      	b.n	8015ba2 <USART_SetConfig+0x476>
 801588c:	2304      	movs	r3, #4
 801588e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015892:	e186      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015894:	2308      	movs	r3, #8
 8015896:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801589a:	e182      	b.n	8015ba2 <USART_SetConfig+0x476>
 801589c:	2310      	movs	r3, #16
 801589e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80158a2:	e17e      	b.n	8015ba2 <USART_SetConfig+0x476>
 80158a4:	2320      	movs	r3, #32
 80158a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80158aa:	e17a      	b.n	8015ba2 <USART_SetConfig+0x476>
 80158ac:	2340      	movs	r3, #64	@ 0x40
 80158ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80158b2:	e176      	b.n	8015ba2 <USART_SetConfig+0x476>
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	4a75      	ldr	r2, [pc, #468]	@ (8015a90 <USART_SetConfig+0x364>)
 80158ba:	4293      	cmp	r3, r2
 80158bc:	d130      	bne.n	8015920 <USART_SetConfig+0x1f4>
 80158be:	4b73      	ldr	r3, [pc, #460]	@ (8015a8c <USART_SetConfig+0x360>)
 80158c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158c2:	f003 0307 	and.w	r3, r3, #7
 80158c6:	2b05      	cmp	r3, #5
 80158c8:	d826      	bhi.n	8015918 <USART_SetConfig+0x1ec>
 80158ca:	a201      	add	r2, pc, #4	@ (adr r2, 80158d0 <USART_SetConfig+0x1a4>)
 80158cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158d0:	080158e9 	.word	0x080158e9
 80158d4:	080158f1 	.word	0x080158f1
 80158d8:	080158f9 	.word	0x080158f9
 80158dc:	08015901 	.word	0x08015901
 80158e0:	08015909 	.word	0x08015909
 80158e4:	08015911 	.word	0x08015911
 80158e8:	2300      	movs	r3, #0
 80158ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80158ee:	e158      	b.n	8015ba2 <USART_SetConfig+0x476>
 80158f0:	2302      	movs	r3, #2
 80158f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80158f6:	e154      	b.n	8015ba2 <USART_SetConfig+0x476>
 80158f8:	2304      	movs	r3, #4
 80158fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80158fe:	e150      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015900:	2308      	movs	r3, #8
 8015902:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015906:	e14c      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015908:	2310      	movs	r3, #16
 801590a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801590e:	e148      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015910:	2320      	movs	r3, #32
 8015912:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015916:	e144      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015918:	2340      	movs	r3, #64	@ 0x40
 801591a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801591e:	e140      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	4a5b      	ldr	r2, [pc, #364]	@ (8015a94 <USART_SetConfig+0x368>)
 8015926:	4293      	cmp	r3, r2
 8015928:	d130      	bne.n	801598c <USART_SetConfig+0x260>
 801592a:	4b58      	ldr	r3, [pc, #352]	@ (8015a8c <USART_SetConfig+0x360>)
 801592c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801592e:	f003 0307 	and.w	r3, r3, #7
 8015932:	2b05      	cmp	r3, #5
 8015934:	d826      	bhi.n	8015984 <USART_SetConfig+0x258>
 8015936:	a201      	add	r2, pc, #4	@ (adr r2, 801593c <USART_SetConfig+0x210>)
 8015938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801593c:	08015955 	.word	0x08015955
 8015940:	0801595d 	.word	0x0801595d
 8015944:	08015965 	.word	0x08015965
 8015948:	0801596d 	.word	0x0801596d
 801594c:	08015975 	.word	0x08015975
 8015950:	0801597d 	.word	0x0801597d
 8015954:	2300      	movs	r3, #0
 8015956:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801595a:	e122      	b.n	8015ba2 <USART_SetConfig+0x476>
 801595c:	2302      	movs	r3, #2
 801595e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015962:	e11e      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015964:	2304      	movs	r3, #4
 8015966:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801596a:	e11a      	b.n	8015ba2 <USART_SetConfig+0x476>
 801596c:	2308      	movs	r3, #8
 801596e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015972:	e116      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015974:	2310      	movs	r3, #16
 8015976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801597a:	e112      	b.n	8015ba2 <USART_SetConfig+0x476>
 801597c:	2320      	movs	r3, #32
 801597e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015982:	e10e      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015984:	2340      	movs	r3, #64	@ 0x40
 8015986:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801598a:	e10a      	b.n	8015ba2 <USART_SetConfig+0x476>
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	4a41      	ldr	r2, [pc, #260]	@ (8015a98 <USART_SetConfig+0x36c>)
 8015992:	4293      	cmp	r3, r2
 8015994:	f040 8086 	bne.w	8015aa4 <USART_SetConfig+0x378>
 8015998:	4b3c      	ldr	r3, [pc, #240]	@ (8015a8c <USART_SetConfig+0x360>)
 801599a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801599c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80159a0:	2b28      	cmp	r3, #40	@ 0x28
 80159a2:	d87b      	bhi.n	8015a9c <USART_SetConfig+0x370>
 80159a4:	a201      	add	r2, pc, #4	@ (adr r2, 80159ac <USART_SetConfig+0x280>)
 80159a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159aa:	bf00      	nop
 80159ac:	08015a51 	.word	0x08015a51
 80159b0:	08015a9d 	.word	0x08015a9d
 80159b4:	08015a9d 	.word	0x08015a9d
 80159b8:	08015a9d 	.word	0x08015a9d
 80159bc:	08015a9d 	.word	0x08015a9d
 80159c0:	08015a9d 	.word	0x08015a9d
 80159c4:	08015a9d 	.word	0x08015a9d
 80159c8:	08015a9d 	.word	0x08015a9d
 80159cc:	08015a59 	.word	0x08015a59
 80159d0:	08015a9d 	.word	0x08015a9d
 80159d4:	08015a9d 	.word	0x08015a9d
 80159d8:	08015a9d 	.word	0x08015a9d
 80159dc:	08015a9d 	.word	0x08015a9d
 80159e0:	08015a9d 	.word	0x08015a9d
 80159e4:	08015a9d 	.word	0x08015a9d
 80159e8:	08015a9d 	.word	0x08015a9d
 80159ec:	08015a61 	.word	0x08015a61
 80159f0:	08015a9d 	.word	0x08015a9d
 80159f4:	08015a9d 	.word	0x08015a9d
 80159f8:	08015a9d 	.word	0x08015a9d
 80159fc:	08015a9d 	.word	0x08015a9d
 8015a00:	08015a9d 	.word	0x08015a9d
 8015a04:	08015a9d 	.word	0x08015a9d
 8015a08:	08015a9d 	.word	0x08015a9d
 8015a0c:	08015a69 	.word	0x08015a69
 8015a10:	08015a9d 	.word	0x08015a9d
 8015a14:	08015a9d 	.word	0x08015a9d
 8015a18:	08015a9d 	.word	0x08015a9d
 8015a1c:	08015a9d 	.word	0x08015a9d
 8015a20:	08015a9d 	.word	0x08015a9d
 8015a24:	08015a9d 	.word	0x08015a9d
 8015a28:	08015a9d 	.word	0x08015a9d
 8015a2c:	08015a71 	.word	0x08015a71
 8015a30:	08015a9d 	.word	0x08015a9d
 8015a34:	08015a9d 	.word	0x08015a9d
 8015a38:	08015a9d 	.word	0x08015a9d
 8015a3c:	08015a9d 	.word	0x08015a9d
 8015a40:	08015a9d 	.word	0x08015a9d
 8015a44:	08015a9d 	.word	0x08015a9d
 8015a48:	08015a9d 	.word	0x08015a9d
 8015a4c:	08015a79 	.word	0x08015a79
 8015a50:	2301      	movs	r3, #1
 8015a52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a56:	e0a4      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015a58:	2302      	movs	r3, #2
 8015a5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a5e:	e0a0      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015a60:	2304      	movs	r3, #4
 8015a62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a66:	e09c      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015a68:	2308      	movs	r3, #8
 8015a6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a6e:	e098      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015a70:	2310      	movs	r3, #16
 8015a72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a76:	e094      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015a78:	2320      	movs	r3, #32
 8015a7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015a7e:	e090      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015a80:	cfff69f3 	.word	0xcfff69f3
 8015a84:	ffffc0f6 	.word	0xffffc0f6
 8015a88:	40011000 	.word	0x40011000
 8015a8c:	58024400 	.word	0x58024400
 8015a90:	40004400 	.word	0x40004400
 8015a94:	40004800 	.word	0x40004800
 8015a98:	40011400 	.word	0x40011400
 8015a9c:	2340      	movs	r3, #64	@ 0x40
 8015a9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015aa2:	e07e      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	4ab5      	ldr	r2, [pc, #724]	@ (8015d80 <USART_SetConfig+0x654>)
 8015aaa:	4293      	cmp	r3, r2
 8015aac:	d176      	bne.n	8015b9c <USART_SetConfig+0x470>
 8015aae:	4bb5      	ldr	r3, [pc, #724]	@ (8015d84 <USART_SetConfig+0x658>)
 8015ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015ab6:	2b28      	cmp	r3, #40	@ 0x28
 8015ab8:	d86c      	bhi.n	8015b94 <USART_SetConfig+0x468>
 8015aba:	a201      	add	r2, pc, #4	@ (adr r2, 8015ac0 <USART_SetConfig+0x394>)
 8015abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ac0:	08015b65 	.word	0x08015b65
 8015ac4:	08015b95 	.word	0x08015b95
 8015ac8:	08015b95 	.word	0x08015b95
 8015acc:	08015b95 	.word	0x08015b95
 8015ad0:	08015b95 	.word	0x08015b95
 8015ad4:	08015b95 	.word	0x08015b95
 8015ad8:	08015b95 	.word	0x08015b95
 8015adc:	08015b95 	.word	0x08015b95
 8015ae0:	08015b6d 	.word	0x08015b6d
 8015ae4:	08015b95 	.word	0x08015b95
 8015ae8:	08015b95 	.word	0x08015b95
 8015aec:	08015b95 	.word	0x08015b95
 8015af0:	08015b95 	.word	0x08015b95
 8015af4:	08015b95 	.word	0x08015b95
 8015af8:	08015b95 	.word	0x08015b95
 8015afc:	08015b95 	.word	0x08015b95
 8015b00:	08015b75 	.word	0x08015b75
 8015b04:	08015b95 	.word	0x08015b95
 8015b08:	08015b95 	.word	0x08015b95
 8015b0c:	08015b95 	.word	0x08015b95
 8015b10:	08015b95 	.word	0x08015b95
 8015b14:	08015b95 	.word	0x08015b95
 8015b18:	08015b95 	.word	0x08015b95
 8015b1c:	08015b95 	.word	0x08015b95
 8015b20:	08015b7d 	.word	0x08015b7d
 8015b24:	08015b95 	.word	0x08015b95
 8015b28:	08015b95 	.word	0x08015b95
 8015b2c:	08015b95 	.word	0x08015b95
 8015b30:	08015b95 	.word	0x08015b95
 8015b34:	08015b95 	.word	0x08015b95
 8015b38:	08015b95 	.word	0x08015b95
 8015b3c:	08015b95 	.word	0x08015b95
 8015b40:	08015b85 	.word	0x08015b85
 8015b44:	08015b95 	.word	0x08015b95
 8015b48:	08015b95 	.word	0x08015b95
 8015b4c:	08015b95 	.word	0x08015b95
 8015b50:	08015b95 	.word	0x08015b95
 8015b54:	08015b95 	.word	0x08015b95
 8015b58:	08015b95 	.word	0x08015b95
 8015b5c:	08015b95 	.word	0x08015b95
 8015b60:	08015b8d 	.word	0x08015b8d
 8015b64:	2301      	movs	r3, #1
 8015b66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b6a:	e01a      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015b6c:	2302      	movs	r3, #2
 8015b6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b72:	e016      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015b74:	2304      	movs	r3, #4
 8015b76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b7a:	e012      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015b7c:	2308      	movs	r3, #8
 8015b7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b82:	e00e      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015b84:	2310      	movs	r3, #16
 8015b86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b8a:	e00a      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015b8c:	2320      	movs	r3, #32
 8015b8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b92:	e006      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015b94:	2340      	movs	r3, #64	@ 0x40
 8015b96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015b9a:	e002      	b.n	8015ba2 <USART_SetConfig+0x476>
 8015b9c:	2340      	movs	r3, #64	@ 0x40
 8015b9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015ba2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015ba6:	2b20      	cmp	r3, #32
 8015ba8:	f200 832f 	bhi.w	801620a <USART_SetConfig+0xade>
 8015bac:	a201      	add	r2, pc, #4	@ (adr r2, 8015bb4 <USART_SetConfig+0x488>)
 8015bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bb2:	bf00      	nop
 8015bb4:	08015c39 	.word	0x08015c39
 8015bb8:	08015cef 	.word	0x08015cef
 8015bbc:	08015daf 	.word	0x08015daf
 8015bc0:	0801620b 	.word	0x0801620b
 8015bc4:	08015e69 	.word	0x08015e69
 8015bc8:	0801620b 	.word	0x0801620b
 8015bcc:	0801620b 	.word	0x0801620b
 8015bd0:	0801620b 	.word	0x0801620b
 8015bd4:	08015f23 	.word	0x08015f23
 8015bd8:	0801620b 	.word	0x0801620b
 8015bdc:	0801620b 	.word	0x0801620b
 8015be0:	0801620b 	.word	0x0801620b
 8015be4:	0801620b 	.word	0x0801620b
 8015be8:	0801620b 	.word	0x0801620b
 8015bec:	0801620b 	.word	0x0801620b
 8015bf0:	0801620b 	.word	0x0801620b
 8015bf4:	0801609b 	.word	0x0801609b
 8015bf8:	0801620b 	.word	0x0801620b
 8015bfc:	0801620b 	.word	0x0801620b
 8015c00:	0801620b 	.word	0x0801620b
 8015c04:	0801620b 	.word	0x0801620b
 8015c08:	0801620b 	.word	0x0801620b
 8015c0c:	0801620b 	.word	0x0801620b
 8015c10:	0801620b 	.word	0x0801620b
 8015c14:	0801620b 	.word	0x0801620b
 8015c18:	0801620b 	.word	0x0801620b
 8015c1c:	0801620b 	.word	0x0801620b
 8015c20:	0801620b 	.word	0x0801620b
 8015c24:	0801620b 	.word	0x0801620b
 8015c28:	0801620b 	.word	0x0801620b
 8015c2c:	0801620b 	.word	0x0801620b
 8015c30:	0801620b 	.word	0x0801620b
 8015c34:	08016159 	.word	0x08016159
 8015c38:	f7f7 ffc2 	bl	800dbc0 <HAL_RCC_GetPCLK1Freq>
 8015c3c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d044      	beq.n	8015cd0 <USART_SetConfig+0x5a4>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d03e      	beq.n	8015ccc <USART_SetConfig+0x5a0>
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c52:	2b02      	cmp	r3, #2
 8015c54:	d038      	beq.n	8015cc8 <USART_SetConfig+0x59c>
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c5a:	2b03      	cmp	r3, #3
 8015c5c:	d032      	beq.n	8015cc4 <USART_SetConfig+0x598>
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c62:	2b04      	cmp	r3, #4
 8015c64:	d02c      	beq.n	8015cc0 <USART_SetConfig+0x594>
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c6a:	2b05      	cmp	r3, #5
 8015c6c:	d026      	beq.n	8015cbc <USART_SetConfig+0x590>
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c72:	2b06      	cmp	r3, #6
 8015c74:	d020      	beq.n	8015cb8 <USART_SetConfig+0x58c>
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c7a:	2b07      	cmp	r3, #7
 8015c7c:	d01a      	beq.n	8015cb4 <USART_SetConfig+0x588>
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c82:	2b08      	cmp	r3, #8
 8015c84:	d014      	beq.n	8015cb0 <USART_SetConfig+0x584>
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c8a:	2b09      	cmp	r3, #9
 8015c8c:	d00e      	beq.n	8015cac <USART_SetConfig+0x580>
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c92:	2b0a      	cmp	r3, #10
 8015c94:	d008      	beq.n	8015ca8 <USART_SetConfig+0x57c>
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c9a:	2b0b      	cmp	r3, #11
 8015c9c:	d102      	bne.n	8015ca4 <USART_SetConfig+0x578>
 8015c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015ca2:	e016      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e014      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015ca8:	2380      	movs	r3, #128	@ 0x80
 8015caa:	e012      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cac:	2340      	movs	r3, #64	@ 0x40
 8015cae:	e010      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cb0:	2320      	movs	r3, #32
 8015cb2:	e00e      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cb4:	2310      	movs	r3, #16
 8015cb6:	e00c      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cb8:	230c      	movs	r3, #12
 8015cba:	e00a      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cbc:	230a      	movs	r3, #10
 8015cbe:	e008      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cc0:	2308      	movs	r3, #8
 8015cc2:	e006      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cc4:	2306      	movs	r3, #6
 8015cc6:	e004      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cc8:	2304      	movs	r3, #4
 8015cca:	e002      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015ccc:	2302      	movs	r3, #2
 8015cce:	e000      	b.n	8015cd2 <USART_SetConfig+0x5a6>
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8015cd8:	005a      	lsls	r2, r3, #1
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	085b      	lsrs	r3, r3, #1
 8015ce0:	441a      	add	r2, r3
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8015cec:	e291      	b.n	8016212 <USART_SetConfig+0xae6>
 8015cee:	f7f7 ff7d 	bl	800dbec <HAL_RCC_GetPCLK2Freq>
 8015cf2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d049      	beq.n	8015d90 <USART_SetConfig+0x664>
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d00:	2b01      	cmp	r3, #1
 8015d02:	d043      	beq.n	8015d8c <USART_SetConfig+0x660>
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d08:	2b02      	cmp	r3, #2
 8015d0a:	d03d      	beq.n	8015d88 <USART_SetConfig+0x65c>
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d10:	2b03      	cmp	r3, #3
 8015d12:	d032      	beq.n	8015d7a <USART_SetConfig+0x64e>
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d18:	2b04      	cmp	r3, #4
 8015d1a:	d02c      	beq.n	8015d76 <USART_SetConfig+0x64a>
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d20:	2b05      	cmp	r3, #5
 8015d22:	d026      	beq.n	8015d72 <USART_SetConfig+0x646>
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d28:	2b06      	cmp	r3, #6
 8015d2a:	d020      	beq.n	8015d6e <USART_SetConfig+0x642>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d30:	2b07      	cmp	r3, #7
 8015d32:	d01a      	beq.n	8015d6a <USART_SetConfig+0x63e>
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d38:	2b08      	cmp	r3, #8
 8015d3a:	d014      	beq.n	8015d66 <USART_SetConfig+0x63a>
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d40:	2b09      	cmp	r3, #9
 8015d42:	d00e      	beq.n	8015d62 <USART_SetConfig+0x636>
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d48:	2b0a      	cmp	r3, #10
 8015d4a:	d008      	beq.n	8015d5e <USART_SetConfig+0x632>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d50:	2b0b      	cmp	r3, #11
 8015d52:	d102      	bne.n	8015d5a <USART_SetConfig+0x62e>
 8015d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015d58:	e01b      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	e019      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d5e:	2380      	movs	r3, #128	@ 0x80
 8015d60:	e017      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d62:	2340      	movs	r3, #64	@ 0x40
 8015d64:	e015      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d66:	2320      	movs	r3, #32
 8015d68:	e013      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d6a:	2310      	movs	r3, #16
 8015d6c:	e011      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d6e:	230c      	movs	r3, #12
 8015d70:	e00f      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d72:	230a      	movs	r3, #10
 8015d74:	e00d      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d76:	2308      	movs	r3, #8
 8015d78:	e00b      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d7a:	2306      	movs	r3, #6
 8015d7c:	e009      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d7e:	bf00      	nop
 8015d80:	40011c00 	.word	0x40011c00
 8015d84:	58024400 	.word	0x58024400
 8015d88:	2304      	movs	r3, #4
 8015d8a:	e002      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d8c:	2302      	movs	r3, #2
 8015d8e:	e000      	b.n	8015d92 <USART_SetConfig+0x666>
 8015d90:	2301      	movs	r3, #1
 8015d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d98:	005a      	lsls	r2, r3, #1
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	085b      	lsrs	r3, r3, #1
 8015da0:	441a      	add	r2, r3
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8015dac:	e231      	b.n	8016212 <USART_SetConfig+0xae6>
 8015dae:	f107 0318 	add.w	r3, r7, #24
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7f9 fdd4 	bl	800f960 <HAL_RCCEx_GetPLL2ClockFreq>
 8015db8:	69fa      	ldr	r2, [r7, #28]
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d044      	beq.n	8015e4c <USART_SetConfig+0x720>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dc6:	2b01      	cmp	r3, #1
 8015dc8:	d03e      	beq.n	8015e48 <USART_SetConfig+0x71c>
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dce:	2b02      	cmp	r3, #2
 8015dd0:	d038      	beq.n	8015e44 <USART_SetConfig+0x718>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dd6:	2b03      	cmp	r3, #3
 8015dd8:	d032      	beq.n	8015e40 <USART_SetConfig+0x714>
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dde:	2b04      	cmp	r3, #4
 8015de0:	d02c      	beq.n	8015e3c <USART_SetConfig+0x710>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015de6:	2b05      	cmp	r3, #5
 8015de8:	d026      	beq.n	8015e38 <USART_SetConfig+0x70c>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dee:	2b06      	cmp	r3, #6
 8015df0:	d020      	beq.n	8015e34 <USART_SetConfig+0x708>
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015df6:	2b07      	cmp	r3, #7
 8015df8:	d01a      	beq.n	8015e30 <USART_SetConfig+0x704>
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dfe:	2b08      	cmp	r3, #8
 8015e00:	d014      	beq.n	8015e2c <USART_SetConfig+0x700>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e06:	2b09      	cmp	r3, #9
 8015e08:	d00e      	beq.n	8015e28 <USART_SetConfig+0x6fc>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e0e:	2b0a      	cmp	r3, #10
 8015e10:	d008      	beq.n	8015e24 <USART_SetConfig+0x6f8>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e16:	2b0b      	cmp	r3, #11
 8015e18:	d102      	bne.n	8015e20 <USART_SetConfig+0x6f4>
 8015e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015e1e:	e016      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e20:	2301      	movs	r3, #1
 8015e22:	e014      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e24:	2380      	movs	r3, #128	@ 0x80
 8015e26:	e012      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e28:	2340      	movs	r3, #64	@ 0x40
 8015e2a:	e010      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e2c:	2320      	movs	r3, #32
 8015e2e:	e00e      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e30:	2310      	movs	r3, #16
 8015e32:	e00c      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e34:	230c      	movs	r3, #12
 8015e36:	e00a      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e38:	230a      	movs	r3, #10
 8015e3a:	e008      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e3c:	2308      	movs	r3, #8
 8015e3e:	e006      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e40:	2306      	movs	r3, #6
 8015e42:	e004      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e44:	2304      	movs	r3, #4
 8015e46:	e002      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e48:	2302      	movs	r3, #2
 8015e4a:	e000      	b.n	8015e4e <USART_SetConfig+0x722>
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e52:	005a      	lsls	r2, r3, #1
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	685b      	ldr	r3, [r3, #4]
 8015e58:	085b      	lsrs	r3, r3, #1
 8015e5a:	441a      	add	r2, r3
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8015e66:	e1d4      	b.n	8016212 <USART_SetConfig+0xae6>
 8015e68:	f107 030c 	add.w	r3, r7, #12
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f7f9 fecb 	bl	800fc08 <HAL_RCCEx_GetPLL3ClockFreq>
 8015e72:	693a      	ldr	r2, [r7, #16]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d044      	beq.n	8015f06 <USART_SetConfig+0x7da>
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	d03e      	beq.n	8015f02 <USART_SetConfig+0x7d6>
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e88:	2b02      	cmp	r3, #2
 8015e8a:	d038      	beq.n	8015efe <USART_SetConfig+0x7d2>
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	d032      	beq.n	8015efa <USART_SetConfig+0x7ce>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e98:	2b04      	cmp	r3, #4
 8015e9a:	d02c      	beq.n	8015ef6 <USART_SetConfig+0x7ca>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ea0:	2b05      	cmp	r3, #5
 8015ea2:	d026      	beq.n	8015ef2 <USART_SetConfig+0x7c6>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ea8:	2b06      	cmp	r3, #6
 8015eaa:	d020      	beq.n	8015eee <USART_SetConfig+0x7c2>
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015eb0:	2b07      	cmp	r3, #7
 8015eb2:	d01a      	beq.n	8015eea <USART_SetConfig+0x7be>
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015eb8:	2b08      	cmp	r3, #8
 8015eba:	d014      	beq.n	8015ee6 <USART_SetConfig+0x7ba>
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ec0:	2b09      	cmp	r3, #9
 8015ec2:	d00e      	beq.n	8015ee2 <USART_SetConfig+0x7b6>
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ec8:	2b0a      	cmp	r3, #10
 8015eca:	d008      	beq.n	8015ede <USART_SetConfig+0x7b2>
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ed0:	2b0b      	cmp	r3, #11
 8015ed2:	d102      	bne.n	8015eda <USART_SetConfig+0x7ae>
 8015ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015ed8:	e016      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015eda:	2301      	movs	r3, #1
 8015edc:	e014      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015ede:	2380      	movs	r3, #128	@ 0x80
 8015ee0:	e012      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015ee2:	2340      	movs	r3, #64	@ 0x40
 8015ee4:	e010      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015ee6:	2320      	movs	r3, #32
 8015ee8:	e00e      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015eea:	2310      	movs	r3, #16
 8015eec:	e00c      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015eee:	230c      	movs	r3, #12
 8015ef0:	e00a      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015ef2:	230a      	movs	r3, #10
 8015ef4:	e008      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015ef6:	2308      	movs	r3, #8
 8015ef8:	e006      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015efa:	2306      	movs	r3, #6
 8015efc:	e004      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015efe:	2304      	movs	r3, #4
 8015f00:	e002      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015f02:	2302      	movs	r3, #2
 8015f04:	e000      	b.n	8015f08 <USART_SetConfig+0x7dc>
 8015f06:	2301      	movs	r3, #1
 8015f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f0c:	005a      	lsls	r2, r3, #1
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	085b      	lsrs	r3, r3, #1
 8015f14:	441a      	add	r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	685b      	ldr	r3, [r3, #4]
 8015f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f20:	e177      	b.n	8016212 <USART_SetConfig+0xae6>
 8015f22:	4b8a      	ldr	r3, [pc, #552]	@ (801614c <USART_SetConfig+0xa20>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	f003 0320 	and.w	r3, r3, #32
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d05d      	beq.n	8015fea <USART_SetConfig+0x8be>
 8015f2e:	4b87      	ldr	r3, [pc, #540]	@ (801614c <USART_SetConfig+0xa20>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	08db      	lsrs	r3, r3, #3
 8015f34:	f003 0303 	and.w	r3, r3, #3
 8015f38:	4a85      	ldr	r2, [pc, #532]	@ (8016150 <USART_SetConfig+0xa24>)
 8015f3a:	40da      	lsrs	r2, r3
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d044      	beq.n	8015fce <USART_SetConfig+0x8a2>
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d03e      	beq.n	8015fca <USART_SetConfig+0x89e>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f50:	2b02      	cmp	r3, #2
 8015f52:	d038      	beq.n	8015fc6 <USART_SetConfig+0x89a>
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f58:	2b03      	cmp	r3, #3
 8015f5a:	d032      	beq.n	8015fc2 <USART_SetConfig+0x896>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f60:	2b04      	cmp	r3, #4
 8015f62:	d02c      	beq.n	8015fbe <USART_SetConfig+0x892>
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f68:	2b05      	cmp	r3, #5
 8015f6a:	d026      	beq.n	8015fba <USART_SetConfig+0x88e>
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f70:	2b06      	cmp	r3, #6
 8015f72:	d020      	beq.n	8015fb6 <USART_SetConfig+0x88a>
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f78:	2b07      	cmp	r3, #7
 8015f7a:	d01a      	beq.n	8015fb2 <USART_SetConfig+0x886>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f80:	2b08      	cmp	r3, #8
 8015f82:	d014      	beq.n	8015fae <USART_SetConfig+0x882>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f88:	2b09      	cmp	r3, #9
 8015f8a:	d00e      	beq.n	8015faa <USART_SetConfig+0x87e>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f90:	2b0a      	cmp	r3, #10
 8015f92:	d008      	beq.n	8015fa6 <USART_SetConfig+0x87a>
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f98:	2b0b      	cmp	r3, #11
 8015f9a:	d102      	bne.n	8015fa2 <USART_SetConfig+0x876>
 8015f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015fa0:	e016      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	e014      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fa6:	2380      	movs	r3, #128	@ 0x80
 8015fa8:	e012      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015faa:	2340      	movs	r3, #64	@ 0x40
 8015fac:	e010      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fae:	2320      	movs	r3, #32
 8015fb0:	e00e      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fb2:	2310      	movs	r3, #16
 8015fb4:	e00c      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fb6:	230c      	movs	r3, #12
 8015fb8:	e00a      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fba:	230a      	movs	r3, #10
 8015fbc:	e008      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fbe:	2308      	movs	r3, #8
 8015fc0:	e006      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fc2:	2306      	movs	r3, #6
 8015fc4:	e004      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fc6:	2304      	movs	r3, #4
 8015fc8:	e002      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fca:	2302      	movs	r3, #2
 8015fcc:	e000      	b.n	8015fd0 <USART_SetConfig+0x8a4>
 8015fce:	2301      	movs	r3, #1
 8015fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fd4:	005a      	lsls	r2, r3, #1
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	085b      	lsrs	r3, r3, #1
 8015fdc:	441a      	add	r2, r3
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	685b      	ldr	r3, [r3, #4]
 8015fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8015fe8:	e113      	b.n	8016212 <USART_SetConfig+0xae6>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d044      	beq.n	801607c <USART_SetConfig+0x950>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ff6:	2b01      	cmp	r3, #1
 8015ff8:	d03e      	beq.n	8016078 <USART_SetConfig+0x94c>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ffe:	2b02      	cmp	r3, #2
 8016000:	d038      	beq.n	8016074 <USART_SetConfig+0x948>
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016006:	2b03      	cmp	r3, #3
 8016008:	d032      	beq.n	8016070 <USART_SetConfig+0x944>
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801600e:	2b04      	cmp	r3, #4
 8016010:	d02c      	beq.n	801606c <USART_SetConfig+0x940>
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016016:	2b05      	cmp	r3, #5
 8016018:	d026      	beq.n	8016068 <USART_SetConfig+0x93c>
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801601e:	2b06      	cmp	r3, #6
 8016020:	d020      	beq.n	8016064 <USART_SetConfig+0x938>
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016026:	2b07      	cmp	r3, #7
 8016028:	d01a      	beq.n	8016060 <USART_SetConfig+0x934>
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801602e:	2b08      	cmp	r3, #8
 8016030:	d014      	beq.n	801605c <USART_SetConfig+0x930>
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016036:	2b09      	cmp	r3, #9
 8016038:	d00e      	beq.n	8016058 <USART_SetConfig+0x92c>
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801603e:	2b0a      	cmp	r3, #10
 8016040:	d008      	beq.n	8016054 <USART_SetConfig+0x928>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016046:	2b0b      	cmp	r3, #11
 8016048:	d102      	bne.n	8016050 <USART_SetConfig+0x924>
 801604a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801604e:	e016      	b.n	801607e <USART_SetConfig+0x952>
 8016050:	2301      	movs	r3, #1
 8016052:	e014      	b.n	801607e <USART_SetConfig+0x952>
 8016054:	2380      	movs	r3, #128	@ 0x80
 8016056:	e012      	b.n	801607e <USART_SetConfig+0x952>
 8016058:	2340      	movs	r3, #64	@ 0x40
 801605a:	e010      	b.n	801607e <USART_SetConfig+0x952>
 801605c:	2320      	movs	r3, #32
 801605e:	e00e      	b.n	801607e <USART_SetConfig+0x952>
 8016060:	2310      	movs	r3, #16
 8016062:	e00c      	b.n	801607e <USART_SetConfig+0x952>
 8016064:	230c      	movs	r3, #12
 8016066:	e00a      	b.n	801607e <USART_SetConfig+0x952>
 8016068:	230a      	movs	r3, #10
 801606a:	e008      	b.n	801607e <USART_SetConfig+0x952>
 801606c:	2308      	movs	r3, #8
 801606e:	e006      	b.n	801607e <USART_SetConfig+0x952>
 8016070:	2306      	movs	r3, #6
 8016072:	e004      	b.n	801607e <USART_SetConfig+0x952>
 8016074:	2304      	movs	r3, #4
 8016076:	e002      	b.n	801607e <USART_SetConfig+0x952>
 8016078:	2302      	movs	r3, #2
 801607a:	e000      	b.n	801607e <USART_SetConfig+0x952>
 801607c:	2301      	movs	r3, #1
 801607e:	4a34      	ldr	r2, [pc, #208]	@ (8016150 <USART_SetConfig+0xa24>)
 8016080:	fbb2 f3f3 	udiv	r3, r2, r3
 8016084:	005a      	lsls	r2, r3, #1
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	085b      	lsrs	r3, r3, #1
 801608c:	441a      	add	r2, r3
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	685b      	ldr	r3, [r3, #4]
 8016092:	fbb2 f3f3 	udiv	r3, r2, r3
 8016096:	633b      	str	r3, [r7, #48]	@ 0x30
 8016098:	e0bb      	b.n	8016212 <USART_SetConfig+0xae6>
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d044      	beq.n	801612c <USART_SetConfig+0xa00>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	d03e      	beq.n	8016128 <USART_SetConfig+0x9fc>
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ae:	2b02      	cmp	r3, #2
 80160b0:	d038      	beq.n	8016124 <USART_SetConfig+0x9f8>
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160b6:	2b03      	cmp	r3, #3
 80160b8:	d032      	beq.n	8016120 <USART_SetConfig+0x9f4>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160be:	2b04      	cmp	r3, #4
 80160c0:	d02c      	beq.n	801611c <USART_SetConfig+0x9f0>
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160c6:	2b05      	cmp	r3, #5
 80160c8:	d026      	beq.n	8016118 <USART_SetConfig+0x9ec>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ce:	2b06      	cmp	r3, #6
 80160d0:	d020      	beq.n	8016114 <USART_SetConfig+0x9e8>
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160d6:	2b07      	cmp	r3, #7
 80160d8:	d01a      	beq.n	8016110 <USART_SetConfig+0x9e4>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160de:	2b08      	cmp	r3, #8
 80160e0:	d014      	beq.n	801610c <USART_SetConfig+0x9e0>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160e6:	2b09      	cmp	r3, #9
 80160e8:	d00e      	beq.n	8016108 <USART_SetConfig+0x9dc>
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ee:	2b0a      	cmp	r3, #10
 80160f0:	d008      	beq.n	8016104 <USART_SetConfig+0x9d8>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160f6:	2b0b      	cmp	r3, #11
 80160f8:	d102      	bne.n	8016100 <USART_SetConfig+0x9d4>
 80160fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80160fe:	e016      	b.n	801612e <USART_SetConfig+0xa02>
 8016100:	2301      	movs	r3, #1
 8016102:	e014      	b.n	801612e <USART_SetConfig+0xa02>
 8016104:	2380      	movs	r3, #128	@ 0x80
 8016106:	e012      	b.n	801612e <USART_SetConfig+0xa02>
 8016108:	2340      	movs	r3, #64	@ 0x40
 801610a:	e010      	b.n	801612e <USART_SetConfig+0xa02>
 801610c:	2320      	movs	r3, #32
 801610e:	e00e      	b.n	801612e <USART_SetConfig+0xa02>
 8016110:	2310      	movs	r3, #16
 8016112:	e00c      	b.n	801612e <USART_SetConfig+0xa02>
 8016114:	230c      	movs	r3, #12
 8016116:	e00a      	b.n	801612e <USART_SetConfig+0xa02>
 8016118:	230a      	movs	r3, #10
 801611a:	e008      	b.n	801612e <USART_SetConfig+0xa02>
 801611c:	2308      	movs	r3, #8
 801611e:	e006      	b.n	801612e <USART_SetConfig+0xa02>
 8016120:	2306      	movs	r3, #6
 8016122:	e004      	b.n	801612e <USART_SetConfig+0xa02>
 8016124:	2304      	movs	r3, #4
 8016126:	e002      	b.n	801612e <USART_SetConfig+0xa02>
 8016128:	2302      	movs	r3, #2
 801612a:	e000      	b.n	801612e <USART_SetConfig+0xa02>
 801612c:	2301      	movs	r3, #1
 801612e:	4a09      	ldr	r2, [pc, #36]	@ (8016154 <USART_SetConfig+0xa28>)
 8016130:	fbb2 f3f3 	udiv	r3, r2, r3
 8016134:	005a      	lsls	r2, r3, #1
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	685b      	ldr	r3, [r3, #4]
 801613a:	085b      	lsrs	r3, r3, #1
 801613c:	441a      	add	r2, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	fbb2 f3f3 	udiv	r3, r2, r3
 8016146:	633b      	str	r3, [r7, #48]	@ 0x30
 8016148:	e063      	b.n	8016212 <USART_SetConfig+0xae6>
 801614a:	bf00      	nop
 801614c:	58024400 	.word	0x58024400
 8016150:	03d09000 	.word	0x03d09000
 8016154:	003d0900 	.word	0x003d0900
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801615c:	2b00      	cmp	r3, #0
 801615e:	d044      	beq.n	80161ea <USART_SetConfig+0xabe>
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016164:	2b01      	cmp	r3, #1
 8016166:	d03e      	beq.n	80161e6 <USART_SetConfig+0xaba>
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801616c:	2b02      	cmp	r3, #2
 801616e:	d038      	beq.n	80161e2 <USART_SetConfig+0xab6>
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016174:	2b03      	cmp	r3, #3
 8016176:	d032      	beq.n	80161de <USART_SetConfig+0xab2>
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801617c:	2b04      	cmp	r3, #4
 801617e:	d02c      	beq.n	80161da <USART_SetConfig+0xaae>
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016184:	2b05      	cmp	r3, #5
 8016186:	d026      	beq.n	80161d6 <USART_SetConfig+0xaaa>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801618c:	2b06      	cmp	r3, #6
 801618e:	d020      	beq.n	80161d2 <USART_SetConfig+0xaa6>
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016194:	2b07      	cmp	r3, #7
 8016196:	d01a      	beq.n	80161ce <USART_SetConfig+0xaa2>
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801619c:	2b08      	cmp	r3, #8
 801619e:	d014      	beq.n	80161ca <USART_SetConfig+0xa9e>
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161a4:	2b09      	cmp	r3, #9
 80161a6:	d00e      	beq.n	80161c6 <USART_SetConfig+0xa9a>
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ac:	2b0a      	cmp	r3, #10
 80161ae:	d008      	beq.n	80161c2 <USART_SetConfig+0xa96>
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161b4:	2b0b      	cmp	r3, #11
 80161b6:	d102      	bne.n	80161be <USART_SetConfig+0xa92>
 80161b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80161bc:	e016      	b.n	80161ec <USART_SetConfig+0xac0>
 80161be:	2301      	movs	r3, #1
 80161c0:	e014      	b.n	80161ec <USART_SetConfig+0xac0>
 80161c2:	2380      	movs	r3, #128	@ 0x80
 80161c4:	e012      	b.n	80161ec <USART_SetConfig+0xac0>
 80161c6:	2340      	movs	r3, #64	@ 0x40
 80161c8:	e010      	b.n	80161ec <USART_SetConfig+0xac0>
 80161ca:	2320      	movs	r3, #32
 80161cc:	e00e      	b.n	80161ec <USART_SetConfig+0xac0>
 80161ce:	2310      	movs	r3, #16
 80161d0:	e00c      	b.n	80161ec <USART_SetConfig+0xac0>
 80161d2:	230c      	movs	r3, #12
 80161d4:	e00a      	b.n	80161ec <USART_SetConfig+0xac0>
 80161d6:	230a      	movs	r3, #10
 80161d8:	e008      	b.n	80161ec <USART_SetConfig+0xac0>
 80161da:	2308      	movs	r3, #8
 80161dc:	e006      	b.n	80161ec <USART_SetConfig+0xac0>
 80161de:	2306      	movs	r3, #6
 80161e0:	e004      	b.n	80161ec <USART_SetConfig+0xac0>
 80161e2:	2304      	movs	r3, #4
 80161e4:	e002      	b.n	80161ec <USART_SetConfig+0xac0>
 80161e6:	2302      	movs	r3, #2
 80161e8:	e000      	b.n	80161ec <USART_SetConfig+0xac0>
 80161ea:	2301      	movs	r3, #1
 80161ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80161f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80161f4:	005a      	lsls	r2, r3, #1
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	085b      	lsrs	r3, r3, #1
 80161fc:	441a      	add	r2, r3
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	fbb2 f3f3 	udiv	r3, r2, r3
 8016206:	633b      	str	r3, [r7, #48]	@ 0x30
 8016208:	e003      	b.n	8016212 <USART_SetConfig+0xae6>
 801620a:	2301      	movs	r3, #1
 801620c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8016210:	bf00      	nop
 8016212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016214:	2b0f      	cmp	r3, #15
 8016216:	d916      	bls.n	8016246 <USART_SetConfig+0xb1a>
 8016218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801621a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801621e:	d212      	bcs.n	8016246 <USART_SetConfig+0xb1a>
 8016220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016222:	b29b      	uxth	r3, r3
 8016224:	f023 030f 	bic.w	r3, r3, #15
 8016228:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801622c:	085b      	lsrs	r3, r3, #1
 801622e:	b29b      	uxth	r3, r3
 8016230:	f003 0307 	and.w	r3, r3, #7
 8016234:	b29a      	uxth	r2, r3
 8016236:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016238:	4313      	orrs	r3, r2
 801623a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016242:	60da      	str	r2, [r3, #12]
 8016244:	e002      	b.n	801624c <USART_SetConfig+0xb20>
 8016246:	2301      	movs	r3, #1
 8016248:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2201      	movs	r2, #1
 8016250:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	2201      	movs	r2, #1
 8016256:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	2200      	movs	r2, #0
 801625c:	649a      	str	r2, [r3, #72]	@ 0x48
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2200      	movs	r2, #0
 8016262:	64da      	str	r2, [r3, #76]	@ 0x4c
 8016264:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016268:	4618      	mov	r0, r3
 801626a:	3738      	adds	r7, #56	@ 0x38
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}

08016270 <USART_CheckIdleState>:
 8016270:	b580      	push	{r7, lr}
 8016272:	b086      	sub	sp, #24
 8016274:	af02      	add	r7, sp, #8
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801627e:	f7f2 fbd9 	bl	8008a34 <HAL_GetTick>
 8016282:	60f8      	str	r0, [r7, #12]
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	f003 0308 	and.w	r3, r3, #8
 801628e:	2b08      	cmp	r3, #8
 8016290:	d10e      	bne.n	80162b0 <USART_CheckIdleState+0x40>
 8016292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016296:	9300      	str	r3, [sp, #0]
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2200      	movs	r2, #0
 801629c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7ff fa0d 	bl	80156c0 <USART_WaitOnFlagUntilTimeout>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d001      	beq.n	80162b0 <USART_CheckIdleState+0x40>
 80162ac:	2303      	movs	r3, #3
 80162ae:	e01e      	b.n	80162ee <USART_CheckIdleState+0x7e>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	f003 0304 	and.w	r3, r3, #4
 80162ba:	2b04      	cmp	r3, #4
 80162bc:	d10e      	bne.n	80162dc <USART_CheckIdleState+0x6c>
 80162be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80162c2:	9300      	str	r3, [sp, #0]
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f7ff f9f7 	bl	80156c0 <USART_WaitOnFlagUntilTimeout>
 80162d2:	4603      	mov	r3, r0
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d001      	beq.n	80162dc <USART_CheckIdleState+0x6c>
 80162d8:	2303      	movs	r3, #3
 80162da:	e008      	b.n	80162ee <USART_CheckIdleState+0x7e>
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2201      	movs	r2, #1
 80162e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2200      	movs	r2, #0
 80162e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80162ec:	2300      	movs	r3, #0
 80162ee:	4618      	mov	r0, r3
 80162f0:	3710      	adds	r7, #16
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <HAL_USARTEx_EnableSlaveMode>:
 80162f6:	b480      	push	{r7}
 80162f8:	b085      	sub	sp, #20
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8016304:	2b01      	cmp	r3, #1
 8016306:	d101      	bne.n	801630c <HAL_USARTEx_EnableSlaveMode+0x16>
 8016308:	2302      	movs	r3, #2
 801630a:	e043      	b.n	8016394 <HAL_USARTEx_EnableSlaveMode+0x9e>
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2201      	movs	r2, #1
 8016310:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2202      	movs	r2, #2
 8016318:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	60fb      	str	r3, [r7, #12]
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	f022 0201 	bic.w	r2, r2, #1
 8016332:	601a      	str	r2, [r3, #0]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	685a      	ldr	r2, [r3, #4]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8016342:	605a      	str	r2, [r3, #4]
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	689a      	ldr	r2, [r3, #8]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8016352:	609a      	str	r2, [r3, #8]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	685a      	ldr	r2, [r3, #4]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	f042 0201 	orr.w	r2, r2, #1
 8016362:	605a      	str	r2, [r3, #4]
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	601a      	str	r2, [r3, #0]
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2201      	movs	r2, #1
 8016370:	641a      	str	r2, [r3, #64]	@ 0x40
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2201      	movs	r2, #1
 8016376:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	681a      	ldr	r2, [r3, #0]
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	f042 0201 	orr.w	r2, r2, #1
 8016388:	601a      	str	r2, [r3, #0]
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2200      	movs	r2, #0
 801638e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8016392:	2300      	movs	r3, #0
 8016394:	4618      	mov	r0, r3
 8016396:	3714      	adds	r7, #20
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr

080163a0 <HAL_USARTEx_ConfigNSS>:
 80163a0:	b480      	push	{r7}
 80163a2:	b085      	sub	sp, #20
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d101      	bne.n	80163b8 <HAL_USARTEx_ConfigNSS+0x18>
 80163b4:	2302      	movs	r3, #2
 80163b6:	e02a      	b.n	801640e <HAL_USARTEx_ConfigNSS+0x6e>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2201      	movs	r2, #1
 80163bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2202      	movs	r2, #2
 80163c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	60fb      	str	r3, [r7, #12]
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	681a      	ldr	r2, [r3, #0]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	f022 0201 	bic.w	r2, r2, #1
 80163de:	601a      	str	r2, [r3, #0]
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	f023 0108 	bic.w	r1, r3, #8
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	683a      	ldr	r2, [r7, #0]
 80163f0:	430a      	orrs	r2, r1
 80163f2:	605a      	str	r2, [r3, #4]
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	68fa      	ldr	r2, [r7, #12]
 80163fa:	601a      	str	r2, [r3, #0]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2201      	movs	r2, #1
 8016400:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2200      	movs	r2, #0
 8016408:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 801640c:	2300      	movs	r3, #0
 801640e:	4618      	mov	r0, r3
 8016410:	3714      	adds	r7, #20
 8016412:	46bd      	mov	sp, r7
 8016414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016418:	4770      	bx	lr

0801641a <HAL_USARTEx_DisableFifoMode>:
 801641a:	b480      	push	{r7}
 801641c:	b085      	sub	sp, #20
 801641e:	af00      	add	r7, sp, #0
 8016420:	6078      	str	r0, [r7, #4]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8016428:	2b01      	cmp	r3, #1
 801642a:	d101      	bne.n	8016430 <HAL_USARTEx_DisableFifoMode+0x16>
 801642c:	2302      	movs	r3, #2
 801642e:	e027      	b.n	8016480 <HAL_USARTEx_DisableFifoMode+0x66>
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2201      	movs	r2, #1
 8016434:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2202      	movs	r2, #2
 801643c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	60fb      	str	r3, [r7, #12]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	681a      	ldr	r2, [r3, #0]
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f022 0201 	bic.w	r2, r2, #1
 8016456:	601a      	str	r2, [r3, #0]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801645e:	60fb      	str	r3, [r7, #12]
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2200      	movs	r2, #0
 8016464:	645a      	str	r2, [r3, #68]	@ 0x44
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	68fa      	ldr	r2, [r7, #12]
 801646c:	601a      	str	r2, [r3, #0]
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	2201      	movs	r2, #1
 8016472:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2200      	movs	r2, #0
 801647a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 801647e:	2300      	movs	r3, #0
 8016480:	4618      	mov	r0, r3
 8016482:	3714      	adds	r7, #20
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr

0801648c <HAL_USARTEx_SetTxFifoThreshold>:
 801648c:	b580      	push	{r7, lr}
 801648e:	b084      	sub	sp, #16
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6039      	str	r1, [r7, #0]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801649c:	2b01      	cmp	r3, #1
 801649e:	d101      	bne.n	80164a4 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80164a0:	2302      	movs	r3, #2
 80164a2:	e02d      	b.n	8016500 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	2201      	movs	r2, #1
 80164a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2202      	movs	r2, #2
 80164b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	60fb      	str	r3, [r7, #12]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	681a      	ldr	r2, [r3, #0]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f022 0201 	bic.w	r2, r2, #1
 80164ca:	601a      	str	r2, [r3, #0]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	689b      	ldr	r3, [r3, #8]
 80164d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	683a      	ldr	r2, [r7, #0]
 80164dc:	430a      	orrs	r2, r1
 80164de:	609a      	str	r2, [r3, #8]
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f000 f84f 	bl	8016584 <USARTEx_SetNbDataToProcess>
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	68fa      	ldr	r2, [r7, #12]
 80164ec:	601a      	str	r2, [r3, #0]
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2201      	movs	r2, #1
 80164f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2200      	movs	r2, #0
 80164fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80164fe:	2300      	movs	r3, #0
 8016500:	4618      	mov	r0, r3
 8016502:	3710      	adds	r7, #16
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}

08016508 <HAL_USARTEx_SetRxFifoThreshold>:
 8016508:	b580      	push	{r7, lr}
 801650a:	b084      	sub	sp, #16
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8016518:	2b01      	cmp	r3, #1
 801651a:	d101      	bne.n	8016520 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 801651c:	2302      	movs	r3, #2
 801651e:	e02d      	b.n	801657c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2201      	movs	r2, #1
 8016524:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2202      	movs	r2, #2
 801652c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	60fb      	str	r3, [r7, #12]
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f022 0201 	bic.w	r2, r2, #1
 8016546:	601a      	str	r2, [r3, #0]
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	689b      	ldr	r3, [r3, #8]
 801654e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	683a      	ldr	r2, [r7, #0]
 8016558:	430a      	orrs	r2, r1
 801655a:	609a      	str	r2, [r3, #8]
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f000 f811 	bl	8016584 <USARTEx_SetNbDataToProcess>
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	68fa      	ldr	r2, [r7, #12]
 8016568:	601a      	str	r2, [r3, #0]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2201      	movs	r2, #1
 801656e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2200      	movs	r2, #0
 8016576:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 801657a:	2300      	movs	r3, #0
 801657c:	4618      	mov	r0, r3
 801657e:	3710      	adds	r7, #16
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}

08016584 <USARTEx_SetNbDataToProcess>:
 8016584:	b480      	push	{r7}
 8016586:	b085      	sub	sp, #20
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016590:	2b00      	cmp	r3, #0
 8016592:	d106      	bne.n	80165a2 <USARTEx_SetNbDataToProcess+0x1e>
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2201      	movs	r2, #1
 8016598:	879a      	strh	r2, [r3, #60]	@ 0x3c
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2201      	movs	r2, #1
 801659e:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80165a0:	e02f      	b.n	8016602 <USARTEx_SetNbDataToProcess+0x7e>
 80165a2:	2310      	movs	r3, #16
 80165a4:	73fb      	strb	r3, [r7, #15]
 80165a6:	2310      	movs	r3, #16
 80165a8:	73bb      	strb	r3, [r7, #14]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	689b      	ldr	r3, [r3, #8]
 80165b0:	0e5b      	lsrs	r3, r3, #25
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	f003 0307 	and.w	r3, r3, #7
 80165b8:	737b      	strb	r3, [r7, #13]
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	689b      	ldr	r3, [r3, #8]
 80165c0:	0f5b      	lsrs	r3, r3, #29
 80165c2:	b2db      	uxtb	r3, r3
 80165c4:	f003 0307 	and.w	r3, r3, #7
 80165c8:	733b      	strb	r3, [r7, #12]
 80165ca:	7bbb      	ldrb	r3, [r7, #14]
 80165cc:	7b3a      	ldrb	r2, [r7, #12]
 80165ce:	4910      	ldr	r1, [pc, #64]	@ (8016610 <USARTEx_SetNbDataToProcess+0x8c>)
 80165d0:	5c8a      	ldrb	r2, [r1, r2]
 80165d2:	fb02 f303 	mul.w	r3, r2, r3
 80165d6:	7b3a      	ldrb	r2, [r7, #12]
 80165d8:	490e      	ldr	r1, [pc, #56]	@ (8016614 <USARTEx_SetNbDataToProcess+0x90>)
 80165da:	5c8a      	ldrb	r2, [r1, r2]
 80165dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80165e0:	b29a      	uxth	r2, r3
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80165e6:	7bfb      	ldrb	r3, [r7, #15]
 80165e8:	7b7a      	ldrb	r2, [r7, #13]
 80165ea:	4909      	ldr	r1, [pc, #36]	@ (8016610 <USARTEx_SetNbDataToProcess+0x8c>)
 80165ec:	5c8a      	ldrb	r2, [r1, r2]
 80165ee:	fb02 f303 	mul.w	r3, r2, r3
 80165f2:	7b7a      	ldrb	r2, [r7, #13]
 80165f4:	4907      	ldr	r1, [pc, #28]	@ (8016614 <USARTEx_SetNbDataToProcess+0x90>)
 80165f6:	5c8a      	ldrb	r2, [r1, r2]
 80165f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80165fc:	b29a      	uxth	r2, r3
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8016602:	bf00      	nop
 8016604:	3714      	adds	r7, #20
 8016606:	46bd      	mov	sp, r7
 8016608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660c:	4770      	bx	lr
 801660e:	bf00      	nop
 8016610:	0801cb4c 	.word	0x0801cb4c
 8016614:	0801cb54 	.word	0x0801cb54

08016618 <SDMMC_Init>:
 8016618:	b084      	sub	sp, #16
 801661a:	b480      	push	{r7}
 801661c:	b085      	sub	sp, #20
 801661e:	af00      	add	r7, sp, #0
 8016620:	6078      	str	r0, [r7, #4]
 8016622:	f107 001c 	add.w	r0, r7, #28
 8016626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801662a:	2300      	movs	r3, #0
 801662c:	60fb      	str	r3, [r7, #12]
 801662e:	69fa      	ldr	r2, [r7, #28]
 8016630:	6a3b      	ldr	r3, [r7, #32]
 8016632:	431a      	orrs	r2, r3
 8016634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016636:	431a      	orrs	r2, r3
 8016638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801663a:	431a      	orrs	r2, r3
 801663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801663e:	4313      	orrs	r3, r2
 8016640:	68fa      	ldr	r2, [r7, #12]
 8016642:	4313      	orrs	r3, r2
 8016644:	60fb      	str	r3, [r7, #12]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	685a      	ldr	r2, [r3, #4]
 801664a:	4b07      	ldr	r3, [pc, #28]	@ (8016668 <SDMMC_Init+0x50>)
 801664c:	4013      	ands	r3, r2
 801664e:	68fa      	ldr	r2, [r7, #12]
 8016650:	431a      	orrs	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	605a      	str	r2, [r3, #4]
 8016656:	2300      	movs	r3, #0
 8016658:	4618      	mov	r0, r3
 801665a:	3714      	adds	r7, #20
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	b004      	add	sp, #16
 8016664:	4770      	bx	lr
 8016666:	bf00      	nop
 8016668:	ffc02c00 	.word	0xffc02c00

0801666c <SDMMC_ReadFIFO>:
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801667a:	4618      	mov	r0, r3
 801667c:	370c      	adds	r7, #12
 801667e:	46bd      	mov	sp, r7
 8016680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016684:	4770      	bx	lr

08016686 <SDMMC_WriteFIFO>:
 8016686:	b480      	push	{r7}
 8016688:	b083      	sub	sp, #12
 801668a:	af00      	add	r7, sp, #0
 801668c:	6078      	str	r0, [r7, #4]
 801668e:	6039      	str	r1, [r7, #0]
 8016690:	683b      	ldr	r3, [r7, #0]
 8016692:	681a      	ldr	r2, [r3, #0]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 801669a:	2300      	movs	r3, #0
 801669c:	4618      	mov	r0, r3
 801669e:	370c      	adds	r7, #12
 80166a0:	46bd      	mov	sp, r7
 80166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a6:	4770      	bx	lr

080166a8 <SDMMC_PowerState_ON>:
 80166a8:	b480      	push	{r7}
 80166aa:	b083      	sub	sp, #12
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f043 0203 	orr.w	r2, r3, #3
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	601a      	str	r2, [r3, #0]
 80166bc:	2300      	movs	r3, #0
 80166be:	4618      	mov	r0, r3
 80166c0:	370c      	adds	r7, #12
 80166c2:	46bd      	mov	sp, r7
 80166c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c8:	4770      	bx	lr

080166ca <SDMMC_GetPowerState>:
 80166ca:	b480      	push	{r7}
 80166cc:	b083      	sub	sp, #12
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	6078      	str	r0, [r7, #4]
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	f003 0303 	and.w	r3, r3, #3
 80166da:	4618      	mov	r0, r3
 80166dc:	370c      	adds	r7, #12
 80166de:	46bd      	mov	sp, r7
 80166e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e4:	4770      	bx	lr
	...

080166e8 <SDMMC_SendCommand>:
 80166e8:	b480      	push	{r7}
 80166ea:	b085      	sub	sp, #20
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	6039      	str	r1, [r7, #0]
 80166f2:	2300      	movs	r3, #0
 80166f4:	60fb      	str	r3, [r7, #12]
 80166f6:	683b      	ldr	r3, [r7, #0]
 80166f8:	681a      	ldr	r2, [r3, #0]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	609a      	str	r2, [r3, #8]
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	685a      	ldr	r2, [r3, #4]
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	689b      	ldr	r3, [r3, #8]
 8016706:	431a      	orrs	r2, r3
 8016708:	683b      	ldr	r3, [r7, #0]
 801670a:	68db      	ldr	r3, [r3, #12]
 801670c:	431a      	orrs	r2, r3
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	691b      	ldr	r3, [r3, #16]
 8016712:	4313      	orrs	r3, r2
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	4313      	orrs	r3, r2
 8016718:	60fb      	str	r3, [r7, #12]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	68da      	ldr	r2, [r3, #12]
 801671e:	4b06      	ldr	r3, [pc, #24]	@ (8016738 <SDMMC_SendCommand+0x50>)
 8016720:	4013      	ands	r3, r2
 8016722:	68fa      	ldr	r2, [r7, #12]
 8016724:	431a      	orrs	r2, r3
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	60da      	str	r2, [r3, #12]
 801672a:	2300      	movs	r3, #0
 801672c:	4618      	mov	r0, r3
 801672e:	3714      	adds	r7, #20
 8016730:	46bd      	mov	sp, r7
 8016732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016736:	4770      	bx	lr
 8016738:	fffee0c0 	.word	0xfffee0c0

0801673c <SDMMC_GetCommandResponse>:
 801673c:	b480      	push	{r7}
 801673e:	b083      	sub	sp, #12
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	691b      	ldr	r3, [r3, #16]
 8016748:	b2db      	uxtb	r3, r3
 801674a:	4618      	mov	r0, r3
 801674c:	370c      	adds	r7, #12
 801674e:	46bd      	mov	sp, r7
 8016750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016754:	4770      	bx	lr

08016756 <SDMMC_GetResponse>:
 8016756:	b480      	push	{r7}
 8016758:	b085      	sub	sp, #20
 801675a:	af00      	add	r7, sp, #0
 801675c:	6078      	str	r0, [r7, #4]
 801675e:	6039      	str	r1, [r7, #0]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	3314      	adds	r3, #20
 8016764:	461a      	mov	r2, r3
 8016766:	683b      	ldr	r3, [r7, #0]
 8016768:	4413      	add	r3, r2
 801676a:	60fb      	str	r3, [r7, #12]
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	4618      	mov	r0, r3
 8016772:	3714      	adds	r7, #20
 8016774:	46bd      	mov	sp, r7
 8016776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677a:	4770      	bx	lr

0801677c <SDMMC_ConfigData>:
 801677c:	b480      	push	{r7}
 801677e:	b085      	sub	sp, #20
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
 8016784:	6039      	str	r1, [r7, #0]
 8016786:	2300      	movs	r3, #0
 8016788:	60fb      	str	r3, [r7, #12]
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	681a      	ldr	r2, [r3, #0]
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	625a      	str	r2, [r3, #36]	@ 0x24
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	685a      	ldr	r2, [r3, #4]
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	629a      	str	r2, [r3, #40]	@ 0x28
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	689a      	ldr	r2, [r3, #8]
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	68db      	ldr	r3, [r3, #12]
 80167a2:	431a      	orrs	r2, r3
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	691b      	ldr	r3, [r3, #16]
 80167a8:	431a      	orrs	r2, r3
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	695b      	ldr	r3, [r3, #20]
 80167ae:	4313      	orrs	r3, r2
 80167b0:	68fa      	ldr	r2, [r7, #12]
 80167b2:	4313      	orrs	r3, r2
 80167b4:	60fb      	str	r3, [r7, #12]
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	431a      	orrs	r2, r3
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80167c6:	2300      	movs	r3, #0
 80167c8:	4618      	mov	r0, r3
 80167ca:	3714      	adds	r7, #20
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr

080167d4 <SDMMC_CmdBlockLength>:
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b088      	sub	sp, #32
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	60bb      	str	r3, [r7, #8]
 80167e2:	2310      	movs	r3, #16
 80167e4:	60fb      	str	r3, [r7, #12]
 80167e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80167ea:	613b      	str	r3, [r7, #16]
 80167ec:	2300      	movs	r3, #0
 80167ee:	617b      	str	r3, [r7, #20]
 80167f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80167f4:	61bb      	str	r3, [r7, #24]
 80167f6:	f107 0308 	add.w	r3, r7, #8
 80167fa:	4619      	mov	r1, r3
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	f7ff ff73 	bl	80166e8 <SDMMC_SendCommand>
 8016802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016806:	2110      	movs	r1, #16
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f000 fa5f 	bl	8016ccc <SDMMC_GetCmdResp1>
 801680e:	61f8      	str	r0, [r7, #28]
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	4618      	mov	r0, r3
 8016814:	3720      	adds	r7, #32
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}

0801681a <SDMMC_CmdReadSingleBlock>:
 801681a:	b580      	push	{r7, lr}
 801681c:	b088      	sub	sp, #32
 801681e:	af00      	add	r7, sp, #0
 8016820:	6078      	str	r0, [r7, #4]
 8016822:	6039      	str	r1, [r7, #0]
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	60bb      	str	r3, [r7, #8]
 8016828:	2311      	movs	r3, #17
 801682a:	60fb      	str	r3, [r7, #12]
 801682c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016830:	613b      	str	r3, [r7, #16]
 8016832:	2300      	movs	r3, #0
 8016834:	617b      	str	r3, [r7, #20]
 8016836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801683a:	61bb      	str	r3, [r7, #24]
 801683c:	f107 0308 	add.w	r3, r7, #8
 8016840:	4619      	mov	r1, r3
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7ff ff50 	bl	80166e8 <SDMMC_SendCommand>
 8016848:	f241 3288 	movw	r2, #5000	@ 0x1388
 801684c:	2111      	movs	r1, #17
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f000 fa3c 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016854:	61f8      	str	r0, [r7, #28]
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	4618      	mov	r0, r3
 801685a:	3720      	adds	r7, #32
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <SDMMC_CmdReadMultiBlock>:
 8016860:	b580      	push	{r7, lr}
 8016862:	b088      	sub	sp, #32
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	60bb      	str	r3, [r7, #8]
 801686e:	2312      	movs	r3, #18
 8016870:	60fb      	str	r3, [r7, #12]
 8016872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016876:	613b      	str	r3, [r7, #16]
 8016878:	2300      	movs	r3, #0
 801687a:	617b      	str	r3, [r7, #20]
 801687c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016880:	61bb      	str	r3, [r7, #24]
 8016882:	f107 0308 	add.w	r3, r7, #8
 8016886:	4619      	mov	r1, r3
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f7ff ff2d 	bl	80166e8 <SDMMC_SendCommand>
 801688e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016892:	2112      	movs	r1, #18
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f000 fa19 	bl	8016ccc <SDMMC_GetCmdResp1>
 801689a:	61f8      	str	r0, [r7, #28]
 801689c:	69fb      	ldr	r3, [r7, #28]
 801689e:	4618      	mov	r0, r3
 80168a0:	3720      	adds	r7, #32
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}

080168a6 <SDMMC_CmdWriteSingleBlock>:
 80168a6:	b580      	push	{r7, lr}
 80168a8:	b088      	sub	sp, #32
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	6078      	str	r0, [r7, #4]
 80168ae:	6039      	str	r1, [r7, #0]
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	60bb      	str	r3, [r7, #8]
 80168b4:	2318      	movs	r3, #24
 80168b6:	60fb      	str	r3, [r7, #12]
 80168b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80168bc:	613b      	str	r3, [r7, #16]
 80168be:	2300      	movs	r3, #0
 80168c0:	617b      	str	r3, [r7, #20]
 80168c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80168c6:	61bb      	str	r3, [r7, #24]
 80168c8:	f107 0308 	add.w	r3, r7, #8
 80168cc:	4619      	mov	r1, r3
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f7ff ff0a 	bl	80166e8 <SDMMC_SendCommand>
 80168d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80168d8:	2118      	movs	r1, #24
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f000 f9f6 	bl	8016ccc <SDMMC_GetCmdResp1>
 80168e0:	61f8      	str	r0, [r7, #28]
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	4618      	mov	r0, r3
 80168e6:	3720      	adds	r7, #32
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <SDMMC_CmdWriteMultiBlock>:
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b088      	sub	sp, #32
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	6039      	str	r1, [r7, #0]
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	60bb      	str	r3, [r7, #8]
 80168fa:	2319      	movs	r3, #25
 80168fc:	60fb      	str	r3, [r7, #12]
 80168fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016902:	613b      	str	r3, [r7, #16]
 8016904:	2300      	movs	r3, #0
 8016906:	617b      	str	r3, [r7, #20]
 8016908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801690c:	61bb      	str	r3, [r7, #24]
 801690e:	f107 0308 	add.w	r3, r7, #8
 8016912:	4619      	mov	r1, r3
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f7ff fee7 	bl	80166e8 <SDMMC_SendCommand>
 801691a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801691e:	2119      	movs	r1, #25
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	f000 f9d3 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016926:	61f8      	str	r0, [r7, #28]
 8016928:	69fb      	ldr	r3, [r7, #28]
 801692a:	4618      	mov	r0, r3
 801692c:	3720      	adds	r7, #32
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
	...

08016934 <SDMMC_CmdStopTransfer>:
 8016934:	b580      	push	{r7, lr}
 8016936:	b088      	sub	sp, #32
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
 801693c:	2300      	movs	r3, #0
 801693e:	60bb      	str	r3, [r7, #8]
 8016940:	230c      	movs	r3, #12
 8016942:	60fb      	str	r3, [r7, #12]
 8016944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016948:	613b      	str	r3, [r7, #16]
 801694a:	2300      	movs	r3, #0
 801694c:	617b      	str	r3, [r7, #20]
 801694e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016952:	61bb      	str	r3, [r7, #24]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	68db      	ldr	r3, [r3, #12]
 8016958:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	60da      	str	r2, [r3, #12]
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	68db      	ldr	r3, [r3, #12]
 8016964:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	60da      	str	r2, [r3, #12]
 801696c:	f107 0308 	add.w	r3, r7, #8
 8016970:	4619      	mov	r1, r3
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7ff feb8 	bl	80166e8 <SDMMC_SendCommand>
 8016978:	4a0b      	ldr	r2, [pc, #44]	@ (80169a8 <SDMMC_CmdStopTransfer+0x74>)
 801697a:	210c      	movs	r1, #12
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 f9a5 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016982:	61f8      	str	r0, [r7, #28]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	68db      	ldr	r3, [r3, #12]
 8016988:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	60da      	str	r2, [r3, #12]
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016996:	d101      	bne.n	801699c <SDMMC_CmdStopTransfer+0x68>
 8016998:	2300      	movs	r3, #0
 801699a:	61fb      	str	r3, [r7, #28]
 801699c:	69fb      	ldr	r3, [r7, #28]
 801699e:	4618      	mov	r0, r3
 80169a0:	3720      	adds	r7, #32
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	bf00      	nop
 80169a8:	05f5e100 	.word	0x05f5e100

080169ac <SDMMC_CmdSelDesel>:
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b088      	sub	sp, #32
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	6039      	str	r1, [r7, #0]
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	60bb      	str	r3, [r7, #8]
 80169ba:	2307      	movs	r3, #7
 80169bc:	60fb      	str	r3, [r7, #12]
 80169be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80169c2:	613b      	str	r3, [r7, #16]
 80169c4:	2300      	movs	r3, #0
 80169c6:	617b      	str	r3, [r7, #20]
 80169c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80169cc:	61bb      	str	r3, [r7, #24]
 80169ce:	f107 0308 	add.w	r3, r7, #8
 80169d2:	4619      	mov	r1, r3
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f7ff fe87 	bl	80166e8 <SDMMC_SendCommand>
 80169da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80169de:	2107      	movs	r1, #7
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f000 f973 	bl	8016ccc <SDMMC_GetCmdResp1>
 80169e6:	61f8      	str	r0, [r7, #28]
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	4618      	mov	r0, r3
 80169ec:	3720      	adds	r7, #32
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}

080169f2 <SDMMC_CmdGoIdleState>:
 80169f2:	b580      	push	{r7, lr}
 80169f4:	b088      	sub	sp, #32
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
 80169fa:	2300      	movs	r3, #0
 80169fc:	60bb      	str	r3, [r7, #8]
 80169fe:	2300      	movs	r3, #0
 8016a00:	60fb      	str	r3, [r7, #12]
 8016a02:	2300      	movs	r3, #0
 8016a04:	613b      	str	r3, [r7, #16]
 8016a06:	2300      	movs	r3, #0
 8016a08:	617b      	str	r3, [r7, #20]
 8016a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016a0e:	61bb      	str	r3, [r7, #24]
 8016a10:	f107 0308 	add.w	r3, r7, #8
 8016a14:	4619      	mov	r1, r3
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	f7ff fe66 	bl	80166e8 <SDMMC_SendCommand>
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f000 fb97 	bl	8017150 <SDMMC_GetCmdError>
 8016a22:	61f8      	str	r0, [r7, #28]
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	4618      	mov	r0, r3
 8016a28:	3720      	adds	r7, #32
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}

08016a2e <SDMMC_CmdOperCond>:
 8016a2e:	b580      	push	{r7, lr}
 8016a30:	b088      	sub	sp, #32
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	6078      	str	r0, [r7, #4]
 8016a36:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8016a3a:	60bb      	str	r3, [r7, #8]
 8016a3c:	2308      	movs	r3, #8
 8016a3e:	60fb      	str	r3, [r7, #12]
 8016a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016a44:	613b      	str	r3, [r7, #16]
 8016a46:	2300      	movs	r3, #0
 8016a48:	617b      	str	r3, [r7, #20]
 8016a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016a4e:	61bb      	str	r3, [r7, #24]
 8016a50:	f107 0308 	add.w	r3, r7, #8
 8016a54:	4619      	mov	r1, r3
 8016a56:	6878      	ldr	r0, [r7, #4]
 8016a58:	f7ff fe46 	bl	80166e8 <SDMMC_SendCommand>
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 fb29 	bl	80170b4 <SDMMC_GetCmdResp7>
 8016a62:	61f8      	str	r0, [r7, #28]
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	4618      	mov	r0, r3
 8016a68:	3720      	adds	r7, #32
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	bd80      	pop	{r7, pc}

08016a6e <SDMMC_CmdAppCommand>:
 8016a6e:	b580      	push	{r7, lr}
 8016a70:	b088      	sub	sp, #32
 8016a72:	af00      	add	r7, sp, #0
 8016a74:	6078      	str	r0, [r7, #4]
 8016a76:	6039      	str	r1, [r7, #0]
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	60bb      	str	r3, [r7, #8]
 8016a7c:	2337      	movs	r3, #55	@ 0x37
 8016a7e:	60fb      	str	r3, [r7, #12]
 8016a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016a84:	613b      	str	r3, [r7, #16]
 8016a86:	2300      	movs	r3, #0
 8016a88:	617b      	str	r3, [r7, #20]
 8016a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016a8e:	61bb      	str	r3, [r7, #24]
 8016a90:	f107 0308 	add.w	r3, r7, #8
 8016a94:	4619      	mov	r1, r3
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f7ff fe26 	bl	80166e8 <SDMMC_SendCommand>
 8016a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016aa0:	2137      	movs	r1, #55	@ 0x37
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f000 f912 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016aa8:	61f8      	str	r0, [r7, #28]
 8016aaa:	69fb      	ldr	r3, [r7, #28]
 8016aac:	4618      	mov	r0, r3
 8016aae:	3720      	adds	r7, #32
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}

08016ab4 <SDMMC_CmdAppOperCommand>:
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b088      	sub	sp, #32
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	6039      	str	r1, [r7, #0]
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	60bb      	str	r3, [r7, #8]
 8016ac2:	2329      	movs	r3, #41	@ 0x29
 8016ac4:	60fb      	str	r3, [r7, #12]
 8016ac6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016aca:	613b      	str	r3, [r7, #16]
 8016acc:	2300      	movs	r3, #0
 8016ace:	617b      	str	r3, [r7, #20]
 8016ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016ad4:	61bb      	str	r3, [r7, #24]
 8016ad6:	f107 0308 	add.w	r3, r7, #8
 8016ada:	4619      	mov	r1, r3
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f7ff fe03 	bl	80166e8 <SDMMC_SendCommand>
 8016ae2:	6878      	ldr	r0, [r7, #4]
 8016ae4:	f000 fa2e 	bl	8016f44 <SDMMC_GetCmdResp3>
 8016ae8:	61f8      	str	r0, [r7, #28]
 8016aea:	69fb      	ldr	r3, [r7, #28]
 8016aec:	4618      	mov	r0, r3
 8016aee:	3720      	adds	r7, #32
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <SDMMC_CmdBusWidth>:
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b088      	sub	sp, #32
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
 8016afc:	6039      	str	r1, [r7, #0]
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	60bb      	str	r3, [r7, #8]
 8016b02:	2306      	movs	r3, #6
 8016b04:	60fb      	str	r3, [r7, #12]
 8016b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016b0a:	613b      	str	r3, [r7, #16]
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	617b      	str	r3, [r7, #20]
 8016b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016b14:	61bb      	str	r3, [r7, #24]
 8016b16:	f107 0308 	add.w	r3, r7, #8
 8016b1a:	4619      	mov	r1, r3
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f7ff fde3 	bl	80166e8 <SDMMC_SendCommand>
 8016b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016b26:	2106      	movs	r1, #6
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f000 f8cf 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016b2e:	61f8      	str	r0, [r7, #28]
 8016b30:	69fb      	ldr	r3, [r7, #28]
 8016b32:	4618      	mov	r0, r3
 8016b34:	3720      	adds	r7, #32
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <SDMMC_CmdSendSCR>:
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b088      	sub	sp, #32
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	6078      	str	r0, [r7, #4]
 8016b42:	2300      	movs	r3, #0
 8016b44:	60bb      	str	r3, [r7, #8]
 8016b46:	2333      	movs	r3, #51	@ 0x33
 8016b48:	60fb      	str	r3, [r7, #12]
 8016b4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016b4e:	613b      	str	r3, [r7, #16]
 8016b50:	2300      	movs	r3, #0
 8016b52:	617b      	str	r3, [r7, #20]
 8016b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016b58:	61bb      	str	r3, [r7, #24]
 8016b5a:	f107 0308 	add.w	r3, r7, #8
 8016b5e:	4619      	mov	r1, r3
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7ff fdc1 	bl	80166e8 <SDMMC_SendCommand>
 8016b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016b6a:	2133      	movs	r1, #51	@ 0x33
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f000 f8ad 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016b72:	61f8      	str	r0, [r7, #28]
 8016b74:	69fb      	ldr	r3, [r7, #28]
 8016b76:	4618      	mov	r0, r3
 8016b78:	3720      	adds	r7, #32
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}

08016b7e <SDMMC_CmdSendCID>:
 8016b7e:	b580      	push	{r7, lr}
 8016b80:	b088      	sub	sp, #32
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
 8016b86:	2300      	movs	r3, #0
 8016b88:	60bb      	str	r3, [r7, #8]
 8016b8a:	2302      	movs	r3, #2
 8016b8c:	60fb      	str	r3, [r7, #12]
 8016b8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8016b92:	613b      	str	r3, [r7, #16]
 8016b94:	2300      	movs	r3, #0
 8016b96:	617b      	str	r3, [r7, #20]
 8016b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016b9c:	61bb      	str	r3, [r7, #24]
 8016b9e:	f107 0308 	add.w	r3, r7, #8
 8016ba2:	4619      	mov	r1, r3
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f7ff fd9f 	bl	80166e8 <SDMMC_SendCommand>
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f000 f980 	bl	8016eb0 <SDMMC_GetCmdResp2>
 8016bb0:	61f8      	str	r0, [r7, #28]
 8016bb2:	69fb      	ldr	r3, [r7, #28]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3720      	adds	r7, #32
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}

08016bbc <SDMMC_CmdSendCSD>:
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b088      	sub	sp, #32
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	60bb      	str	r3, [r7, #8]
 8016bca:	2309      	movs	r3, #9
 8016bcc:	60fb      	str	r3, [r7, #12]
 8016bce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8016bd2:	613b      	str	r3, [r7, #16]
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	617b      	str	r3, [r7, #20]
 8016bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016bdc:	61bb      	str	r3, [r7, #24]
 8016bde:	f107 0308 	add.w	r3, r7, #8
 8016be2:	4619      	mov	r1, r3
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7ff fd7f 	bl	80166e8 <SDMMC_SendCommand>
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f000 f960 	bl	8016eb0 <SDMMC_GetCmdResp2>
 8016bf0:	61f8      	str	r0, [r7, #28]
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3720      	adds	r7, #32
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <SDMMC_CmdSetRelAdd>:
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b088      	sub	sp, #32
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	6039      	str	r1, [r7, #0]
 8016c06:	2300      	movs	r3, #0
 8016c08:	60bb      	str	r3, [r7, #8]
 8016c0a:	2303      	movs	r3, #3
 8016c0c:	60fb      	str	r3, [r7, #12]
 8016c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c12:	613b      	str	r3, [r7, #16]
 8016c14:	2300      	movs	r3, #0
 8016c16:	617b      	str	r3, [r7, #20]
 8016c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016c1c:	61bb      	str	r3, [r7, #24]
 8016c1e:	f107 0308 	add.w	r3, r7, #8
 8016c22:	4619      	mov	r1, r3
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7ff fd5f 	bl	80166e8 <SDMMC_SendCommand>
 8016c2a:	683a      	ldr	r2, [r7, #0]
 8016c2c:	2103      	movs	r1, #3
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f000 f9c8 	bl	8016fc4 <SDMMC_GetCmdResp6>
 8016c34:	61f8      	str	r0, [r7, #28]
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3720      	adds	r7, #32
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}

08016c40 <SDMMC_CmdSendStatus>:
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b088      	sub	sp, #32
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	6039      	str	r1, [r7, #0]
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	60bb      	str	r3, [r7, #8]
 8016c4e:	230d      	movs	r3, #13
 8016c50:	60fb      	str	r3, [r7, #12]
 8016c52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c56:	613b      	str	r3, [r7, #16]
 8016c58:	2300      	movs	r3, #0
 8016c5a:	617b      	str	r3, [r7, #20]
 8016c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016c60:	61bb      	str	r3, [r7, #24]
 8016c62:	f107 0308 	add.w	r3, r7, #8
 8016c66:	4619      	mov	r1, r3
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f7ff fd3d 	bl	80166e8 <SDMMC_SendCommand>
 8016c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016c72:	210d      	movs	r1, #13
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f000 f829 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016c7a:	61f8      	str	r0, [r7, #28]
 8016c7c:	69fb      	ldr	r3, [r7, #28]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3720      	adds	r7, #32
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}

08016c86 <SDMMC_CmdStatusRegister>:
 8016c86:	b580      	push	{r7, lr}
 8016c88:	b088      	sub	sp, #32
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	6078      	str	r0, [r7, #4]
 8016c8e:	2300      	movs	r3, #0
 8016c90:	60bb      	str	r3, [r7, #8]
 8016c92:	230d      	movs	r3, #13
 8016c94:	60fb      	str	r3, [r7, #12]
 8016c96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c9a:	613b      	str	r3, [r7, #16]
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	617b      	str	r3, [r7, #20]
 8016ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016ca4:	61bb      	str	r3, [r7, #24]
 8016ca6:	f107 0308 	add.w	r3, r7, #8
 8016caa:	4619      	mov	r1, r3
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7ff fd1b 	bl	80166e8 <SDMMC_SendCommand>
 8016cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016cb6:	210d      	movs	r1, #13
 8016cb8:	6878      	ldr	r0, [r7, #4]
 8016cba:	f000 f807 	bl	8016ccc <SDMMC_GetCmdResp1>
 8016cbe:	61f8      	str	r0, [r7, #28]
 8016cc0:	69fb      	ldr	r3, [r7, #28]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3720      	adds	r7, #32
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bd80      	pop	{r7, pc}
	...

08016ccc <SDMMC_GetCmdResp1>:
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b088      	sub	sp, #32
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	60f8      	str	r0, [r7, #12]
 8016cd4:	460b      	mov	r3, r1
 8016cd6:	607a      	str	r2, [r7, #4]
 8016cd8:	72fb      	strb	r3, [r7, #11]
 8016cda:	4b70      	ldr	r3, [pc, #448]	@ (8016e9c <SDMMC_GetCmdResp1+0x1d0>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	4a70      	ldr	r2, [pc, #448]	@ (8016ea0 <SDMMC_GetCmdResp1+0x1d4>)
 8016ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8016ce4:	0a5a      	lsrs	r2, r3, #9
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	fb02 f303 	mul.w	r3, r2, r3
 8016cec:	61fb      	str	r3, [r7, #28]
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	1e5a      	subs	r2, r3, #1
 8016cf2:	61fa      	str	r2, [r7, #28]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d102      	bne.n	8016cfe <SDMMC_GetCmdResp1+0x32>
 8016cf8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016cfc:	e0c9      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d02:	61bb      	str	r3, [r7, #24]
 8016d04:	69ba      	ldr	r2, [r7, #24]
 8016d06:	4b67      	ldr	r3, [pc, #412]	@ (8016ea4 <SDMMC_GetCmdResp1+0x1d8>)
 8016d08:	4013      	ands	r3, r2
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d0ef      	beq.n	8016cee <SDMMC_GetCmdResp1+0x22>
 8016d0e:	69bb      	ldr	r3, [r7, #24]
 8016d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d1ea      	bne.n	8016cee <SDMMC_GetCmdResp1+0x22>
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d1c:	f003 0304 	and.w	r3, r3, #4
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d004      	beq.n	8016d2e <SDMMC_GetCmdResp1+0x62>
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	2204      	movs	r2, #4
 8016d28:	639a      	str	r2, [r3, #56]	@ 0x38
 8016d2a:	2304      	movs	r3, #4
 8016d2c:	e0b1      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d32:	f003 0301 	and.w	r3, r3, #1
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d004      	beq.n	8016d44 <SDMMC_GetCmdResp1+0x78>
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	2201      	movs	r2, #1
 8016d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8016d40:	2301      	movs	r3, #1
 8016d42:	e0a6      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	4a58      	ldr	r2, [pc, #352]	@ (8016ea8 <SDMMC_GetCmdResp1+0x1dc>)
 8016d48:	639a      	str	r2, [r3, #56]	@ 0x38
 8016d4a:	68f8      	ldr	r0, [r7, #12]
 8016d4c:	f7ff fcf6 	bl	801673c <SDMMC_GetCommandResponse>
 8016d50:	4603      	mov	r3, r0
 8016d52:	461a      	mov	r2, r3
 8016d54:	7afb      	ldrb	r3, [r7, #11]
 8016d56:	4293      	cmp	r3, r2
 8016d58:	d001      	beq.n	8016d5e <SDMMC_GetCmdResp1+0x92>
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	e099      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016d5e:	2100      	movs	r1, #0
 8016d60:	68f8      	ldr	r0, [r7, #12]
 8016d62:	f7ff fcf8 	bl	8016756 <SDMMC_GetResponse>
 8016d66:	6178      	str	r0, [r7, #20]
 8016d68:	697a      	ldr	r2, [r7, #20]
 8016d6a:	4b50      	ldr	r3, [pc, #320]	@ (8016eac <SDMMC_GetCmdResp1+0x1e0>)
 8016d6c:	4013      	ands	r3, r2
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d101      	bne.n	8016d76 <SDMMC_GetCmdResp1+0xaa>
 8016d72:	2300      	movs	r3, #0
 8016d74:	e08d      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	da02      	bge.n	8016d82 <SDMMC_GetCmdResp1+0xb6>
 8016d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016d80:	e087      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016d82:	697b      	ldr	r3, [r7, #20]
 8016d84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d001      	beq.n	8016d90 <SDMMC_GetCmdResp1+0xc4>
 8016d8c:	2340      	movs	r3, #64	@ 0x40
 8016d8e:	e080      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d001      	beq.n	8016d9e <SDMMC_GetCmdResp1+0xd2>
 8016d9a:	2380      	movs	r3, #128	@ 0x80
 8016d9c:	e079      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d002      	beq.n	8016dae <SDMMC_GetCmdResp1+0xe2>
 8016da8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016dac:	e071      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d002      	beq.n	8016dbe <SDMMC_GetCmdResp1+0xf2>
 8016db8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016dbc:	e069      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d002      	beq.n	8016dce <SDMMC_GetCmdResp1+0x102>
 8016dc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016dcc:	e061      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d002      	beq.n	8016dde <SDMMC_GetCmdResp1+0x112>
 8016dd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016ddc:	e059      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d002      	beq.n	8016dee <SDMMC_GetCmdResp1+0x122>
 8016de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016dec:	e051      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d002      	beq.n	8016dfe <SDMMC_GetCmdResp1+0x132>
 8016df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8016dfc:	e049      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d002      	beq.n	8016e0e <SDMMC_GetCmdResp1+0x142>
 8016e08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8016e0c:	e041      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d002      	beq.n	8016e1e <SDMMC_GetCmdResp1+0x152>
 8016e18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016e1c:	e039      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e1e:	697b      	ldr	r3, [r7, #20]
 8016e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d002      	beq.n	8016e2e <SDMMC_GetCmdResp1+0x162>
 8016e28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8016e2c:	e031      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d002      	beq.n	8016e3e <SDMMC_GetCmdResp1+0x172>
 8016e38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8016e3c:	e029      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d002      	beq.n	8016e4e <SDMMC_GetCmdResp1+0x182>
 8016e48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016e4c:	e021      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e4e:	697b      	ldr	r3, [r7, #20]
 8016e50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d002      	beq.n	8016e5e <SDMMC_GetCmdResp1+0x192>
 8016e58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016e5c:	e019      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <SDMMC_GetCmdResp1+0x1a2>
 8016e68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8016e6c:	e011      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d002      	beq.n	8016e7e <SDMMC_GetCmdResp1+0x1b2>
 8016e78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8016e7c:	e009      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e7e:	697b      	ldr	r3, [r7, #20]
 8016e80:	f003 0308 	and.w	r3, r3, #8
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d002      	beq.n	8016e8e <SDMMC_GetCmdResp1+0x1c2>
 8016e88:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8016e8c:	e001      	b.n	8016e92 <SDMMC_GetCmdResp1+0x1c6>
 8016e8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016e92:	4618      	mov	r0, r3
 8016e94:	3720      	adds	r7, #32
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	2400014c 	.word	0x2400014c
 8016ea0:	10624dd3 	.word	0x10624dd3
 8016ea4:	00200045 	.word	0x00200045
 8016ea8:	002000c5 	.word	0x002000c5
 8016eac:	fdffe008 	.word	0xfdffe008

08016eb0 <SDMMC_GetCmdResp2>:
 8016eb0:	b480      	push	{r7}
 8016eb2:	b085      	sub	sp, #20
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8016f38 <SDMMC_GetCmdResp2+0x88>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8016f3c <SDMMC_GetCmdResp2+0x8c>)
 8016ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8016ec2:	0a5b      	lsrs	r3, r3, #9
 8016ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016ec8:	fb02 f303 	mul.w	r3, r2, r3
 8016ecc:	60fb      	str	r3, [r7, #12]
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	1e5a      	subs	r2, r3, #1
 8016ed2:	60fa      	str	r2, [r7, #12]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d102      	bne.n	8016ede <SDMMC_GetCmdResp2+0x2e>
 8016ed8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016edc:	e026      	b.n	8016f2c <SDMMC_GetCmdResp2+0x7c>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ee2:	60bb      	str	r3, [r7, #8]
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d0ef      	beq.n	8016ece <SDMMC_GetCmdResp2+0x1e>
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d1ea      	bne.n	8016ece <SDMMC_GetCmdResp2+0x1e>
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016efc:	f003 0304 	and.w	r3, r3, #4
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d004      	beq.n	8016f0e <SDMMC_GetCmdResp2+0x5e>
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2204      	movs	r2, #4
 8016f08:	639a      	str	r2, [r3, #56]	@ 0x38
 8016f0a:	2304      	movs	r3, #4
 8016f0c:	e00e      	b.n	8016f2c <SDMMC_GetCmdResp2+0x7c>
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f12:	f003 0301 	and.w	r3, r3, #1
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d004      	beq.n	8016f24 <SDMMC_GetCmdResp2+0x74>
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2201      	movs	r2, #1
 8016f1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8016f20:	2301      	movs	r3, #1
 8016f22:	e003      	b.n	8016f2c <SDMMC_GetCmdResp2+0x7c>
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	4a06      	ldr	r2, [pc, #24]	@ (8016f40 <SDMMC_GetCmdResp2+0x90>)
 8016f28:	639a      	str	r2, [r3, #56]	@ 0x38
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3714      	adds	r7, #20
 8016f30:	46bd      	mov	sp, r7
 8016f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f36:	4770      	bx	lr
 8016f38:	2400014c 	.word	0x2400014c
 8016f3c:	10624dd3 	.word	0x10624dd3
 8016f40:	002000c5 	.word	0x002000c5

08016f44 <SDMMC_GetCmdResp3>:
 8016f44:	b480      	push	{r7}
 8016f46:	b085      	sub	sp, #20
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
 8016f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8016fb8 <SDMMC_GetCmdResp3+0x74>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	4a1a      	ldr	r2, [pc, #104]	@ (8016fbc <SDMMC_GetCmdResp3+0x78>)
 8016f52:	fba2 2303 	umull	r2, r3, r2, r3
 8016f56:	0a5b      	lsrs	r3, r3, #9
 8016f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016f5c:	fb02 f303 	mul.w	r3, r2, r3
 8016f60:	60fb      	str	r3, [r7, #12]
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	1e5a      	subs	r2, r3, #1
 8016f66:	60fa      	str	r2, [r7, #12]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d102      	bne.n	8016f72 <SDMMC_GetCmdResp3+0x2e>
 8016f6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016f70:	e01b      	b.n	8016faa <SDMMC_GetCmdResp3+0x66>
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f76:	60bb      	str	r3, [r7, #8]
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d0ef      	beq.n	8016f62 <SDMMC_GetCmdResp3+0x1e>
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d1ea      	bne.n	8016f62 <SDMMC_GetCmdResp3+0x1e>
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f90:	f003 0304 	and.w	r3, r3, #4
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d004      	beq.n	8016fa2 <SDMMC_GetCmdResp3+0x5e>
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2204      	movs	r2, #4
 8016f9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8016f9e:	2304      	movs	r3, #4
 8016fa0:	e003      	b.n	8016faa <SDMMC_GetCmdResp3+0x66>
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	4a06      	ldr	r2, [pc, #24]	@ (8016fc0 <SDMMC_GetCmdResp3+0x7c>)
 8016fa6:	639a      	str	r2, [r3, #56]	@ 0x38
 8016fa8:	2300      	movs	r3, #0
 8016faa:	4618      	mov	r0, r3
 8016fac:	3714      	adds	r7, #20
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb4:	4770      	bx	lr
 8016fb6:	bf00      	nop
 8016fb8:	2400014c 	.word	0x2400014c
 8016fbc:	10624dd3 	.word	0x10624dd3
 8016fc0:	002000c5 	.word	0x002000c5

08016fc4 <SDMMC_GetCmdResp6>:
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b088      	sub	sp, #32
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	460b      	mov	r3, r1
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	72fb      	strb	r3, [r7, #11]
 8016fd2:	4b35      	ldr	r3, [pc, #212]	@ (80170a8 <SDMMC_GetCmdResp6+0xe4>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	4a35      	ldr	r2, [pc, #212]	@ (80170ac <SDMMC_GetCmdResp6+0xe8>)
 8016fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8016fdc:	0a5b      	lsrs	r3, r3, #9
 8016fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016fe2:	fb02 f303 	mul.w	r3, r2, r3
 8016fe6:	61fb      	str	r3, [r7, #28]
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	1e5a      	subs	r2, r3, #1
 8016fec:	61fa      	str	r2, [r7, #28]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d102      	bne.n	8016ff8 <SDMMC_GetCmdResp6+0x34>
 8016ff2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016ff6:	e052      	b.n	801709e <SDMMC_GetCmdResp6+0xda>
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ffc:	61bb      	str	r3, [r7, #24]
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8017004:	2b00      	cmp	r3, #0
 8017006:	d0ef      	beq.n	8016fe8 <SDMMC_GetCmdResp6+0x24>
 8017008:	69bb      	ldr	r3, [r7, #24]
 801700a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801700e:	2b00      	cmp	r3, #0
 8017010:	d1ea      	bne.n	8016fe8 <SDMMC_GetCmdResp6+0x24>
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017016:	f003 0304 	and.w	r3, r3, #4
 801701a:	2b00      	cmp	r3, #0
 801701c:	d004      	beq.n	8017028 <SDMMC_GetCmdResp6+0x64>
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	2204      	movs	r2, #4
 8017022:	639a      	str	r2, [r3, #56]	@ 0x38
 8017024:	2304      	movs	r3, #4
 8017026:	e03a      	b.n	801709e <SDMMC_GetCmdResp6+0xda>
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801702c:	f003 0301 	and.w	r3, r3, #1
 8017030:	2b00      	cmp	r3, #0
 8017032:	d004      	beq.n	801703e <SDMMC_GetCmdResp6+0x7a>
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	2201      	movs	r2, #1
 8017038:	639a      	str	r2, [r3, #56]	@ 0x38
 801703a:	2301      	movs	r3, #1
 801703c:	e02f      	b.n	801709e <SDMMC_GetCmdResp6+0xda>
 801703e:	68f8      	ldr	r0, [r7, #12]
 8017040:	f7ff fb7c 	bl	801673c <SDMMC_GetCommandResponse>
 8017044:	4603      	mov	r3, r0
 8017046:	461a      	mov	r2, r3
 8017048:	7afb      	ldrb	r3, [r7, #11]
 801704a:	4293      	cmp	r3, r2
 801704c:	d001      	beq.n	8017052 <SDMMC_GetCmdResp6+0x8e>
 801704e:	2301      	movs	r3, #1
 8017050:	e025      	b.n	801709e <SDMMC_GetCmdResp6+0xda>
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	4a16      	ldr	r2, [pc, #88]	@ (80170b0 <SDMMC_GetCmdResp6+0xec>)
 8017056:	639a      	str	r2, [r3, #56]	@ 0x38
 8017058:	2100      	movs	r1, #0
 801705a:	68f8      	ldr	r0, [r7, #12]
 801705c:	f7ff fb7b 	bl	8016756 <SDMMC_GetResponse>
 8017060:	6178      	str	r0, [r7, #20]
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8017068:	2b00      	cmp	r3, #0
 801706a:	d106      	bne.n	801707a <SDMMC_GetCmdResp6+0xb6>
 801706c:	697b      	ldr	r3, [r7, #20]
 801706e:	0c1b      	lsrs	r3, r3, #16
 8017070:	b29a      	uxth	r2, r3
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	801a      	strh	r2, [r3, #0]
 8017076:	2300      	movs	r3, #0
 8017078:	e011      	b.n	801709e <SDMMC_GetCmdResp6+0xda>
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017080:	2b00      	cmp	r3, #0
 8017082:	d002      	beq.n	801708a <SDMMC_GetCmdResp6+0xc6>
 8017084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017088:	e009      	b.n	801709e <SDMMC_GetCmdResp6+0xda>
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017090:	2b00      	cmp	r3, #0
 8017092:	d002      	beq.n	801709a <SDMMC_GetCmdResp6+0xd6>
 8017094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017098:	e001      	b.n	801709e <SDMMC_GetCmdResp6+0xda>
 801709a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801709e:	4618      	mov	r0, r3
 80170a0:	3720      	adds	r7, #32
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}
 80170a6:	bf00      	nop
 80170a8:	2400014c 	.word	0x2400014c
 80170ac:	10624dd3 	.word	0x10624dd3
 80170b0:	002000c5 	.word	0x002000c5

080170b4 <SDMMC_GetCmdResp7>:
 80170b4:	b480      	push	{r7}
 80170b6:	b085      	sub	sp, #20
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
 80170bc:	4b22      	ldr	r3, [pc, #136]	@ (8017148 <SDMMC_GetCmdResp7+0x94>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	4a22      	ldr	r2, [pc, #136]	@ (801714c <SDMMC_GetCmdResp7+0x98>)
 80170c2:	fba2 2303 	umull	r2, r3, r2, r3
 80170c6:	0a5b      	lsrs	r3, r3, #9
 80170c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80170cc:	fb02 f303 	mul.w	r3, r2, r3
 80170d0:	60fb      	str	r3, [r7, #12]
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	1e5a      	subs	r2, r3, #1
 80170d6:	60fa      	str	r2, [r7, #12]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d102      	bne.n	80170e2 <SDMMC_GetCmdResp7+0x2e>
 80170dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80170e0:	e02c      	b.n	801713c <SDMMC_GetCmdResp7+0x88>
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170e6:	60bb      	str	r3, [r7, #8]
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d0ef      	beq.n	80170d2 <SDMMC_GetCmdResp7+0x1e>
 80170f2:	68bb      	ldr	r3, [r7, #8]
 80170f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d1ea      	bne.n	80170d2 <SDMMC_GetCmdResp7+0x1e>
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017100:	f003 0304 	and.w	r3, r3, #4
 8017104:	2b00      	cmp	r3, #0
 8017106:	d004      	beq.n	8017112 <SDMMC_GetCmdResp7+0x5e>
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2204      	movs	r2, #4
 801710c:	639a      	str	r2, [r3, #56]	@ 0x38
 801710e:	2304      	movs	r3, #4
 8017110:	e014      	b.n	801713c <SDMMC_GetCmdResp7+0x88>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017116:	f003 0301 	and.w	r3, r3, #1
 801711a:	2b00      	cmp	r3, #0
 801711c:	d004      	beq.n	8017128 <SDMMC_GetCmdResp7+0x74>
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	2201      	movs	r2, #1
 8017122:	639a      	str	r2, [r3, #56]	@ 0x38
 8017124:	2301      	movs	r3, #1
 8017126:	e009      	b.n	801713c <SDMMC_GetCmdResp7+0x88>
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801712c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017130:	2b00      	cmp	r3, #0
 8017132:	d002      	beq.n	801713a <SDMMC_GetCmdResp7+0x86>
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2240      	movs	r2, #64	@ 0x40
 8017138:	639a      	str	r2, [r3, #56]	@ 0x38
 801713a:	2300      	movs	r3, #0
 801713c:	4618      	mov	r0, r3
 801713e:	3714      	adds	r7, #20
 8017140:	46bd      	mov	sp, r7
 8017142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017146:	4770      	bx	lr
 8017148:	2400014c 	.word	0x2400014c
 801714c:	10624dd3 	.word	0x10624dd3

08017150 <SDMMC_GetCmdError>:
 8017150:	b480      	push	{r7}
 8017152:	b085      	sub	sp, #20
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	4b11      	ldr	r3, [pc, #68]	@ (80171a0 <SDMMC_GetCmdError+0x50>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	4a11      	ldr	r2, [pc, #68]	@ (80171a4 <SDMMC_GetCmdError+0x54>)
 801715e:	fba2 2303 	umull	r2, r3, r2, r3
 8017162:	0a5b      	lsrs	r3, r3, #9
 8017164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017168:	fb02 f303 	mul.w	r3, r2, r3
 801716c:	60fb      	str	r3, [r7, #12]
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	1e5a      	subs	r2, r3, #1
 8017172:	60fa      	str	r2, [r7, #12]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d102      	bne.n	801717e <SDMMC_GetCmdError+0x2e>
 8017178:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801717c:	e009      	b.n	8017192 <SDMMC_GetCmdError+0x42>
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017186:	2b00      	cmp	r3, #0
 8017188:	d0f1      	beq.n	801716e <SDMMC_GetCmdError+0x1e>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	4a06      	ldr	r2, [pc, #24]	@ (80171a8 <SDMMC_GetCmdError+0x58>)
 801718e:	639a      	str	r2, [r3, #56]	@ 0x38
 8017190:	2300      	movs	r3, #0
 8017192:	4618      	mov	r0, r3
 8017194:	3714      	adds	r7, #20
 8017196:	46bd      	mov	sp, r7
 8017198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop
 80171a0:	2400014c 	.word	0x2400014c
 80171a4:	10624dd3 	.word	0x10624dd3
 80171a8:	002000c5 	.word	0x002000c5

080171ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80171b0:	4904      	ldr	r1, [pc, #16]	@ (80171c4 <MX_FATFS_Init+0x18>)
 80171b2:	4805      	ldr	r0, [pc, #20]	@ (80171c8 <MX_FATFS_Init+0x1c>)
 80171b4:	f000 f9e4 	bl	8017580 <FATFS_LinkDriver>
 80171b8:	4603      	mov	r3, r0
 80171ba:	461a      	mov	r2, r3
 80171bc:	4b03      	ldr	r3, [pc, #12]	@ (80171cc <MX_FATFS_Init+0x20>)
 80171be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80171c0:	bf00      	nop
 80171c2:	bd80      	pop	{r7, pc}
 80171c4:	2400212c 	.word	0x2400212c
 80171c8:	0801cb5c 	.word	0x0801cb5c
 80171cc:	24002128 	.word	0x24002128

080171d0 <BSP_SD_Init>:
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b082      	sub	sp, #8
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	2300      	movs	r3, #0
 80171d8:	71fb      	strb	r3, [r7, #7]
 80171da:	f000 f879 	bl	80172d0 <BSP_SD_IsDetected>
 80171de:	4603      	mov	r3, r0
 80171e0:	2b01      	cmp	r3, #1
 80171e2:	d001      	beq.n	80171e8 <BSP_SD_Init+0x18>
 80171e4:	2302      	movs	r3, #2
 80171e6:	e012      	b.n	801720e <BSP_SD_Init+0x3e>
 80171e8:	480b      	ldr	r0, [pc, #44]	@ (8017218 <BSP_SD_Init+0x48>)
 80171ea:	f7f9 f917 	bl	801041c <HAL_SD_Init>
 80171ee:	4603      	mov	r3, r0
 80171f0:	71fb      	strb	r3, [r7, #7]
 80171f2:	79fb      	ldrb	r3, [r7, #7]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d109      	bne.n	801720c <BSP_SD_Init+0x3c>
 80171f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80171fc:	4806      	ldr	r0, [pc, #24]	@ (8017218 <BSP_SD_Init+0x48>)
 80171fe:	f7f9 ffd3 	bl	80111a8 <HAL_SD_ConfigWideBusOperation>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d001      	beq.n	801720c <BSP_SD_Init+0x3c>
 8017208:	2301      	movs	r3, #1
 801720a:	71fb      	strb	r3, [r7, #7]
 801720c:	79fb      	ldrb	r3, [r7, #7]
 801720e:	4618      	mov	r0, r3
 8017210:	3708      	adds	r7, #8
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	24001938 	.word	0x24001938

0801721c <BSP_SD_ReadBlocks>:
 801721c:	b580      	push	{r7, lr}
 801721e:	b088      	sub	sp, #32
 8017220:	af02      	add	r7, sp, #8
 8017222:	60f8      	str	r0, [r7, #12]
 8017224:	60b9      	str	r1, [r7, #8]
 8017226:	607a      	str	r2, [r7, #4]
 8017228:	603b      	str	r3, [r7, #0]
 801722a:	2300      	movs	r3, #0
 801722c:	75fb      	strb	r3, [r7, #23]
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	9300      	str	r3, [sp, #0]
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	68ba      	ldr	r2, [r7, #8]
 8017236:	68f9      	ldr	r1, [r7, #12]
 8017238:	4806      	ldr	r0, [pc, #24]	@ (8017254 <BSP_SD_ReadBlocks+0x38>)
 801723a:	f7f9 fa0f 	bl	801065c <HAL_SD_ReadBlocks>
 801723e:	4603      	mov	r3, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d001      	beq.n	8017248 <BSP_SD_ReadBlocks+0x2c>
 8017244:	2301      	movs	r3, #1
 8017246:	75fb      	strb	r3, [r7, #23]
 8017248:	7dfb      	ldrb	r3, [r7, #23]
 801724a:	4618      	mov	r0, r3
 801724c:	3718      	adds	r7, #24
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	24001938 	.word	0x24001938

08017258 <BSP_SD_WriteBlocks>:
 8017258:	b580      	push	{r7, lr}
 801725a:	b088      	sub	sp, #32
 801725c:	af02      	add	r7, sp, #8
 801725e:	60f8      	str	r0, [r7, #12]
 8017260:	60b9      	str	r1, [r7, #8]
 8017262:	607a      	str	r2, [r7, #4]
 8017264:	603b      	str	r3, [r7, #0]
 8017266:	2300      	movs	r3, #0
 8017268:	75fb      	strb	r3, [r7, #23]
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	9300      	str	r3, [sp, #0]
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	68ba      	ldr	r2, [r7, #8]
 8017272:	68f9      	ldr	r1, [r7, #12]
 8017274:	4806      	ldr	r0, [pc, #24]	@ (8017290 <BSP_SD_WriteBlocks+0x38>)
 8017276:	f7f9 fb7b 	bl	8010970 <HAL_SD_WriteBlocks>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d001      	beq.n	8017284 <BSP_SD_WriteBlocks+0x2c>
 8017280:	2301      	movs	r3, #1
 8017282:	75fb      	strb	r3, [r7, #23]
 8017284:	7dfb      	ldrb	r3, [r7, #23]
 8017286:	4618      	mov	r0, r3
 8017288:	3718      	adds	r7, #24
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}
 801728e:	bf00      	nop
 8017290:	24001938 	.word	0x24001938

08017294 <BSP_SD_GetCardState>:
 8017294:	b580      	push	{r7, lr}
 8017296:	af00      	add	r7, sp, #0
 8017298:	4805      	ldr	r0, [pc, #20]	@ (80172b0 <BSP_SD_GetCardState+0x1c>)
 801729a:	f7fa f897 	bl	80113cc <HAL_SD_GetCardState>
 801729e:	4603      	mov	r3, r0
 80172a0:	2b04      	cmp	r3, #4
 80172a2:	bf14      	ite	ne
 80172a4:	2301      	movne	r3, #1
 80172a6:	2300      	moveq	r3, #0
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	4618      	mov	r0, r3
 80172ac:	bd80      	pop	{r7, pc}
 80172ae:	bf00      	nop
 80172b0:	24001938 	.word	0x24001938

080172b4 <BSP_SD_GetCardInfo>:
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
 80172bc:	6879      	ldr	r1, [r7, #4]
 80172be:	4803      	ldr	r0, [pc, #12]	@ (80172cc <BSP_SD_GetCardInfo+0x18>)
 80172c0:	f7f9 ff46 	bl	8011150 <HAL_SD_GetCardInfo>
 80172c4:	bf00      	nop
 80172c6:	3708      	adds	r7, #8
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}
 80172cc:	24001938 	.word	0x24001938

080172d0 <BSP_SD_IsDetected>:
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b082      	sub	sp, #8
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	2301      	movs	r3, #1
 80172d8:	71fb      	strb	r3, [r7, #7]
 80172da:	f000 f80b 	bl	80172f4 <BSP_PlatformIsDetected>
 80172de:	4603      	mov	r3, r0
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d101      	bne.n	80172e8 <BSP_SD_IsDetected+0x18>
 80172e4:	2300      	movs	r3, #0
 80172e6:	71fb      	strb	r3, [r7, #7]
 80172e8:	79fb      	ldrb	r3, [r7, #7]
 80172ea:	b2db      	uxtb	r3, r3
 80172ec:	4618      	mov	r0, r3
 80172ee:	3708      	adds	r7, #8
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <BSP_PlatformIsDetected>:
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b082      	sub	sp, #8
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	2301      	movs	r3, #1
 80172fc:	71fb      	strb	r3, [r7, #7]
 80172fe:	2180      	movs	r1, #128	@ 0x80
 8017300:	4806      	ldr	r0, [pc, #24]	@ (801731c <BSP_PlatformIsDetected+0x28>)
 8017302:	f7f3 ffdd 	bl	800b2c0 <HAL_GPIO_ReadPin>
 8017306:	4603      	mov	r3, r0
 8017308:	2b00      	cmp	r3, #0
 801730a:	d001      	beq.n	8017310 <BSP_PlatformIsDetected+0x1c>
 801730c:	2300      	movs	r3, #0
 801730e:	71fb      	strb	r3, [r7, #7]
 8017310:	79fb      	ldrb	r3, [r7, #7]
 8017312:	4618      	mov	r0, r3
 8017314:	3708      	adds	r7, #8
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}
 801731a:	bf00      	nop
 801731c:	58020800 	.word	0x58020800

08017320 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	4603      	mov	r3, r0
 8017328:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801732a:	4b0b      	ldr	r3, [pc, #44]	@ (8017358 <SD_CheckStatus+0x38>)
 801732c:	2201      	movs	r2, #1
 801732e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8017330:	f7ff ffb0 	bl	8017294 <BSP_SD_GetCardState>
 8017334:	4603      	mov	r3, r0
 8017336:	2b00      	cmp	r3, #0
 8017338:	d107      	bne.n	801734a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801733a:	4b07      	ldr	r3, [pc, #28]	@ (8017358 <SD_CheckStatus+0x38>)
 801733c:	781b      	ldrb	r3, [r3, #0]
 801733e:	b2db      	uxtb	r3, r3
 8017340:	f023 0301 	bic.w	r3, r3, #1
 8017344:	b2da      	uxtb	r2, r3
 8017346:	4b04      	ldr	r3, [pc, #16]	@ (8017358 <SD_CheckStatus+0x38>)
 8017348:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801734a:	4b03      	ldr	r3, [pc, #12]	@ (8017358 <SD_CheckStatus+0x38>)
 801734c:	781b      	ldrb	r3, [r3, #0]
 801734e:	b2db      	uxtb	r3, r3
}
 8017350:	4618      	mov	r0, r3
 8017352:	3708      	adds	r7, #8
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}
 8017358:	24000159 	.word	0x24000159

0801735c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	4603      	mov	r3, r0
 8017364:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8017366:	4b0b      	ldr	r3, [pc, #44]	@ (8017394 <SD_initialize+0x38>)
 8017368:	2201      	movs	r2, #1
 801736a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801736c:	f7ff ff30 	bl	80171d0 <BSP_SD_Init>
 8017370:	4603      	mov	r3, r0
 8017372:	2b00      	cmp	r3, #0
 8017374:	d107      	bne.n	8017386 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8017376:	79fb      	ldrb	r3, [r7, #7]
 8017378:	4618      	mov	r0, r3
 801737a:	f7ff ffd1 	bl	8017320 <SD_CheckStatus>
 801737e:	4603      	mov	r3, r0
 8017380:	461a      	mov	r2, r3
 8017382:	4b04      	ldr	r3, [pc, #16]	@ (8017394 <SD_initialize+0x38>)
 8017384:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8017386:	4b03      	ldr	r3, [pc, #12]	@ (8017394 <SD_initialize+0x38>)
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	b2db      	uxtb	r3, r3
}
 801738c:	4618      	mov	r0, r3
 801738e:	3708      	adds	r7, #8
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}
 8017394:	24000159 	.word	0x24000159

08017398 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	4603      	mov	r3, r0
 80173a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80173a2:	79fb      	ldrb	r3, [r7, #7]
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7ff ffbb 	bl	8017320 <SD_CheckStatus>
 80173aa:	4603      	mov	r3, r0
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	3708      	adds	r7, #8
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b086      	sub	sp, #24
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	60b9      	str	r1, [r7, #8]
 80173bc:	607a      	str	r2, [r7, #4]
 80173be:	603b      	str	r3, [r7, #0]
 80173c0:	4603      	mov	r3, r0
 80173c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80173c4:	2301      	movs	r3, #1
 80173c6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80173c8:	f04f 33ff 	mov.w	r3, #4294967295
 80173cc:	683a      	ldr	r2, [r7, #0]
 80173ce:	6879      	ldr	r1, [r7, #4]
 80173d0:	68b8      	ldr	r0, [r7, #8]
 80173d2:	f7ff ff23 	bl	801721c <BSP_SD_ReadBlocks>
 80173d6:	4603      	mov	r3, r0
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d107      	bne.n	80173ec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80173dc:	bf00      	nop
 80173de:	f7ff ff59 	bl	8017294 <BSP_SD_GetCardState>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d1fa      	bne.n	80173de <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80173e8:	2300      	movs	r3, #0
 80173ea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80173ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80173ee:	4618      	mov	r0, r3
 80173f0:	3718      	adds	r7, #24
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd80      	pop	{r7, pc}

080173f6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80173f6:	b580      	push	{r7, lr}
 80173f8:	b086      	sub	sp, #24
 80173fa:	af00      	add	r7, sp, #0
 80173fc:	60b9      	str	r1, [r7, #8]
 80173fe:	607a      	str	r2, [r7, #4]
 8017400:	603b      	str	r3, [r7, #0]
 8017402:	4603      	mov	r3, r0
 8017404:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8017406:	2301      	movs	r3, #1
 8017408:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801740a:	f04f 33ff 	mov.w	r3, #4294967295
 801740e:	683a      	ldr	r2, [r7, #0]
 8017410:	6879      	ldr	r1, [r7, #4]
 8017412:	68b8      	ldr	r0, [r7, #8]
 8017414:	f7ff ff20 	bl	8017258 <BSP_SD_WriteBlocks>
 8017418:	4603      	mov	r3, r0
 801741a:	2b00      	cmp	r3, #0
 801741c:	d107      	bne.n	801742e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 801741e:	bf00      	nop
 8017420:	f7ff ff38 	bl	8017294 <BSP_SD_GetCardState>
 8017424:	4603      	mov	r3, r0
 8017426:	2b00      	cmp	r3, #0
 8017428:	d1fa      	bne.n	8017420 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801742a:	2300      	movs	r3, #0
 801742c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801742e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017430:	4618      	mov	r0, r3
 8017432:	3718      	adds	r7, #24
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}

08017438 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b08c      	sub	sp, #48	@ 0x30
 801743c:	af00      	add	r7, sp, #0
 801743e:	4603      	mov	r3, r0
 8017440:	603a      	str	r2, [r7, #0]
 8017442:	71fb      	strb	r3, [r7, #7]
 8017444:	460b      	mov	r3, r1
 8017446:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8017448:	2301      	movs	r3, #1
 801744a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801744e:	4b25      	ldr	r3, [pc, #148]	@ (80174e4 <SD_ioctl+0xac>)
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	b2db      	uxtb	r3, r3
 8017454:	f003 0301 	and.w	r3, r3, #1
 8017458:	2b00      	cmp	r3, #0
 801745a:	d001      	beq.n	8017460 <SD_ioctl+0x28>
 801745c:	2303      	movs	r3, #3
 801745e:	e03c      	b.n	80174da <SD_ioctl+0xa2>

  switch (cmd)
 8017460:	79bb      	ldrb	r3, [r7, #6]
 8017462:	2b03      	cmp	r3, #3
 8017464:	d834      	bhi.n	80174d0 <SD_ioctl+0x98>
 8017466:	a201      	add	r2, pc, #4	@ (adr r2, 801746c <SD_ioctl+0x34>)
 8017468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801746c:	0801747d 	.word	0x0801747d
 8017470:	08017485 	.word	0x08017485
 8017474:	0801749d 	.word	0x0801749d
 8017478:	080174b7 	.word	0x080174b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801747c:	2300      	movs	r3, #0
 801747e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8017482:	e028      	b.n	80174d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8017484:	f107 0308 	add.w	r3, r7, #8
 8017488:	4618      	mov	r0, r3
 801748a:	f7ff ff13 	bl	80172b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801748e:	6a3a      	ldr	r2, [r7, #32]
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8017494:	2300      	movs	r3, #0
 8017496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801749a:	e01c      	b.n	80174d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801749c:	f107 0308 	add.w	r3, r7, #8
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7ff ff07 	bl	80172b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80174a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174a8:	b29a      	uxth	r2, r3
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80174ae:	2300      	movs	r3, #0
 80174b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80174b4:	e00f      	b.n	80174d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80174b6:	f107 0308 	add.w	r3, r7, #8
 80174ba:	4618      	mov	r0, r3
 80174bc:	f7ff fefa 	bl	80172b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80174c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c2:	0a5a      	lsrs	r2, r3, #9
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80174c8:	2300      	movs	r3, #0
 80174ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80174ce:	e002      	b.n	80174d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80174d0:	2304      	movs	r3, #4
 80174d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80174d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80174da:	4618      	mov	r0, r3
 80174dc:	3730      	adds	r7, #48	@ 0x30
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd80      	pop	{r7, pc}
 80174e2:	bf00      	nop
 80174e4:	24000159 	.word	0x24000159

080174e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80174e8:	b480      	push	{r7}
 80174ea:	b087      	sub	sp, #28
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	4613      	mov	r3, r2
 80174f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80174f6:	2301      	movs	r3, #1
 80174f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80174fa:	2300      	movs	r3, #0
 80174fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80174fe:	4b1f      	ldr	r3, [pc, #124]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 8017500:	7a5b      	ldrb	r3, [r3, #9]
 8017502:	b2db      	uxtb	r3, r3
 8017504:	2b00      	cmp	r3, #0
 8017506:	d131      	bne.n	801756c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017508:	4b1c      	ldr	r3, [pc, #112]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 801750a:	7a5b      	ldrb	r3, [r3, #9]
 801750c:	b2db      	uxtb	r3, r3
 801750e:	461a      	mov	r2, r3
 8017510:	4b1a      	ldr	r3, [pc, #104]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 8017512:	2100      	movs	r1, #0
 8017514:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017516:	4b19      	ldr	r3, [pc, #100]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 8017518:	7a5b      	ldrb	r3, [r3, #9]
 801751a:	b2db      	uxtb	r3, r3
 801751c:	4a17      	ldr	r2, [pc, #92]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 801751e:	009b      	lsls	r3, r3, #2
 8017520:	4413      	add	r3, r2
 8017522:	68fa      	ldr	r2, [r7, #12]
 8017524:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017526:	4b15      	ldr	r3, [pc, #84]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 8017528:	7a5b      	ldrb	r3, [r3, #9]
 801752a:	b2db      	uxtb	r3, r3
 801752c:	461a      	mov	r2, r3
 801752e:	4b13      	ldr	r3, [pc, #76]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 8017530:	4413      	add	r3, r2
 8017532:	79fa      	ldrb	r2, [r7, #7]
 8017534:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017536:	4b11      	ldr	r3, [pc, #68]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 8017538:	7a5b      	ldrb	r3, [r3, #9]
 801753a:	b2db      	uxtb	r3, r3
 801753c:	1c5a      	adds	r2, r3, #1
 801753e:	b2d1      	uxtb	r1, r2
 8017540:	4a0e      	ldr	r2, [pc, #56]	@ (801757c <FATFS_LinkDriverEx+0x94>)
 8017542:	7251      	strb	r1, [r2, #9]
 8017544:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017546:	7dbb      	ldrb	r3, [r7, #22]
 8017548:	3330      	adds	r3, #48	@ 0x30
 801754a:	b2da      	uxtb	r2, r3
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	3301      	adds	r3, #1
 8017554:	223a      	movs	r2, #58	@ 0x3a
 8017556:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	3302      	adds	r3, #2
 801755c:	222f      	movs	r2, #47	@ 0x2f
 801755e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017560:	68bb      	ldr	r3, [r7, #8]
 8017562:	3303      	adds	r3, #3
 8017564:	2200      	movs	r2, #0
 8017566:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017568:	2300      	movs	r3, #0
 801756a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801756c:	7dfb      	ldrb	r3, [r7, #23]
}
 801756e:	4618      	mov	r0, r3
 8017570:	371c      	adds	r7, #28
 8017572:	46bd      	mov	sp, r7
 8017574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017578:	4770      	bx	lr
 801757a:	bf00      	nop
 801757c:	24002130 	.word	0x24002130

08017580 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b082      	sub	sp, #8
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
 8017588:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801758a:	2200      	movs	r2, #0
 801758c:	6839      	ldr	r1, [r7, #0]
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7ff ffaa 	bl	80174e8 <FATFS_LinkDriverEx>
 8017594:	4603      	mov	r3, r0
}
 8017596:	4618      	mov	r0, r3
 8017598:	3708      	adds	r7, #8
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}

0801759e <__cvt>:
 801759e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175a0:	ed2d 8b02 	vpush	{d8}
 80175a4:	eeb0 8b40 	vmov.f64	d8, d0
 80175a8:	b085      	sub	sp, #20
 80175aa:	4617      	mov	r7, r2
 80175ac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80175ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80175b0:	ee18 2a90 	vmov	r2, s17
 80175b4:	f025 0520 	bic.w	r5, r5, #32
 80175b8:	2a00      	cmp	r2, #0
 80175ba:	bfb6      	itet	lt
 80175bc:	222d      	movlt	r2, #45	@ 0x2d
 80175be:	2200      	movge	r2, #0
 80175c0:	eeb1 8b40 	vneglt.f64	d8, d0
 80175c4:	2d46      	cmp	r5, #70	@ 0x46
 80175c6:	460c      	mov	r4, r1
 80175c8:	701a      	strb	r2, [r3, #0]
 80175ca:	d004      	beq.n	80175d6 <__cvt+0x38>
 80175cc:	2d45      	cmp	r5, #69	@ 0x45
 80175ce:	d100      	bne.n	80175d2 <__cvt+0x34>
 80175d0:	3401      	adds	r4, #1
 80175d2:	2102      	movs	r1, #2
 80175d4:	e000      	b.n	80175d8 <__cvt+0x3a>
 80175d6:	2103      	movs	r1, #3
 80175d8:	ab03      	add	r3, sp, #12
 80175da:	9301      	str	r3, [sp, #4]
 80175dc:	ab02      	add	r3, sp, #8
 80175de:	9300      	str	r3, [sp, #0]
 80175e0:	4622      	mov	r2, r4
 80175e2:	4633      	mov	r3, r6
 80175e4:	eeb0 0b48 	vmov.f64	d0, d8
 80175e8:	f001 f99e 	bl	8018928 <_dtoa_r>
 80175ec:	2d47      	cmp	r5, #71	@ 0x47
 80175ee:	d114      	bne.n	801761a <__cvt+0x7c>
 80175f0:	07fb      	lsls	r3, r7, #31
 80175f2:	d50a      	bpl.n	801760a <__cvt+0x6c>
 80175f4:	1902      	adds	r2, r0, r4
 80175f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80175fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175fe:	bf08      	it	eq
 8017600:	9203      	streq	r2, [sp, #12]
 8017602:	2130      	movs	r1, #48	@ 0x30
 8017604:	9b03      	ldr	r3, [sp, #12]
 8017606:	4293      	cmp	r3, r2
 8017608:	d319      	bcc.n	801763e <__cvt+0xa0>
 801760a:	9b03      	ldr	r3, [sp, #12]
 801760c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801760e:	1a1b      	subs	r3, r3, r0
 8017610:	6013      	str	r3, [r2, #0]
 8017612:	b005      	add	sp, #20
 8017614:	ecbd 8b02 	vpop	{d8}
 8017618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801761a:	2d46      	cmp	r5, #70	@ 0x46
 801761c:	eb00 0204 	add.w	r2, r0, r4
 8017620:	d1e9      	bne.n	80175f6 <__cvt+0x58>
 8017622:	7803      	ldrb	r3, [r0, #0]
 8017624:	2b30      	cmp	r3, #48	@ 0x30
 8017626:	d107      	bne.n	8017638 <__cvt+0x9a>
 8017628:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017630:	bf1c      	itt	ne
 8017632:	f1c4 0401 	rsbne	r4, r4, #1
 8017636:	6034      	strne	r4, [r6, #0]
 8017638:	6833      	ldr	r3, [r6, #0]
 801763a:	441a      	add	r2, r3
 801763c:	e7db      	b.n	80175f6 <__cvt+0x58>
 801763e:	1c5c      	adds	r4, r3, #1
 8017640:	9403      	str	r4, [sp, #12]
 8017642:	7019      	strb	r1, [r3, #0]
 8017644:	e7de      	b.n	8017604 <__cvt+0x66>

08017646 <__exponent>:
 8017646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017648:	2900      	cmp	r1, #0
 801764a:	bfba      	itte	lt
 801764c:	4249      	neglt	r1, r1
 801764e:	232d      	movlt	r3, #45	@ 0x2d
 8017650:	232b      	movge	r3, #43	@ 0x2b
 8017652:	2909      	cmp	r1, #9
 8017654:	7002      	strb	r2, [r0, #0]
 8017656:	7043      	strb	r3, [r0, #1]
 8017658:	dd29      	ble.n	80176ae <__exponent+0x68>
 801765a:	f10d 0307 	add.w	r3, sp, #7
 801765e:	461d      	mov	r5, r3
 8017660:	270a      	movs	r7, #10
 8017662:	461a      	mov	r2, r3
 8017664:	fbb1 f6f7 	udiv	r6, r1, r7
 8017668:	fb07 1416 	mls	r4, r7, r6, r1
 801766c:	3430      	adds	r4, #48	@ 0x30
 801766e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017672:	460c      	mov	r4, r1
 8017674:	2c63      	cmp	r4, #99	@ 0x63
 8017676:	f103 33ff 	add.w	r3, r3, #4294967295
 801767a:	4631      	mov	r1, r6
 801767c:	dcf1      	bgt.n	8017662 <__exponent+0x1c>
 801767e:	3130      	adds	r1, #48	@ 0x30
 8017680:	1e94      	subs	r4, r2, #2
 8017682:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017686:	1c41      	adds	r1, r0, #1
 8017688:	4623      	mov	r3, r4
 801768a:	42ab      	cmp	r3, r5
 801768c:	d30a      	bcc.n	80176a4 <__exponent+0x5e>
 801768e:	f10d 0309 	add.w	r3, sp, #9
 8017692:	1a9b      	subs	r3, r3, r2
 8017694:	42ac      	cmp	r4, r5
 8017696:	bf88      	it	hi
 8017698:	2300      	movhi	r3, #0
 801769a:	3302      	adds	r3, #2
 801769c:	4403      	add	r3, r0
 801769e:	1a18      	subs	r0, r3, r0
 80176a0:	b003      	add	sp, #12
 80176a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80176a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80176ac:	e7ed      	b.n	801768a <__exponent+0x44>
 80176ae:	2330      	movs	r3, #48	@ 0x30
 80176b0:	3130      	adds	r1, #48	@ 0x30
 80176b2:	7083      	strb	r3, [r0, #2]
 80176b4:	70c1      	strb	r1, [r0, #3]
 80176b6:	1d03      	adds	r3, r0, #4
 80176b8:	e7f1      	b.n	801769e <__exponent+0x58>
 80176ba:	0000      	movs	r0, r0
 80176bc:	0000      	movs	r0, r0
	...

080176c0 <_printf_float>:
 80176c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c4:	b08d      	sub	sp, #52	@ 0x34
 80176c6:	460c      	mov	r4, r1
 80176c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80176cc:	4616      	mov	r6, r2
 80176ce:	461f      	mov	r7, r3
 80176d0:	4605      	mov	r5, r0
 80176d2:	f001 f813 	bl	80186fc <_localeconv_r>
 80176d6:	f8d0 b000 	ldr.w	fp, [r0]
 80176da:	4658      	mov	r0, fp
 80176dc:	f7e8 fe68 	bl	80003b0 <strlen>
 80176e0:	2300      	movs	r3, #0
 80176e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80176e4:	f8d8 3000 	ldr.w	r3, [r8]
 80176e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80176ec:	6822      	ldr	r2, [r4, #0]
 80176ee:	9005      	str	r0, [sp, #20]
 80176f0:	3307      	adds	r3, #7
 80176f2:	f023 0307 	bic.w	r3, r3, #7
 80176f6:	f103 0108 	add.w	r1, r3, #8
 80176fa:	f8c8 1000 	str.w	r1, [r8]
 80176fe:	ed93 0b00 	vldr	d0, [r3]
 8017702:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8017960 <_printf_float+0x2a0>
 8017706:	eeb0 7bc0 	vabs.f64	d7, d0
 801770a:	eeb4 7b46 	vcmp.f64	d7, d6
 801770e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017712:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8017716:	dd24      	ble.n	8017762 <_printf_float+0xa2>
 8017718:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801771c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017720:	d502      	bpl.n	8017728 <_printf_float+0x68>
 8017722:	232d      	movs	r3, #45	@ 0x2d
 8017724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017728:	498f      	ldr	r1, [pc, #572]	@ (8017968 <_printf_float+0x2a8>)
 801772a:	4b90      	ldr	r3, [pc, #576]	@ (801796c <_printf_float+0x2ac>)
 801772c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8017730:	bf94      	ite	ls
 8017732:	4688      	movls	r8, r1
 8017734:	4698      	movhi	r8, r3
 8017736:	f022 0204 	bic.w	r2, r2, #4
 801773a:	2303      	movs	r3, #3
 801773c:	6123      	str	r3, [r4, #16]
 801773e:	6022      	str	r2, [r4, #0]
 8017740:	f04f 0a00 	mov.w	sl, #0
 8017744:	9700      	str	r7, [sp, #0]
 8017746:	4633      	mov	r3, r6
 8017748:	aa0b      	add	r2, sp, #44	@ 0x2c
 801774a:	4621      	mov	r1, r4
 801774c:	4628      	mov	r0, r5
 801774e:	f000 f9d1 	bl	8017af4 <_printf_common>
 8017752:	3001      	adds	r0, #1
 8017754:	f040 8089 	bne.w	801786a <_printf_float+0x1aa>
 8017758:	f04f 30ff 	mov.w	r0, #4294967295
 801775c:	b00d      	add	sp, #52	@ 0x34
 801775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017762:	eeb4 0b40 	vcmp.f64	d0, d0
 8017766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776a:	d709      	bvc.n	8017780 <_printf_float+0xc0>
 801776c:	ee10 3a90 	vmov	r3, s1
 8017770:	2b00      	cmp	r3, #0
 8017772:	bfbc      	itt	lt
 8017774:	232d      	movlt	r3, #45	@ 0x2d
 8017776:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801777a:	497d      	ldr	r1, [pc, #500]	@ (8017970 <_printf_float+0x2b0>)
 801777c:	4b7d      	ldr	r3, [pc, #500]	@ (8017974 <_printf_float+0x2b4>)
 801777e:	e7d5      	b.n	801772c <_printf_float+0x6c>
 8017780:	6863      	ldr	r3, [r4, #4]
 8017782:	1c59      	adds	r1, r3, #1
 8017784:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8017788:	d139      	bne.n	80177fe <_printf_float+0x13e>
 801778a:	2306      	movs	r3, #6
 801778c:	6063      	str	r3, [r4, #4]
 801778e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8017792:	2300      	movs	r3, #0
 8017794:	6022      	str	r2, [r4, #0]
 8017796:	9303      	str	r3, [sp, #12]
 8017798:	ab0a      	add	r3, sp, #40	@ 0x28
 801779a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801779e:	ab09      	add	r3, sp, #36	@ 0x24
 80177a0:	9300      	str	r3, [sp, #0]
 80177a2:	6861      	ldr	r1, [r4, #4]
 80177a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80177a8:	4628      	mov	r0, r5
 80177aa:	f7ff fef8 	bl	801759e <__cvt>
 80177ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80177b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80177b4:	4680      	mov	r8, r0
 80177b6:	d129      	bne.n	801780c <_printf_float+0x14c>
 80177b8:	1cc8      	adds	r0, r1, #3
 80177ba:	db02      	blt.n	80177c2 <_printf_float+0x102>
 80177bc:	6863      	ldr	r3, [r4, #4]
 80177be:	4299      	cmp	r1, r3
 80177c0:	dd41      	ble.n	8017846 <_printf_float+0x186>
 80177c2:	f1a9 0902 	sub.w	r9, r9, #2
 80177c6:	fa5f f989 	uxtb.w	r9, r9
 80177ca:	3901      	subs	r1, #1
 80177cc:	464a      	mov	r2, r9
 80177ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80177d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80177d4:	f7ff ff37 	bl	8017646 <__exponent>
 80177d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80177da:	1813      	adds	r3, r2, r0
 80177dc:	2a01      	cmp	r2, #1
 80177de:	4682      	mov	sl, r0
 80177e0:	6123      	str	r3, [r4, #16]
 80177e2:	dc02      	bgt.n	80177ea <_printf_float+0x12a>
 80177e4:	6822      	ldr	r2, [r4, #0]
 80177e6:	07d2      	lsls	r2, r2, #31
 80177e8:	d501      	bpl.n	80177ee <_printf_float+0x12e>
 80177ea:	3301      	adds	r3, #1
 80177ec:	6123      	str	r3, [r4, #16]
 80177ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d0a6      	beq.n	8017744 <_printf_float+0x84>
 80177f6:	232d      	movs	r3, #45	@ 0x2d
 80177f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177fc:	e7a2      	b.n	8017744 <_printf_float+0x84>
 80177fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8017802:	d1c4      	bne.n	801778e <_printf_float+0xce>
 8017804:	2b00      	cmp	r3, #0
 8017806:	d1c2      	bne.n	801778e <_printf_float+0xce>
 8017808:	2301      	movs	r3, #1
 801780a:	e7bf      	b.n	801778c <_printf_float+0xcc>
 801780c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017810:	d9db      	bls.n	80177ca <_printf_float+0x10a>
 8017812:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8017816:	d118      	bne.n	801784a <_printf_float+0x18a>
 8017818:	2900      	cmp	r1, #0
 801781a:	6863      	ldr	r3, [r4, #4]
 801781c:	dd0b      	ble.n	8017836 <_printf_float+0x176>
 801781e:	6121      	str	r1, [r4, #16]
 8017820:	b913      	cbnz	r3, 8017828 <_printf_float+0x168>
 8017822:	6822      	ldr	r2, [r4, #0]
 8017824:	07d0      	lsls	r0, r2, #31
 8017826:	d502      	bpl.n	801782e <_printf_float+0x16e>
 8017828:	3301      	adds	r3, #1
 801782a:	440b      	add	r3, r1
 801782c:	6123      	str	r3, [r4, #16]
 801782e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017830:	f04f 0a00 	mov.w	sl, #0
 8017834:	e7db      	b.n	80177ee <_printf_float+0x12e>
 8017836:	b913      	cbnz	r3, 801783e <_printf_float+0x17e>
 8017838:	6822      	ldr	r2, [r4, #0]
 801783a:	07d2      	lsls	r2, r2, #31
 801783c:	d501      	bpl.n	8017842 <_printf_float+0x182>
 801783e:	3302      	adds	r3, #2
 8017840:	e7f4      	b.n	801782c <_printf_float+0x16c>
 8017842:	2301      	movs	r3, #1
 8017844:	e7f2      	b.n	801782c <_printf_float+0x16c>
 8017846:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801784a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801784c:	4299      	cmp	r1, r3
 801784e:	db05      	blt.n	801785c <_printf_float+0x19c>
 8017850:	6823      	ldr	r3, [r4, #0]
 8017852:	6121      	str	r1, [r4, #16]
 8017854:	07d8      	lsls	r0, r3, #31
 8017856:	d5ea      	bpl.n	801782e <_printf_float+0x16e>
 8017858:	1c4b      	adds	r3, r1, #1
 801785a:	e7e7      	b.n	801782c <_printf_float+0x16c>
 801785c:	2900      	cmp	r1, #0
 801785e:	bfd4      	ite	le
 8017860:	f1c1 0202 	rsble	r2, r1, #2
 8017864:	2201      	movgt	r2, #1
 8017866:	4413      	add	r3, r2
 8017868:	e7e0      	b.n	801782c <_printf_float+0x16c>
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	055a      	lsls	r2, r3, #21
 801786e:	d407      	bmi.n	8017880 <_printf_float+0x1c0>
 8017870:	6923      	ldr	r3, [r4, #16]
 8017872:	4642      	mov	r2, r8
 8017874:	4631      	mov	r1, r6
 8017876:	4628      	mov	r0, r5
 8017878:	47b8      	blx	r7
 801787a:	3001      	adds	r0, #1
 801787c:	d12a      	bne.n	80178d4 <_printf_float+0x214>
 801787e:	e76b      	b.n	8017758 <_printf_float+0x98>
 8017880:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017884:	f240 80e0 	bls.w	8017a48 <_printf_float+0x388>
 8017888:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801788c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017894:	d133      	bne.n	80178fe <_printf_float+0x23e>
 8017896:	4a38      	ldr	r2, [pc, #224]	@ (8017978 <_printf_float+0x2b8>)
 8017898:	2301      	movs	r3, #1
 801789a:	4631      	mov	r1, r6
 801789c:	4628      	mov	r0, r5
 801789e:	47b8      	blx	r7
 80178a0:	3001      	adds	r0, #1
 80178a2:	f43f af59 	beq.w	8017758 <_printf_float+0x98>
 80178a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80178aa:	4543      	cmp	r3, r8
 80178ac:	db02      	blt.n	80178b4 <_printf_float+0x1f4>
 80178ae:	6823      	ldr	r3, [r4, #0]
 80178b0:	07d8      	lsls	r0, r3, #31
 80178b2:	d50f      	bpl.n	80178d4 <_printf_float+0x214>
 80178b4:	9b05      	ldr	r3, [sp, #20]
 80178b6:	465a      	mov	r2, fp
 80178b8:	4631      	mov	r1, r6
 80178ba:	4628      	mov	r0, r5
 80178bc:	47b8      	blx	r7
 80178be:	3001      	adds	r0, #1
 80178c0:	f43f af4a 	beq.w	8017758 <_printf_float+0x98>
 80178c4:	f04f 0900 	mov.w	r9, #0
 80178c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80178cc:	f104 0a1a 	add.w	sl, r4, #26
 80178d0:	45c8      	cmp	r8, r9
 80178d2:	dc09      	bgt.n	80178e8 <_printf_float+0x228>
 80178d4:	6823      	ldr	r3, [r4, #0]
 80178d6:	079b      	lsls	r3, r3, #30
 80178d8:	f100 8107 	bmi.w	8017aea <_printf_float+0x42a>
 80178dc:	68e0      	ldr	r0, [r4, #12]
 80178de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80178e0:	4298      	cmp	r0, r3
 80178e2:	bfb8      	it	lt
 80178e4:	4618      	movlt	r0, r3
 80178e6:	e739      	b.n	801775c <_printf_float+0x9c>
 80178e8:	2301      	movs	r3, #1
 80178ea:	4652      	mov	r2, sl
 80178ec:	4631      	mov	r1, r6
 80178ee:	4628      	mov	r0, r5
 80178f0:	47b8      	blx	r7
 80178f2:	3001      	adds	r0, #1
 80178f4:	f43f af30 	beq.w	8017758 <_printf_float+0x98>
 80178f8:	f109 0901 	add.w	r9, r9, #1
 80178fc:	e7e8      	b.n	80178d0 <_printf_float+0x210>
 80178fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017900:	2b00      	cmp	r3, #0
 8017902:	dc3b      	bgt.n	801797c <_printf_float+0x2bc>
 8017904:	4a1c      	ldr	r2, [pc, #112]	@ (8017978 <_printf_float+0x2b8>)
 8017906:	2301      	movs	r3, #1
 8017908:	4631      	mov	r1, r6
 801790a:	4628      	mov	r0, r5
 801790c:	47b8      	blx	r7
 801790e:	3001      	adds	r0, #1
 8017910:	f43f af22 	beq.w	8017758 <_printf_float+0x98>
 8017914:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017918:	ea59 0303 	orrs.w	r3, r9, r3
 801791c:	d102      	bne.n	8017924 <_printf_float+0x264>
 801791e:	6823      	ldr	r3, [r4, #0]
 8017920:	07d9      	lsls	r1, r3, #31
 8017922:	d5d7      	bpl.n	80178d4 <_printf_float+0x214>
 8017924:	9b05      	ldr	r3, [sp, #20]
 8017926:	465a      	mov	r2, fp
 8017928:	4631      	mov	r1, r6
 801792a:	4628      	mov	r0, r5
 801792c:	47b8      	blx	r7
 801792e:	3001      	adds	r0, #1
 8017930:	f43f af12 	beq.w	8017758 <_printf_float+0x98>
 8017934:	f04f 0a00 	mov.w	sl, #0
 8017938:	f104 0b1a 	add.w	fp, r4, #26
 801793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801793e:	425b      	negs	r3, r3
 8017940:	4553      	cmp	r3, sl
 8017942:	dc01      	bgt.n	8017948 <_printf_float+0x288>
 8017944:	464b      	mov	r3, r9
 8017946:	e794      	b.n	8017872 <_printf_float+0x1b2>
 8017948:	2301      	movs	r3, #1
 801794a:	465a      	mov	r2, fp
 801794c:	4631      	mov	r1, r6
 801794e:	4628      	mov	r0, r5
 8017950:	47b8      	blx	r7
 8017952:	3001      	adds	r0, #1
 8017954:	f43f af00 	beq.w	8017758 <_printf_float+0x98>
 8017958:	f10a 0a01 	add.w	sl, sl, #1
 801795c:	e7ee      	b.n	801793c <_printf_float+0x27c>
 801795e:	bf00      	nop
 8017960:	ffffffff 	.word	0xffffffff
 8017964:	7fefffff 	.word	0x7fefffff
 8017968:	0801cb70 	.word	0x0801cb70
 801796c:	0801cb74 	.word	0x0801cb74
 8017970:	0801cb78 	.word	0x0801cb78
 8017974:	0801cb7c 	.word	0x0801cb7c
 8017978:	0801cb80 	.word	0x0801cb80
 801797c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801797e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017982:	4553      	cmp	r3, sl
 8017984:	bfa8      	it	ge
 8017986:	4653      	movge	r3, sl
 8017988:	2b00      	cmp	r3, #0
 801798a:	4699      	mov	r9, r3
 801798c:	dc37      	bgt.n	80179fe <_printf_float+0x33e>
 801798e:	2300      	movs	r3, #0
 8017990:	9307      	str	r3, [sp, #28]
 8017992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017996:	f104 021a 	add.w	r2, r4, #26
 801799a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801799c:	9907      	ldr	r1, [sp, #28]
 801799e:	9306      	str	r3, [sp, #24]
 80179a0:	eba3 0309 	sub.w	r3, r3, r9
 80179a4:	428b      	cmp	r3, r1
 80179a6:	dc31      	bgt.n	8017a0c <_printf_float+0x34c>
 80179a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179aa:	459a      	cmp	sl, r3
 80179ac:	dc3b      	bgt.n	8017a26 <_printf_float+0x366>
 80179ae:	6823      	ldr	r3, [r4, #0]
 80179b0:	07da      	lsls	r2, r3, #31
 80179b2:	d438      	bmi.n	8017a26 <_printf_float+0x366>
 80179b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179b6:	ebaa 0903 	sub.w	r9, sl, r3
 80179ba:	9b06      	ldr	r3, [sp, #24]
 80179bc:	ebaa 0303 	sub.w	r3, sl, r3
 80179c0:	4599      	cmp	r9, r3
 80179c2:	bfa8      	it	ge
 80179c4:	4699      	movge	r9, r3
 80179c6:	f1b9 0f00 	cmp.w	r9, #0
 80179ca:	dc34      	bgt.n	8017a36 <_printf_float+0x376>
 80179cc:	f04f 0800 	mov.w	r8, #0
 80179d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80179d4:	f104 0b1a 	add.w	fp, r4, #26
 80179d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179da:	ebaa 0303 	sub.w	r3, sl, r3
 80179de:	eba3 0309 	sub.w	r3, r3, r9
 80179e2:	4543      	cmp	r3, r8
 80179e4:	f77f af76 	ble.w	80178d4 <_printf_float+0x214>
 80179e8:	2301      	movs	r3, #1
 80179ea:	465a      	mov	r2, fp
 80179ec:	4631      	mov	r1, r6
 80179ee:	4628      	mov	r0, r5
 80179f0:	47b8      	blx	r7
 80179f2:	3001      	adds	r0, #1
 80179f4:	f43f aeb0 	beq.w	8017758 <_printf_float+0x98>
 80179f8:	f108 0801 	add.w	r8, r8, #1
 80179fc:	e7ec      	b.n	80179d8 <_printf_float+0x318>
 80179fe:	4642      	mov	r2, r8
 8017a00:	4631      	mov	r1, r6
 8017a02:	4628      	mov	r0, r5
 8017a04:	47b8      	blx	r7
 8017a06:	3001      	adds	r0, #1
 8017a08:	d1c1      	bne.n	801798e <_printf_float+0x2ce>
 8017a0a:	e6a5      	b.n	8017758 <_printf_float+0x98>
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	4631      	mov	r1, r6
 8017a10:	4628      	mov	r0, r5
 8017a12:	9206      	str	r2, [sp, #24]
 8017a14:	47b8      	blx	r7
 8017a16:	3001      	adds	r0, #1
 8017a18:	f43f ae9e 	beq.w	8017758 <_printf_float+0x98>
 8017a1c:	9b07      	ldr	r3, [sp, #28]
 8017a1e:	9a06      	ldr	r2, [sp, #24]
 8017a20:	3301      	adds	r3, #1
 8017a22:	9307      	str	r3, [sp, #28]
 8017a24:	e7b9      	b.n	801799a <_printf_float+0x2da>
 8017a26:	9b05      	ldr	r3, [sp, #20]
 8017a28:	465a      	mov	r2, fp
 8017a2a:	4631      	mov	r1, r6
 8017a2c:	4628      	mov	r0, r5
 8017a2e:	47b8      	blx	r7
 8017a30:	3001      	adds	r0, #1
 8017a32:	d1bf      	bne.n	80179b4 <_printf_float+0x2f4>
 8017a34:	e690      	b.n	8017758 <_printf_float+0x98>
 8017a36:	9a06      	ldr	r2, [sp, #24]
 8017a38:	464b      	mov	r3, r9
 8017a3a:	4442      	add	r2, r8
 8017a3c:	4631      	mov	r1, r6
 8017a3e:	4628      	mov	r0, r5
 8017a40:	47b8      	blx	r7
 8017a42:	3001      	adds	r0, #1
 8017a44:	d1c2      	bne.n	80179cc <_printf_float+0x30c>
 8017a46:	e687      	b.n	8017758 <_printf_float+0x98>
 8017a48:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8017a4c:	f1b9 0f01 	cmp.w	r9, #1
 8017a50:	dc01      	bgt.n	8017a56 <_printf_float+0x396>
 8017a52:	07db      	lsls	r3, r3, #31
 8017a54:	d536      	bpl.n	8017ac4 <_printf_float+0x404>
 8017a56:	2301      	movs	r3, #1
 8017a58:	4642      	mov	r2, r8
 8017a5a:	4631      	mov	r1, r6
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	47b8      	blx	r7
 8017a60:	3001      	adds	r0, #1
 8017a62:	f43f ae79 	beq.w	8017758 <_printf_float+0x98>
 8017a66:	9b05      	ldr	r3, [sp, #20]
 8017a68:	465a      	mov	r2, fp
 8017a6a:	4631      	mov	r1, r6
 8017a6c:	4628      	mov	r0, r5
 8017a6e:	47b8      	blx	r7
 8017a70:	3001      	adds	r0, #1
 8017a72:	f43f ae71 	beq.w	8017758 <_printf_float+0x98>
 8017a76:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017a7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a82:	f109 39ff 	add.w	r9, r9, #4294967295
 8017a86:	d018      	beq.n	8017aba <_printf_float+0x3fa>
 8017a88:	464b      	mov	r3, r9
 8017a8a:	f108 0201 	add.w	r2, r8, #1
 8017a8e:	4631      	mov	r1, r6
 8017a90:	4628      	mov	r0, r5
 8017a92:	47b8      	blx	r7
 8017a94:	3001      	adds	r0, #1
 8017a96:	d10c      	bne.n	8017ab2 <_printf_float+0x3f2>
 8017a98:	e65e      	b.n	8017758 <_printf_float+0x98>
 8017a9a:	2301      	movs	r3, #1
 8017a9c:	465a      	mov	r2, fp
 8017a9e:	4631      	mov	r1, r6
 8017aa0:	4628      	mov	r0, r5
 8017aa2:	47b8      	blx	r7
 8017aa4:	3001      	adds	r0, #1
 8017aa6:	f43f ae57 	beq.w	8017758 <_printf_float+0x98>
 8017aaa:	f108 0801 	add.w	r8, r8, #1
 8017aae:	45c8      	cmp	r8, r9
 8017ab0:	dbf3      	blt.n	8017a9a <_printf_float+0x3da>
 8017ab2:	4653      	mov	r3, sl
 8017ab4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017ab8:	e6dc      	b.n	8017874 <_printf_float+0x1b4>
 8017aba:	f04f 0800 	mov.w	r8, #0
 8017abe:	f104 0b1a 	add.w	fp, r4, #26
 8017ac2:	e7f4      	b.n	8017aae <_printf_float+0x3ee>
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	4642      	mov	r2, r8
 8017ac8:	e7e1      	b.n	8017a8e <_printf_float+0x3ce>
 8017aca:	2301      	movs	r3, #1
 8017acc:	464a      	mov	r2, r9
 8017ace:	4631      	mov	r1, r6
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	47b8      	blx	r7
 8017ad4:	3001      	adds	r0, #1
 8017ad6:	f43f ae3f 	beq.w	8017758 <_printf_float+0x98>
 8017ada:	f108 0801 	add.w	r8, r8, #1
 8017ade:	68e3      	ldr	r3, [r4, #12]
 8017ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017ae2:	1a5b      	subs	r3, r3, r1
 8017ae4:	4543      	cmp	r3, r8
 8017ae6:	dcf0      	bgt.n	8017aca <_printf_float+0x40a>
 8017ae8:	e6f8      	b.n	80178dc <_printf_float+0x21c>
 8017aea:	f04f 0800 	mov.w	r8, #0
 8017aee:	f104 0919 	add.w	r9, r4, #25
 8017af2:	e7f4      	b.n	8017ade <_printf_float+0x41e>

08017af4 <_printf_common>:
 8017af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017af8:	4616      	mov	r6, r2
 8017afa:	4698      	mov	r8, r3
 8017afc:	688a      	ldr	r2, [r1, #8]
 8017afe:	690b      	ldr	r3, [r1, #16]
 8017b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017b04:	4293      	cmp	r3, r2
 8017b06:	bfb8      	it	lt
 8017b08:	4613      	movlt	r3, r2
 8017b0a:	6033      	str	r3, [r6, #0]
 8017b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017b10:	4607      	mov	r7, r0
 8017b12:	460c      	mov	r4, r1
 8017b14:	b10a      	cbz	r2, 8017b1a <_printf_common+0x26>
 8017b16:	3301      	adds	r3, #1
 8017b18:	6033      	str	r3, [r6, #0]
 8017b1a:	6823      	ldr	r3, [r4, #0]
 8017b1c:	0699      	lsls	r1, r3, #26
 8017b1e:	bf42      	ittt	mi
 8017b20:	6833      	ldrmi	r3, [r6, #0]
 8017b22:	3302      	addmi	r3, #2
 8017b24:	6033      	strmi	r3, [r6, #0]
 8017b26:	6825      	ldr	r5, [r4, #0]
 8017b28:	f015 0506 	ands.w	r5, r5, #6
 8017b2c:	d106      	bne.n	8017b3c <_printf_common+0x48>
 8017b2e:	f104 0a19 	add.w	sl, r4, #25
 8017b32:	68e3      	ldr	r3, [r4, #12]
 8017b34:	6832      	ldr	r2, [r6, #0]
 8017b36:	1a9b      	subs	r3, r3, r2
 8017b38:	42ab      	cmp	r3, r5
 8017b3a:	dc26      	bgt.n	8017b8a <_printf_common+0x96>
 8017b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017b40:	6822      	ldr	r2, [r4, #0]
 8017b42:	3b00      	subs	r3, #0
 8017b44:	bf18      	it	ne
 8017b46:	2301      	movne	r3, #1
 8017b48:	0692      	lsls	r2, r2, #26
 8017b4a:	d42b      	bmi.n	8017ba4 <_printf_common+0xb0>
 8017b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017b50:	4641      	mov	r1, r8
 8017b52:	4638      	mov	r0, r7
 8017b54:	47c8      	blx	r9
 8017b56:	3001      	adds	r0, #1
 8017b58:	d01e      	beq.n	8017b98 <_printf_common+0xa4>
 8017b5a:	6823      	ldr	r3, [r4, #0]
 8017b5c:	6922      	ldr	r2, [r4, #16]
 8017b5e:	f003 0306 	and.w	r3, r3, #6
 8017b62:	2b04      	cmp	r3, #4
 8017b64:	bf02      	ittt	eq
 8017b66:	68e5      	ldreq	r5, [r4, #12]
 8017b68:	6833      	ldreq	r3, [r6, #0]
 8017b6a:	1aed      	subeq	r5, r5, r3
 8017b6c:	68a3      	ldr	r3, [r4, #8]
 8017b6e:	bf0c      	ite	eq
 8017b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b74:	2500      	movne	r5, #0
 8017b76:	4293      	cmp	r3, r2
 8017b78:	bfc4      	itt	gt
 8017b7a:	1a9b      	subgt	r3, r3, r2
 8017b7c:	18ed      	addgt	r5, r5, r3
 8017b7e:	2600      	movs	r6, #0
 8017b80:	341a      	adds	r4, #26
 8017b82:	42b5      	cmp	r5, r6
 8017b84:	d11a      	bne.n	8017bbc <_printf_common+0xc8>
 8017b86:	2000      	movs	r0, #0
 8017b88:	e008      	b.n	8017b9c <_printf_common+0xa8>
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	4652      	mov	r2, sl
 8017b8e:	4641      	mov	r1, r8
 8017b90:	4638      	mov	r0, r7
 8017b92:	47c8      	blx	r9
 8017b94:	3001      	adds	r0, #1
 8017b96:	d103      	bne.n	8017ba0 <_printf_common+0xac>
 8017b98:	f04f 30ff 	mov.w	r0, #4294967295
 8017b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ba0:	3501      	adds	r5, #1
 8017ba2:	e7c6      	b.n	8017b32 <_printf_common+0x3e>
 8017ba4:	18e1      	adds	r1, r4, r3
 8017ba6:	1c5a      	adds	r2, r3, #1
 8017ba8:	2030      	movs	r0, #48	@ 0x30
 8017baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017bae:	4422      	add	r2, r4
 8017bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017bb8:	3302      	adds	r3, #2
 8017bba:	e7c7      	b.n	8017b4c <_printf_common+0x58>
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	4622      	mov	r2, r4
 8017bc0:	4641      	mov	r1, r8
 8017bc2:	4638      	mov	r0, r7
 8017bc4:	47c8      	blx	r9
 8017bc6:	3001      	adds	r0, #1
 8017bc8:	d0e6      	beq.n	8017b98 <_printf_common+0xa4>
 8017bca:	3601      	adds	r6, #1
 8017bcc:	e7d9      	b.n	8017b82 <_printf_common+0x8e>
	...

08017bd0 <_printf_i>:
 8017bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bd4:	7e0f      	ldrb	r7, [r1, #24]
 8017bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017bd8:	2f78      	cmp	r7, #120	@ 0x78
 8017bda:	4691      	mov	r9, r2
 8017bdc:	4680      	mov	r8, r0
 8017bde:	460c      	mov	r4, r1
 8017be0:	469a      	mov	sl, r3
 8017be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017be6:	d807      	bhi.n	8017bf8 <_printf_i+0x28>
 8017be8:	2f62      	cmp	r7, #98	@ 0x62
 8017bea:	d80a      	bhi.n	8017c02 <_printf_i+0x32>
 8017bec:	2f00      	cmp	r7, #0
 8017bee:	f000 80d2 	beq.w	8017d96 <_printf_i+0x1c6>
 8017bf2:	2f58      	cmp	r7, #88	@ 0x58
 8017bf4:	f000 80b9 	beq.w	8017d6a <_printf_i+0x19a>
 8017bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017c00:	e03a      	b.n	8017c78 <_printf_i+0xa8>
 8017c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017c06:	2b15      	cmp	r3, #21
 8017c08:	d8f6      	bhi.n	8017bf8 <_printf_i+0x28>
 8017c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8017c10 <_printf_i+0x40>)
 8017c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017c10:	08017c69 	.word	0x08017c69
 8017c14:	08017c7d 	.word	0x08017c7d
 8017c18:	08017bf9 	.word	0x08017bf9
 8017c1c:	08017bf9 	.word	0x08017bf9
 8017c20:	08017bf9 	.word	0x08017bf9
 8017c24:	08017bf9 	.word	0x08017bf9
 8017c28:	08017c7d 	.word	0x08017c7d
 8017c2c:	08017bf9 	.word	0x08017bf9
 8017c30:	08017bf9 	.word	0x08017bf9
 8017c34:	08017bf9 	.word	0x08017bf9
 8017c38:	08017bf9 	.word	0x08017bf9
 8017c3c:	08017d7d 	.word	0x08017d7d
 8017c40:	08017ca7 	.word	0x08017ca7
 8017c44:	08017d37 	.word	0x08017d37
 8017c48:	08017bf9 	.word	0x08017bf9
 8017c4c:	08017bf9 	.word	0x08017bf9
 8017c50:	08017d9f 	.word	0x08017d9f
 8017c54:	08017bf9 	.word	0x08017bf9
 8017c58:	08017ca7 	.word	0x08017ca7
 8017c5c:	08017bf9 	.word	0x08017bf9
 8017c60:	08017bf9 	.word	0x08017bf9
 8017c64:	08017d3f 	.word	0x08017d3f
 8017c68:	6833      	ldr	r3, [r6, #0]
 8017c6a:	1d1a      	adds	r2, r3, #4
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	6032      	str	r2, [r6, #0]
 8017c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017c78:	2301      	movs	r3, #1
 8017c7a:	e09d      	b.n	8017db8 <_printf_i+0x1e8>
 8017c7c:	6833      	ldr	r3, [r6, #0]
 8017c7e:	6820      	ldr	r0, [r4, #0]
 8017c80:	1d19      	adds	r1, r3, #4
 8017c82:	6031      	str	r1, [r6, #0]
 8017c84:	0606      	lsls	r6, r0, #24
 8017c86:	d501      	bpl.n	8017c8c <_printf_i+0xbc>
 8017c88:	681d      	ldr	r5, [r3, #0]
 8017c8a:	e003      	b.n	8017c94 <_printf_i+0xc4>
 8017c8c:	0645      	lsls	r5, r0, #25
 8017c8e:	d5fb      	bpl.n	8017c88 <_printf_i+0xb8>
 8017c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017c94:	2d00      	cmp	r5, #0
 8017c96:	da03      	bge.n	8017ca0 <_printf_i+0xd0>
 8017c98:	232d      	movs	r3, #45	@ 0x2d
 8017c9a:	426d      	negs	r5, r5
 8017c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017ca0:	4859      	ldr	r0, [pc, #356]	@ (8017e08 <_printf_i+0x238>)
 8017ca2:	230a      	movs	r3, #10
 8017ca4:	e011      	b.n	8017cca <_printf_i+0xfa>
 8017ca6:	6821      	ldr	r1, [r4, #0]
 8017ca8:	6833      	ldr	r3, [r6, #0]
 8017caa:	0608      	lsls	r0, r1, #24
 8017cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8017cb0:	d402      	bmi.n	8017cb8 <_printf_i+0xe8>
 8017cb2:	0649      	lsls	r1, r1, #25
 8017cb4:	bf48      	it	mi
 8017cb6:	b2ad      	uxthmi	r5, r5
 8017cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8017cba:	4853      	ldr	r0, [pc, #332]	@ (8017e08 <_printf_i+0x238>)
 8017cbc:	6033      	str	r3, [r6, #0]
 8017cbe:	bf14      	ite	ne
 8017cc0:	230a      	movne	r3, #10
 8017cc2:	2308      	moveq	r3, #8
 8017cc4:	2100      	movs	r1, #0
 8017cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017cca:	6866      	ldr	r6, [r4, #4]
 8017ccc:	60a6      	str	r6, [r4, #8]
 8017cce:	2e00      	cmp	r6, #0
 8017cd0:	bfa2      	ittt	ge
 8017cd2:	6821      	ldrge	r1, [r4, #0]
 8017cd4:	f021 0104 	bicge.w	r1, r1, #4
 8017cd8:	6021      	strge	r1, [r4, #0]
 8017cda:	b90d      	cbnz	r5, 8017ce0 <_printf_i+0x110>
 8017cdc:	2e00      	cmp	r6, #0
 8017cde:	d04b      	beq.n	8017d78 <_printf_i+0x1a8>
 8017ce0:	4616      	mov	r6, r2
 8017ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8017ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8017cea:	5dc7      	ldrb	r7, [r0, r7]
 8017cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017cf0:	462f      	mov	r7, r5
 8017cf2:	42bb      	cmp	r3, r7
 8017cf4:	460d      	mov	r5, r1
 8017cf6:	d9f4      	bls.n	8017ce2 <_printf_i+0x112>
 8017cf8:	2b08      	cmp	r3, #8
 8017cfa:	d10b      	bne.n	8017d14 <_printf_i+0x144>
 8017cfc:	6823      	ldr	r3, [r4, #0]
 8017cfe:	07df      	lsls	r7, r3, #31
 8017d00:	d508      	bpl.n	8017d14 <_printf_i+0x144>
 8017d02:	6923      	ldr	r3, [r4, #16]
 8017d04:	6861      	ldr	r1, [r4, #4]
 8017d06:	4299      	cmp	r1, r3
 8017d08:	bfde      	ittt	le
 8017d0a:	2330      	movle	r3, #48	@ 0x30
 8017d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017d14:	1b92      	subs	r2, r2, r6
 8017d16:	6122      	str	r2, [r4, #16]
 8017d18:	f8cd a000 	str.w	sl, [sp]
 8017d1c:	464b      	mov	r3, r9
 8017d1e:	aa03      	add	r2, sp, #12
 8017d20:	4621      	mov	r1, r4
 8017d22:	4640      	mov	r0, r8
 8017d24:	f7ff fee6 	bl	8017af4 <_printf_common>
 8017d28:	3001      	adds	r0, #1
 8017d2a:	d14a      	bne.n	8017dc2 <_printf_i+0x1f2>
 8017d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d30:	b004      	add	sp, #16
 8017d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d36:	6823      	ldr	r3, [r4, #0]
 8017d38:	f043 0320 	orr.w	r3, r3, #32
 8017d3c:	6023      	str	r3, [r4, #0]
 8017d3e:	4833      	ldr	r0, [pc, #204]	@ (8017e0c <_printf_i+0x23c>)
 8017d40:	2778      	movs	r7, #120	@ 0x78
 8017d42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017d46:	6823      	ldr	r3, [r4, #0]
 8017d48:	6831      	ldr	r1, [r6, #0]
 8017d4a:	061f      	lsls	r7, r3, #24
 8017d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017d50:	d402      	bmi.n	8017d58 <_printf_i+0x188>
 8017d52:	065f      	lsls	r7, r3, #25
 8017d54:	bf48      	it	mi
 8017d56:	b2ad      	uxthmi	r5, r5
 8017d58:	6031      	str	r1, [r6, #0]
 8017d5a:	07d9      	lsls	r1, r3, #31
 8017d5c:	bf44      	itt	mi
 8017d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8017d62:	6023      	strmi	r3, [r4, #0]
 8017d64:	b11d      	cbz	r5, 8017d6e <_printf_i+0x19e>
 8017d66:	2310      	movs	r3, #16
 8017d68:	e7ac      	b.n	8017cc4 <_printf_i+0xf4>
 8017d6a:	4827      	ldr	r0, [pc, #156]	@ (8017e08 <_printf_i+0x238>)
 8017d6c:	e7e9      	b.n	8017d42 <_printf_i+0x172>
 8017d6e:	6823      	ldr	r3, [r4, #0]
 8017d70:	f023 0320 	bic.w	r3, r3, #32
 8017d74:	6023      	str	r3, [r4, #0]
 8017d76:	e7f6      	b.n	8017d66 <_printf_i+0x196>
 8017d78:	4616      	mov	r6, r2
 8017d7a:	e7bd      	b.n	8017cf8 <_printf_i+0x128>
 8017d7c:	6833      	ldr	r3, [r6, #0]
 8017d7e:	6825      	ldr	r5, [r4, #0]
 8017d80:	6961      	ldr	r1, [r4, #20]
 8017d82:	1d18      	adds	r0, r3, #4
 8017d84:	6030      	str	r0, [r6, #0]
 8017d86:	062e      	lsls	r6, r5, #24
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	d501      	bpl.n	8017d90 <_printf_i+0x1c0>
 8017d8c:	6019      	str	r1, [r3, #0]
 8017d8e:	e002      	b.n	8017d96 <_printf_i+0x1c6>
 8017d90:	0668      	lsls	r0, r5, #25
 8017d92:	d5fb      	bpl.n	8017d8c <_printf_i+0x1bc>
 8017d94:	8019      	strh	r1, [r3, #0]
 8017d96:	2300      	movs	r3, #0
 8017d98:	6123      	str	r3, [r4, #16]
 8017d9a:	4616      	mov	r6, r2
 8017d9c:	e7bc      	b.n	8017d18 <_printf_i+0x148>
 8017d9e:	6833      	ldr	r3, [r6, #0]
 8017da0:	1d1a      	adds	r2, r3, #4
 8017da2:	6032      	str	r2, [r6, #0]
 8017da4:	681e      	ldr	r6, [r3, #0]
 8017da6:	6862      	ldr	r2, [r4, #4]
 8017da8:	2100      	movs	r1, #0
 8017daa:	4630      	mov	r0, r6
 8017dac:	f7e8 fab0 	bl	8000310 <memchr>
 8017db0:	b108      	cbz	r0, 8017db6 <_printf_i+0x1e6>
 8017db2:	1b80      	subs	r0, r0, r6
 8017db4:	6060      	str	r0, [r4, #4]
 8017db6:	6863      	ldr	r3, [r4, #4]
 8017db8:	6123      	str	r3, [r4, #16]
 8017dba:	2300      	movs	r3, #0
 8017dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017dc0:	e7aa      	b.n	8017d18 <_printf_i+0x148>
 8017dc2:	6923      	ldr	r3, [r4, #16]
 8017dc4:	4632      	mov	r2, r6
 8017dc6:	4649      	mov	r1, r9
 8017dc8:	4640      	mov	r0, r8
 8017dca:	47d0      	blx	sl
 8017dcc:	3001      	adds	r0, #1
 8017dce:	d0ad      	beq.n	8017d2c <_printf_i+0x15c>
 8017dd0:	6823      	ldr	r3, [r4, #0]
 8017dd2:	079b      	lsls	r3, r3, #30
 8017dd4:	d413      	bmi.n	8017dfe <_printf_i+0x22e>
 8017dd6:	68e0      	ldr	r0, [r4, #12]
 8017dd8:	9b03      	ldr	r3, [sp, #12]
 8017dda:	4298      	cmp	r0, r3
 8017ddc:	bfb8      	it	lt
 8017dde:	4618      	movlt	r0, r3
 8017de0:	e7a6      	b.n	8017d30 <_printf_i+0x160>
 8017de2:	2301      	movs	r3, #1
 8017de4:	4632      	mov	r2, r6
 8017de6:	4649      	mov	r1, r9
 8017de8:	4640      	mov	r0, r8
 8017dea:	47d0      	blx	sl
 8017dec:	3001      	adds	r0, #1
 8017dee:	d09d      	beq.n	8017d2c <_printf_i+0x15c>
 8017df0:	3501      	adds	r5, #1
 8017df2:	68e3      	ldr	r3, [r4, #12]
 8017df4:	9903      	ldr	r1, [sp, #12]
 8017df6:	1a5b      	subs	r3, r3, r1
 8017df8:	42ab      	cmp	r3, r5
 8017dfa:	dcf2      	bgt.n	8017de2 <_printf_i+0x212>
 8017dfc:	e7eb      	b.n	8017dd6 <_printf_i+0x206>
 8017dfe:	2500      	movs	r5, #0
 8017e00:	f104 0619 	add.w	r6, r4, #25
 8017e04:	e7f5      	b.n	8017df2 <_printf_i+0x222>
 8017e06:	bf00      	nop
 8017e08:	0801cb82 	.word	0x0801cb82
 8017e0c:	0801cb93 	.word	0x0801cb93

08017e10 <_scanf_float>:
 8017e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e14:	b087      	sub	sp, #28
 8017e16:	4617      	mov	r7, r2
 8017e18:	9303      	str	r3, [sp, #12]
 8017e1a:	688b      	ldr	r3, [r1, #8]
 8017e1c:	1e5a      	subs	r2, r3, #1
 8017e1e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017e22:	bf81      	itttt	hi
 8017e24:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017e28:	eb03 0b05 	addhi.w	fp, r3, r5
 8017e2c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017e30:	608b      	strhi	r3, [r1, #8]
 8017e32:	680b      	ldr	r3, [r1, #0]
 8017e34:	460a      	mov	r2, r1
 8017e36:	f04f 0500 	mov.w	r5, #0
 8017e3a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017e3e:	f842 3b1c 	str.w	r3, [r2], #28
 8017e42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017e46:	4680      	mov	r8, r0
 8017e48:	460c      	mov	r4, r1
 8017e4a:	bf98      	it	ls
 8017e4c:	f04f 0b00 	movls.w	fp, #0
 8017e50:	9201      	str	r2, [sp, #4]
 8017e52:	4616      	mov	r6, r2
 8017e54:	46aa      	mov	sl, r5
 8017e56:	46a9      	mov	r9, r5
 8017e58:	9502      	str	r5, [sp, #8]
 8017e5a:	68a2      	ldr	r2, [r4, #8]
 8017e5c:	b152      	cbz	r2, 8017e74 <_scanf_float+0x64>
 8017e5e:	683b      	ldr	r3, [r7, #0]
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	2b4e      	cmp	r3, #78	@ 0x4e
 8017e64:	d864      	bhi.n	8017f30 <_scanf_float+0x120>
 8017e66:	2b40      	cmp	r3, #64	@ 0x40
 8017e68:	d83c      	bhi.n	8017ee4 <_scanf_float+0xd4>
 8017e6a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017e6e:	b2c8      	uxtb	r0, r1
 8017e70:	280e      	cmp	r0, #14
 8017e72:	d93a      	bls.n	8017eea <_scanf_float+0xda>
 8017e74:	f1b9 0f00 	cmp.w	r9, #0
 8017e78:	d003      	beq.n	8017e82 <_scanf_float+0x72>
 8017e7a:	6823      	ldr	r3, [r4, #0]
 8017e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017e80:	6023      	str	r3, [r4, #0]
 8017e82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e86:	f1ba 0f01 	cmp.w	sl, #1
 8017e8a:	f200 8117 	bhi.w	80180bc <_scanf_float+0x2ac>
 8017e8e:	9b01      	ldr	r3, [sp, #4]
 8017e90:	429e      	cmp	r6, r3
 8017e92:	f200 8108 	bhi.w	80180a6 <_scanf_float+0x296>
 8017e96:	2001      	movs	r0, #1
 8017e98:	b007      	add	sp, #28
 8017e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e9e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8017ea2:	2a0d      	cmp	r2, #13
 8017ea4:	d8e6      	bhi.n	8017e74 <_scanf_float+0x64>
 8017ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8017eac <_scanf_float+0x9c>)
 8017ea8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017eac:	08017ff3 	.word	0x08017ff3
 8017eb0:	08017e75 	.word	0x08017e75
 8017eb4:	08017e75 	.word	0x08017e75
 8017eb8:	08017e75 	.word	0x08017e75
 8017ebc:	08018053 	.word	0x08018053
 8017ec0:	0801802b 	.word	0x0801802b
 8017ec4:	08017e75 	.word	0x08017e75
 8017ec8:	08017e75 	.word	0x08017e75
 8017ecc:	08018001 	.word	0x08018001
 8017ed0:	08017e75 	.word	0x08017e75
 8017ed4:	08017e75 	.word	0x08017e75
 8017ed8:	08017e75 	.word	0x08017e75
 8017edc:	08017e75 	.word	0x08017e75
 8017ee0:	08017fb9 	.word	0x08017fb9
 8017ee4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8017ee8:	e7db      	b.n	8017ea2 <_scanf_float+0x92>
 8017eea:	290e      	cmp	r1, #14
 8017eec:	d8c2      	bhi.n	8017e74 <_scanf_float+0x64>
 8017eee:	a001      	add	r0, pc, #4	@ (adr r0, 8017ef4 <_scanf_float+0xe4>)
 8017ef0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017ef4:	08017fa9 	.word	0x08017fa9
 8017ef8:	08017e75 	.word	0x08017e75
 8017efc:	08017fa9 	.word	0x08017fa9
 8017f00:	0801803f 	.word	0x0801803f
 8017f04:	08017e75 	.word	0x08017e75
 8017f08:	08017f51 	.word	0x08017f51
 8017f0c:	08017f8f 	.word	0x08017f8f
 8017f10:	08017f8f 	.word	0x08017f8f
 8017f14:	08017f8f 	.word	0x08017f8f
 8017f18:	08017f8f 	.word	0x08017f8f
 8017f1c:	08017f8f 	.word	0x08017f8f
 8017f20:	08017f8f 	.word	0x08017f8f
 8017f24:	08017f8f 	.word	0x08017f8f
 8017f28:	08017f8f 	.word	0x08017f8f
 8017f2c:	08017f8f 	.word	0x08017f8f
 8017f30:	2b6e      	cmp	r3, #110	@ 0x6e
 8017f32:	d809      	bhi.n	8017f48 <_scanf_float+0x138>
 8017f34:	2b60      	cmp	r3, #96	@ 0x60
 8017f36:	d8b2      	bhi.n	8017e9e <_scanf_float+0x8e>
 8017f38:	2b54      	cmp	r3, #84	@ 0x54
 8017f3a:	d07b      	beq.n	8018034 <_scanf_float+0x224>
 8017f3c:	2b59      	cmp	r3, #89	@ 0x59
 8017f3e:	d199      	bne.n	8017e74 <_scanf_float+0x64>
 8017f40:	2d07      	cmp	r5, #7
 8017f42:	d197      	bne.n	8017e74 <_scanf_float+0x64>
 8017f44:	2508      	movs	r5, #8
 8017f46:	e02c      	b.n	8017fa2 <_scanf_float+0x192>
 8017f48:	2b74      	cmp	r3, #116	@ 0x74
 8017f4a:	d073      	beq.n	8018034 <_scanf_float+0x224>
 8017f4c:	2b79      	cmp	r3, #121	@ 0x79
 8017f4e:	e7f6      	b.n	8017f3e <_scanf_float+0x12e>
 8017f50:	6821      	ldr	r1, [r4, #0]
 8017f52:	05c8      	lsls	r0, r1, #23
 8017f54:	d51b      	bpl.n	8017f8e <_scanf_float+0x17e>
 8017f56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8017f5a:	6021      	str	r1, [r4, #0]
 8017f5c:	f109 0901 	add.w	r9, r9, #1
 8017f60:	f1bb 0f00 	cmp.w	fp, #0
 8017f64:	d003      	beq.n	8017f6e <_scanf_float+0x15e>
 8017f66:	3201      	adds	r2, #1
 8017f68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017f6c:	60a2      	str	r2, [r4, #8]
 8017f6e:	68a3      	ldr	r3, [r4, #8]
 8017f70:	3b01      	subs	r3, #1
 8017f72:	60a3      	str	r3, [r4, #8]
 8017f74:	6923      	ldr	r3, [r4, #16]
 8017f76:	3301      	adds	r3, #1
 8017f78:	6123      	str	r3, [r4, #16]
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	3b01      	subs	r3, #1
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	607b      	str	r3, [r7, #4]
 8017f82:	f340 8087 	ble.w	8018094 <_scanf_float+0x284>
 8017f86:	683b      	ldr	r3, [r7, #0]
 8017f88:	3301      	adds	r3, #1
 8017f8a:	603b      	str	r3, [r7, #0]
 8017f8c:	e765      	b.n	8017e5a <_scanf_float+0x4a>
 8017f8e:	eb1a 0105 	adds.w	r1, sl, r5
 8017f92:	f47f af6f 	bne.w	8017e74 <_scanf_float+0x64>
 8017f96:	6822      	ldr	r2, [r4, #0]
 8017f98:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8017f9c:	6022      	str	r2, [r4, #0]
 8017f9e:	460d      	mov	r5, r1
 8017fa0:	468a      	mov	sl, r1
 8017fa2:	f806 3b01 	strb.w	r3, [r6], #1
 8017fa6:	e7e2      	b.n	8017f6e <_scanf_float+0x15e>
 8017fa8:	6822      	ldr	r2, [r4, #0]
 8017faa:	0610      	lsls	r0, r2, #24
 8017fac:	f57f af62 	bpl.w	8017e74 <_scanf_float+0x64>
 8017fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017fb4:	6022      	str	r2, [r4, #0]
 8017fb6:	e7f4      	b.n	8017fa2 <_scanf_float+0x192>
 8017fb8:	f1ba 0f00 	cmp.w	sl, #0
 8017fbc:	d10e      	bne.n	8017fdc <_scanf_float+0x1cc>
 8017fbe:	f1b9 0f00 	cmp.w	r9, #0
 8017fc2:	d10e      	bne.n	8017fe2 <_scanf_float+0x1d2>
 8017fc4:	6822      	ldr	r2, [r4, #0]
 8017fc6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017fca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017fce:	d108      	bne.n	8017fe2 <_scanf_float+0x1d2>
 8017fd0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017fd4:	6022      	str	r2, [r4, #0]
 8017fd6:	f04f 0a01 	mov.w	sl, #1
 8017fda:	e7e2      	b.n	8017fa2 <_scanf_float+0x192>
 8017fdc:	f1ba 0f02 	cmp.w	sl, #2
 8017fe0:	d055      	beq.n	801808e <_scanf_float+0x27e>
 8017fe2:	2d01      	cmp	r5, #1
 8017fe4:	d002      	beq.n	8017fec <_scanf_float+0x1dc>
 8017fe6:	2d04      	cmp	r5, #4
 8017fe8:	f47f af44 	bne.w	8017e74 <_scanf_float+0x64>
 8017fec:	3501      	adds	r5, #1
 8017fee:	b2ed      	uxtb	r5, r5
 8017ff0:	e7d7      	b.n	8017fa2 <_scanf_float+0x192>
 8017ff2:	f1ba 0f01 	cmp.w	sl, #1
 8017ff6:	f47f af3d 	bne.w	8017e74 <_scanf_float+0x64>
 8017ffa:	f04f 0a02 	mov.w	sl, #2
 8017ffe:	e7d0      	b.n	8017fa2 <_scanf_float+0x192>
 8018000:	b97d      	cbnz	r5, 8018022 <_scanf_float+0x212>
 8018002:	f1b9 0f00 	cmp.w	r9, #0
 8018006:	f47f af38 	bne.w	8017e7a <_scanf_float+0x6a>
 801800a:	6822      	ldr	r2, [r4, #0]
 801800c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8018010:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8018014:	f040 8101 	bne.w	801821a <_scanf_float+0x40a>
 8018018:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801801c:	6022      	str	r2, [r4, #0]
 801801e:	2501      	movs	r5, #1
 8018020:	e7bf      	b.n	8017fa2 <_scanf_float+0x192>
 8018022:	2d03      	cmp	r5, #3
 8018024:	d0e2      	beq.n	8017fec <_scanf_float+0x1dc>
 8018026:	2d05      	cmp	r5, #5
 8018028:	e7de      	b.n	8017fe8 <_scanf_float+0x1d8>
 801802a:	2d02      	cmp	r5, #2
 801802c:	f47f af22 	bne.w	8017e74 <_scanf_float+0x64>
 8018030:	2503      	movs	r5, #3
 8018032:	e7b6      	b.n	8017fa2 <_scanf_float+0x192>
 8018034:	2d06      	cmp	r5, #6
 8018036:	f47f af1d 	bne.w	8017e74 <_scanf_float+0x64>
 801803a:	2507      	movs	r5, #7
 801803c:	e7b1      	b.n	8017fa2 <_scanf_float+0x192>
 801803e:	6822      	ldr	r2, [r4, #0]
 8018040:	0591      	lsls	r1, r2, #22
 8018042:	f57f af17 	bpl.w	8017e74 <_scanf_float+0x64>
 8018046:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801804a:	6022      	str	r2, [r4, #0]
 801804c:	f8cd 9008 	str.w	r9, [sp, #8]
 8018050:	e7a7      	b.n	8017fa2 <_scanf_float+0x192>
 8018052:	6822      	ldr	r2, [r4, #0]
 8018054:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8018058:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801805c:	d006      	beq.n	801806c <_scanf_float+0x25c>
 801805e:	0550      	lsls	r0, r2, #21
 8018060:	f57f af08 	bpl.w	8017e74 <_scanf_float+0x64>
 8018064:	f1b9 0f00 	cmp.w	r9, #0
 8018068:	f000 80d7 	beq.w	801821a <_scanf_float+0x40a>
 801806c:	0591      	lsls	r1, r2, #22
 801806e:	bf58      	it	pl
 8018070:	9902      	ldrpl	r1, [sp, #8]
 8018072:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8018076:	bf58      	it	pl
 8018078:	eba9 0101 	subpl.w	r1, r9, r1
 801807c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8018080:	bf58      	it	pl
 8018082:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018086:	6022      	str	r2, [r4, #0]
 8018088:	f04f 0900 	mov.w	r9, #0
 801808c:	e789      	b.n	8017fa2 <_scanf_float+0x192>
 801808e:	f04f 0a03 	mov.w	sl, #3
 8018092:	e786      	b.n	8017fa2 <_scanf_float+0x192>
 8018094:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018098:	4639      	mov	r1, r7
 801809a:	4640      	mov	r0, r8
 801809c:	4798      	blx	r3
 801809e:	2800      	cmp	r0, #0
 80180a0:	f43f aedb 	beq.w	8017e5a <_scanf_float+0x4a>
 80180a4:	e6e6      	b.n	8017e74 <_scanf_float+0x64>
 80180a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80180aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80180ae:	463a      	mov	r2, r7
 80180b0:	4640      	mov	r0, r8
 80180b2:	4798      	blx	r3
 80180b4:	6923      	ldr	r3, [r4, #16]
 80180b6:	3b01      	subs	r3, #1
 80180b8:	6123      	str	r3, [r4, #16]
 80180ba:	e6e8      	b.n	8017e8e <_scanf_float+0x7e>
 80180bc:	1e6b      	subs	r3, r5, #1
 80180be:	2b06      	cmp	r3, #6
 80180c0:	d824      	bhi.n	801810c <_scanf_float+0x2fc>
 80180c2:	2d02      	cmp	r5, #2
 80180c4:	d836      	bhi.n	8018134 <_scanf_float+0x324>
 80180c6:	9b01      	ldr	r3, [sp, #4]
 80180c8:	429e      	cmp	r6, r3
 80180ca:	f67f aee4 	bls.w	8017e96 <_scanf_float+0x86>
 80180ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80180d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80180d6:	463a      	mov	r2, r7
 80180d8:	4640      	mov	r0, r8
 80180da:	4798      	blx	r3
 80180dc:	6923      	ldr	r3, [r4, #16]
 80180de:	3b01      	subs	r3, #1
 80180e0:	6123      	str	r3, [r4, #16]
 80180e2:	e7f0      	b.n	80180c6 <_scanf_float+0x2b6>
 80180e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80180e8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80180ec:	463a      	mov	r2, r7
 80180ee:	4640      	mov	r0, r8
 80180f0:	4798      	blx	r3
 80180f2:	6923      	ldr	r3, [r4, #16]
 80180f4:	3b01      	subs	r3, #1
 80180f6:	6123      	str	r3, [r4, #16]
 80180f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80180fc:	fa5f fa8a 	uxtb.w	sl, sl
 8018100:	f1ba 0f02 	cmp.w	sl, #2
 8018104:	d1ee      	bne.n	80180e4 <_scanf_float+0x2d4>
 8018106:	3d03      	subs	r5, #3
 8018108:	b2ed      	uxtb	r5, r5
 801810a:	1b76      	subs	r6, r6, r5
 801810c:	6823      	ldr	r3, [r4, #0]
 801810e:	05da      	lsls	r2, r3, #23
 8018110:	d530      	bpl.n	8018174 <_scanf_float+0x364>
 8018112:	055b      	lsls	r3, r3, #21
 8018114:	d511      	bpl.n	801813a <_scanf_float+0x32a>
 8018116:	9b01      	ldr	r3, [sp, #4]
 8018118:	429e      	cmp	r6, r3
 801811a:	f67f aebc 	bls.w	8017e96 <_scanf_float+0x86>
 801811e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018122:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018126:	463a      	mov	r2, r7
 8018128:	4640      	mov	r0, r8
 801812a:	4798      	blx	r3
 801812c:	6923      	ldr	r3, [r4, #16]
 801812e:	3b01      	subs	r3, #1
 8018130:	6123      	str	r3, [r4, #16]
 8018132:	e7f0      	b.n	8018116 <_scanf_float+0x306>
 8018134:	46aa      	mov	sl, r5
 8018136:	46b3      	mov	fp, r6
 8018138:	e7de      	b.n	80180f8 <_scanf_float+0x2e8>
 801813a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801813e:	6923      	ldr	r3, [r4, #16]
 8018140:	2965      	cmp	r1, #101	@ 0x65
 8018142:	f103 33ff 	add.w	r3, r3, #4294967295
 8018146:	f106 35ff 	add.w	r5, r6, #4294967295
 801814a:	6123      	str	r3, [r4, #16]
 801814c:	d00c      	beq.n	8018168 <_scanf_float+0x358>
 801814e:	2945      	cmp	r1, #69	@ 0x45
 8018150:	d00a      	beq.n	8018168 <_scanf_float+0x358>
 8018152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018156:	463a      	mov	r2, r7
 8018158:	4640      	mov	r0, r8
 801815a:	4798      	blx	r3
 801815c:	6923      	ldr	r3, [r4, #16]
 801815e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018162:	3b01      	subs	r3, #1
 8018164:	1eb5      	subs	r5, r6, #2
 8018166:	6123      	str	r3, [r4, #16]
 8018168:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801816c:	463a      	mov	r2, r7
 801816e:	4640      	mov	r0, r8
 8018170:	4798      	blx	r3
 8018172:	462e      	mov	r6, r5
 8018174:	6822      	ldr	r2, [r4, #0]
 8018176:	f012 0210 	ands.w	r2, r2, #16
 801817a:	d001      	beq.n	8018180 <_scanf_float+0x370>
 801817c:	2000      	movs	r0, #0
 801817e:	e68b      	b.n	8017e98 <_scanf_float+0x88>
 8018180:	7032      	strb	r2, [r6, #0]
 8018182:	6823      	ldr	r3, [r4, #0]
 8018184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8018188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801818c:	d11a      	bne.n	80181c4 <_scanf_float+0x3b4>
 801818e:	9b02      	ldr	r3, [sp, #8]
 8018190:	454b      	cmp	r3, r9
 8018192:	eba3 0209 	sub.w	r2, r3, r9
 8018196:	d121      	bne.n	80181dc <_scanf_float+0x3cc>
 8018198:	9901      	ldr	r1, [sp, #4]
 801819a:	2200      	movs	r2, #0
 801819c:	4640      	mov	r0, r8
 801819e:	f002 fc79 	bl	801aa94 <_strtod_r>
 80181a2:	9b03      	ldr	r3, [sp, #12]
 80181a4:	6821      	ldr	r1, [r4, #0]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	f011 0f02 	tst.w	r1, #2
 80181ac:	f103 0204 	add.w	r2, r3, #4
 80181b0:	d01f      	beq.n	80181f2 <_scanf_float+0x3e2>
 80181b2:	9903      	ldr	r1, [sp, #12]
 80181b4:	600a      	str	r2, [r1, #0]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	ed83 0b00 	vstr	d0, [r3]
 80181bc:	68e3      	ldr	r3, [r4, #12]
 80181be:	3301      	adds	r3, #1
 80181c0:	60e3      	str	r3, [r4, #12]
 80181c2:	e7db      	b.n	801817c <_scanf_float+0x36c>
 80181c4:	9b04      	ldr	r3, [sp, #16]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d0e6      	beq.n	8018198 <_scanf_float+0x388>
 80181ca:	9905      	ldr	r1, [sp, #20]
 80181cc:	230a      	movs	r3, #10
 80181ce:	3101      	adds	r1, #1
 80181d0:	4640      	mov	r0, r8
 80181d2:	f002 fcdf 	bl	801ab94 <_strtol_r>
 80181d6:	9b04      	ldr	r3, [sp, #16]
 80181d8:	9e05      	ldr	r6, [sp, #20]
 80181da:	1ac2      	subs	r2, r0, r3
 80181dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80181e0:	429e      	cmp	r6, r3
 80181e2:	bf28      	it	cs
 80181e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80181e8:	490d      	ldr	r1, [pc, #52]	@ (8018220 <_scanf_float+0x410>)
 80181ea:	4630      	mov	r0, r6
 80181ec:	f000 f94e 	bl	801848c <siprintf>
 80181f0:	e7d2      	b.n	8018198 <_scanf_float+0x388>
 80181f2:	f011 0f04 	tst.w	r1, #4
 80181f6:	9903      	ldr	r1, [sp, #12]
 80181f8:	600a      	str	r2, [r1, #0]
 80181fa:	d1dc      	bne.n	80181b6 <_scanf_float+0x3a6>
 80181fc:	eeb4 0b40 	vcmp.f64	d0, d0
 8018200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018204:	681d      	ldr	r5, [r3, #0]
 8018206:	d705      	bvc.n	8018214 <_scanf_float+0x404>
 8018208:	4806      	ldr	r0, [pc, #24]	@ (8018224 <_scanf_float+0x414>)
 801820a:	f000 fafd 	bl	8018808 <nanf>
 801820e:	ed85 0a00 	vstr	s0, [r5]
 8018212:	e7d3      	b.n	80181bc <_scanf_float+0x3ac>
 8018214:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018218:	e7f9      	b.n	801820e <_scanf_float+0x3fe>
 801821a:	f04f 0900 	mov.w	r9, #0
 801821e:	e630      	b.n	8017e82 <_scanf_float+0x72>
 8018220:	0801cba4 	.word	0x0801cba4
 8018224:	0801cf3d 	.word	0x0801cf3d

08018228 <std>:
 8018228:	2300      	movs	r3, #0
 801822a:	b510      	push	{r4, lr}
 801822c:	4604      	mov	r4, r0
 801822e:	e9c0 3300 	strd	r3, r3, [r0]
 8018232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018236:	6083      	str	r3, [r0, #8]
 8018238:	8181      	strh	r1, [r0, #12]
 801823a:	6643      	str	r3, [r0, #100]	@ 0x64
 801823c:	81c2      	strh	r2, [r0, #14]
 801823e:	6183      	str	r3, [r0, #24]
 8018240:	4619      	mov	r1, r3
 8018242:	2208      	movs	r2, #8
 8018244:	305c      	adds	r0, #92	@ 0x5c
 8018246:	f000 fa51 	bl	80186ec <memset>
 801824a:	4b0d      	ldr	r3, [pc, #52]	@ (8018280 <std+0x58>)
 801824c:	6263      	str	r3, [r4, #36]	@ 0x24
 801824e:	4b0d      	ldr	r3, [pc, #52]	@ (8018284 <std+0x5c>)
 8018250:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018252:	4b0d      	ldr	r3, [pc, #52]	@ (8018288 <std+0x60>)
 8018254:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018256:	4b0d      	ldr	r3, [pc, #52]	@ (801828c <std+0x64>)
 8018258:	6323      	str	r3, [r4, #48]	@ 0x30
 801825a:	4b0d      	ldr	r3, [pc, #52]	@ (8018290 <std+0x68>)
 801825c:	6224      	str	r4, [r4, #32]
 801825e:	429c      	cmp	r4, r3
 8018260:	d006      	beq.n	8018270 <std+0x48>
 8018262:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018266:	4294      	cmp	r4, r2
 8018268:	d002      	beq.n	8018270 <std+0x48>
 801826a:	33d0      	adds	r3, #208	@ 0xd0
 801826c:	429c      	cmp	r4, r3
 801826e:	d105      	bne.n	801827c <std+0x54>
 8018270:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018278:	f000 bab4 	b.w	80187e4 <__retarget_lock_init_recursive>
 801827c:	bd10      	pop	{r4, pc}
 801827e:	bf00      	nop
 8018280:	080184cd 	.word	0x080184cd
 8018284:	080184ef 	.word	0x080184ef
 8018288:	08018527 	.word	0x08018527
 801828c:	0801854b 	.word	0x0801854b
 8018290:	2400213c 	.word	0x2400213c

08018294 <stdio_exit_handler>:
 8018294:	4a02      	ldr	r2, [pc, #8]	@ (80182a0 <stdio_exit_handler+0xc>)
 8018296:	4903      	ldr	r1, [pc, #12]	@ (80182a4 <stdio_exit_handler+0x10>)
 8018298:	4803      	ldr	r0, [pc, #12]	@ (80182a8 <stdio_exit_handler+0x14>)
 801829a:	f000 b869 	b.w	8018370 <_fwalk_sglue>
 801829e:	bf00      	nop
 80182a0:	2400015c 	.word	0x2400015c
 80182a4:	0801b1d5 	.word	0x0801b1d5
 80182a8:	2400016c 	.word	0x2400016c

080182ac <cleanup_stdio>:
 80182ac:	6841      	ldr	r1, [r0, #4]
 80182ae:	4b0c      	ldr	r3, [pc, #48]	@ (80182e0 <cleanup_stdio+0x34>)
 80182b0:	4299      	cmp	r1, r3
 80182b2:	b510      	push	{r4, lr}
 80182b4:	4604      	mov	r4, r0
 80182b6:	d001      	beq.n	80182bc <cleanup_stdio+0x10>
 80182b8:	f002 ff8c 	bl	801b1d4 <_fflush_r>
 80182bc:	68a1      	ldr	r1, [r4, #8]
 80182be:	4b09      	ldr	r3, [pc, #36]	@ (80182e4 <cleanup_stdio+0x38>)
 80182c0:	4299      	cmp	r1, r3
 80182c2:	d002      	beq.n	80182ca <cleanup_stdio+0x1e>
 80182c4:	4620      	mov	r0, r4
 80182c6:	f002 ff85 	bl	801b1d4 <_fflush_r>
 80182ca:	68e1      	ldr	r1, [r4, #12]
 80182cc:	4b06      	ldr	r3, [pc, #24]	@ (80182e8 <cleanup_stdio+0x3c>)
 80182ce:	4299      	cmp	r1, r3
 80182d0:	d004      	beq.n	80182dc <cleanup_stdio+0x30>
 80182d2:	4620      	mov	r0, r4
 80182d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182d8:	f002 bf7c 	b.w	801b1d4 <_fflush_r>
 80182dc:	bd10      	pop	{r4, pc}
 80182de:	bf00      	nop
 80182e0:	2400213c 	.word	0x2400213c
 80182e4:	240021a4 	.word	0x240021a4
 80182e8:	2400220c 	.word	0x2400220c

080182ec <global_stdio_init.part.0>:
 80182ec:	b510      	push	{r4, lr}
 80182ee:	4b0b      	ldr	r3, [pc, #44]	@ (801831c <global_stdio_init.part.0+0x30>)
 80182f0:	4c0b      	ldr	r4, [pc, #44]	@ (8018320 <global_stdio_init.part.0+0x34>)
 80182f2:	4a0c      	ldr	r2, [pc, #48]	@ (8018324 <global_stdio_init.part.0+0x38>)
 80182f4:	601a      	str	r2, [r3, #0]
 80182f6:	4620      	mov	r0, r4
 80182f8:	2200      	movs	r2, #0
 80182fa:	2104      	movs	r1, #4
 80182fc:	f7ff ff94 	bl	8018228 <std>
 8018300:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018304:	2201      	movs	r2, #1
 8018306:	2109      	movs	r1, #9
 8018308:	f7ff ff8e 	bl	8018228 <std>
 801830c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018310:	2202      	movs	r2, #2
 8018312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018316:	2112      	movs	r1, #18
 8018318:	f7ff bf86 	b.w	8018228 <std>
 801831c:	24002274 	.word	0x24002274
 8018320:	2400213c 	.word	0x2400213c
 8018324:	08018295 	.word	0x08018295

08018328 <__sfp_lock_acquire>:
 8018328:	4801      	ldr	r0, [pc, #4]	@ (8018330 <__sfp_lock_acquire+0x8>)
 801832a:	f000 ba5c 	b.w	80187e6 <__retarget_lock_acquire_recursive>
 801832e:	bf00      	nop
 8018330:	2400227d 	.word	0x2400227d

08018334 <__sfp_lock_release>:
 8018334:	4801      	ldr	r0, [pc, #4]	@ (801833c <__sfp_lock_release+0x8>)
 8018336:	f000 ba57 	b.w	80187e8 <__retarget_lock_release_recursive>
 801833a:	bf00      	nop
 801833c:	2400227d 	.word	0x2400227d

08018340 <__sinit>:
 8018340:	b510      	push	{r4, lr}
 8018342:	4604      	mov	r4, r0
 8018344:	f7ff fff0 	bl	8018328 <__sfp_lock_acquire>
 8018348:	6a23      	ldr	r3, [r4, #32]
 801834a:	b11b      	cbz	r3, 8018354 <__sinit+0x14>
 801834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018350:	f7ff bff0 	b.w	8018334 <__sfp_lock_release>
 8018354:	4b04      	ldr	r3, [pc, #16]	@ (8018368 <__sinit+0x28>)
 8018356:	6223      	str	r3, [r4, #32]
 8018358:	4b04      	ldr	r3, [pc, #16]	@ (801836c <__sinit+0x2c>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d1f5      	bne.n	801834c <__sinit+0xc>
 8018360:	f7ff ffc4 	bl	80182ec <global_stdio_init.part.0>
 8018364:	e7f2      	b.n	801834c <__sinit+0xc>
 8018366:	bf00      	nop
 8018368:	080182ad 	.word	0x080182ad
 801836c:	24002274 	.word	0x24002274

08018370 <_fwalk_sglue>:
 8018370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018374:	4607      	mov	r7, r0
 8018376:	4688      	mov	r8, r1
 8018378:	4614      	mov	r4, r2
 801837a:	2600      	movs	r6, #0
 801837c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018380:	f1b9 0901 	subs.w	r9, r9, #1
 8018384:	d505      	bpl.n	8018392 <_fwalk_sglue+0x22>
 8018386:	6824      	ldr	r4, [r4, #0]
 8018388:	2c00      	cmp	r4, #0
 801838a:	d1f7      	bne.n	801837c <_fwalk_sglue+0xc>
 801838c:	4630      	mov	r0, r6
 801838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018392:	89ab      	ldrh	r3, [r5, #12]
 8018394:	2b01      	cmp	r3, #1
 8018396:	d907      	bls.n	80183a8 <_fwalk_sglue+0x38>
 8018398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801839c:	3301      	adds	r3, #1
 801839e:	d003      	beq.n	80183a8 <_fwalk_sglue+0x38>
 80183a0:	4629      	mov	r1, r5
 80183a2:	4638      	mov	r0, r7
 80183a4:	47c0      	blx	r8
 80183a6:	4306      	orrs	r6, r0
 80183a8:	3568      	adds	r5, #104	@ 0x68
 80183aa:	e7e9      	b.n	8018380 <_fwalk_sglue+0x10>

080183ac <iprintf>:
 80183ac:	b40f      	push	{r0, r1, r2, r3}
 80183ae:	b507      	push	{r0, r1, r2, lr}
 80183b0:	4906      	ldr	r1, [pc, #24]	@ (80183cc <iprintf+0x20>)
 80183b2:	ab04      	add	r3, sp, #16
 80183b4:	6808      	ldr	r0, [r1, #0]
 80183b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80183ba:	6881      	ldr	r1, [r0, #8]
 80183bc:	9301      	str	r3, [sp, #4]
 80183be:	f002 fd6d 	bl	801ae9c <_vfiprintf_r>
 80183c2:	b003      	add	sp, #12
 80183c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80183c8:	b004      	add	sp, #16
 80183ca:	4770      	bx	lr
 80183cc:	24000168 	.word	0x24000168

080183d0 <_puts_r>:
 80183d0:	6a03      	ldr	r3, [r0, #32]
 80183d2:	b570      	push	{r4, r5, r6, lr}
 80183d4:	6884      	ldr	r4, [r0, #8]
 80183d6:	4605      	mov	r5, r0
 80183d8:	460e      	mov	r6, r1
 80183da:	b90b      	cbnz	r3, 80183e0 <_puts_r+0x10>
 80183dc:	f7ff ffb0 	bl	8018340 <__sinit>
 80183e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80183e2:	07db      	lsls	r3, r3, #31
 80183e4:	d405      	bmi.n	80183f2 <_puts_r+0x22>
 80183e6:	89a3      	ldrh	r3, [r4, #12]
 80183e8:	0598      	lsls	r0, r3, #22
 80183ea:	d402      	bmi.n	80183f2 <_puts_r+0x22>
 80183ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80183ee:	f000 f9fa 	bl	80187e6 <__retarget_lock_acquire_recursive>
 80183f2:	89a3      	ldrh	r3, [r4, #12]
 80183f4:	0719      	lsls	r1, r3, #28
 80183f6:	d502      	bpl.n	80183fe <_puts_r+0x2e>
 80183f8:	6923      	ldr	r3, [r4, #16]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d135      	bne.n	801846a <_puts_r+0x9a>
 80183fe:	4621      	mov	r1, r4
 8018400:	4628      	mov	r0, r5
 8018402:	f000 f91d 	bl	8018640 <__swsetup_r>
 8018406:	b380      	cbz	r0, 801846a <_puts_r+0x9a>
 8018408:	f04f 35ff 	mov.w	r5, #4294967295
 801840c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801840e:	07da      	lsls	r2, r3, #31
 8018410:	d405      	bmi.n	801841e <_puts_r+0x4e>
 8018412:	89a3      	ldrh	r3, [r4, #12]
 8018414:	059b      	lsls	r3, r3, #22
 8018416:	d402      	bmi.n	801841e <_puts_r+0x4e>
 8018418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801841a:	f000 f9e5 	bl	80187e8 <__retarget_lock_release_recursive>
 801841e:	4628      	mov	r0, r5
 8018420:	bd70      	pop	{r4, r5, r6, pc}
 8018422:	2b00      	cmp	r3, #0
 8018424:	da04      	bge.n	8018430 <_puts_r+0x60>
 8018426:	69a2      	ldr	r2, [r4, #24]
 8018428:	429a      	cmp	r2, r3
 801842a:	dc17      	bgt.n	801845c <_puts_r+0x8c>
 801842c:	290a      	cmp	r1, #10
 801842e:	d015      	beq.n	801845c <_puts_r+0x8c>
 8018430:	6823      	ldr	r3, [r4, #0]
 8018432:	1c5a      	adds	r2, r3, #1
 8018434:	6022      	str	r2, [r4, #0]
 8018436:	7019      	strb	r1, [r3, #0]
 8018438:	68a3      	ldr	r3, [r4, #8]
 801843a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801843e:	3b01      	subs	r3, #1
 8018440:	60a3      	str	r3, [r4, #8]
 8018442:	2900      	cmp	r1, #0
 8018444:	d1ed      	bne.n	8018422 <_puts_r+0x52>
 8018446:	2b00      	cmp	r3, #0
 8018448:	da11      	bge.n	801846e <_puts_r+0x9e>
 801844a:	4622      	mov	r2, r4
 801844c:	210a      	movs	r1, #10
 801844e:	4628      	mov	r0, r5
 8018450:	f000 f8b8 	bl	80185c4 <__swbuf_r>
 8018454:	3001      	adds	r0, #1
 8018456:	d0d7      	beq.n	8018408 <_puts_r+0x38>
 8018458:	250a      	movs	r5, #10
 801845a:	e7d7      	b.n	801840c <_puts_r+0x3c>
 801845c:	4622      	mov	r2, r4
 801845e:	4628      	mov	r0, r5
 8018460:	f000 f8b0 	bl	80185c4 <__swbuf_r>
 8018464:	3001      	adds	r0, #1
 8018466:	d1e7      	bne.n	8018438 <_puts_r+0x68>
 8018468:	e7ce      	b.n	8018408 <_puts_r+0x38>
 801846a:	3e01      	subs	r6, #1
 801846c:	e7e4      	b.n	8018438 <_puts_r+0x68>
 801846e:	6823      	ldr	r3, [r4, #0]
 8018470:	1c5a      	adds	r2, r3, #1
 8018472:	6022      	str	r2, [r4, #0]
 8018474:	220a      	movs	r2, #10
 8018476:	701a      	strb	r2, [r3, #0]
 8018478:	e7ee      	b.n	8018458 <_puts_r+0x88>
	...

0801847c <puts>:
 801847c:	4b02      	ldr	r3, [pc, #8]	@ (8018488 <puts+0xc>)
 801847e:	4601      	mov	r1, r0
 8018480:	6818      	ldr	r0, [r3, #0]
 8018482:	f7ff bfa5 	b.w	80183d0 <_puts_r>
 8018486:	bf00      	nop
 8018488:	24000168 	.word	0x24000168

0801848c <siprintf>:
 801848c:	b40e      	push	{r1, r2, r3}
 801848e:	b500      	push	{lr}
 8018490:	b09c      	sub	sp, #112	@ 0x70
 8018492:	ab1d      	add	r3, sp, #116	@ 0x74
 8018494:	9002      	str	r0, [sp, #8]
 8018496:	9006      	str	r0, [sp, #24]
 8018498:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801849c:	4809      	ldr	r0, [pc, #36]	@ (80184c4 <siprintf+0x38>)
 801849e:	9107      	str	r1, [sp, #28]
 80184a0:	9104      	str	r1, [sp, #16]
 80184a2:	4909      	ldr	r1, [pc, #36]	@ (80184c8 <siprintf+0x3c>)
 80184a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80184a8:	9105      	str	r1, [sp, #20]
 80184aa:	6800      	ldr	r0, [r0, #0]
 80184ac:	9301      	str	r3, [sp, #4]
 80184ae:	a902      	add	r1, sp, #8
 80184b0:	f002 fbce 	bl	801ac50 <_svfiprintf_r>
 80184b4:	9b02      	ldr	r3, [sp, #8]
 80184b6:	2200      	movs	r2, #0
 80184b8:	701a      	strb	r2, [r3, #0]
 80184ba:	b01c      	add	sp, #112	@ 0x70
 80184bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80184c0:	b003      	add	sp, #12
 80184c2:	4770      	bx	lr
 80184c4:	24000168 	.word	0x24000168
 80184c8:	ffff0208 	.word	0xffff0208

080184cc <__sread>:
 80184cc:	b510      	push	{r4, lr}
 80184ce:	460c      	mov	r4, r1
 80184d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184d4:	f000 f938 	bl	8018748 <_read_r>
 80184d8:	2800      	cmp	r0, #0
 80184da:	bfab      	itete	ge
 80184dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80184de:	89a3      	ldrhlt	r3, [r4, #12]
 80184e0:	181b      	addge	r3, r3, r0
 80184e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80184e6:	bfac      	ite	ge
 80184e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80184ea:	81a3      	strhlt	r3, [r4, #12]
 80184ec:	bd10      	pop	{r4, pc}

080184ee <__swrite>:
 80184ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184f2:	461f      	mov	r7, r3
 80184f4:	898b      	ldrh	r3, [r1, #12]
 80184f6:	05db      	lsls	r3, r3, #23
 80184f8:	4605      	mov	r5, r0
 80184fa:	460c      	mov	r4, r1
 80184fc:	4616      	mov	r6, r2
 80184fe:	d505      	bpl.n	801850c <__swrite+0x1e>
 8018500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018504:	2302      	movs	r3, #2
 8018506:	2200      	movs	r2, #0
 8018508:	f000 f90c 	bl	8018724 <_lseek_r>
 801850c:	89a3      	ldrh	r3, [r4, #12]
 801850e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018516:	81a3      	strh	r3, [r4, #12]
 8018518:	4632      	mov	r2, r6
 801851a:	463b      	mov	r3, r7
 801851c:	4628      	mov	r0, r5
 801851e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018522:	f000 b923 	b.w	801876c <_write_r>

08018526 <__sseek>:
 8018526:	b510      	push	{r4, lr}
 8018528:	460c      	mov	r4, r1
 801852a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801852e:	f000 f8f9 	bl	8018724 <_lseek_r>
 8018532:	1c43      	adds	r3, r0, #1
 8018534:	89a3      	ldrh	r3, [r4, #12]
 8018536:	bf15      	itete	ne
 8018538:	6560      	strne	r0, [r4, #84]	@ 0x54
 801853a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801853e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018542:	81a3      	strheq	r3, [r4, #12]
 8018544:	bf18      	it	ne
 8018546:	81a3      	strhne	r3, [r4, #12]
 8018548:	bd10      	pop	{r4, pc}

0801854a <__sclose>:
 801854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801854e:	f000 b8d9 	b.w	8018704 <_close_r>

08018552 <_vsniprintf_r>:
 8018552:	b530      	push	{r4, r5, lr}
 8018554:	4614      	mov	r4, r2
 8018556:	2c00      	cmp	r4, #0
 8018558:	b09b      	sub	sp, #108	@ 0x6c
 801855a:	4605      	mov	r5, r0
 801855c:	461a      	mov	r2, r3
 801855e:	da05      	bge.n	801856c <_vsniprintf_r+0x1a>
 8018560:	238b      	movs	r3, #139	@ 0x8b
 8018562:	6003      	str	r3, [r0, #0]
 8018564:	f04f 30ff 	mov.w	r0, #4294967295
 8018568:	b01b      	add	sp, #108	@ 0x6c
 801856a:	bd30      	pop	{r4, r5, pc}
 801856c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018570:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018574:	bf14      	ite	ne
 8018576:	f104 33ff 	addne.w	r3, r4, #4294967295
 801857a:	4623      	moveq	r3, r4
 801857c:	9302      	str	r3, [sp, #8]
 801857e:	9305      	str	r3, [sp, #20]
 8018580:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018584:	9100      	str	r1, [sp, #0]
 8018586:	9104      	str	r1, [sp, #16]
 8018588:	f8ad 300e 	strh.w	r3, [sp, #14]
 801858c:	4669      	mov	r1, sp
 801858e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018590:	f002 fb5e 	bl	801ac50 <_svfiprintf_r>
 8018594:	1c43      	adds	r3, r0, #1
 8018596:	bfbc      	itt	lt
 8018598:	238b      	movlt	r3, #139	@ 0x8b
 801859a:	602b      	strlt	r3, [r5, #0]
 801859c:	2c00      	cmp	r4, #0
 801859e:	d0e3      	beq.n	8018568 <_vsniprintf_r+0x16>
 80185a0:	9b00      	ldr	r3, [sp, #0]
 80185a2:	2200      	movs	r2, #0
 80185a4:	701a      	strb	r2, [r3, #0]
 80185a6:	e7df      	b.n	8018568 <_vsniprintf_r+0x16>

080185a8 <vsniprintf>:
 80185a8:	b507      	push	{r0, r1, r2, lr}
 80185aa:	9300      	str	r3, [sp, #0]
 80185ac:	4613      	mov	r3, r2
 80185ae:	460a      	mov	r2, r1
 80185b0:	4601      	mov	r1, r0
 80185b2:	4803      	ldr	r0, [pc, #12]	@ (80185c0 <vsniprintf+0x18>)
 80185b4:	6800      	ldr	r0, [r0, #0]
 80185b6:	f7ff ffcc 	bl	8018552 <_vsniprintf_r>
 80185ba:	b003      	add	sp, #12
 80185bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80185c0:	24000168 	.word	0x24000168

080185c4 <__swbuf_r>:
 80185c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c6:	460e      	mov	r6, r1
 80185c8:	4614      	mov	r4, r2
 80185ca:	4605      	mov	r5, r0
 80185cc:	b118      	cbz	r0, 80185d6 <__swbuf_r+0x12>
 80185ce:	6a03      	ldr	r3, [r0, #32]
 80185d0:	b90b      	cbnz	r3, 80185d6 <__swbuf_r+0x12>
 80185d2:	f7ff feb5 	bl	8018340 <__sinit>
 80185d6:	69a3      	ldr	r3, [r4, #24]
 80185d8:	60a3      	str	r3, [r4, #8]
 80185da:	89a3      	ldrh	r3, [r4, #12]
 80185dc:	071a      	lsls	r2, r3, #28
 80185de:	d501      	bpl.n	80185e4 <__swbuf_r+0x20>
 80185e0:	6923      	ldr	r3, [r4, #16]
 80185e2:	b943      	cbnz	r3, 80185f6 <__swbuf_r+0x32>
 80185e4:	4621      	mov	r1, r4
 80185e6:	4628      	mov	r0, r5
 80185e8:	f000 f82a 	bl	8018640 <__swsetup_r>
 80185ec:	b118      	cbz	r0, 80185f6 <__swbuf_r+0x32>
 80185ee:	f04f 37ff 	mov.w	r7, #4294967295
 80185f2:	4638      	mov	r0, r7
 80185f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185f6:	6823      	ldr	r3, [r4, #0]
 80185f8:	6922      	ldr	r2, [r4, #16]
 80185fa:	1a98      	subs	r0, r3, r2
 80185fc:	6963      	ldr	r3, [r4, #20]
 80185fe:	b2f6      	uxtb	r6, r6
 8018600:	4283      	cmp	r3, r0
 8018602:	4637      	mov	r7, r6
 8018604:	dc05      	bgt.n	8018612 <__swbuf_r+0x4e>
 8018606:	4621      	mov	r1, r4
 8018608:	4628      	mov	r0, r5
 801860a:	f002 fde3 	bl	801b1d4 <_fflush_r>
 801860e:	2800      	cmp	r0, #0
 8018610:	d1ed      	bne.n	80185ee <__swbuf_r+0x2a>
 8018612:	68a3      	ldr	r3, [r4, #8]
 8018614:	3b01      	subs	r3, #1
 8018616:	60a3      	str	r3, [r4, #8]
 8018618:	6823      	ldr	r3, [r4, #0]
 801861a:	1c5a      	adds	r2, r3, #1
 801861c:	6022      	str	r2, [r4, #0]
 801861e:	701e      	strb	r6, [r3, #0]
 8018620:	6962      	ldr	r2, [r4, #20]
 8018622:	1c43      	adds	r3, r0, #1
 8018624:	429a      	cmp	r2, r3
 8018626:	d004      	beq.n	8018632 <__swbuf_r+0x6e>
 8018628:	89a3      	ldrh	r3, [r4, #12]
 801862a:	07db      	lsls	r3, r3, #31
 801862c:	d5e1      	bpl.n	80185f2 <__swbuf_r+0x2e>
 801862e:	2e0a      	cmp	r6, #10
 8018630:	d1df      	bne.n	80185f2 <__swbuf_r+0x2e>
 8018632:	4621      	mov	r1, r4
 8018634:	4628      	mov	r0, r5
 8018636:	f002 fdcd 	bl	801b1d4 <_fflush_r>
 801863a:	2800      	cmp	r0, #0
 801863c:	d0d9      	beq.n	80185f2 <__swbuf_r+0x2e>
 801863e:	e7d6      	b.n	80185ee <__swbuf_r+0x2a>

08018640 <__swsetup_r>:
 8018640:	b538      	push	{r3, r4, r5, lr}
 8018642:	4b29      	ldr	r3, [pc, #164]	@ (80186e8 <__swsetup_r+0xa8>)
 8018644:	4605      	mov	r5, r0
 8018646:	6818      	ldr	r0, [r3, #0]
 8018648:	460c      	mov	r4, r1
 801864a:	b118      	cbz	r0, 8018654 <__swsetup_r+0x14>
 801864c:	6a03      	ldr	r3, [r0, #32]
 801864e:	b90b      	cbnz	r3, 8018654 <__swsetup_r+0x14>
 8018650:	f7ff fe76 	bl	8018340 <__sinit>
 8018654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018658:	0719      	lsls	r1, r3, #28
 801865a:	d422      	bmi.n	80186a2 <__swsetup_r+0x62>
 801865c:	06da      	lsls	r2, r3, #27
 801865e:	d407      	bmi.n	8018670 <__swsetup_r+0x30>
 8018660:	2209      	movs	r2, #9
 8018662:	602a      	str	r2, [r5, #0]
 8018664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018668:	81a3      	strh	r3, [r4, #12]
 801866a:	f04f 30ff 	mov.w	r0, #4294967295
 801866e:	e033      	b.n	80186d8 <__swsetup_r+0x98>
 8018670:	0758      	lsls	r0, r3, #29
 8018672:	d512      	bpl.n	801869a <__swsetup_r+0x5a>
 8018674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018676:	b141      	cbz	r1, 801868a <__swsetup_r+0x4a>
 8018678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801867c:	4299      	cmp	r1, r3
 801867e:	d002      	beq.n	8018686 <__swsetup_r+0x46>
 8018680:	4628      	mov	r0, r5
 8018682:	f000 fea7 	bl	80193d4 <_free_r>
 8018686:	2300      	movs	r3, #0
 8018688:	6363      	str	r3, [r4, #52]	@ 0x34
 801868a:	89a3      	ldrh	r3, [r4, #12]
 801868c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018690:	81a3      	strh	r3, [r4, #12]
 8018692:	2300      	movs	r3, #0
 8018694:	6063      	str	r3, [r4, #4]
 8018696:	6923      	ldr	r3, [r4, #16]
 8018698:	6023      	str	r3, [r4, #0]
 801869a:	89a3      	ldrh	r3, [r4, #12]
 801869c:	f043 0308 	orr.w	r3, r3, #8
 80186a0:	81a3      	strh	r3, [r4, #12]
 80186a2:	6923      	ldr	r3, [r4, #16]
 80186a4:	b94b      	cbnz	r3, 80186ba <__swsetup_r+0x7a>
 80186a6:	89a3      	ldrh	r3, [r4, #12]
 80186a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80186ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80186b0:	d003      	beq.n	80186ba <__swsetup_r+0x7a>
 80186b2:	4621      	mov	r1, r4
 80186b4:	4628      	mov	r0, r5
 80186b6:	f002 fddb 	bl	801b270 <__smakebuf_r>
 80186ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186be:	f013 0201 	ands.w	r2, r3, #1
 80186c2:	d00a      	beq.n	80186da <__swsetup_r+0x9a>
 80186c4:	2200      	movs	r2, #0
 80186c6:	60a2      	str	r2, [r4, #8]
 80186c8:	6962      	ldr	r2, [r4, #20]
 80186ca:	4252      	negs	r2, r2
 80186cc:	61a2      	str	r2, [r4, #24]
 80186ce:	6922      	ldr	r2, [r4, #16]
 80186d0:	b942      	cbnz	r2, 80186e4 <__swsetup_r+0xa4>
 80186d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80186d6:	d1c5      	bne.n	8018664 <__swsetup_r+0x24>
 80186d8:	bd38      	pop	{r3, r4, r5, pc}
 80186da:	0799      	lsls	r1, r3, #30
 80186dc:	bf58      	it	pl
 80186de:	6962      	ldrpl	r2, [r4, #20]
 80186e0:	60a2      	str	r2, [r4, #8]
 80186e2:	e7f4      	b.n	80186ce <__swsetup_r+0x8e>
 80186e4:	2000      	movs	r0, #0
 80186e6:	e7f7      	b.n	80186d8 <__swsetup_r+0x98>
 80186e8:	24000168 	.word	0x24000168

080186ec <memset>:
 80186ec:	4402      	add	r2, r0
 80186ee:	4603      	mov	r3, r0
 80186f0:	4293      	cmp	r3, r2
 80186f2:	d100      	bne.n	80186f6 <memset+0xa>
 80186f4:	4770      	bx	lr
 80186f6:	f803 1b01 	strb.w	r1, [r3], #1
 80186fa:	e7f9      	b.n	80186f0 <memset+0x4>

080186fc <_localeconv_r>:
 80186fc:	4800      	ldr	r0, [pc, #0]	@ (8018700 <_localeconv_r+0x4>)
 80186fe:	4770      	bx	lr
 8018700:	240002a8 	.word	0x240002a8

08018704 <_close_r>:
 8018704:	b538      	push	{r3, r4, r5, lr}
 8018706:	4d06      	ldr	r5, [pc, #24]	@ (8018720 <_close_r+0x1c>)
 8018708:	2300      	movs	r3, #0
 801870a:	4604      	mov	r4, r0
 801870c:	4608      	mov	r0, r1
 801870e:	602b      	str	r3, [r5, #0]
 8018710:	f7ef fffe 	bl	8008710 <_close>
 8018714:	1c43      	adds	r3, r0, #1
 8018716:	d102      	bne.n	801871e <_close_r+0x1a>
 8018718:	682b      	ldr	r3, [r5, #0]
 801871a:	b103      	cbz	r3, 801871e <_close_r+0x1a>
 801871c:	6023      	str	r3, [r4, #0]
 801871e:	bd38      	pop	{r3, r4, r5, pc}
 8018720:	24002278 	.word	0x24002278

08018724 <_lseek_r>:
 8018724:	b538      	push	{r3, r4, r5, lr}
 8018726:	4d07      	ldr	r5, [pc, #28]	@ (8018744 <_lseek_r+0x20>)
 8018728:	4604      	mov	r4, r0
 801872a:	4608      	mov	r0, r1
 801872c:	4611      	mov	r1, r2
 801872e:	2200      	movs	r2, #0
 8018730:	602a      	str	r2, [r5, #0]
 8018732:	461a      	mov	r2, r3
 8018734:	f7f0 f813 	bl	800875e <_lseek>
 8018738:	1c43      	adds	r3, r0, #1
 801873a:	d102      	bne.n	8018742 <_lseek_r+0x1e>
 801873c:	682b      	ldr	r3, [r5, #0]
 801873e:	b103      	cbz	r3, 8018742 <_lseek_r+0x1e>
 8018740:	6023      	str	r3, [r4, #0]
 8018742:	bd38      	pop	{r3, r4, r5, pc}
 8018744:	24002278 	.word	0x24002278

08018748 <_read_r>:
 8018748:	b538      	push	{r3, r4, r5, lr}
 801874a:	4d07      	ldr	r5, [pc, #28]	@ (8018768 <_read_r+0x20>)
 801874c:	4604      	mov	r4, r0
 801874e:	4608      	mov	r0, r1
 8018750:	4611      	mov	r1, r2
 8018752:	2200      	movs	r2, #0
 8018754:	602a      	str	r2, [r5, #0]
 8018756:	461a      	mov	r2, r3
 8018758:	f7ef ffbd 	bl	80086d6 <_read>
 801875c:	1c43      	adds	r3, r0, #1
 801875e:	d102      	bne.n	8018766 <_read_r+0x1e>
 8018760:	682b      	ldr	r3, [r5, #0]
 8018762:	b103      	cbz	r3, 8018766 <_read_r+0x1e>
 8018764:	6023      	str	r3, [r4, #0]
 8018766:	bd38      	pop	{r3, r4, r5, pc}
 8018768:	24002278 	.word	0x24002278

0801876c <_write_r>:
 801876c:	b538      	push	{r3, r4, r5, lr}
 801876e:	4d07      	ldr	r5, [pc, #28]	@ (801878c <_write_r+0x20>)
 8018770:	4604      	mov	r4, r0
 8018772:	4608      	mov	r0, r1
 8018774:	4611      	mov	r1, r2
 8018776:	2200      	movs	r2, #0
 8018778:	602a      	str	r2, [r5, #0]
 801877a:	461a      	mov	r2, r3
 801877c:	f7ed fb67 	bl	8005e4e <_write>
 8018780:	1c43      	adds	r3, r0, #1
 8018782:	d102      	bne.n	801878a <_write_r+0x1e>
 8018784:	682b      	ldr	r3, [r5, #0]
 8018786:	b103      	cbz	r3, 801878a <_write_r+0x1e>
 8018788:	6023      	str	r3, [r4, #0]
 801878a:	bd38      	pop	{r3, r4, r5, pc}
 801878c:	24002278 	.word	0x24002278

08018790 <__errno>:
 8018790:	4b01      	ldr	r3, [pc, #4]	@ (8018798 <__errno+0x8>)
 8018792:	6818      	ldr	r0, [r3, #0]
 8018794:	4770      	bx	lr
 8018796:	bf00      	nop
 8018798:	24000168 	.word	0x24000168

0801879c <__libc_init_array>:
 801879c:	b570      	push	{r4, r5, r6, lr}
 801879e:	4d0d      	ldr	r5, [pc, #52]	@ (80187d4 <__libc_init_array+0x38>)
 80187a0:	4c0d      	ldr	r4, [pc, #52]	@ (80187d8 <__libc_init_array+0x3c>)
 80187a2:	1b64      	subs	r4, r4, r5
 80187a4:	10a4      	asrs	r4, r4, #2
 80187a6:	2600      	movs	r6, #0
 80187a8:	42a6      	cmp	r6, r4
 80187aa:	d109      	bne.n	80187c0 <__libc_init_array+0x24>
 80187ac:	4d0b      	ldr	r5, [pc, #44]	@ (80187dc <__libc_init_array+0x40>)
 80187ae:	4c0c      	ldr	r4, [pc, #48]	@ (80187e0 <__libc_init_array+0x44>)
 80187b0:	f003 fa20 	bl	801bbf4 <_init>
 80187b4:	1b64      	subs	r4, r4, r5
 80187b6:	10a4      	asrs	r4, r4, #2
 80187b8:	2600      	movs	r6, #0
 80187ba:	42a6      	cmp	r6, r4
 80187bc:	d105      	bne.n	80187ca <__libc_init_array+0x2e>
 80187be:	bd70      	pop	{r4, r5, r6, pc}
 80187c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80187c4:	4798      	blx	r3
 80187c6:	3601      	adds	r6, #1
 80187c8:	e7ee      	b.n	80187a8 <__libc_init_array+0xc>
 80187ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80187ce:	4798      	blx	r3
 80187d0:	3601      	adds	r6, #1
 80187d2:	e7f2      	b.n	80187ba <__libc_init_array+0x1e>
 80187d4:	0801cfa8 	.word	0x0801cfa8
 80187d8:	0801cfa8 	.word	0x0801cfa8
 80187dc:	0801cfa8 	.word	0x0801cfa8
 80187e0:	0801cfac 	.word	0x0801cfac

080187e4 <__retarget_lock_init_recursive>:
 80187e4:	4770      	bx	lr

080187e6 <__retarget_lock_acquire_recursive>:
 80187e6:	4770      	bx	lr

080187e8 <__retarget_lock_release_recursive>:
 80187e8:	4770      	bx	lr

080187ea <memcpy>:
 80187ea:	440a      	add	r2, r1
 80187ec:	4291      	cmp	r1, r2
 80187ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80187f2:	d100      	bne.n	80187f6 <memcpy+0xc>
 80187f4:	4770      	bx	lr
 80187f6:	b510      	push	{r4, lr}
 80187f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018800:	4291      	cmp	r1, r2
 8018802:	d1f9      	bne.n	80187f8 <memcpy+0xe>
 8018804:	bd10      	pop	{r4, pc}
	...

08018808 <nanf>:
 8018808:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018810 <nanf+0x8>
 801880c:	4770      	bx	lr
 801880e:	bf00      	nop
 8018810:	7fc00000 	.word	0x7fc00000

08018814 <quorem>:
 8018814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018818:	6903      	ldr	r3, [r0, #16]
 801881a:	690c      	ldr	r4, [r1, #16]
 801881c:	42a3      	cmp	r3, r4
 801881e:	4607      	mov	r7, r0
 8018820:	db7e      	blt.n	8018920 <quorem+0x10c>
 8018822:	3c01      	subs	r4, #1
 8018824:	f101 0814 	add.w	r8, r1, #20
 8018828:	00a3      	lsls	r3, r4, #2
 801882a:	f100 0514 	add.w	r5, r0, #20
 801882e:	9300      	str	r3, [sp, #0]
 8018830:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018834:	9301      	str	r3, [sp, #4]
 8018836:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801883a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801883e:	3301      	adds	r3, #1
 8018840:	429a      	cmp	r2, r3
 8018842:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018846:	fbb2 f6f3 	udiv	r6, r2, r3
 801884a:	d32e      	bcc.n	80188aa <quorem+0x96>
 801884c:	f04f 0a00 	mov.w	sl, #0
 8018850:	46c4      	mov	ip, r8
 8018852:	46ae      	mov	lr, r5
 8018854:	46d3      	mov	fp, sl
 8018856:	f85c 3b04 	ldr.w	r3, [ip], #4
 801885a:	b298      	uxth	r0, r3
 801885c:	fb06 a000 	mla	r0, r6, r0, sl
 8018860:	0c02      	lsrs	r2, r0, #16
 8018862:	0c1b      	lsrs	r3, r3, #16
 8018864:	fb06 2303 	mla	r3, r6, r3, r2
 8018868:	f8de 2000 	ldr.w	r2, [lr]
 801886c:	b280      	uxth	r0, r0
 801886e:	b292      	uxth	r2, r2
 8018870:	1a12      	subs	r2, r2, r0
 8018872:	445a      	add	r2, fp
 8018874:	f8de 0000 	ldr.w	r0, [lr]
 8018878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801887c:	b29b      	uxth	r3, r3
 801887e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018882:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018886:	b292      	uxth	r2, r2
 8018888:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801888c:	45e1      	cmp	r9, ip
 801888e:	f84e 2b04 	str.w	r2, [lr], #4
 8018892:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018896:	d2de      	bcs.n	8018856 <quorem+0x42>
 8018898:	9b00      	ldr	r3, [sp, #0]
 801889a:	58eb      	ldr	r3, [r5, r3]
 801889c:	b92b      	cbnz	r3, 80188aa <quorem+0x96>
 801889e:	9b01      	ldr	r3, [sp, #4]
 80188a0:	3b04      	subs	r3, #4
 80188a2:	429d      	cmp	r5, r3
 80188a4:	461a      	mov	r2, r3
 80188a6:	d32f      	bcc.n	8018908 <quorem+0xf4>
 80188a8:	613c      	str	r4, [r7, #16]
 80188aa:	4638      	mov	r0, r7
 80188ac:	f001 f956 	bl	8019b5c <__mcmp>
 80188b0:	2800      	cmp	r0, #0
 80188b2:	db25      	blt.n	8018900 <quorem+0xec>
 80188b4:	4629      	mov	r1, r5
 80188b6:	2000      	movs	r0, #0
 80188b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80188bc:	f8d1 c000 	ldr.w	ip, [r1]
 80188c0:	fa1f fe82 	uxth.w	lr, r2
 80188c4:	fa1f f38c 	uxth.w	r3, ip
 80188c8:	eba3 030e 	sub.w	r3, r3, lr
 80188cc:	4403      	add	r3, r0
 80188ce:	0c12      	lsrs	r2, r2, #16
 80188d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80188d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80188d8:	b29b      	uxth	r3, r3
 80188da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80188de:	45c1      	cmp	r9, r8
 80188e0:	f841 3b04 	str.w	r3, [r1], #4
 80188e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80188e8:	d2e6      	bcs.n	80188b8 <quorem+0xa4>
 80188ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80188ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80188f2:	b922      	cbnz	r2, 80188fe <quorem+0xea>
 80188f4:	3b04      	subs	r3, #4
 80188f6:	429d      	cmp	r5, r3
 80188f8:	461a      	mov	r2, r3
 80188fa:	d30b      	bcc.n	8018914 <quorem+0x100>
 80188fc:	613c      	str	r4, [r7, #16]
 80188fe:	3601      	adds	r6, #1
 8018900:	4630      	mov	r0, r6
 8018902:	b003      	add	sp, #12
 8018904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018908:	6812      	ldr	r2, [r2, #0]
 801890a:	3b04      	subs	r3, #4
 801890c:	2a00      	cmp	r2, #0
 801890e:	d1cb      	bne.n	80188a8 <quorem+0x94>
 8018910:	3c01      	subs	r4, #1
 8018912:	e7c6      	b.n	80188a2 <quorem+0x8e>
 8018914:	6812      	ldr	r2, [r2, #0]
 8018916:	3b04      	subs	r3, #4
 8018918:	2a00      	cmp	r2, #0
 801891a:	d1ef      	bne.n	80188fc <quorem+0xe8>
 801891c:	3c01      	subs	r4, #1
 801891e:	e7ea      	b.n	80188f6 <quorem+0xe2>
 8018920:	2000      	movs	r0, #0
 8018922:	e7ee      	b.n	8018902 <quorem+0xee>
 8018924:	0000      	movs	r0, r0
	...

08018928 <_dtoa_r>:
 8018928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801892c:	ed2d 8b02 	vpush	{d8}
 8018930:	69c7      	ldr	r7, [r0, #28]
 8018932:	b091      	sub	sp, #68	@ 0x44
 8018934:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018938:	ec55 4b10 	vmov	r4, r5, d0
 801893c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801893e:	9107      	str	r1, [sp, #28]
 8018940:	4681      	mov	r9, r0
 8018942:	9209      	str	r2, [sp, #36]	@ 0x24
 8018944:	930d      	str	r3, [sp, #52]	@ 0x34
 8018946:	b97f      	cbnz	r7, 8018968 <_dtoa_r+0x40>
 8018948:	2010      	movs	r0, #16
 801894a:	f000 fd8d 	bl	8019468 <malloc>
 801894e:	4602      	mov	r2, r0
 8018950:	f8c9 001c 	str.w	r0, [r9, #28]
 8018954:	b920      	cbnz	r0, 8018960 <_dtoa_r+0x38>
 8018956:	4ba0      	ldr	r3, [pc, #640]	@ (8018bd8 <_dtoa_r+0x2b0>)
 8018958:	21ef      	movs	r1, #239	@ 0xef
 801895a:	48a0      	ldr	r0, [pc, #640]	@ (8018bdc <_dtoa_r+0x2b4>)
 801895c:	f002 fd2c 	bl	801b3b8 <__assert_func>
 8018960:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018964:	6007      	str	r7, [r0, #0]
 8018966:	60c7      	str	r7, [r0, #12]
 8018968:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801896c:	6819      	ldr	r1, [r3, #0]
 801896e:	b159      	cbz	r1, 8018988 <_dtoa_r+0x60>
 8018970:	685a      	ldr	r2, [r3, #4]
 8018972:	604a      	str	r2, [r1, #4]
 8018974:	2301      	movs	r3, #1
 8018976:	4093      	lsls	r3, r2
 8018978:	608b      	str	r3, [r1, #8]
 801897a:	4648      	mov	r0, r9
 801897c:	f000 fe6a 	bl	8019654 <_Bfree>
 8018980:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018984:	2200      	movs	r2, #0
 8018986:	601a      	str	r2, [r3, #0]
 8018988:	1e2b      	subs	r3, r5, #0
 801898a:	bfbb      	ittet	lt
 801898c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018990:	9303      	strlt	r3, [sp, #12]
 8018992:	2300      	movge	r3, #0
 8018994:	2201      	movlt	r2, #1
 8018996:	bfac      	ite	ge
 8018998:	6033      	strge	r3, [r6, #0]
 801899a:	6032      	strlt	r2, [r6, #0]
 801899c:	4b90      	ldr	r3, [pc, #576]	@ (8018be0 <_dtoa_r+0x2b8>)
 801899e:	9e03      	ldr	r6, [sp, #12]
 80189a0:	43b3      	bics	r3, r6
 80189a2:	d110      	bne.n	80189c6 <_dtoa_r+0x9e>
 80189a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80189a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80189aa:	6013      	str	r3, [r2, #0]
 80189ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80189b0:	4323      	orrs	r3, r4
 80189b2:	f000 84de 	beq.w	8019372 <_dtoa_r+0xa4a>
 80189b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80189b8:	4f8a      	ldr	r7, [pc, #552]	@ (8018be4 <_dtoa_r+0x2bc>)
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	f000 84e0 	beq.w	8019380 <_dtoa_r+0xa58>
 80189c0:	1cfb      	adds	r3, r7, #3
 80189c2:	f000 bcdb 	b.w	801937c <_dtoa_r+0xa54>
 80189c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80189ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80189ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d2:	d10a      	bne.n	80189ea <_dtoa_r+0xc2>
 80189d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80189d6:	2301      	movs	r3, #1
 80189d8:	6013      	str	r3, [r2, #0]
 80189da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80189dc:	b113      	cbz	r3, 80189e4 <_dtoa_r+0xbc>
 80189de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80189e0:	4b81      	ldr	r3, [pc, #516]	@ (8018be8 <_dtoa_r+0x2c0>)
 80189e2:	6013      	str	r3, [r2, #0]
 80189e4:	4f81      	ldr	r7, [pc, #516]	@ (8018bec <_dtoa_r+0x2c4>)
 80189e6:	f000 bccb 	b.w	8019380 <_dtoa_r+0xa58>
 80189ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80189ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80189ee:	4648      	mov	r0, r9
 80189f0:	eeb0 0b48 	vmov.f64	d0, d8
 80189f4:	f001 f9d2 	bl	8019d9c <__d2b>
 80189f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80189fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80189fe:	9001      	str	r0, [sp, #4]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d045      	beq.n	8018a90 <_dtoa_r+0x168>
 8018a04:	eeb0 7b48 	vmov.f64	d7, d8
 8018a08:	ee18 1a90 	vmov	r1, s17
 8018a0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018a10:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8018a14:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8018a18:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8018a1c:	2500      	movs	r5, #0
 8018a1e:	ee07 1a90 	vmov	s15, r1
 8018a22:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8018a26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018bc0 <_dtoa_r+0x298>
 8018a2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018a2e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018bc8 <_dtoa_r+0x2a0>
 8018a32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018a36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8018bd0 <_dtoa_r+0x2a8>
 8018a3a:	ee07 3a90 	vmov	s15, r3
 8018a3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018a42:	eeb0 7b46 	vmov.f64	d7, d6
 8018a46:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018a4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018a4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a56:	ee16 8a90 	vmov	r8, s13
 8018a5a:	d508      	bpl.n	8018a6e <_dtoa_r+0x146>
 8018a5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018a60:	eeb4 6b47 	vcmp.f64	d6, d7
 8018a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a68:	bf18      	it	ne
 8018a6a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8018a6e:	f1b8 0f16 	cmp.w	r8, #22
 8018a72:	d82b      	bhi.n	8018acc <_dtoa_r+0x1a4>
 8018a74:	495e      	ldr	r1, [pc, #376]	@ (8018bf0 <_dtoa_r+0x2c8>)
 8018a76:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8018a7a:	ed91 7b00 	vldr	d7, [r1]
 8018a7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a86:	d501      	bpl.n	8018a8c <_dtoa_r+0x164>
 8018a88:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a8c:	2100      	movs	r1, #0
 8018a8e:	e01e      	b.n	8018ace <_dtoa_r+0x1a6>
 8018a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a92:	4413      	add	r3, r2
 8018a94:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8018a98:	2920      	cmp	r1, #32
 8018a9a:	bfc1      	itttt	gt
 8018a9c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8018aa0:	408e      	lslgt	r6, r1
 8018aa2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8018aa6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8018aaa:	bfd6      	itet	le
 8018aac:	f1c1 0120 	rsble	r1, r1, #32
 8018ab0:	4331      	orrgt	r1, r6
 8018ab2:	fa04 f101 	lslle.w	r1, r4, r1
 8018ab6:	ee07 1a90 	vmov	s15, r1
 8018aba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018abe:	3b01      	subs	r3, #1
 8018ac0:	ee17 1a90 	vmov	r1, s15
 8018ac4:	2501      	movs	r5, #1
 8018ac6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8018aca:	e7a8      	b.n	8018a1e <_dtoa_r+0xf6>
 8018acc:	2101      	movs	r1, #1
 8018ace:	1ad2      	subs	r2, r2, r3
 8018ad0:	1e53      	subs	r3, r2, #1
 8018ad2:	9306      	str	r3, [sp, #24]
 8018ad4:	bf45      	ittet	mi
 8018ad6:	f1c2 0301 	rsbmi	r3, r2, #1
 8018ada:	9305      	strmi	r3, [sp, #20]
 8018adc:	2300      	movpl	r3, #0
 8018ade:	2300      	movmi	r3, #0
 8018ae0:	bf4c      	ite	mi
 8018ae2:	9306      	strmi	r3, [sp, #24]
 8018ae4:	9305      	strpl	r3, [sp, #20]
 8018ae6:	f1b8 0f00 	cmp.w	r8, #0
 8018aea:	910c      	str	r1, [sp, #48]	@ 0x30
 8018aec:	db18      	blt.n	8018b20 <_dtoa_r+0x1f8>
 8018aee:	9b06      	ldr	r3, [sp, #24]
 8018af0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8018af4:	4443      	add	r3, r8
 8018af6:	9306      	str	r3, [sp, #24]
 8018af8:	2300      	movs	r3, #0
 8018afa:	9a07      	ldr	r2, [sp, #28]
 8018afc:	2a09      	cmp	r2, #9
 8018afe:	d849      	bhi.n	8018b94 <_dtoa_r+0x26c>
 8018b00:	2a05      	cmp	r2, #5
 8018b02:	bfc4      	itt	gt
 8018b04:	3a04      	subgt	r2, #4
 8018b06:	9207      	strgt	r2, [sp, #28]
 8018b08:	9a07      	ldr	r2, [sp, #28]
 8018b0a:	f1a2 0202 	sub.w	r2, r2, #2
 8018b0e:	bfcc      	ite	gt
 8018b10:	2400      	movgt	r4, #0
 8018b12:	2401      	movle	r4, #1
 8018b14:	2a03      	cmp	r2, #3
 8018b16:	d848      	bhi.n	8018baa <_dtoa_r+0x282>
 8018b18:	e8df f002 	tbb	[pc, r2]
 8018b1c:	3a2c2e0b 	.word	0x3a2c2e0b
 8018b20:	9b05      	ldr	r3, [sp, #20]
 8018b22:	2200      	movs	r2, #0
 8018b24:	eba3 0308 	sub.w	r3, r3, r8
 8018b28:	9305      	str	r3, [sp, #20]
 8018b2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8018b2c:	f1c8 0300 	rsb	r3, r8, #0
 8018b30:	e7e3      	b.n	8018afa <_dtoa_r+0x1d2>
 8018b32:	2200      	movs	r2, #0
 8018b34:	9208      	str	r2, [sp, #32]
 8018b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b38:	2a00      	cmp	r2, #0
 8018b3a:	dc39      	bgt.n	8018bb0 <_dtoa_r+0x288>
 8018b3c:	f04f 0b01 	mov.w	fp, #1
 8018b40:	46da      	mov	sl, fp
 8018b42:	465a      	mov	r2, fp
 8018b44:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018b48:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8018b4c:	2100      	movs	r1, #0
 8018b4e:	2004      	movs	r0, #4
 8018b50:	f100 0614 	add.w	r6, r0, #20
 8018b54:	4296      	cmp	r6, r2
 8018b56:	d930      	bls.n	8018bba <_dtoa_r+0x292>
 8018b58:	6079      	str	r1, [r7, #4]
 8018b5a:	4648      	mov	r0, r9
 8018b5c:	9304      	str	r3, [sp, #16]
 8018b5e:	f000 fd39 	bl	80195d4 <_Balloc>
 8018b62:	9b04      	ldr	r3, [sp, #16]
 8018b64:	4607      	mov	r7, r0
 8018b66:	2800      	cmp	r0, #0
 8018b68:	d146      	bne.n	8018bf8 <_dtoa_r+0x2d0>
 8018b6a:	4b22      	ldr	r3, [pc, #136]	@ (8018bf4 <_dtoa_r+0x2cc>)
 8018b6c:	4602      	mov	r2, r0
 8018b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8018b72:	e6f2      	b.n	801895a <_dtoa_r+0x32>
 8018b74:	2201      	movs	r2, #1
 8018b76:	e7dd      	b.n	8018b34 <_dtoa_r+0x20c>
 8018b78:	2200      	movs	r2, #0
 8018b7a:	9208      	str	r2, [sp, #32]
 8018b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b7e:	eb08 0b02 	add.w	fp, r8, r2
 8018b82:	f10b 0a01 	add.w	sl, fp, #1
 8018b86:	4652      	mov	r2, sl
 8018b88:	2a01      	cmp	r2, #1
 8018b8a:	bfb8      	it	lt
 8018b8c:	2201      	movlt	r2, #1
 8018b8e:	e7db      	b.n	8018b48 <_dtoa_r+0x220>
 8018b90:	2201      	movs	r2, #1
 8018b92:	e7f2      	b.n	8018b7a <_dtoa_r+0x252>
 8018b94:	2401      	movs	r4, #1
 8018b96:	2200      	movs	r2, #0
 8018b98:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8018b9c:	f04f 3bff 	mov.w	fp, #4294967295
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	46da      	mov	sl, fp
 8018ba4:	2212      	movs	r2, #18
 8018ba6:	9109      	str	r1, [sp, #36]	@ 0x24
 8018ba8:	e7ce      	b.n	8018b48 <_dtoa_r+0x220>
 8018baa:	2201      	movs	r2, #1
 8018bac:	9208      	str	r2, [sp, #32]
 8018bae:	e7f5      	b.n	8018b9c <_dtoa_r+0x274>
 8018bb0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8018bb4:	46da      	mov	sl, fp
 8018bb6:	465a      	mov	r2, fp
 8018bb8:	e7c6      	b.n	8018b48 <_dtoa_r+0x220>
 8018bba:	3101      	adds	r1, #1
 8018bbc:	0040      	lsls	r0, r0, #1
 8018bbe:	e7c7      	b.n	8018b50 <_dtoa_r+0x228>
 8018bc0:	636f4361 	.word	0x636f4361
 8018bc4:	3fd287a7 	.word	0x3fd287a7
 8018bc8:	8b60c8b3 	.word	0x8b60c8b3
 8018bcc:	3fc68a28 	.word	0x3fc68a28
 8018bd0:	509f79fb 	.word	0x509f79fb
 8018bd4:	3fd34413 	.word	0x3fd34413
 8018bd8:	0801cbb6 	.word	0x0801cbb6
 8018bdc:	0801cbcd 	.word	0x0801cbcd
 8018be0:	7ff00000 	.word	0x7ff00000
 8018be4:	0801cbb2 	.word	0x0801cbb2
 8018be8:	0801cb81 	.word	0x0801cb81
 8018bec:	0801cb80 	.word	0x0801cb80
 8018bf0:	0801ccc8 	.word	0x0801ccc8
 8018bf4:	0801cc25 	.word	0x0801cc25
 8018bf8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8018bfc:	f1ba 0f0e 	cmp.w	sl, #14
 8018c00:	6010      	str	r0, [r2, #0]
 8018c02:	d86f      	bhi.n	8018ce4 <_dtoa_r+0x3bc>
 8018c04:	2c00      	cmp	r4, #0
 8018c06:	d06d      	beq.n	8018ce4 <_dtoa_r+0x3bc>
 8018c08:	f1b8 0f00 	cmp.w	r8, #0
 8018c0c:	f340 80c2 	ble.w	8018d94 <_dtoa_r+0x46c>
 8018c10:	4aca      	ldr	r2, [pc, #808]	@ (8018f3c <_dtoa_r+0x614>)
 8018c12:	f008 010f 	and.w	r1, r8, #15
 8018c16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018c1a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8018c1e:	ed92 7b00 	vldr	d7, [r2]
 8018c22:	ea4f 1128 	mov.w	r1, r8, asr #4
 8018c26:	f000 80a9 	beq.w	8018d7c <_dtoa_r+0x454>
 8018c2a:	4ac5      	ldr	r2, [pc, #788]	@ (8018f40 <_dtoa_r+0x618>)
 8018c2c:	ed92 6b08 	vldr	d6, [r2, #32]
 8018c30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018c34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018c38:	f001 010f 	and.w	r1, r1, #15
 8018c3c:	2203      	movs	r2, #3
 8018c3e:	48c0      	ldr	r0, [pc, #768]	@ (8018f40 <_dtoa_r+0x618>)
 8018c40:	2900      	cmp	r1, #0
 8018c42:	f040 809d 	bne.w	8018d80 <_dtoa_r+0x458>
 8018c46:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018c4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018c4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018c52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018c54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018c58:	2900      	cmp	r1, #0
 8018c5a:	f000 80c1 	beq.w	8018de0 <_dtoa_r+0x4b8>
 8018c5e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8018c62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c6a:	f140 80b9 	bpl.w	8018de0 <_dtoa_r+0x4b8>
 8018c6e:	f1ba 0f00 	cmp.w	sl, #0
 8018c72:	f000 80b5 	beq.w	8018de0 <_dtoa_r+0x4b8>
 8018c76:	f1bb 0f00 	cmp.w	fp, #0
 8018c7a:	dd31      	ble.n	8018ce0 <_dtoa_r+0x3b8>
 8018c7c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8018c80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018c84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018c88:	f108 31ff 	add.w	r1, r8, #4294967295
 8018c8c:	9104      	str	r1, [sp, #16]
 8018c8e:	3201      	adds	r2, #1
 8018c90:	465c      	mov	r4, fp
 8018c92:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018c96:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8018c9a:	ee07 2a90 	vmov	s15, r2
 8018c9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018ca2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018ca6:	ee15 2a90 	vmov	r2, s11
 8018caa:	ec51 0b15 	vmov	r0, r1, d5
 8018cae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8018cb2:	2c00      	cmp	r4, #0
 8018cb4:	f040 8098 	bne.w	8018de8 <_dtoa_r+0x4c0>
 8018cb8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018cbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018cc0:	ec41 0b17 	vmov	d7, r0, r1
 8018cc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ccc:	f300 8261 	bgt.w	8019192 <_dtoa_r+0x86a>
 8018cd0:	eeb1 7b47 	vneg.f64	d7, d7
 8018cd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cdc:	f100 80f5 	bmi.w	8018eca <_dtoa_r+0x5a2>
 8018ce0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018ce4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018ce6:	2a00      	cmp	r2, #0
 8018ce8:	f2c0 812c 	blt.w	8018f44 <_dtoa_r+0x61c>
 8018cec:	f1b8 0f0e 	cmp.w	r8, #14
 8018cf0:	f300 8128 	bgt.w	8018f44 <_dtoa_r+0x61c>
 8018cf4:	4b91      	ldr	r3, [pc, #580]	@ (8018f3c <_dtoa_r+0x614>)
 8018cf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018cfa:	ed93 6b00 	vldr	d6, [r3]
 8018cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	da03      	bge.n	8018d0c <_dtoa_r+0x3e4>
 8018d04:	f1ba 0f00 	cmp.w	sl, #0
 8018d08:	f340 80d2 	ble.w	8018eb0 <_dtoa_r+0x588>
 8018d0c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8018d10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018d14:	463e      	mov	r6, r7
 8018d16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018d1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018d1e:	ee15 3a10 	vmov	r3, s10
 8018d22:	3330      	adds	r3, #48	@ 0x30
 8018d24:	f806 3b01 	strb.w	r3, [r6], #1
 8018d28:	1bf3      	subs	r3, r6, r7
 8018d2a:	459a      	cmp	sl, r3
 8018d2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018d30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018d34:	f040 80f8 	bne.w	8018f28 <_dtoa_r+0x600>
 8018d38:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018d3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d44:	f300 80dd 	bgt.w	8018f02 <_dtoa_r+0x5da>
 8018d48:	eeb4 7b46 	vcmp.f64	d7, d6
 8018d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d50:	d104      	bne.n	8018d5c <_dtoa_r+0x434>
 8018d52:	ee15 3a10 	vmov	r3, s10
 8018d56:	07db      	lsls	r3, r3, #31
 8018d58:	f100 80d3 	bmi.w	8018f02 <_dtoa_r+0x5da>
 8018d5c:	9901      	ldr	r1, [sp, #4]
 8018d5e:	4648      	mov	r0, r9
 8018d60:	f000 fc78 	bl	8019654 <_Bfree>
 8018d64:	2300      	movs	r3, #0
 8018d66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018d68:	7033      	strb	r3, [r6, #0]
 8018d6a:	f108 0301 	add.w	r3, r8, #1
 8018d6e:	6013      	str	r3, [r2, #0]
 8018d70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	f000 8304 	beq.w	8019380 <_dtoa_r+0xa58>
 8018d78:	601e      	str	r6, [r3, #0]
 8018d7a:	e301      	b.n	8019380 <_dtoa_r+0xa58>
 8018d7c:	2202      	movs	r2, #2
 8018d7e:	e75e      	b.n	8018c3e <_dtoa_r+0x316>
 8018d80:	07cc      	lsls	r4, r1, #31
 8018d82:	d504      	bpl.n	8018d8e <_dtoa_r+0x466>
 8018d84:	ed90 6b00 	vldr	d6, [r0]
 8018d88:	3201      	adds	r2, #1
 8018d8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018d8e:	1049      	asrs	r1, r1, #1
 8018d90:	3008      	adds	r0, #8
 8018d92:	e755      	b.n	8018c40 <_dtoa_r+0x318>
 8018d94:	d022      	beq.n	8018ddc <_dtoa_r+0x4b4>
 8018d96:	f1c8 0100 	rsb	r1, r8, #0
 8018d9a:	4a68      	ldr	r2, [pc, #416]	@ (8018f3c <_dtoa_r+0x614>)
 8018d9c:	f001 000f 	and.w	r0, r1, #15
 8018da0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018da4:	ed92 7b00 	vldr	d7, [r2]
 8018da8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018dac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018db0:	4863      	ldr	r0, [pc, #396]	@ (8018f40 <_dtoa_r+0x618>)
 8018db2:	1109      	asrs	r1, r1, #4
 8018db4:	2400      	movs	r4, #0
 8018db6:	2202      	movs	r2, #2
 8018db8:	b929      	cbnz	r1, 8018dc6 <_dtoa_r+0x49e>
 8018dba:	2c00      	cmp	r4, #0
 8018dbc:	f43f af49 	beq.w	8018c52 <_dtoa_r+0x32a>
 8018dc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018dc4:	e745      	b.n	8018c52 <_dtoa_r+0x32a>
 8018dc6:	07ce      	lsls	r6, r1, #31
 8018dc8:	d505      	bpl.n	8018dd6 <_dtoa_r+0x4ae>
 8018dca:	ed90 6b00 	vldr	d6, [r0]
 8018dce:	3201      	adds	r2, #1
 8018dd0:	2401      	movs	r4, #1
 8018dd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018dd6:	1049      	asrs	r1, r1, #1
 8018dd8:	3008      	adds	r0, #8
 8018dda:	e7ed      	b.n	8018db8 <_dtoa_r+0x490>
 8018ddc:	2202      	movs	r2, #2
 8018dde:	e738      	b.n	8018c52 <_dtoa_r+0x32a>
 8018de0:	f8cd 8010 	str.w	r8, [sp, #16]
 8018de4:	4654      	mov	r4, sl
 8018de6:	e754      	b.n	8018c92 <_dtoa_r+0x36a>
 8018de8:	4a54      	ldr	r2, [pc, #336]	@ (8018f3c <_dtoa_r+0x614>)
 8018dea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8018dee:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018df2:	9a08      	ldr	r2, [sp, #32]
 8018df4:	ec41 0b17 	vmov	d7, r0, r1
 8018df8:	443c      	add	r4, r7
 8018dfa:	b34a      	cbz	r2, 8018e50 <_dtoa_r+0x528>
 8018dfc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8018e00:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8018e04:	463e      	mov	r6, r7
 8018e06:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018e0a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018e0e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018e12:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018e16:	ee14 2a90 	vmov	r2, s9
 8018e1a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018e1e:	3230      	adds	r2, #48	@ 0x30
 8018e20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018e24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e2c:	f806 2b01 	strb.w	r2, [r6], #1
 8018e30:	d438      	bmi.n	8018ea4 <_dtoa_r+0x57c>
 8018e32:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018e36:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e3e:	d462      	bmi.n	8018f06 <_dtoa_r+0x5de>
 8018e40:	42a6      	cmp	r6, r4
 8018e42:	f43f af4d 	beq.w	8018ce0 <_dtoa_r+0x3b8>
 8018e46:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018e4a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018e4e:	e7e0      	b.n	8018e12 <_dtoa_r+0x4ea>
 8018e50:	4621      	mov	r1, r4
 8018e52:	463e      	mov	r6, r7
 8018e54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018e58:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018e5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018e60:	ee14 2a90 	vmov	r2, s9
 8018e64:	3230      	adds	r2, #48	@ 0x30
 8018e66:	f806 2b01 	strb.w	r2, [r6], #1
 8018e6a:	42a6      	cmp	r6, r4
 8018e6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018e70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018e74:	d119      	bne.n	8018eaa <_dtoa_r+0x582>
 8018e76:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8018e7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018e7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e86:	dc3e      	bgt.n	8018f06 <_dtoa_r+0x5de>
 8018e88:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018e8c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e94:	f57f af24 	bpl.w	8018ce0 <_dtoa_r+0x3b8>
 8018e98:	460e      	mov	r6, r1
 8018e9a:	3901      	subs	r1, #1
 8018e9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018ea0:	2b30      	cmp	r3, #48	@ 0x30
 8018ea2:	d0f9      	beq.n	8018e98 <_dtoa_r+0x570>
 8018ea4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018ea8:	e758      	b.n	8018d5c <_dtoa_r+0x434>
 8018eaa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018eae:	e7d5      	b.n	8018e5c <_dtoa_r+0x534>
 8018eb0:	d10b      	bne.n	8018eca <_dtoa_r+0x5a2>
 8018eb2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018eb6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018eba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ebe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec6:	f2c0 8161 	blt.w	801918c <_dtoa_r+0x864>
 8018eca:	2400      	movs	r4, #0
 8018ecc:	4625      	mov	r5, r4
 8018ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ed0:	43db      	mvns	r3, r3
 8018ed2:	9304      	str	r3, [sp, #16]
 8018ed4:	463e      	mov	r6, r7
 8018ed6:	f04f 0800 	mov.w	r8, #0
 8018eda:	4621      	mov	r1, r4
 8018edc:	4648      	mov	r0, r9
 8018ede:	f000 fbb9 	bl	8019654 <_Bfree>
 8018ee2:	2d00      	cmp	r5, #0
 8018ee4:	d0de      	beq.n	8018ea4 <_dtoa_r+0x57c>
 8018ee6:	f1b8 0f00 	cmp.w	r8, #0
 8018eea:	d005      	beq.n	8018ef8 <_dtoa_r+0x5d0>
 8018eec:	45a8      	cmp	r8, r5
 8018eee:	d003      	beq.n	8018ef8 <_dtoa_r+0x5d0>
 8018ef0:	4641      	mov	r1, r8
 8018ef2:	4648      	mov	r0, r9
 8018ef4:	f000 fbae 	bl	8019654 <_Bfree>
 8018ef8:	4629      	mov	r1, r5
 8018efa:	4648      	mov	r0, r9
 8018efc:	f000 fbaa 	bl	8019654 <_Bfree>
 8018f00:	e7d0      	b.n	8018ea4 <_dtoa_r+0x57c>
 8018f02:	f8cd 8010 	str.w	r8, [sp, #16]
 8018f06:	4633      	mov	r3, r6
 8018f08:	461e      	mov	r6, r3
 8018f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018f0e:	2a39      	cmp	r2, #57	@ 0x39
 8018f10:	d106      	bne.n	8018f20 <_dtoa_r+0x5f8>
 8018f12:	429f      	cmp	r7, r3
 8018f14:	d1f8      	bne.n	8018f08 <_dtoa_r+0x5e0>
 8018f16:	9a04      	ldr	r2, [sp, #16]
 8018f18:	3201      	adds	r2, #1
 8018f1a:	9204      	str	r2, [sp, #16]
 8018f1c:	2230      	movs	r2, #48	@ 0x30
 8018f1e:	703a      	strb	r2, [r7, #0]
 8018f20:	781a      	ldrb	r2, [r3, #0]
 8018f22:	3201      	adds	r2, #1
 8018f24:	701a      	strb	r2, [r3, #0]
 8018f26:	e7bd      	b.n	8018ea4 <_dtoa_r+0x57c>
 8018f28:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018f2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f34:	f47f aeef 	bne.w	8018d16 <_dtoa_r+0x3ee>
 8018f38:	e710      	b.n	8018d5c <_dtoa_r+0x434>
 8018f3a:	bf00      	nop
 8018f3c:	0801ccc8 	.word	0x0801ccc8
 8018f40:	0801cca0 	.word	0x0801cca0
 8018f44:	9908      	ldr	r1, [sp, #32]
 8018f46:	2900      	cmp	r1, #0
 8018f48:	f000 80e3 	beq.w	8019112 <_dtoa_r+0x7ea>
 8018f4c:	9907      	ldr	r1, [sp, #28]
 8018f4e:	2901      	cmp	r1, #1
 8018f50:	f300 80c8 	bgt.w	80190e4 <_dtoa_r+0x7bc>
 8018f54:	2d00      	cmp	r5, #0
 8018f56:	f000 80c1 	beq.w	80190dc <_dtoa_r+0x7b4>
 8018f5a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018f5e:	9e05      	ldr	r6, [sp, #20]
 8018f60:	461c      	mov	r4, r3
 8018f62:	9304      	str	r3, [sp, #16]
 8018f64:	9b05      	ldr	r3, [sp, #20]
 8018f66:	4413      	add	r3, r2
 8018f68:	9305      	str	r3, [sp, #20]
 8018f6a:	9b06      	ldr	r3, [sp, #24]
 8018f6c:	2101      	movs	r1, #1
 8018f6e:	4413      	add	r3, r2
 8018f70:	4648      	mov	r0, r9
 8018f72:	9306      	str	r3, [sp, #24]
 8018f74:	f000 fc6c 	bl	8019850 <__i2b>
 8018f78:	9b04      	ldr	r3, [sp, #16]
 8018f7a:	4605      	mov	r5, r0
 8018f7c:	b166      	cbz	r6, 8018f98 <_dtoa_r+0x670>
 8018f7e:	9a06      	ldr	r2, [sp, #24]
 8018f80:	2a00      	cmp	r2, #0
 8018f82:	dd09      	ble.n	8018f98 <_dtoa_r+0x670>
 8018f84:	42b2      	cmp	r2, r6
 8018f86:	9905      	ldr	r1, [sp, #20]
 8018f88:	bfa8      	it	ge
 8018f8a:	4632      	movge	r2, r6
 8018f8c:	1a89      	subs	r1, r1, r2
 8018f8e:	9105      	str	r1, [sp, #20]
 8018f90:	9906      	ldr	r1, [sp, #24]
 8018f92:	1ab6      	subs	r6, r6, r2
 8018f94:	1a8a      	subs	r2, r1, r2
 8018f96:	9206      	str	r2, [sp, #24]
 8018f98:	b1fb      	cbz	r3, 8018fda <_dtoa_r+0x6b2>
 8018f9a:	9a08      	ldr	r2, [sp, #32]
 8018f9c:	2a00      	cmp	r2, #0
 8018f9e:	f000 80bc 	beq.w	801911a <_dtoa_r+0x7f2>
 8018fa2:	b19c      	cbz	r4, 8018fcc <_dtoa_r+0x6a4>
 8018fa4:	4629      	mov	r1, r5
 8018fa6:	4622      	mov	r2, r4
 8018fa8:	4648      	mov	r0, r9
 8018faa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018fac:	f000 fd10 	bl	80199d0 <__pow5mult>
 8018fb0:	9a01      	ldr	r2, [sp, #4]
 8018fb2:	4601      	mov	r1, r0
 8018fb4:	4605      	mov	r5, r0
 8018fb6:	4648      	mov	r0, r9
 8018fb8:	f000 fc60 	bl	801987c <__multiply>
 8018fbc:	9901      	ldr	r1, [sp, #4]
 8018fbe:	9004      	str	r0, [sp, #16]
 8018fc0:	4648      	mov	r0, r9
 8018fc2:	f000 fb47 	bl	8019654 <_Bfree>
 8018fc6:	9a04      	ldr	r2, [sp, #16]
 8018fc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018fca:	9201      	str	r2, [sp, #4]
 8018fcc:	1b1a      	subs	r2, r3, r4
 8018fce:	d004      	beq.n	8018fda <_dtoa_r+0x6b2>
 8018fd0:	9901      	ldr	r1, [sp, #4]
 8018fd2:	4648      	mov	r0, r9
 8018fd4:	f000 fcfc 	bl	80199d0 <__pow5mult>
 8018fd8:	9001      	str	r0, [sp, #4]
 8018fda:	2101      	movs	r1, #1
 8018fdc:	4648      	mov	r0, r9
 8018fde:	f000 fc37 	bl	8019850 <__i2b>
 8018fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fe4:	4604      	mov	r4, r0
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	f000 81d0 	beq.w	801938c <_dtoa_r+0xa64>
 8018fec:	461a      	mov	r2, r3
 8018fee:	4601      	mov	r1, r0
 8018ff0:	4648      	mov	r0, r9
 8018ff2:	f000 fced 	bl	80199d0 <__pow5mult>
 8018ff6:	9b07      	ldr	r3, [sp, #28]
 8018ff8:	2b01      	cmp	r3, #1
 8018ffa:	4604      	mov	r4, r0
 8018ffc:	f300 8095 	bgt.w	801912a <_dtoa_r+0x802>
 8019000:	9b02      	ldr	r3, [sp, #8]
 8019002:	2b00      	cmp	r3, #0
 8019004:	f040 808b 	bne.w	801911e <_dtoa_r+0x7f6>
 8019008:	9b03      	ldr	r3, [sp, #12]
 801900a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801900e:	2a00      	cmp	r2, #0
 8019010:	f040 8087 	bne.w	8019122 <_dtoa_r+0x7fa>
 8019014:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019018:	0d12      	lsrs	r2, r2, #20
 801901a:	0512      	lsls	r2, r2, #20
 801901c:	2a00      	cmp	r2, #0
 801901e:	f000 8082 	beq.w	8019126 <_dtoa_r+0x7fe>
 8019022:	9b05      	ldr	r3, [sp, #20]
 8019024:	3301      	adds	r3, #1
 8019026:	9305      	str	r3, [sp, #20]
 8019028:	9b06      	ldr	r3, [sp, #24]
 801902a:	3301      	adds	r3, #1
 801902c:	9306      	str	r3, [sp, #24]
 801902e:	2301      	movs	r3, #1
 8019030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019034:	2b00      	cmp	r3, #0
 8019036:	f000 81af 	beq.w	8019398 <_dtoa_r+0xa70>
 801903a:	6922      	ldr	r2, [r4, #16]
 801903c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019040:	6910      	ldr	r0, [r2, #16]
 8019042:	f000 fbb9 	bl	80197b8 <__hi0bits>
 8019046:	f1c0 0020 	rsb	r0, r0, #32
 801904a:	9b06      	ldr	r3, [sp, #24]
 801904c:	4418      	add	r0, r3
 801904e:	f010 001f 	ands.w	r0, r0, #31
 8019052:	d076      	beq.n	8019142 <_dtoa_r+0x81a>
 8019054:	f1c0 0220 	rsb	r2, r0, #32
 8019058:	2a04      	cmp	r2, #4
 801905a:	dd69      	ble.n	8019130 <_dtoa_r+0x808>
 801905c:	9b05      	ldr	r3, [sp, #20]
 801905e:	f1c0 001c 	rsb	r0, r0, #28
 8019062:	4403      	add	r3, r0
 8019064:	9305      	str	r3, [sp, #20]
 8019066:	9b06      	ldr	r3, [sp, #24]
 8019068:	4406      	add	r6, r0
 801906a:	4403      	add	r3, r0
 801906c:	9306      	str	r3, [sp, #24]
 801906e:	9b05      	ldr	r3, [sp, #20]
 8019070:	2b00      	cmp	r3, #0
 8019072:	dd05      	ble.n	8019080 <_dtoa_r+0x758>
 8019074:	9901      	ldr	r1, [sp, #4]
 8019076:	461a      	mov	r2, r3
 8019078:	4648      	mov	r0, r9
 801907a:	f000 fd03 	bl	8019a84 <__lshift>
 801907e:	9001      	str	r0, [sp, #4]
 8019080:	9b06      	ldr	r3, [sp, #24]
 8019082:	2b00      	cmp	r3, #0
 8019084:	dd05      	ble.n	8019092 <_dtoa_r+0x76a>
 8019086:	4621      	mov	r1, r4
 8019088:	461a      	mov	r2, r3
 801908a:	4648      	mov	r0, r9
 801908c:	f000 fcfa 	bl	8019a84 <__lshift>
 8019090:	4604      	mov	r4, r0
 8019092:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019094:	2b00      	cmp	r3, #0
 8019096:	d056      	beq.n	8019146 <_dtoa_r+0x81e>
 8019098:	9801      	ldr	r0, [sp, #4]
 801909a:	4621      	mov	r1, r4
 801909c:	f000 fd5e 	bl	8019b5c <__mcmp>
 80190a0:	2800      	cmp	r0, #0
 80190a2:	da50      	bge.n	8019146 <_dtoa_r+0x81e>
 80190a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80190a8:	9304      	str	r3, [sp, #16]
 80190aa:	9901      	ldr	r1, [sp, #4]
 80190ac:	2300      	movs	r3, #0
 80190ae:	220a      	movs	r2, #10
 80190b0:	4648      	mov	r0, r9
 80190b2:	f000 faf1 	bl	8019698 <__multadd>
 80190b6:	9b08      	ldr	r3, [sp, #32]
 80190b8:	9001      	str	r0, [sp, #4]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	f000 816e 	beq.w	801939c <_dtoa_r+0xa74>
 80190c0:	4629      	mov	r1, r5
 80190c2:	2300      	movs	r3, #0
 80190c4:	220a      	movs	r2, #10
 80190c6:	4648      	mov	r0, r9
 80190c8:	f000 fae6 	bl	8019698 <__multadd>
 80190cc:	f1bb 0f00 	cmp.w	fp, #0
 80190d0:	4605      	mov	r5, r0
 80190d2:	dc64      	bgt.n	801919e <_dtoa_r+0x876>
 80190d4:	9b07      	ldr	r3, [sp, #28]
 80190d6:	2b02      	cmp	r3, #2
 80190d8:	dc3e      	bgt.n	8019158 <_dtoa_r+0x830>
 80190da:	e060      	b.n	801919e <_dtoa_r+0x876>
 80190dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80190de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80190e2:	e73c      	b.n	8018f5e <_dtoa_r+0x636>
 80190e4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80190e8:	42a3      	cmp	r3, r4
 80190ea:	bfbf      	itttt	lt
 80190ec:	1ae2      	sublt	r2, r4, r3
 80190ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80190f0:	189b      	addlt	r3, r3, r2
 80190f2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80190f4:	bfae      	itee	ge
 80190f6:	1b1c      	subge	r4, r3, r4
 80190f8:	4623      	movlt	r3, r4
 80190fa:	2400      	movlt	r4, #0
 80190fc:	f1ba 0f00 	cmp.w	sl, #0
 8019100:	bfb5      	itete	lt
 8019102:	9a05      	ldrlt	r2, [sp, #20]
 8019104:	9e05      	ldrge	r6, [sp, #20]
 8019106:	eba2 060a 	sublt.w	r6, r2, sl
 801910a:	4652      	movge	r2, sl
 801910c:	bfb8      	it	lt
 801910e:	2200      	movlt	r2, #0
 8019110:	e727      	b.n	8018f62 <_dtoa_r+0x63a>
 8019112:	9e05      	ldr	r6, [sp, #20]
 8019114:	9d08      	ldr	r5, [sp, #32]
 8019116:	461c      	mov	r4, r3
 8019118:	e730      	b.n	8018f7c <_dtoa_r+0x654>
 801911a:	461a      	mov	r2, r3
 801911c:	e758      	b.n	8018fd0 <_dtoa_r+0x6a8>
 801911e:	2300      	movs	r3, #0
 8019120:	e786      	b.n	8019030 <_dtoa_r+0x708>
 8019122:	9b02      	ldr	r3, [sp, #8]
 8019124:	e784      	b.n	8019030 <_dtoa_r+0x708>
 8019126:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019128:	e783      	b.n	8019032 <_dtoa_r+0x70a>
 801912a:	2300      	movs	r3, #0
 801912c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801912e:	e784      	b.n	801903a <_dtoa_r+0x712>
 8019130:	d09d      	beq.n	801906e <_dtoa_r+0x746>
 8019132:	9b05      	ldr	r3, [sp, #20]
 8019134:	321c      	adds	r2, #28
 8019136:	4413      	add	r3, r2
 8019138:	9305      	str	r3, [sp, #20]
 801913a:	9b06      	ldr	r3, [sp, #24]
 801913c:	4416      	add	r6, r2
 801913e:	4413      	add	r3, r2
 8019140:	e794      	b.n	801906c <_dtoa_r+0x744>
 8019142:	4602      	mov	r2, r0
 8019144:	e7f5      	b.n	8019132 <_dtoa_r+0x80a>
 8019146:	f1ba 0f00 	cmp.w	sl, #0
 801914a:	f8cd 8010 	str.w	r8, [sp, #16]
 801914e:	46d3      	mov	fp, sl
 8019150:	dc21      	bgt.n	8019196 <_dtoa_r+0x86e>
 8019152:	9b07      	ldr	r3, [sp, #28]
 8019154:	2b02      	cmp	r3, #2
 8019156:	dd1e      	ble.n	8019196 <_dtoa_r+0x86e>
 8019158:	f1bb 0f00 	cmp.w	fp, #0
 801915c:	f47f aeb7 	bne.w	8018ece <_dtoa_r+0x5a6>
 8019160:	4621      	mov	r1, r4
 8019162:	465b      	mov	r3, fp
 8019164:	2205      	movs	r2, #5
 8019166:	4648      	mov	r0, r9
 8019168:	f000 fa96 	bl	8019698 <__multadd>
 801916c:	4601      	mov	r1, r0
 801916e:	4604      	mov	r4, r0
 8019170:	9801      	ldr	r0, [sp, #4]
 8019172:	f000 fcf3 	bl	8019b5c <__mcmp>
 8019176:	2800      	cmp	r0, #0
 8019178:	f77f aea9 	ble.w	8018ece <_dtoa_r+0x5a6>
 801917c:	463e      	mov	r6, r7
 801917e:	2331      	movs	r3, #49	@ 0x31
 8019180:	f806 3b01 	strb.w	r3, [r6], #1
 8019184:	9b04      	ldr	r3, [sp, #16]
 8019186:	3301      	adds	r3, #1
 8019188:	9304      	str	r3, [sp, #16]
 801918a:	e6a4      	b.n	8018ed6 <_dtoa_r+0x5ae>
 801918c:	f8cd 8010 	str.w	r8, [sp, #16]
 8019190:	4654      	mov	r4, sl
 8019192:	4625      	mov	r5, r4
 8019194:	e7f2      	b.n	801917c <_dtoa_r+0x854>
 8019196:	9b08      	ldr	r3, [sp, #32]
 8019198:	2b00      	cmp	r3, #0
 801919a:	f000 8103 	beq.w	80193a4 <_dtoa_r+0xa7c>
 801919e:	2e00      	cmp	r6, #0
 80191a0:	dd05      	ble.n	80191ae <_dtoa_r+0x886>
 80191a2:	4629      	mov	r1, r5
 80191a4:	4632      	mov	r2, r6
 80191a6:	4648      	mov	r0, r9
 80191a8:	f000 fc6c 	bl	8019a84 <__lshift>
 80191ac:	4605      	mov	r5, r0
 80191ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d058      	beq.n	8019266 <_dtoa_r+0x93e>
 80191b4:	6869      	ldr	r1, [r5, #4]
 80191b6:	4648      	mov	r0, r9
 80191b8:	f000 fa0c 	bl	80195d4 <_Balloc>
 80191bc:	4606      	mov	r6, r0
 80191be:	b928      	cbnz	r0, 80191cc <_dtoa_r+0x8a4>
 80191c0:	4b82      	ldr	r3, [pc, #520]	@ (80193cc <_dtoa_r+0xaa4>)
 80191c2:	4602      	mov	r2, r0
 80191c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80191c8:	f7ff bbc7 	b.w	801895a <_dtoa_r+0x32>
 80191cc:	692a      	ldr	r2, [r5, #16]
 80191ce:	3202      	adds	r2, #2
 80191d0:	0092      	lsls	r2, r2, #2
 80191d2:	f105 010c 	add.w	r1, r5, #12
 80191d6:	300c      	adds	r0, #12
 80191d8:	f7ff fb07 	bl	80187ea <memcpy>
 80191dc:	2201      	movs	r2, #1
 80191de:	4631      	mov	r1, r6
 80191e0:	4648      	mov	r0, r9
 80191e2:	f000 fc4f 	bl	8019a84 <__lshift>
 80191e6:	1c7b      	adds	r3, r7, #1
 80191e8:	9305      	str	r3, [sp, #20]
 80191ea:	eb07 030b 	add.w	r3, r7, fp
 80191ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80191f0:	9b02      	ldr	r3, [sp, #8]
 80191f2:	f003 0301 	and.w	r3, r3, #1
 80191f6:	46a8      	mov	r8, r5
 80191f8:	9308      	str	r3, [sp, #32]
 80191fa:	4605      	mov	r5, r0
 80191fc:	9b05      	ldr	r3, [sp, #20]
 80191fe:	9801      	ldr	r0, [sp, #4]
 8019200:	4621      	mov	r1, r4
 8019202:	f103 3bff 	add.w	fp, r3, #4294967295
 8019206:	f7ff fb05 	bl	8018814 <quorem>
 801920a:	4641      	mov	r1, r8
 801920c:	9002      	str	r0, [sp, #8]
 801920e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019212:	9801      	ldr	r0, [sp, #4]
 8019214:	f000 fca2 	bl	8019b5c <__mcmp>
 8019218:	462a      	mov	r2, r5
 801921a:	9006      	str	r0, [sp, #24]
 801921c:	4621      	mov	r1, r4
 801921e:	4648      	mov	r0, r9
 8019220:	f000 fcb8 	bl	8019b94 <__mdiff>
 8019224:	68c2      	ldr	r2, [r0, #12]
 8019226:	4606      	mov	r6, r0
 8019228:	b9fa      	cbnz	r2, 801926a <_dtoa_r+0x942>
 801922a:	4601      	mov	r1, r0
 801922c:	9801      	ldr	r0, [sp, #4]
 801922e:	f000 fc95 	bl	8019b5c <__mcmp>
 8019232:	4602      	mov	r2, r0
 8019234:	4631      	mov	r1, r6
 8019236:	4648      	mov	r0, r9
 8019238:	920a      	str	r2, [sp, #40]	@ 0x28
 801923a:	f000 fa0b 	bl	8019654 <_Bfree>
 801923e:	9b07      	ldr	r3, [sp, #28]
 8019240:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019242:	9e05      	ldr	r6, [sp, #20]
 8019244:	ea43 0102 	orr.w	r1, r3, r2
 8019248:	9b08      	ldr	r3, [sp, #32]
 801924a:	4319      	orrs	r1, r3
 801924c:	d10f      	bne.n	801926e <_dtoa_r+0x946>
 801924e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019252:	d028      	beq.n	80192a6 <_dtoa_r+0x97e>
 8019254:	9b06      	ldr	r3, [sp, #24]
 8019256:	2b00      	cmp	r3, #0
 8019258:	dd02      	ble.n	8019260 <_dtoa_r+0x938>
 801925a:	9b02      	ldr	r3, [sp, #8]
 801925c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019260:	f88b a000 	strb.w	sl, [fp]
 8019264:	e639      	b.n	8018eda <_dtoa_r+0x5b2>
 8019266:	4628      	mov	r0, r5
 8019268:	e7bd      	b.n	80191e6 <_dtoa_r+0x8be>
 801926a:	2201      	movs	r2, #1
 801926c:	e7e2      	b.n	8019234 <_dtoa_r+0x90c>
 801926e:	9b06      	ldr	r3, [sp, #24]
 8019270:	2b00      	cmp	r3, #0
 8019272:	db04      	blt.n	801927e <_dtoa_r+0x956>
 8019274:	9907      	ldr	r1, [sp, #28]
 8019276:	430b      	orrs	r3, r1
 8019278:	9908      	ldr	r1, [sp, #32]
 801927a:	430b      	orrs	r3, r1
 801927c:	d120      	bne.n	80192c0 <_dtoa_r+0x998>
 801927e:	2a00      	cmp	r2, #0
 8019280:	ddee      	ble.n	8019260 <_dtoa_r+0x938>
 8019282:	9901      	ldr	r1, [sp, #4]
 8019284:	2201      	movs	r2, #1
 8019286:	4648      	mov	r0, r9
 8019288:	f000 fbfc 	bl	8019a84 <__lshift>
 801928c:	4621      	mov	r1, r4
 801928e:	9001      	str	r0, [sp, #4]
 8019290:	f000 fc64 	bl	8019b5c <__mcmp>
 8019294:	2800      	cmp	r0, #0
 8019296:	dc03      	bgt.n	80192a0 <_dtoa_r+0x978>
 8019298:	d1e2      	bne.n	8019260 <_dtoa_r+0x938>
 801929a:	f01a 0f01 	tst.w	sl, #1
 801929e:	d0df      	beq.n	8019260 <_dtoa_r+0x938>
 80192a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80192a4:	d1d9      	bne.n	801925a <_dtoa_r+0x932>
 80192a6:	2339      	movs	r3, #57	@ 0x39
 80192a8:	f88b 3000 	strb.w	r3, [fp]
 80192ac:	4633      	mov	r3, r6
 80192ae:	461e      	mov	r6, r3
 80192b0:	3b01      	subs	r3, #1
 80192b2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80192b6:	2a39      	cmp	r2, #57	@ 0x39
 80192b8:	d053      	beq.n	8019362 <_dtoa_r+0xa3a>
 80192ba:	3201      	adds	r2, #1
 80192bc:	701a      	strb	r2, [r3, #0]
 80192be:	e60c      	b.n	8018eda <_dtoa_r+0x5b2>
 80192c0:	2a00      	cmp	r2, #0
 80192c2:	dd07      	ble.n	80192d4 <_dtoa_r+0x9ac>
 80192c4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80192c8:	d0ed      	beq.n	80192a6 <_dtoa_r+0x97e>
 80192ca:	f10a 0301 	add.w	r3, sl, #1
 80192ce:	f88b 3000 	strb.w	r3, [fp]
 80192d2:	e602      	b.n	8018eda <_dtoa_r+0x5b2>
 80192d4:	9b05      	ldr	r3, [sp, #20]
 80192d6:	9a05      	ldr	r2, [sp, #20]
 80192d8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80192dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192de:	4293      	cmp	r3, r2
 80192e0:	d029      	beq.n	8019336 <_dtoa_r+0xa0e>
 80192e2:	9901      	ldr	r1, [sp, #4]
 80192e4:	2300      	movs	r3, #0
 80192e6:	220a      	movs	r2, #10
 80192e8:	4648      	mov	r0, r9
 80192ea:	f000 f9d5 	bl	8019698 <__multadd>
 80192ee:	45a8      	cmp	r8, r5
 80192f0:	9001      	str	r0, [sp, #4]
 80192f2:	f04f 0300 	mov.w	r3, #0
 80192f6:	f04f 020a 	mov.w	r2, #10
 80192fa:	4641      	mov	r1, r8
 80192fc:	4648      	mov	r0, r9
 80192fe:	d107      	bne.n	8019310 <_dtoa_r+0x9e8>
 8019300:	f000 f9ca 	bl	8019698 <__multadd>
 8019304:	4680      	mov	r8, r0
 8019306:	4605      	mov	r5, r0
 8019308:	9b05      	ldr	r3, [sp, #20]
 801930a:	3301      	adds	r3, #1
 801930c:	9305      	str	r3, [sp, #20]
 801930e:	e775      	b.n	80191fc <_dtoa_r+0x8d4>
 8019310:	f000 f9c2 	bl	8019698 <__multadd>
 8019314:	4629      	mov	r1, r5
 8019316:	4680      	mov	r8, r0
 8019318:	2300      	movs	r3, #0
 801931a:	220a      	movs	r2, #10
 801931c:	4648      	mov	r0, r9
 801931e:	f000 f9bb 	bl	8019698 <__multadd>
 8019322:	4605      	mov	r5, r0
 8019324:	e7f0      	b.n	8019308 <_dtoa_r+0x9e0>
 8019326:	f1bb 0f00 	cmp.w	fp, #0
 801932a:	bfcc      	ite	gt
 801932c:	465e      	movgt	r6, fp
 801932e:	2601      	movle	r6, #1
 8019330:	443e      	add	r6, r7
 8019332:	f04f 0800 	mov.w	r8, #0
 8019336:	9901      	ldr	r1, [sp, #4]
 8019338:	2201      	movs	r2, #1
 801933a:	4648      	mov	r0, r9
 801933c:	f000 fba2 	bl	8019a84 <__lshift>
 8019340:	4621      	mov	r1, r4
 8019342:	9001      	str	r0, [sp, #4]
 8019344:	f000 fc0a 	bl	8019b5c <__mcmp>
 8019348:	2800      	cmp	r0, #0
 801934a:	dcaf      	bgt.n	80192ac <_dtoa_r+0x984>
 801934c:	d102      	bne.n	8019354 <_dtoa_r+0xa2c>
 801934e:	f01a 0f01 	tst.w	sl, #1
 8019352:	d1ab      	bne.n	80192ac <_dtoa_r+0x984>
 8019354:	4633      	mov	r3, r6
 8019356:	461e      	mov	r6, r3
 8019358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801935c:	2a30      	cmp	r2, #48	@ 0x30
 801935e:	d0fa      	beq.n	8019356 <_dtoa_r+0xa2e>
 8019360:	e5bb      	b.n	8018eda <_dtoa_r+0x5b2>
 8019362:	429f      	cmp	r7, r3
 8019364:	d1a3      	bne.n	80192ae <_dtoa_r+0x986>
 8019366:	9b04      	ldr	r3, [sp, #16]
 8019368:	3301      	adds	r3, #1
 801936a:	9304      	str	r3, [sp, #16]
 801936c:	2331      	movs	r3, #49	@ 0x31
 801936e:	703b      	strb	r3, [r7, #0]
 8019370:	e5b3      	b.n	8018eda <_dtoa_r+0x5b2>
 8019372:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019374:	4f16      	ldr	r7, [pc, #88]	@ (80193d0 <_dtoa_r+0xaa8>)
 8019376:	b11b      	cbz	r3, 8019380 <_dtoa_r+0xa58>
 8019378:	f107 0308 	add.w	r3, r7, #8
 801937c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801937e:	6013      	str	r3, [r2, #0]
 8019380:	4638      	mov	r0, r7
 8019382:	b011      	add	sp, #68	@ 0x44
 8019384:	ecbd 8b02 	vpop	{d8}
 8019388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801938c:	9b07      	ldr	r3, [sp, #28]
 801938e:	2b01      	cmp	r3, #1
 8019390:	f77f ae36 	ble.w	8019000 <_dtoa_r+0x6d8>
 8019394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019396:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019398:	2001      	movs	r0, #1
 801939a:	e656      	b.n	801904a <_dtoa_r+0x722>
 801939c:	f1bb 0f00 	cmp.w	fp, #0
 80193a0:	f77f aed7 	ble.w	8019152 <_dtoa_r+0x82a>
 80193a4:	463e      	mov	r6, r7
 80193a6:	9801      	ldr	r0, [sp, #4]
 80193a8:	4621      	mov	r1, r4
 80193aa:	f7ff fa33 	bl	8018814 <quorem>
 80193ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80193b2:	f806 ab01 	strb.w	sl, [r6], #1
 80193b6:	1bf2      	subs	r2, r6, r7
 80193b8:	4593      	cmp	fp, r2
 80193ba:	ddb4      	ble.n	8019326 <_dtoa_r+0x9fe>
 80193bc:	9901      	ldr	r1, [sp, #4]
 80193be:	2300      	movs	r3, #0
 80193c0:	220a      	movs	r2, #10
 80193c2:	4648      	mov	r0, r9
 80193c4:	f000 f968 	bl	8019698 <__multadd>
 80193c8:	9001      	str	r0, [sp, #4]
 80193ca:	e7ec      	b.n	80193a6 <_dtoa_r+0xa7e>
 80193cc:	0801cc25 	.word	0x0801cc25
 80193d0:	0801cba9 	.word	0x0801cba9

080193d4 <_free_r>:
 80193d4:	b538      	push	{r3, r4, r5, lr}
 80193d6:	4605      	mov	r5, r0
 80193d8:	2900      	cmp	r1, #0
 80193da:	d041      	beq.n	8019460 <_free_r+0x8c>
 80193dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193e0:	1f0c      	subs	r4, r1, #4
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	bfb8      	it	lt
 80193e6:	18e4      	addlt	r4, r4, r3
 80193e8:	f000 f8e8 	bl	80195bc <__malloc_lock>
 80193ec:	4a1d      	ldr	r2, [pc, #116]	@ (8019464 <_free_r+0x90>)
 80193ee:	6813      	ldr	r3, [r2, #0]
 80193f0:	b933      	cbnz	r3, 8019400 <_free_r+0x2c>
 80193f2:	6063      	str	r3, [r4, #4]
 80193f4:	6014      	str	r4, [r2, #0]
 80193f6:	4628      	mov	r0, r5
 80193f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193fc:	f000 b8e4 	b.w	80195c8 <__malloc_unlock>
 8019400:	42a3      	cmp	r3, r4
 8019402:	d908      	bls.n	8019416 <_free_r+0x42>
 8019404:	6820      	ldr	r0, [r4, #0]
 8019406:	1821      	adds	r1, r4, r0
 8019408:	428b      	cmp	r3, r1
 801940a:	bf01      	itttt	eq
 801940c:	6819      	ldreq	r1, [r3, #0]
 801940e:	685b      	ldreq	r3, [r3, #4]
 8019410:	1809      	addeq	r1, r1, r0
 8019412:	6021      	streq	r1, [r4, #0]
 8019414:	e7ed      	b.n	80193f2 <_free_r+0x1e>
 8019416:	461a      	mov	r2, r3
 8019418:	685b      	ldr	r3, [r3, #4]
 801941a:	b10b      	cbz	r3, 8019420 <_free_r+0x4c>
 801941c:	42a3      	cmp	r3, r4
 801941e:	d9fa      	bls.n	8019416 <_free_r+0x42>
 8019420:	6811      	ldr	r1, [r2, #0]
 8019422:	1850      	adds	r0, r2, r1
 8019424:	42a0      	cmp	r0, r4
 8019426:	d10b      	bne.n	8019440 <_free_r+0x6c>
 8019428:	6820      	ldr	r0, [r4, #0]
 801942a:	4401      	add	r1, r0
 801942c:	1850      	adds	r0, r2, r1
 801942e:	4283      	cmp	r3, r0
 8019430:	6011      	str	r1, [r2, #0]
 8019432:	d1e0      	bne.n	80193f6 <_free_r+0x22>
 8019434:	6818      	ldr	r0, [r3, #0]
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	6053      	str	r3, [r2, #4]
 801943a:	4408      	add	r0, r1
 801943c:	6010      	str	r0, [r2, #0]
 801943e:	e7da      	b.n	80193f6 <_free_r+0x22>
 8019440:	d902      	bls.n	8019448 <_free_r+0x74>
 8019442:	230c      	movs	r3, #12
 8019444:	602b      	str	r3, [r5, #0]
 8019446:	e7d6      	b.n	80193f6 <_free_r+0x22>
 8019448:	6820      	ldr	r0, [r4, #0]
 801944a:	1821      	adds	r1, r4, r0
 801944c:	428b      	cmp	r3, r1
 801944e:	bf04      	itt	eq
 8019450:	6819      	ldreq	r1, [r3, #0]
 8019452:	685b      	ldreq	r3, [r3, #4]
 8019454:	6063      	str	r3, [r4, #4]
 8019456:	bf04      	itt	eq
 8019458:	1809      	addeq	r1, r1, r0
 801945a:	6021      	streq	r1, [r4, #0]
 801945c:	6054      	str	r4, [r2, #4]
 801945e:	e7ca      	b.n	80193f6 <_free_r+0x22>
 8019460:	bd38      	pop	{r3, r4, r5, pc}
 8019462:	bf00      	nop
 8019464:	24002284 	.word	0x24002284

08019468 <malloc>:
 8019468:	4b02      	ldr	r3, [pc, #8]	@ (8019474 <malloc+0xc>)
 801946a:	4601      	mov	r1, r0
 801946c:	6818      	ldr	r0, [r3, #0]
 801946e:	f000 b825 	b.w	80194bc <_malloc_r>
 8019472:	bf00      	nop
 8019474:	24000168 	.word	0x24000168

08019478 <sbrk_aligned>:
 8019478:	b570      	push	{r4, r5, r6, lr}
 801947a:	4e0f      	ldr	r6, [pc, #60]	@ (80194b8 <sbrk_aligned+0x40>)
 801947c:	460c      	mov	r4, r1
 801947e:	6831      	ldr	r1, [r6, #0]
 8019480:	4605      	mov	r5, r0
 8019482:	b911      	cbnz	r1, 801948a <sbrk_aligned+0x12>
 8019484:	f001 ff7e 	bl	801b384 <_sbrk_r>
 8019488:	6030      	str	r0, [r6, #0]
 801948a:	4621      	mov	r1, r4
 801948c:	4628      	mov	r0, r5
 801948e:	f001 ff79 	bl	801b384 <_sbrk_r>
 8019492:	1c43      	adds	r3, r0, #1
 8019494:	d103      	bne.n	801949e <sbrk_aligned+0x26>
 8019496:	f04f 34ff 	mov.w	r4, #4294967295
 801949a:	4620      	mov	r0, r4
 801949c:	bd70      	pop	{r4, r5, r6, pc}
 801949e:	1cc4      	adds	r4, r0, #3
 80194a0:	f024 0403 	bic.w	r4, r4, #3
 80194a4:	42a0      	cmp	r0, r4
 80194a6:	d0f8      	beq.n	801949a <sbrk_aligned+0x22>
 80194a8:	1a21      	subs	r1, r4, r0
 80194aa:	4628      	mov	r0, r5
 80194ac:	f001 ff6a 	bl	801b384 <_sbrk_r>
 80194b0:	3001      	adds	r0, #1
 80194b2:	d1f2      	bne.n	801949a <sbrk_aligned+0x22>
 80194b4:	e7ef      	b.n	8019496 <sbrk_aligned+0x1e>
 80194b6:	bf00      	nop
 80194b8:	24002280 	.word	0x24002280

080194bc <_malloc_r>:
 80194bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194c0:	1ccd      	adds	r5, r1, #3
 80194c2:	f025 0503 	bic.w	r5, r5, #3
 80194c6:	3508      	adds	r5, #8
 80194c8:	2d0c      	cmp	r5, #12
 80194ca:	bf38      	it	cc
 80194cc:	250c      	movcc	r5, #12
 80194ce:	2d00      	cmp	r5, #0
 80194d0:	4606      	mov	r6, r0
 80194d2:	db01      	blt.n	80194d8 <_malloc_r+0x1c>
 80194d4:	42a9      	cmp	r1, r5
 80194d6:	d904      	bls.n	80194e2 <_malloc_r+0x26>
 80194d8:	230c      	movs	r3, #12
 80194da:	6033      	str	r3, [r6, #0]
 80194dc:	2000      	movs	r0, #0
 80194de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80195b8 <_malloc_r+0xfc>
 80194e6:	f000 f869 	bl	80195bc <__malloc_lock>
 80194ea:	f8d8 3000 	ldr.w	r3, [r8]
 80194ee:	461c      	mov	r4, r3
 80194f0:	bb44      	cbnz	r4, 8019544 <_malloc_r+0x88>
 80194f2:	4629      	mov	r1, r5
 80194f4:	4630      	mov	r0, r6
 80194f6:	f7ff ffbf 	bl	8019478 <sbrk_aligned>
 80194fa:	1c43      	adds	r3, r0, #1
 80194fc:	4604      	mov	r4, r0
 80194fe:	d158      	bne.n	80195b2 <_malloc_r+0xf6>
 8019500:	f8d8 4000 	ldr.w	r4, [r8]
 8019504:	4627      	mov	r7, r4
 8019506:	2f00      	cmp	r7, #0
 8019508:	d143      	bne.n	8019592 <_malloc_r+0xd6>
 801950a:	2c00      	cmp	r4, #0
 801950c:	d04b      	beq.n	80195a6 <_malloc_r+0xea>
 801950e:	6823      	ldr	r3, [r4, #0]
 8019510:	4639      	mov	r1, r7
 8019512:	4630      	mov	r0, r6
 8019514:	eb04 0903 	add.w	r9, r4, r3
 8019518:	f001 ff34 	bl	801b384 <_sbrk_r>
 801951c:	4581      	cmp	r9, r0
 801951e:	d142      	bne.n	80195a6 <_malloc_r+0xea>
 8019520:	6821      	ldr	r1, [r4, #0]
 8019522:	1a6d      	subs	r5, r5, r1
 8019524:	4629      	mov	r1, r5
 8019526:	4630      	mov	r0, r6
 8019528:	f7ff ffa6 	bl	8019478 <sbrk_aligned>
 801952c:	3001      	adds	r0, #1
 801952e:	d03a      	beq.n	80195a6 <_malloc_r+0xea>
 8019530:	6823      	ldr	r3, [r4, #0]
 8019532:	442b      	add	r3, r5
 8019534:	6023      	str	r3, [r4, #0]
 8019536:	f8d8 3000 	ldr.w	r3, [r8]
 801953a:	685a      	ldr	r2, [r3, #4]
 801953c:	bb62      	cbnz	r2, 8019598 <_malloc_r+0xdc>
 801953e:	f8c8 7000 	str.w	r7, [r8]
 8019542:	e00f      	b.n	8019564 <_malloc_r+0xa8>
 8019544:	6822      	ldr	r2, [r4, #0]
 8019546:	1b52      	subs	r2, r2, r5
 8019548:	d420      	bmi.n	801958c <_malloc_r+0xd0>
 801954a:	2a0b      	cmp	r2, #11
 801954c:	d917      	bls.n	801957e <_malloc_r+0xc2>
 801954e:	1961      	adds	r1, r4, r5
 8019550:	42a3      	cmp	r3, r4
 8019552:	6025      	str	r5, [r4, #0]
 8019554:	bf18      	it	ne
 8019556:	6059      	strne	r1, [r3, #4]
 8019558:	6863      	ldr	r3, [r4, #4]
 801955a:	bf08      	it	eq
 801955c:	f8c8 1000 	streq.w	r1, [r8]
 8019560:	5162      	str	r2, [r4, r5]
 8019562:	604b      	str	r3, [r1, #4]
 8019564:	4630      	mov	r0, r6
 8019566:	f000 f82f 	bl	80195c8 <__malloc_unlock>
 801956a:	f104 000b 	add.w	r0, r4, #11
 801956e:	1d23      	adds	r3, r4, #4
 8019570:	f020 0007 	bic.w	r0, r0, #7
 8019574:	1ac2      	subs	r2, r0, r3
 8019576:	bf1c      	itt	ne
 8019578:	1a1b      	subne	r3, r3, r0
 801957a:	50a3      	strne	r3, [r4, r2]
 801957c:	e7af      	b.n	80194de <_malloc_r+0x22>
 801957e:	6862      	ldr	r2, [r4, #4]
 8019580:	42a3      	cmp	r3, r4
 8019582:	bf0c      	ite	eq
 8019584:	f8c8 2000 	streq.w	r2, [r8]
 8019588:	605a      	strne	r2, [r3, #4]
 801958a:	e7eb      	b.n	8019564 <_malloc_r+0xa8>
 801958c:	4623      	mov	r3, r4
 801958e:	6864      	ldr	r4, [r4, #4]
 8019590:	e7ae      	b.n	80194f0 <_malloc_r+0x34>
 8019592:	463c      	mov	r4, r7
 8019594:	687f      	ldr	r7, [r7, #4]
 8019596:	e7b6      	b.n	8019506 <_malloc_r+0x4a>
 8019598:	461a      	mov	r2, r3
 801959a:	685b      	ldr	r3, [r3, #4]
 801959c:	42a3      	cmp	r3, r4
 801959e:	d1fb      	bne.n	8019598 <_malloc_r+0xdc>
 80195a0:	2300      	movs	r3, #0
 80195a2:	6053      	str	r3, [r2, #4]
 80195a4:	e7de      	b.n	8019564 <_malloc_r+0xa8>
 80195a6:	230c      	movs	r3, #12
 80195a8:	6033      	str	r3, [r6, #0]
 80195aa:	4630      	mov	r0, r6
 80195ac:	f000 f80c 	bl	80195c8 <__malloc_unlock>
 80195b0:	e794      	b.n	80194dc <_malloc_r+0x20>
 80195b2:	6005      	str	r5, [r0, #0]
 80195b4:	e7d6      	b.n	8019564 <_malloc_r+0xa8>
 80195b6:	bf00      	nop
 80195b8:	24002284 	.word	0x24002284

080195bc <__malloc_lock>:
 80195bc:	4801      	ldr	r0, [pc, #4]	@ (80195c4 <__malloc_lock+0x8>)
 80195be:	f7ff b912 	b.w	80187e6 <__retarget_lock_acquire_recursive>
 80195c2:	bf00      	nop
 80195c4:	2400227c 	.word	0x2400227c

080195c8 <__malloc_unlock>:
 80195c8:	4801      	ldr	r0, [pc, #4]	@ (80195d0 <__malloc_unlock+0x8>)
 80195ca:	f7ff b90d 	b.w	80187e8 <__retarget_lock_release_recursive>
 80195ce:	bf00      	nop
 80195d0:	2400227c 	.word	0x2400227c

080195d4 <_Balloc>:
 80195d4:	b570      	push	{r4, r5, r6, lr}
 80195d6:	69c6      	ldr	r6, [r0, #28]
 80195d8:	4604      	mov	r4, r0
 80195da:	460d      	mov	r5, r1
 80195dc:	b976      	cbnz	r6, 80195fc <_Balloc+0x28>
 80195de:	2010      	movs	r0, #16
 80195e0:	f7ff ff42 	bl	8019468 <malloc>
 80195e4:	4602      	mov	r2, r0
 80195e6:	61e0      	str	r0, [r4, #28]
 80195e8:	b920      	cbnz	r0, 80195f4 <_Balloc+0x20>
 80195ea:	4b18      	ldr	r3, [pc, #96]	@ (801964c <_Balloc+0x78>)
 80195ec:	4818      	ldr	r0, [pc, #96]	@ (8019650 <_Balloc+0x7c>)
 80195ee:	216b      	movs	r1, #107	@ 0x6b
 80195f0:	f001 fee2 	bl	801b3b8 <__assert_func>
 80195f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80195f8:	6006      	str	r6, [r0, #0]
 80195fa:	60c6      	str	r6, [r0, #12]
 80195fc:	69e6      	ldr	r6, [r4, #28]
 80195fe:	68f3      	ldr	r3, [r6, #12]
 8019600:	b183      	cbz	r3, 8019624 <_Balloc+0x50>
 8019602:	69e3      	ldr	r3, [r4, #28]
 8019604:	68db      	ldr	r3, [r3, #12]
 8019606:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801960a:	b9b8      	cbnz	r0, 801963c <_Balloc+0x68>
 801960c:	2101      	movs	r1, #1
 801960e:	fa01 f605 	lsl.w	r6, r1, r5
 8019612:	1d72      	adds	r2, r6, #5
 8019614:	0092      	lsls	r2, r2, #2
 8019616:	4620      	mov	r0, r4
 8019618:	f001 feec 	bl	801b3f4 <_calloc_r>
 801961c:	b160      	cbz	r0, 8019638 <_Balloc+0x64>
 801961e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019622:	e00e      	b.n	8019642 <_Balloc+0x6e>
 8019624:	2221      	movs	r2, #33	@ 0x21
 8019626:	2104      	movs	r1, #4
 8019628:	4620      	mov	r0, r4
 801962a:	f001 fee3 	bl	801b3f4 <_calloc_r>
 801962e:	69e3      	ldr	r3, [r4, #28]
 8019630:	60f0      	str	r0, [r6, #12]
 8019632:	68db      	ldr	r3, [r3, #12]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d1e4      	bne.n	8019602 <_Balloc+0x2e>
 8019638:	2000      	movs	r0, #0
 801963a:	bd70      	pop	{r4, r5, r6, pc}
 801963c:	6802      	ldr	r2, [r0, #0]
 801963e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019642:	2300      	movs	r3, #0
 8019644:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019648:	e7f7      	b.n	801963a <_Balloc+0x66>
 801964a:	bf00      	nop
 801964c:	0801cbb6 	.word	0x0801cbb6
 8019650:	0801cc36 	.word	0x0801cc36

08019654 <_Bfree>:
 8019654:	b570      	push	{r4, r5, r6, lr}
 8019656:	69c6      	ldr	r6, [r0, #28]
 8019658:	4605      	mov	r5, r0
 801965a:	460c      	mov	r4, r1
 801965c:	b976      	cbnz	r6, 801967c <_Bfree+0x28>
 801965e:	2010      	movs	r0, #16
 8019660:	f7ff ff02 	bl	8019468 <malloc>
 8019664:	4602      	mov	r2, r0
 8019666:	61e8      	str	r0, [r5, #28]
 8019668:	b920      	cbnz	r0, 8019674 <_Bfree+0x20>
 801966a:	4b09      	ldr	r3, [pc, #36]	@ (8019690 <_Bfree+0x3c>)
 801966c:	4809      	ldr	r0, [pc, #36]	@ (8019694 <_Bfree+0x40>)
 801966e:	218f      	movs	r1, #143	@ 0x8f
 8019670:	f001 fea2 	bl	801b3b8 <__assert_func>
 8019674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019678:	6006      	str	r6, [r0, #0]
 801967a:	60c6      	str	r6, [r0, #12]
 801967c:	b13c      	cbz	r4, 801968e <_Bfree+0x3a>
 801967e:	69eb      	ldr	r3, [r5, #28]
 8019680:	6862      	ldr	r2, [r4, #4]
 8019682:	68db      	ldr	r3, [r3, #12]
 8019684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019688:	6021      	str	r1, [r4, #0]
 801968a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801968e:	bd70      	pop	{r4, r5, r6, pc}
 8019690:	0801cbb6 	.word	0x0801cbb6
 8019694:	0801cc36 	.word	0x0801cc36

08019698 <__multadd>:
 8019698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801969c:	690d      	ldr	r5, [r1, #16]
 801969e:	4607      	mov	r7, r0
 80196a0:	460c      	mov	r4, r1
 80196a2:	461e      	mov	r6, r3
 80196a4:	f101 0c14 	add.w	ip, r1, #20
 80196a8:	2000      	movs	r0, #0
 80196aa:	f8dc 3000 	ldr.w	r3, [ip]
 80196ae:	b299      	uxth	r1, r3
 80196b0:	fb02 6101 	mla	r1, r2, r1, r6
 80196b4:	0c1e      	lsrs	r6, r3, #16
 80196b6:	0c0b      	lsrs	r3, r1, #16
 80196b8:	fb02 3306 	mla	r3, r2, r6, r3
 80196bc:	b289      	uxth	r1, r1
 80196be:	3001      	adds	r0, #1
 80196c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80196c4:	4285      	cmp	r5, r0
 80196c6:	f84c 1b04 	str.w	r1, [ip], #4
 80196ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80196ce:	dcec      	bgt.n	80196aa <__multadd+0x12>
 80196d0:	b30e      	cbz	r6, 8019716 <__multadd+0x7e>
 80196d2:	68a3      	ldr	r3, [r4, #8]
 80196d4:	42ab      	cmp	r3, r5
 80196d6:	dc19      	bgt.n	801970c <__multadd+0x74>
 80196d8:	6861      	ldr	r1, [r4, #4]
 80196da:	4638      	mov	r0, r7
 80196dc:	3101      	adds	r1, #1
 80196de:	f7ff ff79 	bl	80195d4 <_Balloc>
 80196e2:	4680      	mov	r8, r0
 80196e4:	b928      	cbnz	r0, 80196f2 <__multadd+0x5a>
 80196e6:	4602      	mov	r2, r0
 80196e8:	4b0c      	ldr	r3, [pc, #48]	@ (801971c <__multadd+0x84>)
 80196ea:	480d      	ldr	r0, [pc, #52]	@ (8019720 <__multadd+0x88>)
 80196ec:	21ba      	movs	r1, #186	@ 0xba
 80196ee:	f001 fe63 	bl	801b3b8 <__assert_func>
 80196f2:	6922      	ldr	r2, [r4, #16]
 80196f4:	3202      	adds	r2, #2
 80196f6:	f104 010c 	add.w	r1, r4, #12
 80196fa:	0092      	lsls	r2, r2, #2
 80196fc:	300c      	adds	r0, #12
 80196fe:	f7ff f874 	bl	80187ea <memcpy>
 8019702:	4621      	mov	r1, r4
 8019704:	4638      	mov	r0, r7
 8019706:	f7ff ffa5 	bl	8019654 <_Bfree>
 801970a:	4644      	mov	r4, r8
 801970c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019710:	3501      	adds	r5, #1
 8019712:	615e      	str	r6, [r3, #20]
 8019714:	6125      	str	r5, [r4, #16]
 8019716:	4620      	mov	r0, r4
 8019718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801971c:	0801cc25 	.word	0x0801cc25
 8019720:	0801cc36 	.word	0x0801cc36

08019724 <__s2b>:
 8019724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019728:	460c      	mov	r4, r1
 801972a:	4615      	mov	r5, r2
 801972c:	461f      	mov	r7, r3
 801972e:	2209      	movs	r2, #9
 8019730:	3308      	adds	r3, #8
 8019732:	4606      	mov	r6, r0
 8019734:	fb93 f3f2 	sdiv	r3, r3, r2
 8019738:	2100      	movs	r1, #0
 801973a:	2201      	movs	r2, #1
 801973c:	429a      	cmp	r2, r3
 801973e:	db09      	blt.n	8019754 <__s2b+0x30>
 8019740:	4630      	mov	r0, r6
 8019742:	f7ff ff47 	bl	80195d4 <_Balloc>
 8019746:	b940      	cbnz	r0, 801975a <__s2b+0x36>
 8019748:	4602      	mov	r2, r0
 801974a:	4b19      	ldr	r3, [pc, #100]	@ (80197b0 <__s2b+0x8c>)
 801974c:	4819      	ldr	r0, [pc, #100]	@ (80197b4 <__s2b+0x90>)
 801974e:	21d3      	movs	r1, #211	@ 0xd3
 8019750:	f001 fe32 	bl	801b3b8 <__assert_func>
 8019754:	0052      	lsls	r2, r2, #1
 8019756:	3101      	adds	r1, #1
 8019758:	e7f0      	b.n	801973c <__s2b+0x18>
 801975a:	9b08      	ldr	r3, [sp, #32]
 801975c:	6143      	str	r3, [r0, #20]
 801975e:	2d09      	cmp	r5, #9
 8019760:	f04f 0301 	mov.w	r3, #1
 8019764:	6103      	str	r3, [r0, #16]
 8019766:	dd16      	ble.n	8019796 <__s2b+0x72>
 8019768:	f104 0909 	add.w	r9, r4, #9
 801976c:	46c8      	mov	r8, r9
 801976e:	442c      	add	r4, r5
 8019770:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019774:	4601      	mov	r1, r0
 8019776:	3b30      	subs	r3, #48	@ 0x30
 8019778:	220a      	movs	r2, #10
 801977a:	4630      	mov	r0, r6
 801977c:	f7ff ff8c 	bl	8019698 <__multadd>
 8019780:	45a0      	cmp	r8, r4
 8019782:	d1f5      	bne.n	8019770 <__s2b+0x4c>
 8019784:	f1a5 0408 	sub.w	r4, r5, #8
 8019788:	444c      	add	r4, r9
 801978a:	1b2d      	subs	r5, r5, r4
 801978c:	1963      	adds	r3, r4, r5
 801978e:	42bb      	cmp	r3, r7
 8019790:	db04      	blt.n	801979c <__s2b+0x78>
 8019792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019796:	340a      	adds	r4, #10
 8019798:	2509      	movs	r5, #9
 801979a:	e7f6      	b.n	801978a <__s2b+0x66>
 801979c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80197a0:	4601      	mov	r1, r0
 80197a2:	3b30      	subs	r3, #48	@ 0x30
 80197a4:	220a      	movs	r2, #10
 80197a6:	4630      	mov	r0, r6
 80197a8:	f7ff ff76 	bl	8019698 <__multadd>
 80197ac:	e7ee      	b.n	801978c <__s2b+0x68>
 80197ae:	bf00      	nop
 80197b0:	0801cc25 	.word	0x0801cc25
 80197b4:	0801cc36 	.word	0x0801cc36

080197b8 <__hi0bits>:
 80197b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80197bc:	4603      	mov	r3, r0
 80197be:	bf36      	itet	cc
 80197c0:	0403      	lslcc	r3, r0, #16
 80197c2:	2000      	movcs	r0, #0
 80197c4:	2010      	movcc	r0, #16
 80197c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80197ca:	bf3c      	itt	cc
 80197cc:	021b      	lslcc	r3, r3, #8
 80197ce:	3008      	addcc	r0, #8
 80197d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80197d4:	bf3c      	itt	cc
 80197d6:	011b      	lslcc	r3, r3, #4
 80197d8:	3004      	addcc	r0, #4
 80197da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80197de:	bf3c      	itt	cc
 80197e0:	009b      	lslcc	r3, r3, #2
 80197e2:	3002      	addcc	r0, #2
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	db05      	blt.n	80197f4 <__hi0bits+0x3c>
 80197e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80197ec:	f100 0001 	add.w	r0, r0, #1
 80197f0:	bf08      	it	eq
 80197f2:	2020      	moveq	r0, #32
 80197f4:	4770      	bx	lr

080197f6 <__lo0bits>:
 80197f6:	6803      	ldr	r3, [r0, #0]
 80197f8:	4602      	mov	r2, r0
 80197fa:	f013 0007 	ands.w	r0, r3, #7
 80197fe:	d00b      	beq.n	8019818 <__lo0bits+0x22>
 8019800:	07d9      	lsls	r1, r3, #31
 8019802:	d421      	bmi.n	8019848 <__lo0bits+0x52>
 8019804:	0798      	lsls	r0, r3, #30
 8019806:	bf49      	itett	mi
 8019808:	085b      	lsrmi	r3, r3, #1
 801980a:	089b      	lsrpl	r3, r3, #2
 801980c:	2001      	movmi	r0, #1
 801980e:	6013      	strmi	r3, [r2, #0]
 8019810:	bf5c      	itt	pl
 8019812:	6013      	strpl	r3, [r2, #0]
 8019814:	2002      	movpl	r0, #2
 8019816:	4770      	bx	lr
 8019818:	b299      	uxth	r1, r3
 801981a:	b909      	cbnz	r1, 8019820 <__lo0bits+0x2a>
 801981c:	0c1b      	lsrs	r3, r3, #16
 801981e:	2010      	movs	r0, #16
 8019820:	b2d9      	uxtb	r1, r3
 8019822:	b909      	cbnz	r1, 8019828 <__lo0bits+0x32>
 8019824:	3008      	adds	r0, #8
 8019826:	0a1b      	lsrs	r3, r3, #8
 8019828:	0719      	lsls	r1, r3, #28
 801982a:	bf04      	itt	eq
 801982c:	091b      	lsreq	r3, r3, #4
 801982e:	3004      	addeq	r0, #4
 8019830:	0799      	lsls	r1, r3, #30
 8019832:	bf04      	itt	eq
 8019834:	089b      	lsreq	r3, r3, #2
 8019836:	3002      	addeq	r0, #2
 8019838:	07d9      	lsls	r1, r3, #31
 801983a:	d403      	bmi.n	8019844 <__lo0bits+0x4e>
 801983c:	085b      	lsrs	r3, r3, #1
 801983e:	f100 0001 	add.w	r0, r0, #1
 8019842:	d003      	beq.n	801984c <__lo0bits+0x56>
 8019844:	6013      	str	r3, [r2, #0]
 8019846:	4770      	bx	lr
 8019848:	2000      	movs	r0, #0
 801984a:	4770      	bx	lr
 801984c:	2020      	movs	r0, #32
 801984e:	4770      	bx	lr

08019850 <__i2b>:
 8019850:	b510      	push	{r4, lr}
 8019852:	460c      	mov	r4, r1
 8019854:	2101      	movs	r1, #1
 8019856:	f7ff febd 	bl	80195d4 <_Balloc>
 801985a:	4602      	mov	r2, r0
 801985c:	b928      	cbnz	r0, 801986a <__i2b+0x1a>
 801985e:	4b05      	ldr	r3, [pc, #20]	@ (8019874 <__i2b+0x24>)
 8019860:	4805      	ldr	r0, [pc, #20]	@ (8019878 <__i2b+0x28>)
 8019862:	f240 1145 	movw	r1, #325	@ 0x145
 8019866:	f001 fda7 	bl	801b3b8 <__assert_func>
 801986a:	2301      	movs	r3, #1
 801986c:	6144      	str	r4, [r0, #20]
 801986e:	6103      	str	r3, [r0, #16]
 8019870:	bd10      	pop	{r4, pc}
 8019872:	bf00      	nop
 8019874:	0801cc25 	.word	0x0801cc25
 8019878:	0801cc36 	.word	0x0801cc36

0801987c <__multiply>:
 801987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019880:	4614      	mov	r4, r2
 8019882:	690a      	ldr	r2, [r1, #16]
 8019884:	6923      	ldr	r3, [r4, #16]
 8019886:	429a      	cmp	r2, r3
 8019888:	bfa8      	it	ge
 801988a:	4623      	movge	r3, r4
 801988c:	460f      	mov	r7, r1
 801988e:	bfa4      	itt	ge
 8019890:	460c      	movge	r4, r1
 8019892:	461f      	movge	r7, r3
 8019894:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8019898:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801989c:	68a3      	ldr	r3, [r4, #8]
 801989e:	6861      	ldr	r1, [r4, #4]
 80198a0:	eb0a 0609 	add.w	r6, sl, r9
 80198a4:	42b3      	cmp	r3, r6
 80198a6:	b085      	sub	sp, #20
 80198a8:	bfb8      	it	lt
 80198aa:	3101      	addlt	r1, #1
 80198ac:	f7ff fe92 	bl	80195d4 <_Balloc>
 80198b0:	b930      	cbnz	r0, 80198c0 <__multiply+0x44>
 80198b2:	4602      	mov	r2, r0
 80198b4:	4b44      	ldr	r3, [pc, #272]	@ (80199c8 <__multiply+0x14c>)
 80198b6:	4845      	ldr	r0, [pc, #276]	@ (80199cc <__multiply+0x150>)
 80198b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80198bc:	f001 fd7c 	bl	801b3b8 <__assert_func>
 80198c0:	f100 0514 	add.w	r5, r0, #20
 80198c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80198c8:	462b      	mov	r3, r5
 80198ca:	2200      	movs	r2, #0
 80198cc:	4543      	cmp	r3, r8
 80198ce:	d321      	bcc.n	8019914 <__multiply+0x98>
 80198d0:	f107 0114 	add.w	r1, r7, #20
 80198d4:	f104 0214 	add.w	r2, r4, #20
 80198d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80198dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80198e0:	9302      	str	r3, [sp, #8]
 80198e2:	1b13      	subs	r3, r2, r4
 80198e4:	3b15      	subs	r3, #21
 80198e6:	f023 0303 	bic.w	r3, r3, #3
 80198ea:	3304      	adds	r3, #4
 80198ec:	f104 0715 	add.w	r7, r4, #21
 80198f0:	42ba      	cmp	r2, r7
 80198f2:	bf38      	it	cc
 80198f4:	2304      	movcc	r3, #4
 80198f6:	9301      	str	r3, [sp, #4]
 80198f8:	9b02      	ldr	r3, [sp, #8]
 80198fa:	9103      	str	r1, [sp, #12]
 80198fc:	428b      	cmp	r3, r1
 80198fe:	d80c      	bhi.n	801991a <__multiply+0x9e>
 8019900:	2e00      	cmp	r6, #0
 8019902:	dd03      	ble.n	801990c <__multiply+0x90>
 8019904:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019908:	2b00      	cmp	r3, #0
 801990a:	d05b      	beq.n	80199c4 <__multiply+0x148>
 801990c:	6106      	str	r6, [r0, #16]
 801990e:	b005      	add	sp, #20
 8019910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019914:	f843 2b04 	str.w	r2, [r3], #4
 8019918:	e7d8      	b.n	80198cc <__multiply+0x50>
 801991a:	f8b1 a000 	ldrh.w	sl, [r1]
 801991e:	f1ba 0f00 	cmp.w	sl, #0
 8019922:	d024      	beq.n	801996e <__multiply+0xf2>
 8019924:	f104 0e14 	add.w	lr, r4, #20
 8019928:	46a9      	mov	r9, r5
 801992a:	f04f 0c00 	mov.w	ip, #0
 801992e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019932:	f8d9 3000 	ldr.w	r3, [r9]
 8019936:	fa1f fb87 	uxth.w	fp, r7
 801993a:	b29b      	uxth	r3, r3
 801993c:	fb0a 330b 	mla	r3, sl, fp, r3
 8019940:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8019944:	f8d9 7000 	ldr.w	r7, [r9]
 8019948:	4463      	add	r3, ip
 801994a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801994e:	fb0a c70b 	mla	r7, sl, fp, ip
 8019952:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8019956:	b29b      	uxth	r3, r3
 8019958:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801995c:	4572      	cmp	r2, lr
 801995e:	f849 3b04 	str.w	r3, [r9], #4
 8019962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8019966:	d8e2      	bhi.n	801992e <__multiply+0xb2>
 8019968:	9b01      	ldr	r3, [sp, #4]
 801996a:	f845 c003 	str.w	ip, [r5, r3]
 801996e:	9b03      	ldr	r3, [sp, #12]
 8019970:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8019974:	3104      	adds	r1, #4
 8019976:	f1b9 0f00 	cmp.w	r9, #0
 801997a:	d021      	beq.n	80199c0 <__multiply+0x144>
 801997c:	682b      	ldr	r3, [r5, #0]
 801997e:	f104 0c14 	add.w	ip, r4, #20
 8019982:	46ae      	mov	lr, r5
 8019984:	f04f 0a00 	mov.w	sl, #0
 8019988:	f8bc b000 	ldrh.w	fp, [ip]
 801998c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8019990:	fb09 770b 	mla	r7, r9, fp, r7
 8019994:	4457      	add	r7, sl
 8019996:	b29b      	uxth	r3, r3
 8019998:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801999c:	f84e 3b04 	str.w	r3, [lr], #4
 80199a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80199a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80199a8:	f8be 3000 	ldrh.w	r3, [lr]
 80199ac:	fb09 330a 	mla	r3, r9, sl, r3
 80199b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80199b4:	4562      	cmp	r2, ip
 80199b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80199ba:	d8e5      	bhi.n	8019988 <__multiply+0x10c>
 80199bc:	9f01      	ldr	r7, [sp, #4]
 80199be:	51eb      	str	r3, [r5, r7]
 80199c0:	3504      	adds	r5, #4
 80199c2:	e799      	b.n	80198f8 <__multiply+0x7c>
 80199c4:	3e01      	subs	r6, #1
 80199c6:	e79b      	b.n	8019900 <__multiply+0x84>
 80199c8:	0801cc25 	.word	0x0801cc25
 80199cc:	0801cc36 	.word	0x0801cc36

080199d0 <__pow5mult>:
 80199d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199d4:	4615      	mov	r5, r2
 80199d6:	f012 0203 	ands.w	r2, r2, #3
 80199da:	4607      	mov	r7, r0
 80199dc:	460e      	mov	r6, r1
 80199de:	d007      	beq.n	80199f0 <__pow5mult+0x20>
 80199e0:	4c25      	ldr	r4, [pc, #148]	@ (8019a78 <__pow5mult+0xa8>)
 80199e2:	3a01      	subs	r2, #1
 80199e4:	2300      	movs	r3, #0
 80199e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80199ea:	f7ff fe55 	bl	8019698 <__multadd>
 80199ee:	4606      	mov	r6, r0
 80199f0:	10ad      	asrs	r5, r5, #2
 80199f2:	d03d      	beq.n	8019a70 <__pow5mult+0xa0>
 80199f4:	69fc      	ldr	r4, [r7, #28]
 80199f6:	b97c      	cbnz	r4, 8019a18 <__pow5mult+0x48>
 80199f8:	2010      	movs	r0, #16
 80199fa:	f7ff fd35 	bl	8019468 <malloc>
 80199fe:	4602      	mov	r2, r0
 8019a00:	61f8      	str	r0, [r7, #28]
 8019a02:	b928      	cbnz	r0, 8019a10 <__pow5mult+0x40>
 8019a04:	4b1d      	ldr	r3, [pc, #116]	@ (8019a7c <__pow5mult+0xac>)
 8019a06:	481e      	ldr	r0, [pc, #120]	@ (8019a80 <__pow5mult+0xb0>)
 8019a08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019a0c:	f001 fcd4 	bl	801b3b8 <__assert_func>
 8019a10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019a14:	6004      	str	r4, [r0, #0]
 8019a16:	60c4      	str	r4, [r0, #12]
 8019a18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019a1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019a20:	b94c      	cbnz	r4, 8019a36 <__pow5mult+0x66>
 8019a22:	f240 2171 	movw	r1, #625	@ 0x271
 8019a26:	4638      	mov	r0, r7
 8019a28:	f7ff ff12 	bl	8019850 <__i2b>
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a32:	4604      	mov	r4, r0
 8019a34:	6003      	str	r3, [r0, #0]
 8019a36:	f04f 0900 	mov.w	r9, #0
 8019a3a:	07eb      	lsls	r3, r5, #31
 8019a3c:	d50a      	bpl.n	8019a54 <__pow5mult+0x84>
 8019a3e:	4631      	mov	r1, r6
 8019a40:	4622      	mov	r2, r4
 8019a42:	4638      	mov	r0, r7
 8019a44:	f7ff ff1a 	bl	801987c <__multiply>
 8019a48:	4631      	mov	r1, r6
 8019a4a:	4680      	mov	r8, r0
 8019a4c:	4638      	mov	r0, r7
 8019a4e:	f7ff fe01 	bl	8019654 <_Bfree>
 8019a52:	4646      	mov	r6, r8
 8019a54:	106d      	asrs	r5, r5, #1
 8019a56:	d00b      	beq.n	8019a70 <__pow5mult+0xa0>
 8019a58:	6820      	ldr	r0, [r4, #0]
 8019a5a:	b938      	cbnz	r0, 8019a6c <__pow5mult+0x9c>
 8019a5c:	4622      	mov	r2, r4
 8019a5e:	4621      	mov	r1, r4
 8019a60:	4638      	mov	r0, r7
 8019a62:	f7ff ff0b 	bl	801987c <__multiply>
 8019a66:	6020      	str	r0, [r4, #0]
 8019a68:	f8c0 9000 	str.w	r9, [r0]
 8019a6c:	4604      	mov	r4, r0
 8019a6e:	e7e4      	b.n	8019a3a <__pow5mult+0x6a>
 8019a70:	4630      	mov	r0, r6
 8019a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a76:	bf00      	nop
 8019a78:	0801cc90 	.word	0x0801cc90
 8019a7c:	0801cbb6 	.word	0x0801cbb6
 8019a80:	0801cc36 	.word	0x0801cc36

08019a84 <__lshift>:
 8019a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a88:	460c      	mov	r4, r1
 8019a8a:	6849      	ldr	r1, [r1, #4]
 8019a8c:	6923      	ldr	r3, [r4, #16]
 8019a8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019a92:	68a3      	ldr	r3, [r4, #8]
 8019a94:	4607      	mov	r7, r0
 8019a96:	4691      	mov	r9, r2
 8019a98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019a9c:	f108 0601 	add.w	r6, r8, #1
 8019aa0:	42b3      	cmp	r3, r6
 8019aa2:	db0b      	blt.n	8019abc <__lshift+0x38>
 8019aa4:	4638      	mov	r0, r7
 8019aa6:	f7ff fd95 	bl	80195d4 <_Balloc>
 8019aaa:	4605      	mov	r5, r0
 8019aac:	b948      	cbnz	r0, 8019ac2 <__lshift+0x3e>
 8019aae:	4602      	mov	r2, r0
 8019ab0:	4b28      	ldr	r3, [pc, #160]	@ (8019b54 <__lshift+0xd0>)
 8019ab2:	4829      	ldr	r0, [pc, #164]	@ (8019b58 <__lshift+0xd4>)
 8019ab4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019ab8:	f001 fc7e 	bl	801b3b8 <__assert_func>
 8019abc:	3101      	adds	r1, #1
 8019abe:	005b      	lsls	r3, r3, #1
 8019ac0:	e7ee      	b.n	8019aa0 <__lshift+0x1c>
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	f100 0114 	add.w	r1, r0, #20
 8019ac8:	f100 0210 	add.w	r2, r0, #16
 8019acc:	4618      	mov	r0, r3
 8019ace:	4553      	cmp	r3, sl
 8019ad0:	db33      	blt.n	8019b3a <__lshift+0xb6>
 8019ad2:	6920      	ldr	r0, [r4, #16]
 8019ad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019ad8:	f104 0314 	add.w	r3, r4, #20
 8019adc:	f019 091f 	ands.w	r9, r9, #31
 8019ae0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ae4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019ae8:	d02b      	beq.n	8019b42 <__lshift+0xbe>
 8019aea:	f1c9 0e20 	rsb	lr, r9, #32
 8019aee:	468a      	mov	sl, r1
 8019af0:	2200      	movs	r2, #0
 8019af2:	6818      	ldr	r0, [r3, #0]
 8019af4:	fa00 f009 	lsl.w	r0, r0, r9
 8019af8:	4310      	orrs	r0, r2
 8019afa:	f84a 0b04 	str.w	r0, [sl], #4
 8019afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b02:	459c      	cmp	ip, r3
 8019b04:	fa22 f20e 	lsr.w	r2, r2, lr
 8019b08:	d8f3      	bhi.n	8019af2 <__lshift+0x6e>
 8019b0a:	ebac 0304 	sub.w	r3, ip, r4
 8019b0e:	3b15      	subs	r3, #21
 8019b10:	f023 0303 	bic.w	r3, r3, #3
 8019b14:	3304      	adds	r3, #4
 8019b16:	f104 0015 	add.w	r0, r4, #21
 8019b1a:	4584      	cmp	ip, r0
 8019b1c:	bf38      	it	cc
 8019b1e:	2304      	movcc	r3, #4
 8019b20:	50ca      	str	r2, [r1, r3]
 8019b22:	b10a      	cbz	r2, 8019b28 <__lshift+0xa4>
 8019b24:	f108 0602 	add.w	r6, r8, #2
 8019b28:	3e01      	subs	r6, #1
 8019b2a:	4638      	mov	r0, r7
 8019b2c:	612e      	str	r6, [r5, #16]
 8019b2e:	4621      	mov	r1, r4
 8019b30:	f7ff fd90 	bl	8019654 <_Bfree>
 8019b34:	4628      	mov	r0, r5
 8019b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b3e:	3301      	adds	r3, #1
 8019b40:	e7c5      	b.n	8019ace <__lshift+0x4a>
 8019b42:	3904      	subs	r1, #4
 8019b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b4c:	459c      	cmp	ip, r3
 8019b4e:	d8f9      	bhi.n	8019b44 <__lshift+0xc0>
 8019b50:	e7ea      	b.n	8019b28 <__lshift+0xa4>
 8019b52:	bf00      	nop
 8019b54:	0801cc25 	.word	0x0801cc25
 8019b58:	0801cc36 	.word	0x0801cc36

08019b5c <__mcmp>:
 8019b5c:	690a      	ldr	r2, [r1, #16]
 8019b5e:	4603      	mov	r3, r0
 8019b60:	6900      	ldr	r0, [r0, #16]
 8019b62:	1a80      	subs	r0, r0, r2
 8019b64:	b530      	push	{r4, r5, lr}
 8019b66:	d10e      	bne.n	8019b86 <__mcmp+0x2a>
 8019b68:	3314      	adds	r3, #20
 8019b6a:	3114      	adds	r1, #20
 8019b6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019b70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019b74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019b78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019b7c:	4295      	cmp	r5, r2
 8019b7e:	d003      	beq.n	8019b88 <__mcmp+0x2c>
 8019b80:	d205      	bcs.n	8019b8e <__mcmp+0x32>
 8019b82:	f04f 30ff 	mov.w	r0, #4294967295
 8019b86:	bd30      	pop	{r4, r5, pc}
 8019b88:	42a3      	cmp	r3, r4
 8019b8a:	d3f3      	bcc.n	8019b74 <__mcmp+0x18>
 8019b8c:	e7fb      	b.n	8019b86 <__mcmp+0x2a>
 8019b8e:	2001      	movs	r0, #1
 8019b90:	e7f9      	b.n	8019b86 <__mcmp+0x2a>
	...

08019b94 <__mdiff>:
 8019b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b98:	4689      	mov	r9, r1
 8019b9a:	4606      	mov	r6, r0
 8019b9c:	4611      	mov	r1, r2
 8019b9e:	4648      	mov	r0, r9
 8019ba0:	4614      	mov	r4, r2
 8019ba2:	f7ff ffdb 	bl	8019b5c <__mcmp>
 8019ba6:	1e05      	subs	r5, r0, #0
 8019ba8:	d112      	bne.n	8019bd0 <__mdiff+0x3c>
 8019baa:	4629      	mov	r1, r5
 8019bac:	4630      	mov	r0, r6
 8019bae:	f7ff fd11 	bl	80195d4 <_Balloc>
 8019bb2:	4602      	mov	r2, r0
 8019bb4:	b928      	cbnz	r0, 8019bc2 <__mdiff+0x2e>
 8019bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8019cb4 <__mdiff+0x120>)
 8019bb8:	f240 2137 	movw	r1, #567	@ 0x237
 8019bbc:	483e      	ldr	r0, [pc, #248]	@ (8019cb8 <__mdiff+0x124>)
 8019bbe:	f001 fbfb 	bl	801b3b8 <__assert_func>
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019bc8:	4610      	mov	r0, r2
 8019bca:	b003      	add	sp, #12
 8019bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd0:	bfbc      	itt	lt
 8019bd2:	464b      	movlt	r3, r9
 8019bd4:	46a1      	movlt	r9, r4
 8019bd6:	4630      	mov	r0, r6
 8019bd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019bdc:	bfba      	itte	lt
 8019bde:	461c      	movlt	r4, r3
 8019be0:	2501      	movlt	r5, #1
 8019be2:	2500      	movge	r5, #0
 8019be4:	f7ff fcf6 	bl	80195d4 <_Balloc>
 8019be8:	4602      	mov	r2, r0
 8019bea:	b918      	cbnz	r0, 8019bf4 <__mdiff+0x60>
 8019bec:	4b31      	ldr	r3, [pc, #196]	@ (8019cb4 <__mdiff+0x120>)
 8019bee:	f240 2145 	movw	r1, #581	@ 0x245
 8019bf2:	e7e3      	b.n	8019bbc <__mdiff+0x28>
 8019bf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019bf8:	6926      	ldr	r6, [r4, #16]
 8019bfa:	60c5      	str	r5, [r0, #12]
 8019bfc:	f109 0310 	add.w	r3, r9, #16
 8019c00:	f109 0514 	add.w	r5, r9, #20
 8019c04:	f104 0e14 	add.w	lr, r4, #20
 8019c08:	f100 0b14 	add.w	fp, r0, #20
 8019c0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019c10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019c14:	9301      	str	r3, [sp, #4]
 8019c16:	46d9      	mov	r9, fp
 8019c18:	f04f 0c00 	mov.w	ip, #0
 8019c1c:	9b01      	ldr	r3, [sp, #4]
 8019c1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019c22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019c26:	9301      	str	r3, [sp, #4]
 8019c28:	fa1f f38a 	uxth.w	r3, sl
 8019c2c:	4619      	mov	r1, r3
 8019c2e:	b283      	uxth	r3, r0
 8019c30:	1acb      	subs	r3, r1, r3
 8019c32:	0c00      	lsrs	r0, r0, #16
 8019c34:	4463      	add	r3, ip
 8019c36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8019c3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019c3e:	b29b      	uxth	r3, r3
 8019c40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019c44:	4576      	cmp	r6, lr
 8019c46:	f849 3b04 	str.w	r3, [r9], #4
 8019c4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019c4e:	d8e5      	bhi.n	8019c1c <__mdiff+0x88>
 8019c50:	1b33      	subs	r3, r6, r4
 8019c52:	3b15      	subs	r3, #21
 8019c54:	f023 0303 	bic.w	r3, r3, #3
 8019c58:	3415      	adds	r4, #21
 8019c5a:	3304      	adds	r3, #4
 8019c5c:	42a6      	cmp	r6, r4
 8019c5e:	bf38      	it	cc
 8019c60:	2304      	movcc	r3, #4
 8019c62:	441d      	add	r5, r3
 8019c64:	445b      	add	r3, fp
 8019c66:	461e      	mov	r6, r3
 8019c68:	462c      	mov	r4, r5
 8019c6a:	4544      	cmp	r4, r8
 8019c6c:	d30e      	bcc.n	8019c8c <__mdiff+0xf8>
 8019c6e:	f108 0103 	add.w	r1, r8, #3
 8019c72:	1b49      	subs	r1, r1, r5
 8019c74:	f021 0103 	bic.w	r1, r1, #3
 8019c78:	3d03      	subs	r5, #3
 8019c7a:	45a8      	cmp	r8, r5
 8019c7c:	bf38      	it	cc
 8019c7e:	2100      	movcc	r1, #0
 8019c80:	440b      	add	r3, r1
 8019c82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019c86:	b191      	cbz	r1, 8019cae <__mdiff+0x11a>
 8019c88:	6117      	str	r7, [r2, #16]
 8019c8a:	e79d      	b.n	8019bc8 <__mdiff+0x34>
 8019c8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8019c90:	46e6      	mov	lr, ip
 8019c92:	0c08      	lsrs	r0, r1, #16
 8019c94:	fa1c fc81 	uxtah	ip, ip, r1
 8019c98:	4471      	add	r1, lr
 8019c9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8019c9e:	b289      	uxth	r1, r1
 8019ca0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019ca4:	f846 1b04 	str.w	r1, [r6], #4
 8019ca8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019cac:	e7dd      	b.n	8019c6a <__mdiff+0xd6>
 8019cae:	3f01      	subs	r7, #1
 8019cb0:	e7e7      	b.n	8019c82 <__mdiff+0xee>
 8019cb2:	bf00      	nop
 8019cb4:	0801cc25 	.word	0x0801cc25
 8019cb8:	0801cc36 	.word	0x0801cc36

08019cbc <__ulp>:
 8019cbc:	b082      	sub	sp, #8
 8019cbe:	ed8d 0b00 	vstr	d0, [sp]
 8019cc2:	9a01      	ldr	r2, [sp, #4]
 8019cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8019d04 <__ulp+0x48>)
 8019cc6:	4013      	ands	r3, r2
 8019cc8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	dc08      	bgt.n	8019ce2 <__ulp+0x26>
 8019cd0:	425b      	negs	r3, r3
 8019cd2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8019cd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019cda:	da04      	bge.n	8019ce6 <__ulp+0x2a>
 8019cdc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8019ce0:	4113      	asrs	r3, r2
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	e008      	b.n	8019cf8 <__ulp+0x3c>
 8019ce6:	f1a2 0314 	sub.w	r3, r2, #20
 8019cea:	2b1e      	cmp	r3, #30
 8019cec:	bfda      	itte	le
 8019cee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8019cf2:	40da      	lsrle	r2, r3
 8019cf4:	2201      	movgt	r2, #1
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	4619      	mov	r1, r3
 8019cfa:	4610      	mov	r0, r2
 8019cfc:	ec41 0b10 	vmov	d0, r0, r1
 8019d00:	b002      	add	sp, #8
 8019d02:	4770      	bx	lr
 8019d04:	7ff00000 	.word	0x7ff00000

08019d08 <__b2d>:
 8019d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d0c:	6906      	ldr	r6, [r0, #16]
 8019d0e:	f100 0814 	add.w	r8, r0, #20
 8019d12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019d16:	1f37      	subs	r7, r6, #4
 8019d18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019d1c:	4610      	mov	r0, r2
 8019d1e:	f7ff fd4b 	bl	80197b8 <__hi0bits>
 8019d22:	f1c0 0320 	rsb	r3, r0, #32
 8019d26:	280a      	cmp	r0, #10
 8019d28:	600b      	str	r3, [r1, #0]
 8019d2a:	491b      	ldr	r1, [pc, #108]	@ (8019d98 <__b2d+0x90>)
 8019d2c:	dc15      	bgt.n	8019d5a <__b2d+0x52>
 8019d2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8019d32:	fa22 f30c 	lsr.w	r3, r2, ip
 8019d36:	45b8      	cmp	r8, r7
 8019d38:	ea43 0501 	orr.w	r5, r3, r1
 8019d3c:	bf34      	ite	cc
 8019d3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019d42:	2300      	movcs	r3, #0
 8019d44:	3015      	adds	r0, #21
 8019d46:	fa02 f000 	lsl.w	r0, r2, r0
 8019d4a:	fa23 f30c 	lsr.w	r3, r3, ip
 8019d4e:	4303      	orrs	r3, r0
 8019d50:	461c      	mov	r4, r3
 8019d52:	ec45 4b10 	vmov	d0, r4, r5
 8019d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d5a:	45b8      	cmp	r8, r7
 8019d5c:	bf3a      	itte	cc
 8019d5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019d62:	f1a6 0708 	subcc.w	r7, r6, #8
 8019d66:	2300      	movcs	r3, #0
 8019d68:	380b      	subs	r0, #11
 8019d6a:	d012      	beq.n	8019d92 <__b2d+0x8a>
 8019d6c:	f1c0 0120 	rsb	r1, r0, #32
 8019d70:	fa23 f401 	lsr.w	r4, r3, r1
 8019d74:	4082      	lsls	r2, r0
 8019d76:	4322      	orrs	r2, r4
 8019d78:	4547      	cmp	r7, r8
 8019d7a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8019d7e:	bf8c      	ite	hi
 8019d80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019d84:	2200      	movls	r2, #0
 8019d86:	4083      	lsls	r3, r0
 8019d88:	40ca      	lsrs	r2, r1
 8019d8a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8019d8e:	4313      	orrs	r3, r2
 8019d90:	e7de      	b.n	8019d50 <__b2d+0x48>
 8019d92:	ea42 0501 	orr.w	r5, r2, r1
 8019d96:	e7db      	b.n	8019d50 <__b2d+0x48>
 8019d98:	3ff00000 	.word	0x3ff00000

08019d9c <__d2b>:
 8019d9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019da0:	460f      	mov	r7, r1
 8019da2:	2101      	movs	r1, #1
 8019da4:	ec59 8b10 	vmov	r8, r9, d0
 8019da8:	4616      	mov	r6, r2
 8019daa:	f7ff fc13 	bl	80195d4 <_Balloc>
 8019dae:	4604      	mov	r4, r0
 8019db0:	b930      	cbnz	r0, 8019dc0 <__d2b+0x24>
 8019db2:	4602      	mov	r2, r0
 8019db4:	4b23      	ldr	r3, [pc, #140]	@ (8019e44 <__d2b+0xa8>)
 8019db6:	4824      	ldr	r0, [pc, #144]	@ (8019e48 <__d2b+0xac>)
 8019db8:	f240 310f 	movw	r1, #783	@ 0x30f
 8019dbc:	f001 fafc 	bl	801b3b8 <__assert_func>
 8019dc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019dc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019dc8:	b10d      	cbz	r5, 8019dce <__d2b+0x32>
 8019dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019dce:	9301      	str	r3, [sp, #4]
 8019dd0:	f1b8 0300 	subs.w	r3, r8, #0
 8019dd4:	d023      	beq.n	8019e1e <__d2b+0x82>
 8019dd6:	4668      	mov	r0, sp
 8019dd8:	9300      	str	r3, [sp, #0]
 8019dda:	f7ff fd0c 	bl	80197f6 <__lo0bits>
 8019dde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019de2:	b1d0      	cbz	r0, 8019e1a <__d2b+0x7e>
 8019de4:	f1c0 0320 	rsb	r3, r0, #32
 8019de8:	fa02 f303 	lsl.w	r3, r2, r3
 8019dec:	430b      	orrs	r3, r1
 8019dee:	40c2      	lsrs	r2, r0
 8019df0:	6163      	str	r3, [r4, #20]
 8019df2:	9201      	str	r2, [sp, #4]
 8019df4:	9b01      	ldr	r3, [sp, #4]
 8019df6:	61a3      	str	r3, [r4, #24]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	bf0c      	ite	eq
 8019dfc:	2201      	moveq	r2, #1
 8019dfe:	2202      	movne	r2, #2
 8019e00:	6122      	str	r2, [r4, #16]
 8019e02:	b1a5      	cbz	r5, 8019e2e <__d2b+0x92>
 8019e04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019e08:	4405      	add	r5, r0
 8019e0a:	603d      	str	r5, [r7, #0]
 8019e0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019e10:	6030      	str	r0, [r6, #0]
 8019e12:	4620      	mov	r0, r4
 8019e14:	b003      	add	sp, #12
 8019e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e1a:	6161      	str	r1, [r4, #20]
 8019e1c:	e7ea      	b.n	8019df4 <__d2b+0x58>
 8019e1e:	a801      	add	r0, sp, #4
 8019e20:	f7ff fce9 	bl	80197f6 <__lo0bits>
 8019e24:	9b01      	ldr	r3, [sp, #4]
 8019e26:	6163      	str	r3, [r4, #20]
 8019e28:	3020      	adds	r0, #32
 8019e2a:	2201      	movs	r2, #1
 8019e2c:	e7e8      	b.n	8019e00 <__d2b+0x64>
 8019e2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019e32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019e36:	6038      	str	r0, [r7, #0]
 8019e38:	6918      	ldr	r0, [r3, #16]
 8019e3a:	f7ff fcbd 	bl	80197b8 <__hi0bits>
 8019e3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019e42:	e7e5      	b.n	8019e10 <__d2b+0x74>
 8019e44:	0801cc25 	.word	0x0801cc25
 8019e48:	0801cc36 	.word	0x0801cc36

08019e4c <__ratio>:
 8019e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e50:	4688      	mov	r8, r1
 8019e52:	4669      	mov	r1, sp
 8019e54:	4681      	mov	r9, r0
 8019e56:	f7ff ff57 	bl	8019d08 <__b2d>
 8019e5a:	a901      	add	r1, sp, #4
 8019e5c:	4640      	mov	r0, r8
 8019e5e:	ec55 4b10 	vmov	r4, r5, d0
 8019e62:	f7ff ff51 	bl	8019d08 <__b2d>
 8019e66:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019e6a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019e6e:	1ad2      	subs	r2, r2, r3
 8019e70:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019e74:	1a5b      	subs	r3, r3, r1
 8019e76:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019e7a:	ec57 6b10 	vmov	r6, r7, d0
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	bfd6      	itet	le
 8019e82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019e86:	462a      	movgt	r2, r5
 8019e88:	463a      	movle	r2, r7
 8019e8a:	46ab      	mov	fp, r5
 8019e8c:	46a2      	mov	sl, r4
 8019e8e:	bfce      	itee	gt
 8019e90:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019e94:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019e98:	ee00 3a90 	vmovle	s1, r3
 8019e9c:	ec4b ab17 	vmov	d7, sl, fp
 8019ea0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019ea4:	b003      	add	sp, #12
 8019ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019eaa <__copybits>:
 8019eaa:	3901      	subs	r1, #1
 8019eac:	b570      	push	{r4, r5, r6, lr}
 8019eae:	1149      	asrs	r1, r1, #5
 8019eb0:	6914      	ldr	r4, [r2, #16]
 8019eb2:	3101      	adds	r1, #1
 8019eb4:	f102 0314 	add.w	r3, r2, #20
 8019eb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019ebc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019ec0:	1f05      	subs	r5, r0, #4
 8019ec2:	42a3      	cmp	r3, r4
 8019ec4:	d30c      	bcc.n	8019ee0 <__copybits+0x36>
 8019ec6:	1aa3      	subs	r3, r4, r2
 8019ec8:	3b11      	subs	r3, #17
 8019eca:	f023 0303 	bic.w	r3, r3, #3
 8019ece:	3211      	adds	r2, #17
 8019ed0:	42a2      	cmp	r2, r4
 8019ed2:	bf88      	it	hi
 8019ed4:	2300      	movhi	r3, #0
 8019ed6:	4418      	add	r0, r3
 8019ed8:	2300      	movs	r3, #0
 8019eda:	4288      	cmp	r0, r1
 8019edc:	d305      	bcc.n	8019eea <__copybits+0x40>
 8019ede:	bd70      	pop	{r4, r5, r6, pc}
 8019ee0:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ee4:	f845 6f04 	str.w	r6, [r5, #4]!
 8019ee8:	e7eb      	b.n	8019ec2 <__copybits+0x18>
 8019eea:	f840 3b04 	str.w	r3, [r0], #4
 8019eee:	e7f4      	b.n	8019eda <__copybits+0x30>

08019ef0 <__any_on>:
 8019ef0:	f100 0214 	add.w	r2, r0, #20
 8019ef4:	6900      	ldr	r0, [r0, #16]
 8019ef6:	114b      	asrs	r3, r1, #5
 8019ef8:	4298      	cmp	r0, r3
 8019efa:	b510      	push	{r4, lr}
 8019efc:	db11      	blt.n	8019f22 <__any_on+0x32>
 8019efe:	dd0a      	ble.n	8019f16 <__any_on+0x26>
 8019f00:	f011 011f 	ands.w	r1, r1, #31
 8019f04:	d007      	beq.n	8019f16 <__any_on+0x26>
 8019f06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019f0a:	fa24 f001 	lsr.w	r0, r4, r1
 8019f0e:	fa00 f101 	lsl.w	r1, r0, r1
 8019f12:	428c      	cmp	r4, r1
 8019f14:	d10b      	bne.n	8019f2e <__any_on+0x3e>
 8019f16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f1a:	4293      	cmp	r3, r2
 8019f1c:	d803      	bhi.n	8019f26 <__any_on+0x36>
 8019f1e:	2000      	movs	r0, #0
 8019f20:	bd10      	pop	{r4, pc}
 8019f22:	4603      	mov	r3, r0
 8019f24:	e7f7      	b.n	8019f16 <__any_on+0x26>
 8019f26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019f2a:	2900      	cmp	r1, #0
 8019f2c:	d0f5      	beq.n	8019f1a <__any_on+0x2a>
 8019f2e:	2001      	movs	r0, #1
 8019f30:	e7f6      	b.n	8019f20 <__any_on+0x30>

08019f32 <sulp>:
 8019f32:	b570      	push	{r4, r5, r6, lr}
 8019f34:	4604      	mov	r4, r0
 8019f36:	460d      	mov	r5, r1
 8019f38:	4616      	mov	r6, r2
 8019f3a:	ec45 4b10 	vmov	d0, r4, r5
 8019f3e:	f7ff febd 	bl	8019cbc <__ulp>
 8019f42:	b17e      	cbz	r6, 8019f64 <sulp+0x32>
 8019f44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019f48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	dd09      	ble.n	8019f64 <sulp+0x32>
 8019f50:	051b      	lsls	r3, r3, #20
 8019f52:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8019f56:	2000      	movs	r0, #0
 8019f58:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8019f5c:	ec41 0b17 	vmov	d7, r0, r1
 8019f60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08019f68 <_strtod_l>:
 8019f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f6c:	ed2d 8b0a 	vpush	{d8-d12}
 8019f70:	b097      	sub	sp, #92	@ 0x5c
 8019f72:	4688      	mov	r8, r1
 8019f74:	920e      	str	r2, [sp, #56]	@ 0x38
 8019f76:	2200      	movs	r2, #0
 8019f78:	9212      	str	r2, [sp, #72]	@ 0x48
 8019f7a:	9005      	str	r0, [sp, #20]
 8019f7c:	f04f 0a00 	mov.w	sl, #0
 8019f80:	f04f 0b00 	mov.w	fp, #0
 8019f84:	460a      	mov	r2, r1
 8019f86:	9211      	str	r2, [sp, #68]	@ 0x44
 8019f88:	7811      	ldrb	r1, [r2, #0]
 8019f8a:	292b      	cmp	r1, #43	@ 0x2b
 8019f8c:	d04c      	beq.n	801a028 <_strtod_l+0xc0>
 8019f8e:	d839      	bhi.n	801a004 <_strtod_l+0x9c>
 8019f90:	290d      	cmp	r1, #13
 8019f92:	d833      	bhi.n	8019ffc <_strtod_l+0x94>
 8019f94:	2908      	cmp	r1, #8
 8019f96:	d833      	bhi.n	801a000 <_strtod_l+0x98>
 8019f98:	2900      	cmp	r1, #0
 8019f9a:	d03c      	beq.n	801a016 <_strtod_l+0xae>
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	9208      	str	r2, [sp, #32]
 8019fa0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8019fa2:	782a      	ldrb	r2, [r5, #0]
 8019fa4:	2a30      	cmp	r2, #48	@ 0x30
 8019fa6:	f040 80b5 	bne.w	801a114 <_strtod_l+0x1ac>
 8019faa:	786a      	ldrb	r2, [r5, #1]
 8019fac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019fb0:	2a58      	cmp	r2, #88	@ 0x58
 8019fb2:	d170      	bne.n	801a096 <_strtod_l+0x12e>
 8019fb4:	9302      	str	r3, [sp, #8]
 8019fb6:	9b08      	ldr	r3, [sp, #32]
 8019fb8:	9301      	str	r3, [sp, #4]
 8019fba:	ab12      	add	r3, sp, #72	@ 0x48
 8019fbc:	9300      	str	r3, [sp, #0]
 8019fbe:	4a8b      	ldr	r2, [pc, #556]	@ (801a1ec <_strtod_l+0x284>)
 8019fc0:	9805      	ldr	r0, [sp, #20]
 8019fc2:	ab13      	add	r3, sp, #76	@ 0x4c
 8019fc4:	a911      	add	r1, sp, #68	@ 0x44
 8019fc6:	f001 fa91 	bl	801b4ec <__gethex>
 8019fca:	f010 060f 	ands.w	r6, r0, #15
 8019fce:	4604      	mov	r4, r0
 8019fd0:	d005      	beq.n	8019fde <_strtod_l+0x76>
 8019fd2:	2e06      	cmp	r6, #6
 8019fd4:	d12a      	bne.n	801a02c <_strtod_l+0xc4>
 8019fd6:	3501      	adds	r5, #1
 8019fd8:	2300      	movs	r3, #0
 8019fda:	9511      	str	r5, [sp, #68]	@ 0x44
 8019fdc:	9308      	str	r3, [sp, #32]
 8019fde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	f040 852f 	bne.w	801aa44 <_strtod_l+0xadc>
 8019fe6:	9b08      	ldr	r3, [sp, #32]
 8019fe8:	ec4b ab10 	vmov	d0, sl, fp
 8019fec:	b1cb      	cbz	r3, 801a022 <_strtod_l+0xba>
 8019fee:	eeb1 0b40 	vneg.f64	d0, d0
 8019ff2:	b017      	add	sp, #92	@ 0x5c
 8019ff4:	ecbd 8b0a 	vpop	{d8-d12}
 8019ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ffc:	2920      	cmp	r1, #32
 8019ffe:	d1cd      	bne.n	8019f9c <_strtod_l+0x34>
 801a000:	3201      	adds	r2, #1
 801a002:	e7c0      	b.n	8019f86 <_strtod_l+0x1e>
 801a004:	292d      	cmp	r1, #45	@ 0x2d
 801a006:	d1c9      	bne.n	8019f9c <_strtod_l+0x34>
 801a008:	2101      	movs	r1, #1
 801a00a:	9108      	str	r1, [sp, #32]
 801a00c:	1c51      	adds	r1, r2, #1
 801a00e:	9111      	str	r1, [sp, #68]	@ 0x44
 801a010:	7852      	ldrb	r2, [r2, #1]
 801a012:	2a00      	cmp	r2, #0
 801a014:	d1c4      	bne.n	8019fa0 <_strtod_l+0x38>
 801a016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a018:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	f040 850f 	bne.w	801aa40 <_strtod_l+0xad8>
 801a022:	ec4b ab10 	vmov	d0, sl, fp
 801a026:	e7e4      	b.n	8019ff2 <_strtod_l+0x8a>
 801a028:	2100      	movs	r1, #0
 801a02a:	e7ee      	b.n	801a00a <_strtod_l+0xa2>
 801a02c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a02e:	b13a      	cbz	r2, 801a040 <_strtod_l+0xd8>
 801a030:	2135      	movs	r1, #53	@ 0x35
 801a032:	a814      	add	r0, sp, #80	@ 0x50
 801a034:	f7ff ff39 	bl	8019eaa <__copybits>
 801a038:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a03a:	9805      	ldr	r0, [sp, #20]
 801a03c:	f7ff fb0a 	bl	8019654 <_Bfree>
 801a040:	1e73      	subs	r3, r6, #1
 801a042:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a044:	2b04      	cmp	r3, #4
 801a046:	d806      	bhi.n	801a056 <_strtod_l+0xee>
 801a048:	e8df f003 	tbb	[pc, r3]
 801a04c:	201d0314 	.word	0x201d0314
 801a050:	14          	.byte	0x14
 801a051:	00          	.byte	0x00
 801a052:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801a056:	05e3      	lsls	r3, r4, #23
 801a058:	bf48      	it	mi
 801a05a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801a05e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a062:	0d1b      	lsrs	r3, r3, #20
 801a064:	051b      	lsls	r3, r3, #20
 801a066:	2b00      	cmp	r3, #0
 801a068:	d1b9      	bne.n	8019fde <_strtod_l+0x76>
 801a06a:	f7fe fb91 	bl	8018790 <__errno>
 801a06e:	2322      	movs	r3, #34	@ 0x22
 801a070:	6003      	str	r3, [r0, #0]
 801a072:	e7b4      	b.n	8019fde <_strtod_l+0x76>
 801a074:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 801a078:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a07c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801a080:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a084:	e7e7      	b.n	801a056 <_strtod_l+0xee>
 801a086:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801a1f4 <_strtod_l+0x28c>
 801a08a:	e7e4      	b.n	801a056 <_strtod_l+0xee>
 801a08c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801a090:	f04f 3aff 	mov.w	sl, #4294967295
 801a094:	e7df      	b.n	801a056 <_strtod_l+0xee>
 801a096:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a098:	1c5a      	adds	r2, r3, #1
 801a09a:	9211      	str	r2, [sp, #68]	@ 0x44
 801a09c:	785b      	ldrb	r3, [r3, #1]
 801a09e:	2b30      	cmp	r3, #48	@ 0x30
 801a0a0:	d0f9      	beq.n	801a096 <_strtod_l+0x12e>
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d09b      	beq.n	8019fde <_strtod_l+0x76>
 801a0a6:	2301      	movs	r3, #1
 801a0a8:	2600      	movs	r6, #0
 801a0aa:	9307      	str	r3, [sp, #28]
 801a0ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a0ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801a0b0:	46b1      	mov	r9, r6
 801a0b2:	4635      	mov	r5, r6
 801a0b4:	220a      	movs	r2, #10
 801a0b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a0b8:	7804      	ldrb	r4, [r0, #0]
 801a0ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801a0be:	b2d9      	uxtb	r1, r3
 801a0c0:	2909      	cmp	r1, #9
 801a0c2:	d929      	bls.n	801a118 <_strtod_l+0x1b0>
 801a0c4:	494a      	ldr	r1, [pc, #296]	@ (801a1f0 <_strtod_l+0x288>)
 801a0c6:	2201      	movs	r2, #1
 801a0c8:	f001 f928 	bl	801b31c <strncmp>
 801a0cc:	b378      	cbz	r0, 801a12e <_strtod_l+0x1c6>
 801a0ce:	2000      	movs	r0, #0
 801a0d0:	4622      	mov	r2, r4
 801a0d2:	462b      	mov	r3, r5
 801a0d4:	4607      	mov	r7, r0
 801a0d6:	9006      	str	r0, [sp, #24]
 801a0d8:	2a65      	cmp	r2, #101	@ 0x65
 801a0da:	d001      	beq.n	801a0e0 <_strtod_l+0x178>
 801a0dc:	2a45      	cmp	r2, #69	@ 0x45
 801a0de:	d117      	bne.n	801a110 <_strtod_l+0x1a8>
 801a0e0:	b91b      	cbnz	r3, 801a0ea <_strtod_l+0x182>
 801a0e2:	9b07      	ldr	r3, [sp, #28]
 801a0e4:	4303      	orrs	r3, r0
 801a0e6:	d096      	beq.n	801a016 <_strtod_l+0xae>
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801a0ee:	f108 0201 	add.w	r2, r8, #1
 801a0f2:	9211      	str	r2, [sp, #68]	@ 0x44
 801a0f4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a0f8:	2a2b      	cmp	r2, #43	@ 0x2b
 801a0fa:	d06b      	beq.n	801a1d4 <_strtod_l+0x26c>
 801a0fc:	2a2d      	cmp	r2, #45	@ 0x2d
 801a0fe:	d071      	beq.n	801a1e4 <_strtod_l+0x27c>
 801a100:	f04f 0e00 	mov.w	lr, #0
 801a104:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801a108:	2c09      	cmp	r4, #9
 801a10a:	d979      	bls.n	801a200 <_strtod_l+0x298>
 801a10c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801a110:	2400      	movs	r4, #0
 801a112:	e094      	b.n	801a23e <_strtod_l+0x2d6>
 801a114:	2300      	movs	r3, #0
 801a116:	e7c7      	b.n	801a0a8 <_strtod_l+0x140>
 801a118:	2d08      	cmp	r5, #8
 801a11a:	f100 0001 	add.w	r0, r0, #1
 801a11e:	bfd4      	ite	le
 801a120:	fb02 3909 	mlale	r9, r2, r9, r3
 801a124:	fb02 3606 	mlagt	r6, r2, r6, r3
 801a128:	3501      	adds	r5, #1
 801a12a:	9011      	str	r0, [sp, #68]	@ 0x44
 801a12c:	e7c3      	b.n	801a0b6 <_strtod_l+0x14e>
 801a12e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a130:	1c5a      	adds	r2, r3, #1
 801a132:	9211      	str	r2, [sp, #68]	@ 0x44
 801a134:	785a      	ldrb	r2, [r3, #1]
 801a136:	b375      	cbz	r5, 801a196 <_strtod_l+0x22e>
 801a138:	4607      	mov	r7, r0
 801a13a:	462b      	mov	r3, r5
 801a13c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801a140:	2909      	cmp	r1, #9
 801a142:	d913      	bls.n	801a16c <_strtod_l+0x204>
 801a144:	2101      	movs	r1, #1
 801a146:	9106      	str	r1, [sp, #24]
 801a148:	e7c6      	b.n	801a0d8 <_strtod_l+0x170>
 801a14a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a14c:	1c5a      	adds	r2, r3, #1
 801a14e:	9211      	str	r2, [sp, #68]	@ 0x44
 801a150:	785a      	ldrb	r2, [r3, #1]
 801a152:	3001      	adds	r0, #1
 801a154:	2a30      	cmp	r2, #48	@ 0x30
 801a156:	d0f8      	beq.n	801a14a <_strtod_l+0x1e2>
 801a158:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801a15c:	2b08      	cmp	r3, #8
 801a15e:	f200 8476 	bhi.w	801aa4e <_strtod_l+0xae6>
 801a162:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a164:	930a      	str	r3, [sp, #40]	@ 0x28
 801a166:	4607      	mov	r7, r0
 801a168:	2000      	movs	r0, #0
 801a16a:	4603      	mov	r3, r0
 801a16c:	3a30      	subs	r2, #48	@ 0x30
 801a16e:	f100 0101 	add.w	r1, r0, #1
 801a172:	d023      	beq.n	801a1bc <_strtod_l+0x254>
 801a174:	440f      	add	r7, r1
 801a176:	eb00 0c03 	add.w	ip, r0, r3
 801a17a:	4619      	mov	r1, r3
 801a17c:	240a      	movs	r4, #10
 801a17e:	4561      	cmp	r1, ip
 801a180:	d10b      	bne.n	801a19a <_strtod_l+0x232>
 801a182:	1c5c      	adds	r4, r3, #1
 801a184:	4403      	add	r3, r0
 801a186:	2b08      	cmp	r3, #8
 801a188:	4404      	add	r4, r0
 801a18a:	dc11      	bgt.n	801a1b0 <_strtod_l+0x248>
 801a18c:	230a      	movs	r3, #10
 801a18e:	fb03 2909 	mla	r9, r3, r9, r2
 801a192:	2100      	movs	r1, #0
 801a194:	e013      	b.n	801a1be <_strtod_l+0x256>
 801a196:	4628      	mov	r0, r5
 801a198:	e7dc      	b.n	801a154 <_strtod_l+0x1ec>
 801a19a:	2908      	cmp	r1, #8
 801a19c:	f101 0101 	add.w	r1, r1, #1
 801a1a0:	dc02      	bgt.n	801a1a8 <_strtod_l+0x240>
 801a1a2:	fb04 f909 	mul.w	r9, r4, r9
 801a1a6:	e7ea      	b.n	801a17e <_strtod_l+0x216>
 801a1a8:	2910      	cmp	r1, #16
 801a1aa:	bfd8      	it	le
 801a1ac:	4366      	mulle	r6, r4
 801a1ae:	e7e6      	b.n	801a17e <_strtod_l+0x216>
 801a1b0:	2b0f      	cmp	r3, #15
 801a1b2:	dcee      	bgt.n	801a192 <_strtod_l+0x22a>
 801a1b4:	230a      	movs	r3, #10
 801a1b6:	fb03 2606 	mla	r6, r3, r6, r2
 801a1ba:	e7ea      	b.n	801a192 <_strtod_l+0x22a>
 801a1bc:	461c      	mov	r4, r3
 801a1be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a1c0:	1c5a      	adds	r2, r3, #1
 801a1c2:	9211      	str	r2, [sp, #68]	@ 0x44
 801a1c4:	785a      	ldrb	r2, [r3, #1]
 801a1c6:	4608      	mov	r0, r1
 801a1c8:	4623      	mov	r3, r4
 801a1ca:	e7b7      	b.n	801a13c <_strtod_l+0x1d4>
 801a1cc:	2301      	movs	r3, #1
 801a1ce:	2700      	movs	r7, #0
 801a1d0:	9306      	str	r3, [sp, #24]
 801a1d2:	e786      	b.n	801a0e2 <_strtod_l+0x17a>
 801a1d4:	f04f 0e00 	mov.w	lr, #0
 801a1d8:	f108 0202 	add.w	r2, r8, #2
 801a1dc:	9211      	str	r2, [sp, #68]	@ 0x44
 801a1de:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a1e2:	e78f      	b.n	801a104 <_strtod_l+0x19c>
 801a1e4:	f04f 0e01 	mov.w	lr, #1
 801a1e8:	e7f6      	b.n	801a1d8 <_strtod_l+0x270>
 801a1ea:	bf00      	nop
 801a1ec:	0801cda8 	.word	0x0801cda8
 801a1f0:	0801cd90 	.word	0x0801cd90
 801a1f4:	7ff00000 	.word	0x7ff00000
 801a1f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a1fa:	1c54      	adds	r4, r2, #1
 801a1fc:	9411      	str	r4, [sp, #68]	@ 0x44
 801a1fe:	7852      	ldrb	r2, [r2, #1]
 801a200:	2a30      	cmp	r2, #48	@ 0x30
 801a202:	d0f9      	beq.n	801a1f8 <_strtod_l+0x290>
 801a204:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801a208:	2c08      	cmp	r4, #8
 801a20a:	d881      	bhi.n	801a110 <_strtod_l+0x1a8>
 801a20c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 801a210:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a212:	9209      	str	r2, [sp, #36]	@ 0x24
 801a214:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a216:	1c51      	adds	r1, r2, #1
 801a218:	9111      	str	r1, [sp, #68]	@ 0x44
 801a21a:	7852      	ldrb	r2, [r2, #1]
 801a21c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801a220:	2c09      	cmp	r4, #9
 801a222:	d938      	bls.n	801a296 <_strtod_l+0x32e>
 801a224:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a226:	1b0c      	subs	r4, r1, r4
 801a228:	2c08      	cmp	r4, #8
 801a22a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801a22e:	dc02      	bgt.n	801a236 <_strtod_l+0x2ce>
 801a230:	4564      	cmp	r4, ip
 801a232:	bfa8      	it	ge
 801a234:	4664      	movge	r4, ip
 801a236:	f1be 0f00 	cmp.w	lr, #0
 801a23a:	d000      	beq.n	801a23e <_strtod_l+0x2d6>
 801a23c:	4264      	negs	r4, r4
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d14e      	bne.n	801a2e0 <_strtod_l+0x378>
 801a242:	9b07      	ldr	r3, [sp, #28]
 801a244:	4318      	orrs	r0, r3
 801a246:	f47f aeca 	bne.w	8019fde <_strtod_l+0x76>
 801a24a:	9b06      	ldr	r3, [sp, #24]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	f47f aee2 	bne.w	801a016 <_strtod_l+0xae>
 801a252:	2a69      	cmp	r2, #105	@ 0x69
 801a254:	d027      	beq.n	801a2a6 <_strtod_l+0x33e>
 801a256:	dc24      	bgt.n	801a2a2 <_strtod_l+0x33a>
 801a258:	2a49      	cmp	r2, #73	@ 0x49
 801a25a:	d024      	beq.n	801a2a6 <_strtod_l+0x33e>
 801a25c:	2a4e      	cmp	r2, #78	@ 0x4e
 801a25e:	f47f aeda 	bne.w	801a016 <_strtod_l+0xae>
 801a262:	4997      	ldr	r1, [pc, #604]	@ (801a4c0 <_strtod_l+0x558>)
 801a264:	a811      	add	r0, sp, #68	@ 0x44
 801a266:	f001 fb63 	bl	801b930 <__match>
 801a26a:	2800      	cmp	r0, #0
 801a26c:	f43f aed3 	beq.w	801a016 <_strtod_l+0xae>
 801a270:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a272:	781b      	ldrb	r3, [r3, #0]
 801a274:	2b28      	cmp	r3, #40	@ 0x28
 801a276:	d12d      	bne.n	801a2d4 <_strtod_l+0x36c>
 801a278:	4992      	ldr	r1, [pc, #584]	@ (801a4c4 <_strtod_l+0x55c>)
 801a27a:	aa14      	add	r2, sp, #80	@ 0x50
 801a27c:	a811      	add	r0, sp, #68	@ 0x44
 801a27e:	f001 fb6b 	bl	801b958 <__hexnan>
 801a282:	2805      	cmp	r0, #5
 801a284:	d126      	bne.n	801a2d4 <_strtod_l+0x36c>
 801a286:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a288:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801a28c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801a290:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801a294:	e6a3      	b.n	8019fde <_strtod_l+0x76>
 801a296:	240a      	movs	r4, #10
 801a298:	fb04 2c0c 	mla	ip, r4, ip, r2
 801a29c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 801a2a0:	e7b8      	b.n	801a214 <_strtod_l+0x2ac>
 801a2a2:	2a6e      	cmp	r2, #110	@ 0x6e
 801a2a4:	e7db      	b.n	801a25e <_strtod_l+0x2f6>
 801a2a6:	4988      	ldr	r1, [pc, #544]	@ (801a4c8 <_strtod_l+0x560>)
 801a2a8:	a811      	add	r0, sp, #68	@ 0x44
 801a2aa:	f001 fb41 	bl	801b930 <__match>
 801a2ae:	2800      	cmp	r0, #0
 801a2b0:	f43f aeb1 	beq.w	801a016 <_strtod_l+0xae>
 801a2b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a2b6:	4985      	ldr	r1, [pc, #532]	@ (801a4cc <_strtod_l+0x564>)
 801a2b8:	3b01      	subs	r3, #1
 801a2ba:	a811      	add	r0, sp, #68	@ 0x44
 801a2bc:	9311      	str	r3, [sp, #68]	@ 0x44
 801a2be:	f001 fb37 	bl	801b930 <__match>
 801a2c2:	b910      	cbnz	r0, 801a2ca <_strtod_l+0x362>
 801a2c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a2c6:	3301      	adds	r3, #1
 801a2c8:	9311      	str	r3, [sp, #68]	@ 0x44
 801a2ca:	f8df b214 	ldr.w	fp, [pc, #532]	@ 801a4e0 <_strtod_l+0x578>
 801a2ce:	f04f 0a00 	mov.w	sl, #0
 801a2d2:	e684      	b.n	8019fde <_strtod_l+0x76>
 801a2d4:	487e      	ldr	r0, [pc, #504]	@ (801a4d0 <_strtod_l+0x568>)
 801a2d6:	f001 f867 	bl	801b3a8 <nan>
 801a2da:	ec5b ab10 	vmov	sl, fp, d0
 801a2de:	e67e      	b.n	8019fde <_strtod_l+0x76>
 801a2e0:	ee07 9a90 	vmov	s15, r9
 801a2e4:	1be2      	subs	r2, r4, r7
 801a2e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a2ea:	2d00      	cmp	r5, #0
 801a2ec:	bf08      	it	eq
 801a2ee:	461d      	moveq	r5, r3
 801a2f0:	2b10      	cmp	r3, #16
 801a2f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801a2f4:	461a      	mov	r2, r3
 801a2f6:	bfa8      	it	ge
 801a2f8:	2210      	movge	r2, #16
 801a2fa:	2b09      	cmp	r3, #9
 801a2fc:	ec5b ab17 	vmov	sl, fp, d7
 801a300:	dc15      	bgt.n	801a32e <_strtod_l+0x3c6>
 801a302:	1be1      	subs	r1, r4, r7
 801a304:	2900      	cmp	r1, #0
 801a306:	f43f ae6a 	beq.w	8019fde <_strtod_l+0x76>
 801a30a:	eba4 0107 	sub.w	r1, r4, r7
 801a30e:	dd72      	ble.n	801a3f6 <_strtod_l+0x48e>
 801a310:	2916      	cmp	r1, #22
 801a312:	dc59      	bgt.n	801a3c8 <_strtod_l+0x460>
 801a314:	4b6f      	ldr	r3, [pc, #444]	@ (801a4d4 <_strtod_l+0x56c>)
 801a316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a31c:	ed93 7b00 	vldr	d7, [r3]
 801a320:	ec4b ab16 	vmov	d6, sl, fp
 801a324:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a328:	ec5b ab17 	vmov	sl, fp, d7
 801a32c:	e657      	b.n	8019fde <_strtod_l+0x76>
 801a32e:	4969      	ldr	r1, [pc, #420]	@ (801a4d4 <_strtod_l+0x56c>)
 801a330:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a334:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 801a338:	ee06 6a90 	vmov	s13, r6
 801a33c:	2b0f      	cmp	r3, #15
 801a33e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801a342:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a346:	ec5b ab16 	vmov	sl, fp, d6
 801a34a:	ddda      	ble.n	801a302 <_strtod_l+0x39a>
 801a34c:	1a9a      	subs	r2, r3, r2
 801a34e:	1be1      	subs	r1, r4, r7
 801a350:	440a      	add	r2, r1
 801a352:	2a00      	cmp	r2, #0
 801a354:	f340 8094 	ble.w	801a480 <_strtod_l+0x518>
 801a358:	f012 000f 	ands.w	r0, r2, #15
 801a35c:	d00a      	beq.n	801a374 <_strtod_l+0x40c>
 801a35e:	495d      	ldr	r1, [pc, #372]	@ (801a4d4 <_strtod_l+0x56c>)
 801a360:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a364:	ed91 7b00 	vldr	d7, [r1]
 801a368:	ec4b ab16 	vmov	d6, sl, fp
 801a36c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a370:	ec5b ab17 	vmov	sl, fp, d7
 801a374:	f032 020f 	bics.w	r2, r2, #15
 801a378:	d073      	beq.n	801a462 <_strtod_l+0x4fa>
 801a37a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801a37e:	dd47      	ble.n	801a410 <_strtod_l+0x4a8>
 801a380:	2400      	movs	r4, #0
 801a382:	4625      	mov	r5, r4
 801a384:	9407      	str	r4, [sp, #28]
 801a386:	4626      	mov	r6, r4
 801a388:	9a05      	ldr	r2, [sp, #20]
 801a38a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801a4e0 <_strtod_l+0x578>
 801a38e:	2322      	movs	r3, #34	@ 0x22
 801a390:	6013      	str	r3, [r2, #0]
 801a392:	f04f 0a00 	mov.w	sl, #0
 801a396:	9b07      	ldr	r3, [sp, #28]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	f43f ae20 	beq.w	8019fde <_strtod_l+0x76>
 801a39e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a3a0:	9805      	ldr	r0, [sp, #20]
 801a3a2:	f7ff f957 	bl	8019654 <_Bfree>
 801a3a6:	9805      	ldr	r0, [sp, #20]
 801a3a8:	4631      	mov	r1, r6
 801a3aa:	f7ff f953 	bl	8019654 <_Bfree>
 801a3ae:	9805      	ldr	r0, [sp, #20]
 801a3b0:	4629      	mov	r1, r5
 801a3b2:	f7ff f94f 	bl	8019654 <_Bfree>
 801a3b6:	9907      	ldr	r1, [sp, #28]
 801a3b8:	9805      	ldr	r0, [sp, #20]
 801a3ba:	f7ff f94b 	bl	8019654 <_Bfree>
 801a3be:	9805      	ldr	r0, [sp, #20]
 801a3c0:	4621      	mov	r1, r4
 801a3c2:	f7ff f947 	bl	8019654 <_Bfree>
 801a3c6:	e60a      	b.n	8019fde <_strtod_l+0x76>
 801a3c8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801a3cc:	1be0      	subs	r0, r4, r7
 801a3ce:	4281      	cmp	r1, r0
 801a3d0:	dbbc      	blt.n	801a34c <_strtod_l+0x3e4>
 801a3d2:	4a40      	ldr	r2, [pc, #256]	@ (801a4d4 <_strtod_l+0x56c>)
 801a3d4:	f1c3 030f 	rsb	r3, r3, #15
 801a3d8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801a3dc:	ed91 7b00 	vldr	d7, [r1]
 801a3e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a3e2:	ec4b ab16 	vmov	d6, sl, fp
 801a3e6:	1acb      	subs	r3, r1, r3
 801a3e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a3ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a3f0:	ed92 6b00 	vldr	d6, [r2]
 801a3f4:	e796      	b.n	801a324 <_strtod_l+0x3bc>
 801a3f6:	3116      	adds	r1, #22
 801a3f8:	dba8      	blt.n	801a34c <_strtod_l+0x3e4>
 801a3fa:	4b36      	ldr	r3, [pc, #216]	@ (801a4d4 <_strtod_l+0x56c>)
 801a3fc:	1b3c      	subs	r4, r7, r4
 801a3fe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a402:	ed94 7b00 	vldr	d7, [r4]
 801a406:	ec4b ab16 	vmov	d6, sl, fp
 801a40a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a40e:	e78b      	b.n	801a328 <_strtod_l+0x3c0>
 801a410:	2000      	movs	r0, #0
 801a412:	ec4b ab17 	vmov	d7, sl, fp
 801a416:	4e30      	ldr	r6, [pc, #192]	@ (801a4d8 <_strtod_l+0x570>)
 801a418:	1112      	asrs	r2, r2, #4
 801a41a:	4601      	mov	r1, r0
 801a41c:	2a01      	cmp	r2, #1
 801a41e:	dc23      	bgt.n	801a468 <_strtod_l+0x500>
 801a420:	b108      	cbz	r0, 801a426 <_strtod_l+0x4be>
 801a422:	ec5b ab17 	vmov	sl, fp, d7
 801a426:	4a2c      	ldr	r2, [pc, #176]	@ (801a4d8 <_strtod_l+0x570>)
 801a428:	482c      	ldr	r0, [pc, #176]	@ (801a4dc <_strtod_l+0x574>)
 801a42a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a42e:	ed92 7b00 	vldr	d7, [r2]
 801a432:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801a436:	ec4b ab16 	vmov	d6, sl, fp
 801a43a:	4a29      	ldr	r2, [pc, #164]	@ (801a4e0 <_strtod_l+0x578>)
 801a43c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a440:	ee17 1a90 	vmov	r1, s15
 801a444:	400a      	ands	r2, r1
 801a446:	4282      	cmp	r2, r0
 801a448:	ec5b ab17 	vmov	sl, fp, d7
 801a44c:	d898      	bhi.n	801a380 <_strtod_l+0x418>
 801a44e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801a452:	4282      	cmp	r2, r0
 801a454:	bf86      	itte	hi
 801a456:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801a4e4 <_strtod_l+0x57c>
 801a45a:	f04f 3aff 	movhi.w	sl, #4294967295
 801a45e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801a462:	2200      	movs	r2, #0
 801a464:	9206      	str	r2, [sp, #24]
 801a466:	e076      	b.n	801a556 <_strtod_l+0x5ee>
 801a468:	f012 0f01 	tst.w	r2, #1
 801a46c:	d004      	beq.n	801a478 <_strtod_l+0x510>
 801a46e:	ed96 6b00 	vldr	d6, [r6]
 801a472:	2001      	movs	r0, #1
 801a474:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a478:	3101      	adds	r1, #1
 801a47a:	1052      	asrs	r2, r2, #1
 801a47c:	3608      	adds	r6, #8
 801a47e:	e7cd      	b.n	801a41c <_strtod_l+0x4b4>
 801a480:	d0ef      	beq.n	801a462 <_strtod_l+0x4fa>
 801a482:	4252      	negs	r2, r2
 801a484:	f012 000f 	ands.w	r0, r2, #15
 801a488:	d00a      	beq.n	801a4a0 <_strtod_l+0x538>
 801a48a:	4912      	ldr	r1, [pc, #72]	@ (801a4d4 <_strtod_l+0x56c>)
 801a48c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a490:	ed91 7b00 	vldr	d7, [r1]
 801a494:	ec4b ab16 	vmov	d6, sl, fp
 801a498:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a49c:	ec5b ab17 	vmov	sl, fp, d7
 801a4a0:	1112      	asrs	r2, r2, #4
 801a4a2:	d0de      	beq.n	801a462 <_strtod_l+0x4fa>
 801a4a4:	2a1f      	cmp	r2, #31
 801a4a6:	dd1f      	ble.n	801a4e8 <_strtod_l+0x580>
 801a4a8:	2400      	movs	r4, #0
 801a4aa:	4625      	mov	r5, r4
 801a4ac:	9407      	str	r4, [sp, #28]
 801a4ae:	4626      	mov	r6, r4
 801a4b0:	9a05      	ldr	r2, [sp, #20]
 801a4b2:	2322      	movs	r3, #34	@ 0x22
 801a4b4:	f04f 0a00 	mov.w	sl, #0
 801a4b8:	f04f 0b00 	mov.w	fp, #0
 801a4bc:	6013      	str	r3, [r2, #0]
 801a4be:	e76a      	b.n	801a396 <_strtod_l+0x42e>
 801a4c0:	0801cb7d 	.word	0x0801cb7d
 801a4c4:	0801cd94 	.word	0x0801cd94
 801a4c8:	0801cb75 	.word	0x0801cb75
 801a4cc:	0801cbac 	.word	0x0801cbac
 801a4d0:	0801cf3d 	.word	0x0801cf3d
 801a4d4:	0801ccc8 	.word	0x0801ccc8
 801a4d8:	0801cca0 	.word	0x0801cca0
 801a4dc:	7ca00000 	.word	0x7ca00000
 801a4e0:	7ff00000 	.word	0x7ff00000
 801a4e4:	7fefffff 	.word	0x7fefffff
 801a4e8:	f012 0110 	ands.w	r1, r2, #16
 801a4ec:	bf18      	it	ne
 801a4ee:	216a      	movne	r1, #106	@ 0x6a
 801a4f0:	9106      	str	r1, [sp, #24]
 801a4f2:	ec4b ab17 	vmov	d7, sl, fp
 801a4f6:	49b0      	ldr	r1, [pc, #704]	@ (801a7b8 <_strtod_l+0x850>)
 801a4f8:	2000      	movs	r0, #0
 801a4fa:	07d6      	lsls	r6, r2, #31
 801a4fc:	d504      	bpl.n	801a508 <_strtod_l+0x5a0>
 801a4fe:	ed91 6b00 	vldr	d6, [r1]
 801a502:	2001      	movs	r0, #1
 801a504:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a508:	1052      	asrs	r2, r2, #1
 801a50a:	f101 0108 	add.w	r1, r1, #8
 801a50e:	d1f4      	bne.n	801a4fa <_strtod_l+0x592>
 801a510:	b108      	cbz	r0, 801a516 <_strtod_l+0x5ae>
 801a512:	ec5b ab17 	vmov	sl, fp, d7
 801a516:	9a06      	ldr	r2, [sp, #24]
 801a518:	b1b2      	cbz	r2, 801a548 <_strtod_l+0x5e0>
 801a51a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801a51e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801a522:	2a00      	cmp	r2, #0
 801a524:	4658      	mov	r0, fp
 801a526:	dd0f      	ble.n	801a548 <_strtod_l+0x5e0>
 801a528:	2a1f      	cmp	r2, #31
 801a52a:	dd55      	ble.n	801a5d8 <_strtod_l+0x670>
 801a52c:	2a34      	cmp	r2, #52	@ 0x34
 801a52e:	bfde      	ittt	le
 801a530:	f04f 32ff 	movle.w	r2, #4294967295
 801a534:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801a538:	408a      	lslle	r2, r1
 801a53a:	f04f 0a00 	mov.w	sl, #0
 801a53e:	bfcc      	ite	gt
 801a540:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801a544:	ea02 0b00 	andle.w	fp, r2, r0
 801a548:	ec4b ab17 	vmov	d7, sl, fp
 801a54c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a554:	d0a8      	beq.n	801a4a8 <_strtod_l+0x540>
 801a556:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a558:	9805      	ldr	r0, [sp, #20]
 801a55a:	f8cd 9000 	str.w	r9, [sp]
 801a55e:	462a      	mov	r2, r5
 801a560:	f7ff f8e0 	bl	8019724 <__s2b>
 801a564:	9007      	str	r0, [sp, #28]
 801a566:	2800      	cmp	r0, #0
 801a568:	f43f af0a 	beq.w	801a380 <_strtod_l+0x418>
 801a56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a56e:	1b3f      	subs	r7, r7, r4
 801a570:	2b00      	cmp	r3, #0
 801a572:	bfb4      	ite	lt
 801a574:	463b      	movlt	r3, r7
 801a576:	2300      	movge	r3, #0
 801a578:	930a      	str	r3, [sp, #40]	@ 0x28
 801a57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a57c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 801a7a8 <_strtod_l+0x840>
 801a580:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a584:	2400      	movs	r4, #0
 801a586:	930d      	str	r3, [sp, #52]	@ 0x34
 801a588:	4625      	mov	r5, r4
 801a58a:	9b07      	ldr	r3, [sp, #28]
 801a58c:	9805      	ldr	r0, [sp, #20]
 801a58e:	6859      	ldr	r1, [r3, #4]
 801a590:	f7ff f820 	bl	80195d4 <_Balloc>
 801a594:	4606      	mov	r6, r0
 801a596:	2800      	cmp	r0, #0
 801a598:	f43f aef6 	beq.w	801a388 <_strtod_l+0x420>
 801a59c:	9b07      	ldr	r3, [sp, #28]
 801a59e:	691a      	ldr	r2, [r3, #16]
 801a5a0:	ec4b ab19 	vmov	d9, sl, fp
 801a5a4:	3202      	adds	r2, #2
 801a5a6:	f103 010c 	add.w	r1, r3, #12
 801a5aa:	0092      	lsls	r2, r2, #2
 801a5ac:	300c      	adds	r0, #12
 801a5ae:	f7fe f91c 	bl	80187ea <memcpy>
 801a5b2:	eeb0 0b49 	vmov.f64	d0, d9
 801a5b6:	9805      	ldr	r0, [sp, #20]
 801a5b8:	aa14      	add	r2, sp, #80	@ 0x50
 801a5ba:	a913      	add	r1, sp, #76	@ 0x4c
 801a5bc:	f7ff fbee 	bl	8019d9c <__d2b>
 801a5c0:	9012      	str	r0, [sp, #72]	@ 0x48
 801a5c2:	2800      	cmp	r0, #0
 801a5c4:	f43f aee0 	beq.w	801a388 <_strtod_l+0x420>
 801a5c8:	9805      	ldr	r0, [sp, #20]
 801a5ca:	2101      	movs	r1, #1
 801a5cc:	f7ff f940 	bl	8019850 <__i2b>
 801a5d0:	4605      	mov	r5, r0
 801a5d2:	b940      	cbnz	r0, 801a5e6 <_strtod_l+0x67e>
 801a5d4:	2500      	movs	r5, #0
 801a5d6:	e6d7      	b.n	801a388 <_strtod_l+0x420>
 801a5d8:	f04f 31ff 	mov.w	r1, #4294967295
 801a5dc:	fa01 f202 	lsl.w	r2, r1, r2
 801a5e0:	ea02 0a0a 	and.w	sl, r2, sl
 801a5e4:	e7b0      	b.n	801a548 <_strtod_l+0x5e0>
 801a5e6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801a5e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a5ea:	2f00      	cmp	r7, #0
 801a5ec:	bfab      	itete	ge
 801a5ee:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 801a5f0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801a5f2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801a5f6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801a5fa:	bfac      	ite	ge
 801a5fc:	eb07 0903 	addge.w	r9, r7, r3
 801a600:	eba3 0807 	sublt.w	r8, r3, r7
 801a604:	9b06      	ldr	r3, [sp, #24]
 801a606:	1aff      	subs	r7, r7, r3
 801a608:	4417      	add	r7, r2
 801a60a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801a60e:	4a6b      	ldr	r2, [pc, #428]	@ (801a7bc <_strtod_l+0x854>)
 801a610:	3f01      	subs	r7, #1
 801a612:	4297      	cmp	r7, r2
 801a614:	da51      	bge.n	801a6ba <_strtod_l+0x752>
 801a616:	1bd1      	subs	r1, r2, r7
 801a618:	291f      	cmp	r1, #31
 801a61a:	eba3 0301 	sub.w	r3, r3, r1
 801a61e:	f04f 0201 	mov.w	r2, #1
 801a622:	dc3e      	bgt.n	801a6a2 <_strtod_l+0x73a>
 801a624:	408a      	lsls	r2, r1
 801a626:	920c      	str	r2, [sp, #48]	@ 0x30
 801a628:	2200      	movs	r2, #0
 801a62a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a62c:	eb09 0703 	add.w	r7, r9, r3
 801a630:	4498      	add	r8, r3
 801a632:	9b06      	ldr	r3, [sp, #24]
 801a634:	45b9      	cmp	r9, r7
 801a636:	4498      	add	r8, r3
 801a638:	464b      	mov	r3, r9
 801a63a:	bfa8      	it	ge
 801a63c:	463b      	movge	r3, r7
 801a63e:	4543      	cmp	r3, r8
 801a640:	bfa8      	it	ge
 801a642:	4643      	movge	r3, r8
 801a644:	2b00      	cmp	r3, #0
 801a646:	bfc2      	ittt	gt
 801a648:	1aff      	subgt	r7, r7, r3
 801a64a:	eba8 0803 	subgt.w	r8, r8, r3
 801a64e:	eba9 0903 	subgt.w	r9, r9, r3
 801a652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a654:	2b00      	cmp	r3, #0
 801a656:	dd16      	ble.n	801a686 <_strtod_l+0x71e>
 801a658:	4629      	mov	r1, r5
 801a65a:	9805      	ldr	r0, [sp, #20]
 801a65c:	461a      	mov	r2, r3
 801a65e:	f7ff f9b7 	bl	80199d0 <__pow5mult>
 801a662:	4605      	mov	r5, r0
 801a664:	2800      	cmp	r0, #0
 801a666:	d0b5      	beq.n	801a5d4 <_strtod_l+0x66c>
 801a668:	4601      	mov	r1, r0
 801a66a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a66c:	9805      	ldr	r0, [sp, #20]
 801a66e:	f7ff f905 	bl	801987c <__multiply>
 801a672:	900f      	str	r0, [sp, #60]	@ 0x3c
 801a674:	2800      	cmp	r0, #0
 801a676:	f43f ae87 	beq.w	801a388 <_strtod_l+0x420>
 801a67a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a67c:	9805      	ldr	r0, [sp, #20]
 801a67e:	f7fe ffe9 	bl	8019654 <_Bfree>
 801a682:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a684:	9312      	str	r3, [sp, #72]	@ 0x48
 801a686:	2f00      	cmp	r7, #0
 801a688:	dc1b      	bgt.n	801a6c2 <_strtod_l+0x75a>
 801a68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	dd21      	ble.n	801a6d4 <_strtod_l+0x76c>
 801a690:	4631      	mov	r1, r6
 801a692:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a694:	9805      	ldr	r0, [sp, #20]
 801a696:	f7ff f99b 	bl	80199d0 <__pow5mult>
 801a69a:	4606      	mov	r6, r0
 801a69c:	b9d0      	cbnz	r0, 801a6d4 <_strtod_l+0x76c>
 801a69e:	2600      	movs	r6, #0
 801a6a0:	e672      	b.n	801a388 <_strtod_l+0x420>
 801a6a2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801a6a6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801a6aa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801a6ae:	37e2      	adds	r7, #226	@ 0xe2
 801a6b0:	fa02 f107 	lsl.w	r1, r2, r7
 801a6b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a6b6:	920c      	str	r2, [sp, #48]	@ 0x30
 801a6b8:	e7b8      	b.n	801a62c <_strtod_l+0x6c4>
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a6be:	2201      	movs	r2, #1
 801a6c0:	e7f9      	b.n	801a6b6 <_strtod_l+0x74e>
 801a6c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a6c4:	9805      	ldr	r0, [sp, #20]
 801a6c6:	463a      	mov	r2, r7
 801a6c8:	f7ff f9dc 	bl	8019a84 <__lshift>
 801a6cc:	9012      	str	r0, [sp, #72]	@ 0x48
 801a6ce:	2800      	cmp	r0, #0
 801a6d0:	d1db      	bne.n	801a68a <_strtod_l+0x722>
 801a6d2:	e659      	b.n	801a388 <_strtod_l+0x420>
 801a6d4:	f1b8 0f00 	cmp.w	r8, #0
 801a6d8:	dd07      	ble.n	801a6ea <_strtod_l+0x782>
 801a6da:	4631      	mov	r1, r6
 801a6dc:	9805      	ldr	r0, [sp, #20]
 801a6de:	4642      	mov	r2, r8
 801a6e0:	f7ff f9d0 	bl	8019a84 <__lshift>
 801a6e4:	4606      	mov	r6, r0
 801a6e6:	2800      	cmp	r0, #0
 801a6e8:	d0d9      	beq.n	801a69e <_strtod_l+0x736>
 801a6ea:	f1b9 0f00 	cmp.w	r9, #0
 801a6ee:	dd08      	ble.n	801a702 <_strtod_l+0x79a>
 801a6f0:	4629      	mov	r1, r5
 801a6f2:	9805      	ldr	r0, [sp, #20]
 801a6f4:	464a      	mov	r2, r9
 801a6f6:	f7ff f9c5 	bl	8019a84 <__lshift>
 801a6fa:	4605      	mov	r5, r0
 801a6fc:	2800      	cmp	r0, #0
 801a6fe:	f43f ae43 	beq.w	801a388 <_strtod_l+0x420>
 801a702:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a704:	9805      	ldr	r0, [sp, #20]
 801a706:	4632      	mov	r2, r6
 801a708:	f7ff fa44 	bl	8019b94 <__mdiff>
 801a70c:	4604      	mov	r4, r0
 801a70e:	2800      	cmp	r0, #0
 801a710:	f43f ae3a 	beq.w	801a388 <_strtod_l+0x420>
 801a714:	2300      	movs	r3, #0
 801a716:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801a71a:	60c3      	str	r3, [r0, #12]
 801a71c:	4629      	mov	r1, r5
 801a71e:	f7ff fa1d 	bl	8019b5c <__mcmp>
 801a722:	2800      	cmp	r0, #0
 801a724:	da4e      	bge.n	801a7c4 <_strtod_l+0x85c>
 801a726:	ea58 080a 	orrs.w	r8, r8, sl
 801a72a:	d174      	bne.n	801a816 <_strtod_l+0x8ae>
 801a72c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a730:	2b00      	cmp	r3, #0
 801a732:	d170      	bne.n	801a816 <_strtod_l+0x8ae>
 801a734:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a738:	0d1b      	lsrs	r3, r3, #20
 801a73a:	051b      	lsls	r3, r3, #20
 801a73c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a740:	d969      	bls.n	801a816 <_strtod_l+0x8ae>
 801a742:	6963      	ldr	r3, [r4, #20]
 801a744:	b913      	cbnz	r3, 801a74c <_strtod_l+0x7e4>
 801a746:	6923      	ldr	r3, [r4, #16]
 801a748:	2b01      	cmp	r3, #1
 801a74a:	dd64      	ble.n	801a816 <_strtod_l+0x8ae>
 801a74c:	4621      	mov	r1, r4
 801a74e:	2201      	movs	r2, #1
 801a750:	9805      	ldr	r0, [sp, #20]
 801a752:	f7ff f997 	bl	8019a84 <__lshift>
 801a756:	4629      	mov	r1, r5
 801a758:	4604      	mov	r4, r0
 801a75a:	f7ff f9ff 	bl	8019b5c <__mcmp>
 801a75e:	2800      	cmp	r0, #0
 801a760:	dd59      	ble.n	801a816 <_strtod_l+0x8ae>
 801a762:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a766:	9a06      	ldr	r2, [sp, #24]
 801a768:	0d1b      	lsrs	r3, r3, #20
 801a76a:	051b      	lsls	r3, r3, #20
 801a76c:	2a00      	cmp	r2, #0
 801a76e:	d070      	beq.n	801a852 <_strtod_l+0x8ea>
 801a770:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a774:	d86d      	bhi.n	801a852 <_strtod_l+0x8ea>
 801a776:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a77a:	f67f ae99 	bls.w	801a4b0 <_strtod_l+0x548>
 801a77e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801a7b0 <_strtod_l+0x848>
 801a782:	ec4b ab16 	vmov	d6, sl, fp
 801a786:	4b0e      	ldr	r3, [pc, #56]	@ (801a7c0 <_strtod_l+0x858>)
 801a788:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a78c:	ee17 2a90 	vmov	r2, s15
 801a790:	4013      	ands	r3, r2
 801a792:	ec5b ab17 	vmov	sl, fp, d7
 801a796:	2b00      	cmp	r3, #0
 801a798:	f47f ae01 	bne.w	801a39e <_strtod_l+0x436>
 801a79c:	9a05      	ldr	r2, [sp, #20]
 801a79e:	2322      	movs	r3, #34	@ 0x22
 801a7a0:	6013      	str	r3, [r2, #0]
 801a7a2:	e5fc      	b.n	801a39e <_strtod_l+0x436>
 801a7a4:	f3af 8000 	nop.w
 801a7a8:	ffc00000 	.word	0xffc00000
 801a7ac:	41dfffff 	.word	0x41dfffff
 801a7b0:	00000000 	.word	0x00000000
 801a7b4:	39500000 	.word	0x39500000
 801a7b8:	0801cdc0 	.word	0x0801cdc0
 801a7bc:	fffffc02 	.word	0xfffffc02
 801a7c0:	7ff00000 	.word	0x7ff00000
 801a7c4:	46d9      	mov	r9, fp
 801a7c6:	d15d      	bne.n	801a884 <_strtod_l+0x91c>
 801a7c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a7cc:	f1b8 0f00 	cmp.w	r8, #0
 801a7d0:	d02a      	beq.n	801a828 <_strtod_l+0x8c0>
 801a7d2:	4aab      	ldr	r2, [pc, #684]	@ (801aa80 <_strtod_l+0xb18>)
 801a7d4:	4293      	cmp	r3, r2
 801a7d6:	d12a      	bne.n	801a82e <_strtod_l+0x8c6>
 801a7d8:	9b06      	ldr	r3, [sp, #24]
 801a7da:	4652      	mov	r2, sl
 801a7dc:	b1fb      	cbz	r3, 801a81e <_strtod_l+0x8b6>
 801a7de:	4ba9      	ldr	r3, [pc, #676]	@ (801aa84 <_strtod_l+0xb1c>)
 801a7e0:	ea0b 0303 	and.w	r3, fp, r3
 801a7e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a7e8:	f04f 31ff 	mov.w	r1, #4294967295
 801a7ec:	d81a      	bhi.n	801a824 <_strtod_l+0x8bc>
 801a7ee:	0d1b      	lsrs	r3, r3, #20
 801a7f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a7f4:	fa01 f303 	lsl.w	r3, r1, r3
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d118      	bne.n	801a82e <_strtod_l+0x8c6>
 801a7fc:	4ba2      	ldr	r3, [pc, #648]	@ (801aa88 <_strtod_l+0xb20>)
 801a7fe:	4599      	cmp	r9, r3
 801a800:	d102      	bne.n	801a808 <_strtod_l+0x8a0>
 801a802:	3201      	adds	r2, #1
 801a804:	f43f adc0 	beq.w	801a388 <_strtod_l+0x420>
 801a808:	4b9e      	ldr	r3, [pc, #632]	@ (801aa84 <_strtod_l+0xb1c>)
 801a80a:	ea09 0303 	and.w	r3, r9, r3
 801a80e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801a812:	f04f 0a00 	mov.w	sl, #0
 801a816:	9b06      	ldr	r3, [sp, #24]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d1b0      	bne.n	801a77e <_strtod_l+0x816>
 801a81c:	e5bf      	b.n	801a39e <_strtod_l+0x436>
 801a81e:	f04f 33ff 	mov.w	r3, #4294967295
 801a822:	e7e9      	b.n	801a7f8 <_strtod_l+0x890>
 801a824:	460b      	mov	r3, r1
 801a826:	e7e7      	b.n	801a7f8 <_strtod_l+0x890>
 801a828:	ea53 030a 	orrs.w	r3, r3, sl
 801a82c:	d099      	beq.n	801a762 <_strtod_l+0x7fa>
 801a82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a830:	b1c3      	cbz	r3, 801a864 <_strtod_l+0x8fc>
 801a832:	ea13 0f09 	tst.w	r3, r9
 801a836:	d0ee      	beq.n	801a816 <_strtod_l+0x8ae>
 801a838:	9a06      	ldr	r2, [sp, #24]
 801a83a:	4650      	mov	r0, sl
 801a83c:	4659      	mov	r1, fp
 801a83e:	f1b8 0f00 	cmp.w	r8, #0
 801a842:	d013      	beq.n	801a86c <_strtod_l+0x904>
 801a844:	f7ff fb75 	bl	8019f32 <sulp>
 801a848:	ee39 7b00 	vadd.f64	d7, d9, d0
 801a84c:	ec5b ab17 	vmov	sl, fp, d7
 801a850:	e7e1      	b.n	801a816 <_strtod_l+0x8ae>
 801a852:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a856:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a85a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a85e:	f04f 3aff 	mov.w	sl, #4294967295
 801a862:	e7d8      	b.n	801a816 <_strtod_l+0x8ae>
 801a864:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a866:	ea13 0f0a 	tst.w	r3, sl
 801a86a:	e7e4      	b.n	801a836 <_strtod_l+0x8ce>
 801a86c:	f7ff fb61 	bl	8019f32 <sulp>
 801a870:	ee39 0b40 	vsub.f64	d0, d9, d0
 801a874:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a87c:	ec5b ab10 	vmov	sl, fp, d0
 801a880:	d1c9      	bne.n	801a816 <_strtod_l+0x8ae>
 801a882:	e615      	b.n	801a4b0 <_strtod_l+0x548>
 801a884:	4629      	mov	r1, r5
 801a886:	4620      	mov	r0, r4
 801a888:	f7ff fae0 	bl	8019e4c <__ratio>
 801a88c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801a890:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a898:	d85d      	bhi.n	801a956 <_strtod_l+0x9ee>
 801a89a:	f1b8 0f00 	cmp.w	r8, #0
 801a89e:	d164      	bne.n	801a96a <_strtod_l+0xa02>
 801a8a0:	f1ba 0f00 	cmp.w	sl, #0
 801a8a4:	d14b      	bne.n	801a93e <_strtod_l+0x9d6>
 801a8a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a8aa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d160      	bne.n	801a974 <_strtod_l+0xa0c>
 801a8b2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801a8b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8be:	d401      	bmi.n	801a8c4 <_strtod_l+0x95c>
 801a8c0:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a8c4:	eeb1 ab48 	vneg.f64	d10, d8
 801a8c8:	486e      	ldr	r0, [pc, #440]	@ (801aa84 <_strtod_l+0xb1c>)
 801a8ca:	4970      	ldr	r1, [pc, #448]	@ (801aa8c <_strtod_l+0xb24>)
 801a8cc:	ea09 0700 	and.w	r7, r9, r0
 801a8d0:	428f      	cmp	r7, r1
 801a8d2:	ec53 2b1a 	vmov	r2, r3, d10
 801a8d6:	d17d      	bne.n	801a9d4 <_strtod_l+0xa6c>
 801a8d8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801a8dc:	ec4b ab1c 	vmov	d12, sl, fp
 801a8e0:	eeb0 0b4c 	vmov.f64	d0, d12
 801a8e4:	f7ff f9ea 	bl	8019cbc <__ulp>
 801a8e8:	4866      	ldr	r0, [pc, #408]	@ (801aa84 <_strtod_l+0xb1c>)
 801a8ea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801a8ee:	ee1c 3a90 	vmov	r3, s25
 801a8f2:	4a67      	ldr	r2, [pc, #412]	@ (801aa90 <_strtod_l+0xb28>)
 801a8f4:	ea03 0100 	and.w	r1, r3, r0
 801a8f8:	4291      	cmp	r1, r2
 801a8fa:	ec5b ab1c 	vmov	sl, fp, d12
 801a8fe:	d93c      	bls.n	801a97a <_strtod_l+0xa12>
 801a900:	ee19 2a90 	vmov	r2, s19
 801a904:	4b60      	ldr	r3, [pc, #384]	@ (801aa88 <_strtod_l+0xb20>)
 801a906:	429a      	cmp	r2, r3
 801a908:	d104      	bne.n	801a914 <_strtod_l+0x9ac>
 801a90a:	ee19 3a10 	vmov	r3, s18
 801a90e:	3301      	adds	r3, #1
 801a910:	f43f ad3a 	beq.w	801a388 <_strtod_l+0x420>
 801a914:	f8df b170 	ldr.w	fp, [pc, #368]	@ 801aa88 <_strtod_l+0xb20>
 801a918:	f04f 3aff 	mov.w	sl, #4294967295
 801a91c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a91e:	9805      	ldr	r0, [sp, #20]
 801a920:	f7fe fe98 	bl	8019654 <_Bfree>
 801a924:	9805      	ldr	r0, [sp, #20]
 801a926:	4631      	mov	r1, r6
 801a928:	f7fe fe94 	bl	8019654 <_Bfree>
 801a92c:	9805      	ldr	r0, [sp, #20]
 801a92e:	4629      	mov	r1, r5
 801a930:	f7fe fe90 	bl	8019654 <_Bfree>
 801a934:	9805      	ldr	r0, [sp, #20]
 801a936:	4621      	mov	r1, r4
 801a938:	f7fe fe8c 	bl	8019654 <_Bfree>
 801a93c:	e625      	b.n	801a58a <_strtod_l+0x622>
 801a93e:	f1ba 0f01 	cmp.w	sl, #1
 801a942:	d103      	bne.n	801a94c <_strtod_l+0x9e4>
 801a944:	f1bb 0f00 	cmp.w	fp, #0
 801a948:	f43f adb2 	beq.w	801a4b0 <_strtod_l+0x548>
 801a94c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 801a950:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801a954:	e7b8      	b.n	801a8c8 <_strtod_l+0x960>
 801a956:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801a95a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a95e:	f1b8 0f00 	cmp.w	r8, #0
 801a962:	d0af      	beq.n	801a8c4 <_strtod_l+0x95c>
 801a964:	eeb0 ab48 	vmov.f64	d10, d8
 801a968:	e7ae      	b.n	801a8c8 <_strtod_l+0x960>
 801a96a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801a96e:	eeb0 8b4a 	vmov.f64	d8, d10
 801a972:	e7a9      	b.n	801a8c8 <_strtod_l+0x960>
 801a974:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 801a978:	e7a6      	b.n	801a8c8 <_strtod_l+0x960>
 801a97a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a97e:	9b06      	ldr	r3, [sp, #24]
 801a980:	46d9      	mov	r9, fp
 801a982:	2b00      	cmp	r3, #0
 801a984:	d1ca      	bne.n	801a91c <_strtod_l+0x9b4>
 801a986:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a98a:	0d1b      	lsrs	r3, r3, #20
 801a98c:	051b      	lsls	r3, r3, #20
 801a98e:	429f      	cmp	r7, r3
 801a990:	d1c4      	bne.n	801a91c <_strtod_l+0x9b4>
 801a992:	ec51 0b18 	vmov	r0, r1, d8
 801a996:	f7e5 fee7 	bl	8000768 <__aeabi_d2lz>
 801a99a:	f7e5 fe9f 	bl	80006dc <__aeabi_l2d>
 801a99e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801a9a2:	ec41 0b17 	vmov	d7, r0, r1
 801a9a6:	ea49 090a 	orr.w	r9, r9, sl
 801a9aa:	ea59 0908 	orrs.w	r9, r9, r8
 801a9ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 801a9b2:	d03c      	beq.n	801aa2e <_strtod_l+0xac6>
 801a9b4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801aa68 <_strtod_l+0xb00>
 801a9b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9c0:	f53f aced 	bmi.w	801a39e <_strtod_l+0x436>
 801a9c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801aa70 <_strtod_l+0xb08>
 801a9c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9d0:	dda4      	ble.n	801a91c <_strtod_l+0x9b4>
 801a9d2:	e4e4      	b.n	801a39e <_strtod_l+0x436>
 801a9d4:	9906      	ldr	r1, [sp, #24]
 801a9d6:	b1e1      	cbz	r1, 801aa12 <_strtod_l+0xaaa>
 801a9d8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801a9dc:	d819      	bhi.n	801aa12 <_strtod_l+0xaaa>
 801a9de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801a9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e6:	d811      	bhi.n	801aa0c <_strtod_l+0xaa4>
 801a9e8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801a9ec:	ee18 3a10 	vmov	r3, s16
 801a9f0:	2b01      	cmp	r3, #1
 801a9f2:	bf38      	it	cc
 801a9f4:	2301      	movcc	r3, #1
 801a9f6:	ee08 3a10 	vmov	s16, r3
 801a9fa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801a9fe:	f1b8 0f00 	cmp.w	r8, #0
 801aa02:	d111      	bne.n	801aa28 <_strtod_l+0xac0>
 801aa04:	eeb1 7b48 	vneg.f64	d7, d8
 801aa08:	ec53 2b17 	vmov	r2, r3, d7
 801aa0c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 801aa10:	1bcb      	subs	r3, r1, r7
 801aa12:	eeb0 0b49 	vmov.f64	d0, d9
 801aa16:	ec43 2b1a 	vmov	d10, r2, r3
 801aa1a:	f7ff f94f 	bl	8019cbc <__ulp>
 801aa1e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801aa22:	ec5b ab19 	vmov	sl, fp, d9
 801aa26:	e7aa      	b.n	801a97e <_strtod_l+0xa16>
 801aa28:	eeb0 7b48 	vmov.f64	d7, d8
 801aa2c:	e7ec      	b.n	801aa08 <_strtod_l+0xaa0>
 801aa2e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801aa78 <_strtod_l+0xb10>
 801aa32:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801aa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa3a:	f57f af6f 	bpl.w	801a91c <_strtod_l+0x9b4>
 801aa3e:	e4ae      	b.n	801a39e <_strtod_l+0x436>
 801aa40:	2300      	movs	r3, #0
 801aa42:	9308      	str	r3, [sp, #32]
 801aa44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aa46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aa48:	6013      	str	r3, [r2, #0]
 801aa4a:	f7ff bacc 	b.w	8019fe6 <_strtod_l+0x7e>
 801aa4e:	2a65      	cmp	r2, #101	@ 0x65
 801aa50:	f43f abbc 	beq.w	801a1cc <_strtod_l+0x264>
 801aa54:	2a45      	cmp	r2, #69	@ 0x45
 801aa56:	f43f abb9 	beq.w	801a1cc <_strtod_l+0x264>
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	9306      	str	r3, [sp, #24]
 801aa5e:	f7ff bbf0 	b.w	801a242 <_strtod_l+0x2da>
 801aa62:	bf00      	nop
 801aa64:	f3af 8000 	nop.w
 801aa68:	94a03595 	.word	0x94a03595
 801aa6c:	3fdfffff 	.word	0x3fdfffff
 801aa70:	35afe535 	.word	0x35afe535
 801aa74:	3fe00000 	.word	0x3fe00000
 801aa78:	94a03595 	.word	0x94a03595
 801aa7c:	3fcfffff 	.word	0x3fcfffff
 801aa80:	000fffff 	.word	0x000fffff
 801aa84:	7ff00000 	.word	0x7ff00000
 801aa88:	7fefffff 	.word	0x7fefffff
 801aa8c:	7fe00000 	.word	0x7fe00000
 801aa90:	7c9fffff 	.word	0x7c9fffff

0801aa94 <_strtod_r>:
 801aa94:	4b01      	ldr	r3, [pc, #4]	@ (801aa9c <_strtod_r+0x8>)
 801aa96:	f7ff ba67 	b.w	8019f68 <_strtod_l>
 801aa9a:	bf00      	nop
 801aa9c:	240001b8 	.word	0x240001b8

0801aaa0 <_strtol_l.constprop.0>:
 801aaa0:	2b24      	cmp	r3, #36	@ 0x24
 801aaa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaa6:	4686      	mov	lr, r0
 801aaa8:	4690      	mov	r8, r2
 801aaaa:	d801      	bhi.n	801aab0 <_strtol_l.constprop.0+0x10>
 801aaac:	2b01      	cmp	r3, #1
 801aaae:	d106      	bne.n	801aabe <_strtol_l.constprop.0+0x1e>
 801aab0:	f7fd fe6e 	bl	8018790 <__errno>
 801aab4:	2316      	movs	r3, #22
 801aab6:	6003      	str	r3, [r0, #0]
 801aab8:	2000      	movs	r0, #0
 801aaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aabe:	4834      	ldr	r0, [pc, #208]	@ (801ab90 <_strtol_l.constprop.0+0xf0>)
 801aac0:	460d      	mov	r5, r1
 801aac2:	462a      	mov	r2, r5
 801aac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aac8:	5d06      	ldrb	r6, [r0, r4]
 801aaca:	f016 0608 	ands.w	r6, r6, #8
 801aace:	d1f8      	bne.n	801aac2 <_strtol_l.constprop.0+0x22>
 801aad0:	2c2d      	cmp	r4, #45	@ 0x2d
 801aad2:	d12d      	bne.n	801ab30 <_strtol_l.constprop.0+0x90>
 801aad4:	782c      	ldrb	r4, [r5, #0]
 801aad6:	2601      	movs	r6, #1
 801aad8:	1c95      	adds	r5, r2, #2
 801aada:	f033 0210 	bics.w	r2, r3, #16
 801aade:	d109      	bne.n	801aaf4 <_strtol_l.constprop.0+0x54>
 801aae0:	2c30      	cmp	r4, #48	@ 0x30
 801aae2:	d12a      	bne.n	801ab3a <_strtol_l.constprop.0+0x9a>
 801aae4:	782a      	ldrb	r2, [r5, #0]
 801aae6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801aaea:	2a58      	cmp	r2, #88	@ 0x58
 801aaec:	d125      	bne.n	801ab3a <_strtol_l.constprop.0+0x9a>
 801aaee:	786c      	ldrb	r4, [r5, #1]
 801aaf0:	2310      	movs	r3, #16
 801aaf2:	3502      	adds	r5, #2
 801aaf4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801aaf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aafc:	2200      	movs	r2, #0
 801aafe:	fbbc f9f3 	udiv	r9, ip, r3
 801ab02:	4610      	mov	r0, r2
 801ab04:	fb03 ca19 	mls	sl, r3, r9, ip
 801ab08:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ab0c:	2f09      	cmp	r7, #9
 801ab0e:	d81b      	bhi.n	801ab48 <_strtol_l.constprop.0+0xa8>
 801ab10:	463c      	mov	r4, r7
 801ab12:	42a3      	cmp	r3, r4
 801ab14:	dd27      	ble.n	801ab66 <_strtol_l.constprop.0+0xc6>
 801ab16:	1c57      	adds	r7, r2, #1
 801ab18:	d007      	beq.n	801ab2a <_strtol_l.constprop.0+0x8a>
 801ab1a:	4581      	cmp	r9, r0
 801ab1c:	d320      	bcc.n	801ab60 <_strtol_l.constprop.0+0xc0>
 801ab1e:	d101      	bne.n	801ab24 <_strtol_l.constprop.0+0x84>
 801ab20:	45a2      	cmp	sl, r4
 801ab22:	db1d      	blt.n	801ab60 <_strtol_l.constprop.0+0xc0>
 801ab24:	fb00 4003 	mla	r0, r0, r3, r4
 801ab28:	2201      	movs	r2, #1
 801ab2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ab2e:	e7eb      	b.n	801ab08 <_strtol_l.constprop.0+0x68>
 801ab30:	2c2b      	cmp	r4, #43	@ 0x2b
 801ab32:	bf04      	itt	eq
 801ab34:	782c      	ldrbeq	r4, [r5, #0]
 801ab36:	1c95      	addeq	r5, r2, #2
 801ab38:	e7cf      	b.n	801aada <_strtol_l.constprop.0+0x3a>
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d1da      	bne.n	801aaf4 <_strtol_l.constprop.0+0x54>
 801ab3e:	2c30      	cmp	r4, #48	@ 0x30
 801ab40:	bf0c      	ite	eq
 801ab42:	2308      	moveq	r3, #8
 801ab44:	230a      	movne	r3, #10
 801ab46:	e7d5      	b.n	801aaf4 <_strtol_l.constprop.0+0x54>
 801ab48:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ab4c:	2f19      	cmp	r7, #25
 801ab4e:	d801      	bhi.n	801ab54 <_strtol_l.constprop.0+0xb4>
 801ab50:	3c37      	subs	r4, #55	@ 0x37
 801ab52:	e7de      	b.n	801ab12 <_strtol_l.constprop.0+0x72>
 801ab54:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801ab58:	2f19      	cmp	r7, #25
 801ab5a:	d804      	bhi.n	801ab66 <_strtol_l.constprop.0+0xc6>
 801ab5c:	3c57      	subs	r4, #87	@ 0x57
 801ab5e:	e7d8      	b.n	801ab12 <_strtol_l.constprop.0+0x72>
 801ab60:	f04f 32ff 	mov.w	r2, #4294967295
 801ab64:	e7e1      	b.n	801ab2a <_strtol_l.constprop.0+0x8a>
 801ab66:	1c53      	adds	r3, r2, #1
 801ab68:	d108      	bne.n	801ab7c <_strtol_l.constprop.0+0xdc>
 801ab6a:	2322      	movs	r3, #34	@ 0x22
 801ab6c:	f8ce 3000 	str.w	r3, [lr]
 801ab70:	4660      	mov	r0, ip
 801ab72:	f1b8 0f00 	cmp.w	r8, #0
 801ab76:	d0a0      	beq.n	801aaba <_strtol_l.constprop.0+0x1a>
 801ab78:	1e69      	subs	r1, r5, #1
 801ab7a:	e006      	b.n	801ab8a <_strtol_l.constprop.0+0xea>
 801ab7c:	b106      	cbz	r6, 801ab80 <_strtol_l.constprop.0+0xe0>
 801ab7e:	4240      	negs	r0, r0
 801ab80:	f1b8 0f00 	cmp.w	r8, #0
 801ab84:	d099      	beq.n	801aaba <_strtol_l.constprop.0+0x1a>
 801ab86:	2a00      	cmp	r2, #0
 801ab88:	d1f6      	bne.n	801ab78 <_strtol_l.constprop.0+0xd8>
 801ab8a:	f8c8 1000 	str.w	r1, [r8]
 801ab8e:	e794      	b.n	801aaba <_strtol_l.constprop.0+0x1a>
 801ab90:	0801cde9 	.word	0x0801cde9

0801ab94 <_strtol_r>:
 801ab94:	f7ff bf84 	b.w	801aaa0 <_strtol_l.constprop.0>

0801ab98 <__ssputs_r>:
 801ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab9c:	688e      	ldr	r6, [r1, #8]
 801ab9e:	461f      	mov	r7, r3
 801aba0:	42be      	cmp	r6, r7
 801aba2:	680b      	ldr	r3, [r1, #0]
 801aba4:	4682      	mov	sl, r0
 801aba6:	460c      	mov	r4, r1
 801aba8:	4690      	mov	r8, r2
 801abaa:	d82d      	bhi.n	801ac08 <__ssputs_r+0x70>
 801abac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801abb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801abb4:	d026      	beq.n	801ac04 <__ssputs_r+0x6c>
 801abb6:	6965      	ldr	r5, [r4, #20]
 801abb8:	6909      	ldr	r1, [r1, #16]
 801abba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801abbe:	eba3 0901 	sub.w	r9, r3, r1
 801abc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801abc6:	1c7b      	adds	r3, r7, #1
 801abc8:	444b      	add	r3, r9
 801abca:	106d      	asrs	r5, r5, #1
 801abcc:	429d      	cmp	r5, r3
 801abce:	bf38      	it	cc
 801abd0:	461d      	movcc	r5, r3
 801abd2:	0553      	lsls	r3, r2, #21
 801abd4:	d527      	bpl.n	801ac26 <__ssputs_r+0x8e>
 801abd6:	4629      	mov	r1, r5
 801abd8:	f7fe fc70 	bl	80194bc <_malloc_r>
 801abdc:	4606      	mov	r6, r0
 801abde:	b360      	cbz	r0, 801ac3a <__ssputs_r+0xa2>
 801abe0:	6921      	ldr	r1, [r4, #16]
 801abe2:	464a      	mov	r2, r9
 801abe4:	f7fd fe01 	bl	80187ea <memcpy>
 801abe8:	89a3      	ldrh	r3, [r4, #12]
 801abea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801abee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801abf2:	81a3      	strh	r3, [r4, #12]
 801abf4:	6126      	str	r6, [r4, #16]
 801abf6:	6165      	str	r5, [r4, #20]
 801abf8:	444e      	add	r6, r9
 801abfa:	eba5 0509 	sub.w	r5, r5, r9
 801abfe:	6026      	str	r6, [r4, #0]
 801ac00:	60a5      	str	r5, [r4, #8]
 801ac02:	463e      	mov	r6, r7
 801ac04:	42be      	cmp	r6, r7
 801ac06:	d900      	bls.n	801ac0a <__ssputs_r+0x72>
 801ac08:	463e      	mov	r6, r7
 801ac0a:	6820      	ldr	r0, [r4, #0]
 801ac0c:	4632      	mov	r2, r6
 801ac0e:	4641      	mov	r1, r8
 801ac10:	f000 fb6a 	bl	801b2e8 <memmove>
 801ac14:	68a3      	ldr	r3, [r4, #8]
 801ac16:	1b9b      	subs	r3, r3, r6
 801ac18:	60a3      	str	r3, [r4, #8]
 801ac1a:	6823      	ldr	r3, [r4, #0]
 801ac1c:	4433      	add	r3, r6
 801ac1e:	6023      	str	r3, [r4, #0]
 801ac20:	2000      	movs	r0, #0
 801ac22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac26:	462a      	mov	r2, r5
 801ac28:	f000 ff43 	bl	801bab2 <_realloc_r>
 801ac2c:	4606      	mov	r6, r0
 801ac2e:	2800      	cmp	r0, #0
 801ac30:	d1e0      	bne.n	801abf4 <__ssputs_r+0x5c>
 801ac32:	6921      	ldr	r1, [r4, #16]
 801ac34:	4650      	mov	r0, sl
 801ac36:	f7fe fbcd 	bl	80193d4 <_free_r>
 801ac3a:	230c      	movs	r3, #12
 801ac3c:	f8ca 3000 	str.w	r3, [sl]
 801ac40:	89a3      	ldrh	r3, [r4, #12]
 801ac42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ac46:	81a3      	strh	r3, [r4, #12]
 801ac48:	f04f 30ff 	mov.w	r0, #4294967295
 801ac4c:	e7e9      	b.n	801ac22 <__ssputs_r+0x8a>
	...

0801ac50 <_svfiprintf_r>:
 801ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac54:	4698      	mov	r8, r3
 801ac56:	898b      	ldrh	r3, [r1, #12]
 801ac58:	061b      	lsls	r3, r3, #24
 801ac5a:	b09d      	sub	sp, #116	@ 0x74
 801ac5c:	4607      	mov	r7, r0
 801ac5e:	460d      	mov	r5, r1
 801ac60:	4614      	mov	r4, r2
 801ac62:	d510      	bpl.n	801ac86 <_svfiprintf_r+0x36>
 801ac64:	690b      	ldr	r3, [r1, #16]
 801ac66:	b973      	cbnz	r3, 801ac86 <_svfiprintf_r+0x36>
 801ac68:	2140      	movs	r1, #64	@ 0x40
 801ac6a:	f7fe fc27 	bl	80194bc <_malloc_r>
 801ac6e:	6028      	str	r0, [r5, #0]
 801ac70:	6128      	str	r0, [r5, #16]
 801ac72:	b930      	cbnz	r0, 801ac82 <_svfiprintf_r+0x32>
 801ac74:	230c      	movs	r3, #12
 801ac76:	603b      	str	r3, [r7, #0]
 801ac78:	f04f 30ff 	mov.w	r0, #4294967295
 801ac7c:	b01d      	add	sp, #116	@ 0x74
 801ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac82:	2340      	movs	r3, #64	@ 0x40
 801ac84:	616b      	str	r3, [r5, #20]
 801ac86:	2300      	movs	r3, #0
 801ac88:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac8a:	2320      	movs	r3, #32
 801ac8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ac90:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac94:	2330      	movs	r3, #48	@ 0x30
 801ac96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ae34 <_svfiprintf_r+0x1e4>
 801ac9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ac9e:	f04f 0901 	mov.w	r9, #1
 801aca2:	4623      	mov	r3, r4
 801aca4:	469a      	mov	sl, r3
 801aca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801acaa:	b10a      	cbz	r2, 801acb0 <_svfiprintf_r+0x60>
 801acac:	2a25      	cmp	r2, #37	@ 0x25
 801acae:	d1f9      	bne.n	801aca4 <_svfiprintf_r+0x54>
 801acb0:	ebba 0b04 	subs.w	fp, sl, r4
 801acb4:	d00b      	beq.n	801acce <_svfiprintf_r+0x7e>
 801acb6:	465b      	mov	r3, fp
 801acb8:	4622      	mov	r2, r4
 801acba:	4629      	mov	r1, r5
 801acbc:	4638      	mov	r0, r7
 801acbe:	f7ff ff6b 	bl	801ab98 <__ssputs_r>
 801acc2:	3001      	adds	r0, #1
 801acc4:	f000 80a7 	beq.w	801ae16 <_svfiprintf_r+0x1c6>
 801acc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801acca:	445a      	add	r2, fp
 801accc:	9209      	str	r2, [sp, #36]	@ 0x24
 801acce:	f89a 3000 	ldrb.w	r3, [sl]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	f000 809f 	beq.w	801ae16 <_svfiprintf_r+0x1c6>
 801acd8:	2300      	movs	r3, #0
 801acda:	f04f 32ff 	mov.w	r2, #4294967295
 801acde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ace2:	f10a 0a01 	add.w	sl, sl, #1
 801ace6:	9304      	str	r3, [sp, #16]
 801ace8:	9307      	str	r3, [sp, #28]
 801acea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801acee:	931a      	str	r3, [sp, #104]	@ 0x68
 801acf0:	4654      	mov	r4, sl
 801acf2:	2205      	movs	r2, #5
 801acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acf8:	484e      	ldr	r0, [pc, #312]	@ (801ae34 <_svfiprintf_r+0x1e4>)
 801acfa:	f7e5 fb09 	bl	8000310 <memchr>
 801acfe:	9a04      	ldr	r2, [sp, #16]
 801ad00:	b9d8      	cbnz	r0, 801ad3a <_svfiprintf_r+0xea>
 801ad02:	06d0      	lsls	r0, r2, #27
 801ad04:	bf44      	itt	mi
 801ad06:	2320      	movmi	r3, #32
 801ad08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad0c:	0711      	lsls	r1, r2, #28
 801ad0e:	bf44      	itt	mi
 801ad10:	232b      	movmi	r3, #43	@ 0x2b
 801ad12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad16:	f89a 3000 	ldrb.w	r3, [sl]
 801ad1a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad1c:	d015      	beq.n	801ad4a <_svfiprintf_r+0xfa>
 801ad1e:	9a07      	ldr	r2, [sp, #28]
 801ad20:	4654      	mov	r4, sl
 801ad22:	2000      	movs	r0, #0
 801ad24:	f04f 0c0a 	mov.w	ip, #10
 801ad28:	4621      	mov	r1, r4
 801ad2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad2e:	3b30      	subs	r3, #48	@ 0x30
 801ad30:	2b09      	cmp	r3, #9
 801ad32:	d94b      	bls.n	801adcc <_svfiprintf_r+0x17c>
 801ad34:	b1b0      	cbz	r0, 801ad64 <_svfiprintf_r+0x114>
 801ad36:	9207      	str	r2, [sp, #28]
 801ad38:	e014      	b.n	801ad64 <_svfiprintf_r+0x114>
 801ad3a:	eba0 0308 	sub.w	r3, r0, r8
 801ad3e:	fa09 f303 	lsl.w	r3, r9, r3
 801ad42:	4313      	orrs	r3, r2
 801ad44:	9304      	str	r3, [sp, #16]
 801ad46:	46a2      	mov	sl, r4
 801ad48:	e7d2      	b.n	801acf0 <_svfiprintf_r+0xa0>
 801ad4a:	9b03      	ldr	r3, [sp, #12]
 801ad4c:	1d19      	adds	r1, r3, #4
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	9103      	str	r1, [sp, #12]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	bfbb      	ittet	lt
 801ad56:	425b      	neglt	r3, r3
 801ad58:	f042 0202 	orrlt.w	r2, r2, #2
 801ad5c:	9307      	strge	r3, [sp, #28]
 801ad5e:	9307      	strlt	r3, [sp, #28]
 801ad60:	bfb8      	it	lt
 801ad62:	9204      	strlt	r2, [sp, #16]
 801ad64:	7823      	ldrb	r3, [r4, #0]
 801ad66:	2b2e      	cmp	r3, #46	@ 0x2e
 801ad68:	d10a      	bne.n	801ad80 <_svfiprintf_r+0x130>
 801ad6a:	7863      	ldrb	r3, [r4, #1]
 801ad6c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad6e:	d132      	bne.n	801add6 <_svfiprintf_r+0x186>
 801ad70:	9b03      	ldr	r3, [sp, #12]
 801ad72:	1d1a      	adds	r2, r3, #4
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	9203      	str	r2, [sp, #12]
 801ad78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ad7c:	3402      	adds	r4, #2
 801ad7e:	9305      	str	r3, [sp, #20]
 801ad80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ae44 <_svfiprintf_r+0x1f4>
 801ad84:	7821      	ldrb	r1, [r4, #0]
 801ad86:	2203      	movs	r2, #3
 801ad88:	4650      	mov	r0, sl
 801ad8a:	f7e5 fac1 	bl	8000310 <memchr>
 801ad8e:	b138      	cbz	r0, 801ada0 <_svfiprintf_r+0x150>
 801ad90:	9b04      	ldr	r3, [sp, #16]
 801ad92:	eba0 000a 	sub.w	r0, r0, sl
 801ad96:	2240      	movs	r2, #64	@ 0x40
 801ad98:	4082      	lsls	r2, r0
 801ad9a:	4313      	orrs	r3, r2
 801ad9c:	3401      	adds	r4, #1
 801ad9e:	9304      	str	r3, [sp, #16]
 801ada0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ada4:	4824      	ldr	r0, [pc, #144]	@ (801ae38 <_svfiprintf_r+0x1e8>)
 801ada6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801adaa:	2206      	movs	r2, #6
 801adac:	f7e5 fab0 	bl	8000310 <memchr>
 801adb0:	2800      	cmp	r0, #0
 801adb2:	d036      	beq.n	801ae22 <_svfiprintf_r+0x1d2>
 801adb4:	4b21      	ldr	r3, [pc, #132]	@ (801ae3c <_svfiprintf_r+0x1ec>)
 801adb6:	bb1b      	cbnz	r3, 801ae00 <_svfiprintf_r+0x1b0>
 801adb8:	9b03      	ldr	r3, [sp, #12]
 801adba:	3307      	adds	r3, #7
 801adbc:	f023 0307 	bic.w	r3, r3, #7
 801adc0:	3308      	adds	r3, #8
 801adc2:	9303      	str	r3, [sp, #12]
 801adc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adc6:	4433      	add	r3, r6
 801adc8:	9309      	str	r3, [sp, #36]	@ 0x24
 801adca:	e76a      	b.n	801aca2 <_svfiprintf_r+0x52>
 801adcc:	fb0c 3202 	mla	r2, ip, r2, r3
 801add0:	460c      	mov	r4, r1
 801add2:	2001      	movs	r0, #1
 801add4:	e7a8      	b.n	801ad28 <_svfiprintf_r+0xd8>
 801add6:	2300      	movs	r3, #0
 801add8:	3401      	adds	r4, #1
 801adda:	9305      	str	r3, [sp, #20]
 801addc:	4619      	mov	r1, r3
 801adde:	f04f 0c0a 	mov.w	ip, #10
 801ade2:	4620      	mov	r0, r4
 801ade4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ade8:	3a30      	subs	r2, #48	@ 0x30
 801adea:	2a09      	cmp	r2, #9
 801adec:	d903      	bls.n	801adf6 <_svfiprintf_r+0x1a6>
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d0c6      	beq.n	801ad80 <_svfiprintf_r+0x130>
 801adf2:	9105      	str	r1, [sp, #20]
 801adf4:	e7c4      	b.n	801ad80 <_svfiprintf_r+0x130>
 801adf6:	fb0c 2101 	mla	r1, ip, r1, r2
 801adfa:	4604      	mov	r4, r0
 801adfc:	2301      	movs	r3, #1
 801adfe:	e7f0      	b.n	801ade2 <_svfiprintf_r+0x192>
 801ae00:	ab03      	add	r3, sp, #12
 801ae02:	9300      	str	r3, [sp, #0]
 801ae04:	462a      	mov	r2, r5
 801ae06:	4b0e      	ldr	r3, [pc, #56]	@ (801ae40 <_svfiprintf_r+0x1f0>)
 801ae08:	a904      	add	r1, sp, #16
 801ae0a:	4638      	mov	r0, r7
 801ae0c:	f7fc fc58 	bl	80176c0 <_printf_float>
 801ae10:	1c42      	adds	r2, r0, #1
 801ae12:	4606      	mov	r6, r0
 801ae14:	d1d6      	bne.n	801adc4 <_svfiprintf_r+0x174>
 801ae16:	89ab      	ldrh	r3, [r5, #12]
 801ae18:	065b      	lsls	r3, r3, #25
 801ae1a:	f53f af2d 	bmi.w	801ac78 <_svfiprintf_r+0x28>
 801ae1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ae20:	e72c      	b.n	801ac7c <_svfiprintf_r+0x2c>
 801ae22:	ab03      	add	r3, sp, #12
 801ae24:	9300      	str	r3, [sp, #0]
 801ae26:	462a      	mov	r2, r5
 801ae28:	4b05      	ldr	r3, [pc, #20]	@ (801ae40 <_svfiprintf_r+0x1f0>)
 801ae2a:	a904      	add	r1, sp, #16
 801ae2c:	4638      	mov	r0, r7
 801ae2e:	f7fc fecf 	bl	8017bd0 <_printf_i>
 801ae32:	e7ed      	b.n	801ae10 <_svfiprintf_r+0x1c0>
 801ae34:	0801cee9 	.word	0x0801cee9
 801ae38:	0801cef3 	.word	0x0801cef3
 801ae3c:	080176c1 	.word	0x080176c1
 801ae40:	0801ab99 	.word	0x0801ab99
 801ae44:	0801ceef 	.word	0x0801ceef

0801ae48 <__sfputc_r>:
 801ae48:	6893      	ldr	r3, [r2, #8]
 801ae4a:	3b01      	subs	r3, #1
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	b410      	push	{r4}
 801ae50:	6093      	str	r3, [r2, #8]
 801ae52:	da08      	bge.n	801ae66 <__sfputc_r+0x1e>
 801ae54:	6994      	ldr	r4, [r2, #24]
 801ae56:	42a3      	cmp	r3, r4
 801ae58:	db01      	blt.n	801ae5e <__sfputc_r+0x16>
 801ae5a:	290a      	cmp	r1, #10
 801ae5c:	d103      	bne.n	801ae66 <__sfputc_r+0x1e>
 801ae5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae62:	f7fd bbaf 	b.w	80185c4 <__swbuf_r>
 801ae66:	6813      	ldr	r3, [r2, #0]
 801ae68:	1c58      	adds	r0, r3, #1
 801ae6a:	6010      	str	r0, [r2, #0]
 801ae6c:	7019      	strb	r1, [r3, #0]
 801ae6e:	4608      	mov	r0, r1
 801ae70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae74:	4770      	bx	lr

0801ae76 <__sfputs_r>:
 801ae76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae78:	4606      	mov	r6, r0
 801ae7a:	460f      	mov	r7, r1
 801ae7c:	4614      	mov	r4, r2
 801ae7e:	18d5      	adds	r5, r2, r3
 801ae80:	42ac      	cmp	r4, r5
 801ae82:	d101      	bne.n	801ae88 <__sfputs_r+0x12>
 801ae84:	2000      	movs	r0, #0
 801ae86:	e007      	b.n	801ae98 <__sfputs_r+0x22>
 801ae88:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae8c:	463a      	mov	r2, r7
 801ae8e:	4630      	mov	r0, r6
 801ae90:	f7ff ffda 	bl	801ae48 <__sfputc_r>
 801ae94:	1c43      	adds	r3, r0, #1
 801ae96:	d1f3      	bne.n	801ae80 <__sfputs_r+0xa>
 801ae98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ae9c <_vfiprintf_r>:
 801ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea0:	460d      	mov	r5, r1
 801aea2:	b09d      	sub	sp, #116	@ 0x74
 801aea4:	4614      	mov	r4, r2
 801aea6:	4698      	mov	r8, r3
 801aea8:	4606      	mov	r6, r0
 801aeaa:	b118      	cbz	r0, 801aeb4 <_vfiprintf_r+0x18>
 801aeac:	6a03      	ldr	r3, [r0, #32]
 801aeae:	b90b      	cbnz	r3, 801aeb4 <_vfiprintf_r+0x18>
 801aeb0:	f7fd fa46 	bl	8018340 <__sinit>
 801aeb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aeb6:	07d9      	lsls	r1, r3, #31
 801aeb8:	d405      	bmi.n	801aec6 <_vfiprintf_r+0x2a>
 801aeba:	89ab      	ldrh	r3, [r5, #12]
 801aebc:	059a      	lsls	r2, r3, #22
 801aebe:	d402      	bmi.n	801aec6 <_vfiprintf_r+0x2a>
 801aec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aec2:	f7fd fc90 	bl	80187e6 <__retarget_lock_acquire_recursive>
 801aec6:	89ab      	ldrh	r3, [r5, #12]
 801aec8:	071b      	lsls	r3, r3, #28
 801aeca:	d501      	bpl.n	801aed0 <_vfiprintf_r+0x34>
 801aecc:	692b      	ldr	r3, [r5, #16]
 801aece:	b99b      	cbnz	r3, 801aef8 <_vfiprintf_r+0x5c>
 801aed0:	4629      	mov	r1, r5
 801aed2:	4630      	mov	r0, r6
 801aed4:	f7fd fbb4 	bl	8018640 <__swsetup_r>
 801aed8:	b170      	cbz	r0, 801aef8 <_vfiprintf_r+0x5c>
 801aeda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aedc:	07dc      	lsls	r4, r3, #31
 801aede:	d504      	bpl.n	801aeea <_vfiprintf_r+0x4e>
 801aee0:	f04f 30ff 	mov.w	r0, #4294967295
 801aee4:	b01d      	add	sp, #116	@ 0x74
 801aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeea:	89ab      	ldrh	r3, [r5, #12]
 801aeec:	0598      	lsls	r0, r3, #22
 801aeee:	d4f7      	bmi.n	801aee0 <_vfiprintf_r+0x44>
 801aef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aef2:	f7fd fc79 	bl	80187e8 <__retarget_lock_release_recursive>
 801aef6:	e7f3      	b.n	801aee0 <_vfiprintf_r+0x44>
 801aef8:	2300      	movs	r3, #0
 801aefa:	9309      	str	r3, [sp, #36]	@ 0x24
 801aefc:	2320      	movs	r3, #32
 801aefe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801af02:	f8cd 800c 	str.w	r8, [sp, #12]
 801af06:	2330      	movs	r3, #48	@ 0x30
 801af08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b0b8 <_vfiprintf_r+0x21c>
 801af0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801af10:	f04f 0901 	mov.w	r9, #1
 801af14:	4623      	mov	r3, r4
 801af16:	469a      	mov	sl, r3
 801af18:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af1c:	b10a      	cbz	r2, 801af22 <_vfiprintf_r+0x86>
 801af1e:	2a25      	cmp	r2, #37	@ 0x25
 801af20:	d1f9      	bne.n	801af16 <_vfiprintf_r+0x7a>
 801af22:	ebba 0b04 	subs.w	fp, sl, r4
 801af26:	d00b      	beq.n	801af40 <_vfiprintf_r+0xa4>
 801af28:	465b      	mov	r3, fp
 801af2a:	4622      	mov	r2, r4
 801af2c:	4629      	mov	r1, r5
 801af2e:	4630      	mov	r0, r6
 801af30:	f7ff ffa1 	bl	801ae76 <__sfputs_r>
 801af34:	3001      	adds	r0, #1
 801af36:	f000 80a7 	beq.w	801b088 <_vfiprintf_r+0x1ec>
 801af3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af3c:	445a      	add	r2, fp
 801af3e:	9209      	str	r2, [sp, #36]	@ 0x24
 801af40:	f89a 3000 	ldrb.w	r3, [sl]
 801af44:	2b00      	cmp	r3, #0
 801af46:	f000 809f 	beq.w	801b088 <_vfiprintf_r+0x1ec>
 801af4a:	2300      	movs	r3, #0
 801af4c:	f04f 32ff 	mov.w	r2, #4294967295
 801af50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af54:	f10a 0a01 	add.w	sl, sl, #1
 801af58:	9304      	str	r3, [sp, #16]
 801af5a:	9307      	str	r3, [sp, #28]
 801af5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801af60:	931a      	str	r3, [sp, #104]	@ 0x68
 801af62:	4654      	mov	r4, sl
 801af64:	2205      	movs	r2, #5
 801af66:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af6a:	4853      	ldr	r0, [pc, #332]	@ (801b0b8 <_vfiprintf_r+0x21c>)
 801af6c:	f7e5 f9d0 	bl	8000310 <memchr>
 801af70:	9a04      	ldr	r2, [sp, #16]
 801af72:	b9d8      	cbnz	r0, 801afac <_vfiprintf_r+0x110>
 801af74:	06d1      	lsls	r1, r2, #27
 801af76:	bf44      	itt	mi
 801af78:	2320      	movmi	r3, #32
 801af7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af7e:	0713      	lsls	r3, r2, #28
 801af80:	bf44      	itt	mi
 801af82:	232b      	movmi	r3, #43	@ 0x2b
 801af84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af88:	f89a 3000 	ldrb.w	r3, [sl]
 801af8c:	2b2a      	cmp	r3, #42	@ 0x2a
 801af8e:	d015      	beq.n	801afbc <_vfiprintf_r+0x120>
 801af90:	9a07      	ldr	r2, [sp, #28]
 801af92:	4654      	mov	r4, sl
 801af94:	2000      	movs	r0, #0
 801af96:	f04f 0c0a 	mov.w	ip, #10
 801af9a:	4621      	mov	r1, r4
 801af9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801afa0:	3b30      	subs	r3, #48	@ 0x30
 801afa2:	2b09      	cmp	r3, #9
 801afa4:	d94b      	bls.n	801b03e <_vfiprintf_r+0x1a2>
 801afa6:	b1b0      	cbz	r0, 801afd6 <_vfiprintf_r+0x13a>
 801afa8:	9207      	str	r2, [sp, #28]
 801afaa:	e014      	b.n	801afd6 <_vfiprintf_r+0x13a>
 801afac:	eba0 0308 	sub.w	r3, r0, r8
 801afb0:	fa09 f303 	lsl.w	r3, r9, r3
 801afb4:	4313      	orrs	r3, r2
 801afb6:	9304      	str	r3, [sp, #16]
 801afb8:	46a2      	mov	sl, r4
 801afba:	e7d2      	b.n	801af62 <_vfiprintf_r+0xc6>
 801afbc:	9b03      	ldr	r3, [sp, #12]
 801afbe:	1d19      	adds	r1, r3, #4
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	9103      	str	r1, [sp, #12]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	bfbb      	ittet	lt
 801afc8:	425b      	neglt	r3, r3
 801afca:	f042 0202 	orrlt.w	r2, r2, #2
 801afce:	9307      	strge	r3, [sp, #28]
 801afd0:	9307      	strlt	r3, [sp, #28]
 801afd2:	bfb8      	it	lt
 801afd4:	9204      	strlt	r2, [sp, #16]
 801afd6:	7823      	ldrb	r3, [r4, #0]
 801afd8:	2b2e      	cmp	r3, #46	@ 0x2e
 801afda:	d10a      	bne.n	801aff2 <_vfiprintf_r+0x156>
 801afdc:	7863      	ldrb	r3, [r4, #1]
 801afde:	2b2a      	cmp	r3, #42	@ 0x2a
 801afe0:	d132      	bne.n	801b048 <_vfiprintf_r+0x1ac>
 801afe2:	9b03      	ldr	r3, [sp, #12]
 801afe4:	1d1a      	adds	r2, r3, #4
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	9203      	str	r2, [sp, #12]
 801afea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801afee:	3402      	adds	r4, #2
 801aff0:	9305      	str	r3, [sp, #20]
 801aff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b0c8 <_vfiprintf_r+0x22c>
 801aff6:	7821      	ldrb	r1, [r4, #0]
 801aff8:	2203      	movs	r2, #3
 801affa:	4650      	mov	r0, sl
 801affc:	f7e5 f988 	bl	8000310 <memchr>
 801b000:	b138      	cbz	r0, 801b012 <_vfiprintf_r+0x176>
 801b002:	9b04      	ldr	r3, [sp, #16]
 801b004:	eba0 000a 	sub.w	r0, r0, sl
 801b008:	2240      	movs	r2, #64	@ 0x40
 801b00a:	4082      	lsls	r2, r0
 801b00c:	4313      	orrs	r3, r2
 801b00e:	3401      	adds	r4, #1
 801b010:	9304      	str	r3, [sp, #16]
 801b012:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b016:	4829      	ldr	r0, [pc, #164]	@ (801b0bc <_vfiprintf_r+0x220>)
 801b018:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b01c:	2206      	movs	r2, #6
 801b01e:	f7e5 f977 	bl	8000310 <memchr>
 801b022:	2800      	cmp	r0, #0
 801b024:	d03f      	beq.n	801b0a6 <_vfiprintf_r+0x20a>
 801b026:	4b26      	ldr	r3, [pc, #152]	@ (801b0c0 <_vfiprintf_r+0x224>)
 801b028:	bb1b      	cbnz	r3, 801b072 <_vfiprintf_r+0x1d6>
 801b02a:	9b03      	ldr	r3, [sp, #12]
 801b02c:	3307      	adds	r3, #7
 801b02e:	f023 0307 	bic.w	r3, r3, #7
 801b032:	3308      	adds	r3, #8
 801b034:	9303      	str	r3, [sp, #12]
 801b036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b038:	443b      	add	r3, r7
 801b03a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b03c:	e76a      	b.n	801af14 <_vfiprintf_r+0x78>
 801b03e:	fb0c 3202 	mla	r2, ip, r2, r3
 801b042:	460c      	mov	r4, r1
 801b044:	2001      	movs	r0, #1
 801b046:	e7a8      	b.n	801af9a <_vfiprintf_r+0xfe>
 801b048:	2300      	movs	r3, #0
 801b04a:	3401      	adds	r4, #1
 801b04c:	9305      	str	r3, [sp, #20]
 801b04e:	4619      	mov	r1, r3
 801b050:	f04f 0c0a 	mov.w	ip, #10
 801b054:	4620      	mov	r0, r4
 801b056:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b05a:	3a30      	subs	r2, #48	@ 0x30
 801b05c:	2a09      	cmp	r2, #9
 801b05e:	d903      	bls.n	801b068 <_vfiprintf_r+0x1cc>
 801b060:	2b00      	cmp	r3, #0
 801b062:	d0c6      	beq.n	801aff2 <_vfiprintf_r+0x156>
 801b064:	9105      	str	r1, [sp, #20]
 801b066:	e7c4      	b.n	801aff2 <_vfiprintf_r+0x156>
 801b068:	fb0c 2101 	mla	r1, ip, r1, r2
 801b06c:	4604      	mov	r4, r0
 801b06e:	2301      	movs	r3, #1
 801b070:	e7f0      	b.n	801b054 <_vfiprintf_r+0x1b8>
 801b072:	ab03      	add	r3, sp, #12
 801b074:	9300      	str	r3, [sp, #0]
 801b076:	462a      	mov	r2, r5
 801b078:	4b12      	ldr	r3, [pc, #72]	@ (801b0c4 <_vfiprintf_r+0x228>)
 801b07a:	a904      	add	r1, sp, #16
 801b07c:	4630      	mov	r0, r6
 801b07e:	f7fc fb1f 	bl	80176c0 <_printf_float>
 801b082:	4607      	mov	r7, r0
 801b084:	1c78      	adds	r0, r7, #1
 801b086:	d1d6      	bne.n	801b036 <_vfiprintf_r+0x19a>
 801b088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b08a:	07d9      	lsls	r1, r3, #31
 801b08c:	d405      	bmi.n	801b09a <_vfiprintf_r+0x1fe>
 801b08e:	89ab      	ldrh	r3, [r5, #12]
 801b090:	059a      	lsls	r2, r3, #22
 801b092:	d402      	bmi.n	801b09a <_vfiprintf_r+0x1fe>
 801b094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b096:	f7fd fba7 	bl	80187e8 <__retarget_lock_release_recursive>
 801b09a:	89ab      	ldrh	r3, [r5, #12]
 801b09c:	065b      	lsls	r3, r3, #25
 801b09e:	f53f af1f 	bmi.w	801aee0 <_vfiprintf_r+0x44>
 801b0a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b0a4:	e71e      	b.n	801aee4 <_vfiprintf_r+0x48>
 801b0a6:	ab03      	add	r3, sp, #12
 801b0a8:	9300      	str	r3, [sp, #0]
 801b0aa:	462a      	mov	r2, r5
 801b0ac:	4b05      	ldr	r3, [pc, #20]	@ (801b0c4 <_vfiprintf_r+0x228>)
 801b0ae:	a904      	add	r1, sp, #16
 801b0b0:	4630      	mov	r0, r6
 801b0b2:	f7fc fd8d 	bl	8017bd0 <_printf_i>
 801b0b6:	e7e4      	b.n	801b082 <_vfiprintf_r+0x1e6>
 801b0b8:	0801cee9 	.word	0x0801cee9
 801b0bc:	0801cef3 	.word	0x0801cef3
 801b0c0:	080176c1 	.word	0x080176c1
 801b0c4:	0801ae77 	.word	0x0801ae77
 801b0c8:	0801ceef 	.word	0x0801ceef

0801b0cc <__sflush_r>:
 801b0cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0d4:	0716      	lsls	r6, r2, #28
 801b0d6:	4605      	mov	r5, r0
 801b0d8:	460c      	mov	r4, r1
 801b0da:	d454      	bmi.n	801b186 <__sflush_r+0xba>
 801b0dc:	684b      	ldr	r3, [r1, #4]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	dc02      	bgt.n	801b0e8 <__sflush_r+0x1c>
 801b0e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	dd48      	ble.n	801b17a <__sflush_r+0xae>
 801b0e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b0ea:	2e00      	cmp	r6, #0
 801b0ec:	d045      	beq.n	801b17a <__sflush_r+0xae>
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b0f4:	682f      	ldr	r7, [r5, #0]
 801b0f6:	6a21      	ldr	r1, [r4, #32]
 801b0f8:	602b      	str	r3, [r5, #0]
 801b0fa:	d030      	beq.n	801b15e <__sflush_r+0x92>
 801b0fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b0fe:	89a3      	ldrh	r3, [r4, #12]
 801b100:	0759      	lsls	r1, r3, #29
 801b102:	d505      	bpl.n	801b110 <__sflush_r+0x44>
 801b104:	6863      	ldr	r3, [r4, #4]
 801b106:	1ad2      	subs	r2, r2, r3
 801b108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b10a:	b10b      	cbz	r3, 801b110 <__sflush_r+0x44>
 801b10c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b10e:	1ad2      	subs	r2, r2, r3
 801b110:	2300      	movs	r3, #0
 801b112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b114:	6a21      	ldr	r1, [r4, #32]
 801b116:	4628      	mov	r0, r5
 801b118:	47b0      	blx	r6
 801b11a:	1c43      	adds	r3, r0, #1
 801b11c:	89a3      	ldrh	r3, [r4, #12]
 801b11e:	d106      	bne.n	801b12e <__sflush_r+0x62>
 801b120:	6829      	ldr	r1, [r5, #0]
 801b122:	291d      	cmp	r1, #29
 801b124:	d82b      	bhi.n	801b17e <__sflush_r+0xb2>
 801b126:	4a2a      	ldr	r2, [pc, #168]	@ (801b1d0 <__sflush_r+0x104>)
 801b128:	410a      	asrs	r2, r1
 801b12a:	07d6      	lsls	r6, r2, #31
 801b12c:	d427      	bmi.n	801b17e <__sflush_r+0xb2>
 801b12e:	2200      	movs	r2, #0
 801b130:	6062      	str	r2, [r4, #4]
 801b132:	04d9      	lsls	r1, r3, #19
 801b134:	6922      	ldr	r2, [r4, #16]
 801b136:	6022      	str	r2, [r4, #0]
 801b138:	d504      	bpl.n	801b144 <__sflush_r+0x78>
 801b13a:	1c42      	adds	r2, r0, #1
 801b13c:	d101      	bne.n	801b142 <__sflush_r+0x76>
 801b13e:	682b      	ldr	r3, [r5, #0]
 801b140:	b903      	cbnz	r3, 801b144 <__sflush_r+0x78>
 801b142:	6560      	str	r0, [r4, #84]	@ 0x54
 801b144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b146:	602f      	str	r7, [r5, #0]
 801b148:	b1b9      	cbz	r1, 801b17a <__sflush_r+0xae>
 801b14a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b14e:	4299      	cmp	r1, r3
 801b150:	d002      	beq.n	801b158 <__sflush_r+0x8c>
 801b152:	4628      	mov	r0, r5
 801b154:	f7fe f93e 	bl	80193d4 <_free_r>
 801b158:	2300      	movs	r3, #0
 801b15a:	6363      	str	r3, [r4, #52]	@ 0x34
 801b15c:	e00d      	b.n	801b17a <__sflush_r+0xae>
 801b15e:	2301      	movs	r3, #1
 801b160:	4628      	mov	r0, r5
 801b162:	47b0      	blx	r6
 801b164:	4602      	mov	r2, r0
 801b166:	1c50      	adds	r0, r2, #1
 801b168:	d1c9      	bne.n	801b0fe <__sflush_r+0x32>
 801b16a:	682b      	ldr	r3, [r5, #0]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d0c6      	beq.n	801b0fe <__sflush_r+0x32>
 801b170:	2b1d      	cmp	r3, #29
 801b172:	d001      	beq.n	801b178 <__sflush_r+0xac>
 801b174:	2b16      	cmp	r3, #22
 801b176:	d11e      	bne.n	801b1b6 <__sflush_r+0xea>
 801b178:	602f      	str	r7, [r5, #0]
 801b17a:	2000      	movs	r0, #0
 801b17c:	e022      	b.n	801b1c4 <__sflush_r+0xf8>
 801b17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b182:	b21b      	sxth	r3, r3
 801b184:	e01b      	b.n	801b1be <__sflush_r+0xf2>
 801b186:	690f      	ldr	r7, [r1, #16]
 801b188:	2f00      	cmp	r7, #0
 801b18a:	d0f6      	beq.n	801b17a <__sflush_r+0xae>
 801b18c:	0793      	lsls	r3, r2, #30
 801b18e:	680e      	ldr	r6, [r1, #0]
 801b190:	bf08      	it	eq
 801b192:	694b      	ldreq	r3, [r1, #20]
 801b194:	600f      	str	r7, [r1, #0]
 801b196:	bf18      	it	ne
 801b198:	2300      	movne	r3, #0
 801b19a:	eba6 0807 	sub.w	r8, r6, r7
 801b19e:	608b      	str	r3, [r1, #8]
 801b1a0:	f1b8 0f00 	cmp.w	r8, #0
 801b1a4:	dde9      	ble.n	801b17a <__sflush_r+0xae>
 801b1a6:	6a21      	ldr	r1, [r4, #32]
 801b1a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b1aa:	4643      	mov	r3, r8
 801b1ac:	463a      	mov	r2, r7
 801b1ae:	4628      	mov	r0, r5
 801b1b0:	47b0      	blx	r6
 801b1b2:	2800      	cmp	r0, #0
 801b1b4:	dc08      	bgt.n	801b1c8 <__sflush_r+0xfc>
 801b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1be:	81a3      	strh	r3, [r4, #12]
 801b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 801b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1c8:	4407      	add	r7, r0
 801b1ca:	eba8 0800 	sub.w	r8, r8, r0
 801b1ce:	e7e7      	b.n	801b1a0 <__sflush_r+0xd4>
 801b1d0:	dfbffffe 	.word	0xdfbffffe

0801b1d4 <_fflush_r>:
 801b1d4:	b538      	push	{r3, r4, r5, lr}
 801b1d6:	690b      	ldr	r3, [r1, #16]
 801b1d8:	4605      	mov	r5, r0
 801b1da:	460c      	mov	r4, r1
 801b1dc:	b913      	cbnz	r3, 801b1e4 <_fflush_r+0x10>
 801b1de:	2500      	movs	r5, #0
 801b1e0:	4628      	mov	r0, r5
 801b1e2:	bd38      	pop	{r3, r4, r5, pc}
 801b1e4:	b118      	cbz	r0, 801b1ee <_fflush_r+0x1a>
 801b1e6:	6a03      	ldr	r3, [r0, #32]
 801b1e8:	b90b      	cbnz	r3, 801b1ee <_fflush_r+0x1a>
 801b1ea:	f7fd f8a9 	bl	8018340 <__sinit>
 801b1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d0f3      	beq.n	801b1de <_fflush_r+0xa>
 801b1f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b1f8:	07d0      	lsls	r0, r2, #31
 801b1fa:	d404      	bmi.n	801b206 <_fflush_r+0x32>
 801b1fc:	0599      	lsls	r1, r3, #22
 801b1fe:	d402      	bmi.n	801b206 <_fflush_r+0x32>
 801b200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b202:	f7fd faf0 	bl	80187e6 <__retarget_lock_acquire_recursive>
 801b206:	4628      	mov	r0, r5
 801b208:	4621      	mov	r1, r4
 801b20a:	f7ff ff5f 	bl	801b0cc <__sflush_r>
 801b20e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b210:	07da      	lsls	r2, r3, #31
 801b212:	4605      	mov	r5, r0
 801b214:	d4e4      	bmi.n	801b1e0 <_fflush_r+0xc>
 801b216:	89a3      	ldrh	r3, [r4, #12]
 801b218:	059b      	lsls	r3, r3, #22
 801b21a:	d4e1      	bmi.n	801b1e0 <_fflush_r+0xc>
 801b21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b21e:	f7fd fae3 	bl	80187e8 <__retarget_lock_release_recursive>
 801b222:	e7dd      	b.n	801b1e0 <_fflush_r+0xc>

0801b224 <__swhatbuf_r>:
 801b224:	b570      	push	{r4, r5, r6, lr}
 801b226:	460c      	mov	r4, r1
 801b228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b22c:	2900      	cmp	r1, #0
 801b22e:	b096      	sub	sp, #88	@ 0x58
 801b230:	4615      	mov	r5, r2
 801b232:	461e      	mov	r6, r3
 801b234:	da0d      	bge.n	801b252 <__swhatbuf_r+0x2e>
 801b236:	89a3      	ldrh	r3, [r4, #12]
 801b238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b23c:	f04f 0100 	mov.w	r1, #0
 801b240:	bf14      	ite	ne
 801b242:	2340      	movne	r3, #64	@ 0x40
 801b244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b248:	2000      	movs	r0, #0
 801b24a:	6031      	str	r1, [r6, #0]
 801b24c:	602b      	str	r3, [r5, #0]
 801b24e:	b016      	add	sp, #88	@ 0x58
 801b250:	bd70      	pop	{r4, r5, r6, pc}
 801b252:	466a      	mov	r2, sp
 801b254:	f000 f874 	bl	801b340 <_fstat_r>
 801b258:	2800      	cmp	r0, #0
 801b25a:	dbec      	blt.n	801b236 <__swhatbuf_r+0x12>
 801b25c:	9901      	ldr	r1, [sp, #4]
 801b25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b266:	4259      	negs	r1, r3
 801b268:	4159      	adcs	r1, r3
 801b26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b26e:	e7eb      	b.n	801b248 <__swhatbuf_r+0x24>

0801b270 <__smakebuf_r>:
 801b270:	898b      	ldrh	r3, [r1, #12]
 801b272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b274:	079d      	lsls	r5, r3, #30
 801b276:	4606      	mov	r6, r0
 801b278:	460c      	mov	r4, r1
 801b27a:	d507      	bpl.n	801b28c <__smakebuf_r+0x1c>
 801b27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b280:	6023      	str	r3, [r4, #0]
 801b282:	6123      	str	r3, [r4, #16]
 801b284:	2301      	movs	r3, #1
 801b286:	6163      	str	r3, [r4, #20]
 801b288:	b003      	add	sp, #12
 801b28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b28c:	ab01      	add	r3, sp, #4
 801b28e:	466a      	mov	r2, sp
 801b290:	f7ff ffc8 	bl	801b224 <__swhatbuf_r>
 801b294:	9f00      	ldr	r7, [sp, #0]
 801b296:	4605      	mov	r5, r0
 801b298:	4639      	mov	r1, r7
 801b29a:	4630      	mov	r0, r6
 801b29c:	f7fe f90e 	bl	80194bc <_malloc_r>
 801b2a0:	b948      	cbnz	r0, 801b2b6 <__smakebuf_r+0x46>
 801b2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2a6:	059a      	lsls	r2, r3, #22
 801b2a8:	d4ee      	bmi.n	801b288 <__smakebuf_r+0x18>
 801b2aa:	f023 0303 	bic.w	r3, r3, #3
 801b2ae:	f043 0302 	orr.w	r3, r3, #2
 801b2b2:	81a3      	strh	r3, [r4, #12]
 801b2b4:	e7e2      	b.n	801b27c <__smakebuf_r+0xc>
 801b2b6:	89a3      	ldrh	r3, [r4, #12]
 801b2b8:	6020      	str	r0, [r4, #0]
 801b2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b2be:	81a3      	strh	r3, [r4, #12]
 801b2c0:	9b01      	ldr	r3, [sp, #4]
 801b2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b2c6:	b15b      	cbz	r3, 801b2e0 <__smakebuf_r+0x70>
 801b2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2cc:	4630      	mov	r0, r6
 801b2ce:	f000 f849 	bl	801b364 <_isatty_r>
 801b2d2:	b128      	cbz	r0, 801b2e0 <__smakebuf_r+0x70>
 801b2d4:	89a3      	ldrh	r3, [r4, #12]
 801b2d6:	f023 0303 	bic.w	r3, r3, #3
 801b2da:	f043 0301 	orr.w	r3, r3, #1
 801b2de:	81a3      	strh	r3, [r4, #12]
 801b2e0:	89a3      	ldrh	r3, [r4, #12]
 801b2e2:	431d      	orrs	r5, r3
 801b2e4:	81a5      	strh	r5, [r4, #12]
 801b2e6:	e7cf      	b.n	801b288 <__smakebuf_r+0x18>

0801b2e8 <memmove>:
 801b2e8:	4288      	cmp	r0, r1
 801b2ea:	b510      	push	{r4, lr}
 801b2ec:	eb01 0402 	add.w	r4, r1, r2
 801b2f0:	d902      	bls.n	801b2f8 <memmove+0x10>
 801b2f2:	4284      	cmp	r4, r0
 801b2f4:	4623      	mov	r3, r4
 801b2f6:	d807      	bhi.n	801b308 <memmove+0x20>
 801b2f8:	1e43      	subs	r3, r0, #1
 801b2fa:	42a1      	cmp	r1, r4
 801b2fc:	d008      	beq.n	801b310 <memmove+0x28>
 801b2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b302:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b306:	e7f8      	b.n	801b2fa <memmove+0x12>
 801b308:	4402      	add	r2, r0
 801b30a:	4601      	mov	r1, r0
 801b30c:	428a      	cmp	r2, r1
 801b30e:	d100      	bne.n	801b312 <memmove+0x2a>
 801b310:	bd10      	pop	{r4, pc}
 801b312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b31a:	e7f7      	b.n	801b30c <memmove+0x24>

0801b31c <strncmp>:
 801b31c:	b510      	push	{r4, lr}
 801b31e:	b16a      	cbz	r2, 801b33c <strncmp+0x20>
 801b320:	3901      	subs	r1, #1
 801b322:	1884      	adds	r4, r0, r2
 801b324:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b328:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b32c:	429a      	cmp	r2, r3
 801b32e:	d103      	bne.n	801b338 <strncmp+0x1c>
 801b330:	42a0      	cmp	r0, r4
 801b332:	d001      	beq.n	801b338 <strncmp+0x1c>
 801b334:	2a00      	cmp	r2, #0
 801b336:	d1f5      	bne.n	801b324 <strncmp+0x8>
 801b338:	1ad0      	subs	r0, r2, r3
 801b33a:	bd10      	pop	{r4, pc}
 801b33c:	4610      	mov	r0, r2
 801b33e:	e7fc      	b.n	801b33a <strncmp+0x1e>

0801b340 <_fstat_r>:
 801b340:	b538      	push	{r3, r4, r5, lr}
 801b342:	4d07      	ldr	r5, [pc, #28]	@ (801b360 <_fstat_r+0x20>)
 801b344:	2300      	movs	r3, #0
 801b346:	4604      	mov	r4, r0
 801b348:	4608      	mov	r0, r1
 801b34a:	4611      	mov	r1, r2
 801b34c:	602b      	str	r3, [r5, #0]
 801b34e:	f7ed f9eb 	bl	8008728 <_fstat>
 801b352:	1c43      	adds	r3, r0, #1
 801b354:	d102      	bne.n	801b35c <_fstat_r+0x1c>
 801b356:	682b      	ldr	r3, [r5, #0]
 801b358:	b103      	cbz	r3, 801b35c <_fstat_r+0x1c>
 801b35a:	6023      	str	r3, [r4, #0]
 801b35c:	bd38      	pop	{r3, r4, r5, pc}
 801b35e:	bf00      	nop
 801b360:	24002278 	.word	0x24002278

0801b364 <_isatty_r>:
 801b364:	b538      	push	{r3, r4, r5, lr}
 801b366:	4d06      	ldr	r5, [pc, #24]	@ (801b380 <_isatty_r+0x1c>)
 801b368:	2300      	movs	r3, #0
 801b36a:	4604      	mov	r4, r0
 801b36c:	4608      	mov	r0, r1
 801b36e:	602b      	str	r3, [r5, #0]
 801b370:	f7ed f9ea 	bl	8008748 <_isatty>
 801b374:	1c43      	adds	r3, r0, #1
 801b376:	d102      	bne.n	801b37e <_isatty_r+0x1a>
 801b378:	682b      	ldr	r3, [r5, #0]
 801b37a:	b103      	cbz	r3, 801b37e <_isatty_r+0x1a>
 801b37c:	6023      	str	r3, [r4, #0]
 801b37e:	bd38      	pop	{r3, r4, r5, pc}
 801b380:	24002278 	.word	0x24002278

0801b384 <_sbrk_r>:
 801b384:	b538      	push	{r3, r4, r5, lr}
 801b386:	4d06      	ldr	r5, [pc, #24]	@ (801b3a0 <_sbrk_r+0x1c>)
 801b388:	2300      	movs	r3, #0
 801b38a:	4604      	mov	r4, r0
 801b38c:	4608      	mov	r0, r1
 801b38e:	602b      	str	r3, [r5, #0]
 801b390:	f7ed f9f2 	bl	8008778 <_sbrk>
 801b394:	1c43      	adds	r3, r0, #1
 801b396:	d102      	bne.n	801b39e <_sbrk_r+0x1a>
 801b398:	682b      	ldr	r3, [r5, #0]
 801b39a:	b103      	cbz	r3, 801b39e <_sbrk_r+0x1a>
 801b39c:	6023      	str	r3, [r4, #0]
 801b39e:	bd38      	pop	{r3, r4, r5, pc}
 801b3a0:	24002278 	.word	0x24002278
 801b3a4:	00000000 	.word	0x00000000

0801b3a8 <nan>:
 801b3a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b3b0 <nan+0x8>
 801b3ac:	4770      	bx	lr
 801b3ae:	bf00      	nop
 801b3b0:	00000000 	.word	0x00000000
 801b3b4:	7ff80000 	.word	0x7ff80000

0801b3b8 <__assert_func>:
 801b3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b3ba:	4614      	mov	r4, r2
 801b3bc:	461a      	mov	r2, r3
 801b3be:	4b09      	ldr	r3, [pc, #36]	@ (801b3e4 <__assert_func+0x2c>)
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	4605      	mov	r5, r0
 801b3c4:	68d8      	ldr	r0, [r3, #12]
 801b3c6:	b954      	cbnz	r4, 801b3de <__assert_func+0x26>
 801b3c8:	4b07      	ldr	r3, [pc, #28]	@ (801b3e8 <__assert_func+0x30>)
 801b3ca:	461c      	mov	r4, r3
 801b3cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b3d0:	9100      	str	r1, [sp, #0]
 801b3d2:	462b      	mov	r3, r5
 801b3d4:	4905      	ldr	r1, [pc, #20]	@ (801b3ec <__assert_func+0x34>)
 801b3d6:	f000 fba7 	bl	801bb28 <fiprintf>
 801b3da:	f000 fbb7 	bl	801bb4c <abort>
 801b3de:	4b04      	ldr	r3, [pc, #16]	@ (801b3f0 <__assert_func+0x38>)
 801b3e0:	e7f4      	b.n	801b3cc <__assert_func+0x14>
 801b3e2:	bf00      	nop
 801b3e4:	24000168 	.word	0x24000168
 801b3e8:	0801cf3d 	.word	0x0801cf3d
 801b3ec:	0801cf0f 	.word	0x0801cf0f
 801b3f0:	0801cf02 	.word	0x0801cf02

0801b3f4 <_calloc_r>:
 801b3f4:	b570      	push	{r4, r5, r6, lr}
 801b3f6:	fba1 5402 	umull	r5, r4, r1, r2
 801b3fa:	b93c      	cbnz	r4, 801b40c <_calloc_r+0x18>
 801b3fc:	4629      	mov	r1, r5
 801b3fe:	f7fe f85d 	bl	80194bc <_malloc_r>
 801b402:	4606      	mov	r6, r0
 801b404:	b928      	cbnz	r0, 801b412 <_calloc_r+0x1e>
 801b406:	2600      	movs	r6, #0
 801b408:	4630      	mov	r0, r6
 801b40a:	bd70      	pop	{r4, r5, r6, pc}
 801b40c:	220c      	movs	r2, #12
 801b40e:	6002      	str	r2, [r0, #0]
 801b410:	e7f9      	b.n	801b406 <_calloc_r+0x12>
 801b412:	462a      	mov	r2, r5
 801b414:	4621      	mov	r1, r4
 801b416:	f7fd f969 	bl	80186ec <memset>
 801b41a:	e7f5      	b.n	801b408 <_calloc_r+0x14>

0801b41c <rshift>:
 801b41c:	6903      	ldr	r3, [r0, #16]
 801b41e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b426:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b42a:	f100 0414 	add.w	r4, r0, #20
 801b42e:	dd45      	ble.n	801b4bc <rshift+0xa0>
 801b430:	f011 011f 	ands.w	r1, r1, #31
 801b434:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b438:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b43c:	d10c      	bne.n	801b458 <rshift+0x3c>
 801b43e:	f100 0710 	add.w	r7, r0, #16
 801b442:	4629      	mov	r1, r5
 801b444:	42b1      	cmp	r1, r6
 801b446:	d334      	bcc.n	801b4b2 <rshift+0x96>
 801b448:	1a9b      	subs	r3, r3, r2
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	1eea      	subs	r2, r5, #3
 801b44e:	4296      	cmp	r6, r2
 801b450:	bf38      	it	cc
 801b452:	2300      	movcc	r3, #0
 801b454:	4423      	add	r3, r4
 801b456:	e015      	b.n	801b484 <rshift+0x68>
 801b458:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b45c:	f1c1 0820 	rsb	r8, r1, #32
 801b460:	40cf      	lsrs	r7, r1
 801b462:	f105 0e04 	add.w	lr, r5, #4
 801b466:	46a1      	mov	r9, r4
 801b468:	4576      	cmp	r6, lr
 801b46a:	46f4      	mov	ip, lr
 801b46c:	d815      	bhi.n	801b49a <rshift+0x7e>
 801b46e:	1a9a      	subs	r2, r3, r2
 801b470:	0092      	lsls	r2, r2, #2
 801b472:	3a04      	subs	r2, #4
 801b474:	3501      	adds	r5, #1
 801b476:	42ae      	cmp	r6, r5
 801b478:	bf38      	it	cc
 801b47a:	2200      	movcc	r2, #0
 801b47c:	18a3      	adds	r3, r4, r2
 801b47e:	50a7      	str	r7, [r4, r2]
 801b480:	b107      	cbz	r7, 801b484 <rshift+0x68>
 801b482:	3304      	adds	r3, #4
 801b484:	1b1a      	subs	r2, r3, r4
 801b486:	42a3      	cmp	r3, r4
 801b488:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b48c:	bf08      	it	eq
 801b48e:	2300      	moveq	r3, #0
 801b490:	6102      	str	r2, [r0, #16]
 801b492:	bf08      	it	eq
 801b494:	6143      	streq	r3, [r0, #20]
 801b496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b49a:	f8dc c000 	ldr.w	ip, [ip]
 801b49e:	fa0c fc08 	lsl.w	ip, ip, r8
 801b4a2:	ea4c 0707 	orr.w	r7, ip, r7
 801b4a6:	f849 7b04 	str.w	r7, [r9], #4
 801b4aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b4ae:	40cf      	lsrs	r7, r1
 801b4b0:	e7da      	b.n	801b468 <rshift+0x4c>
 801b4b2:	f851 cb04 	ldr.w	ip, [r1], #4
 801b4b6:	f847 cf04 	str.w	ip, [r7, #4]!
 801b4ba:	e7c3      	b.n	801b444 <rshift+0x28>
 801b4bc:	4623      	mov	r3, r4
 801b4be:	e7e1      	b.n	801b484 <rshift+0x68>

0801b4c0 <__hexdig_fun>:
 801b4c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801b4c4:	2b09      	cmp	r3, #9
 801b4c6:	d802      	bhi.n	801b4ce <__hexdig_fun+0xe>
 801b4c8:	3820      	subs	r0, #32
 801b4ca:	b2c0      	uxtb	r0, r0
 801b4cc:	4770      	bx	lr
 801b4ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801b4d2:	2b05      	cmp	r3, #5
 801b4d4:	d801      	bhi.n	801b4da <__hexdig_fun+0x1a>
 801b4d6:	3847      	subs	r0, #71	@ 0x47
 801b4d8:	e7f7      	b.n	801b4ca <__hexdig_fun+0xa>
 801b4da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801b4de:	2b05      	cmp	r3, #5
 801b4e0:	d801      	bhi.n	801b4e6 <__hexdig_fun+0x26>
 801b4e2:	3827      	subs	r0, #39	@ 0x27
 801b4e4:	e7f1      	b.n	801b4ca <__hexdig_fun+0xa>
 801b4e6:	2000      	movs	r0, #0
 801b4e8:	4770      	bx	lr
	...

0801b4ec <__gethex>:
 801b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f0:	b085      	sub	sp, #20
 801b4f2:	468a      	mov	sl, r1
 801b4f4:	9302      	str	r3, [sp, #8]
 801b4f6:	680b      	ldr	r3, [r1, #0]
 801b4f8:	9001      	str	r0, [sp, #4]
 801b4fa:	4690      	mov	r8, r2
 801b4fc:	1c9c      	adds	r4, r3, #2
 801b4fe:	46a1      	mov	r9, r4
 801b500:	f814 0b01 	ldrb.w	r0, [r4], #1
 801b504:	2830      	cmp	r0, #48	@ 0x30
 801b506:	d0fa      	beq.n	801b4fe <__gethex+0x12>
 801b508:	eba9 0303 	sub.w	r3, r9, r3
 801b50c:	f1a3 0b02 	sub.w	fp, r3, #2
 801b510:	f7ff ffd6 	bl	801b4c0 <__hexdig_fun>
 801b514:	4605      	mov	r5, r0
 801b516:	2800      	cmp	r0, #0
 801b518:	d168      	bne.n	801b5ec <__gethex+0x100>
 801b51a:	49a0      	ldr	r1, [pc, #640]	@ (801b79c <__gethex+0x2b0>)
 801b51c:	2201      	movs	r2, #1
 801b51e:	4648      	mov	r0, r9
 801b520:	f7ff fefc 	bl	801b31c <strncmp>
 801b524:	4607      	mov	r7, r0
 801b526:	2800      	cmp	r0, #0
 801b528:	d167      	bne.n	801b5fa <__gethex+0x10e>
 801b52a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b52e:	4626      	mov	r6, r4
 801b530:	f7ff ffc6 	bl	801b4c0 <__hexdig_fun>
 801b534:	2800      	cmp	r0, #0
 801b536:	d062      	beq.n	801b5fe <__gethex+0x112>
 801b538:	4623      	mov	r3, r4
 801b53a:	7818      	ldrb	r0, [r3, #0]
 801b53c:	2830      	cmp	r0, #48	@ 0x30
 801b53e:	4699      	mov	r9, r3
 801b540:	f103 0301 	add.w	r3, r3, #1
 801b544:	d0f9      	beq.n	801b53a <__gethex+0x4e>
 801b546:	f7ff ffbb 	bl	801b4c0 <__hexdig_fun>
 801b54a:	fab0 f580 	clz	r5, r0
 801b54e:	096d      	lsrs	r5, r5, #5
 801b550:	f04f 0b01 	mov.w	fp, #1
 801b554:	464a      	mov	r2, r9
 801b556:	4616      	mov	r6, r2
 801b558:	3201      	adds	r2, #1
 801b55a:	7830      	ldrb	r0, [r6, #0]
 801b55c:	f7ff ffb0 	bl	801b4c0 <__hexdig_fun>
 801b560:	2800      	cmp	r0, #0
 801b562:	d1f8      	bne.n	801b556 <__gethex+0x6a>
 801b564:	498d      	ldr	r1, [pc, #564]	@ (801b79c <__gethex+0x2b0>)
 801b566:	2201      	movs	r2, #1
 801b568:	4630      	mov	r0, r6
 801b56a:	f7ff fed7 	bl	801b31c <strncmp>
 801b56e:	2800      	cmp	r0, #0
 801b570:	d13f      	bne.n	801b5f2 <__gethex+0x106>
 801b572:	b944      	cbnz	r4, 801b586 <__gethex+0x9a>
 801b574:	1c74      	adds	r4, r6, #1
 801b576:	4622      	mov	r2, r4
 801b578:	4616      	mov	r6, r2
 801b57a:	3201      	adds	r2, #1
 801b57c:	7830      	ldrb	r0, [r6, #0]
 801b57e:	f7ff ff9f 	bl	801b4c0 <__hexdig_fun>
 801b582:	2800      	cmp	r0, #0
 801b584:	d1f8      	bne.n	801b578 <__gethex+0x8c>
 801b586:	1ba4      	subs	r4, r4, r6
 801b588:	00a7      	lsls	r7, r4, #2
 801b58a:	7833      	ldrb	r3, [r6, #0]
 801b58c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b590:	2b50      	cmp	r3, #80	@ 0x50
 801b592:	d13e      	bne.n	801b612 <__gethex+0x126>
 801b594:	7873      	ldrb	r3, [r6, #1]
 801b596:	2b2b      	cmp	r3, #43	@ 0x2b
 801b598:	d033      	beq.n	801b602 <__gethex+0x116>
 801b59a:	2b2d      	cmp	r3, #45	@ 0x2d
 801b59c:	d034      	beq.n	801b608 <__gethex+0x11c>
 801b59e:	1c71      	adds	r1, r6, #1
 801b5a0:	2400      	movs	r4, #0
 801b5a2:	7808      	ldrb	r0, [r1, #0]
 801b5a4:	f7ff ff8c 	bl	801b4c0 <__hexdig_fun>
 801b5a8:	1e43      	subs	r3, r0, #1
 801b5aa:	b2db      	uxtb	r3, r3
 801b5ac:	2b18      	cmp	r3, #24
 801b5ae:	d830      	bhi.n	801b612 <__gethex+0x126>
 801b5b0:	f1a0 0210 	sub.w	r2, r0, #16
 801b5b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b5b8:	f7ff ff82 	bl	801b4c0 <__hexdig_fun>
 801b5bc:	f100 3cff 	add.w	ip, r0, #4294967295
 801b5c0:	fa5f fc8c 	uxtb.w	ip, ip
 801b5c4:	f1bc 0f18 	cmp.w	ip, #24
 801b5c8:	f04f 030a 	mov.w	r3, #10
 801b5cc:	d91e      	bls.n	801b60c <__gethex+0x120>
 801b5ce:	b104      	cbz	r4, 801b5d2 <__gethex+0xe6>
 801b5d0:	4252      	negs	r2, r2
 801b5d2:	4417      	add	r7, r2
 801b5d4:	f8ca 1000 	str.w	r1, [sl]
 801b5d8:	b1ed      	cbz	r5, 801b616 <__gethex+0x12a>
 801b5da:	f1bb 0f00 	cmp.w	fp, #0
 801b5de:	bf0c      	ite	eq
 801b5e0:	2506      	moveq	r5, #6
 801b5e2:	2500      	movne	r5, #0
 801b5e4:	4628      	mov	r0, r5
 801b5e6:	b005      	add	sp, #20
 801b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ec:	2500      	movs	r5, #0
 801b5ee:	462c      	mov	r4, r5
 801b5f0:	e7b0      	b.n	801b554 <__gethex+0x68>
 801b5f2:	2c00      	cmp	r4, #0
 801b5f4:	d1c7      	bne.n	801b586 <__gethex+0x9a>
 801b5f6:	4627      	mov	r7, r4
 801b5f8:	e7c7      	b.n	801b58a <__gethex+0x9e>
 801b5fa:	464e      	mov	r6, r9
 801b5fc:	462f      	mov	r7, r5
 801b5fe:	2501      	movs	r5, #1
 801b600:	e7c3      	b.n	801b58a <__gethex+0x9e>
 801b602:	2400      	movs	r4, #0
 801b604:	1cb1      	adds	r1, r6, #2
 801b606:	e7cc      	b.n	801b5a2 <__gethex+0xb6>
 801b608:	2401      	movs	r4, #1
 801b60a:	e7fb      	b.n	801b604 <__gethex+0x118>
 801b60c:	fb03 0002 	mla	r0, r3, r2, r0
 801b610:	e7ce      	b.n	801b5b0 <__gethex+0xc4>
 801b612:	4631      	mov	r1, r6
 801b614:	e7de      	b.n	801b5d4 <__gethex+0xe8>
 801b616:	eba6 0309 	sub.w	r3, r6, r9
 801b61a:	3b01      	subs	r3, #1
 801b61c:	4629      	mov	r1, r5
 801b61e:	2b07      	cmp	r3, #7
 801b620:	dc0a      	bgt.n	801b638 <__gethex+0x14c>
 801b622:	9801      	ldr	r0, [sp, #4]
 801b624:	f7fd ffd6 	bl	80195d4 <_Balloc>
 801b628:	4604      	mov	r4, r0
 801b62a:	b940      	cbnz	r0, 801b63e <__gethex+0x152>
 801b62c:	4b5c      	ldr	r3, [pc, #368]	@ (801b7a0 <__gethex+0x2b4>)
 801b62e:	4602      	mov	r2, r0
 801b630:	21e4      	movs	r1, #228	@ 0xe4
 801b632:	485c      	ldr	r0, [pc, #368]	@ (801b7a4 <__gethex+0x2b8>)
 801b634:	f7ff fec0 	bl	801b3b8 <__assert_func>
 801b638:	3101      	adds	r1, #1
 801b63a:	105b      	asrs	r3, r3, #1
 801b63c:	e7ef      	b.n	801b61e <__gethex+0x132>
 801b63e:	f100 0a14 	add.w	sl, r0, #20
 801b642:	2300      	movs	r3, #0
 801b644:	4655      	mov	r5, sl
 801b646:	469b      	mov	fp, r3
 801b648:	45b1      	cmp	r9, r6
 801b64a:	d337      	bcc.n	801b6bc <__gethex+0x1d0>
 801b64c:	f845 bb04 	str.w	fp, [r5], #4
 801b650:	eba5 050a 	sub.w	r5, r5, sl
 801b654:	10ad      	asrs	r5, r5, #2
 801b656:	6125      	str	r5, [r4, #16]
 801b658:	4658      	mov	r0, fp
 801b65a:	f7fe f8ad 	bl	80197b8 <__hi0bits>
 801b65e:	016d      	lsls	r5, r5, #5
 801b660:	f8d8 6000 	ldr.w	r6, [r8]
 801b664:	1a2d      	subs	r5, r5, r0
 801b666:	42b5      	cmp	r5, r6
 801b668:	dd54      	ble.n	801b714 <__gethex+0x228>
 801b66a:	1bad      	subs	r5, r5, r6
 801b66c:	4629      	mov	r1, r5
 801b66e:	4620      	mov	r0, r4
 801b670:	f7fe fc3e 	bl	8019ef0 <__any_on>
 801b674:	4681      	mov	r9, r0
 801b676:	b178      	cbz	r0, 801b698 <__gethex+0x1ac>
 801b678:	1e6b      	subs	r3, r5, #1
 801b67a:	1159      	asrs	r1, r3, #5
 801b67c:	f003 021f 	and.w	r2, r3, #31
 801b680:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b684:	f04f 0901 	mov.w	r9, #1
 801b688:	fa09 f202 	lsl.w	r2, r9, r2
 801b68c:	420a      	tst	r2, r1
 801b68e:	d003      	beq.n	801b698 <__gethex+0x1ac>
 801b690:	454b      	cmp	r3, r9
 801b692:	dc36      	bgt.n	801b702 <__gethex+0x216>
 801b694:	f04f 0902 	mov.w	r9, #2
 801b698:	4629      	mov	r1, r5
 801b69a:	4620      	mov	r0, r4
 801b69c:	f7ff febe 	bl	801b41c <rshift>
 801b6a0:	442f      	add	r7, r5
 801b6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b6a6:	42bb      	cmp	r3, r7
 801b6a8:	da42      	bge.n	801b730 <__gethex+0x244>
 801b6aa:	9801      	ldr	r0, [sp, #4]
 801b6ac:	4621      	mov	r1, r4
 801b6ae:	f7fd ffd1 	bl	8019654 <_Bfree>
 801b6b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	6013      	str	r3, [r2, #0]
 801b6b8:	25a3      	movs	r5, #163	@ 0xa3
 801b6ba:	e793      	b.n	801b5e4 <__gethex+0xf8>
 801b6bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b6c0:	2a2e      	cmp	r2, #46	@ 0x2e
 801b6c2:	d012      	beq.n	801b6ea <__gethex+0x1fe>
 801b6c4:	2b20      	cmp	r3, #32
 801b6c6:	d104      	bne.n	801b6d2 <__gethex+0x1e6>
 801b6c8:	f845 bb04 	str.w	fp, [r5], #4
 801b6cc:	f04f 0b00 	mov.w	fp, #0
 801b6d0:	465b      	mov	r3, fp
 801b6d2:	7830      	ldrb	r0, [r6, #0]
 801b6d4:	9303      	str	r3, [sp, #12]
 801b6d6:	f7ff fef3 	bl	801b4c0 <__hexdig_fun>
 801b6da:	9b03      	ldr	r3, [sp, #12]
 801b6dc:	f000 000f 	and.w	r0, r0, #15
 801b6e0:	4098      	lsls	r0, r3
 801b6e2:	ea4b 0b00 	orr.w	fp, fp, r0
 801b6e6:	3304      	adds	r3, #4
 801b6e8:	e7ae      	b.n	801b648 <__gethex+0x15c>
 801b6ea:	45b1      	cmp	r9, r6
 801b6ec:	d8ea      	bhi.n	801b6c4 <__gethex+0x1d8>
 801b6ee:	492b      	ldr	r1, [pc, #172]	@ (801b79c <__gethex+0x2b0>)
 801b6f0:	9303      	str	r3, [sp, #12]
 801b6f2:	2201      	movs	r2, #1
 801b6f4:	4630      	mov	r0, r6
 801b6f6:	f7ff fe11 	bl	801b31c <strncmp>
 801b6fa:	9b03      	ldr	r3, [sp, #12]
 801b6fc:	2800      	cmp	r0, #0
 801b6fe:	d1e1      	bne.n	801b6c4 <__gethex+0x1d8>
 801b700:	e7a2      	b.n	801b648 <__gethex+0x15c>
 801b702:	1ea9      	subs	r1, r5, #2
 801b704:	4620      	mov	r0, r4
 801b706:	f7fe fbf3 	bl	8019ef0 <__any_on>
 801b70a:	2800      	cmp	r0, #0
 801b70c:	d0c2      	beq.n	801b694 <__gethex+0x1a8>
 801b70e:	f04f 0903 	mov.w	r9, #3
 801b712:	e7c1      	b.n	801b698 <__gethex+0x1ac>
 801b714:	da09      	bge.n	801b72a <__gethex+0x23e>
 801b716:	1b75      	subs	r5, r6, r5
 801b718:	4621      	mov	r1, r4
 801b71a:	9801      	ldr	r0, [sp, #4]
 801b71c:	462a      	mov	r2, r5
 801b71e:	f7fe f9b1 	bl	8019a84 <__lshift>
 801b722:	1b7f      	subs	r7, r7, r5
 801b724:	4604      	mov	r4, r0
 801b726:	f100 0a14 	add.w	sl, r0, #20
 801b72a:	f04f 0900 	mov.w	r9, #0
 801b72e:	e7b8      	b.n	801b6a2 <__gethex+0x1b6>
 801b730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b734:	42bd      	cmp	r5, r7
 801b736:	dd6f      	ble.n	801b818 <__gethex+0x32c>
 801b738:	1bed      	subs	r5, r5, r7
 801b73a:	42ae      	cmp	r6, r5
 801b73c:	dc34      	bgt.n	801b7a8 <__gethex+0x2bc>
 801b73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b742:	2b02      	cmp	r3, #2
 801b744:	d022      	beq.n	801b78c <__gethex+0x2a0>
 801b746:	2b03      	cmp	r3, #3
 801b748:	d024      	beq.n	801b794 <__gethex+0x2a8>
 801b74a:	2b01      	cmp	r3, #1
 801b74c:	d115      	bne.n	801b77a <__gethex+0x28e>
 801b74e:	42ae      	cmp	r6, r5
 801b750:	d113      	bne.n	801b77a <__gethex+0x28e>
 801b752:	2e01      	cmp	r6, #1
 801b754:	d10b      	bne.n	801b76e <__gethex+0x282>
 801b756:	9a02      	ldr	r2, [sp, #8]
 801b758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b75c:	6013      	str	r3, [r2, #0]
 801b75e:	2301      	movs	r3, #1
 801b760:	6123      	str	r3, [r4, #16]
 801b762:	f8ca 3000 	str.w	r3, [sl]
 801b766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b768:	2562      	movs	r5, #98	@ 0x62
 801b76a:	601c      	str	r4, [r3, #0]
 801b76c:	e73a      	b.n	801b5e4 <__gethex+0xf8>
 801b76e:	1e71      	subs	r1, r6, #1
 801b770:	4620      	mov	r0, r4
 801b772:	f7fe fbbd 	bl	8019ef0 <__any_on>
 801b776:	2800      	cmp	r0, #0
 801b778:	d1ed      	bne.n	801b756 <__gethex+0x26a>
 801b77a:	9801      	ldr	r0, [sp, #4]
 801b77c:	4621      	mov	r1, r4
 801b77e:	f7fd ff69 	bl	8019654 <_Bfree>
 801b782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b784:	2300      	movs	r3, #0
 801b786:	6013      	str	r3, [r2, #0]
 801b788:	2550      	movs	r5, #80	@ 0x50
 801b78a:	e72b      	b.n	801b5e4 <__gethex+0xf8>
 801b78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d1f3      	bne.n	801b77a <__gethex+0x28e>
 801b792:	e7e0      	b.n	801b756 <__gethex+0x26a>
 801b794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b796:	2b00      	cmp	r3, #0
 801b798:	d1dd      	bne.n	801b756 <__gethex+0x26a>
 801b79a:	e7ee      	b.n	801b77a <__gethex+0x28e>
 801b79c:	0801cd90 	.word	0x0801cd90
 801b7a0:	0801cc25 	.word	0x0801cc25
 801b7a4:	0801cf3e 	.word	0x0801cf3e
 801b7a8:	1e6f      	subs	r7, r5, #1
 801b7aa:	f1b9 0f00 	cmp.w	r9, #0
 801b7ae:	d130      	bne.n	801b812 <__gethex+0x326>
 801b7b0:	b127      	cbz	r7, 801b7bc <__gethex+0x2d0>
 801b7b2:	4639      	mov	r1, r7
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	f7fe fb9b 	bl	8019ef0 <__any_on>
 801b7ba:	4681      	mov	r9, r0
 801b7bc:	117a      	asrs	r2, r7, #5
 801b7be:	2301      	movs	r3, #1
 801b7c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b7c4:	f007 071f 	and.w	r7, r7, #31
 801b7c8:	40bb      	lsls	r3, r7
 801b7ca:	4213      	tst	r3, r2
 801b7cc:	4629      	mov	r1, r5
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	bf18      	it	ne
 801b7d2:	f049 0902 	orrne.w	r9, r9, #2
 801b7d6:	f7ff fe21 	bl	801b41c <rshift>
 801b7da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b7de:	1b76      	subs	r6, r6, r5
 801b7e0:	2502      	movs	r5, #2
 801b7e2:	f1b9 0f00 	cmp.w	r9, #0
 801b7e6:	d047      	beq.n	801b878 <__gethex+0x38c>
 801b7e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b7ec:	2b02      	cmp	r3, #2
 801b7ee:	d015      	beq.n	801b81c <__gethex+0x330>
 801b7f0:	2b03      	cmp	r3, #3
 801b7f2:	d017      	beq.n	801b824 <__gethex+0x338>
 801b7f4:	2b01      	cmp	r3, #1
 801b7f6:	d109      	bne.n	801b80c <__gethex+0x320>
 801b7f8:	f019 0f02 	tst.w	r9, #2
 801b7fc:	d006      	beq.n	801b80c <__gethex+0x320>
 801b7fe:	f8da 3000 	ldr.w	r3, [sl]
 801b802:	ea49 0903 	orr.w	r9, r9, r3
 801b806:	f019 0f01 	tst.w	r9, #1
 801b80a:	d10e      	bne.n	801b82a <__gethex+0x33e>
 801b80c:	f045 0510 	orr.w	r5, r5, #16
 801b810:	e032      	b.n	801b878 <__gethex+0x38c>
 801b812:	f04f 0901 	mov.w	r9, #1
 801b816:	e7d1      	b.n	801b7bc <__gethex+0x2d0>
 801b818:	2501      	movs	r5, #1
 801b81a:	e7e2      	b.n	801b7e2 <__gethex+0x2f6>
 801b81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b81e:	f1c3 0301 	rsb	r3, r3, #1
 801b822:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b826:	2b00      	cmp	r3, #0
 801b828:	d0f0      	beq.n	801b80c <__gethex+0x320>
 801b82a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b82e:	f104 0314 	add.w	r3, r4, #20
 801b832:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b836:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b83a:	f04f 0c00 	mov.w	ip, #0
 801b83e:	4618      	mov	r0, r3
 801b840:	f853 2b04 	ldr.w	r2, [r3], #4
 801b844:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b848:	d01b      	beq.n	801b882 <__gethex+0x396>
 801b84a:	3201      	adds	r2, #1
 801b84c:	6002      	str	r2, [r0, #0]
 801b84e:	2d02      	cmp	r5, #2
 801b850:	f104 0314 	add.w	r3, r4, #20
 801b854:	d13c      	bne.n	801b8d0 <__gethex+0x3e4>
 801b856:	f8d8 2000 	ldr.w	r2, [r8]
 801b85a:	3a01      	subs	r2, #1
 801b85c:	42b2      	cmp	r2, r6
 801b85e:	d109      	bne.n	801b874 <__gethex+0x388>
 801b860:	1171      	asrs	r1, r6, #5
 801b862:	2201      	movs	r2, #1
 801b864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b868:	f006 061f 	and.w	r6, r6, #31
 801b86c:	fa02 f606 	lsl.w	r6, r2, r6
 801b870:	421e      	tst	r6, r3
 801b872:	d13a      	bne.n	801b8ea <__gethex+0x3fe>
 801b874:	f045 0520 	orr.w	r5, r5, #32
 801b878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b87a:	601c      	str	r4, [r3, #0]
 801b87c:	9b02      	ldr	r3, [sp, #8]
 801b87e:	601f      	str	r7, [r3, #0]
 801b880:	e6b0      	b.n	801b5e4 <__gethex+0xf8>
 801b882:	4299      	cmp	r1, r3
 801b884:	f843 cc04 	str.w	ip, [r3, #-4]
 801b888:	d8d9      	bhi.n	801b83e <__gethex+0x352>
 801b88a:	68a3      	ldr	r3, [r4, #8]
 801b88c:	459b      	cmp	fp, r3
 801b88e:	db17      	blt.n	801b8c0 <__gethex+0x3d4>
 801b890:	6861      	ldr	r1, [r4, #4]
 801b892:	9801      	ldr	r0, [sp, #4]
 801b894:	3101      	adds	r1, #1
 801b896:	f7fd fe9d 	bl	80195d4 <_Balloc>
 801b89a:	4681      	mov	r9, r0
 801b89c:	b918      	cbnz	r0, 801b8a6 <__gethex+0x3ba>
 801b89e:	4b1a      	ldr	r3, [pc, #104]	@ (801b908 <__gethex+0x41c>)
 801b8a0:	4602      	mov	r2, r0
 801b8a2:	2184      	movs	r1, #132	@ 0x84
 801b8a4:	e6c5      	b.n	801b632 <__gethex+0x146>
 801b8a6:	6922      	ldr	r2, [r4, #16]
 801b8a8:	3202      	adds	r2, #2
 801b8aa:	f104 010c 	add.w	r1, r4, #12
 801b8ae:	0092      	lsls	r2, r2, #2
 801b8b0:	300c      	adds	r0, #12
 801b8b2:	f7fc ff9a 	bl	80187ea <memcpy>
 801b8b6:	4621      	mov	r1, r4
 801b8b8:	9801      	ldr	r0, [sp, #4]
 801b8ba:	f7fd fecb 	bl	8019654 <_Bfree>
 801b8be:	464c      	mov	r4, r9
 801b8c0:	6923      	ldr	r3, [r4, #16]
 801b8c2:	1c5a      	adds	r2, r3, #1
 801b8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b8c8:	6122      	str	r2, [r4, #16]
 801b8ca:	2201      	movs	r2, #1
 801b8cc:	615a      	str	r2, [r3, #20]
 801b8ce:	e7be      	b.n	801b84e <__gethex+0x362>
 801b8d0:	6922      	ldr	r2, [r4, #16]
 801b8d2:	455a      	cmp	r2, fp
 801b8d4:	dd0b      	ble.n	801b8ee <__gethex+0x402>
 801b8d6:	2101      	movs	r1, #1
 801b8d8:	4620      	mov	r0, r4
 801b8da:	f7ff fd9f 	bl	801b41c <rshift>
 801b8de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b8e2:	3701      	adds	r7, #1
 801b8e4:	42bb      	cmp	r3, r7
 801b8e6:	f6ff aee0 	blt.w	801b6aa <__gethex+0x1be>
 801b8ea:	2501      	movs	r5, #1
 801b8ec:	e7c2      	b.n	801b874 <__gethex+0x388>
 801b8ee:	f016 061f 	ands.w	r6, r6, #31
 801b8f2:	d0fa      	beq.n	801b8ea <__gethex+0x3fe>
 801b8f4:	4453      	add	r3, sl
 801b8f6:	f1c6 0620 	rsb	r6, r6, #32
 801b8fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b8fe:	f7fd ff5b 	bl	80197b8 <__hi0bits>
 801b902:	42b0      	cmp	r0, r6
 801b904:	dbe7      	blt.n	801b8d6 <__gethex+0x3ea>
 801b906:	e7f0      	b.n	801b8ea <__gethex+0x3fe>
 801b908:	0801cc25 	.word	0x0801cc25

0801b90c <L_shift>:
 801b90c:	f1c2 0208 	rsb	r2, r2, #8
 801b910:	0092      	lsls	r2, r2, #2
 801b912:	b570      	push	{r4, r5, r6, lr}
 801b914:	f1c2 0620 	rsb	r6, r2, #32
 801b918:	6843      	ldr	r3, [r0, #4]
 801b91a:	6804      	ldr	r4, [r0, #0]
 801b91c:	fa03 f506 	lsl.w	r5, r3, r6
 801b920:	432c      	orrs	r4, r5
 801b922:	40d3      	lsrs	r3, r2
 801b924:	6004      	str	r4, [r0, #0]
 801b926:	f840 3f04 	str.w	r3, [r0, #4]!
 801b92a:	4288      	cmp	r0, r1
 801b92c:	d3f4      	bcc.n	801b918 <L_shift+0xc>
 801b92e:	bd70      	pop	{r4, r5, r6, pc}

0801b930 <__match>:
 801b930:	b530      	push	{r4, r5, lr}
 801b932:	6803      	ldr	r3, [r0, #0]
 801b934:	3301      	adds	r3, #1
 801b936:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b93a:	b914      	cbnz	r4, 801b942 <__match+0x12>
 801b93c:	6003      	str	r3, [r0, #0]
 801b93e:	2001      	movs	r0, #1
 801b940:	bd30      	pop	{r4, r5, pc}
 801b942:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b946:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b94a:	2d19      	cmp	r5, #25
 801b94c:	bf98      	it	ls
 801b94e:	3220      	addls	r2, #32
 801b950:	42a2      	cmp	r2, r4
 801b952:	d0f0      	beq.n	801b936 <__match+0x6>
 801b954:	2000      	movs	r0, #0
 801b956:	e7f3      	b.n	801b940 <__match+0x10>

0801b958 <__hexnan>:
 801b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b95c:	680b      	ldr	r3, [r1, #0]
 801b95e:	6801      	ldr	r1, [r0, #0]
 801b960:	115e      	asrs	r6, r3, #5
 801b962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b966:	f013 031f 	ands.w	r3, r3, #31
 801b96a:	b087      	sub	sp, #28
 801b96c:	bf18      	it	ne
 801b96e:	3604      	addne	r6, #4
 801b970:	2500      	movs	r5, #0
 801b972:	1f37      	subs	r7, r6, #4
 801b974:	4682      	mov	sl, r0
 801b976:	4690      	mov	r8, r2
 801b978:	9301      	str	r3, [sp, #4]
 801b97a:	f846 5c04 	str.w	r5, [r6, #-4]
 801b97e:	46b9      	mov	r9, r7
 801b980:	463c      	mov	r4, r7
 801b982:	9502      	str	r5, [sp, #8]
 801b984:	46ab      	mov	fp, r5
 801b986:	784a      	ldrb	r2, [r1, #1]
 801b988:	1c4b      	adds	r3, r1, #1
 801b98a:	9303      	str	r3, [sp, #12]
 801b98c:	b342      	cbz	r2, 801b9e0 <__hexnan+0x88>
 801b98e:	4610      	mov	r0, r2
 801b990:	9105      	str	r1, [sp, #20]
 801b992:	9204      	str	r2, [sp, #16]
 801b994:	f7ff fd94 	bl	801b4c0 <__hexdig_fun>
 801b998:	2800      	cmp	r0, #0
 801b99a:	d151      	bne.n	801ba40 <__hexnan+0xe8>
 801b99c:	9a04      	ldr	r2, [sp, #16]
 801b99e:	9905      	ldr	r1, [sp, #20]
 801b9a0:	2a20      	cmp	r2, #32
 801b9a2:	d818      	bhi.n	801b9d6 <__hexnan+0x7e>
 801b9a4:	9b02      	ldr	r3, [sp, #8]
 801b9a6:	459b      	cmp	fp, r3
 801b9a8:	dd13      	ble.n	801b9d2 <__hexnan+0x7a>
 801b9aa:	454c      	cmp	r4, r9
 801b9ac:	d206      	bcs.n	801b9bc <__hexnan+0x64>
 801b9ae:	2d07      	cmp	r5, #7
 801b9b0:	dc04      	bgt.n	801b9bc <__hexnan+0x64>
 801b9b2:	462a      	mov	r2, r5
 801b9b4:	4649      	mov	r1, r9
 801b9b6:	4620      	mov	r0, r4
 801b9b8:	f7ff ffa8 	bl	801b90c <L_shift>
 801b9bc:	4544      	cmp	r4, r8
 801b9be:	d952      	bls.n	801ba66 <__hexnan+0x10e>
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	f1a4 0904 	sub.w	r9, r4, #4
 801b9c6:	f844 3c04 	str.w	r3, [r4, #-4]
 801b9ca:	f8cd b008 	str.w	fp, [sp, #8]
 801b9ce:	464c      	mov	r4, r9
 801b9d0:	461d      	mov	r5, r3
 801b9d2:	9903      	ldr	r1, [sp, #12]
 801b9d4:	e7d7      	b.n	801b986 <__hexnan+0x2e>
 801b9d6:	2a29      	cmp	r2, #41	@ 0x29
 801b9d8:	d157      	bne.n	801ba8a <__hexnan+0x132>
 801b9da:	3102      	adds	r1, #2
 801b9dc:	f8ca 1000 	str.w	r1, [sl]
 801b9e0:	f1bb 0f00 	cmp.w	fp, #0
 801b9e4:	d051      	beq.n	801ba8a <__hexnan+0x132>
 801b9e6:	454c      	cmp	r4, r9
 801b9e8:	d206      	bcs.n	801b9f8 <__hexnan+0xa0>
 801b9ea:	2d07      	cmp	r5, #7
 801b9ec:	dc04      	bgt.n	801b9f8 <__hexnan+0xa0>
 801b9ee:	462a      	mov	r2, r5
 801b9f0:	4649      	mov	r1, r9
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	f7ff ff8a 	bl	801b90c <L_shift>
 801b9f8:	4544      	cmp	r4, r8
 801b9fa:	d936      	bls.n	801ba6a <__hexnan+0x112>
 801b9fc:	f1a8 0204 	sub.w	r2, r8, #4
 801ba00:	4623      	mov	r3, r4
 801ba02:	f853 1b04 	ldr.w	r1, [r3], #4
 801ba06:	f842 1f04 	str.w	r1, [r2, #4]!
 801ba0a:	429f      	cmp	r7, r3
 801ba0c:	d2f9      	bcs.n	801ba02 <__hexnan+0xaa>
 801ba0e:	1b3b      	subs	r3, r7, r4
 801ba10:	f023 0303 	bic.w	r3, r3, #3
 801ba14:	3304      	adds	r3, #4
 801ba16:	3401      	adds	r4, #1
 801ba18:	3e03      	subs	r6, #3
 801ba1a:	42b4      	cmp	r4, r6
 801ba1c:	bf88      	it	hi
 801ba1e:	2304      	movhi	r3, #4
 801ba20:	4443      	add	r3, r8
 801ba22:	2200      	movs	r2, #0
 801ba24:	f843 2b04 	str.w	r2, [r3], #4
 801ba28:	429f      	cmp	r7, r3
 801ba2a:	d2fb      	bcs.n	801ba24 <__hexnan+0xcc>
 801ba2c:	683b      	ldr	r3, [r7, #0]
 801ba2e:	b91b      	cbnz	r3, 801ba38 <__hexnan+0xe0>
 801ba30:	4547      	cmp	r7, r8
 801ba32:	d128      	bne.n	801ba86 <__hexnan+0x12e>
 801ba34:	2301      	movs	r3, #1
 801ba36:	603b      	str	r3, [r7, #0]
 801ba38:	2005      	movs	r0, #5
 801ba3a:	b007      	add	sp, #28
 801ba3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba40:	3501      	adds	r5, #1
 801ba42:	2d08      	cmp	r5, #8
 801ba44:	f10b 0b01 	add.w	fp, fp, #1
 801ba48:	dd06      	ble.n	801ba58 <__hexnan+0x100>
 801ba4a:	4544      	cmp	r4, r8
 801ba4c:	d9c1      	bls.n	801b9d2 <__hexnan+0x7a>
 801ba4e:	2300      	movs	r3, #0
 801ba50:	f844 3c04 	str.w	r3, [r4, #-4]
 801ba54:	2501      	movs	r5, #1
 801ba56:	3c04      	subs	r4, #4
 801ba58:	6822      	ldr	r2, [r4, #0]
 801ba5a:	f000 000f 	and.w	r0, r0, #15
 801ba5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ba62:	6020      	str	r0, [r4, #0]
 801ba64:	e7b5      	b.n	801b9d2 <__hexnan+0x7a>
 801ba66:	2508      	movs	r5, #8
 801ba68:	e7b3      	b.n	801b9d2 <__hexnan+0x7a>
 801ba6a:	9b01      	ldr	r3, [sp, #4]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d0dd      	beq.n	801ba2c <__hexnan+0xd4>
 801ba70:	f1c3 0320 	rsb	r3, r3, #32
 801ba74:	f04f 32ff 	mov.w	r2, #4294967295
 801ba78:	40da      	lsrs	r2, r3
 801ba7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ba7e:	4013      	ands	r3, r2
 801ba80:	f846 3c04 	str.w	r3, [r6, #-4]
 801ba84:	e7d2      	b.n	801ba2c <__hexnan+0xd4>
 801ba86:	3f04      	subs	r7, #4
 801ba88:	e7d0      	b.n	801ba2c <__hexnan+0xd4>
 801ba8a:	2004      	movs	r0, #4
 801ba8c:	e7d5      	b.n	801ba3a <__hexnan+0xe2>

0801ba8e <__ascii_mbtowc>:
 801ba8e:	b082      	sub	sp, #8
 801ba90:	b901      	cbnz	r1, 801ba94 <__ascii_mbtowc+0x6>
 801ba92:	a901      	add	r1, sp, #4
 801ba94:	b142      	cbz	r2, 801baa8 <__ascii_mbtowc+0x1a>
 801ba96:	b14b      	cbz	r3, 801baac <__ascii_mbtowc+0x1e>
 801ba98:	7813      	ldrb	r3, [r2, #0]
 801ba9a:	600b      	str	r3, [r1, #0]
 801ba9c:	7812      	ldrb	r2, [r2, #0]
 801ba9e:	1e10      	subs	r0, r2, #0
 801baa0:	bf18      	it	ne
 801baa2:	2001      	movne	r0, #1
 801baa4:	b002      	add	sp, #8
 801baa6:	4770      	bx	lr
 801baa8:	4610      	mov	r0, r2
 801baaa:	e7fb      	b.n	801baa4 <__ascii_mbtowc+0x16>
 801baac:	f06f 0001 	mvn.w	r0, #1
 801bab0:	e7f8      	b.n	801baa4 <__ascii_mbtowc+0x16>

0801bab2 <_realloc_r>:
 801bab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bab6:	4680      	mov	r8, r0
 801bab8:	4615      	mov	r5, r2
 801baba:	460c      	mov	r4, r1
 801babc:	b921      	cbnz	r1, 801bac8 <_realloc_r+0x16>
 801babe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bac2:	4611      	mov	r1, r2
 801bac4:	f7fd bcfa 	b.w	80194bc <_malloc_r>
 801bac8:	b92a      	cbnz	r2, 801bad6 <_realloc_r+0x24>
 801baca:	f7fd fc83 	bl	80193d4 <_free_r>
 801bace:	2400      	movs	r4, #0
 801bad0:	4620      	mov	r0, r4
 801bad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bad6:	f000 f840 	bl	801bb5a <_malloc_usable_size_r>
 801bada:	4285      	cmp	r5, r0
 801badc:	4606      	mov	r6, r0
 801bade:	d802      	bhi.n	801bae6 <_realloc_r+0x34>
 801bae0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bae4:	d8f4      	bhi.n	801bad0 <_realloc_r+0x1e>
 801bae6:	4629      	mov	r1, r5
 801bae8:	4640      	mov	r0, r8
 801baea:	f7fd fce7 	bl	80194bc <_malloc_r>
 801baee:	4607      	mov	r7, r0
 801baf0:	2800      	cmp	r0, #0
 801baf2:	d0ec      	beq.n	801bace <_realloc_r+0x1c>
 801baf4:	42b5      	cmp	r5, r6
 801baf6:	462a      	mov	r2, r5
 801baf8:	4621      	mov	r1, r4
 801bafa:	bf28      	it	cs
 801bafc:	4632      	movcs	r2, r6
 801bafe:	f7fc fe74 	bl	80187ea <memcpy>
 801bb02:	4621      	mov	r1, r4
 801bb04:	4640      	mov	r0, r8
 801bb06:	f7fd fc65 	bl	80193d4 <_free_r>
 801bb0a:	463c      	mov	r4, r7
 801bb0c:	e7e0      	b.n	801bad0 <_realloc_r+0x1e>

0801bb0e <__ascii_wctomb>:
 801bb0e:	4603      	mov	r3, r0
 801bb10:	4608      	mov	r0, r1
 801bb12:	b141      	cbz	r1, 801bb26 <__ascii_wctomb+0x18>
 801bb14:	2aff      	cmp	r2, #255	@ 0xff
 801bb16:	d904      	bls.n	801bb22 <__ascii_wctomb+0x14>
 801bb18:	228a      	movs	r2, #138	@ 0x8a
 801bb1a:	601a      	str	r2, [r3, #0]
 801bb1c:	f04f 30ff 	mov.w	r0, #4294967295
 801bb20:	4770      	bx	lr
 801bb22:	700a      	strb	r2, [r1, #0]
 801bb24:	2001      	movs	r0, #1
 801bb26:	4770      	bx	lr

0801bb28 <fiprintf>:
 801bb28:	b40e      	push	{r1, r2, r3}
 801bb2a:	b503      	push	{r0, r1, lr}
 801bb2c:	4601      	mov	r1, r0
 801bb2e:	ab03      	add	r3, sp, #12
 801bb30:	4805      	ldr	r0, [pc, #20]	@ (801bb48 <fiprintf+0x20>)
 801bb32:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb36:	6800      	ldr	r0, [r0, #0]
 801bb38:	9301      	str	r3, [sp, #4]
 801bb3a:	f7ff f9af 	bl	801ae9c <_vfiprintf_r>
 801bb3e:	b002      	add	sp, #8
 801bb40:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb44:	b003      	add	sp, #12
 801bb46:	4770      	bx	lr
 801bb48:	24000168 	.word	0x24000168

0801bb4c <abort>:
 801bb4c:	b508      	push	{r3, lr}
 801bb4e:	2006      	movs	r0, #6
 801bb50:	f000 f834 	bl	801bbbc <raise>
 801bb54:	2001      	movs	r0, #1
 801bb56:	f7ec fdb3 	bl	80086c0 <_exit>

0801bb5a <_malloc_usable_size_r>:
 801bb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb5e:	1f18      	subs	r0, r3, #4
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	bfbc      	itt	lt
 801bb64:	580b      	ldrlt	r3, [r1, r0]
 801bb66:	18c0      	addlt	r0, r0, r3
 801bb68:	4770      	bx	lr

0801bb6a <_raise_r>:
 801bb6a:	291f      	cmp	r1, #31
 801bb6c:	b538      	push	{r3, r4, r5, lr}
 801bb6e:	4605      	mov	r5, r0
 801bb70:	460c      	mov	r4, r1
 801bb72:	d904      	bls.n	801bb7e <_raise_r+0x14>
 801bb74:	2316      	movs	r3, #22
 801bb76:	6003      	str	r3, [r0, #0]
 801bb78:	f04f 30ff 	mov.w	r0, #4294967295
 801bb7c:	bd38      	pop	{r3, r4, r5, pc}
 801bb7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801bb80:	b112      	cbz	r2, 801bb88 <_raise_r+0x1e>
 801bb82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bb86:	b94b      	cbnz	r3, 801bb9c <_raise_r+0x32>
 801bb88:	4628      	mov	r0, r5
 801bb8a:	f000 f831 	bl	801bbf0 <_getpid_r>
 801bb8e:	4622      	mov	r2, r4
 801bb90:	4601      	mov	r1, r0
 801bb92:	4628      	mov	r0, r5
 801bb94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb98:	f000 b818 	b.w	801bbcc <_kill_r>
 801bb9c:	2b01      	cmp	r3, #1
 801bb9e:	d00a      	beq.n	801bbb6 <_raise_r+0x4c>
 801bba0:	1c59      	adds	r1, r3, #1
 801bba2:	d103      	bne.n	801bbac <_raise_r+0x42>
 801bba4:	2316      	movs	r3, #22
 801bba6:	6003      	str	r3, [r0, #0]
 801bba8:	2001      	movs	r0, #1
 801bbaa:	e7e7      	b.n	801bb7c <_raise_r+0x12>
 801bbac:	2100      	movs	r1, #0
 801bbae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	4798      	blx	r3
 801bbb6:	2000      	movs	r0, #0
 801bbb8:	e7e0      	b.n	801bb7c <_raise_r+0x12>
	...

0801bbbc <raise>:
 801bbbc:	4b02      	ldr	r3, [pc, #8]	@ (801bbc8 <raise+0xc>)
 801bbbe:	4601      	mov	r1, r0
 801bbc0:	6818      	ldr	r0, [r3, #0]
 801bbc2:	f7ff bfd2 	b.w	801bb6a <_raise_r>
 801bbc6:	bf00      	nop
 801bbc8:	24000168 	.word	0x24000168

0801bbcc <_kill_r>:
 801bbcc:	b538      	push	{r3, r4, r5, lr}
 801bbce:	4d07      	ldr	r5, [pc, #28]	@ (801bbec <_kill_r+0x20>)
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	4604      	mov	r4, r0
 801bbd4:	4608      	mov	r0, r1
 801bbd6:	4611      	mov	r1, r2
 801bbd8:	602b      	str	r3, [r5, #0]
 801bbda:	f7ec fd61 	bl	80086a0 <_kill>
 801bbde:	1c43      	adds	r3, r0, #1
 801bbe0:	d102      	bne.n	801bbe8 <_kill_r+0x1c>
 801bbe2:	682b      	ldr	r3, [r5, #0]
 801bbe4:	b103      	cbz	r3, 801bbe8 <_kill_r+0x1c>
 801bbe6:	6023      	str	r3, [r4, #0]
 801bbe8:	bd38      	pop	{r3, r4, r5, pc}
 801bbea:	bf00      	nop
 801bbec:	24002278 	.word	0x24002278

0801bbf0 <_getpid_r>:
 801bbf0:	f7ec bd4e 	b.w	8008690 <_getpid>

0801bbf4 <_init>:
 801bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbf6:	bf00      	nop
 801bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbfa:	bc08      	pop	{r3}
 801bbfc:	469e      	mov	lr, r3
 801bbfe:	4770      	bx	lr

0801bc00 <_fini>:
 801bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc02:	bf00      	nop
 801bc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc06:	bc08      	pop	{r3}
 801bc08:	469e      	mov	lr, r3
 801bc0a:	4770      	bx	lr
