
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001342c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08013700  08013700  00014700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013bb8  08013bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013bc0  08013bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013bc4  08013bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08013bc8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b38  240001d8  08013da0  000151d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d10  08013da0  00015d10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000151d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026ab0  00000000  00000000  00015206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ef1  00000000  00000000  0003bcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002058  00000000  00000000  0003fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000196f  00000000  00000000  00041c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005e20  00000000  00000000  0004356f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c145  00000000  00000000  0004938f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001738d5  00000000  00000000  000754d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e8da9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a1c0  00000000  00000000  001e8dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001f2fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080136e4 	.word	0x080136e4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	080136e4 	.word	0x080136e4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	e000      	b.n	8000ac4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ace:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc7 	bl	8000a98 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x16>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b28:	f001 fac2 	bl	80020b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f002 fd04 	bl	8003538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f84a 	bl	8000bc8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b34:	f000 f8b8 	bl	8000ca8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f001 f99a 	bl	8001e70 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b3c:	f000 fa8a 	bl	8001054 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8000b40:	f000 f8e2 	bl	8000d08 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b44:	f000 f9c6 	bl	8000ed4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b48:	f000 fa04 	bl	8000f54 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000b4c:	f000 fa42 	bl	8000fd4 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000b50:	f000 faa4 	bl	800109c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b54:	f000 faf8 	bl	8001148 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b58:	f000 fba2 	bl	80012a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b5c:	f000 fc64 	bl	8001428 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 fcbc 	bl	80014dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 fd14 	bl	8001590 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b68:	f000 fd6c 	bl	8001644 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000b6c:	f000 fdc4 	bl	80016f8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000b70:	f000 fe52 	bl	8001818 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000b74:	f000 feaa 	bl	80018cc <MX_TIM15_Init>
  MX_UART4_Init();
 8000b78:	f000 ff2e 	bl	80019d8 <MX_UART4_Init>
  MX_UART5_Init();
 8000b7c:	f000 ff78 	bl	8001a70 <MX_UART5_Init>
  MX_UART7_Init();
 8000b80:	f000 ffc2 	bl	8001b08 <MX_UART7_Init>
  MX_UART8_Init();
 8000b84:	f001 f80c 	bl	8001ba0 <MX_UART8_Init>
  MX_USART1_Init();
 8000b88:	f001 f858 	bl	8001c3c <MX_USART1_Init>
  MX_USART2_Init();
 8000b8c:	f001 f8b4 	bl	8001cf8 <MX_USART2_Init>
  MX_USART3_Init();
 8000b90:	f001 f910 	bl	8001db4 <MX_USART3_Init>
  MX_ADC2_Init();
 8000b94:	f000 f934 	bl	8000e00 <MX_ADC2_Init>
  MX_SPI4_Init();
 8000b98:	f000 fb2c 	bl	80011f4 <MX_SPI4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++; //Increment count variable
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <main+0x9c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <main+0x9c>)
 8000ba6:	701a      	strb	r2, [r3, #0]
	  printf("Hello World from Aerosentinel Argus Navigation Module! Count =%d \n", count); // Hello World Test
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <main+0x9c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <main+0xa0>)
 8000bb0:	f00f fa0c 	bl	800ffcc <iprintf>
	  HAL_Delay(250);
 8000bb4:	20fa      	movs	r0, #250	@ 0xfa
 8000bb6:	f002 fd51 	bl	800365c <HAL_Delay>
	  count++; //Increment count variable
 8000bba:	bf00      	nop
 8000bbc:	e7ee      	b.n	8000b9c <main+0x78>
 8000bbe:	bf00      	nop
 8000bc0:	24000bb4 	.word	0x24000bb4
 8000bc4:	08013700 	.word	0x08013700

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09c      	sub	sp, #112	@ 0x70
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd2:	224c      	movs	r2, #76	@ 0x4c
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00f fa6d 	bl	80100b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2220      	movs	r2, #32
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f00f fa67 	bl	80100b6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f005 fab1 	bl	8006150 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c0e:	bf00      	nop
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c1c:	d1f8      	bne.n	8000c10 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c26:	2340      	movs	r3, #64	@ 0x40
 8000c28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c32:	2304      	movs	r3, #4
 8000c34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c36:	230c      	movs	r3, #12
 8000c38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c46:	230c      	movs	r3, #12
 8000c48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c56:	4618      	mov	r0, r3
 8000c58:	f005 fab4 	bl	80061c4 <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c62:	f001 fa51 	bl	8002108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	233f      	movs	r3, #63	@ 0x3f
 8000c68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c7a:	2340      	movs	r3, #64	@ 0x40
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c84:	2340      	movs	r3, #64	@ 0x40
 8000c86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f005 fe73 	bl	8006978 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c98:	f001 fa36 	bl	8002108 <Error_Handler>
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3770      	adds	r7, #112	@ 0x70
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024800 	.word	0x58024800

08000ca8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ae      	sub	sp, #184	@ 0xb8
 8000cac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	22b8      	movs	r2, #184	@ 0xb8
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00f f9fe 	bl	80100b6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cda:	23c0      	movs	r3, #192	@ 0xc0
 8000cdc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f006 f9ce 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cfa:	f001 fa05 	bl	8002108 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	37b8      	adds	r7, #184	@ 0xb8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	@ 0x30
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2224      	movs	r2, #36	@ 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00f f9c8 	bl	80100b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d26:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d28:	4a32      	ldr	r2, [pc, #200]	@ (8000df4 <MX_ADC1_Init+0xec>)
 8000d2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d2e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d66:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8c:	4818      	ldr	r0, [pc, #96]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d8e:	f002 fecf 	bl	8003b30 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d98:	f001 f9b6 	bl	8002108 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000da8:	f003 ff0e 	bl	8004bc8 <HAL_ADCEx_MultiModeConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000db2:	f001 f9a9 	bl	8002108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <MX_ADC1_Init+0xf0>)
 8000db8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dba:	2306      	movs	r3, #6
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_ADC1_Init+0xf4>)
 8000dc4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000dda:	f003 f8b1 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000de4:	f001 f990 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	@ 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	240001f4 	.word	0x240001f4
 8000df4:	40022000 	.word	0x40022000
 8000df8:	10c00010 	.word	0x10c00010
 8000dfc:	47ff0000 	.word	0x47ff0000

08000e00 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2224      	movs	r2, #36	@ 0x24
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00f f952 	bl	80100b6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e14:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec8 <MX_ADC2_Init+0xc8>)
 8000e16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e1e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e26:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e78:	4812      	ldr	r0, [pc, #72]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000e7a:	f002 fe59 	bl	8003b30 <HAL_ADC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e84:	f001 f940 	bl	8002108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <MX_ADC2_Init+0xcc>)
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_ADC2_Init+0xd0>)
 8000e96:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <MX_ADC2_Init+0xc4>)
 8000eac:	f003 f848 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000eb6:	f001 f927 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	@ 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	24000264 	.word	0x24000264
 8000ec8:	40022100 	.word	0x40022100
 8000ecc:	14f00020 	.word	0x14f00020
 8000ed0:	47ff0000 	.word	0x47ff0000

08000ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <MX_I2C1_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <MX_I2C1_Init+0x7c>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0e:	480e      	ldr	r0, [pc, #56]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000f10:	f004 ffea 	bl	8005ee8 <HAL_I2C_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f1a:	f001 f8f5 	bl	8002108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000f22:	f005 f87d 	bl	8006020 <HAL_I2CEx_ConfigAnalogFilter>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f2c:	f001 f8ec 	bl	8002108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_I2C1_Init+0x74>)
 8000f34:	f005 f8bf 	bl	80060b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f001 f8e3 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	240002d4 	.word	0x240002d4
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	00707cbb 	.word	0x00707cbb

08000f54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <MX_I2C2_Init+0x78>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <MX_I2C2_Init+0x7c>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000f90:	f004 ffaa 	bl	8005ee8 <HAL_I2C_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f9a:	f001 f8b5 	bl	8002108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000fa2:	f005 f83d 	bl	8006020 <HAL_I2CEx_ConfigAnalogFilter>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fac:	f001 f8ac 	bl	8002108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_I2C2_Init+0x74>)
 8000fb4:	f005 f87f 	bl	80060b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fbe:	f001 f8a3 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	24000328 	.word	0x24000328
 8000fcc:	40005800 	.word	0x40005800
 8000fd0:	00707cbb 	.word	0x00707cbb

08000fd4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	@ (800104c <MX_I2C4_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <MX_I2C4_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_I2C4_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_I2C4_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001010:	f004 ff6a 	bl	8005ee8 <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800101a:	f001 f875 	bl	8002108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001022:	f004 fffd 	bl	8006020 <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800102c:	f001 f86c 	bl	8002108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_I2C4_Init+0x74>)
 8001034:	f005 f83f 	bl	80060b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800103e:	f001 f863 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2400037c 	.word	0x2400037c
 800104c:	58001c00 	.word	0x58001c00
 8001050:	00707cbb 	.word	0x00707cbb

08001054 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 800105a:	4a0f      	ldr	r2, [pc, #60]	@ (8001098 <MX_SDMMC1_SD_Init+0x44>)
 800105c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 800106c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001070:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 8001080:	f008 fbec 	bl	800985c <HAL_SD_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800108a:	f001 f83d 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	240003d0 	.word	0x240003d0
 8001098:	52007000 	.word	0x52007000

0800109c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010a2:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <MX_SPI1_Init+0xa8>)
 80010a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ae:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010da:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_SPI1_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_SPI1_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_SPI1_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_SPI1_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_SPI1_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_SPI1_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_SPI1_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_SPI1_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_SPI1_Init+0xa4>)
 800112c:	f009 fc04 	bl	800a938 <HAL_SPI_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001136:	f000 ffe7 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2400044c 	.word	0x2400044c
 8001144:	40013000 	.word	0x40013000

08001148 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <MX_SPI2_Init+0xa4>)
 800114e:	4a28      	ldr	r2, [pc, #160]	@ (80011f0 <MX_SPI2_Init+0xa8>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <MX_SPI2_Init+0xa4>)
 8001154:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001158:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <MX_SPI2_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <MX_SPI2_Init+0xa4>)
 8001162:	2203      	movs	r2, #3
 8001164:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001166:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <MX_SPI2_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_SPI2_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001172:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <MX_SPI2_Init+0xa4>)
 8001174:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001178:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_SPI2_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_SPI2_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <MX_SPI2_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_SPI2_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_SPI2_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <MX_SPI2_Init+0xa4>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800119e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_SPI2_Init+0xa4>)
 80011d8:	f009 fbae 	bl	800a938 <HAL_SPI_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80011e2:	f000 ff91 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	240004d4 	.word	0x240004d4
 80011f0:	40003800 	.word	0x40003800

080011f4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <MX_SPI4_Init+0xa4>)
 80011fa:	4a28      	ldr	r2, [pc, #160]	@ (800129c <MX_SPI4_Init+0xa8>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001200:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001204:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800120e:	2203      	movs	r2, #3
 8001210:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001220:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001224:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800124a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001272:	2200      	movs	r2, #0
 8001274:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001278:	2200      	movs	r2, #0
 800127a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_SPI4_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_SPI4_Init+0xa4>)
 8001284:	f009 fb58 	bl	800a938 <HAL_SPI_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800128e:	f000 ff3b 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2400055c 	.word	0x2400055c
 800129c:	40013400 	.word	0x40013400

080012a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09c      	sub	sp, #112	@ 0x70
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2234      	movs	r2, #52	@ 0x34
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f00e feeb 	bl	80100b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001420 <MX_TIM1_Init+0x180>)
 80012e2:	4a50      	ldr	r2, [pc, #320]	@ (8001424 <MX_TIM1_Init+0x184>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001420 <MX_TIM1_Init+0x180>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001420 <MX_TIM1_Init+0x180>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001420 <MX_TIM1_Init+0x180>)
 80012f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <MX_TIM1_Init+0x180>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001300:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <MX_TIM1_Init+0x180>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <MX_TIM1_Init+0x180>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130c:	4844      	ldr	r0, [pc, #272]	@ (8001420 <MX_TIM1_Init+0x180>)
 800130e:	f009 fc52 	bl	800abb6 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001318:	f000 fef6 	bl	8002108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001326:	4619      	mov	r1, r3
 8001328:	483d      	ldr	r0, [pc, #244]	@ (8001420 <MX_TIM1_Init+0x180>)
 800132a:	f009 fe07 	bl	800af3c <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001334:	f000 fee8 	bl	8002108 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001338:	4839      	ldr	r0, [pc, #228]	@ (8001420 <MX_TIM1_Init+0x180>)
 800133a:	f009 fc93 	bl	800ac64 <HAL_TIM_PWM_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001344:	f000 fee0 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001358:	4619      	mov	r1, r3
 800135a:	4831      	ldr	r0, [pc, #196]	@ (8001420 <MX_TIM1_Init+0x180>)
 800135c:	f00a fb0c 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001366:	f000 fecf 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	@ 0x60
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001386:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4824      	ldr	r0, [pc, #144]	@ (8001420 <MX_TIM1_Init+0x180>)
 8001390:	f009 fcc0 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800139a:	f000 feb5 	bl	8002108 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	481e      	ldr	r0, [pc, #120]	@ (8001420 <MX_TIM1_Init+0x180>)
 80013a8:	f009 fcb4 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80013b2:	f000 fea9 	bl	8002108 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013ba:	2208      	movs	r2, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	4818      	ldr	r0, [pc, #96]	@ (8001420 <MX_TIM1_Init+0x180>)
 80013c0:	f009 fca8 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80013ca:	f000 fe9d 	bl	8002108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM1_Init+0x180>)
 8001404:	f00a fb54 	bl	800bab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800140e:	f000 fe7b 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM1_Init+0x180>)
 8001414:	f001 fb04 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3770      	adds	r7, #112	@ 0x70
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	240005e4 	.word	0x240005e4
 8001424:	40010000 	.word	0x40010000

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 800144e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001474:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001476:	f009 fbf5 	bl	800ac64 <HAL_TIM_PWM_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 fe42 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001494:	f00a fa70 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800149e:	f000 fe33 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a2:	2360      	movs	r3, #96	@ 0x60
 80014a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 80014ba:	f009 fc2b 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014c4:	f000 fe20 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c8:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 80014ca:	f001 faa9 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	@ 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	24000630 	.word	0x24000630

080014dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <MX_TIM3_Init+0xac>)
 8001502:	4a22      	ldr	r2, [pc, #136]	@ (800158c <MX_TIM3_Init+0xb0>)
 8001504:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <MX_TIM3_Init+0xac>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <MX_TIM3_Init+0xac>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_TIM3_Init+0xac>)
 8001514:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001518:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <MX_TIM3_Init+0xac>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <MX_TIM3_Init+0xac>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001526:	4818      	ldr	r0, [pc, #96]	@ (8001588 <MX_TIM3_Init+0xac>)
 8001528:	f009 fb9c 	bl	800ac64 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001532:	f000 fde9 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4810      	ldr	r0, [pc, #64]	@ (8001588 <MX_TIM3_Init+0xac>)
 8001546:	f00a fa17 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001550:	f000 fdda 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	@ 0x60
 8001556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	4807      	ldr	r0, [pc, #28]	@ (8001588 <MX_TIM3_Init+0xac>)
 800156c:	f009 fbd2 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001576:	f000 fdc7 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800157a:	4803      	ldr	r0, [pc, #12]	@ (8001588 <MX_TIM3_Init+0xac>)
 800157c:	f001 fa50 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2400067c 	.word	0x2400067c
 800158c:	40000400 	.word	0x40000400

08001590 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <MX_TIM4_Init+0xac>)
 80015b6:	4a22      	ldr	r2, [pc, #136]	@ (8001640 <MX_TIM4_Init+0xb0>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <MX_TIM4_Init+0xac>)
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <MX_TIM4_Init+0xac>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <MX_TIM4_Init+0xac>)
 80015c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <MX_TIM4_Init+0xac>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <MX_TIM4_Init+0xac>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015da:	4818      	ldr	r0, [pc, #96]	@ (800163c <MX_TIM4_Init+0xac>)
 80015dc:	f009 fb42 	bl	800ac64 <HAL_TIM_PWM_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80015e6:	f000 fd8f 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4810      	ldr	r0, [pc, #64]	@ (800163c <MX_TIM4_Init+0xac>)
 80015fa:	f00a f9bd 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001604:	f000 fd80 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	2360      	movs	r3, #96	@ 0x60
 800160a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	@ (800163c <MX_TIM4_Init+0xac>)
 8001620:	f009 fb78 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800162a:	f000 fd6d 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800162e:	4803      	ldr	r0, [pc, #12]	@ (800163c <MX_TIM4_Init+0xac>)
 8001630:	f001 f9f6 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	@ 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	240006c8 	.word	0x240006c8
 8001640:	40000800 	.word	0x40000800

08001644 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
 8001664:	615a      	str	r2, [r3, #20]
 8001666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <MX_TIM5_Init+0xac>)
 800166a:	4a22      	ldr	r2, [pc, #136]	@ (80016f4 <MX_TIM5_Init+0xb0>)
 800166c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800166e:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <MX_TIM5_Init+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <MX_TIM5_Init+0xac>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_TIM5_Init+0xac>)
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_TIM5_Init+0xac>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <MX_TIM5_Init+0xac>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800168e:	4818      	ldr	r0, [pc, #96]	@ (80016f0 <MX_TIM5_Init+0xac>)
 8001690:	f009 fae8 	bl	800ac64 <HAL_TIM_PWM_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800169a:	f000 fd35 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4810      	ldr	r0, [pc, #64]	@ (80016f0 <MX_TIM5_Init+0xac>)
 80016ae:	f00a f963 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80016b8:	f000 fd26 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	2360      	movs	r3, #96	@ 0x60
 80016be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4807      	ldr	r0, [pc, #28]	@ (80016f0 <MX_TIM5_Init+0xac>)
 80016d4:	f009 fb1e 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80016de:	f000 fd13 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016e2:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <MX_TIM5_Init+0xac>)
 80016e4:	f001 f99c 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	@ 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	24000714 	.word	0x24000714
 80016f4:	40000c00 	.word	0x40000c00

080016f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b098      	sub	sp, #96	@ 0x60
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2234      	movs	r2, #52	@ 0x34
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f00e fcc6 	bl	80100b6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800172a:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <MX_TIM8_Init+0x118>)
 800172c:	4a39      	ldr	r2, [pc, #228]	@ (8001814 <MX_TIM8_Init+0x11c>)
 800172e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001730:	4b37      	ldr	r3, [pc, #220]	@ (8001810 <MX_TIM8_Init+0x118>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b36      	ldr	r3, [pc, #216]	@ (8001810 <MX_TIM8_Init+0x118>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800173c:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <MX_TIM8_Init+0x118>)
 800173e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001742:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b32      	ldr	r3, [pc, #200]	@ (8001810 <MX_TIM8_Init+0x118>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800174a:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <MX_TIM8_Init+0x118>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b2f      	ldr	r3, [pc, #188]	@ (8001810 <MX_TIM8_Init+0x118>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001756:	482e      	ldr	r0, [pc, #184]	@ (8001810 <MX_TIM8_Init+0x118>)
 8001758:	f009 fa84 	bl	800ac64 <HAL_TIM_PWM_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 fcd1 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001772:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001776:	4619      	mov	r1, r3
 8001778:	4825      	ldr	r0, [pc, #148]	@ (8001810 <MX_TIM8_Init+0x118>)
 800177a:	f00a f8fd 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001784:	f000 fcc0 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001788:	2360      	movs	r3, #96	@ 0x60
 800178a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	4818      	ldr	r0, [pc, #96]	@ (8001810 <MX_TIM8_Init+0x118>)
 80017ae:	f009 fab1 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80017b8:	f000 fca6 	bl	8002108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4807      	ldr	r0, [pc, #28]	@ (8001810 <MX_TIM8_Init+0x118>)
 80017f2:	f00a f95d 	bl	800bab0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80017fc:	f000 fc84 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001800:	4803      	ldr	r0, [pc, #12]	@ (8001810 <MX_TIM8_Init+0x118>)
 8001802:	f001 f90d 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 8001806:	bf00      	nop
 8001808:	3760      	adds	r7, #96	@ 0x60
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24000760 	.word	0x24000760
 8001814:	40010400 	.word	0x40010400

08001818 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800183c:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <MX_TIM12_Init+0xac>)
 800183e:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <MX_TIM12_Init+0xb0>)
 8001840:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001842:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <MX_TIM12_Init+0xac>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <MX_TIM12_Init+0xac>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <MX_TIM12_Init+0xac>)
 8001850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001854:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_TIM12_Init+0xac>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <MX_TIM12_Init+0xac>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001862:	4818      	ldr	r0, [pc, #96]	@ (80018c4 <MX_TIM12_Init+0xac>)
 8001864:	f009 f9fe 	bl	800ac64 <HAL_TIM_PWM_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800186e:	f000 fc4b 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	4810      	ldr	r0, [pc, #64]	@ (80018c4 <MX_TIM12_Init+0xac>)
 8001882:	f00a f879 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800188c:	f000 fc3c 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001890:	2360      	movs	r3, #96	@ 0x60
 8001892:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <MX_TIM12_Init+0xac>)
 80018a8:	f009 fa34 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 80018b2:	f000 fc29 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018b6:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <MX_TIM12_Init+0xac>)
 80018b8:	f001 f8b2 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	@ 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	240007ac 	.word	0x240007ac
 80018c8:	40001800 	.word	0x40001800

080018cc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b098      	sub	sp, #96	@ 0x60
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2234      	movs	r2, #52	@ 0x34
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f00e fbdc 	bl	80100b6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018fe:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <MX_TIM15_Init+0x104>)
 8001900:	4a34      	ldr	r2, [pc, #208]	@ (80019d4 <MX_TIM15_Init+0x108>)
 8001902:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001904:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <MX_TIM15_Init+0x104>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <MX_TIM15_Init+0x104>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001910:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <MX_TIM15_Init+0x104>)
 8001912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001916:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <MX_TIM15_Init+0x104>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <MX_TIM15_Init+0x104>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <MX_TIM15_Init+0x104>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800192a:	4829      	ldr	r0, [pc, #164]	@ (80019d0 <MX_TIM15_Init+0x104>)
 800192c:	f009 f99a 	bl	800ac64 <HAL_TIM_PWM_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001936:	f000 fbe7 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001942:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001946:	4619      	mov	r1, r3
 8001948:	4821      	ldr	r0, [pc, #132]	@ (80019d0 <MX_TIM15_Init+0x104>)
 800194a:	f00a f815 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001954:	f000 fbd8 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001958:	2360      	movs	r3, #96	@ 0x60
 800195a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001960:	2300      	movs	r3, #0
 8001962:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001964:	2300      	movs	r3, #0
 8001966:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001974:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <MX_TIM15_Init+0x104>)
 800197e:	f009 f9c9 	bl	800ad14 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001988:	f000 fbbe 	bl	8002108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <MX_TIM15_Init+0x104>)
 80019b4:	f00a f87c 	bl	800bab0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80019be:	f000 fba3 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019c2:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <MX_TIM15_Init+0x104>)
 80019c4:	f001 f82c 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 80019c8:	bf00      	nop
 80019ca:	3760      	adds	r7, #96	@ 0x60
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240007f8 	.word	0x240007f8
 80019d4:	40014000 	.word	0x40014000

080019d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <MX_UART4_Init+0x90>)
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <MX_UART4_Init+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019e2:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <MX_UART4_Init+0x90>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <MX_UART4_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <MX_UART4_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <MX_UART4_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <MX_UART4_Init+0x90>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a20:	4811      	ldr	r0, [pc, #68]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a22:	f00a f8d1 	bl	800bbc8 <HAL_UART_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001a2c:	f000 fb6c 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a34:	f00b fe16 	bl	800d664 <HAL_UARTEx_SetTxFifoThreshold>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a3e:	f000 fb63 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a46:	f00b fe4b 	bl	800d6e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a50:	f000 fb5a 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_UART4_Init+0x90>)
 8001a56:	f00b fdcc 	bl	800d5f2 <HAL_UARTEx_DisableFifoMode>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a60:	f000 fb52 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	24000844 	.word	0x24000844
 8001a6c:	40004c00 	.word	0x40004c00

08001a70 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a74:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001a76:	4a23      	ldr	r2, [pc, #140]	@ (8001b04 <MX_UART5_Init+0x94>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aac:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ab8:	4811      	ldr	r0, [pc, #68]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001aba:	f00a f885 	bl	800bbc8 <HAL_UART_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f000 fb20 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001acc:	f00b fdca 	bl	800d664 <HAL_UARTEx_SetTxFifoThreshold>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001ad6:	f000 fb17 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4808      	ldr	r0, [pc, #32]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001ade:	f00b fdff 	bl	800d6e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001ae8:	f000 fb0e 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	@ (8001b00 <MX_UART5_Init+0x90>)
 8001aee:	f00b fd80 	bl	800d5f2 <HAL_UARTEx_DisableFifoMode>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001af8:	f000 fb06 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	240008d8 	.word	0x240008d8
 8001b04:	40005000 	.word	0x40005000

08001b08 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b0c:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b0e:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <MX_UART7_Init+0x94>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b12:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b44:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b50:	4811      	ldr	r0, [pc, #68]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b52:	f00a f839 	bl	800bbc8 <HAL_UART_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001b5c:	f000 fad4 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b60:	2100      	movs	r1, #0
 8001b62:	480d      	ldr	r0, [pc, #52]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b64:	f00b fd7e 	bl	800d664 <HAL_UARTEx_SetTxFifoThreshold>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001b6e:	f000 facb 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b72:	2100      	movs	r1, #0
 8001b74:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b76:	f00b fdb3 	bl	800d6e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001b80:	f000 fac2 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <MX_UART7_Init+0x90>)
 8001b86:	f00b fd34 	bl	800d5f2 <HAL_UARTEx_DisableFifoMode>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001b90:	f000 faba 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2400096c 	.word	0x2400096c
 8001b9c:	40007800 	.word	0x40007800

08001ba0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001ba6:	4a24      	ldr	r2, [pc, #144]	@ (8001c38 <MX_UART8_Init+0x98>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bcc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001bd0:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001bea:	4812      	ldr	r0, [pc, #72]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bec:	f009 ffec 	bl	800bbc8 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8001bf6:	f000 fa87 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001bfe:	f00b fd31 	bl	800d664 <HAL_UARTEx_SetTxFifoThreshold>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8001c08:	f000 fa7e 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001c10:	f00b fd66 	bl	800d6e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8001c1a:	f000 fa75 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_UART8_Init+0x94>)
 8001c20:	f00b fce7 	bl	800d5f2 <HAL_UARTEx_DisableFifoMode>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8001c2a:	f000 fa6d 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	24000a00 	.word	0x24000a00
 8001c38:	40007c00 	.word	0x40007c00

08001c3c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c42:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf4 <MX_USART1_Init+0xb8>)
 8001c44:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001c46:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001c54:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001c5a:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001c60:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001c66:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001c72:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001c84:	481a      	ldr	r0, [pc, #104]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c86:	f00b fdb7 	bl	800d7f8 <HAL_USART_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001c90:	f000 fa3a 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c94:	2100      	movs	r1, #0
 8001c96:	4816      	ldr	r0, [pc, #88]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001c98:	f00c fcde 	bl	800e658 <HAL_USARTEx_SetTxFifoThreshold>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001ca2:	f000 fa31 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4811      	ldr	r0, [pc, #68]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001caa:	f00c fd13 	bl	800e6d4 <HAL_USARTEx_SetRxFifoThreshold>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001cb4:	f000 fa28 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	480d      	ldr	r0, [pc, #52]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001cbc:	f00c fc56 	bl	800e56c <HAL_USARTEx_ConfigNSS>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8001cc6:	f000 fa1f 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8001cca:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001ccc:	f00c fc8b 	bl	800e5e6 <HAL_USARTEx_DisableFifoMode>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8001cd6:	f000 fa17 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_USART1_Init+0xb4>)
 8001cdc:	f00c fbf1 	bl	800e4c2 <HAL_USARTEx_EnableSlaveMode>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8001ce6:	f000 fa0f 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	24000a94 	.word	0x24000a94
 8001cf4:	40011000 	.word	0x40011000

08001cf8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001db0 <MX_USART2_Init+0xb8>)
 8001d00:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001d02:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001d0a:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001d10:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001d16:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001d28:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001d40:	481a      	ldr	r0, [pc, #104]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d42:	f00b fd59 	bl	800d7f8 <HAL_USART_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8001d4c:	f000 f9dc 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	4816      	ldr	r0, [pc, #88]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d54:	f00c fc80 	bl	800e658 <HAL_USARTEx_SetTxFifoThreshold>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8001d5e:	f000 f9d3 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d62:	2100      	movs	r1, #0
 8001d64:	4811      	ldr	r0, [pc, #68]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d66:	f00c fcb5 	bl	800e6d4 <HAL_USARTEx_SetRxFifoThreshold>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8001d70:	f000 f9ca 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8001d74:	2100      	movs	r1, #0
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d78:	f00c fbf8 	bl	800e56c <HAL_USARTEx_ConfigNSS>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 8001d82:	f000 f9c1 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8001d86:	4809      	ldr	r0, [pc, #36]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d88:	f00c fc2d 	bl	800e5e6 <HAL_USARTEx_DisableFifoMode>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 8001d92:	f000 f9b9 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <MX_USART2_Init+0xb4>)
 8001d98:	f00c fb93 	bl	800e4c2 <HAL_USARTEx_EnableSlaveMode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_Init+0xae>
  {
    Error_Handler();
 8001da2:	f000 f9b1 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	24000af4 	.word	0x24000af4
 8001db0:	40004400 	.word	0x40004400

08001db4 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001db8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dba:	4a2c      	ldr	r2, [pc, #176]	@ (8001e6c <MX_USART3_Init+0xb8>)
 8001dbc:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dc4:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001dfc:	481a      	ldr	r0, [pc, #104]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001dfe:	f00b fcfb 	bl	800d7f8 <HAL_USART_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8001e08:	f000 f97e 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4816      	ldr	r0, [pc, #88]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001e10:	f00c fc22 	bl	800e658 <HAL_USARTEx_SetTxFifoThreshold>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8001e1a:	f000 f975 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001e22:	f00c fc57 	bl	800e6d4 <HAL_USARTEx_SetRxFifoThreshold>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001e2c:	f000 f96c 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001e34:	f00c fb9a 	bl	800e56c <HAL_USARTEx_ConfigNSS>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8001e3e:	f000 f963 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001e42:	4809      	ldr	r0, [pc, #36]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001e44:	f00c fbcf 	bl	800e5e6 <HAL_USARTEx_DisableFifoMode>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8001e4e:	f000 f95b 	bl	8002108 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <MX_USART3_Init+0xb4>)
 8001e54:	f00c fb35 	bl	800e4c2 <HAL_USARTEx_EnableSlaveMode>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8001e5e:	f000 f953 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000b54 	.word	0x24000b54
 8001e6c:	40004800 	.word	0x40004800

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	@ 0x30
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e86:	4b84      	ldr	r3, [pc, #528]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8c:	4a82      	ldr	r2, [pc, #520]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e96:	4b80      	ldr	r3, [pc, #512]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea4:	4b7c      	ldr	r3, [pc, #496]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb4:	4b78      	ldr	r3, [pc, #480]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b75      	ldr	r3, [pc, #468]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	4a73      	ldr	r2, [pc, #460]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed2:	4b71      	ldr	r3, [pc, #452]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef0:	4b69      	ldr	r3, [pc, #420]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efe:	4b66      	ldr	r3, [pc, #408]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f04:	4a64      	ldr	r2, [pc, #400]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f0e:	4b62      	ldr	r3, [pc, #392]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	4a5d      	ldr	r2, [pc, #372]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002098 <MX_GPIO_Init+0x228>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4857      	ldr	r0, [pc, #348]	@ (800209c <MX_GPIO_Init+0x22c>)
 8001f40:	f003 ffb8 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2101      	movs	r1, #1
 8001f48:	4855      	ldr	r0, [pc, #340]	@ (80020a0 <MX_GPIO_Init+0x230>)
 8001f4a:	f003 ffb3 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f54:	4853      	ldr	r0, [pc, #332]	@ (80020a4 <MX_GPIO_Init+0x234>)
 8001f56:	f003 ffad 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001f5a:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	484c      	ldr	r0, [pc, #304]	@ (80020a0 <MX_GPIO_Init+0x230>)
 8001f70:	f003 fdf8 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE10 PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_12;
 8001f74:	f245 4308 	movw	r3, #21512	@ 0x5408
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	4844      	ldr	r0, [pc, #272]	@ (800209c <MX_GPIO_Init+0x22c>)
 8001f8a:	f003 fdeb 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001f8e:	2310      	movs	r3, #16
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	483d      	ldr	r0, [pc, #244]	@ (800209c <MX_GPIO_Init+0x22c>)
 8001fa6:	f003 fddd 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001faa:	2310      	movs	r3, #16
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	483a      	ldr	r0, [pc, #232]	@ (80020a8 <MX_GPIO_Init+0x238>)
 8001fbe:	f003 fdd1 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4834      	ldr	r0, [pc, #208]	@ (80020a8 <MX_GPIO_Init+0x238>)
 8001fd6:	f003 fdc5 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	482b      	ldr	r0, [pc, #172]	@ (80020a0 <MX_GPIO_Init+0x230>)
 8001ff2:	f003 fdb7 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4825      	ldr	r0, [pc, #148]	@ (80020a0 <MX_GPIO_Init+0x230>)
 800200a:	f003 fdab 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800200e:	2304      	movs	r3, #4
 8002010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002012:	2303      	movs	r3, #3
 8002014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	4820      	ldr	r0, [pc, #128]	@ (80020a4 <MX_GPIO_Init+0x234>)
 8002022:	f003 fd9f 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4819      	ldr	r0, [pc, #100]	@ (80020a4 <MX_GPIO_Init+0x234>)
 8002040:	f003 fd90 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002044:	2302      	movs	r3, #2
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4815      	ldr	r0, [pc, #84]	@ (80020ac <MX_GPIO_Init+0x23c>)
 8002058:	f003 fd84 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800205c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	4619      	mov	r1, r3
 8002070:	480a      	ldr	r0, [pc, #40]	@ (800209c <MX_GPIO_Init+0x22c>)
 8002072:	f003 fd77 	bl	8005b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002076:	2308      	movs	r3, #8
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207a:	2303      	movs	r3, #3
 800207c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	4808      	ldr	r0, [pc, #32]	@ (80020ac <MX_GPIO_Init+0x23c>)
 800208a:	f003 fd6b 	bl	8005b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800208e:	bf00      	nop
 8002090:	3730      	adds	r7, #48	@ 0x30
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	58024400 	.word	0x58024400
 800209c:	58021000 	.word	0x58021000
 80020a0:	58020800 	.word	0x58020800
 80020a4:	58020400 	.word	0x58020400
 80020a8:	58020c00 	.word	0x58020c00
 80020ac:	58020000 	.word	0x58020000

080020b0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020b6:	463b      	mov	r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020c2:	f002 ff73 	bl	8004fac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020c6:	2301      	movs	r3, #1
 80020c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020d2:	231f      	movs	r3, #31
 80020d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020d6:	2387      	movs	r3, #135	@ 0x87
 80020d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020da:	2300      	movs	r3, #0
 80020dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020de:	2300      	movs	r3, #0
 80020e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80020e2:	2301      	movs	r3, #1
 80020e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020f2:	463b      	mov	r3, r7
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 ff91 	bl	800501c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80020fa:	2004      	movs	r0, #4
 80020fc:	f002 ff6e 	bl	8004fdc <HAL_MPU_Enable>

}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <Error_Handler+0x8>

08002114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_MspInit+0x30>)
 800211c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002120:	4a08      	ldr	r2, [pc, #32]	@ (8002144 <HAL_MspInit+0x30>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_MspInit+0x30>)
 800212c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	58024400 	.word	0x58024400

08002148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	@ 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a39      	ldr	r2, [pc, #228]	@ (800224c <HAL_ADC_MspInit+0x104>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d133      	bne.n	80021d2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800216a:	4b39      	ldr	r3, [pc, #228]	@ (8002250 <HAL_ADC_MspInit+0x108>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	4a37      	ldr	r2, [pc, #220]	@ (8002250 <HAL_ADC_MspInit+0x108>)
 8002172:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002174:	4b36      	ldr	r3, [pc, #216]	@ (8002250 <HAL_ADC_MspInit+0x108>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d10e      	bne.n	800219a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800217c:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 800217e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002182:	4a34      	ldr	r2, [pc, #208]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 8002184:	f043 0320 	orr.w	r3, r3, #32
 8002188:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800218c:	4b31      	ldr	r3, [pc, #196]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 800218e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	4b2e      	ldr	r3, [pc, #184]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021b8:	2330      	movs	r3, #48	@ 0x30
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021bc:	2303      	movs	r3, #3
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4823      	ldr	r0, [pc, #140]	@ (8002258 <HAL_ADC_MspInit+0x110>)
 80021cc:	f003 fcca 	bl	8005b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021d0:	e037      	b.n	8002242 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a21      	ldr	r2, [pc, #132]	@ (800225c <HAL_ADC_MspInit+0x114>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d132      	bne.n	8002242 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <HAL_ADC_MspInit+0x108>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002250 <HAL_ADC_MspInit+0x108>)
 80021e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_ADC_MspInit+0x108>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10e      	bne.n	800220c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 80021f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021f4:	4a17      	ldr	r2, [pc, #92]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 80021f6:	f043 0320 	orr.w	r3, r3, #32
 80021fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 8002200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002212:	4a10      	ldr	r2, [pc, #64]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800221c:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <HAL_ADC_MspInit+0x10c>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800222a:	2303      	movs	r3, #3
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222e:	2303      	movs	r3, #3
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4808      	ldr	r0, [pc, #32]	@ (8002260 <HAL_ADC_MspInit+0x118>)
 800223e:	f003 fc91 	bl	8005b64 <HAL_GPIO_Init>
}
 8002242:	bf00      	nop
 8002244:	3730      	adds	r7, #48	@ 0x30
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000
 8002250:	24000bb8 	.word	0x24000bb8
 8002254:	58024400 	.word	0x58024400
 8002258:	58020800 	.word	0x58020800
 800225c:	40022100 	.word	0x40022100
 8002260:	58020400 	.word	0x58020400

08002264 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0bc      	sub	sp, #240	@ 0xf0
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800227c:	f107 0320 	add.w	r3, r7, #32
 8002280:	22b8      	movs	r2, #184	@ 0xb8
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f00d ff16 	bl	80100b6 <memset>
  if(hi2c->Instance==I2C1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a74      	ldr	r2, [pc, #464]	@ (8002460 <HAL_I2C_MspInit+0x1fc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d147      	bne.n	8002324 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002294:	f04f 0208 	mov.w	r2, #8
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fef0 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80022b6:	f7ff ff27 	bl	8002108 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c0:	4a68      	ldr	r2, [pc, #416]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ca:	4b66      	ldr	r3, [pc, #408]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80022d8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80022dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e0:	2312      	movs	r3, #18
 80022e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022f2:	2304      	movs	r3, #4
 80022f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022fc:	4619      	mov	r1, r3
 80022fe:	485a      	ldr	r0, [pc, #360]	@ (8002468 <HAL_I2C_MspInit+0x204>)
 8002300:	f003 fc30 	bl	8005b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002304:	4b57      	ldr	r3, [pc, #348]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 8002306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800230a:	4a56      	ldr	r2, [pc, #344]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 800230c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002310:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002314:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 8002316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800231a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002322:	e098      	b.n	8002456 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a50      	ldr	r2, [pc, #320]	@ (800246c <HAL_I2C_MspInit+0x208>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d147      	bne.n	80023be <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800232e:	f04f 0208 	mov.w	r2, #8
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002340:	f107 0320 	add.w	r3, r7, #32
 8002344:	4618      	mov	r0, r3
 8002346:	f004 fea3 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002350:	f7ff feda 	bl	8002108 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002354:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235a:	4a42      	ldr	r2, [pc, #264]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002364:	4b3f      	ldr	r3, [pc, #252]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002372:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800237a:	2312      	movs	r3, #18
 800237c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800238c:	2304      	movs	r3, #4
 800238e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002396:	4619      	mov	r1, r3
 8002398:	4833      	ldr	r0, [pc, #204]	@ (8002468 <HAL_I2C_MspInit+0x204>)
 800239a:	f003 fbe3 	bl	8005b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800239e:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80023a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80023a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
}
 80023bc:	e04b      	b.n	8002456 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002470 <HAL_I2C_MspInit+0x20c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d146      	bne.n	8002456 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80023c8:	f04f 0210 	mov.w	r2, #16
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023da:	f107 0320 	add.w	r3, r7, #32
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 fe56 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80023ea:	f7ff fe8d 	bl	8002108 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 8002400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800240c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002410:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002414:	2312      	movs	r3, #18
 8002416:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002426:	2304      	movs	r3, #4
 8002428:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002430:	4619      	mov	r1, r3
 8002432:	4810      	ldr	r0, [pc, #64]	@ (8002474 <HAL_I2C_MspInit+0x210>)
 8002434:	f003 fb96 	bl	8005b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 800243a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800243e:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002444:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_I2C_MspInit+0x200>)
 800244a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800244e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
}
 8002456:	bf00      	nop
 8002458:	37f0      	adds	r7, #240	@ 0xf0
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40005400 	.word	0x40005400
 8002464:	58024400 	.word	0x58024400
 8002468:	58020400 	.word	0x58020400
 800246c:	40005800 	.word	0x40005800
 8002470:	58001c00 	.word	0x58001c00
 8002474:	58020c00 	.word	0x58020c00

08002478 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0ba      	sub	sp, #232	@ 0xe8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	22b8      	movs	r2, #184	@ 0xb8
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f00d fe0c 	bl	80100b6 <memset>
  if(hsd->Instance==SDMMC1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a38      	ldr	r2, [pc, #224]	@ (8002584 <HAL_SD_MspInit+0x10c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d169      	bne.n	800257c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80024a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b8:	f107 0318 	add.w	r3, r7, #24
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 fde7 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80024c8:	f7ff fe1e 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_SD_MspInit+0x110>)
 80024ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002588 <HAL_SD_MspInit+0x110>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80024dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002588 <HAL_SD_MspInit+0x110>)
 80024de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <HAL_SD_MspInit+0x110>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	4a25      	ldr	r2, [pc, #148]	@ (8002588 <HAL_SD_MspInit+0x110>)
 80024f2:	f043 0308 	orr.w	r3, r3, #8
 80024f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024fa:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <HAL_SD_MspInit+0x110>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <HAL_SD_MspInit+0x110>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_SD_MspInit+0x110>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_SD_MspInit+0x110>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002526:	2304      	movs	r3, #4
 8002528:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800253e:	230c      	movs	r3, #12
 8002540:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002544:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002548:	4619      	mov	r1, r3
 800254a:	4810      	ldr	r0, [pc, #64]	@ (800258c <HAL_SD_MspInit+0x114>)
 800254c:	f003 fb0a 	bl	8005b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8002550:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800256a:	230c      	movs	r3, #12
 800256c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002574:	4619      	mov	r1, r3
 8002576:	4806      	ldr	r0, [pc, #24]	@ (8002590 <HAL_SD_MspInit+0x118>)
 8002578:	f003 faf4 	bl	8005b64 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800257c:	bf00      	nop
 800257e:	37e8      	adds	r7, #232	@ 0xe8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	52007000 	.word	0x52007000
 8002588:	58024400 	.word	0x58024400
 800258c:	58020c00 	.word	0x58020c00
 8002590:	58020800 	.word	0x58020800

08002594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0c0      	sub	sp, #256	@ 0x100
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025b0:	22b8      	movs	r2, #184	@ 0xb8
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00d fd7e 	bl	80100b6 <memset>
  if(hspi->Instance==SPI1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4aaa      	ldr	r2, [pc, #680]	@ (8002868 <HAL_SPI_MspInit+0x2d4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d16a      	bne.n	800269a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 fd58 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80025e6:	f7ff fd8f 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ea:	4ba0      	ldr	r3, [pc, #640]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80025ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f0:	4a9e      	ldr	r2, [pc, #632]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80025f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025fa:	4b9c      	ldr	r3, [pc, #624]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80025fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002608:	4b98      	ldr	r3, [pc, #608]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800260a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260e:	4a97      	ldr	r2, [pc, #604]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002618:	4b94      	ldr	r3, [pc, #592]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800261a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b91      	ldr	r3, [pc, #580]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262c:	4a8f      	ldr	r2, [pc, #572]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002636:	4b8d      	ldr	r3, [pc, #564]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PB4(NJTRST)     ------> SPI1_MISO
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002644:	2310      	movs	r3, #16
 8002646:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800265c:	2305      	movs	r3, #5
 800265e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002666:	4619      	mov	r1, r3
 8002668:	4881      	ldr	r0, [pc, #516]	@ (8002870 <HAL_SPI_MspInit+0x2dc>)
 800266a:	f003 fa7b 	bl	8005b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800266e:	23b0      	movs	r3, #176	@ 0xb0
 8002670:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002686:	2305      	movs	r3, #5
 8002688:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002690:	4619      	mov	r1, r3
 8002692:	4878      	ldr	r0, [pc, #480]	@ (8002874 <HAL_SPI_MspInit+0x2e0>)
 8002694:	f003 fa66 	bl	8005b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002698:	e0e1      	b.n	800285e <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a76      	ldr	r2, [pc, #472]	@ (8002878 <HAL_SPI_MspInit+0x2e4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	f040 8091 	bne.w	80027c8 <HAL_SPI_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026bc:	4618      	mov	r0, r3
 80026be:	f004 fce7 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80026c8:	f7ff fd1e 	bl	8002108 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026cc:	4b67      	ldr	r3, [pc, #412]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80026ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026d2:	4a66      	ldr	r2, [pc, #408]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026dc:	4b63      	ldr	r3, [pc, #396]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80026de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e6:	623b      	str	r3, [r7, #32]
 80026e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b60      	ldr	r3, [pc, #384]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80026ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f0:	4a5e      	ldr	r2, [pc, #376]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026fa:	4b5c      	ldr	r3, [pc, #368]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002708:	4b58      	ldr	r3, [pc, #352]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270e:	4a57      	ldr	r2, [pc, #348]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002718:	4b54      	ldr	r3, [pc, #336]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	4b51      	ldr	r3, [pc, #324]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272c:	4a4f      	ldr	r2, [pc, #316]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002736:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002748:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800275e:	2305      	movs	r3, #5
 8002760:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002768:	4619      	mov	r1, r3
 800276a:	4842      	ldr	r0, [pc, #264]	@ (8002874 <HAL_SPI_MspInit+0x2e0>)
 800276c:	f003 f9fa 	bl	8005b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002770:	2306      	movs	r3, #6
 8002772:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002788:	2305      	movs	r3, #5
 800278a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800278e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002792:	4619      	mov	r1, r3
 8002794:	4839      	ldr	r0, [pc, #228]	@ (800287c <HAL_SPI_MspInit+0x2e8>)
 8002796:	f003 f9e5 	bl	8005b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800279a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800279e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027b4:	2305      	movs	r3, #5
 80027b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80027be:	4619      	mov	r1, r3
 80027c0:	482b      	ldr	r0, [pc, #172]	@ (8002870 <HAL_SPI_MspInit+0x2dc>)
 80027c2:	f003 f9cf 	bl	8005b64 <HAL_GPIO_Init>
}
 80027c6:	e04a      	b.n	800285e <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI4)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002880 <HAL_SPI_MspInit+0x2ec>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d145      	bne.n	800285e <HAL_SPI_MspInit+0x2ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80027d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 fc51 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_SPI_MspInit+0x264>
      Error_Handler();
 80027f4:	f7ff fc88 	bl	8002108 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80027f8:	4b1c      	ldr	r3, [pc, #112]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 80027fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027fe:	4a1b      	ldr	r2, [pc, #108]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002800:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002804:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800280a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800280e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281c:	4a13      	ldr	r2, [pc, #76]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_SPI_MspInit+0x2d8>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002834:	2364      	movs	r3, #100	@ 0x64
 8002836:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800284c:	2305      	movs	r3, #5
 800284e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002852:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002856:	4619      	mov	r1, r3
 8002858:	480a      	ldr	r0, [pc, #40]	@ (8002884 <HAL_SPI_MspInit+0x2f0>)
 800285a:	f003 f983 	bl	8005b64 <HAL_GPIO_Init>
}
 800285e:	bf00      	nop
 8002860:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013000 	.word	0x40013000
 800286c:	58024400 	.word	0x58024400
 8002870:	58020400 	.word	0x58020400
 8002874:	58020000 	.word	0x58020000
 8002878:	40003800 	.word	0x40003800
 800287c:	58020800 	.word	0x58020800
 8002880:	40013400 	.word	0x40013400
 8002884:	58021000 	.word	0x58021000

08002888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0b      	ldr	r2, [pc, #44]	@ (80028c4 <HAL_TIM_Base_MspInit+0x3c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_TIM_Base_MspInit+0x40>)
 800289c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a0:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <HAL_TIM_Base_MspInit+0x40>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_TIM_Base_MspInit+0x40>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40010000 	.word	0x40010000
 80028c8:	58024400 	.word	0x58024400

080028cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b08b      	sub	sp, #44	@ 0x2c
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d10f      	bne.n	80028fe <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b49      	ldr	r3, [pc, #292]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80028e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028e4:	4a47      	ldr	r2, [pc, #284]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028ee:	4b45      	ldr	r3, [pc, #276]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80028f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80028fc:	e07c      	b.n	80029f8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a41      	ldr	r2, [pc, #260]	@ (8002a08 <HAL_TIM_PWM_MspInit+0x13c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10f      	bne.n	8002928 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002908:	4b3e      	ldr	r3, [pc, #248]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 800290a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800290e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002918:	4b3a      	ldr	r3, [pc, #232]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 800291a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	6a3b      	ldr	r3, [r7, #32]
}
 8002926:	e067      	b.n	80029f8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a37      	ldr	r2, [pc, #220]	@ (8002a0c <HAL_TIM_PWM_MspInit+0x140>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10f      	bne.n	8002952 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002932:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 8002934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002938:	4a32      	ldr	r2, [pc, #200]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002942:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 8002944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	69fb      	ldr	r3, [r7, #28]
}
 8002950:	e052      	b.n	80029f8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2e      	ldr	r2, [pc, #184]	@ (8002a10 <HAL_TIM_PWM_MspInit+0x144>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10f      	bne.n	800297c <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 800295e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002962:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 800296e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]
}
 800297a:	e03d      	b.n	80029f8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a24      	ldr	r2, [pc, #144]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x148>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10f      	bne.n	80029a6 <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002986:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 8002988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 8002998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
}
 80029a4:	e028      	b.n	80029f8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <HAL_TIM_PWM_MspInit+0x14c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d10f      	bne.n	80029d0 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029b0:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80029b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029b6:	4a13      	ldr	r2, [pc, #76]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80029b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029c0:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80029c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
}
 80029ce:	e013      	b.n	80029f8 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a11      	ldr	r2, [pc, #68]	@ (8002a1c <HAL_TIM_PWM_MspInit+0x150>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80029dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029e0:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x138>)
 80029ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	bf00      	nop
 80029fa:	372c      	adds	r7, #44	@ 0x2c
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	58024400 	.word	0x58024400
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40010400 	.word	0x40010400
 8002a18:	40001800 	.word	0x40001800
 8002a1c:	40014000 	.word	0x40014000

08002a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b090      	sub	sp, #64	@ 0x40
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a95      	ldr	r2, [pc, #596]	@ (8002c94 <HAL_TIM_MspPostInit+0x274>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d120      	bne.n	8002a84 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a42:	4b95      	ldr	r3, [pc, #596]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a48:	4a93      	ldr	r2, [pc, #588]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002a4a:	f043 0310 	orr.w	r3, r3, #16
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a52:	4b91      	ldr	r3, [pc, #580]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8002a60:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4887      	ldr	r0, [pc, #540]	@ (8002c9c <HAL_TIM_MspPostInit+0x27c>)
 8002a7e:	f003 f871 	bl	8005b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002a82:	e103      	b.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8c:	d120      	bne.n	8002ad0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	4b82      	ldr	r3, [pc, #520]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a94:	4a80      	ldr	r2, [pc, #512]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4875      	ldr	r0, [pc, #468]	@ (8002ca0 <HAL_TIM_MspPostInit+0x280>)
 8002aca:	f003 f84b 	bl	8005b64 <HAL_GPIO_Init>
}
 8002ace:	e0dd      	b.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a73      	ldr	r2, [pc, #460]	@ (8002ca4 <HAL_TIM_MspPostInit+0x284>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d11f      	bne.n	8002b1a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4b6f      	ldr	r3, [pc, #444]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002aea:	4b6b      	ldr	r3, [pc, #428]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	623b      	str	r3, [r7, #32]
 8002af6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002af8:	2340      	movs	r3, #64	@ 0x40
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4863      	ldr	r0, [pc, #396]	@ (8002ca0 <HAL_TIM_MspPostInit+0x280>)
 8002b14:	f003 f826 	bl	8005b64 <HAL_GPIO_Init>
}
 8002b18:	e0b8      	b.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a62      	ldr	r2, [pc, #392]	@ (8002ca8 <HAL_TIM_MspPostInit+0x288>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d11f      	bne.n	8002b64 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b24:	4b5c      	ldr	r3, [pc, #368]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b34:	4b58      	ldr	r3, [pc, #352]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b42:	2340      	movs	r3, #64	@ 0x40
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b52:	2302      	movs	r3, #2
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4853      	ldr	r0, [pc, #332]	@ (8002cac <HAL_TIM_MspPostInit+0x28c>)
 8002b5e:	f003 f801 	bl	8005b64 <HAL_GPIO_Init>
}
 8002b62:	e093      	b.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a51      	ldr	r2, [pc, #324]	@ (8002cb0 <HAL_TIM_MspPostInit+0x290>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d11f      	bne.n	8002bae <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b74:	4a48      	ldr	r2, [pc, #288]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b7e:	4b46      	ldr	r3, [pc, #280]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	483e      	ldr	r0, [pc, #248]	@ (8002ca0 <HAL_TIM_MspPostInit+0x280>)
 8002ba8:	f002 ffdc 	bl	8005b64 <HAL_GPIO_Init>
}
 8002bac:	e06e      	b.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	@ (8002cb4 <HAL_TIM_MspPostInit+0x294>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d11f      	bne.n	8002bf8 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb8:	4b37      	ldr	r3, [pc, #220]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbe:	4a36      	ldr	r2, [pc, #216]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bc8:	4b33      	ldr	r3, [pc, #204]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bd6:	2340      	movs	r3, #64	@ 0x40
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002be6:	2303      	movs	r3, #3
 8002be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4831      	ldr	r0, [pc, #196]	@ (8002cb8 <HAL_TIM_MspPostInit+0x298>)
 8002bf2:	f002 ffb7 	bl	8005b64 <HAL_GPIO_Init>
}
 8002bf6:	e049      	b.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8002cbc <HAL_TIM_MspPostInit+0x29c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d120      	bne.n	8002c44 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	4b25      	ldr	r3, [pc, #148]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c08:	4a23      	ldr	r2, [pc, #140]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c12:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002c32:	2302      	movs	r3, #2
 8002c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	481b      	ldr	r0, [pc, #108]	@ (8002cac <HAL_TIM_MspPostInit+0x28c>)
 8002c3e:	f002 ff91 	bl	8005b64 <HAL_GPIO_Init>
}
 8002c42:	e023      	b.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <HAL_TIM_MspPostInit+0x2a0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d11e      	bne.n	8002c8c <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c54:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_TIM_MspPostInit+0x278>)
 8002c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c84:	4619      	mov	r1, r3
 8002c86:	4806      	ldr	r0, [pc, #24]	@ (8002ca0 <HAL_TIM_MspPostInit+0x280>)
 8002c88:	f002 ff6c 	bl	8005b64 <HAL_GPIO_Init>
}
 8002c8c:	bf00      	nop
 8002c8e:	3740      	adds	r7, #64	@ 0x40
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40010000 	.word	0x40010000
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	58021000 	.word	0x58021000
 8002ca0:	58020000 	.word	0x58020000
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	58020400 	.word	0x58020400
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40010400 	.word	0x40010400
 8002cb8:	58020800 	.word	0x58020800
 8002cbc:	40001800 	.word	0x40001800
 8002cc0:	40014000 	.word	0x40014000

08002cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b0c0      	sub	sp, #256	@ 0x100
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ce0:	22b8      	movs	r2, #184	@ 0xb8
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00d f9e6 	bl	80100b6 <memset>
  if(huart->Instance==UART4)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4ac3      	ldr	r2, [pc, #780]	@ (8002ffc <HAL_UART_MspInit+0x338>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d16b      	bne.n	8002dcc <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002cf4:	f04f 0202 	mov.w	r2, #2
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 f9c0 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002d16:	f7ff f9f7 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d1a:	4bb9      	ldr	r3, [pc, #740]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d20:	4ab7      	ldr	r2, [pc, #732]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d2a:	4bb5      	ldr	r3, [pc, #724]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d38:	4bb1      	ldr	r3, [pc, #708]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d3e:	4ab0      	ldr	r2, [pc, #704]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d48:	4bad      	ldr	r3, [pc, #692]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d56:	4baa      	ldr	r3, [pc, #680]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d5c:	4aa8      	ldr	r2, [pc, #672]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d5e:	f043 0308 	orr.w	r3, r3, #8
 8002d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d66:	4ba6      	ldr	r3, [pc, #664]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d8e:	2308      	movs	r3, #8
 8002d90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d98:	4619      	mov	r1, r3
 8002d9a:	489a      	ldr	r0, [pc, #616]	@ (8003004 <HAL_UART_MspInit+0x340>)
 8002d9c:	f002 fee2 	bl	8005b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002db8:	2308      	movs	r3, #8
 8002dba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dbe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4890      	ldr	r0, [pc, #576]	@ (8003008 <HAL_UART_MspInit+0x344>)
 8002dc6:	f002 fecd 	bl	8005b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8002dca:	e111      	b.n	8002ff0 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART5)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a8e      	ldr	r2, [pc, #568]	@ (800300c <HAL_UART_MspInit+0x348>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d147      	bne.n	8002e66 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002dd6:	f04f 0202 	mov.w	r2, #2
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 f94f 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002df8:	f7ff f986 	bl	8002108 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002dfc:	4b80      	ldr	r3, [pc, #512]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e02:	4a7f      	ldr	r2, [pc, #508]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002e04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e16:	623b      	str	r3, [r7, #32]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1a:	4b79      	ldr	r3, [pc, #484]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e20:	4a77      	ldr	r2, [pc, #476]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2a:	4b75      	ldr	r3, [pc, #468]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8002e38:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002e52:	230e      	movs	r3, #14
 8002e54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4869      	ldr	r0, [pc, #420]	@ (8003004 <HAL_UART_MspInit+0x340>)
 8002e60:	f002 fe80 	bl	8005b64 <HAL_GPIO_Init>
}
 8002e64:	e0c4      	b.n	8002ff0 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART7)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a69      	ldr	r2, [pc, #420]	@ (8003010 <HAL_UART_MspInit+0x34c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d147      	bne.n	8002f00 <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002e70:	f04f 0202 	mov.w	r2, #2
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 f902 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8002e92:	f7ff f939 	bl	8002108 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002e96:	4b5a      	ldr	r3, [pc, #360]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e9c:	4a58      	ldr	r2, [pc, #352]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002e9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ea2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ea6:	4b56      	ldr	r3, [pc, #344]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eb4:	4b52      	ldr	r3, [pc, #328]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eba:	4a51      	ldr	r2, [pc, #324]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ec4:	4b4e      	ldr	r3, [pc, #312]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ed2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ed6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002eec:	2307      	movs	r3, #7
 8002eee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ef2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4846      	ldr	r0, [pc, #280]	@ (8003014 <HAL_UART_MspInit+0x350>)
 8002efa:	f002 fe33 	bl	8005b64 <HAL_GPIO_Init>
}
 8002efe:	e077      	b.n	8002ff0 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART8)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a44      	ldr	r2, [pc, #272]	@ (8003018 <HAL_UART_MspInit+0x354>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d172      	bne.n	8002ff0 <HAL_UART_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002f0a:	f04f 0202 	mov.w	r2, #2
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 f8b5 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8002f2c:	f7ff f8ec 	bl	8002108 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002f30:	4b33      	ldr	r3, [pc, #204]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f36:	4a32      	ldr	r2, [pc, #200]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f40:	4b2f      	ldr	r3, [pc, #188]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f54:	4a2a      	ldr	r2, [pc, #168]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f56:	f043 0310 	orr.w	r3, r3, #16
 8002f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f5e:	4b28      	ldr	r3, [pc, #160]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f6c:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f72:	4a23      	ldr	r2, [pc, #140]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f7c:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_UART_MspInit+0x33c>)
 8002f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fa8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002fac:	4619      	mov	r1, r3
 8002fae:	4819      	ldr	r0, [pc, #100]	@ (8003014 <HAL_UART_MspInit+0x350>)
 8002fb0:	f002 fdd8 	bl	8005b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002fb4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002fce:	2308      	movs	r3, #8
 8002fd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fd4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002fd8:	4619      	mov	r1, r3
 8002fda:	480b      	ldr	r0, [pc, #44]	@ (8003008 <HAL_UART_MspInit+0x344>)
 8002fdc:	f002 fdc2 	bl	8005b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2053      	movs	r0, #83	@ 0x53
 8002fe6:	f001 ffac 	bl	8004f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002fea:	2053      	movs	r0, #83	@ 0x53
 8002fec:	f001 ffc3 	bl	8004f76 <HAL_NVIC_EnableIRQ>
}
 8002ff0:	bf00      	nop
 8002ff2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40004c00 	.word	0x40004c00
 8003000:	58024400 	.word	0x58024400
 8003004:	58020400 	.word	0x58020400
 8003008:	58020c00 	.word	0x58020c00
 800300c:	40005000 	.word	0x40005000
 8003010:	40007800 	.word	0x40007800
 8003014:	58021000 	.word	0x58021000
 8003018:	40007c00 	.word	0x40007c00

0800301c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b0bc      	sub	sp, #240	@ 0xf0
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003034:	f107 0320 	add.w	r3, r7, #32
 8003038:	22b8      	movs	r2, #184	@ 0xb8
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f00d f83a 	bl	80100b6 <memset>
  if(husart->Instance==USART1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a73      	ldr	r2, [pc, #460]	@ (8003214 <HAL_USART_MspInit+0x1f8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d147      	bne.n	80030dc <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800304c:	f04f 0201 	mov.w	r2, #1
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800305e:	f107 0320 	add.w	r3, r7, #32
 8003062:	4618      	mov	r0, r3
 8003064:	f004 f814 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800306e:	f7ff f84b 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003072:	4b69      	ldr	r3, [pc, #420]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 8003074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003078:	4a67      	ldr	r2, [pc, #412]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 800307a:	f043 0310 	orr.w	r3, r3, #16
 800307e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003082:	4b65      	ldr	r3, [pc, #404]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 8003084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003090:	4b61      	ldr	r3, [pc, #388]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 8003092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003096:	4a60      	ldr	r2, [pc, #384]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 80030a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 80030ae:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80030b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030c8:	2307      	movs	r3, #7
 80030ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030d2:	4619      	mov	r1, r3
 80030d4:	4851      	ldr	r0, [pc, #324]	@ (800321c <HAL_USART_MspInit+0x200>)
 80030d6:	f002 fd45 	bl	8005b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030da:	e097      	b.n	800320c <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003220 <HAL_USART_MspInit+0x204>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d146      	bne.n	8003174 <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030e6:	f04f 0202 	mov.w	r2, #2
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f8:	f107 0320 	add.w	r3, r7, #32
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 ffc7 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_USART_MspInit+0xf0>
      Error_Handler();
 8003108:	f7fe fffe 	bl	8002108 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800310c:	4b42      	ldr	r3, [pc, #264]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 800310e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003112:	4a41      	ldr	r2, [pc, #260]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 8003114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800311c:	4b3e      	ldr	r3, [pc, #248]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 800311e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800312a:	4b3b      	ldr	r3, [pc, #236]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 800312c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003130:	4a39      	ldr	r2, [pc, #228]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800313a:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 800313c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8003148:	23e8      	movs	r3, #232	@ 0xe8
 800314a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003160:	2307      	movs	r3, #7
 8003162:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003166:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800316a:	4619      	mov	r1, r3
 800316c:	482d      	ldr	r0, [pc, #180]	@ (8003224 <HAL_USART_MspInit+0x208>)
 800316e:	f002 fcf9 	bl	8005b64 <HAL_GPIO_Init>
}
 8003172:	e04b      	b.n	800320c <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2b      	ldr	r2, [pc, #172]	@ (8003228 <HAL_USART_MspInit+0x20c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d146      	bne.n	800320c <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800317e:	f04f 0202 	mov.w	r2, #2
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003190:	f107 0320 	add.w	r3, r7, #32
 8003194:	4618      	mov	r0, r3
 8003196:	f003 ff7b 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_USART_MspInit+0x188>
      Error_Handler();
 80031a0:	f7fe ffb2 	bl	8002108 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 80031a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031b4:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 80031b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 80031c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031c8:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 80031ca:	f043 0308 	orr.w	r3, r3, #8
 80031ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <HAL_USART_MspInit+0x1fc>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80031e0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80031e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031fa:	2307      	movs	r3, #7
 80031fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003200:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003204:	4619      	mov	r1, r3
 8003206:	4807      	ldr	r0, [pc, #28]	@ (8003224 <HAL_USART_MspInit+0x208>)
 8003208:	f002 fcac 	bl	8005b64 <HAL_GPIO_Init>
}
 800320c:	bf00      	nop
 800320e:	37f0      	adds	r7, #240	@ 0xf0
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40011000 	.word	0x40011000
 8003218:	58024400 	.word	0x58024400
 800321c:	58020000 	.word	0x58020000
 8003220:	40004400 	.word	0x40004400
 8003224:	58020c00 	.word	0x58020c00
 8003228:	40004800 	.word	0x40004800

0800322c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <NMI_Handler+0x4>

08003234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <HardFault_Handler+0x4>

0800323c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <MemManage_Handler+0x4>

08003244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <BusFault_Handler+0x4>

0800324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003250:	bf00      	nop
 8003252:	e7fd      	b.n	8003250 <UsageFault_Handler+0x4>

08003254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003282:	f000 f9cb 	bl	800361c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003290:	4802      	ldr	r0, [pc, #8]	@ (800329c <UART8_IRQHandler+0x10>)
 8003292:	f008 fce9 	bl	800bc68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	24000a00 	.word	0x24000a00

080032a0 <_getpid>:
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	2301      	movs	r3, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <_kill>:
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	f00c ff4f 	bl	801015c <__errno>
 80032be:	4603      	mov	r3, r0
 80032c0:	2216      	movs	r2, #22
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_exit>:
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffe7 	bl	80032b0 <_kill>
 80032e2:	bf00      	nop
 80032e4:	e7fd      	b.n	80032e2 <_exit+0x12>

080032e6 <_read>:
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e00a      	b.n	800330e <_read+0x28>
 80032f8:	f3af 8000 	nop.w
 80032fc:	4601      	mov	r1, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	60ba      	str	r2, [r7, #8]
 8003304:	b2ca      	uxtb	r2, r1
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	dbf0      	blt.n	80032f8 <_read+0x12>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_close>:
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <_fstat>:
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	2300      	movs	r3, #0
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_isatty>:
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	2301      	movs	r3, #1
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <_lseek>:
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	2300      	movs	r3, #0
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_sbrk>:
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <_sbrk+0x5c>)
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <_sbrk+0x60>)
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <_sbrk+0x64>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <_sbrk+0x22>
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <_sbrk+0x64>)
 80033a6:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <_sbrk+0x68>)
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <_sbrk+0x64>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d207      	bcs.n	80033c8 <_sbrk+0x40>
 80033b8:	f00c fed0 	bl	801015c <__errno>
 80033bc:	4603      	mov	r3, r0
 80033be:	220c      	movs	r2, #12
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	e009      	b.n	80033dc <_sbrk+0x54>
 80033c8:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <_sbrk+0x64>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <_sbrk+0x64>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	4a05      	ldr	r2, [pc, #20]	@ (80033ec <_sbrk+0x64>)
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	24050000 	.word	0x24050000
 80033e8:	00000400 	.word	0x00000400
 80033ec:	24000bbc 	.word	0x24000bbc
 80033f0:	24000d10 	.word	0x24000d10

080033f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033f8:	4b32      	ldr	r3, [pc, #200]	@ (80034c4 <SystemInit+0xd0>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	4a31      	ldr	r2, [pc, #196]	@ (80034c4 <SystemInit+0xd0>)
 8003400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003408:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <SystemInit+0xd4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	2b06      	cmp	r3, #6
 8003412:	d807      	bhi.n	8003424 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003414:	4b2c      	ldr	r3, [pc, #176]	@ (80034c8 <SystemInit+0xd4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 030f 	bic.w	r3, r3, #15
 800341c:	4a2a      	ldr	r2, [pc, #168]	@ (80034c8 <SystemInit+0xd4>)
 800341e:	f043 0307 	orr.w	r3, r3, #7
 8003422:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003424:	4b29      	ldr	r3, [pc, #164]	@ (80034cc <SystemInit+0xd8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	@ (80034cc <SystemInit+0xd8>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003430:	4b26      	ldr	r3, [pc, #152]	@ (80034cc <SystemInit+0xd8>)
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003436:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <SystemInit+0xd8>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4924      	ldr	r1, [pc, #144]	@ (80034cc <SystemInit+0xd8>)
 800343c:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <SystemInit+0xdc>)
 800343e:	4013      	ands	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003442:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <SystemInit+0xd4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800344e:	4b1e      	ldr	r3, [pc, #120]	@ (80034c8 <SystemInit+0xd4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 030f 	bic.w	r3, r3, #15
 8003456:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <SystemInit+0xd4>)
 8003458:	f043 0307 	orr.w	r3, r3, #7
 800345c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800345e:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <SystemInit+0xd8>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <SystemInit+0xd8>)
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800346a:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <SystemInit+0xd8>)
 800346c:	2200      	movs	r2, #0
 800346e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003470:	4b16      	ldr	r3, [pc, #88]	@ (80034cc <SystemInit+0xd8>)
 8003472:	4a18      	ldr	r2, [pc, #96]	@ (80034d4 <SystemInit+0xe0>)
 8003474:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <SystemInit+0xd8>)
 8003478:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <SystemInit+0xe4>)
 800347a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800347c:	4b13      	ldr	r3, [pc, #76]	@ (80034cc <SystemInit+0xd8>)
 800347e:	4a17      	ldr	r2, [pc, #92]	@ (80034dc <SystemInit+0xe8>)
 8003480:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <SystemInit+0xd8>)
 8003484:	2200      	movs	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003488:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <SystemInit+0xd8>)
 800348a:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <SystemInit+0xe8>)
 800348c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800348e:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <SystemInit+0xd8>)
 8003490:	2200      	movs	r2, #0
 8003492:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003494:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <SystemInit+0xd8>)
 8003496:	4a11      	ldr	r2, [pc, #68]	@ (80034dc <SystemInit+0xe8>)
 8003498:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800349a:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <SystemInit+0xd8>)
 800349c:	2200      	movs	r2, #0
 800349e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <SystemInit+0xd8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a09      	ldr	r2, [pc, #36]	@ (80034cc <SystemInit+0xd8>)
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <SystemInit+0xd8>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034b2:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <SystemInit+0xec>)
 80034b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80034b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00
 80034c8:	52002000 	.word	0x52002000
 80034cc:	58024400 	.word	0x58024400
 80034d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80034d4:	02020200 	.word	0x02020200
 80034d8:	01ff0000 	.word	0x01ff0000
 80034dc:	01010280 	.word	0x01010280
 80034e0:	52004000 	.word	0x52004000

080034e4 <Reset_Handler>:
 80034e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800351c <LoopFillZerobss+0xe>
 80034e8:	f7ff ff84 	bl	80033f4 <SystemInit>
 80034ec:	480c      	ldr	r0, [pc, #48]	@ (8003520 <LoopFillZerobss+0x12>)
 80034ee:	490d      	ldr	r1, [pc, #52]	@ (8003524 <LoopFillZerobss+0x16>)
 80034f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003528 <LoopFillZerobss+0x1a>)
 80034f2:	2300      	movs	r3, #0
 80034f4:	e002      	b.n	80034fc <LoopCopyDataInit>

080034f6 <CopyDataInit>:
 80034f6:	58d4      	ldr	r4, [r2, r3]
 80034f8:	50c4      	str	r4, [r0, r3]
 80034fa:	3304      	adds	r3, #4

080034fc <LoopCopyDataInit>:
 80034fc:	18c4      	adds	r4, r0, r3
 80034fe:	428c      	cmp	r4, r1
 8003500:	d3f9      	bcc.n	80034f6 <CopyDataInit>
 8003502:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <LoopFillZerobss+0x1e>)
 8003504:	4c0a      	ldr	r4, [pc, #40]	@ (8003530 <LoopFillZerobss+0x22>)
 8003506:	2300      	movs	r3, #0
 8003508:	e001      	b.n	800350e <LoopFillZerobss>

0800350a <FillZerobss>:
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	3204      	adds	r2, #4

0800350e <LoopFillZerobss>:
 800350e:	42a2      	cmp	r2, r4
 8003510:	d3fb      	bcc.n	800350a <FillZerobss>
 8003512:	f00c fe29 	bl	8010168 <__libc_init_array>
 8003516:	f7fd fb05 	bl	8000b24 <main>
 800351a:	4770      	bx	lr
 800351c:	24050000 	.word	0x24050000
 8003520:	24000000 	.word	0x24000000
 8003524:	240001d8 	.word	0x240001d8
 8003528:	08013bc8 	.word	0x08013bc8
 800352c:	240001d8 	.word	0x240001d8
 8003530:	24000d10 	.word	0x24000d10

08003534 <ADC3_IRQHandler>:
 8003534:	e7fe      	b.n	8003534 <ADC3_IRQHandler>
	...

08003538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353e:	2003      	movs	r0, #3
 8003540:	f001 fcf4 	bl	8004f2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003544:	f003 fbce 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <HAL_Init+0x68>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	4913      	ldr	r1, [pc, #76]	@ (80035a4 <HAL_Init+0x6c>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003562:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <HAL_Init+0x68>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	4a0e      	ldr	r2, [pc, #56]	@ (80035a4 <HAL_Init+0x6c>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	4a0b      	ldr	r2, [pc, #44]	@ (80035a8 <HAL_Init+0x70>)
 800357a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800357c:	4a0b      	ldr	r2, [pc, #44]	@ (80035ac <HAL_Init+0x74>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003582:	200f      	movs	r0, #15
 8003584:	f000 f814 	bl	80035b0 <HAL_InitTick>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e002      	b.n	8003598 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003592:	f7fe fdbf 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	58024400 	.word	0x58024400
 80035a4:	08013744 	.word	0x08013744
 80035a8:	24000004 	.word	0x24000004
 80035ac:	24000000 	.word	0x24000000

080035b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035b8:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_InitTick+0x60>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e021      	b.n	8003608 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <HAL_InitTick+0x64>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_InitTick+0x60>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	4619      	mov	r1, r3
 80035ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fcd9 	bl	8004f92 <HAL_SYSTICK_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00e      	b.n	8003608 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d80a      	bhi.n	8003606 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035f0:	2200      	movs	r2, #0
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	f001 fca3 	bl	8004f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035fc:	4a06      	ldr	r2, [pc, #24]	@ (8003618 <HAL_InitTick+0x68>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	2400000c 	.word	0x2400000c
 8003614:	24000000 	.word	0x24000000
 8003618:	24000008 	.word	0x24000008

0800361c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_IncTick+0x20>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <HAL_IncTick+0x24>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4413      	add	r3, r2
 800362c:	4a04      	ldr	r2, [pc, #16]	@ (8003640 <HAL_IncTick+0x24>)
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	2400000c 	.word	0x2400000c
 8003640:	24000bc0 	.word	0x24000bc0

08003644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return uwTick;
 8003648:	4b03      	ldr	r3, [pc, #12]	@ (8003658 <HAL_GetTick+0x14>)
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	24000bc0 	.word	0x24000bc0

0800365c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003664:	f7ff ffee 	bl	8003644 <HAL_GetTick>
 8003668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d005      	beq.n	8003682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003676:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <HAL_Delay+0x44>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003682:	bf00      	nop
 8003684:	f7ff ffde 	bl	8003644 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	d8f7      	bhi.n	8003684 <HAL_Delay+0x28>
  {
  }
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	2400000c 	.word	0x2400000c

080036a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3360      	adds	r3, #96	@ 0x60
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a10      	ldr	r2, [pc, #64]	@ (800376c <LL_ADC_SetOffset+0x60>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10b      	bne.n	8003748 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	4313      	orrs	r3, r2
 800373e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003746:	e00b      	b.n	8003760 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	431a      	orrs	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	58026000 	.word	0x58026000

08003770 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3360      	adds	r3, #96	@ 0x60
 800377e:	461a      	mov	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	611a      	str	r2, [r3, #16]
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a0c      	ldr	r2, [pc, #48]	@ (8003810 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3360      	adds	r3, #96	@ 0x60
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	601a      	str	r2, [r3, #0]
  }
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	58026000 	.word	0x58026000

08003814 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a0c      	ldr	r2, [pc, #48]	@ (8003854 <LL_ADC_SetOffsetSaturation+0x40>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10e      	bne.n	8003846 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3360      	adds	r3, #96	@ 0x60
 800382c:	461a      	mov	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	431a      	orrs	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	58026000 	.word	0x58026000

08003858 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a0c      	ldr	r2, [pc, #48]	@ (8003898 <LL_ADC_SetOffsetSign+0x40>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10e      	bne.n	800388a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3360      	adds	r3, #96	@ 0x60
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	431a      	orrs	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	58026000 	.word	0x58026000

0800389c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3360      	adds	r3, #96	@ 0x60
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a0c      	ldr	r2, [pc, #48]	@ (80038ec <LL_ADC_SetOffsetState+0x50>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80038ce:	e007      	b.n	80038e0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	431a      	orrs	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	601a      	str	r2, [r3, #0]
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	58026000 	.word	0x58026000

080038f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3330      	adds	r3, #48	@ 0x30
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	4413      	add	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	211f      	movs	r1, #31
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0e9b      	lsrs	r3, r3, #26
 8003928:	f003 011f 	and.w	r1, r3, #31
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	431a      	orrs	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3314      	adds	r3, #20
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	0e5b      	lsrs	r3, r3, #25
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	4413      	add	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	0d1b      	lsrs	r3, r3, #20
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2107      	movs	r1, #7
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	401a      	ands	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	0d1b      	lsrs	r3, r3, #20
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	431a      	orrs	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <LL_ADC_SetChannelSingleDiff+0x78>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d115      	bne.n	80039e0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039c0:	43db      	mvns	r3, r3
 80039c2:	401a      	ands	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0318 	and.w	r3, r3, #24
 80039ca:	4914      	ldr	r1, [pc, #80]	@ (8003a1c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80039cc:	40d9      	lsrs	r1, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	400b      	ands	r3, r1
 80039d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d6:	431a      	orrs	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80039de:	e014      	b.n	8003a0a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0318 	and.w	r3, r3, #24
 80039f6:	4909      	ldr	r1, [pc, #36]	@ (8003a1c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80039f8:	40d9      	lsrs	r1, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	400b      	ands	r3, r1
 80039fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	58026000 	.word	0x58026000
 8003a1c:	000fffff 	.word	0x000fffff

08003a20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	4b04      	ldr	r3, [pc, #16]	@ (8003a40 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6093      	str	r3, [r2, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	5fffffc0 	.word	0x5fffffc0

08003a44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a58:	d101      	bne.n	8003a5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <LL_ADC_EnableInternalRegulator+0x24>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	6fffffc0 	.word	0x6fffffc0

08003a94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aa8:	d101      	bne.n	8003aae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <LL_ADC_IsEnabled+0x18>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <LL_ADC_IsEnabled+0x1a>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d101      	bne.n	8003afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d101      	bne.n	8003b20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b089      	sub	sp, #36	@ 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e1ee      	b.n	8003f28 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7fe faf5 	bl	8002148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff67 	bl	8003a44 <LL_ADC_IsDeepPowerDownEnabled>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff4d 	bl	8003a20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff82 	bl	8003a94 <LL_ADC_IsInternalRegulatorEnabled>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d114      	bne.n	8003bc0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ff66 	bl	8003a6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8003ddc <HAL_ADC_Init+0x2ac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	4a8e      	ldr	r2, [pc, #568]	@ (8003de0 <HAL_ADC_Init+0x2b0>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f9      	bne.n	8003bb4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff65 	bl	8003a94 <LL_ADC_IsInternalRegulatorEnabled>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10d      	bne.n	8003bec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff76 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003bf6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 8188 	bne.w	8003f16 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 8184 	bne.w	8003f16 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c12:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003c16:	f043 0202 	orr.w	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff4a 	bl	8003abc <LL_ADC_IsEnabled>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d136      	bne.n	8003c9c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6c      	ldr	r2, [pc, #432]	@ (8003de4 <HAL_ADC_Init+0x2b4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d004      	beq.n	8003c42 <HAL_ADC_Init+0x112>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003de8 <HAL_ADC_Init+0x2b8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10e      	bne.n	8003c60 <HAL_ADC_Init+0x130>
 8003c42:	4868      	ldr	r0, [pc, #416]	@ (8003de4 <HAL_ADC_Init+0x2b4>)
 8003c44:	f7ff ff3a 	bl	8003abc <LL_ADC_IsEnabled>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4867      	ldr	r0, [pc, #412]	@ (8003de8 <HAL_ADC_Init+0x2b8>)
 8003c4c:	f7ff ff36 	bl	8003abc <LL_ADC_IsEnabled>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4323      	orrs	r3, r4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e008      	b.n	8003c72 <HAL_ADC_Init+0x142>
 8003c60:	4862      	ldr	r0, [pc, #392]	@ (8003dec <HAL_ADC_Init+0x2bc>)
 8003c62:	f7ff ff2b 	bl	8003abc <LL_ADC_IsEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d012      	beq.n	8003c9c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003de4 <HAL_ADC_Init+0x2b4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_ADC_Init+0x15a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a58      	ldr	r2, [pc, #352]	@ (8003de8 <HAL_ADC_Init+0x2b8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_Init+0x15e>
 8003c8a:	4a59      	ldr	r2, [pc, #356]	@ (8003df0 <HAL_ADC_Init+0x2c0>)
 8003c8c:	e000      	b.n	8003c90 <HAL_ADC_Init+0x160>
 8003c8e:	4a59      	ldr	r2, [pc, #356]	@ (8003df4 <HAL_ADC_Init+0x2c4>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4619      	mov	r1, r3
 8003c96:	4610      	mov	r0, r2
 8003c98:	f7ff fd04 	bl	80036a4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	@ (8003dec <HAL_ADC_Init+0x2bc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d129      	bne.n	8003cfa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7e5b      	ldrb	r3, [r3, #25]
 8003caa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003cb0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003cb6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d013      	beq.n	8003ce8 <HAL_ADC_Init+0x1b8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_ADC_Init+0x1b4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b1c      	cmp	r3, #28
 8003cce:	d007      	beq.n	8003ce0 <HAL_ADC_Init+0x1b0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b18      	cmp	r3, #24
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_Init+0x1ac>
 8003cd8:	2318      	movs	r3, #24
 8003cda:	e006      	b.n	8003cea <HAL_ADC_Init+0x1ba>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e004      	b.n	8003cea <HAL_ADC_Init+0x1ba>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	e002      	b.n	8003cea <HAL_ADC_Init+0x1ba>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	e000      	b.n	8003cea <HAL_ADC_Init+0x1ba>
 8003ce8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003cea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e00e      	b.n	8003d18 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7e5b      	ldrb	r3, [r3, #25]
 8003cfe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d04:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d0a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d12:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d106      	bne.n	8003d30 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	3b01      	subs	r3, #1
 8003d28:	045b      	lsls	r3, r3, #17
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a26      	ldr	r2, [pc, #152]	@ (8003dec <HAL_ADC_Init+0x2bc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d115      	bne.n	8003d82 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <HAL_ADC_Init+0x2c8>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	69b9      	ldr	r1, [r7, #24]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	611a      	str	r2, [r3, #16]
 8003d80:	e009      	b.n	8003d96 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	4b1c      	ldr	r3, [pc, #112]	@ (8003dfc <HAL_ADC_Init+0x2cc>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	69b9      	ldr	r1, [r7, #24]
 8003d92:	430b      	orrs	r3, r1
 8003d94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fea1 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003da0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff feae 	bl	8003b08 <LL_ADC_INJ_IsConversionOngoing>
 8003dac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 808e 	bne.w	8003ed2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 808a 	bne.w	8003ed2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dec <HAL_ADC_Init+0x2bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d11b      	bne.n	8003e00 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7e1b      	ldrb	r3, [r3, #24]
 8003dcc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003dd4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	e018      	b.n	8003e0e <HAL_ADC_Init+0x2de>
 8003ddc:	24000000 	.word	0x24000000
 8003de0:	053e2d63 	.word	0x053e2d63
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40022100 	.word	0x40022100
 8003dec:	58026000 	.word	0x58026000
 8003df0:	40022300 	.word	0x40022300
 8003df4:	58026300 	.word	0x58026300
 8003df8:	fff04007 	.word	0xfff04007
 8003dfc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7e1b      	ldrb	r3, [r3, #24]
 8003e04:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	4b46      	ldr	r3, [pc, #280]	@ (8003f30 <HAL_ADC_Init+0x400>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d137      	bne.n	8003e9c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3f      	ldr	r2, [pc, #252]	@ (8003f34 <HAL_ADC_Init+0x404>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d116      	bne.n	8003e6a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	4b3d      	ldr	r3, [pc, #244]	@ (8003f38 <HAL_ADC_Init+0x408>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	611a      	str	r2, [r3, #16]
 8003e68:	e020      	b.n	8003eac <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	4b32      	ldr	r3, [pc, #200]	@ (8003f3c <HAL_ADC_Init+0x40c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0411      	lsls	r1, r2, #16
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	611a      	str	r2, [r3, #16]
 8003e9a:	e007      	b.n	8003eac <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <HAL_ADC_Init+0x404>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d002      	beq.n	8003ed2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fd67 	bl	80049a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	f023 010f 	bic.w	r1, r3, #15
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ef2:	e007      	b.n	8003f04 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 020f 	bic.w	r2, r2, #15
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f08:	f023 0303 	bic.w	r3, r3, #3
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f14:	e007      	b.n	8003f26 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1a:	f043 0210 	orr.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3724      	adds	r7, #36	@ 0x24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	ffffbffc 	.word	0xffffbffc
 8003f34:	58026000 	.word	0x58026000
 8003f38:	fc00f81f 	.word	0xfc00f81f
 8003f3c:	fc00f81e 	.word	0xfc00f81e

08003f40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b0b9      	sub	sp, #228	@ 0xe4
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f5a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4aab      	ldr	r2, [pc, #684]	@ (8004210 <HAL_ADC_ConfigChannel+0x2d0>)
 8003f62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x34>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	f000 bcfe 	b.w	8004970 <HAL_ADC_ConfigChannel+0xa30>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fdae 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f040 84e2 	bne.w	8004952 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db38      	blt.n	8004008 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a9e      	ldr	r2, [pc, #632]	@ (8004214 <HAL_ADC_ConfigChannel+0x2d4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d033      	beq.n	8004008 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d108      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x7e>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0e9b      	lsrs	r3, r3, #26
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	e01d      	b.n	8003ffa <HAL_ADC_ConfigChannel+0xba>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e004      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	69d1      	ldr	r1, [r2, #28]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	430b      	orrs	r3, r1
 8004006:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	f7ff fc6b 	bl	80038f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fd5f 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8004024:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fd6b 	bl	8003b08 <LL_ADC_INJ_IsConversionOngoing>
 8004032:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 8270 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004040:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 826b 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	461a      	mov	r2, r3
 8004058:	f7ff fc76 	bl	8003948 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6c      	ldr	r2, [pc, #432]	@ (8004214 <HAL_ADC_ConfigChannel+0x2d4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10d      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004080:	e032      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004082:	4b65      	ldr	r3, [pc, #404]	@ (8004218 <HAL_ADC_ConfigChannel+0x2d8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800408e:	d10b      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x168>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	e01d      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1a4>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x18e>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	e00a      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1a4>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d048      	beq.n	8004182 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6919      	ldr	r1, [r3, #16]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004100:	f7ff fb04 	bl	800370c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a42      	ldr	r2, [pc, #264]	@ (8004214 <HAL_ADC_ConfigChannel+0x2d4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d119      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6919      	ldr	r1, [r3, #16]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	461a      	mov	r2, r3
 800411c:	f7ff fb9c 	bl	8003858 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6919      	ldr	r1, [r3, #16]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x1f8>
 8004132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004136:	e000      	b.n	800413a <HAL_ADC_ConfigChannel+0x1fa>
 8004138:	2300      	movs	r3, #0
 800413a:	461a      	mov	r2, r3
 800413c:	f7ff fb6a 	bl	8003814 <LL_ADC_SetOffsetSaturation>
 8004140:	e1ee      	b.n	8004520 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004150:	2b01      	cmp	r3, #1
 8004152:	d102      	bne.n	800415a <HAL_ADC_ConfigChannel+0x21a>
 8004154:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004158:	e000      	b.n	800415c <HAL_ADC_ConfigChannel+0x21c>
 800415a:	2300      	movs	r3, #0
 800415c:	461a      	mov	r2, r3
 800415e:	f7ff fb37 	bl	80037d0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6919      	ldr	r1, [r3, #16]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	7e1b      	ldrb	r3, [r3, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x238>
 8004172:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004176:	e000      	b.n	800417a <HAL_ADC_ConfigChannel+0x23a>
 8004178:	2300      	movs	r3, #0
 800417a:	461a      	mov	r2, r3
 800417c:	f7ff fb0e 	bl	800379c <LL_ADC_SetDataRightShift>
 8004180:	e1ce      	b.n	8004520 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a23      	ldr	r2, [pc, #140]	@ (8004214 <HAL_ADC_ConfigChannel+0x2d4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	f040 8181 	bne.w	8004490 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff faeb 	bl	8003770 <LL_ADC_GetOffsetChannel>
 800419a:	4603      	mov	r3, r0
 800419c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x27a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fae0 	bl	8003770 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	0e9b      	lsrs	r3, r3, #26
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	e01e      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x2b8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fad5 	bl	8003770 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80041d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80041e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e004      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80041ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <HAL_ADC_ConfigChannel+0x2dc>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0e9b      	lsrs	r3, r3, #26
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	e01e      	b.n	800424e <HAL_ADC_ConfigChannel+0x30e>
 8004210:	47ff0000 	.word	0x47ff0000
 8004214:	58026000 	.word	0x58026000
 8004218:	5c001000 	.word	0x5c001000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004240:	2320      	movs	r3, #32
 8004242:	e004      	b.n	800424e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	429a      	cmp	r2, r3
 8004250:	d106      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fb1e 	bl	800389c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fa82 	bl	8003770 <LL_ADC_GetOffsetChannel>
 800426c:	4603      	mov	r3, r0
 800426e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_ADC_ConfigChannel+0x34c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fa77 	bl	8003770 <LL_ADC_GetOffsetChannel>
 8004282:	4603      	mov	r3, r0
 8004284:	0e9b      	lsrs	r3, r3, #26
 8004286:	f003 021f 	and.w	r2, r3, #31
 800428a:	e01e      	b.n	80042ca <HAL_ADC_ConfigChannel+0x38a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fa6c 	bl	8003770 <LL_ADC_GetOffsetChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80042aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80042b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80042ba:	2320      	movs	r3, #32
 80042bc:	e004      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80042be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x3a2>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	0e9b      	lsrs	r3, r3, #26
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	e018      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3d4>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80042f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80042fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004306:	2320      	movs	r3, #32
 8004308:	e004      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800430a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	429a      	cmp	r2, r3
 8004316:	d106      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	2101      	movs	r1, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fabb 	bl	800389c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2102      	movs	r1, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fa1f 	bl	8003770 <LL_ADC_GetOffsetChannel>
 8004332:	4603      	mov	r3, r0
 8004334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x412>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2102      	movs	r1, #2
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fa14 	bl	8003770 <LL_ADC_GetOffsetChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	0e9b      	lsrs	r3, r3, #26
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	e01e      	b.n	8004390 <HAL_ADC_ConfigChannel+0x450>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2102      	movs	r1, #2
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fa09 	bl	8003770 <LL_ADC_GetOffsetChannel>
 800435e:	4603      	mov	r3, r0
 8004360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004370:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004374:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e004      	b.n	800438e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004388:	fab3 f383 	clz	r3, r3
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x468>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0e9b      	lsrs	r3, r3, #26
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	e014      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x492>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80043b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80043bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80043c4:	2320      	movs	r3, #32
 80043c6:	e004      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80043c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d106      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fa5c 	bl	800389c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2103      	movs	r1, #3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff f9c0 	bl	8003770 <LL_ADC_GetOffsetChannel>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x4d0>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2103      	movs	r1, #3
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f9b5 	bl	8003770 <LL_ADC_GetOffsetChannel>
 8004406:	4603      	mov	r3, r0
 8004408:	0e9b      	lsrs	r3, r3, #26
 800440a:	f003 021f 	and.w	r2, r3, #31
 800440e:	e017      	b.n	8004440 <HAL_ADC_ConfigChannel+0x500>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2103      	movs	r1, #3
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f9aa 	bl	8003770 <LL_ADC_GetOffsetChannel>
 800441c:	4603      	mov	r3, r0
 800441e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800442c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e003      	b.n	800443e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x518>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0e9b      	lsrs	r3, r3, #26
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	e011      	b.n	800447c <HAL_ADC_ConfigChannel+0x53c>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004468:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800446a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e003      	b.n	800447c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	429a      	cmp	r2, r3
 800447e:	d14f      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2200      	movs	r2, #0
 8004486:	2103      	movs	r1, #3
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fa07 	bl	800389c <LL_ADC_SetOffsetState>
 800448e:	e047      	b.n	8004520 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004496:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	069b      	lsls	r3, r3, #26
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d107      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044b2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	069b      	lsls	r3, r3, #26
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d107      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044d6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	069b      	lsls	r3, r3, #26
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d107      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044fa:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	069b      	lsls	r3, r3, #26
 800450c:	429a      	cmp	r2, r3
 800450e:	d107      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800451e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fac9 	bl	8003abc <LL_ADC_IsEnabled>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 8219 	bne.w	8004964 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f7ff fa2e 	bl	80039a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4aa1      	ldr	r2, [pc, #644]	@ (80047d0 <HAL_ADC_ConfigChannel+0x890>)
 800454a:	4293      	cmp	r3, r2
 800454c:	f040 812e 	bne.w	80047ac <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x638>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	0e9b      	lsrs	r3, r3, #26
 8004566:	3301      	adds	r3, #1
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2b09      	cmp	r3, #9
 800456e:	bf94      	ite	ls
 8004570:	2301      	movls	r3, #1
 8004572:	2300      	movhi	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e019      	b.n	80045ac <HAL_ADC_ConfigChannel+0x66c>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004588:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800458a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004590:	2320      	movs	r3, #32
 8004592:	e003      	b.n	800459c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	bf94      	ite	ls
 80045a6:	2301      	movls	r3, #1
 80045a8:	2300      	movhi	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d079      	beq.n	80046a4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x68c>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	3301      	adds	r3, #1
 80045c4:	069b      	lsls	r3, r3, #26
 80045c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ca:	e015      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x6b8>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80045da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80045de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e003      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80045e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	069b      	lsls	r3, r3, #26
 80045f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x6d8>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	3301      	adds	r3, #1
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	e017      	b.n	8004648 <HAL_ADC_ConfigChannel+0x708>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800462a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e003      	b.n	800463c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2101      	movs	r1, #1
 8004644:	fa01 f303 	lsl.w	r3, r1, r3
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <HAL_ADC_ConfigChannel+0x72e>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0e9b      	lsrs	r3, r3, #26
 800465e:	3301      	adds	r3, #1
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	051b      	lsls	r3, r3, #20
 800466c:	e018      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x760>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004686:	2320      	movs	r3, #32
 8004688:	e003      	b.n	8004692 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	fab3 f383 	clz	r3, r3
 8004690:	b2db      	uxtb	r3, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	4613      	mov	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4413      	add	r3, r2
 800469e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046a0:	430b      	orrs	r3, r1
 80046a2:	e07e      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d107      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x780>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	3301      	adds	r3, #1
 80046b8:	069b      	lsls	r3, r3, #26
 80046ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046be:	e015      	b.n	80046ec <HAL_ADC_ConfigChannel+0x7ac>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80046d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80046d8:	2320      	movs	r3, #32
 80046da:	e003      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3301      	adds	r3, #1
 80046e6:	069b      	lsls	r3, r3, #26
 80046e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_ADC_ConfigChannel+0x7cc>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	3301      	adds	r3, #1
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	e017      	b.n	800473c <HAL_ADC_ConfigChannel+0x7fc>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	61bb      	str	r3, [r7, #24]
  return result;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004724:	2320      	movs	r3, #32
 8004726:	e003      	b.n	8004730 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	3301      	adds	r3, #1
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	ea42 0103 	orr.w	r1, r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x828>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	3301      	adds	r3, #1
 8004754:	f003 021f 	and.w	r2, r3, #31
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	3b1e      	subs	r3, #30
 8004760:	051b      	lsls	r3, r3, #20
 8004762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004766:	e01b      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x860>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	60fb      	str	r3, [r7, #12]
  return result;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004780:	2320      	movs	r3, #32
 8004782:	e003      	b.n	800478c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f003 021f 	and.w	r2, r3, #31
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	3b1e      	subs	r3, #30
 800479a:	051b      	lsls	r3, r3, #20
 800479c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047a0:	430b      	orrs	r3, r1
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7ff f8ce 	bl	8003948 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f280 80d7 	bge.w	8004964 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a06      	ldr	r2, [pc, #24]	@ (80047d4 <HAL_ADC_ConfigChannel+0x894>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_ADC_ConfigChannel+0x88a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <HAL_ADC_ConfigChannel+0x898>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10a      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x8a0>
 80047ca:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <HAL_ADC_ConfigChannel+0x89c>)
 80047cc:	e009      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x8a2>
 80047ce:	bf00      	nop
 80047d0:	47ff0000 	.word	0x47ff0000
 80047d4:	40022000 	.word	0x40022000
 80047d8:	40022100 	.word	0x40022100
 80047dc:	40022300 	.word	0x40022300
 80047e0:	4b65      	ldr	r3, [pc, #404]	@ (8004978 <HAL_ADC_ConfigChannel+0xa38>)
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe ff84 	bl	80036f0 <LL_ADC_GetCommonPathInternalCh>
 80047e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a62      	ldr	r2, [pc, #392]	@ (800497c <HAL_ADC_ConfigChannel+0xa3c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_ADC_ConfigChannel+0x8c0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a61      	ldr	r2, [pc, #388]	@ (8004980 <HAL_ADC_ConfigChannel+0xa40>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10e      	bne.n	800481e <HAL_ADC_ConfigChannel+0x8de>
 8004800:	485e      	ldr	r0, [pc, #376]	@ (800497c <HAL_ADC_ConfigChannel+0xa3c>)
 8004802:	f7ff f95b 	bl	8003abc <LL_ADC_IsEnabled>
 8004806:	4604      	mov	r4, r0
 8004808:	485d      	ldr	r0, [pc, #372]	@ (8004980 <HAL_ADC_ConfigChannel+0xa40>)
 800480a:	f7ff f957 	bl	8003abc <LL_ADC_IsEnabled>
 800480e:	4603      	mov	r3, r0
 8004810:	4323      	orrs	r3, r4
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf0c      	ite	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	2300      	movne	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e008      	b.n	8004830 <HAL_ADC_ConfigChannel+0x8f0>
 800481e:	4859      	ldr	r0, [pc, #356]	@ (8004984 <HAL_ADC_ConfigChannel+0xa44>)
 8004820:	f7ff f94c 	bl	8003abc <LL_ADC_IsEnabled>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8084 	beq.w	800493e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a53      	ldr	r2, [pc, #332]	@ (8004988 <HAL_ADC_ConfigChannel+0xa48>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d132      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x966>
 8004840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d12c      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a4c      	ldr	r2, [pc, #304]	@ (8004984 <HAL_ADC_ConfigChannel+0xa44>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f040 8086 	bne.w	8004964 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a47      	ldr	r2, [pc, #284]	@ (800497c <HAL_ADC_ConfigChannel+0xa3c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_ADC_ConfigChannel+0x92c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a46      	ldr	r2, [pc, #280]	@ (8004980 <HAL_ADC_ConfigChannel+0xa40>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x930>
 800486c:	4a47      	ldr	r2, [pc, #284]	@ (800498c <HAL_ADC_ConfigChannel+0xa4c>)
 800486e:	e000      	b.n	8004872 <HAL_ADC_ConfigChannel+0x932>
 8004870:	4a41      	ldr	r2, [pc, #260]	@ (8004978 <HAL_ADC_ConfigChannel+0xa38>)
 8004872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004876:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f7fe ff24 	bl	80036ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004882:	4b43      	ldr	r3, [pc, #268]	@ (8004990 <HAL_ADC_ConfigChannel+0xa50>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	4a42      	ldr	r2, [pc, #264]	@ (8004994 <HAL_ADC_ConfigChannel+0xa54>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	3301      	adds	r3, #1
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004896:	e002      	b.n	800489e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3b01      	subs	r3, #1
 800489c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f9      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048a4:	e05e      	b.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004998 <HAL_ADC_ConfigChannel+0xa58>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d120      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x9b2>
 80048b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11a      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	@ (8004984 <HAL_ADC_ConfigChannel+0xa44>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d14e      	bne.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2c      	ldr	r2, [pc, #176]	@ (800497c <HAL_ADC_ConfigChannel+0xa3c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_ADC_ConfigChannel+0x99a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004980 <HAL_ADC_ConfigChannel+0xa40>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x99e>
 80048da:	4a2c      	ldr	r2, [pc, #176]	@ (800498c <HAL_ADC_ConfigChannel+0xa4c>)
 80048dc:	e000      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x9a0>
 80048de:	4a26      	ldr	r2, [pc, #152]	@ (8004978 <HAL_ADC_ConfigChannel+0xa38>)
 80048e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f7fe feed 	bl	80036ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048f0:	e038      	b.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a29      	ldr	r2, [pc, #164]	@ (800499c <HAL_ADC_ConfigChannel+0xa5c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d133      	bne.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
 80048fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d12d      	bne.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1d      	ldr	r2, [pc, #116]	@ (8004984 <HAL_ADC_ConfigChannel+0xa44>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d128      	bne.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a19      	ldr	r2, [pc, #100]	@ (800497c <HAL_ADC_ConfigChannel+0xa3c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_ADC_ConfigChannel+0x9e6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a17      	ldr	r2, [pc, #92]	@ (8004980 <HAL_ADC_ConfigChannel+0xa40>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_ADC_ConfigChannel+0x9ea>
 8004926:	4a19      	ldr	r2, [pc, #100]	@ (800498c <HAL_ADC_ConfigChannel+0xa4c>)
 8004928:	e000      	b.n	800492c <HAL_ADC_ConfigChannel+0x9ec>
 800492a:	4a13      	ldr	r2, [pc, #76]	@ (8004978 <HAL_ADC_ConfigChannel+0xa38>)
 800492c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004930:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7fe fec7 	bl	80036ca <LL_ADC_SetCommonPathInternalCh>
 800493c:	e012      	b.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004950:	e008      	b.n	8004964 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800496c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004970:	4618      	mov	r0, r3
 8004972:	37e4      	adds	r7, #228	@ 0xe4
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}
 8004978:	58026300 	.word	0x58026300
 800497c:	40022000 	.word	0x40022000
 8004980:	40022100 	.word	0x40022100
 8004984:	58026000 	.word	0x58026000
 8004988:	c7520000 	.word	0xc7520000
 800498c:	40022300 	.word	0x40022300
 8004990:	24000000 	.word	0x24000000
 8004994:	053e2d63 	.word	0x053e2d63
 8004998:	c3210000 	.word	0xc3210000
 800499c:	cb840000 	.word	0xcb840000

080049a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6c      	ldr	r2, [pc, #432]	@ (8004b60 <ADC_ConfigureBoostMode+0x1c0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <ADC_ConfigureBoostMode+0x1c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6b      	ldr	r2, [pc, #428]	@ (8004b64 <ADC_ConfigureBoostMode+0x1c4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d109      	bne.n	80049d0 <ADC_ConfigureBoostMode+0x30>
 80049bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004b68 <ADC_ConfigureBoostMode+0x1c8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e008      	b.n	80049e2 <ADC_ConfigureBoostMode+0x42>
 80049d0:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <ADC_ConfigureBoostMode+0x1cc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01c      	beq.n	8004a20 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80049e6:	f002 faf7 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 80049ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049f4:	d010      	beq.n	8004a18 <ADC_ConfigureBoostMode+0x78>
 80049f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049fa:	d873      	bhi.n	8004ae4 <ADC_ConfigureBoostMode+0x144>
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a00:	d002      	beq.n	8004a08 <ADC_ConfigureBoostMode+0x68>
 8004a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a06:	d16d      	bne.n	8004ae4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	60fb      	str	r3, [r7, #12]
        break;
 8004a16:	e068      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	60fb      	str	r3, [r7, #12]
        break;
 8004a1e:	e064      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a20:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004a24:	f04f 0100 	mov.w	r1, #0
 8004a28:	f003 fcd2 	bl	80083d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a2c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a36:	d051      	beq.n	8004adc <ADC_ConfigureBoostMode+0x13c>
 8004a38:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a3c:	d854      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a3e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a42:	d047      	beq.n	8004ad4 <ADC_ConfigureBoostMode+0x134>
 8004a44:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a48:	d84e      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a4a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a4e:	d03d      	beq.n	8004acc <ADC_ConfigureBoostMode+0x12c>
 8004a50:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a54:	d848      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a5a:	d033      	beq.n	8004ac4 <ADC_ConfigureBoostMode+0x124>
 8004a5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a60:	d842      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a62:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a66:	d029      	beq.n	8004abc <ADC_ConfigureBoostMode+0x11c>
 8004a68:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a6c:	d83c      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a6e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a72:	d01a      	beq.n	8004aaa <ADC_ConfigureBoostMode+0x10a>
 8004a74:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a78:	d836      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a7a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a7e:	d014      	beq.n	8004aaa <ADC_ConfigureBoostMode+0x10a>
 8004a80:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a84:	d830      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8a:	d00e      	beq.n	8004aaa <ADC_ConfigureBoostMode+0x10a>
 8004a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a90:	d82a      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a96:	d008      	beq.n	8004aaa <ADC_ConfigureBoostMode+0x10a>
 8004a98:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a9c:	d824      	bhi.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
 8004a9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aa2:	d002      	beq.n	8004aaa <ADC_ConfigureBoostMode+0x10a>
 8004aa4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004aa8:	d11e      	bne.n	8004ae8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	0c9b      	lsrs	r3, r3, #18
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	60fb      	str	r3, [r7, #12]
        break;
 8004aba:	e016      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]
        break;
 8004ac2:	e012      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	60fb      	str	r3, [r7, #12]
        break;
 8004aca:	e00e      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	099b      	lsrs	r3, r3, #6
 8004ad0:	60fb      	str	r3, [r7, #12]
        break;
 8004ad2:	e00a      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	09db      	lsrs	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
        break;
 8004ada:	e006      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	60fb      	str	r3, [r7, #12]
        break;
 8004ae2:	e002      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
        break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004ae8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b70 <ADC_ConfigureBoostMode+0x1d0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d808      	bhi.n	8004b0a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b06:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b08:	e025      	b.n	8004b56 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <ADC_ConfigureBoostMode+0x1d4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d80a      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b24:	609a      	str	r2, [r3, #8]
}
 8004b26:	e016      	b.n	8004b56 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <ADC_ConfigureBoostMode+0x1d8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d80a      	bhi.n	8004b46 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b42:	609a      	str	r2, [r3, #8]
}
 8004b44:	e007      	b.n	8004b56 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004b54:	609a      	str	r2, [r3, #8]
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40022100 	.word	0x40022100
 8004b68:	40022300 	.word	0x40022300
 8004b6c:	58026300 	.word	0x58026300
 8004b70:	005f5e10 	.word	0x005f5e10
 8004b74:	00bebc20 	.word	0x00bebc20
 8004b78:	017d7840 	.word	0x017d7840

08004b7c <LL_ADC_IsEnabled>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <LL_ADC_IsEnabled+0x18>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <LL_ADC_IsEnabled+0x1a>
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d101      	bne.n	8004bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b0a3      	sub	sp, #140	@ 0x8c
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e0c1      	b.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d102      	bne.n	8004c06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c00:	4b5d      	ldr	r3, [pc, #372]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e001      	b.n	8004c0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0a0      	b.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ffb9 	bl	8004ba2 <LL_ADC_REG_IsConversionOngoing>
 8004c30:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ffb2 	bl	8004ba2 <LL_ADC_REG_IsConversionOngoing>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 8081 	bne.w	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d17c      	bne.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a48      	ldr	r2, [pc, #288]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a46      	ldr	r2, [pc, #280]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c62:	4b46      	ldr	r3, [pc, #280]	@ (8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c64:	e000      	b.n	8004c68 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c66:	4b46      	ldr	r3, [pc, #280]	@ (8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c68:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d039      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a3a      	ldr	r2, [pc, #232]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a39      	ldr	r2, [pc, #228]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10e      	bne.n	8004cb6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c98:	4836      	ldr	r0, [pc, #216]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c9a:	f7ff ff6f 	bl	8004b7c <LL_ADC_IsEnabled>
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4835      	ldr	r0, [pc, #212]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ca2:	f7ff ff6b 	bl	8004b7c <LL_ADC_IsEnabled>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4323      	orrs	r3, r4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	e008      	b.n	8004cc8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004cb6:	4833      	ldr	r0, [pc, #204]	@ (8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cb8:	f7ff ff60 	bl	8004b7c <LL_ADC_IsEnabled>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d047      	beq.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ccc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	6811      	ldr	r1, [r2, #0]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ce2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ce4:	e03a      	b.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cf0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10e      	bne.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004d06:	481b      	ldr	r0, [pc, #108]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d08:	f7ff ff38 	bl	8004b7c <LL_ADC_IsEnabled>
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	481a      	ldr	r0, [pc, #104]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d10:	f7ff ff34 	bl	8004b7c <LL_ADC_IsEnabled>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4323      	orrs	r3, r4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e008      	b.n	8004d36 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d24:	4817      	ldr	r0, [pc, #92]	@ (8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d26:	f7ff ff29 	bl	8004b7c <LL_ADC_IsEnabled>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d010      	beq.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004d44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d46:	e009      	b.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004d5a:	e000      	b.n	8004d5e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	378c      	adds	r7, #140	@ 0x8c
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd90      	pop	{r4, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40022000 	.word	0x40022000
 8004d78:	40022100 	.word	0x40022100
 8004d7c:	40022300 	.word	0x40022300
 8004d80:	58026300 	.word	0x58026300
 8004d84:	58026000 	.word	0x58026000
 8004d88:	fffff0e0 	.word	0xfffff0e0

08004d8c <__NVIC_SetPriorityGrouping>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <__NVIC_SetPriorityGrouping+0x40>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004da8:	4013      	ands	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dba:	4a04      	ldr	r2, [pc, #16]	@ (8004dcc <__NVIC_SetPriorityGrouping+0x40>)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	60d3      	str	r3, [r2, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000ed00 	.word	0xe000ed00
 8004dd0:	05fa0000 	.word	0x05fa0000

08004dd4 <__NVIC_GetPriorityGrouping>:
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <__NVIC_GetPriorityGrouping+0x18>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	f003 0307 	and.w	r3, r3, #7
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <__NVIC_EnableIRQ>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	db0b      	blt.n	8004e1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	f003 021f 	and.w	r2, r3, #31
 8004e08:	4907      	ldr	r1, [pc, #28]	@ (8004e28 <__NVIC_EnableIRQ+0x38>)
 8004e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2001      	movs	r0, #1
 8004e12:	fa00 f202 	lsl.w	r2, r0, r2
 8004e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	e000e100 	.word	0xe000e100

08004e2c <__NVIC_SetPriority>:
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	db0a      	blt.n	8004e56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	490c      	ldr	r1, [pc, #48]	@ (8004e78 <__NVIC_SetPriority+0x4c>)
 8004e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e54:	e00a      	b.n	8004e6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	4908      	ldr	r1, [pc, #32]	@ (8004e7c <__NVIC_SetPriority+0x50>)
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	3b04      	subs	r3, #4
 8004e64:	0112      	lsls	r2, r2, #4
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	440b      	add	r3, r1
 8004e6a:	761a      	strb	r2, [r3, #24]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000e100 	.word	0xe000e100
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <NVIC_EncodePriority>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	@ 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f1c3 0307 	rsb	r3, r3, #7
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	bf28      	it	cs
 8004e9e:	2304      	movcs	r3, #4
 8004ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d902      	bls.n	8004eb0 <NVIC_EncodePriority+0x30>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3b03      	subs	r3, #3
 8004eae:	e000      	b.n	8004eb2 <NVIC_EncodePriority+0x32>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43da      	mvns	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed2:	43d9      	mvns	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed8:	4313      	orrs	r3, r2
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3724      	adds	r7, #36	@ 0x24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <SysTick_Config>:
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ef8:	d301      	bcc.n	8004efe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004efa:	2301      	movs	r3, #1
 8004efc:	e00f      	b.n	8004f1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004efe:	4a0a      	ldr	r2, [pc, #40]	@ (8004f28 <SysTick_Config+0x40>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f06:	210f      	movs	r1, #15
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	f7ff ff8e 	bl	8004e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <SysTick_Config+0x40>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f16:	4b04      	ldr	r3, [pc, #16]	@ (8004f28 <SysTick_Config+0x40>)
 8004f18:	2207      	movs	r2, #7
 8004f1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	e000e010 	.word	0xe000e010

08004f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff29 	bl	8004d8c <__NVIC_SetPriorityGrouping>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4603      	mov	r3, r0
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f50:	f7ff ff40 	bl	8004dd4 <__NVIC_GetPriorityGrouping>
 8004f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f7ff ff90 	bl	8004e80 <NVIC_EncodePriority>
 8004f60:	4602      	mov	r2, r0
 8004f62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff5f 	bl	8004e2c <__NVIC_SetPriority>
}
 8004f6e:	bf00      	nop
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff33 	bl	8004df0 <__NVIC_EnableIRQ>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ffa4 	bl	8004ee8 <SysTick_Config>
 8004fa0:	4603      	mov	r3, r0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004fb0:	f3bf 8f5f 	dmb	sy
}
 8004fb4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004fb6:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <HAL_MPU_Disable+0x28>)
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	4a06      	ldr	r2, [pc, #24]	@ (8004fd4 <HAL_MPU_Disable+0x28>)
 8004fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004fc2:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_MPU_Disable+0x2c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	e000ed00 	.word	0xe000ed00
 8004fd8:	e000ed90 	.word	0xe000ed90

08004fdc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8005014 <HAL_MPU_Enable+0x38>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004fee:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <HAL_MPU_Enable+0x3c>)
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <HAL_MPU_Enable+0x3c>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004ffa:	f3bf 8f4f 	dsb	sy
}
 8004ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005000:	f3bf 8f6f 	isb	sy
}
 8005004:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	e000ed90 	.word	0xe000ed90
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	785a      	ldrb	r2, [r3, #1]
 8005028:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <HAL_MPU_ConfigRegion+0x7c>)
 800502a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800502c:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <HAL_MPU_ConfigRegion+0x7c>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	4a19      	ldr	r2, [pc, #100]	@ (8005098 <HAL_MPU_ConfigRegion+0x7c>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005038:	4a17      	ldr	r2, [pc, #92]	@ (8005098 <HAL_MPU_ConfigRegion+0x7c>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7b1b      	ldrb	r3, [r3, #12]
 8005044:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7adb      	ldrb	r3, [r3, #11]
 800504a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800504c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	7a9b      	ldrb	r3, [r3, #10]
 8005052:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005054:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7b5b      	ldrb	r3, [r3, #13]
 800505a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800505c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7b9b      	ldrb	r3, [r3, #14]
 8005062:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	7bdb      	ldrb	r3, [r3, #15]
 800506a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800506c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7a5b      	ldrb	r3, [r3, #9]
 8005072:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005074:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7a1b      	ldrb	r3, [r3, #8]
 800507a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800507c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005084:	4a04      	ldr	r2, [pc, #16]	@ (8005098 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005086:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005088:	6113      	str	r3, [r2, #16]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	e000ed90 	.word	0xe000ed90

0800509c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80050a4:	f7fe face 	bl	8003644 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e2dc      	b.n	800566e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d008      	beq.n	80050d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2280      	movs	r2, #128	@ 0x80
 80050c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e2cd      	b.n	800566e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a76      	ldr	r2, [pc, #472]	@ (80052b0 <HAL_DMA_Abort+0x214>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04a      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a74      	ldr	r2, [pc, #464]	@ (80052b4 <HAL_DMA_Abort+0x218>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d045      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a73      	ldr	r2, [pc, #460]	@ (80052b8 <HAL_DMA_Abort+0x21c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d040      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a71      	ldr	r2, [pc, #452]	@ (80052bc <HAL_DMA_Abort+0x220>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d03b      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a70      	ldr	r2, [pc, #448]	@ (80052c0 <HAL_DMA_Abort+0x224>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d036      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a6e      	ldr	r2, [pc, #440]	@ (80052c4 <HAL_DMA_Abort+0x228>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6d      	ldr	r2, [pc, #436]	@ (80052c8 <HAL_DMA_Abort+0x22c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d02c      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a6b      	ldr	r2, [pc, #428]	@ (80052cc <HAL_DMA_Abort+0x230>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d027      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a6a      	ldr	r2, [pc, #424]	@ (80052d0 <HAL_DMA_Abort+0x234>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a68      	ldr	r2, [pc, #416]	@ (80052d4 <HAL_DMA_Abort+0x238>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01d      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a67      	ldr	r2, [pc, #412]	@ (80052d8 <HAL_DMA_Abort+0x23c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a65      	ldr	r2, [pc, #404]	@ (80052dc <HAL_DMA_Abort+0x240>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a64      	ldr	r2, [pc, #400]	@ (80052e0 <HAL_DMA_Abort+0x244>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a62      	ldr	r2, [pc, #392]	@ (80052e4 <HAL_DMA_Abort+0x248>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a61      	ldr	r2, [pc, #388]	@ (80052e8 <HAL_DMA_Abort+0x24c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_DMA_Abort+0xd6>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5f      	ldr	r2, [pc, #380]	@ (80052ec <HAL_DMA_Abort+0x250>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_DMA_Abort+0xda>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_DMA_Abort+0xdc>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d013      	beq.n	80051a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 021e 	bic.w	r2, r2, #30
 800518a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800519a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e00a      	b.n	80051ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 020e 	bic.w	r2, r2, #14
 80051b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a3c      	ldr	r2, [pc, #240]	@ (80052b0 <HAL_DMA_Abort+0x214>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d072      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a3a      	ldr	r2, [pc, #232]	@ (80052b4 <HAL_DMA_Abort+0x218>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d06d      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a39      	ldr	r2, [pc, #228]	@ (80052b8 <HAL_DMA_Abort+0x21c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d068      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a37      	ldr	r2, [pc, #220]	@ (80052bc <HAL_DMA_Abort+0x220>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d063      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a36      	ldr	r2, [pc, #216]	@ (80052c0 <HAL_DMA_Abort+0x224>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d05e      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a34      	ldr	r2, [pc, #208]	@ (80052c4 <HAL_DMA_Abort+0x228>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d059      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a33      	ldr	r2, [pc, #204]	@ (80052c8 <HAL_DMA_Abort+0x22c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d054      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a31      	ldr	r2, [pc, #196]	@ (80052cc <HAL_DMA_Abort+0x230>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d04f      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a30      	ldr	r2, [pc, #192]	@ (80052d0 <HAL_DMA_Abort+0x234>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d04a      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a2e      	ldr	r2, [pc, #184]	@ (80052d4 <HAL_DMA_Abort+0x238>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d045      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2d      	ldr	r2, [pc, #180]	@ (80052d8 <HAL_DMA_Abort+0x23c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d040      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2b      	ldr	r2, [pc, #172]	@ (80052dc <HAL_DMA_Abort+0x240>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d03b      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2a      	ldr	r2, [pc, #168]	@ (80052e0 <HAL_DMA_Abort+0x244>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d036      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a28      	ldr	r2, [pc, #160]	@ (80052e4 <HAL_DMA_Abort+0x248>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d031      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a27      	ldr	r2, [pc, #156]	@ (80052e8 <HAL_DMA_Abort+0x24c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d02c      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a25      	ldr	r2, [pc, #148]	@ (80052ec <HAL_DMA_Abort+0x250>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d027      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a24      	ldr	r2, [pc, #144]	@ (80052f0 <HAL_DMA_Abort+0x254>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a22      	ldr	r2, [pc, #136]	@ (80052f4 <HAL_DMA_Abort+0x258>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01d      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a21      	ldr	r2, [pc, #132]	@ (80052f8 <HAL_DMA_Abort+0x25c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1f      	ldr	r2, [pc, #124]	@ (80052fc <HAL_DMA_Abort+0x260>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1e      	ldr	r2, [pc, #120]	@ (8005300 <HAL_DMA_Abort+0x264>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <HAL_DMA_Abort+0x268>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <HAL_DMA_Abort+0x26c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_DMA_Abort+0x20e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a19      	ldr	r2, [pc, #100]	@ (800530c <HAL_DMA_Abort+0x270>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d132      	bne.n	8005310 <HAL_DMA_Abort+0x274>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e031      	b.n	8005312 <HAL_DMA_Abort+0x276>
 80052ae:	bf00      	nop
 80052b0:	40020010 	.word	0x40020010
 80052b4:	40020028 	.word	0x40020028
 80052b8:	40020040 	.word	0x40020040
 80052bc:	40020058 	.word	0x40020058
 80052c0:	40020070 	.word	0x40020070
 80052c4:	40020088 	.word	0x40020088
 80052c8:	400200a0 	.word	0x400200a0
 80052cc:	400200b8 	.word	0x400200b8
 80052d0:	40020410 	.word	0x40020410
 80052d4:	40020428 	.word	0x40020428
 80052d8:	40020440 	.word	0x40020440
 80052dc:	40020458 	.word	0x40020458
 80052e0:	40020470 	.word	0x40020470
 80052e4:	40020488 	.word	0x40020488
 80052e8:	400204a0 	.word	0x400204a0
 80052ec:	400204b8 	.word	0x400204b8
 80052f0:	58025408 	.word	0x58025408
 80052f4:	5802541c 	.word	0x5802541c
 80052f8:	58025430 	.word	0x58025430
 80052fc:	58025444 	.word	0x58025444
 8005300:	58025458 	.word	0x58025458
 8005304:	5802546c 	.word	0x5802546c
 8005308:	58025480 	.word	0x58025480
 800530c:	58025494 	.word	0x58025494
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005324:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a6d      	ldr	r2, [pc, #436]	@ (80054e0 <HAL_DMA_Abort+0x444>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d04a      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6b      	ldr	r2, [pc, #428]	@ (80054e4 <HAL_DMA_Abort+0x448>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d045      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6a      	ldr	r2, [pc, #424]	@ (80054e8 <HAL_DMA_Abort+0x44c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d040      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a68      	ldr	r2, [pc, #416]	@ (80054ec <HAL_DMA_Abort+0x450>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d03b      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a67      	ldr	r2, [pc, #412]	@ (80054f0 <HAL_DMA_Abort+0x454>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d036      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a65      	ldr	r2, [pc, #404]	@ (80054f4 <HAL_DMA_Abort+0x458>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d031      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a64      	ldr	r2, [pc, #400]	@ (80054f8 <HAL_DMA_Abort+0x45c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d02c      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a62      	ldr	r2, [pc, #392]	@ (80054fc <HAL_DMA_Abort+0x460>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d027      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a61      	ldr	r2, [pc, #388]	@ (8005500 <HAL_DMA_Abort+0x464>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5f      	ldr	r2, [pc, #380]	@ (8005504 <HAL_DMA_Abort+0x468>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01d      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a5e      	ldr	r2, [pc, #376]	@ (8005508 <HAL_DMA_Abort+0x46c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a5c      	ldr	r2, [pc, #368]	@ (800550c <HAL_DMA_Abort+0x470>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a5b      	ldr	r2, [pc, #364]	@ (8005510 <HAL_DMA_Abort+0x474>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a59      	ldr	r2, [pc, #356]	@ (8005514 <HAL_DMA_Abort+0x478>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a58      	ldr	r2, [pc, #352]	@ (8005518 <HAL_DMA_Abort+0x47c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_DMA_Abort+0x32a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a56      	ldr	r2, [pc, #344]	@ (800551c <HAL_DMA_Abort+0x480>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d108      	bne.n	80053d8 <HAL_DMA_Abort+0x33c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e007      	b.n	80053e8 <HAL_DMA_Abort+0x34c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053e8:	e013      	b.n	8005412 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053ea:	f7fe f92b 	bl	8003644 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b05      	cmp	r3, #5
 80053f6:	d90c      	bls.n	8005412 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2203      	movs	r2, #3
 8005402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e12d      	b.n	800566e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2f      	ldr	r2, [pc, #188]	@ (80054e0 <HAL_DMA_Abort+0x444>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d04a      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a2d      	ldr	r2, [pc, #180]	@ (80054e4 <HAL_DMA_Abort+0x448>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d045      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2c      	ldr	r2, [pc, #176]	@ (80054e8 <HAL_DMA_Abort+0x44c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d040      	beq.n	80054be <HAL_DMA_Abort+0x422>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2a      	ldr	r2, [pc, #168]	@ (80054ec <HAL_DMA_Abort+0x450>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d03b      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a29      	ldr	r2, [pc, #164]	@ (80054f0 <HAL_DMA_Abort+0x454>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d036      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a27      	ldr	r2, [pc, #156]	@ (80054f4 <HAL_DMA_Abort+0x458>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d031      	beq.n	80054be <HAL_DMA_Abort+0x422>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a26      	ldr	r2, [pc, #152]	@ (80054f8 <HAL_DMA_Abort+0x45c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d02c      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a24      	ldr	r2, [pc, #144]	@ (80054fc <HAL_DMA_Abort+0x460>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d027      	beq.n	80054be <HAL_DMA_Abort+0x422>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a23      	ldr	r2, [pc, #140]	@ (8005500 <HAL_DMA_Abort+0x464>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <HAL_DMA_Abort+0x468>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01d      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a20      	ldr	r2, [pc, #128]	@ (8005508 <HAL_DMA_Abort+0x46c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <HAL_DMA_Abort+0x422>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <HAL_DMA_Abort+0x470>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_DMA_Abort+0x422>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1d      	ldr	r2, [pc, #116]	@ (8005510 <HAL_DMA_Abort+0x474>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_DMA_Abort+0x422>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <HAL_DMA_Abort+0x478>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_DMA_Abort+0x422>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005518 <HAL_DMA_Abort+0x47c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_DMA_Abort+0x422>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a18      	ldr	r2, [pc, #96]	@ (800551c <HAL_DMA_Abort+0x480>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <HAL_DMA_Abort+0x426>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_DMA_Abort+0x428>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02b      	beq.n	8005520 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	223f      	movs	r2, #63	@ 0x3f
 80054d8:	409a      	lsls	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	e02a      	b.n	8005536 <HAL_DMA_Abort+0x49a>
 80054e0:	40020010 	.word	0x40020010
 80054e4:	40020028 	.word	0x40020028
 80054e8:	40020040 	.word	0x40020040
 80054ec:	40020058 	.word	0x40020058
 80054f0:	40020070 	.word	0x40020070
 80054f4:	40020088 	.word	0x40020088
 80054f8:	400200a0 	.word	0x400200a0
 80054fc:	400200b8 	.word	0x400200b8
 8005500:	40020410 	.word	0x40020410
 8005504:	40020428 	.word	0x40020428
 8005508:	40020440 	.word	0x40020440
 800550c:	40020458 	.word	0x40020458
 8005510:	40020470 	.word	0x40020470
 8005514:	40020488 	.word	0x40020488
 8005518:	400204a0 	.word	0x400204a0
 800551c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005524:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	2201      	movs	r2, #1
 8005530:	409a      	lsls	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4f      	ldr	r2, [pc, #316]	@ (8005678 <HAL_DMA_Abort+0x5dc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d072      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a4d      	ldr	r2, [pc, #308]	@ (800567c <HAL_DMA_Abort+0x5e0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d06d      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4c      	ldr	r2, [pc, #304]	@ (8005680 <HAL_DMA_Abort+0x5e4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d068      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a4a      	ldr	r2, [pc, #296]	@ (8005684 <HAL_DMA_Abort+0x5e8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d063      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a49      	ldr	r2, [pc, #292]	@ (8005688 <HAL_DMA_Abort+0x5ec>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d05e      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a47      	ldr	r2, [pc, #284]	@ (800568c <HAL_DMA_Abort+0x5f0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d059      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a46      	ldr	r2, [pc, #280]	@ (8005690 <HAL_DMA_Abort+0x5f4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d054      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a44      	ldr	r2, [pc, #272]	@ (8005694 <HAL_DMA_Abort+0x5f8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d04f      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a43      	ldr	r2, [pc, #268]	@ (8005698 <HAL_DMA_Abort+0x5fc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d04a      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a41      	ldr	r2, [pc, #260]	@ (800569c <HAL_DMA_Abort+0x600>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d045      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a40      	ldr	r2, [pc, #256]	@ (80056a0 <HAL_DMA_Abort+0x604>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d040      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a3e      	ldr	r2, [pc, #248]	@ (80056a4 <HAL_DMA_Abort+0x608>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d03b      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a3d      	ldr	r2, [pc, #244]	@ (80056a8 <HAL_DMA_Abort+0x60c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d036      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3b      	ldr	r2, [pc, #236]	@ (80056ac <HAL_DMA_Abort+0x610>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d031      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a3a      	ldr	r2, [pc, #232]	@ (80056b0 <HAL_DMA_Abort+0x614>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d02c      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a38      	ldr	r2, [pc, #224]	@ (80056b4 <HAL_DMA_Abort+0x618>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d027      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a37      	ldr	r2, [pc, #220]	@ (80056b8 <HAL_DMA_Abort+0x61c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a35      	ldr	r2, [pc, #212]	@ (80056bc <HAL_DMA_Abort+0x620>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01d      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a34      	ldr	r2, [pc, #208]	@ (80056c0 <HAL_DMA_Abort+0x624>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a32      	ldr	r2, [pc, #200]	@ (80056c4 <HAL_DMA_Abort+0x628>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a31      	ldr	r2, [pc, #196]	@ (80056c8 <HAL_DMA_Abort+0x62c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2f      	ldr	r2, [pc, #188]	@ (80056cc <HAL_DMA_Abort+0x630>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a2e      	ldr	r2, [pc, #184]	@ (80056d0 <HAL_DMA_Abort+0x634>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_DMA_Abort+0x58a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <HAL_DMA_Abort+0x638>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <HAL_DMA_Abort+0x58e>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <HAL_DMA_Abort+0x590>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005638:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800564c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005650:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800565a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40020010 	.word	0x40020010
 800567c:	40020028 	.word	0x40020028
 8005680:	40020040 	.word	0x40020040
 8005684:	40020058 	.word	0x40020058
 8005688:	40020070 	.word	0x40020070
 800568c:	40020088 	.word	0x40020088
 8005690:	400200a0 	.word	0x400200a0
 8005694:	400200b8 	.word	0x400200b8
 8005698:	40020410 	.word	0x40020410
 800569c:	40020428 	.word	0x40020428
 80056a0:	40020440 	.word	0x40020440
 80056a4:	40020458 	.word	0x40020458
 80056a8:	40020470 	.word	0x40020470
 80056ac:	40020488 	.word	0x40020488
 80056b0:	400204a0 	.word	0x400204a0
 80056b4:	400204b8 	.word	0x400204b8
 80056b8:	58025408 	.word	0x58025408
 80056bc:	5802541c 	.word	0x5802541c
 80056c0:	58025430 	.word	0x58025430
 80056c4:	58025444 	.word	0x58025444
 80056c8:	58025458 	.word	0x58025458
 80056cc:	5802546c 	.word	0x5802546c
 80056d0:	58025480 	.word	0x58025480
 80056d4:	58025494 	.word	0x58025494

080056d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e237      	b.n	8005b5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d004      	beq.n	8005700 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2280      	movs	r2, #128	@ 0x80
 80056fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e22c      	b.n	8005b5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a5c      	ldr	r2, [pc, #368]	@ (8005878 <HAL_DMA_Abort_IT+0x1a0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d04a      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a5b      	ldr	r2, [pc, #364]	@ (800587c <HAL_DMA_Abort_IT+0x1a4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d045      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a59      	ldr	r2, [pc, #356]	@ (8005880 <HAL_DMA_Abort_IT+0x1a8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d040      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a58      	ldr	r2, [pc, #352]	@ (8005884 <HAL_DMA_Abort_IT+0x1ac>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d03b      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a56      	ldr	r2, [pc, #344]	@ (8005888 <HAL_DMA_Abort_IT+0x1b0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d036      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a55      	ldr	r2, [pc, #340]	@ (800588c <HAL_DMA_Abort_IT+0x1b4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d031      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a53      	ldr	r2, [pc, #332]	@ (8005890 <HAL_DMA_Abort_IT+0x1b8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d02c      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a52      	ldr	r2, [pc, #328]	@ (8005894 <HAL_DMA_Abort_IT+0x1bc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d027      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a50      	ldr	r2, [pc, #320]	@ (8005898 <HAL_DMA_Abort_IT+0x1c0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d022      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4f      	ldr	r2, [pc, #316]	@ (800589c <HAL_DMA_Abort_IT+0x1c4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d01d      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a4d      	ldr	r2, [pc, #308]	@ (80058a0 <HAL_DMA_Abort_IT+0x1c8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d018      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a4c      	ldr	r2, [pc, #304]	@ (80058a4 <HAL_DMA_Abort_IT+0x1cc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a4a      	ldr	r2, [pc, #296]	@ (80058a8 <HAL_DMA_Abort_IT+0x1d0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a49      	ldr	r2, [pc, #292]	@ (80058ac <HAL_DMA_Abort_IT+0x1d4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a47      	ldr	r2, [pc, #284]	@ (80058b0 <HAL_DMA_Abort_IT+0x1d8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_DMA_Abort_IT+0xc8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a46      	ldr	r2, [pc, #280]	@ (80058b4 <HAL_DMA_Abort_IT+0x1dc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_DMA_Abort_IT+0xcc>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_DMA_Abort_IT+0xce>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8086 	beq.w	80058b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2204      	movs	r2, #4
 80057b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005878 <HAL_DMA_Abort_IT+0x1a0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04a      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a2e      	ldr	r2, [pc, #184]	@ (800587c <HAL_DMA_Abort_IT+0x1a4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d045      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <HAL_DMA_Abort_IT+0x1a8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d040      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005884 <HAL_DMA_Abort_IT+0x1ac>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d03b      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a29      	ldr	r2, [pc, #164]	@ (8005888 <HAL_DMA_Abort_IT+0x1b0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d036      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a28      	ldr	r2, [pc, #160]	@ (800588c <HAL_DMA_Abort_IT+0x1b4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a26      	ldr	r2, [pc, #152]	@ (8005890 <HAL_DMA_Abort_IT+0x1b8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02c      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a25      	ldr	r2, [pc, #148]	@ (8005894 <HAL_DMA_Abort_IT+0x1bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d027      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a23      	ldr	r2, [pc, #140]	@ (8005898 <HAL_DMA_Abort_IT+0x1c0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a22      	ldr	r2, [pc, #136]	@ (800589c <HAL_DMA_Abort_IT+0x1c4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a20      	ldr	r2, [pc, #128]	@ (80058a0 <HAL_DMA_Abort_IT+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1f      	ldr	r2, [pc, #124]	@ (80058a4 <HAL_DMA_Abort_IT+0x1cc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1d      	ldr	r2, [pc, #116]	@ (80058a8 <HAL_DMA_Abort_IT+0x1d0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1c      	ldr	r2, [pc, #112]	@ (80058ac <HAL_DMA_Abort_IT+0x1d4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <HAL_DMA_Abort_IT+0x1d8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Abort_IT+0x17c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a19      	ldr	r2, [pc, #100]	@ (80058b4 <HAL_DMA_Abort_IT+0x1dc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d108      	bne.n	8005866 <HAL_DMA_Abort_IT+0x18e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e178      	b.n	8005b58 <HAL_DMA_Abort_IT+0x480>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e16f      	b.n	8005b58 <HAL_DMA_Abort_IT+0x480>
 8005878:	40020010 	.word	0x40020010
 800587c:	40020028 	.word	0x40020028
 8005880:	40020040 	.word	0x40020040
 8005884:	40020058 	.word	0x40020058
 8005888:	40020070 	.word	0x40020070
 800588c:	40020088 	.word	0x40020088
 8005890:	400200a0 	.word	0x400200a0
 8005894:	400200b8 	.word	0x400200b8
 8005898:	40020410 	.word	0x40020410
 800589c:	40020428 	.word	0x40020428
 80058a0:	40020440 	.word	0x40020440
 80058a4:	40020458 	.word	0x40020458
 80058a8:	40020470 	.word	0x40020470
 80058ac:	40020488 	.word	0x40020488
 80058b0:	400204a0 	.word	0x400204a0
 80058b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 020e 	bic.w	r2, r2, #14
 80058c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a6c      	ldr	r2, [pc, #432]	@ (8005a80 <HAL_DMA_Abort_IT+0x3a8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d04a      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6b      	ldr	r2, [pc, #428]	@ (8005a84 <HAL_DMA_Abort_IT+0x3ac>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d045      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a69      	ldr	r2, [pc, #420]	@ (8005a88 <HAL_DMA_Abort_IT+0x3b0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d040      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a68      	ldr	r2, [pc, #416]	@ (8005a8c <HAL_DMA_Abort_IT+0x3b4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d03b      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a66      	ldr	r2, [pc, #408]	@ (8005a90 <HAL_DMA_Abort_IT+0x3b8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d036      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a65      	ldr	r2, [pc, #404]	@ (8005a94 <HAL_DMA_Abort_IT+0x3bc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d031      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a63      	ldr	r2, [pc, #396]	@ (8005a98 <HAL_DMA_Abort_IT+0x3c0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d02c      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a62      	ldr	r2, [pc, #392]	@ (8005a9c <HAL_DMA_Abort_IT+0x3c4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d027      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a60      	ldr	r2, [pc, #384]	@ (8005aa0 <HAL_DMA_Abort_IT+0x3c8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d022      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5f      	ldr	r2, [pc, #380]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3cc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d01d      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3d0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a5c      	ldr	r2, [pc, #368]	@ (8005aac <HAL_DMA_Abort_IT+0x3d4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d013      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a5a      	ldr	r2, [pc, #360]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3d8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00e      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a59      	ldr	r2, [pc, #356]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3dc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a57      	ldr	r2, [pc, #348]	@ (8005ab8 <HAL_DMA_Abort_IT+0x3e0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_DMA_Abort_IT+0x290>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a56      	ldr	r2, [pc, #344]	@ (8005abc <HAL_DMA_Abort_IT+0x3e4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d108      	bne.n	800597a <HAL_DMA_Abort_IT+0x2a2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e007      	b.n	800598a <HAL_DMA_Abort_IT+0x2b2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a3c      	ldr	r2, [pc, #240]	@ (8005a80 <HAL_DMA_Abort_IT+0x3a8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d072      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3a      	ldr	r2, [pc, #232]	@ (8005a84 <HAL_DMA_Abort_IT+0x3ac>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d06d      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a39      	ldr	r2, [pc, #228]	@ (8005a88 <HAL_DMA_Abort_IT+0x3b0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d068      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a37      	ldr	r2, [pc, #220]	@ (8005a8c <HAL_DMA_Abort_IT+0x3b4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d063      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a36      	ldr	r2, [pc, #216]	@ (8005a90 <HAL_DMA_Abort_IT+0x3b8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d05e      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a34      	ldr	r2, [pc, #208]	@ (8005a94 <HAL_DMA_Abort_IT+0x3bc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d059      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a33      	ldr	r2, [pc, #204]	@ (8005a98 <HAL_DMA_Abort_IT+0x3c0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d054      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a31      	ldr	r2, [pc, #196]	@ (8005a9c <HAL_DMA_Abort_IT+0x3c4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d04f      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a30      	ldr	r2, [pc, #192]	@ (8005aa0 <HAL_DMA_Abort_IT+0x3c8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d04a      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3cc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d045      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3d0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d040      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a2b      	ldr	r2, [pc, #172]	@ (8005aac <HAL_DMA_Abort_IT+0x3d4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d03b      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3d8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d036      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a28      	ldr	r2, [pc, #160]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3dc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d031      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a27      	ldr	r2, [pc, #156]	@ (8005ab8 <HAL_DMA_Abort_IT+0x3e0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d02c      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a25      	ldr	r2, [pc, #148]	@ (8005abc <HAL_DMA_Abort_IT+0x3e4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d027      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a24      	ldr	r2, [pc, #144]	@ (8005ac0 <HAL_DMA_Abort_IT+0x3e8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d022      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a22      	ldr	r2, [pc, #136]	@ (8005ac4 <HAL_DMA_Abort_IT+0x3ec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01d      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a21      	ldr	r2, [pc, #132]	@ (8005ac8 <HAL_DMA_Abort_IT+0x3f0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d018      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005acc <HAL_DMA_Abort_IT+0x3f4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad0 <HAL_DMA_Abort_IT+0x3f8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad4 <HAL_DMA_Abort_IT+0x3fc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad8 <HAL_DMA_Abort_IT+0x400>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x3a2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a19      	ldr	r2, [pc, #100]	@ (8005adc <HAL_DMA_Abort_IT+0x404>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d132      	bne.n	8005ae0 <HAL_DMA_Abort_IT+0x408>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e031      	b.n	8005ae2 <HAL_DMA_Abort_IT+0x40a>
 8005a7e:	bf00      	nop
 8005a80:	40020010 	.word	0x40020010
 8005a84:	40020028 	.word	0x40020028
 8005a88:	40020040 	.word	0x40020040
 8005a8c:	40020058 	.word	0x40020058
 8005a90:	40020070 	.word	0x40020070
 8005a94:	40020088 	.word	0x40020088
 8005a98:	400200a0 	.word	0x400200a0
 8005a9c:	400200b8 	.word	0x400200b8
 8005aa0:	40020410 	.word	0x40020410
 8005aa4:	40020428 	.word	0x40020428
 8005aa8:	40020440 	.word	0x40020440
 8005aac:	40020458 	.word	0x40020458
 8005ab0:	40020470 	.word	0x40020470
 8005ab4:	40020488 	.word	0x40020488
 8005ab8:	400204a0 	.word	0x400204a0
 8005abc:	400204b8 	.word	0x400204b8
 8005ac0:	58025408 	.word	0x58025408
 8005ac4:	5802541c 	.word	0x5802541c
 8005ac8:	58025430 	.word	0x58025430
 8005acc:	58025444 	.word	0x58025444
 8005ad0:	58025458 	.word	0x58025458
 8005ad4:	5802546c 	.word	0x5802546c
 8005ad8:	58025480 	.word	0x58025480
 8005adc:	58025494 	.word	0x58025494
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d028      	beq.n	8005b38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005af4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	2201      	movs	r2, #1
 8005b06:	409a      	lsls	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop

08005b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	@ 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b72:	4b86      	ldr	r3, [pc, #536]	@ (8005d8c <HAL_GPIO_Init+0x228>)
 8005b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b76:	e18c      	b.n	8005e92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	fa01 f303 	lsl.w	r3, r1, r3
 8005b84:	4013      	ands	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 817e 	beq.w	8005e8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d005      	beq.n	8005ba8 <HAL_GPIO_Init+0x44>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d130      	bne.n	8005c0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bde:	2201      	movs	r2, #1
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 0201 	and.w	r2, r3, #1
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d017      	beq.n	8005c46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	2203      	movs	r2, #3
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d123      	bne.n	8005c9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	08da      	lsrs	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3208      	adds	r2, #8
 8005c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	220f      	movs	r2, #15
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	4013      	ands	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	08da      	lsrs	r2, r3, #3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3208      	adds	r2, #8
 8005c94:	69b9      	ldr	r1, [r7, #24]
 8005c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 0203 	and.w	r2, r3, #3
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80d8 	beq.w	8005e8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d90 <HAL_GPIO_Init+0x22c>)
 8005cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8005d90 <HAL_GPIO_Init+0x22c>)
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005cec:	4b28      	ldr	r3, [pc, #160]	@ (8005d90 <HAL_GPIO_Init+0x22c>)
 8005cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cfa:	4a26      	ldr	r2, [pc, #152]	@ (8005d94 <HAL_GPIO_Init+0x230>)
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	089b      	lsrs	r3, r3, #2
 8005d00:	3302      	adds	r3, #2
 8005d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	220f      	movs	r2, #15
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <HAL_GPIO_Init+0x234>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d04a      	beq.n	8005dbc <HAL_GPIO_Init+0x258>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <HAL_GPIO_Init+0x238>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02b      	beq.n	8005d86 <HAL_GPIO_Init+0x222>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1b      	ldr	r2, [pc, #108]	@ (8005da0 <HAL_GPIO_Init+0x23c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d025      	beq.n	8005d82 <HAL_GPIO_Init+0x21e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1a      	ldr	r2, [pc, #104]	@ (8005da4 <HAL_GPIO_Init+0x240>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01f      	beq.n	8005d7e <HAL_GPIO_Init+0x21a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a19      	ldr	r2, [pc, #100]	@ (8005da8 <HAL_GPIO_Init+0x244>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d019      	beq.n	8005d7a <HAL_GPIO_Init+0x216>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a18      	ldr	r2, [pc, #96]	@ (8005dac <HAL_GPIO_Init+0x248>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_GPIO_Init+0x212>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <HAL_GPIO_Init+0x24c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00d      	beq.n	8005d72 <HAL_GPIO_Init+0x20e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a16      	ldr	r2, [pc, #88]	@ (8005db4 <HAL_GPIO_Init+0x250>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <HAL_GPIO_Init+0x20a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a15      	ldr	r2, [pc, #84]	@ (8005db8 <HAL_GPIO_Init+0x254>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d101      	bne.n	8005d6a <HAL_GPIO_Init+0x206>
 8005d66:	2309      	movs	r3, #9
 8005d68:	e029      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d6a:	230a      	movs	r3, #10
 8005d6c:	e027      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d6e:	2307      	movs	r3, #7
 8005d70:	e025      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d72:	2306      	movs	r3, #6
 8005d74:	e023      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d76:	2305      	movs	r3, #5
 8005d78:	e021      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	e01f      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e01d      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e01b      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e019      	b.n	8005dbe <HAL_GPIO_Init+0x25a>
 8005d8a:	bf00      	nop
 8005d8c:	58000080 	.word	0x58000080
 8005d90:	58024400 	.word	0x58024400
 8005d94:	58000400 	.word	0x58000400
 8005d98:	58020000 	.word	0x58020000
 8005d9c:	58020400 	.word	0x58020400
 8005da0:	58020800 	.word	0x58020800
 8005da4:	58020c00 	.word	0x58020c00
 8005da8:	58021000 	.word	0x58021000
 8005dac:	58021400 	.word	0x58021400
 8005db0:	58021800 	.word	0x58021800
 8005db4:	58021c00 	.word	0x58021c00
 8005db8:	58022400 	.word	0x58022400
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	f002 0203 	and.w	r2, r2, #3
 8005dc4:	0092      	lsls	r2, r2, #2
 8005dc6:	4093      	lsls	r3, r2
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dce:	4938      	ldr	r1, [pc, #224]	@ (8005eb0 <HAL_GPIO_Init+0x34c>)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	089b      	lsrs	r3, r3, #2
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f47f ae6b 	bne.w	8005b78 <HAL_GPIO_Init+0x14>
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	3724      	adds	r7, #36	@ 0x24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	58000400 	.word	0x58000400

08005eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ec4:	787b      	ldrb	r3, [r7, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eca:	887a      	ldrh	r2, [r7, #2]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ed0:	e003      	b.n	8005eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	041a      	lsls	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	619a      	str	r2, [r3, #24]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e08b      	b.n	8006012 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fc f9a8 	bl	8002264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2224      	movs	r2, #36	@ 0x24
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005f38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	e006      	b.n	8005f70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d108      	bne.n	8005f8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	e007      	b.n	8005f9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6859      	ldr	r1, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800601c <HAL_I2C_Init+0x134>)
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69d9      	ldr	r1, [r3, #28]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	02008000 	.word	0x02008000

08006020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	d138      	bne.n	80060a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006040:	2302      	movs	r3, #2
 8006042:	e032      	b.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	@ 0x24
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6819      	ldr	r1, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d139      	bne.n	8006140 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e033      	b.n	8006142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2224      	movs	r2, #36	@ 0x24
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006108:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006158:	4b19      	ldr	r3, [pc, #100]	@ (80061c0 <HAL_PWREx_ConfigSupply+0x70>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b04      	cmp	r3, #4
 8006162:	d00a      	beq.n	800617a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006164:	4b16      	ldr	r3, [pc, #88]	@ (80061c0 <HAL_PWREx_ConfigSupply+0x70>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d001      	beq.n	8006176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e01f      	b.n	80061b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e01d      	b.n	80061b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800617a:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <HAL_PWREx_ConfigSupply+0x70>)
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f023 0207 	bic.w	r2, r3, #7
 8006182:	490f      	ldr	r1, [pc, #60]	@ (80061c0 <HAL_PWREx_ConfigSupply+0x70>)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4313      	orrs	r3, r2
 8006188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800618a:	f7fd fa5b 	bl	8003644 <HAL_GetTick>
 800618e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006190:	e009      	b.n	80061a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006192:	f7fd fa57 	bl	8003644 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061a0:	d901      	bls.n	80061a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e007      	b.n	80061b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061a6:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <HAL_PWREx_ConfigSupply+0x70>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b2:	d1ee      	bne.n	8006192 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	58024800 	.word	0x58024800

080061c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	@ 0x30
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e3c8      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8087 	beq.w	80062f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e4:	4b88      	ldr	r3, [pc, #544]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061ee:	4b86      	ldr	r3, [pc, #536]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d007      	beq.n	800620a <HAL_RCC_OscConfig+0x46>
 80061fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fc:	2b18      	cmp	r3, #24
 80061fe:	d110      	bne.n	8006222 <HAL_RCC_OscConfig+0x5e>
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d10b      	bne.n	8006222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620a:	4b7f      	ldr	r3, [pc, #508]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d06c      	beq.n	80062f0 <HAL_RCC_OscConfig+0x12c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d168      	bne.n	80062f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e3a2      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622a:	d106      	bne.n	800623a <HAL_RCC_OscConfig+0x76>
 800622c:	4b76      	ldr	r3, [pc, #472]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a75      	ldr	r2, [pc, #468]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	e02e      	b.n	8006298 <HAL_RCC_OscConfig+0xd4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10c      	bne.n	800625c <HAL_RCC_OscConfig+0x98>
 8006242:	4b71      	ldr	r3, [pc, #452]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a70      	ldr	r2, [pc, #448]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	4b6e      	ldr	r3, [pc, #440]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6d      	ldr	r2, [pc, #436]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006254:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e01d      	b.n	8006298 <HAL_RCC_OscConfig+0xd4>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006264:	d10c      	bne.n	8006280 <HAL_RCC_OscConfig+0xbc>
 8006266:	4b68      	ldr	r3, [pc, #416]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a67      	ldr	r2, [pc, #412]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 800626c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	4b65      	ldr	r3, [pc, #404]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a64      	ldr	r2, [pc, #400]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e00b      	b.n	8006298 <HAL_RCC_OscConfig+0xd4>
 8006280:	4b61      	ldr	r3, [pc, #388]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a60      	ldr	r2, [pc, #384]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	4b5e      	ldr	r3, [pc, #376]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5d      	ldr	r2, [pc, #372]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d013      	beq.n	80062c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fd f9d0 	bl	8003644 <HAL_GetTick>
 80062a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a8:	f7fd f9cc 	bl	8003644 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	@ 0x64
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e356      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062ba:	4b53      	ldr	r3, [pc, #332]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f0      	beq.n	80062a8 <HAL_RCC_OscConfig+0xe4>
 80062c6:	e014      	b.n	80062f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fd f9bc 	bl	8003644 <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d0:	f7fd f9b8 	bl	8003644 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b64      	cmp	r3, #100	@ 0x64
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e342      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062e2:	4b49      	ldr	r3, [pc, #292]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f0      	bne.n	80062d0 <HAL_RCC_OscConfig+0x10c>
 80062ee:	e000      	b.n	80062f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 808c 	beq.w	8006418 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006300:	4b41      	ldr	r3, [pc, #260]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006308:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800630a:	4b3f      	ldr	r3, [pc, #252]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_RCC_OscConfig+0x162>
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	2b18      	cmp	r3, #24
 800631a:	d137      	bne.n	800638c <HAL_RCC_OscConfig+0x1c8>
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d132      	bne.n	800638c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006326:	4b38      	ldr	r3, [pc, #224]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_RCC_OscConfig+0x17a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e314      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800633e:	4b32      	ldr	r3, [pc, #200]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 0219 	bic.w	r2, r3, #25
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	492f      	ldr	r1, [pc, #188]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fd f978 	bl	8003644 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006358:	f7fd f974 	bl	8003644 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e2fe      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800636a:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006376:	4b24      	ldr	r3, [pc, #144]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	061b      	lsls	r3, r3, #24
 8006384:	4920      	ldr	r1, [pc, #128]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006386:	4313      	orrs	r3, r2
 8006388:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800638a:	e045      	b.n	8006418 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d026      	beq.n	80063e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006394:	4b1c      	ldr	r3, [pc, #112]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f023 0219 	bic.w	r2, r3, #25
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	4919      	ldr	r1, [pc, #100]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a6:	f7fd f94d 	bl	8003644 <HAL_GetTick>
 80063aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ae:	f7fd f949 	bl	8003644 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e2d3      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c0:	4b11      	ldr	r3, [pc, #68]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	490b      	ldr	r1, [pc, #44]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	604b      	str	r3, [r1, #4]
 80063e0:	e01a      	b.n	8006418 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063e2:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <HAL_RCC_OscConfig+0x244>)
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fd f929 	bl	8003644 <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063f4:	e00a      	b.n	800640c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063f6:	f7fd f925 	bl	8003644 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d903      	bls.n	800640c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e2af      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
 8006408:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800640c:	4b96      	ldr	r3, [pc, #600]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ee      	bne.n	80063f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	d06a      	beq.n	80064fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006424:	4b90      	ldr	r3, [pc, #576]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800642c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800642e:	4b8e      	ldr	r3, [pc, #568]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b08      	cmp	r3, #8
 8006438:	d007      	beq.n	800644a <HAL_RCC_OscConfig+0x286>
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b18      	cmp	r3, #24
 800643e:	d11b      	bne.n	8006478 <HAL_RCC_OscConfig+0x2b4>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b01      	cmp	r3, #1
 8006448:	d116      	bne.n	8006478 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800644a:	4b87      	ldr	r3, [pc, #540]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_RCC_OscConfig+0x29e>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	2b80      	cmp	r3, #128	@ 0x80
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e282      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006462:	4b81      	ldr	r3, [pc, #516]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	497d      	ldr	r1, [pc, #500]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006472:	4313      	orrs	r3, r2
 8006474:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006476:	e040      	b.n	80064fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d023      	beq.n	80064c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006480:	4b79      	ldr	r3, [pc, #484]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a78      	ldr	r2, [pc, #480]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800648a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648c:	f7fd f8da 	bl	8003644 <HAL_GetTick>
 8006490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006494:	f7fd f8d6 	bl	8003644 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e260      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064a6:	4b70      	ldr	r3, [pc, #448]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	061b      	lsls	r3, r3, #24
 80064c0:	4969      	ldr	r1, [pc, #420]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60cb      	str	r3, [r1, #12]
 80064c6:	e018      	b.n	80064fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064c8:	4b67      	ldr	r3, [pc, #412]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a66      	ldr	r2, [pc, #408]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80064ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fd f8b6 	bl	8003644 <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064dc:	f7fd f8b2 	bl	8003644 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e23c      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064ee:	4b5e      	ldr	r3, [pc, #376]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d036      	beq.n	8006574 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d019      	beq.n	8006542 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800650e:	4b56      	ldr	r3, [pc, #344]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006512:	4a55      	ldr	r2, [pc, #340]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651a:	f7fd f893 	bl	8003644 <HAL_GetTick>
 800651e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006522:	f7fd f88f 	bl	8003644 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e219      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006534:	4b4c      	ldr	r3, [pc, #304]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x35e>
 8006540:	e018      	b.n	8006574 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006542:	4b49      	ldr	r3, [pc, #292]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006546:	4a48      	ldr	r2, [pc, #288]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654e:	f7fd f879 	bl	8003644 <HAL_GetTick>
 8006552:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006556:	f7fd f875 	bl	8003644 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e1ff      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006568:	4b3f      	ldr	r3, [pc, #252]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800656a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f0      	bne.n	8006556 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d036      	beq.n	80065ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d019      	beq.n	80065bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006588:	4b37      	ldr	r3, [pc, #220]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a36      	ldr	r2, [pc, #216]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800658e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006592:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006594:	f7fd f856 	bl	8003644 <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800659c:	f7fd f852 	bl	8003644 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e1dc      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065ae:	4b2e      	ldr	r3, [pc, #184]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x3d8>
 80065ba:	e018      	b.n	80065ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a29      	ldr	r2, [pc, #164]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80065c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065c8:	f7fd f83c 	bl	8003644 <HAL_GetTick>
 80065cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065d0:	f7fd f838 	bl	8003644 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e1c2      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065e2:	4b21      	ldr	r3, [pc, #132]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8086 	beq.w	8006708 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	@ (800666c <HAL_RCC_OscConfig+0x4a8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <HAL_RCC_OscConfig+0x4a8>)
 8006602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006608:	f7fd f81c 	bl	8003644 <HAL_GetTick>
 800660c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006610:	f7fd f818 	bl	8003644 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e1a2      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006622:	4b12      	ldr	r3, [pc, #72]	@ (800666c <HAL_RCC_OscConfig+0x4a8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d106      	bne.n	8006644 <HAL_RCC_OscConfig+0x480>
 8006636:	4b0c      	ldr	r3, [pc, #48]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663a:	4a0b      	ldr	r2, [pc, #44]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	6713      	str	r3, [r2, #112]	@ 0x70
 8006642:	e032      	b.n	80066aa <HAL_RCC_OscConfig+0x4e6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d111      	bne.n	8006670 <HAL_RCC_OscConfig+0x4ac>
 800664c:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006650:	4a05      	ldr	r2, [pc, #20]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	6713      	str	r3, [r2, #112]	@ 0x70
 8006658:	4b03      	ldr	r3, [pc, #12]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665c:	4a02      	ldr	r2, [pc, #8]	@ (8006668 <HAL_RCC_OscConfig+0x4a4>)
 800665e:	f023 0304 	bic.w	r3, r3, #4
 8006662:	6713      	str	r3, [r2, #112]	@ 0x70
 8006664:	e021      	b.n	80066aa <HAL_RCC_OscConfig+0x4e6>
 8006666:	bf00      	nop
 8006668:	58024400 	.word	0x58024400
 800666c:	58024800 	.word	0x58024800
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b05      	cmp	r3, #5
 8006676:	d10c      	bne.n	8006692 <HAL_RCC_OscConfig+0x4ce>
 8006678:	4b83      	ldr	r3, [pc, #524]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800667a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667c:	4a82      	ldr	r2, [pc, #520]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	6713      	str	r3, [r2, #112]	@ 0x70
 8006684:	4b80      	ldr	r3, [pc, #512]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006688:	4a7f      	ldr	r2, [pc, #508]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006690:	e00b      	b.n	80066aa <HAL_RCC_OscConfig+0x4e6>
 8006692:	4b7d      	ldr	r3, [pc, #500]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006696:	4a7c      	ldr	r2, [pc, #496]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6713      	str	r3, [r2, #112]	@ 0x70
 800669e:	4b7a      	ldr	r3, [pc, #488]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a2:	4a79      	ldr	r2, [pc, #484]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d015      	beq.n	80066de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b2:	f7fc ffc7 	bl	8003644 <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fc ffc3 	bl	8003644 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e14b      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d0:	4b6d      	ldr	r3, [pc, #436]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ee      	beq.n	80066ba <HAL_RCC_OscConfig+0x4f6>
 80066dc:	e014      	b.n	8006708 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066de:	f7fc ffb1 	bl	8003644 <HAL_GetTick>
 80066e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066e4:	e00a      	b.n	80066fc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fc ffad 	bl	8003644 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e135      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066fc:	4b62      	ldr	r3, [pc, #392]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ee      	bne.n	80066e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 812a 	beq.w	8006966 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006712:	4b5d      	ldr	r3, [pc, #372]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800671a:	2b18      	cmp	r3, #24
 800671c:	f000 80ba 	beq.w	8006894 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	2b02      	cmp	r3, #2
 8006726:	f040 8095 	bne.w	8006854 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672a:	4b57      	ldr	r3, [pc, #348]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a56      	ldr	r2, [pc, #344]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006730:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006736:	f7fc ff85 	bl	8003644 <HAL_GetTick>
 800673a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673e:	f7fc ff81 	bl	8003644 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e10b      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006750:	4b4d      	ldr	r3, [pc, #308]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f0      	bne.n	800673e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800675c:	4b4a      	ldr	r3, [pc, #296]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800675e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006760:	4b4a      	ldr	r3, [pc, #296]	@ (800688c <HAL_RCC_OscConfig+0x6c8>)
 8006762:	4013      	ands	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800676c:	0112      	lsls	r2, r2, #4
 800676e:	430a      	orrs	r2, r1
 8006770:	4945      	ldr	r1, [pc, #276]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006772:	4313      	orrs	r3, r2
 8006774:	628b      	str	r3, [r1, #40]	@ 0x28
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	3b01      	subs	r3, #1
 800677c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006784:	3b01      	subs	r3, #1
 8006786:	025b      	lsls	r3, r3, #9
 8006788:	b29b      	uxth	r3, r3
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	3b01      	subs	r3, #1
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679e:	3b01      	subs	r3, #1
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067a6:	4938      	ldr	r1, [pc, #224]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80067ac:	4b36      	ldr	r3, [pc, #216]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	4a35      	ldr	r2, [pc, #212]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067b8:	4b33      	ldr	r3, [pc, #204]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067bc:	4b34      	ldr	r3, [pc, #208]	@ (8006890 <HAL_RCC_OscConfig+0x6cc>)
 80067be:	4013      	ands	r3, r2
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067c4:	00d2      	lsls	r2, r2, #3
 80067c6:	4930      	ldr	r1, [pc, #192]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	f023 020c 	bic.w	r2, r3, #12
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	492b      	ldr	r1, [pc, #172]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067de:	4b2a      	ldr	r3, [pc, #168]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e2:	f023 0202 	bic.w	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	4927      	ldr	r1, [pc, #156]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067f0:	4b25      	ldr	r3, [pc, #148]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	4a24      	ldr	r2, [pc, #144]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067fc:	4b22      	ldr	r3, [pc, #136]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	4a21      	ldr	r2, [pc, #132]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006808:	4b1f      	ldr	r3, [pc, #124]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	4a1e      	ldr	r2, [pc, #120]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800680e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006814:	4b1c      	ldr	r3, [pc, #112]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006818:	4a1b      	ldr	r2, [pc, #108]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006820:	4b19      	ldr	r3, [pc, #100]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a18      	ldr	r2, [pc, #96]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800682a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fc ff0a 	bl	8003644 <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006834:	f7fc ff06 	bl	8003644 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e090      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006846:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0x670>
 8006852:	e088      	b.n	8006966 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006854:	4b0c      	ldr	r3, [pc, #48]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a0b      	ldr	r2, [pc, #44]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800685a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800685e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fc fef0 	bl	8003644 <HAL_GetTick>
 8006864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006868:	f7fc feec 	bl	8003644 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e076      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687a:	4b03      	ldr	r3, [pc, #12]	@ (8006888 <HAL_RCC_OscConfig+0x6c4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x6a4>
 8006886:	e06e      	b.n	8006966 <HAL_RCC_OscConfig+0x7a2>
 8006888:	58024400 	.word	0x58024400
 800688c:	fffffc0c 	.word	0xfffffc0c
 8006890:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006894:	4b36      	ldr	r3, [pc, #216]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800689a:	4b35      	ldr	r3, [pc, #212]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d031      	beq.n	800690c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f003 0203 	and.w	r2, r3, #3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d12a      	bne.n	800690c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d122      	bne.n	800690c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d11a      	bne.n	800690c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	0a5b      	lsrs	r3, r3, #9
 80068da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d111      	bne.n	800690c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d108      	bne.n	800690c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	0e1b      	lsrs	r3, r3, #24
 80068fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006906:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e02b      	b.n	8006968 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006910:	4b17      	ldr	r3, [pc, #92]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 8006912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800691a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d01f      	beq.n	8006966 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006926:	4b12      	ldr	r3, [pc, #72]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	4a11      	ldr	r2, [pc, #68]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006932:	f7fc fe87 	bl	8003644 <HAL_GetTick>
 8006936:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006938:	bf00      	nop
 800693a:	f7fc fe83 	bl	8003644 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	4293      	cmp	r3, r2
 8006944:	d0f9      	beq.n	800693a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006946:	4b0a      	ldr	r3, [pc, #40]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 8006948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800694a:	4b0a      	ldr	r3, [pc, #40]	@ (8006974 <HAL_RCC_OscConfig+0x7b0>)
 800694c:	4013      	ands	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006952:	00d2      	lsls	r2, r2, #3
 8006954:	4906      	ldr	r1, [pc, #24]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 8006956:	4313      	orrs	r3, r2
 8006958:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800695a:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	4a04      	ldr	r2, [pc, #16]	@ (8006970 <HAL_RCC_OscConfig+0x7ac>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3730      	adds	r7, #48	@ 0x30
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	58024400 	.word	0x58024400
 8006974:	ffff0007 	.word	0xffff0007

08006978 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e19c      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800698c:	4b8a      	ldr	r3, [pc, #552]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d910      	bls.n	80069bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b87      	ldr	r3, [pc, #540]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 020f 	bic.w	r2, r3, #15
 80069a2:	4985      	ldr	r1, [pc, #532]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b83      	ldr	r3, [pc, #524]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e184      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	4b7b      	ldr	r3, [pc, #492]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d908      	bls.n	80069ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069d8:	4b78      	ldr	r3, [pc, #480]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4975      	ldr	r1, [pc, #468]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	4b70      	ldr	r3, [pc, #448]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d908      	bls.n	8006a18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a06:	4b6d      	ldr	r3, [pc, #436]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	496a      	ldr	r1, [pc, #424]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d010      	beq.n	8006a46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	4b64      	ldr	r3, [pc, #400]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d908      	bls.n	8006a46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a34:	4b61      	ldr	r3, [pc, #388]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	495e      	ldr	r1, [pc, #376]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69da      	ldr	r2, [r3, #28]
 8006a56:	4b59      	ldr	r3, [pc, #356]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d908      	bls.n	8006a74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a62:	4b56      	ldr	r3, [pc, #344]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	4953      	ldr	r1, [pc, #332]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	4b4d      	ldr	r3, [pc, #308]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d908      	bls.n	8006aa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a90:	4b4a      	ldr	r3, [pc, #296]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f023 020f 	bic.w	r2, r3, #15
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4947      	ldr	r1, [pc, #284]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d055      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006aae:	4b43      	ldr	r3, [pc, #268]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	4940      	ldr	r1, [pc, #256]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d121      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0f6      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d107      	bne.n	8006af0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ae0:	4b36      	ldr	r3, [pc, #216]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d115      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0ea      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006af8:	4b30      	ldr	r3, [pc, #192]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0de      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b08:	4b2c      	ldr	r3, [pc, #176]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0d6      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b18:	4b28      	ldr	r3, [pc, #160]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f023 0207 	bic.w	r2, r3, #7
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4925      	ldr	r1, [pc, #148]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b2a:	f7fc fd8b 	bl	8003644 <HAL_GetTick>
 8006b2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b30:	e00a      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b32:	f7fc fd87 	bl	8003644 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e0be      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b48:	4b1c      	ldr	r3, [pc, #112]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d1eb      	bne.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d010      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	4b14      	ldr	r3, [pc, #80]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d208      	bcs.n	8006b88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b76:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f023 020f 	bic.w	r2, r3, #15
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	490e      	ldr	r1, [pc, #56]	@ (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b88:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d214      	bcs.n	8006bc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b96:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f023 020f 	bic.w	r2, r3, #15
 8006b9e:	4906      	ldr	r1, [pc, #24]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba6:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e086      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
 8006bb8:	52002000 	.word	0x52002000
 8006bbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d010      	beq.n	8006bee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d208      	bcs.n	8006bee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	4939      	ldr	r1, [pc, #228]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d010      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	4b34      	ldr	r3, [pc, #208]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d208      	bcs.n	8006c1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c0a:	4b31      	ldr	r3, [pc, #196]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	492e      	ldr	r1, [pc, #184]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d010      	beq.n	8006c4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	4b28      	ldr	r3, [pc, #160]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d208      	bcs.n	8006c4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c38:	4b25      	ldr	r3, [pc, #148]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	4922      	ldr	r1, [pc, #136]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d010      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69da      	ldr	r2, [r3, #28]
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d208      	bcs.n	8006c78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c66:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	4917      	ldr	r1, [pc, #92]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c78:	f000 f834 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4b14      	ldr	r3, [pc, #80]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	4912      	ldr	r1, [pc, #72]	@ (8006cd4 <HAL_RCC_ClockConfig+0x35c>)
 8006c8a:	5ccb      	ldrb	r3, [r1, r3]
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	fa22 f303 	lsr.w	r3, r2, r3
 8006c94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c96:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8006cd4 <HAL_RCC_ClockConfig+0x35c>)
 8006ca0:	5cd3      	ldrb	r3, [r2, r3]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cac:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd8 <HAL_RCC_ClockConfig+0x360>)
 8006cae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cdc <HAL_RCC_ClockConfig+0x364>)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce0 <HAL_RCC_ClockConfig+0x368>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fc fc78 	bl	80035b0 <HAL_InitTick>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	08013744 	.word	0x08013744
 8006cd8:	24000004 	.word	0x24000004
 8006cdc:	24000000 	.word	0x24000000
 8006ce0:	24000008 	.word	0x24000008

08006ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b089      	sub	sp, #36	@ 0x24
 8006ce8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cea:	4bb3      	ldr	r3, [pc, #716]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cf2:	2b18      	cmp	r3, #24
 8006cf4:	f200 8155 	bhi.w	8006fa2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d65 	.word	0x08006d65
 8006d04:	08006fa3 	.word	0x08006fa3
 8006d08:	08006fa3 	.word	0x08006fa3
 8006d0c:	08006fa3 	.word	0x08006fa3
 8006d10:	08006fa3 	.word	0x08006fa3
 8006d14:	08006fa3 	.word	0x08006fa3
 8006d18:	08006fa3 	.word	0x08006fa3
 8006d1c:	08006fa3 	.word	0x08006fa3
 8006d20:	08006d8b 	.word	0x08006d8b
 8006d24:	08006fa3 	.word	0x08006fa3
 8006d28:	08006fa3 	.word	0x08006fa3
 8006d2c:	08006fa3 	.word	0x08006fa3
 8006d30:	08006fa3 	.word	0x08006fa3
 8006d34:	08006fa3 	.word	0x08006fa3
 8006d38:	08006fa3 	.word	0x08006fa3
 8006d3c:	08006fa3 	.word	0x08006fa3
 8006d40:	08006d91 	.word	0x08006d91
 8006d44:	08006fa3 	.word	0x08006fa3
 8006d48:	08006fa3 	.word	0x08006fa3
 8006d4c:	08006fa3 	.word	0x08006fa3
 8006d50:	08006fa3 	.word	0x08006fa3
 8006d54:	08006fa3 	.word	0x08006fa3
 8006d58:	08006fa3 	.word	0x08006fa3
 8006d5c:	08006fa3 	.word	0x08006fa3
 8006d60:	08006d97 	.word	0x08006d97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d64:	4b94      	ldr	r3, [pc, #592]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d70:	4b91      	ldr	r3, [pc, #580]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	08db      	lsrs	r3, r3, #3
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	4a90      	ldr	r2, [pc, #576]	@ (8006fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d82:	e111      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d84:	4b8d      	ldr	r3, [pc, #564]	@ (8006fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d86:	61bb      	str	r3, [r7, #24]
      break;
 8006d88:	e10e      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8006fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d8c:	61bb      	str	r3, [r7, #24]
      break;
 8006d8e:	e10b      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d90:	4b8c      	ldr	r3, [pc, #560]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d92:	61bb      	str	r3, [r7, #24]
      break;
 8006d94:	e108      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d96:	4b88      	ldr	r3, [pc, #544]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006da0:	4b85      	ldr	r3, [pc, #532]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006daa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006dac:	4b82      	ldr	r3, [pc, #520]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006db6:	4b80      	ldr	r3, [pc, #512]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80e1 	beq.w	8006f9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	f000 8083 	beq.w	8006ee8 <HAL_RCC_GetSysClockFreq+0x204>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	f200 80a1 	bhi.w	8006f2c <HAL_RCC_GetSysClockFreq+0x248>
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_RCC_GetSysClockFreq+0x114>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d056      	beq.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006df6:	e099      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df8:	4b6f      	ldr	r3, [pc, #444]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d02d      	beq.n	8006e60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e04:	4b6c      	ldr	r3, [pc, #432]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	08db      	lsrs	r3, r3, #3
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	4a6b      	ldr	r2, [pc, #428]	@ (8006fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
 8006e14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	ee07 3a90 	vmov	s15, r3
 8006e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2e:	4b62      	ldr	r3, [pc, #392]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e5e:	e087      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006fcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e72:	4b51      	ldr	r3, [pc, #324]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ea2:	e065      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb6:	4b40      	ldr	r3, [pc, #256]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ee6:	e043      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f2a:	e021      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f70:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f74:	0a5b      	lsrs	r3, r3, #9
 8006f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	ee07 3a90 	vmov	s15, r3
 8006f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f94:	ee17 3a90 	vmov	r3, s15
 8006f98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f9a:	e005      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61bb      	str	r3, [r7, #24]
      break;
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006fa2:	4b07      	ldr	r3, [pc, #28]	@ (8006fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fa4:	61bb      	str	r3, [r7, #24]
      break;
 8006fa6:	bf00      	nop
  }

  return sysclockfreq;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3724      	adds	r7, #36	@ 0x24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	03d09000 	.word	0x03d09000
 8006fc0:	003d0900 	.word	0x003d0900
 8006fc4:	02dc6c00 	.word	0x02dc6c00
 8006fc8:	46000000 	.word	0x46000000
 8006fcc:	4c742400 	.word	0x4c742400
 8006fd0:	4a742400 	.word	0x4a742400
 8006fd4:	4c371b00 	.word	0x4c371b00

08006fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fde:	f7ff fe81 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b10      	ldr	r3, [pc, #64]	@ (8007028 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	490f      	ldr	r1, [pc, #60]	@ (800702c <HAL_RCC_GetHCLKFreq+0x54>)
 8006ff0:	5ccb      	ldrb	r3, [r1, r3]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	4a09      	ldr	r2, [pc, #36]	@ (800702c <HAL_RCC_GetHCLKFreq+0x54>)
 8007006:	5cd3      	ldrb	r3, [r2, r3]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	fa22 f303 	lsr.w	r3, r2, r3
 8007012:	4a07      	ldr	r2, [pc, #28]	@ (8007030 <HAL_RCC_GetHCLKFreq+0x58>)
 8007014:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007016:	4a07      	ldr	r2, [pc, #28]	@ (8007034 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800701c:	4b04      	ldr	r3, [pc, #16]	@ (8007030 <HAL_RCC_GetHCLKFreq+0x58>)
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	58024400 	.word	0x58024400
 800702c:	08013744 	.word	0x08013744
 8007030:	24000004 	.word	0x24000004
 8007034:	24000000 	.word	0x24000000

08007038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800703c:	f7ff ffcc 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b06      	ldr	r3, [pc, #24]	@ (800705c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4904      	ldr	r1, [pc, #16]	@ (8007060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007058:	4618      	mov	r0, r3
 800705a:	bd80      	pop	{r7, pc}
 800705c:	58024400 	.word	0x58024400
 8007060:	08013744 	.word	0x08013744

08007064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007068:	f7ff ffb6 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4904      	ldr	r1, [pc, #16]	@ (800708c <HAL_RCC_GetPCLK2Freq+0x28>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	58024400 	.word	0x58024400
 800708c:	08013744 	.word	0x08013744

08007090 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007094:	b0c6      	sub	sp, #280	@ 0x118
 8007096:	af00      	add	r7, sp, #0
 8007098:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800709c:	2300      	movs	r3, #0
 800709e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070a2:	2300      	movs	r3, #0
 80070a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80070b4:	2500      	movs	r5, #0
 80070b6:	ea54 0305 	orrs.w	r3, r4, r5
 80070ba:	d049      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070c6:	d02f      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070cc:	d828      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070d2:	d01a      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070d8:	d822      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070e2:	d007      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070e4:	e01c      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e6:	4bab      	ldr	r3, [pc, #684]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	4aaa      	ldr	r2, [pc, #680]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070f2:	e01a      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f8:	3308      	adds	r3, #8
 80070fa:	2102      	movs	r1, #2
 80070fc:	4618      	mov	r0, r3
 80070fe:	f002 fa49 	bl	8009594 <RCCEx_PLL2_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007108:	e00f      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710e:	3328      	adds	r3, #40	@ 0x28
 8007110:	2102      	movs	r1, #2
 8007112:	4618      	mov	r0, r3
 8007114:	f002 faf0 	bl	80096f8 <RCCEx_PLL3_Config>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800711e:	e004      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007126:	e000      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800712a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007132:	4b98      	ldr	r3, [pc, #608]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007136:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007140:	4a94      	ldr	r2, [pc, #592]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007142:	430b      	orrs	r3, r1
 8007144:	6513      	str	r3, [r2, #80]	@ 0x50
 8007146:	e003      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800714c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800715c:	f04f 0900 	mov.w	r9, #0
 8007160:	ea58 0309 	orrs.w	r3, r8, r9
 8007164:	d047      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800716c:	2b04      	cmp	r3, #4
 800716e:	d82a      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007170:	a201      	add	r2, pc, #4	@ (adr r2, 8007178 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007176:	bf00      	nop
 8007178:	0800718d 	.word	0x0800718d
 800717c:	0800719b 	.word	0x0800719b
 8007180:	080071b1 	.word	0x080071b1
 8007184:	080071cf 	.word	0x080071cf
 8007188:	080071cf 	.word	0x080071cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718c:	4b81      	ldr	r3, [pc, #516]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	4a80      	ldr	r2, [pc, #512]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007198:	e01a      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719e:	3308      	adds	r3, #8
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f002 f9f6 	bl	8009594 <RCCEx_PLL2_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ae:	e00f      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	3328      	adds	r3, #40	@ 0x28
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f002 fa9d 	bl	80096f8 <RCCEx_PLL3_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071c4:	e004      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071cc:	e000      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071d8:	4b6e      	ldr	r3, [pc, #440]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071dc:	f023 0107 	bic.w	r1, r3, #7
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e6:	4a6b      	ldr	r2, [pc, #428]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80071ec:	e003      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007202:	f04f 0b00 	mov.w	fp, #0
 8007206:	ea5a 030b 	orrs.w	r3, sl, fp
 800720a:	d05b      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007214:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007218:	d03b      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800721a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800721e:	d834      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007220:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007224:	d037      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007226:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800722a:	d82e      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800722c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007230:	d033      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007232:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007236:	d828      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800723c:	d01a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800723e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007242:	d822      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007248:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800724c:	d007      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800724e:	e01c      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007250:	4b50      	ldr	r3, [pc, #320]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	4a4f      	ldr	r2, [pc, #316]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800725a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800725c:	e01e      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007262:	3308      	adds	r3, #8
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f002 f994 	bl	8009594 <RCCEx_PLL2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007272:	e013      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	3328      	adds	r3, #40	@ 0x28
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f002 fa3b 	bl	80096f8 <RCCEx_PLL3_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007288:	e008      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007290:	e004      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007292:	bf00      	nop
 8007294:	e002      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007296:	bf00      	nop
 8007298:	e000      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800729a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80072a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072b4:	4a37      	ldr	r2, [pc, #220]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072b6:	430b      	orrs	r3, r1
 80072b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80072ba:	e003      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80072d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d05d      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072f0:	d03b      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80072f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072f6:	d834      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80072f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072fc:	d037      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80072fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007302:	d82e      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007304:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007308:	d033      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800730a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800730e:	d828      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007310:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007314:	d01a      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800731a:	d822      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007324:	d007      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007326:	e01c      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007328:	4b1a      	ldr	r3, [pc, #104]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732c:	4a19      	ldr	r2, [pc, #100]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800732e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007334:	e01e      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733a:	3308      	adds	r3, #8
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f002 f928 	bl	8009594 <RCCEx_PLL2_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800734a:	e013      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007350:	3328      	adds	r3, #40	@ 0x28
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f002 f9cf 	bl	80096f8 <RCCEx_PLL3_Config>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007360:	e008      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007368:	e004      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800736a:	bf00      	nop
 800736c:	e002      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800736e:	bf00      	nop
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800737e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007380:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007388:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800738c:	4a01      	ldr	r2, [pc, #4]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800738e:	430b      	orrs	r3, r1
 8007390:	6593      	str	r3, [r2, #88]	@ 0x58
 8007392:	e005      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800739c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80073ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073b0:	2300      	movs	r3, #0
 80073b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073b6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4313      	orrs	r3, r2
 80073be:	d03a      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c6:	2b30      	cmp	r3, #48	@ 0x30
 80073c8:	d01f      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80073ca:	2b30      	cmp	r3, #48	@ 0x30
 80073cc:	d819      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d00c      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d815      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d019      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d111      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073de:	4baa      	ldr	r3, [pc, #680]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	4aa9      	ldr	r2, [pc, #676]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80073ea:	e011      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	3308      	adds	r3, #8
 80073f2:	2102      	movs	r1, #2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f002 f8cd 	bl	8009594 <RCCEx_PLL2_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007400:	e006      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007408:	e002      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800740a:	bf00      	nop
 800740c:	e000      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800740e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007418:	4b9b      	ldr	r3, [pc, #620]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800741a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800741c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007426:	4a98      	ldr	r2, [pc, #608]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007428:	430b      	orrs	r3, r1
 800742a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800742c:	e003      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007432:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007442:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007446:	2300      	movs	r3, #0
 8007448:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800744c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007450:	460b      	mov	r3, r1
 8007452:	4313      	orrs	r3, r2
 8007454:	d051      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007460:	d035      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007466:	d82e      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007468:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800746c:	d031      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800746e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007472:	d828      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007478:	d01a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800747a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800747e:	d822      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007488:	d007      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800748a:	e01c      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748c:	4b7e      	ldr	r3, [pc, #504]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	4a7d      	ldr	r2, [pc, #500]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007498:	e01c      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749e:	3308      	adds	r3, #8
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f002 f876 	bl	8009594 <RCCEx_PLL2_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074ae:	e011      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	3328      	adds	r3, #40	@ 0x28
 80074b6:	2100      	movs	r1, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f002 f91d 	bl	80096f8 <RCCEx_PLL3_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074c4:	e006      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074cc:	e002      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80074d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ea:	4a67      	ldr	r2, [pc, #412]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80074f0:	e003      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007506:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800750a:	2300      	movs	r3, #0
 800750c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007510:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007514:	460b      	mov	r3, r1
 8007516:	4313      	orrs	r3, r2
 8007518:	d053      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007524:	d033      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007526:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800752a:	d82c      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800752c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007530:	d02f      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007532:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007536:	d826      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007538:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800753c:	d02b      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800753e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007542:	d820      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007548:	d012      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800754a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800754e:	d81a      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d022      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007558:	d115      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755e:	3308      	adds	r3, #8
 8007560:	2101      	movs	r1, #1
 8007562:	4618      	mov	r0, r3
 8007564:	f002 f816 	bl	8009594 <RCCEx_PLL2_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800756e:	e015      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	3328      	adds	r3, #40	@ 0x28
 8007576:	2101      	movs	r1, #1
 8007578:	4618      	mov	r0, r3
 800757a:	f002 f8bd 	bl	80096f8 <RCCEx_PLL3_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007584:	e00a      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800758c:	e006      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800758e:	bf00      	nop
 8007590:	e004      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007592:	bf00      	nop
 8007594:	e002      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007596:	bf00      	nop
 8007598:	e000      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800759a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075a4:	4b38      	ldr	r3, [pc, #224]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b2:	4a35      	ldr	r2, [pc, #212]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80075b8:	e003      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80075ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075d2:	2300      	movs	r3, #0
 80075d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075d8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075dc:	460b      	mov	r3, r1
 80075de:	4313      	orrs	r3, r2
 80075e0:	d058      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075ee:	d033      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80075f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075f4:	d82c      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fa:	d02f      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80075fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007600:	d826      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007602:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007606:	d02b      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007608:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800760c:	d820      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800760e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007612:	d012      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007618:	d81a      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d022      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800761e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007622:	d115      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007628:	3308      	adds	r3, #8
 800762a:	2101      	movs	r1, #1
 800762c:	4618      	mov	r0, r3
 800762e:	f001 ffb1 	bl	8009594 <RCCEx_PLL2_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007638:	e015      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800763a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763e:	3328      	adds	r3, #40	@ 0x28
 8007640:	2101      	movs	r1, #1
 8007642:	4618      	mov	r0, r3
 8007644:	f002 f858 	bl	80096f8 <RCCEx_PLL3_Config>
 8007648:	4603      	mov	r3, r0
 800764a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800764e:	e00a      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007656:	e006      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007658:	bf00      	nop
 800765a:	e004      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800765c:	bf00      	nop
 800765e:	e002      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10e      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800766e:	4b06      	ldr	r3, [pc, #24]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007672:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800767e:	4a02      	ldr	r2, [pc, #8]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007680:	430b      	orrs	r3, r1
 8007682:	6593      	str	r3, [r2, #88]	@ 0x58
 8007684:	e006      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007686:	bf00      	nop
 8007688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80076a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d037      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076be:	d00e      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80076c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076c4:	d816      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d018      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80076ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ce:	d111      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4bc4      	ldr	r3, [pc, #784]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	4ac3      	ldr	r2, [pc, #780]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076dc:	e00f      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e2:	3308      	adds	r3, #8
 80076e4:	2101      	movs	r1, #1
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 ff54 	bl	8009594 <RCCEx_PLL2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076f2:	e004      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076fa:	e000      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80076fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007706:	4bb7      	ldr	r3, [pc, #732]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800770e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007714:	4ab3      	ldr	r2, [pc, #716]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007716:	430b      	orrs	r3, r1
 8007718:	6513      	str	r3, [r2, #80]	@ 0x50
 800771a:	e003      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007720:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800773a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800773e:	460b      	mov	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	d039      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774a:	2b03      	cmp	r3, #3
 800774c:	d81c      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800774e:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007791 	.word	0x08007791
 8007758:	08007765 	.word	0x08007765
 800775c:	08007773 	.word	0x08007773
 8007760:	08007791 	.word	0x08007791
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007764:	4b9f      	ldr	r3, [pc, #636]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007768:	4a9e      	ldr	r2, [pc, #632]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800776a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800776e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007770:	e00f      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007776:	3308      	adds	r3, #8
 8007778:	2102      	movs	r1, #2
 800777a:	4618      	mov	r0, r3
 800777c:	f001 ff0a 	bl	8009594 <RCCEx_PLL2_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007786:	e004      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800778e:	e000      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007792:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800779a:	4b92      	ldr	r3, [pc, #584]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800779c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779e:	f023 0103 	bic.w	r1, r3, #3
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077a8:	4a8e      	ldr	r2, [pc, #568]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077aa:	430b      	orrs	r3, r1
 80077ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077ae:	e003      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80077c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4313      	orrs	r3, r2
 80077d6:	f000 8099 	beq.w	800790c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077da:	4b83      	ldr	r3, [pc, #524]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a82      	ldr	r2, [pc, #520]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077e6:	f7fb ff2d 	bl	8003644 <HAL_GetTick>
 80077ea:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ee:	e00b      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f0:	f7fb ff28 	bl	8003644 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b64      	cmp	r3, #100	@ 0x64
 80077fe:	d903      	bls.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007806:	e005      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007808:	4b77      	ldr	r3, [pc, #476]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0ed      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007818:	2b00      	cmp	r3, #0
 800781a:	d173      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800781c:	4b71      	ldr	r3, [pc, #452]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800781e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007828:	4053      	eors	r3, r2
 800782a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800782e:	2b00      	cmp	r3, #0
 8007830:	d015      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007832:	4b6c      	ldr	r3, [pc, #432]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800783a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800783e:	4b69      	ldr	r3, [pc, #420]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007842:	4a68      	ldr	r2, [pc, #416]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007848:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800784a:	4b66      	ldr	r3, [pc, #408]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784e:	4a65      	ldr	r2, [pc, #404]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007854:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007856:	4a63      	ldr	r2, [pc, #396]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800785c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800786a:	d118      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786c:	f7fb feea 	bl	8003644 <HAL_GetTick>
 8007870:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007874:	e00d      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007876:	f7fb fee5 	bl	8003644 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007880:	1ad2      	subs	r2, r2, r3
 8007882:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007886:	429a      	cmp	r2, r3
 8007888:	d903      	bls.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007890:	e005      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007892:	4b54      	ldr	r3, [pc, #336]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0eb      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800789e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d129      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b6:	d10e      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80078b8:	4b4a      	ldr	r3, [pc, #296]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078c8:	091a      	lsrs	r2, r3, #4
 80078ca:	4b48      	ldr	r3, [pc, #288]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	4a45      	ldr	r2, [pc, #276]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078d0:	430b      	orrs	r3, r1
 80078d2:	6113      	str	r3, [r2, #16]
 80078d4:	e005      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80078d6:	4b43      	ldr	r3, [pc, #268]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	4a42      	ldr	r2, [pc, #264]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078e0:	6113      	str	r3, [r2, #16]
 80078e2:	4b40      	ldr	r3, [pc, #256]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80078e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078f2:	4a3c      	ldr	r2, [pc, #240]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f4:	430b      	orrs	r3, r1
 80078f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80078f8:	e008      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 0301 	and.w	r3, r2, #1
 8007918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007922:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	f000 808f 	beq.w	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007934:	2b28      	cmp	r3, #40	@ 0x28
 8007936:	d871      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007a25 	.word	0x08007a25
 8007944:	08007a1d 	.word	0x08007a1d
 8007948:	08007a1d 	.word	0x08007a1d
 800794c:	08007a1d 	.word	0x08007a1d
 8007950:	08007a1d 	.word	0x08007a1d
 8007954:	08007a1d 	.word	0x08007a1d
 8007958:	08007a1d 	.word	0x08007a1d
 800795c:	08007a1d 	.word	0x08007a1d
 8007960:	080079f1 	.word	0x080079f1
 8007964:	08007a1d 	.word	0x08007a1d
 8007968:	08007a1d 	.word	0x08007a1d
 800796c:	08007a1d 	.word	0x08007a1d
 8007970:	08007a1d 	.word	0x08007a1d
 8007974:	08007a1d 	.word	0x08007a1d
 8007978:	08007a1d 	.word	0x08007a1d
 800797c:	08007a1d 	.word	0x08007a1d
 8007980:	08007a07 	.word	0x08007a07
 8007984:	08007a1d 	.word	0x08007a1d
 8007988:	08007a1d 	.word	0x08007a1d
 800798c:	08007a1d 	.word	0x08007a1d
 8007990:	08007a1d 	.word	0x08007a1d
 8007994:	08007a1d 	.word	0x08007a1d
 8007998:	08007a1d 	.word	0x08007a1d
 800799c:	08007a1d 	.word	0x08007a1d
 80079a0:	08007a25 	.word	0x08007a25
 80079a4:	08007a1d 	.word	0x08007a1d
 80079a8:	08007a1d 	.word	0x08007a1d
 80079ac:	08007a1d 	.word	0x08007a1d
 80079b0:	08007a1d 	.word	0x08007a1d
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007a1d 	.word	0x08007a1d
 80079bc:	08007a1d 	.word	0x08007a1d
 80079c0:	08007a25 	.word	0x08007a25
 80079c4:	08007a1d 	.word	0x08007a1d
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007a1d 	.word	0x08007a1d
 80079d0:	08007a1d 	.word	0x08007a1d
 80079d4:	08007a1d 	.word	0x08007a1d
 80079d8:	08007a1d 	.word	0x08007a1d
 80079dc:	08007a1d 	.word	0x08007a1d
 80079e0:	08007a25 	.word	0x08007a25
 80079e4:	58024400 	.word	0x58024400
 80079e8:	58024800 	.word	0x58024800
 80079ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f4:	3308      	adds	r3, #8
 80079f6:	2101      	movs	r1, #1
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 fdcb 	bl	8009594 <RCCEx_PLL2_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a04:	e00f      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0a:	3328      	adds	r3, #40	@ 0x28
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 fe72 	bl	80096f8 <RCCEx_PLL3_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a1a:	e004      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a22:	e000      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a2e:	4bbf      	ldr	r3, [pc, #764]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a32:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a3c:	4abb      	ldr	r2, [pc, #748]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a42:	e003      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f002 0302 	and.w	r3, r2, #2
 8007a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	d041      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	d824      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007a76:	a201      	add	r2, pc, #4	@ (adr r2, 8007a7c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007ac9 	.word	0x08007ac9
 8007a80:	08007a95 	.word	0x08007a95
 8007a84:	08007aab 	.word	0x08007aab
 8007a88:	08007ac9 	.word	0x08007ac9
 8007a8c:	08007ac9 	.word	0x08007ac9
 8007a90:	08007ac9 	.word	0x08007ac9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 fd79 	bl	8009594 <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007aa8:	e00f      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aae:	3328      	adds	r3, #40	@ 0x28
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 fe20 	bl	80096f8 <RCCEx_PLL3_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007abe:	e004      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac6:	e000      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ad2:	4b96      	ldr	r3, [pc, #600]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad6:	f023 0107 	bic.w	r1, r3, #7
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae0:	4a92      	ldr	r2, [pc, #584]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ae6:	e003      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f002 0304 	and.w	r3, r2, #4
 8007afc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b00:	2300      	movs	r3, #0
 8007b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b06:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	d044      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	d825      	bhi.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b71 	.word	0x08007b71
 8007b28:	08007b3d 	.word	0x08007b3d
 8007b2c:	08007b53 	.word	0x08007b53
 8007b30:	08007b71 	.word	0x08007b71
 8007b34:	08007b71 	.word	0x08007b71
 8007b38:	08007b71 	.word	0x08007b71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b40:	3308      	adds	r3, #8
 8007b42:	2101      	movs	r1, #1
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 fd25 	bl	8009594 <RCCEx_PLL2_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b50:	e00f      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b56:	3328      	adds	r3, #40	@ 0x28
 8007b58:	2101      	movs	r1, #1
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 fdcc 	bl	80096f8 <RCCEx_PLL3_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b66:	e004      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b6e:	e000      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7e:	f023 0107 	bic.w	r1, r3, #7
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8a:	4a68      	ldr	r2, [pc, #416]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b90:	e003      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	f002 0320 	and.w	r3, r2, #32
 8007ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007baa:	2300      	movs	r3, #0
 8007bac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	d055      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bc6:	d033      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bcc:	d82c      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd2:	d02f      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd8:	d826      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007bda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bde:	d02b      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007be0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007be4:	d820      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bea:	d012      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bf0:	d81a      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d022      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bfa:	d115      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c00:	3308      	adds	r3, #8
 8007c02:	2100      	movs	r1, #0
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 fcc5 	bl	8009594 <RCCEx_PLL2_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c10:	e015      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	3328      	adds	r3, #40	@ 0x28
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fd6c 	bl	80096f8 <RCCEx_PLL3_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c26:	e00a      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c2e:	e006      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c30:	bf00      	nop
 8007c32:	e004      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c34:	bf00      	nop
 8007c36:	e002      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c38:	bf00      	nop
 8007c3a:	e000      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c46:	4b39      	ldr	r3, [pc, #228]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c56:	4a35      	ldr	r2, [pc, #212]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c5c:	e003      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007c72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c76:	2300      	movs	r3, #0
 8007c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c7c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c80:	460b      	mov	r3, r1
 8007c82:	4313      	orrs	r3, r2
 8007c84:	d058      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c8e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c92:	d033      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007c94:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c98:	d82c      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c9e:	d02f      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca4:	d826      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ca6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007caa:	d02b      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007cac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cb0:	d820      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cb6:	d012      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cbc:	d81a      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d022      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cc6:	d115      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	3308      	adds	r3, #8
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 fc5f 	bl	8009594 <RCCEx_PLL2_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007cdc:	e015      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce2:	3328      	adds	r3, #40	@ 0x28
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 fd06 	bl	80096f8 <RCCEx_PLL3_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007cf2:	e00a      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cfa:	e006      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007cfc:	bf00      	nop
 8007cfe:	e004      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d00:	bf00      	nop
 8007d02:	e002      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d04:	bf00      	nop
 8007d06:	e000      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10e      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d12:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d22:	4a02      	ldr	r2, [pc, #8]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d28:	e006      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007d2a:	bf00      	nop
 8007d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007d44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d52:	460b      	mov	r3, r1
 8007d54:	4313      	orrs	r3, r2
 8007d56:	d055      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d64:	d033      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007d66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d6a:	d82c      	bhi.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d70:	d02f      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d76:	d826      	bhi.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d7c:	d02b      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007d7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d82:	d820      	bhi.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d88:	d012      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007d8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d8e:	d81a      	bhi.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d022      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d98:	d115      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9e:	3308      	adds	r3, #8
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fbf6 	bl	8009594 <RCCEx_PLL2_Config>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007dae:	e015      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db4:	3328      	adds	r3, #40	@ 0x28
 8007db6:	2102      	movs	r1, #2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 fc9d 	bl	80096f8 <RCCEx_PLL3_Config>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007dc4:	e00a      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dcc:	e006      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dce:	bf00      	nop
 8007dd0:	e004      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dd2:	bf00      	nop
 8007dd4:	e002      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007de4:	4ba0      	ldr	r3, [pc, #640]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007df4:	4a9c      	ldr	r2, [pc, #624]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007df6:	430b      	orrs	r3, r1
 8007df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dfa:	e003      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f002 0308 	and.w	r3, r2, #8
 8007e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4313      	orrs	r3, r2
 8007e22:	d01e      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e30:	d10c      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e36:	3328      	adds	r3, #40	@ 0x28
 8007e38:	2102      	movs	r1, #2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 fc5c 	bl	80096f8 <RCCEx_PLL3_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007e4c:	4b86      	ldr	r3, [pc, #536]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5c:	4a82      	ldr	r2, [pc, #520]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f002 0310 	and.w	r3, r2, #16
 8007e6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e72:	2300      	movs	r3, #0
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e78:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	d01e      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e8e:	d10c      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e94:	3328      	adds	r3, #40	@ 0x28
 8007e96:	2102      	movs	r1, #2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fc2d 	bl	80096f8 <RCCEx_PLL3_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eba:	4a6b      	ldr	r2, [pc, #428]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ece:	2300      	movs	r3, #0
 8007ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ed2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d03e      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ee8:	d022      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eee:	d81b      	bhi.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef8:	d00b      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007efa:	e015      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f00:	3308      	adds	r3, #8
 8007f02:	2100      	movs	r1, #0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 fb45 	bl	8009594 <RCCEx_PLL2_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f10:	e00f      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f16:	3328      	adds	r3, #40	@ 0x28
 8007f18:	2102      	movs	r1, #2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 fbec 	bl	80096f8 <RCCEx_PLL3_Config>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f26:	e004      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f2e:	e000      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10b      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f4a:	4a47      	ldr	r2, [pc, #284]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f50:	e003      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007f66:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f68:	2300      	movs	r3, #0
 8007f6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f70:	460b      	mov	r3, r1
 8007f72:	4313      	orrs	r3, r2
 8007f74:	d03b      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f82:	d01f      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007f84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f88:	d818      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f8e:	d003      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f94:	d007      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007f96:	e011      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f98:	4b33      	ldr	r3, [pc, #204]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9c:	4a32      	ldr	r2, [pc, #200]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fa4:	e00f      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007faa:	3328      	adds	r3, #40	@ 0x28
 8007fac:	2101      	movs	r1, #1
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fba2 	bl	80096f8 <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fba:	e004      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10b      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fce:	4b26      	ldr	r3, [pc, #152]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fde:	4a22      	ldr	r2, [pc, #136]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fe4:	e003      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008000:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d034      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008018:	d007      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800801a:	e011      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801c:	4b12      	ldr	r3, [pc, #72]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	4a11      	ldr	r2, [pc, #68]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008028:	e00e      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800802a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802e:	3308      	adds	r3, #8
 8008030:	2102      	movs	r1, #2
 8008032:	4618      	mov	r0, r3
 8008034:	f001 faae 	bl	8009594 <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800803e:	e003      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10d      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008050:	4b05      	ldr	r3, [pc, #20]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008054:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800805e:	4a02      	ldr	r2, [pc, #8]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008060:	430b      	orrs	r3, r1
 8008062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008064:	e006      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008066:	bf00      	nop
 8008068:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008070:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008080:	663b      	str	r3, [r7, #96]	@ 0x60
 8008082:	2300      	movs	r3, #0
 8008084:	667b      	str	r3, [r7, #100]	@ 0x64
 8008086:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800808a:	460b      	mov	r3, r1
 800808c:	4313      	orrs	r3, r2
 800808e:	d00c      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008094:	3328      	adds	r3, #40	@ 0x28
 8008096:	2102      	movs	r1, #2
 8008098:	4618      	mov	r0, r3
 800809a:	f001 fb2d 	bl	80096f8 <RCCEx_PLL3_Config>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80080b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080b8:	2300      	movs	r3, #0
 80080ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080c0:	460b      	mov	r3, r1
 80080c2:	4313      	orrs	r3, r2
 80080c4:	d036      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080d0:	d018      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80080d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080d6:	d811      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80080d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080dc:	d014      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80080de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e2:	d80b      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d011      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80080e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ec:	d106      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ee:	4bb7      	ldr	r3, [pc, #732]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f2:	4ab6      	ldr	r2, [pc, #728]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80080f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80080fa:	e008      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008102:	e004      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008104:	bf00      	nop
 8008106:	e002      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008108:	bf00      	nop
 800810a:	e000      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800810c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008116:	4bad      	ldr	r3, [pc, #692]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800811e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008124:	4aa9      	ldr	r2, [pc, #676]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008126:	430b      	orrs	r3, r1
 8008128:	6553      	str	r3, [r2, #84]	@ 0x54
 800812a:	e003      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008140:	653b      	str	r3, [r7, #80]	@ 0x50
 8008142:	2300      	movs	r3, #0
 8008144:	657b      	str	r3, [r7, #84]	@ 0x54
 8008146:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800814a:	460b      	mov	r3, r1
 800814c:	4313      	orrs	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008150:	4b9e      	ldr	r3, [pc, #632]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008154:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800815e:	4a9b      	ldr	r2, [pc, #620]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008160:	430b      	orrs	r3, r1
 8008162:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008172:	2300      	movs	r3, #0
 8008174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008176:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800817a:	460b      	mov	r3, r1
 800817c:	4313      	orrs	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008180:	4b92      	ldr	r3, [pc, #584]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008184:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800818e:	4a8f      	ldr	r2, [pc, #572]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80081a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081a2:	2300      	movs	r3, #0
 80081a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80081aa:	460b      	mov	r3, r1
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d00e      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081b0:	4b86      	ldr	r3, [pc, #536]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	4a85      	ldr	r2, [pc, #532]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081ba:	6113      	str	r3, [r2, #16]
 80081bc:	4b83      	ldr	r3, [pc, #524]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081be:	6919      	ldr	r1, [r3, #16]
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081c8:	4a80      	ldr	r2, [pc, #512]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081ca:	430b      	orrs	r3, r1
 80081cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80081da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80081e4:	460b      	mov	r3, r1
 80081e6:	4313      	orrs	r3, r2
 80081e8:	d009      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081ea:	4b78      	ldr	r3, [pc, #480]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	4a74      	ldr	r2, [pc, #464]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081fa:	430b      	orrs	r3, r1
 80081fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800820a:	633b      	str	r3, [r7, #48]	@ 0x30
 800820c:	2300      	movs	r3, #0
 800820e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008210:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008214:	460b      	mov	r3, r1
 8008216:	4313      	orrs	r3, r2
 8008218:	d00a      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800821a:	4b6c      	ldr	r3, [pc, #432]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800821c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800822a:	4a68      	ldr	r2, [pc, #416]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800822c:	430b      	orrs	r3, r1
 800822e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	2100      	movs	r1, #0
 800823a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008242:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008246:	460b      	mov	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	d011      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008250:	3308      	adds	r3, #8
 8008252:	2100      	movs	r1, #0
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f99d 	bl	8009594 <RCCEx_PLL2_Config>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800826c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	2100      	movs	r1, #0
 800827a:	6239      	str	r1, [r7, #32]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24
 8008282:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008286:	460b      	mov	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	d011      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	3308      	adds	r3, #8
 8008292:	2101      	movs	r1, #1
 8008294:	4618      	mov	r0, r3
 8008296:	f001 f97d 	bl	8009594 <RCCEx_PLL2_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80082b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	2100      	movs	r1, #0
 80082ba:	61b9      	str	r1, [r7, #24]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d011      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	3308      	adds	r3, #8
 80082d2:	2102      	movs	r1, #2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f95d 	bl	8009594 <RCCEx_PLL2_Config>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80082f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	2100      	movs	r1, #0
 80082fa:	6139      	str	r1, [r7, #16]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008306:	460b      	mov	r3, r1
 8008308:	4313      	orrs	r3, r2
 800830a:	d011      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	3328      	adds	r3, #40	@ 0x28
 8008312:	2100      	movs	r1, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f001 f9ef 	bl	80096f8 <RCCEx_PLL3_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800832c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	2100      	movs	r1, #0
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008346:	460b      	mov	r3, r1
 8008348:	4313      	orrs	r3, r2
 800834a:	d011      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	3328      	adds	r3, #40	@ 0x28
 8008352:	2101      	movs	r1, #1
 8008354:	4618      	mov	r0, r3
 8008356:	f001 f9cf 	bl	80096f8 <RCCEx_PLL3_Config>
 800835a:	4603      	mov	r3, r0
 800835c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800836c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	2100      	movs	r1, #0
 800837a:	6039      	str	r1, [r7, #0]
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	607b      	str	r3, [r7, #4]
 8008382:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008386:	460b      	mov	r3, r1
 8008388:	4313      	orrs	r3, r2
 800838a:	d011      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008390:	3328      	adds	r3, #40	@ 0x28
 8008392:	2102      	movs	r1, #2
 8008394:	4618      	mov	r0, r3
 8008396:	f001 f9af 	bl	80096f8 <RCCEx_PLL3_Config>
 800839a:	4603      	mov	r3, r0
 800839c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80083b0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	e000      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
}
 80083be:	4618      	mov	r0, r3
 80083c0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80083c4:	46bd      	mov	sp, r7
 80083c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ca:	bf00      	nop
 80083cc:	58024400 	.word	0x58024400

080083d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b090      	sub	sp, #64	@ 0x40
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80083da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80083e2:	430b      	orrs	r3, r1
 80083e4:	f040 8094 	bne.w	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80083e8:	4b9b      	ldr	r3, [pc, #620]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	f200 8087 	bhi.w	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80083fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008415 	.word	0x08008415
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008465 	.word	0x08008465
 800840c:	08008501 	.word	0x08008501
 8008410:	0800848d 	.word	0x0800848d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008414:	4b90      	ldr	r3, [pc, #576]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008420:	d108      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008426:	4618      	mov	r0, r3
 8008428:	f000 ff62 	bl	80092f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008430:	f000 bc93 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008438:	f000 bc8f 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800843c:	4b86      	ldr	r3, [pc, #536]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008448:	d108      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fca6 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008458:	f000 bc7f 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008460:	f000 bc7b 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008464:	4b7c      	ldr	r3, [pc, #496]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800846c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008470:	d108      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008472:	f107 030c 	add.w	r3, r7, #12
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fde6 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008480:	f000 bc6b 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008488:	f000 bc67 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800848c:	4b72      	ldr	r3, [pc, #456]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008496:	4b70      	ldr	r3, [pc, #448]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d10c      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80084a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a8:	4b6b      	ldr	r3, [pc, #428]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	08db      	lsrs	r3, r3, #3
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	4a6a      	ldr	r2, [pc, #424]	@ (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80084b4:	fa22 f303 	lsr.w	r3, r2, r3
 80084b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ba:	e01f      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084bc:	4b66      	ldr	r3, [pc, #408]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c8:	d106      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80084ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084d0:	d102      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084d2:	4b63      	ldr	r3, [pc, #396]	@ (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084d6:	e011      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084e4:	d106      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80084e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ec:	d102      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084ee:	4b5d      	ldr	r3, [pc, #372]	@ (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f2:	e003      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084f8:	f000 bc2f 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084fc:	f000 bc2d 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008500:	4b59      	ldr	r3, [pc, #356]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008504:	f000 bc29 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800850c:	f000 bc25 	b.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008514:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008518:	430b      	orrs	r3, r1
 800851a:	f040 80a7 	bne.w	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800851e:	4b4e      	ldr	r3, [pc, #312]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008522:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008526:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800852e:	d054      	beq.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008536:	f200 808b 	bhi.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008540:	f000 8083 	beq.w	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008546:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800854a:	f200 8081 	bhi.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008554:	d02f      	beq.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800855c:	d878      	bhi.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800856a:	d012      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800856c:	e070      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800856e:	4b3a      	ldr	r3, [pc, #232]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008576:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800857a:	d107      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800857c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008580:	4618      	mov	r0, r3
 8008582:	f000 feb5 	bl	80092f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800858a:	e3e6      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008590:	e3e3      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008592:	4b31      	ldr	r3, [pc, #196]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800859a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800859e:	d107      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a0:	f107 0318 	add.w	r3, r7, #24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fbfb 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ae:	e3d4      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b4:	e3d1      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085b6:	4b28      	ldr	r3, [pc, #160]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c2:	d107      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c4:	f107 030c 	add.w	r3, r7, #12
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 fd3d 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d2:	e3c2      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	e3bf      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085da:	4b1f      	ldr	r3, [pc, #124]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d10c      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80085f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f6:	4b18      	ldr	r3, [pc, #96]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	08db      	lsrs	r3, r3, #3
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	4a16      	ldr	r2, [pc, #88]	@ (800865c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008602:	fa22 f303 	lsr.w	r3, r2, r3
 8008606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008608:	e01e      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800860a:	4b13      	ldr	r3, [pc, #76]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008616:	d106      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800861e:	d102      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008620:	4b0f      	ldr	r3, [pc, #60]	@ (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008624:	e010      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008626:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800862e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008632:	d106      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800863a:	d102      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800863c:	4b09      	ldr	r3, [pc, #36]	@ (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008640:	e002      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008646:	e388      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008648:	e387      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800864a:	4b07      	ldr	r3, [pc, #28]	@ (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864e:	e384      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e381      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
 800865c:	03d09000 	.word	0x03d09000
 8008660:	003d0900 	.word	0x003d0900
 8008664:	02dc6c00 	.word	0x02dc6c00
 8008668:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800866c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008670:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008674:	430b      	orrs	r3, r1
 8008676:	f040 809c 	bne.w	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800867a:	4b9e      	ldr	r3, [pc, #632]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800867c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800867e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008682:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800868a:	d054      	beq.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008692:	f200 808b 	bhi.w	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800869c:	f000 8083 	beq.w	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80086a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086a6:	f200 8081 	bhi.w	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b0:	d02f      	beq.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b8:	d878      	bhi.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086c6:	d012      	beq.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80086c8:	e070      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ca:	4b8a      	ldr	r3, [pc, #552]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d6:	d107      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fe07 	bl	80092f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e6:	e338      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ec:	e335      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ee:	4b81      	ldr	r3, [pc, #516]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086fa:	d107      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086fc:	f107 0318 	add.w	r3, r7, #24
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fb4d 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800870a:	e326      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008710:	e323      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008712:	4b78      	ldr	r3, [pc, #480]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800871a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871e:	d107      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008720:	f107 030c 	add.w	r3, r7, #12
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fc8f 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800872e:	e314      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008734:	e311      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008736:	4b6f      	ldr	r3, [pc, #444]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800873a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008740:	4b6c      	ldr	r3, [pc, #432]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b04      	cmp	r3, #4
 800874a:	d10c      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800874c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008752:	4b68      	ldr	r3, [pc, #416]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	08db      	lsrs	r3, r3, #3
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	4a66      	ldr	r2, [pc, #408]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800875e:	fa22 f303 	lsr.w	r3, r2, r3
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008764:	e01e      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008766:	4b63      	ldr	r3, [pc, #396]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008772:	d106      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800877a:	d102      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800877c:	4b5f      	ldr	r3, [pc, #380]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008780:	e010      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008782:	4b5c      	ldr	r3, [pc, #368]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800878a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800878e:	d106      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008796:	d102      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008798:	4b59      	ldr	r3, [pc, #356]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800879c:	e002      	b.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087a2:	e2da      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087a4:	e2d9      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087a6:	4b57      	ldr	r3, [pc, #348]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80087a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087aa:	e2d6      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b0:	e2d3      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80087ba:	430b      	orrs	r3, r1
 80087bc:	f040 80a7 	bne.w	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80087c0:	4b4c      	ldr	r3, [pc, #304]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087d0:	d055      	beq.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80087d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087d8:	f200 8096 	bhi.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087e2:	f000 8084 	beq.w	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80087e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087ec:	f200 808c 	bhi.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80087f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087f6:	d030      	beq.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087fe:	f200 8083 	bhi.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800880e:	d012      	beq.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008810:	e07a      	b.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008812:	4b38      	ldr	r3, [pc, #224]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800881a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800881e:	d107      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008824:	4618      	mov	r0, r3
 8008826:	f000 fd63 	bl	80092f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800882e:	e294      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008834:	e291      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008836:	4b2f      	ldr	r3, [pc, #188]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800883e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008842:	d107      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008844:	f107 0318 	add.w	r3, r7, #24
 8008848:	4618      	mov	r0, r3
 800884a:	f000 faa9 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008852:	e282      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008858:	e27f      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800885a:	4b26      	ldr	r3, [pc, #152]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008866:	d107      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008868:	f107 030c 	add.w	r3, r7, #12
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fbeb 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008876:	e270      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887c:	e26d      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800887e:	4b1d      	ldr	r3, [pc, #116]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008882:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008886:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008888:	4b1a      	ldr	r3, [pc, #104]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b04      	cmp	r3, #4
 8008892:	d10c      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008896:	2b00      	cmp	r3, #0
 8008898:	d109      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800889a:	4b16      	ldr	r3, [pc, #88]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	08db      	lsrs	r3, r3, #3
 80088a0:	f003 0303 	and.w	r3, r3, #3
 80088a4:	4a14      	ldr	r2, [pc, #80]	@ (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80088a6:	fa22 f303 	lsr.w	r3, r2, r3
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088ac:	e01e      	b.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088ae:	4b11      	ldr	r3, [pc, #68]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ba:	d106      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80088bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088c2:	d102      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088c4:	4b0d      	ldr	r3, [pc, #52]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80088c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088c8:	e010      	b.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088ca:	4b0a      	ldr	r3, [pc, #40]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088d6:	d106      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80088d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088de:	d102      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088e0:	4b07      	ldr	r3, [pc, #28]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088e4:	e002      	b.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088ea:	e236      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ec:	e235      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088ee:	4b05      	ldr	r3, [pc, #20]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80088f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f2:	e232      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088f4:	58024400 	.word	0x58024400
 80088f8:	03d09000 	.word	0x03d09000
 80088fc:	003d0900 	.word	0x003d0900
 8008900:	02dc6c00 	.word	0x02dc6c00
 8008904:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800890c:	e225      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800890e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008912:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008916:	430b      	orrs	r3, r1
 8008918:	f040 8085 	bne.w	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800891c:	4b9c      	ldr	r3, [pc, #624]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800891e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008920:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008924:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800892c:	d06b      	beq.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800892e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008934:	d874      	bhi.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800893c:	d056      	beq.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008944:	d86c      	bhi.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800894c:	d03b      	beq.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008954:	d864      	bhi.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800895c:	d021      	beq.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008964:	d85c      	bhi.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	d004      	beq.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800896c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008972:	d004      	beq.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008974:	e054      	b.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008976:	f7fe fb5f 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 800897a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800897c:	e1ed      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800897e:	4b84      	ldr	r3, [pc, #528]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800898a:	d107      	bne.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800898c:	f107 0318 	add.w	r3, r7, #24
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fa05 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800899a:	e1de      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a0:	e1db      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089a2:	4b7b      	ldr	r3, [pc, #492]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ae:	d107      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b0:	f107 030c 	add.w	r3, r7, #12
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 fb47 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089be:	e1cc      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c4:	e1c9      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089c6:	4b72      	ldr	r3, [pc, #456]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d109      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	08db      	lsrs	r3, r3, #3
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	4a6d      	ldr	r2, [pc, #436]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80089de:	fa22 f303 	lsr.w	r3, r2, r3
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e4:	e1b9      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ea:	e1b6      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80089ec:	4b68      	ldr	r3, [pc, #416]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f8:	d102      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80089fa:	4b67      	ldr	r3, [pc, #412]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089fe:	e1ac      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a04:	e1a9      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a06:	4b62      	ldr	r3, [pc, #392]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a12:	d102      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008a14:	4b61      	ldr	r3, [pc, #388]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a18:	e19f      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1e:	e19c      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a24:	e199      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	d173      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008a32:	4b57      	ldr	r3, [pc, #348]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a42:	d02f      	beq.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a4a:	d863      	bhi.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d004      	beq.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a58:	d012      	beq.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008a5a:	e05b      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a68:	d107      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6a:	f107 0318 	add.w	r3, r7, #24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f996 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a78:	e16f      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7e:	e16c      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a80:	4b43      	ldr	r3, [pc, #268]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a8c:	d107      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a8e:	f107 030c 	add.w	r3, r7, #12
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fad8 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a9c:	e15d      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa2:	e15a      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008aac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008aae:	4b38      	ldr	r3, [pc, #224]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d10c      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ac0:	4b33      	ldr	r3, [pc, #204]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	08db      	lsrs	r3, r3, #3
 8008ac6:	f003 0303 	and.w	r3, r3, #3
 8008aca:	4a32      	ldr	r2, [pc, #200]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008acc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ad2:	e01e      	b.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae0:	d106      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ae8:	d102      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008aea:	4b2b      	ldr	r3, [pc, #172]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aee:	e010      	b.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008af0:	4b27      	ldr	r3, [pc, #156]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008afc:	d106      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b04:	d102      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b06:	4b25      	ldr	r3, [pc, #148]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b0a:	e002      	b.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b10:	e123      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b12:	e122      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b18:	e11f      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008b22:	430b      	orrs	r3, r1
 8008b24:	d13c      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b26:	4b1a      	ldr	r3, [pc, #104]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b2e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b3c:	d012      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008b3e:	e023      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b40:	4b13      	ldr	r3, [pc, #76]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b4c:	d107      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 fbcc 	bl	80092f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b5c:	e0fd      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b62:	e0fa      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b64:	4b0a      	ldr	r3, [pc, #40]	@ (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b70:	d107      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b72:	f107 0318 	add.w	r3, r7, #24
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 f912 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b80:	e0eb      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b86:	e0e8      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8c:	e0e5      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b8e:	bf00      	nop
 8008b90:	58024400 	.word	0x58024400
 8008b94:	03d09000 	.word	0x03d09000
 8008b98:	003d0900 	.word	0x003d0900
 8008b9c:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	f040 8085 	bne.w	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008bae:	4b6d      	ldr	r3, [pc, #436]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008bb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bbe:	d06b      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bc6:	d874      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bce:	d056      	beq.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd6:	d86c      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008bde:	d03b      	beq.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008be6:	d864      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bee:	d021      	beq.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf6:	d85c      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c04:	d004      	beq.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008c06:	e054      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c08:	f000 f8b4 	bl	8008d74 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c0e:	e0a4      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c10:	4b54      	ldr	r3, [pc, #336]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1e:	f107 0318 	add.w	r3, r7, #24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f8bc 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c2c:	e095      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c32:	e092      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c34:	4b4b      	ldr	r3, [pc, #300]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c40:	d107      	bne.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c42:	f107 030c 	add.w	r3, r7, #12
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f9fe 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c50:	e083      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c56:	e080      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c58:	4b42      	ldr	r3, [pc, #264]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d109      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c64:	4b3f      	ldr	r3, [pc, #252]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	08db      	lsrs	r3, r3, #3
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
 8008c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c76:	e070      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c7c:	e06d      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c7e:	4b39      	ldr	r3, [pc, #228]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c8a:	d102      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008c8c:	4b37      	ldr	r3, [pc, #220]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c90:	e063      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c96:	e060      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c98:	4b32      	ldr	r3, [pc, #200]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ca4:	d102      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008ca6:	4b32      	ldr	r3, [pc, #200]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008caa:	e056      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb0:	e053      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb6:	e050      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cbc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	d148      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008cc4:	4b27      	ldr	r3, [pc, #156]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ccc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd4:	d02a      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cdc:	d838      	bhi.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d004      	beq.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cea:	d00d      	beq.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008cec:	e030      	b.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cee:	4b1d      	ldr	r3, [pc, #116]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cfa:	d102      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d00:	e02b      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d06:	e028      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d08:	4b16      	ldr	r3, [pc, #88]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d14:	d107      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fae8 	bl	80092f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d24:	e019      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d2a:	e016      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d38:	d107      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3a:	f107 0318 	add.w	r3, r7, #24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f82e 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d48:	e007      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4e:	e004      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e001      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3740      	adds	r7, #64	@ 0x40
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	58024400 	.word	0x58024400
 8008d68:	03d09000 	.word	0x03d09000
 8008d6c:	003d0900 	.word	0x003d0900
 8008d70:	02dc6c00 	.word	0x02dc6c00

08008d74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d78:	f7fe f92e 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	091b      	lsrs	r3, r3, #4
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	4904      	ldr	r1, [pc, #16]	@ (8008d9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d8a:	5ccb      	ldrb	r3, [r1, r3]
 8008d8c:	f003 031f 	and.w	r3, r3, #31
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	08013744 	.word	0x08013744

08008da0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b089      	sub	sp, #36	@ 0x24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008da8:	4ba1      	ldr	r3, [pc, #644]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008db2:	4b9f      	ldr	r3, [pc, #636]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db6:	0b1b      	lsrs	r3, r3, #12
 8008db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc2:	091b      	lsrs	r3, r3, #4
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008dca:	4b99      	ldr	r3, [pc, #612]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dce:	08db      	lsrs	r3, r3, #3
 8008dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	fb02 f303 	mul.w	r3, r2, r3
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8111 	beq.w	8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	f000 8083 	beq.w	8008efc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	f200 80a1 	bhi.w	8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d056      	beq.n	8008eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e0a:	e099      	b.n	8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e0c:	4b88      	ldr	r3, [pc, #544]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d02d      	beq.n	8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e18:	4b85      	ldr	r3, [pc, #532]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	08db      	lsrs	r3, r3, #3
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	4a84      	ldr	r2, [pc, #528]	@ (8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e42:	4b7b      	ldr	r3, [pc, #492]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e72:	e087      	b.n	8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800903c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e86:	4b6a      	ldr	r3, [pc, #424]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb6:	e065      	b.n	8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eca:	4b59      	ldr	r3, [pc, #356]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ede:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008efa:	e043      	b.n	8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0e:	4b48      	ldr	r3, [pc, #288]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f3e:	e021      	b.n	8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f52:	4b37      	ldr	r3, [pc, #220]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f84:	4b2a      	ldr	r3, [pc, #168]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f88:	0a5b      	lsrs	r3, r3, #9
 8008f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008faa:	ee17 2a90 	vmov	r2, s15
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb6:	0c1b      	lsrs	r3, r3, #16
 8008fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd8:	ee17 2a90 	vmov	r2, s15
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008fe0:	4b13      	ldr	r3, [pc, #76]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe4:	0e1b      	lsrs	r3, r3, #24
 8008fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009006:	ee17 2a90 	vmov	r2, s15
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800900e:	e008      	b.n	8009022 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
}
 8009022:	bf00      	nop
 8009024:	3724      	adds	r7, #36	@ 0x24
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	58024400 	.word	0x58024400
 8009034:	03d09000 	.word	0x03d09000
 8009038:	46000000 	.word	0x46000000
 800903c:	4c742400 	.word	0x4c742400
 8009040:	4a742400 	.word	0x4a742400
 8009044:	4c371b00 	.word	0x4c371b00

08009048 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009048:	b480      	push	{r7}
 800904a:	b089      	sub	sp, #36	@ 0x24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009050:	4ba1      	ldr	r3, [pc, #644]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800905a:	4b9f      	ldr	r3, [pc, #636]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800905c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905e:	0d1b      	lsrs	r3, r3, #20
 8009060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009064:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009066:	4b9c      	ldr	r3, [pc, #624]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009072:	4b99      	ldr	r3, [pc, #612]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009076:	08db      	lsrs	r3, r3, #3
 8009078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	fb02 f303 	mul.w	r3, r2, r3
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 8111 	beq.w	80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b02      	cmp	r3, #2
 800909a:	f000 8083 	beq.w	80091a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	f200 80a1 	bhi.w	80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d056      	beq.n	8009160 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80090b2:	e099      	b.n	80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090b4:	4b88      	ldr	r3, [pc, #544]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d02d      	beq.n	800911c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090c0:	4b85      	ldr	r3, [pc, #532]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	08db      	lsrs	r3, r3, #3
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	4a84      	ldr	r2, [pc, #528]	@ (80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
 80090d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ea:	4b7b      	ldr	r3, [pc, #492]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800911a:	e087      	b.n	800922c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800912a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912e:	4b6a      	ldr	r3, [pc, #424]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009142:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800915e:	e065      	b.n	800922c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800916e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009172:	4b59      	ldr	r3, [pc, #356]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a03 	vldr	s12, [r7, #12]
 8009186:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a2:	e043      	b.n	800922c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80091b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b6:	4b48      	ldr	r3, [pc, #288]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091e6:	e021      	b.n	800922c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091fa:	4b37      	ldr	r3, [pc, #220]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920a:	ed97 6a03 	vldr	s12, [r7, #12]
 800920e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800921a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800921e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800922a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800922c:	4b2a      	ldr	r3, [pc, #168]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800922e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009230:	0a5b      	lsrs	r3, r3, #9
 8009232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009246:	edd7 6a07 	vldr	s13, [r7, #28]
 800924a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800924e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009252:	ee17 2a90 	vmov	r2, s15
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800925a:	4b1f      	ldr	r3, [pc, #124]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800925c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925e:	0c1b      	lsrs	r3, r3, #16
 8009260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009264:	ee07 3a90 	vmov	s15, r3
 8009268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009274:	edd7 6a07 	vldr	s13, [r7, #28]
 8009278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800927c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009280:	ee17 2a90 	vmov	r2, s15
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009288:	4b13      	ldr	r3, [pc, #76]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928c:	0e1b      	lsrs	r3, r3, #24
 800928e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800929e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ae:	ee17 2a90 	vmov	r2, s15
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092b6:	e008      	b.n	80092ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	609a      	str	r2, [r3, #8]
}
 80092ca:	bf00      	nop
 80092cc:	3724      	adds	r7, #36	@ 0x24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	58024400 	.word	0x58024400
 80092dc:	03d09000 	.word	0x03d09000
 80092e0:	46000000 	.word	0x46000000
 80092e4:	4c742400 	.word	0x4c742400
 80092e8:	4a742400 	.word	0x4a742400
 80092ec:	4c371b00 	.word	0x4c371b00

080092f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b089      	sub	sp, #36	@ 0x24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092f8:	4ba0      	ldr	r3, [pc, #640]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009302:	4b9e      	ldr	r3, [pc, #632]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009306:	091b      	lsrs	r3, r3, #4
 8009308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800930c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800930e:	4b9b      	ldr	r3, [pc, #620]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009318:	4b98      	ldr	r3, [pc, #608]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800931a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931c:	08db      	lsrs	r3, r3, #3
 800931e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	fb02 f303 	mul.w	r3, r2, r3
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009330:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 8111 	beq.w	800955e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b02      	cmp	r3, #2
 8009340:	f000 8083 	beq.w	800944a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2b02      	cmp	r3, #2
 8009348:	f200 80a1 	bhi.w	800948e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d056      	beq.n	8009406 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009358:	e099      	b.n	800948e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800935a:	4b88      	ldr	r3, [pc, #544]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d02d      	beq.n	80093c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009366:	4b85      	ldr	r3, [pc, #532]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	08db      	lsrs	r3, r3, #3
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	4a83      	ldr	r2, [pc, #524]	@ (8009580 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009372:	fa22 f303 	lsr.w	r3, r2, r3
 8009376:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009390:	4b7a      	ldr	r3, [pc, #488]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009398:	ee07 3a90 	vmov	s15, r3
 800939c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009584 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093c0:	e087      	b.n	80094d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093cc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d4:	4b69      	ldr	r3, [pc, #420]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093dc:	ee07 3a90 	vmov	s15, r3
 80093e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009584 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009404:	e065      	b.n	80094d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	ee07 3a90 	vmov	s15, r3
 800940c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009410:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800958c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009418:	4b58      	ldr	r3, [pc, #352]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800941a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009428:	ed97 6a03 	vldr	s12, [r7, #12]
 800942c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009584 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800943c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009448:	e043      	b.n	80094d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	ee07 3a90 	vmov	s15, r3
 8009450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009454:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009590 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800945c:	4b47      	ldr	r3, [pc, #284]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800945e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009470:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009584 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800947c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800948c:	e021      	b.n	80094d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	ee07 3a90 	vmov	s15, r3
 8009494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009498:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800949c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a0:	4b36      	ldr	r3, [pc, #216]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a8:	ee07 3a90 	vmov	s15, r3
 80094ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80094b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009584 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80094d2:	4b2a      	ldr	r3, [pc, #168]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d6:	0a5b      	lsrs	r3, r3, #9
 80094d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094dc:	ee07 3a90 	vmov	s15, r3
 80094e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80094f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f8:	ee17 2a90 	vmov	r2, s15
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009500:	4b1e      	ldr	r3, [pc, #120]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009504:	0c1b      	lsrs	r3, r3, #16
 8009506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800951a:	edd7 6a07 	vldr	s13, [r7, #28]
 800951e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009526:	ee17 2a90 	vmov	r2, s15
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800952e:	4b13      	ldr	r3, [pc, #76]	@ (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009532:	0e1b      	lsrs	r3, r3, #24
 8009534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009540:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009548:	edd7 6a07 	vldr	s13, [r7, #28]
 800954c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009554:	ee17 2a90 	vmov	r2, s15
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800955c:	e008      	b.n	8009570 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	609a      	str	r2, [r3, #8]
}
 8009570:	bf00      	nop
 8009572:	3724      	adds	r7, #36	@ 0x24
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	58024400 	.word	0x58024400
 8009580:	03d09000 	.word	0x03d09000
 8009584:	46000000 	.word	0x46000000
 8009588:	4c742400 	.word	0x4c742400
 800958c:	4a742400 	.word	0x4a742400
 8009590:	4c371b00 	.word	0x4c371b00

08009594 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095a2:	4b53      	ldr	r3, [pc, #332]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80095a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d101      	bne.n	80095b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e099      	b.n	80096e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095b2:	4b4f      	ldr	r3, [pc, #316]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a4e      	ldr	r2, [pc, #312]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80095b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095be:	f7fa f841 	bl	8003644 <HAL_GetTick>
 80095c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095c4:	e008      	b.n	80095d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095c6:	f7fa f83d 	bl	8003644 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d901      	bls.n	80095d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e086      	b.n	80096e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095d8:	4b45      	ldr	r3, [pc, #276]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1f0      	bne.n	80095c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80095e4:	4b42      	ldr	r3, [pc, #264]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80095e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	031b      	lsls	r3, r3, #12
 80095f2:	493f      	ldr	r1, [pc, #252]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	3b01      	subs	r3, #1
 8009608:	025b      	lsls	r3, r3, #9
 800960a:	b29b      	uxth	r3, r3
 800960c:	431a      	orrs	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	3b01      	subs	r3, #1
 8009614:	041b      	lsls	r3, r3, #16
 8009616:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800961a:	431a      	orrs	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	3b01      	subs	r3, #1
 8009622:	061b      	lsls	r3, r3, #24
 8009624:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009628:	4931      	ldr	r1, [pc, #196]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 800962a:	4313      	orrs	r3, r2
 800962c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800962e:	4b30      	ldr	r3, [pc, #192]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009632:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	492d      	ldr	r1, [pc, #180]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 800963c:	4313      	orrs	r3, r2
 800963e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009640:	4b2b      	ldr	r3, [pc, #172]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	f023 0220 	bic.w	r2, r3, #32
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	4928      	ldr	r1, [pc, #160]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 800964e:	4313      	orrs	r3, r2
 8009650:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009652:	4b27      	ldr	r3, [pc, #156]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009656:	4a26      	ldr	r2, [pc, #152]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009658:	f023 0310 	bic.w	r3, r3, #16
 800965c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800965e:	4b24      	ldr	r3, [pc, #144]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009662:	4b24      	ldr	r3, [pc, #144]	@ (80096f4 <RCCEx_PLL2_Config+0x160>)
 8009664:	4013      	ands	r3, r2
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	69d2      	ldr	r2, [r2, #28]
 800966a:	00d2      	lsls	r2, r2, #3
 800966c:	4920      	ldr	r1, [pc, #128]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 800966e:	4313      	orrs	r3, r2
 8009670:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009672:	4b1f      	ldr	r3, [pc, #124]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009676:	4a1e      	ldr	r2, [pc, #120]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009678:	f043 0310 	orr.w	r3, r3, #16
 800967c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d106      	bne.n	8009692 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009684:	4b1a      	ldr	r3, [pc, #104]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 8009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009688:	4a19      	ldr	r2, [pc, #100]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 800968a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800968e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009690:	e00f      	b.n	80096b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d106      	bne.n	80096a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009698:	4b15      	ldr	r3, [pc, #84]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 800969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969c:	4a14      	ldr	r2, [pc, #80]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 800969e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096a4:	e005      	b.n	80096b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096a6:	4b12      	ldr	r3, [pc, #72]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80096a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096aa:	4a11      	ldr	r2, [pc, #68]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80096ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096b2:	4b0f      	ldr	r3, [pc, #60]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a0e      	ldr	r2, [pc, #56]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80096b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096be:	f7f9 ffc1 	bl	8003644 <HAL_GetTick>
 80096c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096c4:	e008      	b.n	80096d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096c6:	f7f9 ffbd 	bl	8003644 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d901      	bls.n	80096d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e006      	b.n	80096e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096d8:	4b05      	ldr	r3, [pc, #20]	@ (80096f0 <RCCEx_PLL2_Config+0x15c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0f0      	beq.n	80096c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	58024400 	.word	0x58024400
 80096f4:	ffff0007 	.word	0xffff0007

080096f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009706:	4b53      	ldr	r3, [pc, #332]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 8009708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970a:	f003 0303 	and.w	r3, r3, #3
 800970e:	2b03      	cmp	r3, #3
 8009710:	d101      	bne.n	8009716 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e099      	b.n	800984a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009716:	4b4f      	ldr	r3, [pc, #316]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a4e      	ldr	r2, [pc, #312]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 800971c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009722:	f7f9 ff8f 	bl	8003644 <HAL_GetTick>
 8009726:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009728:	e008      	b.n	800973c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800972a:	f7f9 ff8b 	bl	8003644 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	d901      	bls.n	800973c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e086      	b.n	800984a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800973c:	4b45      	ldr	r3, [pc, #276]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1f0      	bne.n	800972a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009748:	4b42      	ldr	r3, [pc, #264]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 800974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	051b      	lsls	r3, r3, #20
 8009756:	493f      	ldr	r1, [pc, #252]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 8009758:	4313      	orrs	r3, r2
 800975a:	628b      	str	r3, [r1, #40]	@ 0x28
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	3b01      	subs	r3, #1
 8009762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	3b01      	subs	r3, #1
 800976c:	025b      	lsls	r3, r3, #9
 800976e:	b29b      	uxth	r3, r3
 8009770:	431a      	orrs	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	3b01      	subs	r3, #1
 8009778:	041b      	lsls	r3, r3, #16
 800977a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	3b01      	subs	r3, #1
 8009786:	061b      	lsls	r3, r3, #24
 8009788:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800978c:	4931      	ldr	r1, [pc, #196]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 800978e:	4313      	orrs	r3, r2
 8009790:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009792:	4b30      	ldr	r3, [pc, #192]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 8009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009796:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	492d      	ldr	r1, [pc, #180]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	4928      	ldr	r1, [pc, #160]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80097b6:	4b27      	ldr	r3, [pc, #156]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ba:	4a26      	ldr	r2, [pc, #152]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097c2:	4b24      	ldr	r3, [pc, #144]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097c6:	4b24      	ldr	r3, [pc, #144]	@ (8009858 <RCCEx_PLL3_Config+0x160>)
 80097c8:	4013      	ands	r3, r2
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	69d2      	ldr	r2, [r2, #28]
 80097ce:	00d2      	lsls	r2, r2, #3
 80097d0:	4920      	ldr	r1, [pc, #128]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	4a1e      	ldr	r2, [pc, #120]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d106      	bne.n	80097f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ec:	4a19      	ldr	r2, [pc, #100]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80097f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097f4:	e00f      	b.n	8009816 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d106      	bne.n	800980a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097fc:	4b15      	ldr	r3, [pc, #84]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 80097fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009800:	4a14      	ldr	r2, [pc, #80]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 8009802:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009806:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009808:	e005      	b.n	8009816 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800980a:	4b12      	ldr	r3, [pc, #72]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 800980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980e:	4a11      	ldr	r2, [pc, #68]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 8009810:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009814:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009816:	4b0f      	ldr	r3, [pc, #60]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a0e      	ldr	r2, [pc, #56]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 800981c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009822:	f7f9 ff0f 	bl	8003644 <HAL_GetTick>
 8009826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009828:	e008      	b.n	800983c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800982a:	f7f9 ff0b 	bl	8003644 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	2b02      	cmp	r3, #2
 8009836:	d901      	bls.n	800983c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e006      	b.n	800984a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <RCCEx_PLL3_Config+0x15c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0f0      	beq.n	800982a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	58024400 	.word	0x58024400
 8009858:	ffff0007 	.word	0xffff0007

0800985c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08a      	sub	sp, #40	@ 0x28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e075      	b.n	800995a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d105      	bne.n	8009886 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7f8 fdf9 	bl	8002478 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2204      	movs	r2, #4
 800988a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f868 	bl	8009964 <HAL_SD_InitCard>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e05d      	b.n	800995a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800989e:	f107 0308 	add.w	r3, r7, #8
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fa9d 	bl	8009de4 <HAL_SD_GetCardStatus>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e052      	b.n	800995a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80098b4:	7e3b      	ldrb	r3, [r7, #24]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80098ba:	7e7b      	ldrb	r3, [r7, #25]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d10a      	bne.n	80098de <HAL_SD_Init+0x82>
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <HAL_SD_Init+0x78>
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098da:	659a      	str	r2, [r3, #88]	@ 0x58
 80098dc:	e00b      	b.n	80098f6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d104      	bne.n	80098f0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80098ee:	e002      	b.n	80098f6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fb2f 	bl	8009f60 <HAL_SD_ConfigWideBusOperation>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e026      	b.n	800995a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800990c:	f7f9 fe9a 	bl	8003644 <HAL_GetTick>
 8009910:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009912:	e011      	b.n	8009938 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009914:	f7f9 fe96 	bl	8003644 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d109      	bne.n	8009938 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800992a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e010      	b.n	800995a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fc23 	bl	800a184 <HAL_SD_GetCardState>
 800993e:	4603      	mov	r3, r0
 8009940:	2b04      	cmp	r3, #4
 8009942:	d1e7      	bne.n	8009914 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3728      	adds	r7, #40	@ 0x28
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b08d      	sub	sp, #52	@ 0x34
 8009968:	af02      	add	r7, sp, #8
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009978:	2300      	movs	r3, #0
 800997a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800997c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009980:	f04f 0100 	mov.w	r1, #0
 8009984:	f7fe fd24 	bl	80083d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009988:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d109      	bne.n	80099a4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800999e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e070      	b.n	8009a86 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80099a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	4a39      	ldr	r2, [pc, #228]	@ (8009a90 <HAL_SD_InitCard+0x12c>)
 80099aa:	fba2 2303 	umull	r2, r3, r2, r3
 80099ae:	091b      	lsrs	r3, r3, #4
 80099b0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681c      	ldr	r4, [r3, #0]
 80099b6:	466a      	mov	r2, sp
 80099b8:	f107 0318 	add.w	r3, r7, #24
 80099bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80099c4:	f107 030c 	add.w	r3, r7, #12
 80099c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099ca:	4620      	mov	r0, r4
 80099cc:	f004 ff0a 	bl	800e7e4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f004 ff3c 	bl	800e852 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d007      	beq.n	8009a02 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80099f2:	4a28      	ldr	r2, [pc, #160]	@ (8009a94 <HAL_SD_InitCard+0x130>)
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fa:	3301      	adds	r3, #1
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f9 fe2d 	bl	800365c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fcac 	bl	800a360 <SD_PowerON>
 8009a08:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	431a      	orrs	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e02e      	b.n	8009a86 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fbcb 	bl	800a1c4 <SD_InitCard>
 8009a2e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00b      	beq.n	8009a4e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	431a      	orrs	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e01b      	b.n	8009a86 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a56:	4618      	mov	r0, r3
 8009a58:	f004 ff90 	bl	800e97c <SDMMC_CmdBlockLength>
 8009a5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00f      	beq.n	8009a84 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a0b      	ldr	r2, [pc, #44]	@ (8009a98 <HAL_SD_InitCard+0x134>)
 8009a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	431a      	orrs	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	372c      	adds	r7, #44	@ 0x2c
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd90      	pop	{r4, r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	014f8b59 	.word	0x014f8b59
 8009a94:	00012110 	.word	0x00012110
 8009a98:	1fe00fff 	.word	0x1fe00fff

08009a9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aaa:	0f9b      	lsrs	r3, r3, #30
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ab6:	0e9b      	lsrs	r3, r3, #26
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	f003 030f 	and.w	r3, r3, #15
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ac8:	0e1b      	lsrs	r3, r3, #24
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ada:	0c1b      	lsrs	r3, r3, #16
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ae6:	0a1b      	lsrs	r3, r3, #8
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009afc:	0d1b      	lsrs	r3, r3, #20
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b08:	0c1b      	lsrs	r3, r3, #16
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	f003 030f 	and.w	r3, r3, #15
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b1a:	0bdb      	lsrs	r3, r3, #15
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b2c:	0b9b      	lsrs	r3, r3, #14
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b3e:	0b5b      	lsrs	r3, r3, #13
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b50:	0b1b      	lsrs	r3, r3, #12
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2200      	movs	r2, #0
 8009b62:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d163      	bne.n	8009c34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b70:	009a      	lsls	r2, r3, #2
 8009b72:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009b76:	4013      	ands	r3, r2
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009b7c:	0f92      	lsrs	r2, r2, #30
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b88:	0edb      	lsrs	r3, r3, #27
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b9a:	0e1b      	lsrs	r3, r3, #24
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bac:	0d5b      	lsrs	r3, r3, #21
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f003 0307 	and.w	r3, r3, #7
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bbe:	0c9b      	lsrs	r3, r3, #18
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 0307 	and.w	r3, r3, #7
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bd0:	0bdb      	lsrs	r3, r3, #15
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 0307 	and.w	r3, r3, #7
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	7e1b      	ldrb	r3, [r3, #24]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	3302      	adds	r3, #2
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009bfe:	fb03 f202 	mul.w	r2, r3, r2
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	7a1b      	ldrb	r3, [r3, #8]
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	2201      	movs	r2, #1
 8009c12:	409a      	lsls	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009c20:	0a52      	lsrs	r2, r2, #9
 8009c22:	fb03 f202 	mul.w	r2, r3, r2
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c30:	655a      	str	r2, [r3, #84]	@ 0x54
 8009c32:	e031      	b.n	8009c98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d11d      	bne.n	8009c78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c40:	041b      	lsls	r3, r3, #16
 8009c42:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c4a:	0c1b      	lsrs	r3, r3, #16
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	3301      	adds	r3, #1
 8009c58:	029a      	lsls	r2, r3, #10
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	655a      	str	r2, [r3, #84]	@ 0x54
 8009c76:	e00f      	b.n	8009c98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a58      	ldr	r2, [pc, #352]	@ (8009de0 <HAL_SD_GetCardCSD+0x344>)
 8009c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e09d      	b.n	8009dd4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c9c:	0b9b      	lsrs	r3, r3, #14
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cae:	09db      	lsrs	r3, r3, #7
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cd0:	0fdb      	lsrs	r3, r3, #31
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cdc:	0f5b      	lsrs	r3, r3, #29
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cee:	0e9b      	lsrs	r3, r3, #26
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d00:	0d9b      	lsrs	r3, r3, #22
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 030f 	and.w	r3, r3, #15
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d12:	0d5b      	lsrs	r3, r3, #21
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d2e:	0c1b      	lsrs	r3, r3, #16
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d42:	0bdb      	lsrs	r3, r3, #15
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d56:	0b9b      	lsrs	r3, r3, #14
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d6a:	0b5b      	lsrs	r3, r3, #13
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d7e:	0b1b      	lsrs	r3, r3, #12
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d92:	0a9b      	lsrs	r3, r3, #10
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009da6:	0a1b      	lsrs	r3, r3, #8
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	1fe00fff 	.word	0x1fe00fff

08009de4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b094      	sub	sp, #80	@ 0x50
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d101      	bne.n	8009e04 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e0a7      	b.n	8009f54 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fb36 	bl	800a47c <SD_SendSDStatus>
 8009e10:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d011      	beq.n	8009e3c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8009f5c <HAL_SD_GetCardStatus+0x178>)
 8009e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009e3a:	e070      	b.n	8009f1e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	099b      	lsrs	r3, r3, #6
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	095b      	lsrs	r3, r3, #5
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	0a1b      	lsrs	r3, r3, #8
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	0e1b      	lsrs	r3, r3, #24
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	061a      	lsls	r2, r3, #24
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009e82:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009e8c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	0e1b      	lsrs	r3, r3, #24
 8009e92:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	0a1b      	lsrs	r3, r3, #8
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	0d1b      	lsrs	r3, r3, #20
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	f003 030f 	and.w	r3, r3, #15
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	0a9b      	lsrs	r3, r3, #10
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	0a1b      	lsrs	r3, r3, #8
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	f003 0303 	and.w	r3, r3, #3
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	091b      	lsrs	r3, r3, #4
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 030f 	and.w	r3, r3, #15
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	0e1b      	lsrs	r3, r3, #24
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f26:	4618      	mov	r0, r3
 8009f28:	f004 fd28 	bl	800e97c <SDMMC_CmdBlockLength>
 8009f2c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00d      	beq.n	8009f50 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a08      	ldr	r2, [pc, #32]	@ (8009f5c <HAL_SD_GetCardStatus+0x178>)
 8009f3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f40:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009f50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3750      	adds	r7, #80	@ 0x50
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	1fe00fff 	.word	0x1fe00fff

08009f60 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b08d      	sub	sp, #52	@ 0x34
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2203      	movs	r2, #3
 8009f74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d02e      	beq.n	8009fde <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f86:	d106      	bne.n	8009f96 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	635a      	str	r2, [r3, #52]	@ 0x34
 8009f94:	e029      	b.n	8009fea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f9c:	d10a      	bne.n	8009fb4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fb64 	bl	800a66c <SD_WideBus_Enable>
 8009fa4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8009fb2:	e01a      	b.n	8009fea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10a      	bne.n	8009fd0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fba1 	bl	800a702 <SD_WideBus_Disable>
 8009fc0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8009fce:	e00c      	b.n	8009fea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	635a      	str	r2, [r3, #52]	@ 0x34
 8009fdc:	e005      	b.n	8009fea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d007      	beq.n	800a002 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a5f      	ldr	r2, [pc, #380]	@ (800a174 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a000:	e096      	b.n	800a130 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a002:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a006:	f04f 0100 	mov.w	r1, #0
 800a00a:	f7fe f9e1 	bl	80083d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a00e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 8083 	beq.w	800a11e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695a      	ldr	r2, [r3, #20]
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4950      	ldr	r1, [pc, #320]	@ (800a178 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a036:	fba1 1303 	umull	r1, r3, r1, r3
 800a03a:	0e1b      	lsrs	r3, r3, #24
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d303      	bcc.n	800a048 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	e05a      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a04c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a050:	d103      	bne.n	800a05a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	695b      	ldr	r3, [r3, #20]
 800a056:	61bb      	str	r3, [r7, #24]
 800a058:	e051      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a062:	d126      	bne.n	800a0b2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10e      	bne.n	800a08a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4a43      	ldr	r2, [pc, #268]	@ (800a17c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d906      	bls.n	800a082 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	4a40      	ldr	r2, [pc, #256]	@ (800a178 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a078:	fba2 2303 	umull	r2, r3, r2, r3
 800a07c:	0e5b      	lsrs	r3, r3, #25
 800a07e:	61bb      	str	r3, [r7, #24]
 800a080:	e03d      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	61bb      	str	r3, [r7, #24]
 800a088:	e039      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	fbb2 f3f3 	udiv	r3, r2, r3
 800a096:	4a39      	ldr	r2, [pc, #228]	@ (800a17c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d906      	bls.n	800a0aa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	4a36      	ldr	r2, [pc, #216]	@ (800a178 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a4:	0e5b      	lsrs	r3, r3, #25
 800a0a6:	61bb      	str	r3, [r7, #24]
 800a0a8:	e029      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	61bb      	str	r3, [r7, #24]
 800a0b0:	e025      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10e      	bne.n	800a0d8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	4a30      	ldr	r2, [pc, #192]	@ (800a180 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d906      	bls.n	800a0d0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	4a2c      	ldr	r2, [pc, #176]	@ (800a178 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ca:	0e1b      	lsrs	r3, r3, #24
 800a0cc:	61bb      	str	r3, [r7, #24]
 800a0ce:	e016      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	61bb      	str	r3, [r7, #24]
 800a0d6:	e012      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	69fa      	ldr	r2, [r7, #28]
 800a0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e4:	4a26      	ldr	r2, [pc, #152]	@ (800a180 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d906      	bls.n	800a0f8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	4a22      	ldr	r2, [pc, #136]	@ (800a178 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f2:	0e1b      	lsrs	r3, r3, #24
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	e002      	b.n	800a0fe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681c      	ldr	r4, [r3, #0]
 800a102:	466a      	mov	r2, sp
 800a104:	f107 0314 	add.w	r3, r7, #20
 800a108:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a10c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a110:	f107 0308 	add.w	r3, r7, #8
 800a114:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a116:	4620      	mov	r0, r4
 800a118:	f004 fb64 	bl	800e7e4 <SDMMC_Init>
 800a11c:	e008      	b.n	800a130 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a122:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a138:	4618      	mov	r0, r3
 800a13a:	f004 fc1f 	bl	800e97c <SDMMC_CmdBlockLength>
 800a13e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00c      	beq.n	800a160 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a0a      	ldr	r2, [pc, #40]	@ (800a174 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a14c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	431a      	orrs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	372c      	adds	r7, #44	@ 0x2c
 800a170:	46bd      	mov	sp, r7
 800a172:	bd90      	pop	{r4, r7, pc}
 800a174:	1fe00fff 	.word	0x1fe00fff
 800a178:	55e63b89 	.word	0x55e63b89
 800a17c:	02faf080 	.word	0x02faf080
 800a180:	017d7840 	.word	0x017d7840

0800a184 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa40 	bl	800a61c <SD_SendStatus>
 800a19c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	0a5b      	lsrs	r3, r3, #9
 800a1b4:	f003 030f 	and.w	r3, r3, #15
 800a1b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a1ba:	693b      	ldr	r3, [r7, #16]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b090      	sub	sp, #64	@ 0x40
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a1d0:	f7f9 fa38 	bl	8003644 <HAL_GetTick>
 800a1d4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f004 fb4a 	bl	800e874 <SDMMC_GetPowerState>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d102      	bne.n	800a1ec <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a1ea:	e0b5      	b.n	800a358 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d02e      	beq.n	800a252 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f004 fccb 	bl	800eb94 <SDMMC_CmdSendCID>
 800a1fe:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <SD_InitCard+0x46>
    {
      return errorstate;
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	e0a6      	b.n	800a358 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f004 fb74 	bl	800e8fe <SDMMC_GetResponse>
 800a216:	4602      	mov	r2, r0
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2104      	movs	r1, #4
 800a222:	4618      	mov	r0, r3
 800a224:	f004 fb6b 	bl	800e8fe <SDMMC_GetResponse>
 800a228:	4602      	mov	r2, r0
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2108      	movs	r1, #8
 800a234:	4618      	mov	r0, r3
 800a236:	f004 fb62 	bl	800e8fe <SDMMC_GetResponse>
 800a23a:	4602      	mov	r2, r0
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	210c      	movs	r1, #12
 800a246:	4618      	mov	r0, r3
 800a248:	f004 fb59 	bl	800e8fe <SDMMC_GetResponse>
 800a24c:	4602      	mov	r2, r0
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a256:	2b03      	cmp	r3, #3
 800a258:	d01d      	beq.n	800a296 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a25a:	e019      	b.n	800a290 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f107 020a 	add.w	r2, r7, #10
 800a264:	4611      	mov	r1, r2
 800a266:	4618      	mov	r0, r3
 800a268:	f004 fcd3 	bl	800ec12 <SDMMC_CmdSetRelAdd>
 800a26c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a276:	e06f      	b.n	800a358 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a278:	f7f9 f9e4 	bl	8003644 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a286:	4293      	cmp	r3, r2
 800a288:	d902      	bls.n	800a290 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a28a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a28e:	e063      	b.n	800a358 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a290:	897b      	ldrh	r3, [r7, #10]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0e2      	beq.n	800a25c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d036      	beq.n	800a30c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a29e:	897b      	ldrh	r3, [r7, #10]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ae:	041b      	lsls	r3, r3, #16
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f004 fc8d 	bl	800ebd2 <SDMMC_CmdSendCSD>
 800a2b8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <SD_InitCard+0x100>
    {
      return errorstate;
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c2:	e049      	b.n	800a358 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f004 fb17 	bl	800e8fe <SDMMC_GetResponse>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2104      	movs	r1, #4
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f004 fb0e 	bl	800e8fe <SDMMC_GetResponse>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2108      	movs	r1, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f004 fb05 	bl	800e8fe <SDMMC_GetResponse>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	210c      	movs	r1, #12
 800a300:	4618      	mov	r0, r3
 800a302:	f004 fafc 	bl	800e8fe <SDMMC_GetResponse>
 800a306:	4602      	mov	r2, r0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2104      	movs	r1, #4
 800a312:	4618      	mov	r0, r3
 800a314:	f004 faf3 	bl	800e8fe <SDMMC_GetResponse>
 800a318:	4603      	mov	r3, r0
 800a31a:	0d1a      	lsrs	r2, r3, #20
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a320:	f107 030c 	add.w	r3, r7, #12
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff fbb8 	bl	8009a9c <HAL_SD_GetCardCSD>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a332:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a336:	e00f      	b.n	800a358 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a340:	041b      	lsls	r3, r3, #16
 800a342:	4619      	mov	r1, r3
 800a344:	4610      	mov	r0, r2
 800a346:	f004 fb3c 	bl	800e9c2 <SDMMC_CmdSelDesel>
 800a34a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <SD_InitCard+0x192>
  {
    return errorstate;
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	e000      	b.n	800a358 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3740      	adds	r7, #64	@ 0x40
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a370:	2300      	movs	r3, #0
 800a372:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4618      	mov	r0, r3
 800a37a:	f004 fb45 	bl	800ea08 <SDMMC_CmdGoIdleState>
 800a37e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	e072      	b.n	800a470 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4618      	mov	r0, r3
 800a390:	f004 fb58 	bl	800ea44 <SDMMC_CmdOperCond>
 800a394:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a39c:	d10d      	bne.n	800a3ba <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f004 fb2d 	bl	800ea08 <SDMMC_CmdGoIdleState>
 800a3ae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <SD_PowerON+0x60>
    {
      return errorstate;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	e05a      	b.n	800a470 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d137      	bne.n	800a438 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f004 fb58 	bl	800ea84 <SDMMC_CmdAppCommand>
 800a3d4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02d      	beq.n	800a438 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a3e0:	e046      	b.n	800a470 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f004 fb4b 	bl	800ea84 <SDMMC_CmdAppCommand>
 800a3ee:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <SD_PowerON+0x9a>
    {
      return errorstate;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	e03a      	b.n	800a470 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	491e      	ldr	r1, [pc, #120]	@ (800a478 <SD_PowerON+0x118>)
 800a400:	4618      	mov	r0, r3
 800a402:	f004 fb62 	bl	800eaca <SDMMC_CmdAppOperCommand>
 800a406:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a40e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a412:	e02d      	b.n	800a470 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2100      	movs	r1, #0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f004 fa6f 	bl	800e8fe <SDMMC_GetResponse>
 800a420:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	0fdb      	lsrs	r3, r3, #31
 800a426:	2b01      	cmp	r3, #1
 800a428:	d101      	bne.n	800a42e <SD_PowerON+0xce>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e000      	b.n	800a430 <SD_PowerON+0xd0>
 800a42e:	2300      	movs	r3, #0
 800a430:	613b      	str	r3, [r7, #16]

    count++;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	3301      	adds	r3, #1
 800a436:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a43e:	4293      	cmp	r3, r2
 800a440:	d802      	bhi.n	800a448 <SD_PowerON+0xe8>
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0cc      	beq.n	800a3e2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a44e:	4293      	cmp	r3, r2
 800a450:	d902      	bls.n	800a458 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a452:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a456:	e00b      	b.n	800a470 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	c1100000 	.word	0xc1100000

0800a47c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b08c      	sub	sp, #48	@ 0x30
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a486:	f7f9 f8dd 	bl	8003644 <HAL_GetTick>
 800a48a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2100      	movs	r1, #0
 800a496:	4618      	mov	r0, r3
 800a498:	f004 fa31 	bl	800e8fe <SDMMC_GetResponse>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4a6:	d102      	bne.n	800a4ae <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a4a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a4ac:	e0b0      	b.n	800a610 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2140      	movs	r1, #64	@ 0x40
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f004 fa61 	bl	800e97c <SDMMC_CmdBlockLength>
 800a4ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d005      	beq.n	800a4ce <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	e0a0      	b.n	800a610 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d6:	041b      	lsls	r3, r3, #16
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f004 fad2 	bl	800ea84 <SDMMC_CmdAppCommand>
 800a4e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d005      	beq.n	800a4f4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	e08d      	b.n	800a610 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a4fa:	2340      	movs	r3, #64	@ 0x40
 800a4fc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a4fe:	2360      	movs	r3, #96	@ 0x60
 800a500:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a502:	2302      	movs	r3, #2
 800a504:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a506:	2300      	movs	r3, #0
 800a508:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f107 0208 	add.w	r2, r7, #8
 800a516:	4611      	mov	r1, r2
 800a518:	4618      	mov	r0, r3
 800a51a:	f004 fa03 	bl	800e924 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f004 fbba 	bl	800ec9c <SDMMC_CmdStatusRegister>
 800a528:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d02b      	beq.n	800a588 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	e069      	b.n	800a610 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a542:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d013      	beq.n	800a572 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a54a:	2300      	movs	r3, #0
 800a54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a54e:	e00d      	b.n	800a56c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4618      	mov	r0, r3
 800a556:	f004 f96f 	bl	800e838 <SDMMC_ReadFIFO>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	601a      	str	r2, [r3, #0]
        pData++;
 800a560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a562:	3304      	adds	r3, #4
 800a564:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800a566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a568:	3301      	adds	r3, #1
 800a56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	2b07      	cmp	r3, #7
 800a570:	d9ee      	bls.n	800a550 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a572:	f7f9 f867 	bl	8003644 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a580:	d102      	bne.n	800a588 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a582:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a586:	e043      	b.n	800a610 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a58e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0d2      	beq.n	800a53c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a5a4:	2308      	movs	r3, #8
 800a5a6:	e033      	b.n	800a610 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e02a      	b.n	800a610 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c0:	f003 0320 	and.w	r3, r3, #32
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d017      	beq.n	800a5f8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	e021      	b.n	800a610 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f004 f931 	bl	800e838 <SDMMC_ReadFIFO>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	601a      	str	r2, [r3, #0]
    pData++;
 800a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5de:	3304      	adds	r3, #4
 800a5e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a5e2:	f7f9 f82f 	bl	8003644 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f0:	d102      	bne.n	800a5f8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a5f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5f6:	e00b      	b.n	800a610 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1e2      	bne.n	800a5cc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a03      	ldr	r2, [pc, #12]	@ (800a618 <SD_SendSDStatus+0x19c>)
 800a60c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3730      	adds	r7, #48	@ 0x30
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	18000f3a 	.word	0x18000f3a

0800a61c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d102      	bne.n	800a632 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a62c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a630:	e018      	b.n	800a664 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a63a:	041b      	lsls	r3, r3, #16
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f004 fb09 	bl	800ec56 <SDMMC_CmdSendStatus>
 800a644:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	e009      	b.n	800a664 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f004 f951 	bl	800e8fe <SDMMC_GetResponse>
 800a65c:	4602      	mov	r2, r0
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	2300      	movs	r3, #0
 800a67a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2100      	movs	r1, #0
 800a682:	4618      	mov	r0, r3
 800a684:	f004 f93b 	bl	800e8fe <SDMMC_GetResponse>
 800a688:	4603      	mov	r3, r0
 800a68a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a68e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a692:	d102      	bne.n	800a69a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a694:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a698:	e02f      	b.n	800a6fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a69a:	f107 030c 	add.w	r3, r7, #12
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f879 	bl	800a798 <SD_FindSCR>
 800a6a6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	e023      	b.n	800a6fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01c      	beq.n	800a6f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6c4:	041b      	lsls	r3, r3, #16
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f004 f9db 	bl	800ea84 <SDMMC_CmdAppCommand>
 800a6ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	e00f      	b.n	800a6fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2102      	movs	r1, #2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f004 fa12 	bl	800eb0a <SDMMC_CmdBusWidth>
 800a6e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	e003      	b.n	800a6fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e001      	b.n	800a6fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a70a:	2300      	movs	r3, #0
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2100      	movs	r1, #0
 800a718:	4618      	mov	r0, r3
 800a71a:	f004 f8f0 	bl	800e8fe <SDMMC_GetResponse>
 800a71e:	4603      	mov	r3, r0
 800a720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a724:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a728:	d102      	bne.n	800a730 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a72a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a72e:	e02f      	b.n	800a790 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a730:	f107 030c 	add.w	r3, r7, #12
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f82e 	bl	800a798 <SD_FindSCR>
 800a73c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	e023      	b.n	800a790 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d01c      	beq.n	800a78c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a75a:	041b      	lsls	r3, r3, #16
 800a75c:	4619      	mov	r1, r3
 800a75e:	4610      	mov	r0, r2
 800a760:	f004 f990 	bl	800ea84 <SDMMC_CmdAppCommand>
 800a764:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	e00f      	b.n	800a790 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2100      	movs	r1, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f004 f9c7 	bl	800eb0a <SDMMC_CmdBusWidth>
 800a77c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	e003      	b.n	800a790 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a788:	2300      	movs	r3, #0
 800a78a:	e001      	b.n	800a790 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a78c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08e      	sub	sp, #56	@ 0x38
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a7a2:	f7f8 ff4f 	bl	8003644 <HAL_GetTick>
 800a7a6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60bb      	str	r3, [r7, #8]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2108      	movs	r1, #8
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f004 f8dc 	bl	800e97c <SDMMC_CmdBlockLength>
 800a7c4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ce:	e0ad      	b.n	800a92c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7d8:	041b      	lsls	r3, r3, #16
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f004 f951 	bl	800ea84 <SDMMC_CmdAppCommand>
 800a7e2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <SD_FindSCR+0x56>
  {
    return errorstate;
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	e09e      	b.n	800a92c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a7f4:	2308      	movs	r3, #8
 800a7f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a7f8:	2330      	movs	r3, #48	@ 0x30
 800a7fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a800:	2300      	movs	r3, #0
 800a802:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a804:	2301      	movs	r3, #1
 800a806:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f107 0210 	add.w	r2, r7, #16
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f004 f886 	bl	800e924 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f004 f997 	bl	800eb50 <SDMMC_CmdSendSCR>
 800a822:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	2b00      	cmp	r3, #0
 800a828:	d027      	beq.n	800a87a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82c:	e07e      	b.n	800a92c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d113      	bne.n	800a864 <SD_FindSCR+0xcc>
 800a83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d110      	bne.n	800a864 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4618      	mov	r0, r3
 800a848:	f003 fff6 	bl	800e838 <SDMMC_ReadFIFO>
 800a84c:	4603      	mov	r3, r0
 800a84e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4618      	mov	r0, r3
 800a856:	f003 ffef 	bl	800e838 <SDMMC_ReadFIFO>
 800a85a:	4603      	mov	r3, r0
 800a85c:	60fb      	str	r3, [r7, #12]
      index++;
 800a85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a860:	3301      	adds	r3, #1
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a864:	f7f8 feee 	bl	8003644 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d102      	bne.n	800a87a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a874:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a878:	e058      	b.n	800a92c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a880:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a884:	4013      	ands	r3, r2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0d1      	beq.n	800a82e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a890:	f003 0308 	and.w	r3, r3, #8
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2208      	movs	r2, #8
 800a89e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	e043      	b.n	800a92c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8aa:	f003 0302 	and.w	r3, r3, #2
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	e036      	b.n	800a92c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c4:	f003 0320 	and.w	r3, r3, #32
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a8d4:	2320      	movs	r3, #32
 800a8d6:	e029      	b.n	800a92c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a15      	ldr	r2, [pc, #84]	@ (800a934 <SD_FindSCR+0x19c>)
 800a8de:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	061a      	lsls	r2, r3, #24
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	021b      	lsls	r3, r3, #8
 800a8e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a8ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	0a1b      	lsrs	r3, r3, #8
 800a8f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a8f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	0e1b      	lsrs	r3, r3, #24
 800a8fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a900:	601a      	str	r2, [r3, #0]
    scr++;
 800a902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a904:	3304      	adds	r3, #4
 800a906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	061a      	lsls	r2, r3, #24
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	021b      	lsls	r3, r3, #8
 800a910:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a914:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	0a1b      	lsrs	r3, r3, #8
 800a91a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a91e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	0e1b      	lsrs	r3, r3, #24
 800a924:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a928:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3738      	adds	r7, #56	@ 0x38
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	18000f3a 	.word	0x18000f3a

0800a938 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e10f      	b.n	800ab6a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a87      	ldr	r2, [pc, #540]	@ (800ab74 <HAL_SPI_Init+0x23c>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00f      	beq.n	800a97a <HAL_SPI_Init+0x42>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a86      	ldr	r2, [pc, #536]	@ (800ab78 <HAL_SPI_Init+0x240>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d00a      	beq.n	800a97a <HAL_SPI_Init+0x42>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a84      	ldr	r2, [pc, #528]	@ (800ab7c <HAL_SPI_Init+0x244>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d005      	beq.n	800a97a <HAL_SPI_Init+0x42>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	2b0f      	cmp	r3, #15
 800a974:	d901      	bls.n	800a97a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e0f7      	b.n	800ab6a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f900 	bl	800ab80 <SPI_GetPacketSize>
 800a980:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a7b      	ldr	r2, [pc, #492]	@ (800ab74 <HAL_SPI_Init+0x23c>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00c      	beq.n	800a9a6 <HAL_SPI_Init+0x6e>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a79      	ldr	r2, [pc, #484]	@ (800ab78 <HAL_SPI_Init+0x240>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d007      	beq.n	800a9a6 <HAL_SPI_Init+0x6e>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a78      	ldr	r2, [pc, #480]	@ (800ab7c <HAL_SPI_Init+0x244>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d002      	beq.n	800a9a6 <HAL_SPI_Init+0x6e>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b08      	cmp	r3, #8
 800a9a4:	d811      	bhi.n	800a9ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9aa:	4a72      	ldr	r2, [pc, #456]	@ (800ab74 <HAL_SPI_Init+0x23c>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d009      	beq.n	800a9c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a70      	ldr	r2, [pc, #448]	@ (800ab78 <HAL_SPI_Init+0x240>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d004      	beq.n	800a9c4 <HAL_SPI_Init+0x8c>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a6f      	ldr	r2, [pc, #444]	@ (800ab7c <HAL_SPI_Init+0x244>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d104      	bne.n	800a9ce <HAL_SPI_Init+0x96>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b10      	cmp	r3, #16
 800a9c8:	d901      	bls.n	800a9ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e0cd      	b.n	800ab6a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7f7 fdd6 	bl	8002594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0201 	bic.w	r2, r2, #1
 800a9fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800aa0a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa14:	d119      	bne.n	800aa4a <HAL_SPI_Init+0x112>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa1e:	d103      	bne.n	800aa28 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d008      	beq.n	800aa3a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10c      	bne.n	800aa4a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa38:	d107      	bne.n	800aa4a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00f      	beq.n	800aa76 <HAL_SPI_Init+0x13e>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	2b06      	cmp	r3, #6
 800aa5c:	d90b      	bls.n	800aa76 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	430a      	orrs	r2, r1
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	e007      	b.n	800aa86 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69da      	ldr	r2, [r3, #28]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	431a      	orrs	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa98:	ea42 0103 	orr.w	r1, r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68da      	ldr	r2, [r3, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	430a      	orrs	r2, r1
 800aaa6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab0:	431a      	orrs	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	431a      	orrs	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	431a      	orrs	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	431a      	orrs	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	431a      	orrs	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aada:	431a      	orrs	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	431a      	orrs	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aae6:	ea42 0103 	orr.w	r1, r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d113      	bne.n	800ab26 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f022 0201 	bic.w	r2, r2, #1
 800ab34:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	40013000 	.word	0x40013000
 800ab78:	40003800 	.word	0x40003800
 800ab7c:	40003c00 	.word	0x40003c00

0800ab80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab8c:	095b      	lsrs	r3, r3, #5
 800ab8e:	3301      	adds	r3, #1
 800ab90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	3301      	adds	r3, #1
 800ab98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	3307      	adds	r3, #7
 800ab9e:	08db      	lsrs	r3, r3, #3
 800aba0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e049      	b.n	800ac5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d106      	bne.n	800abe2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7f7 fe53 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2202      	movs	r2, #2
 800abe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	4610      	mov	r0, r2
 800abf6:	f000 fa99 	bl	800b12c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e049      	b.n	800ad0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d106      	bne.n	800ac90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7f7 fe1e 	bl	80028cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f000 fa42 	bl	800b12c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d101      	bne.n	800ad32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e0ff      	b.n	800af32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b14      	cmp	r3, #20
 800ad3e:	f200 80f0 	bhi.w	800af22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad42:	a201      	add	r2, pc, #4	@ (adr r2, 800ad48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad9d 	.word	0x0800ad9d
 800ad4c:	0800af23 	.word	0x0800af23
 800ad50:	0800af23 	.word	0x0800af23
 800ad54:	0800af23 	.word	0x0800af23
 800ad58:	0800addd 	.word	0x0800addd
 800ad5c:	0800af23 	.word	0x0800af23
 800ad60:	0800af23 	.word	0x0800af23
 800ad64:	0800af23 	.word	0x0800af23
 800ad68:	0800ae1f 	.word	0x0800ae1f
 800ad6c:	0800af23 	.word	0x0800af23
 800ad70:	0800af23 	.word	0x0800af23
 800ad74:	0800af23 	.word	0x0800af23
 800ad78:	0800ae5f 	.word	0x0800ae5f
 800ad7c:	0800af23 	.word	0x0800af23
 800ad80:	0800af23 	.word	0x0800af23
 800ad84:	0800af23 	.word	0x0800af23
 800ad88:	0800aea1 	.word	0x0800aea1
 800ad8c:	0800af23 	.word	0x0800af23
 800ad90:	0800af23 	.word	0x0800af23
 800ad94:	0800af23 	.word	0x0800af23
 800ad98:	0800aee1 	.word	0x0800aee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 fa74 	bl	800b290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	699a      	ldr	r2, [r3, #24]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f042 0208 	orr.w	r2, r2, #8
 800adb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	699a      	ldr	r2, [r3, #24]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 0204 	bic.w	r2, r2, #4
 800adc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6999      	ldr	r1, [r3, #24]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	691a      	ldr	r2, [r3, #16]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	619a      	str	r2, [r3, #24]
      break;
 800adda:	e0a5      	b.n	800af28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68b9      	ldr	r1, [r7, #8]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 fae4 	bl	800b3b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	699a      	ldr	r2, [r3, #24]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6999      	ldr	r1, [r3, #24]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	021a      	lsls	r2, r3, #8
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	619a      	str	r2, [r3, #24]
      break;
 800ae1c:	e084      	b.n	800af28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fb4d 	bl	800b4c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69da      	ldr	r2, [r3, #28]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f042 0208 	orr.w	r2, r2, #8
 800ae38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69da      	ldr	r2, [r3, #28]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0204 	bic.w	r2, r2, #4
 800ae48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69d9      	ldr	r1, [r3, #28]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	691a      	ldr	r2, [r3, #16]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	61da      	str	r2, [r3, #28]
      break;
 800ae5c:	e064      	b.n	800af28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 fbb5 	bl	800b5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69da      	ldr	r2, [r3, #28]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69da      	ldr	r2, [r3, #28]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69d9      	ldr	r1, [r3, #28]
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	021a      	lsls	r2, r3, #8
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	61da      	str	r2, [r3, #28]
      break;
 800ae9e:	e043      	b.n	800af28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fbfe 	bl	800b6a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f042 0208 	orr.w	r2, r2, #8
 800aeba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f022 0204 	bic.w	r2, r2, #4
 800aeca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	691a      	ldr	r2, [r3, #16]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aede:	e023      	b.n	800af28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68b9      	ldr	r1, [r7, #8]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fc42 	bl	800b770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aefa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	021a      	lsls	r2, r3, #8
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800af20:	e002      	b.n	800af28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	75fb      	strb	r3, [r7, #23]
      break;
 800af26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af30:	7dfb      	ldrb	r3, [r7, #23]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop

0800af3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af50:	2b01      	cmp	r3, #1
 800af52:	d101      	bne.n	800af58 <HAL_TIM_ConfigClockSource+0x1c>
 800af54:	2302      	movs	r3, #2
 800af56:	e0dc      	b.n	800b112 <HAL_TIM_ConfigClockSource+0x1d6>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	4b6a      	ldr	r3, [pc, #424]	@ (800b11c <HAL_TIM_ConfigClockSource+0x1e0>)
 800af74:	4013      	ands	r3, r2
 800af76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a64      	ldr	r2, [pc, #400]	@ (800b120 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	f000 80a9 	beq.w	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800af94:	4a62      	ldr	r2, [pc, #392]	@ (800b120 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af96:	4293      	cmp	r3, r2
 800af98:	f200 80ae 	bhi.w	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800af9c:	4a61      	ldr	r2, [pc, #388]	@ (800b124 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	f000 80a1 	beq.w	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800afa4:	4a5f      	ldr	r2, [pc, #380]	@ (800b124 <HAL_TIM_ConfigClockSource+0x1e8>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	f200 80a6 	bhi.w	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800afac:	4a5e      	ldr	r2, [pc, #376]	@ (800b128 <HAL_TIM_ConfigClockSource+0x1ec>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	f000 8099 	beq.w	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800afb4:	4a5c      	ldr	r2, [pc, #368]	@ (800b128 <HAL_TIM_ConfigClockSource+0x1ec>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	f200 809e 	bhi.w	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800afbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800afc0:	f000 8091 	beq.w	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800afc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800afc8:	f200 8096 	bhi.w	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800afcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afd0:	f000 8089 	beq.w	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800afd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afd8:	f200 808e 	bhi.w	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800afdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afe0:	d03e      	beq.n	800b060 <HAL_TIM_ConfigClockSource+0x124>
 800afe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afe6:	f200 8087 	bhi.w	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800afea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afee:	f000 8086 	beq.w	800b0fe <HAL_TIM_ConfigClockSource+0x1c2>
 800aff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aff6:	d87f      	bhi.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800aff8:	2b70      	cmp	r3, #112	@ 0x70
 800affa:	d01a      	beq.n	800b032 <HAL_TIM_ConfigClockSource+0xf6>
 800affc:	2b70      	cmp	r3, #112	@ 0x70
 800affe:	d87b      	bhi.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b000:	2b60      	cmp	r3, #96	@ 0x60
 800b002:	d050      	beq.n	800b0a6 <HAL_TIM_ConfigClockSource+0x16a>
 800b004:	2b60      	cmp	r3, #96	@ 0x60
 800b006:	d877      	bhi.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b008:	2b50      	cmp	r3, #80	@ 0x50
 800b00a:	d03c      	beq.n	800b086 <HAL_TIM_ConfigClockSource+0x14a>
 800b00c:	2b50      	cmp	r3, #80	@ 0x50
 800b00e:	d873      	bhi.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b010:	2b40      	cmp	r3, #64	@ 0x40
 800b012:	d058      	beq.n	800b0c6 <HAL_TIM_ConfigClockSource+0x18a>
 800b014:	2b40      	cmp	r3, #64	@ 0x40
 800b016:	d86f      	bhi.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b018:	2b30      	cmp	r3, #48	@ 0x30
 800b01a:	d064      	beq.n	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b01c:	2b30      	cmp	r3, #48	@ 0x30
 800b01e:	d86b      	bhi.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b020:	2b20      	cmp	r3, #32
 800b022:	d060      	beq.n	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b024:	2b20      	cmp	r3, #32
 800b026:	d867      	bhi.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d05c      	beq.n	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b02c:	2b10      	cmp	r3, #16
 800b02e:	d05a      	beq.n	800b0e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b030:	e062      	b.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b042:	f000 fc79 	bl	800b938 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	609a      	str	r2, [r3, #8]
      break;
 800b05e:	e04f      	b.n	800b100 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b070:	f000 fc62 	bl	800b938 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	689a      	ldr	r2, [r3, #8]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b082:	609a      	str	r2, [r3, #8]
      break;
 800b084:	e03c      	b.n	800b100 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b092:	461a      	mov	r2, r3
 800b094:	f000 fbd2 	bl	800b83c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2150      	movs	r1, #80	@ 0x50
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 fc2c 	bl	800b8fc <TIM_ITRx_SetConfig>
      break;
 800b0a4:	e02c      	b.n	800b100 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f000 fbf1 	bl	800b89a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2160      	movs	r1, #96	@ 0x60
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 fc1c 	bl	800b8fc <TIM_ITRx_SetConfig>
      break;
 800b0c4:	e01c      	b.n	800b100 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	f000 fbb2 	bl	800b83c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2140      	movs	r1, #64	@ 0x40
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 fc0c 	bl	800b8fc <TIM_ITRx_SetConfig>
      break;
 800b0e4:	e00c      	b.n	800b100 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f000 fc03 	bl	800b8fc <TIM_ITRx_SetConfig>
      break;
 800b0f6:	e003      	b.n	800b100 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b0fc:	e000      	b.n	800b100 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b0fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b110:	7bfb      	ldrb	r3, [r7, #15]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	ffceff88 	.word	0xffceff88
 800b120:	00100040 	.word	0x00100040
 800b124:	00100030 	.word	0x00100030
 800b128:	00100020 	.word	0x00100020

0800b12c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a4a      	ldr	r2, [pc, #296]	@ (800b268 <TIM_Base_SetConfig+0x13c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d013      	beq.n	800b16c <TIM_Base_SetConfig+0x40>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b14a:	d00f      	beq.n	800b16c <TIM_Base_SetConfig+0x40>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a47      	ldr	r2, [pc, #284]	@ (800b26c <TIM_Base_SetConfig+0x140>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d00b      	beq.n	800b16c <TIM_Base_SetConfig+0x40>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a46      	ldr	r2, [pc, #280]	@ (800b270 <TIM_Base_SetConfig+0x144>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d007      	beq.n	800b16c <TIM_Base_SetConfig+0x40>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a45      	ldr	r2, [pc, #276]	@ (800b274 <TIM_Base_SetConfig+0x148>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d003      	beq.n	800b16c <TIM_Base_SetConfig+0x40>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a44      	ldr	r2, [pc, #272]	@ (800b278 <TIM_Base_SetConfig+0x14c>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d108      	bne.n	800b17e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a39      	ldr	r2, [pc, #228]	@ (800b268 <TIM_Base_SetConfig+0x13c>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d027      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b18c:	d023      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a36      	ldr	r2, [pc, #216]	@ (800b26c <TIM_Base_SetConfig+0x140>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d01f      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a35      	ldr	r2, [pc, #212]	@ (800b270 <TIM_Base_SetConfig+0x144>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d01b      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a34      	ldr	r2, [pc, #208]	@ (800b274 <TIM_Base_SetConfig+0x148>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d017      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a33      	ldr	r2, [pc, #204]	@ (800b278 <TIM_Base_SetConfig+0x14c>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d013      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a32      	ldr	r2, [pc, #200]	@ (800b27c <TIM_Base_SetConfig+0x150>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d00f      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a31      	ldr	r2, [pc, #196]	@ (800b280 <TIM_Base_SetConfig+0x154>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d00b      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a30      	ldr	r2, [pc, #192]	@ (800b284 <TIM_Base_SetConfig+0x158>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d007      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a2f      	ldr	r2, [pc, #188]	@ (800b288 <TIM_Base_SetConfig+0x15c>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d003      	beq.n	800b1d6 <TIM_Base_SetConfig+0xaa>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a2e      	ldr	r2, [pc, #184]	@ (800b28c <TIM_Base_SetConfig+0x160>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d108      	bne.n	800b1e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	689a      	ldr	r2, [r3, #8]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a16      	ldr	r2, [pc, #88]	@ (800b268 <TIM_Base_SetConfig+0x13c>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00f      	beq.n	800b234 <TIM_Base_SetConfig+0x108>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a18      	ldr	r2, [pc, #96]	@ (800b278 <TIM_Base_SetConfig+0x14c>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d00b      	beq.n	800b234 <TIM_Base_SetConfig+0x108>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a17      	ldr	r2, [pc, #92]	@ (800b27c <TIM_Base_SetConfig+0x150>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d007      	beq.n	800b234 <TIM_Base_SetConfig+0x108>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a16      	ldr	r2, [pc, #88]	@ (800b280 <TIM_Base_SetConfig+0x154>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d003      	beq.n	800b234 <TIM_Base_SetConfig+0x108>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a15      	ldr	r2, [pc, #84]	@ (800b284 <TIM_Base_SetConfig+0x158>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d103      	bne.n	800b23c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	691a      	ldr	r2, [r3, #16]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d105      	bne.n	800b25a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f023 0201 	bic.w	r2, r3, #1
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	611a      	str	r2, [r3, #16]
  }
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	40010000 	.word	0x40010000
 800b26c:	40000400 	.word	0x40000400
 800b270:	40000800 	.word	0x40000800
 800b274:	40000c00 	.word	0x40000c00
 800b278:	40010400 	.word	0x40010400
 800b27c:	40014000 	.word	0x40014000
 800b280:	40014400 	.word	0x40014400
 800b284:	40014800 	.word	0x40014800
 800b288:	4000e000 	.word	0x4000e000
 800b28c:	4000e400 	.word	0x4000e400

0800b290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	f023 0201 	bic.w	r2, r3, #1
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4b37      	ldr	r3, [pc, #220]	@ (800b398 <TIM_OC1_SetConfig+0x108>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f023 0303 	bic.w	r3, r3, #3
 800b2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f023 0302 	bic.w	r3, r3, #2
 800b2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a2d      	ldr	r2, [pc, #180]	@ (800b39c <TIM_OC1_SetConfig+0x10c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00f      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a2c      	ldr	r2, [pc, #176]	@ (800b3a0 <TIM_OC1_SetConfig+0x110>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00b      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a2b      	ldr	r2, [pc, #172]	@ (800b3a4 <TIM_OC1_SetConfig+0x114>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d007      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a2a      	ldr	r2, [pc, #168]	@ (800b3a8 <TIM_OC1_SetConfig+0x118>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d003      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a29      	ldr	r2, [pc, #164]	@ (800b3ac <TIM_OC1_SetConfig+0x11c>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d10c      	bne.n	800b326 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f023 0308 	bic.w	r3, r3, #8
 800b312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f023 0304 	bic.w	r3, r3, #4
 800b324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a1c      	ldr	r2, [pc, #112]	@ (800b39c <TIM_OC1_SetConfig+0x10c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00f      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a1b      	ldr	r2, [pc, #108]	@ (800b3a0 <TIM_OC1_SetConfig+0x110>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d00b      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a1a      	ldr	r2, [pc, #104]	@ (800b3a4 <TIM_OC1_SetConfig+0x114>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d007      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a19      	ldr	r2, [pc, #100]	@ (800b3a8 <TIM_OC1_SetConfig+0x118>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d003      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a18      	ldr	r2, [pc, #96]	@ (800b3ac <TIM_OC1_SetConfig+0x11c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d111      	bne.n	800b372 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b35c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	4313      	orrs	r3, r2
 800b370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	621a      	str	r2, [r3, #32]
}
 800b38c:	bf00      	nop
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	fffeff8f 	.word	0xfffeff8f
 800b39c:	40010000 	.word	0x40010000
 800b3a0:	40010400 	.word	0x40010400
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40014400 	.word	0x40014400
 800b3ac:	40014800 	.word	0x40014800

0800b3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	f023 0210 	bic.w	r2, r3, #16
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	4b34      	ldr	r3, [pc, #208]	@ (800b4ac <TIM_OC2_SetConfig+0xfc>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f023 0320 	bic.w	r3, r3, #32
 800b3fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	011b      	lsls	r3, r3, #4
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	4313      	orrs	r3, r2
 800b406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a29      	ldr	r2, [pc, #164]	@ (800b4b0 <TIM_OC2_SetConfig+0x100>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d003      	beq.n	800b418 <TIM_OC2_SetConfig+0x68>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a28      	ldr	r2, [pc, #160]	@ (800b4b4 <TIM_OC2_SetConfig+0x104>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d10d      	bne.n	800b434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b41e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	011b      	lsls	r3, r3, #4
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	4313      	orrs	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1e      	ldr	r2, [pc, #120]	@ (800b4b0 <TIM_OC2_SetConfig+0x100>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00f      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a1d      	ldr	r2, [pc, #116]	@ (800b4b4 <TIM_OC2_SetConfig+0x104>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d00b      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a1c      	ldr	r2, [pc, #112]	@ (800b4b8 <TIM_OC2_SetConfig+0x108>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d007      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a1b      	ldr	r2, [pc, #108]	@ (800b4bc <TIM_OC2_SetConfig+0x10c>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d003      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a1a      	ldr	r2, [pc, #104]	@ (800b4c0 <TIM_OC2_SetConfig+0x110>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d113      	bne.n	800b484 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b46a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	4313      	orrs	r3, r2
 800b476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	4313      	orrs	r3, r2
 800b482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	621a      	str	r2, [r3, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	feff8fff 	.word	0xfeff8fff
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40010400 	.word	0x40010400
 800b4b8:	40014000 	.word	0x40014000
 800b4bc:	40014400 	.word	0x40014400
 800b4c0:	40014800 	.word	0x40014800

0800b4c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4b33      	ldr	r3, [pc, #204]	@ (800b5bc <TIM_OC3_SetConfig+0xf8>)
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0303 	bic.w	r3, r3, #3
 800b4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a28      	ldr	r2, [pc, #160]	@ (800b5c0 <TIM_OC3_SetConfig+0xfc>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d003      	beq.n	800b52a <TIM_OC3_SetConfig+0x66>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a27      	ldr	r2, [pc, #156]	@ (800b5c4 <TIM_OC3_SetConfig+0x100>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d10d      	bne.n	800b546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a1d      	ldr	r2, [pc, #116]	@ (800b5c0 <TIM_OC3_SetConfig+0xfc>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d00f      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a1c      	ldr	r2, [pc, #112]	@ (800b5c4 <TIM_OC3_SetConfig+0x100>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d00b      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a1b      	ldr	r2, [pc, #108]	@ (800b5c8 <TIM_OC3_SetConfig+0x104>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d007      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a1a      	ldr	r2, [pc, #104]	@ (800b5cc <TIM_OC3_SetConfig+0x108>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d003      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a19      	ldr	r2, [pc, #100]	@ (800b5d0 <TIM_OC3_SetConfig+0x10c>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d113      	bne.n	800b596 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	4313      	orrs	r3, r2
 800b588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4313      	orrs	r3, r2
 800b594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	621a      	str	r2, [r3, #32]
}
 800b5b0:	bf00      	nop
 800b5b2:	371c      	adds	r7, #28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	fffeff8f 	.word	0xfffeff8f
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800

0800b5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4b24      	ldr	r3, [pc, #144]	@ (800b690 <TIM_OC4_SetConfig+0xbc>)
 800b600:	4013      	ands	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	021b      	lsls	r3, r3, #8
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	4313      	orrs	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	031b      	lsls	r3, r3, #12
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4313      	orrs	r3, r2
 800b62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a19      	ldr	r2, [pc, #100]	@ (800b694 <TIM_OC4_SetConfig+0xc0>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d00f      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a18      	ldr	r2, [pc, #96]	@ (800b698 <TIM_OC4_SetConfig+0xc4>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d00b      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a17      	ldr	r2, [pc, #92]	@ (800b69c <TIM_OC4_SetConfig+0xc8>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d007      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a16      	ldr	r2, [pc, #88]	@ (800b6a0 <TIM_OC4_SetConfig+0xcc>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d003      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a15      	ldr	r2, [pc, #84]	@ (800b6a4 <TIM_OC4_SetConfig+0xd0>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d109      	bne.n	800b668 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b65a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	019b      	lsls	r3, r3, #6
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	621a      	str	r2, [r3, #32]
}
 800b682:	bf00      	nop
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	feff8fff 	.word	0xfeff8fff
 800b694:	40010000 	.word	0x40010000
 800b698:	40010400 	.word	0x40010400
 800b69c:	40014000 	.word	0x40014000
 800b6a0:	40014400 	.word	0x40014400
 800b6a4:	40014800 	.word	0x40014800

0800b6a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4b21      	ldr	r3, [pc, #132]	@ (800b758 <TIM_OC5_SetConfig+0xb0>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b6e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	041b      	lsls	r3, r3, #16
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a18      	ldr	r2, [pc, #96]	@ (800b75c <TIM_OC5_SetConfig+0xb4>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d00f      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a17      	ldr	r2, [pc, #92]	@ (800b760 <TIM_OC5_SetConfig+0xb8>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d00b      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a16      	ldr	r2, [pc, #88]	@ (800b764 <TIM_OC5_SetConfig+0xbc>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d007      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a15      	ldr	r2, [pc, #84]	@ (800b768 <TIM_OC5_SetConfig+0xc0>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d003      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a14      	ldr	r2, [pc, #80]	@ (800b76c <TIM_OC5_SetConfig+0xc4>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d109      	bne.n	800b732 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	021b      	lsls	r3, r3, #8
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	697a      	ldr	r2, [r7, #20]
 800b736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	621a      	str	r2, [r3, #32]
}
 800b74c:	bf00      	nop
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	fffeff8f 	.word	0xfffeff8f
 800b75c:	40010000 	.word	0x40010000
 800b760:	40010400 	.word	0x40010400
 800b764:	40014000 	.word	0x40014000
 800b768:	40014400 	.word	0x40014400
 800b76c:	40014800 	.word	0x40014800

0800b770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a1b      	ldr	r3, [r3, #32]
 800b784:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4b22      	ldr	r3, [pc, #136]	@ (800b824 <TIM_OC6_SetConfig+0xb4>)
 800b79c:	4013      	ands	r3, r2
 800b79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b7b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	051b      	lsls	r3, r3, #20
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a19      	ldr	r2, [pc, #100]	@ (800b828 <TIM_OC6_SetConfig+0xb8>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d00f      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a18      	ldr	r2, [pc, #96]	@ (800b82c <TIM_OC6_SetConfig+0xbc>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d00b      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a17      	ldr	r2, [pc, #92]	@ (800b830 <TIM_OC6_SetConfig+0xc0>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d007      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a16      	ldr	r2, [pc, #88]	@ (800b834 <TIM_OC6_SetConfig+0xc4>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d003      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a15      	ldr	r2, [pc, #84]	@ (800b838 <TIM_OC6_SetConfig+0xc8>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d109      	bne.n	800b7fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	029b      	lsls	r3, r3, #10
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	621a      	str	r2, [r3, #32]
}
 800b816:	bf00      	nop
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	feff8fff 	.word	0xfeff8fff
 800b828:	40010000 	.word	0x40010000
 800b82c:	40010400 	.word	0x40010400
 800b830:	40014000 	.word	0x40014000
 800b834:	40014400 	.word	0x40014400
 800b838:	40014800 	.word	0x40014800

0800b83c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6a1b      	ldr	r3, [r3, #32]
 800b84c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	f023 0201 	bic.w	r2, r3, #1
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	011b      	lsls	r3, r3, #4
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	4313      	orrs	r3, r2
 800b870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f023 030a 	bic.w	r3, r3, #10
 800b878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	4313      	orrs	r3, r2
 800b880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	621a      	str	r2, [r3, #32]
}
 800b88e:	bf00      	nop
 800b890:	371c      	adds	r7, #28
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b087      	sub	sp, #28
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	f023 0210 	bic.w	r2, r3, #16
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b8c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	031b      	lsls	r3, r3, #12
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b8d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	621a      	str	r2, [r3, #32]
}
 800b8ee:	bf00      	nop
 800b8f0:	371c      	adds	r7, #28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
	...

0800b8fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	4b09      	ldr	r3, [pc, #36]	@ (800b934 <TIM_ITRx_SetConfig+0x38>)
 800b910:	4013      	ands	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4313      	orrs	r3, r2
 800b91a:	f043 0307 	orr.w	r3, r3, #7
 800b91e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	609a      	str	r2, [r3, #8]
}
 800b926:	bf00      	nop
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	ffcfff8f 	.word	0xffcfff8f

0800b938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	021a      	lsls	r2, r3, #8
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	431a      	orrs	r2, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	4313      	orrs	r3, r2
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	4313      	orrs	r3, r2
 800b964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	609a      	str	r2, [r3, #8]
}
 800b96c:	bf00      	nop
 800b96e:	371c      	adds	r7, #28
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d101      	bne.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e077      	b.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2202      	movs	r2, #2
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a35      	ldr	r2, [pc, #212]	@ (800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d004      	beq.n	800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a34      	ldr	r2, [pc, #208]	@ (800ba90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d108      	bne.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b9ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a25      	ldr	r2, [pc, #148]	@ (800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d02c      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba02:	d027      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a22      	ldr	r2, [pc, #136]	@ (800ba94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d022      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a21      	ldr	r2, [pc, #132]	@ (800ba98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d01d      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a1f      	ldr	r2, [pc, #124]	@ (800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d018      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a1a      	ldr	r2, [pc, #104]	@ (800ba90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d013      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a1b      	ldr	r2, [pc, #108]	@ (800baa0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d00e      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a1a      	ldr	r2, [pc, #104]	@ (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d009      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a18      	ldr	r2, [pc, #96]	@ (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d004      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a17      	ldr	r2, [pc, #92]	@ (800baac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d10c      	bne.n	800ba6e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	40010000 	.word	0x40010000
 800ba90:	40010400 	.word	0x40010400
 800ba94:	40000400 	.word	0x40000400
 800ba98:	40000800 	.word	0x40000800
 800ba9c:	40000c00 	.word	0x40000c00
 800baa0:	40001800 	.word	0x40001800
 800baa4:	40014000 	.word	0x40014000
 800baa8:	4000e000 	.word	0x4000e000
 800baac:	4000e400 	.word	0x4000e400

0800bab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800baba:	2300      	movs	r3, #0
 800babc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d101      	bne.n	800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bac8:	2302      	movs	r3, #2
 800baca:	e073      	b.n	800bbb4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	4313      	orrs	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	4313      	orrs	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb32:	4313      	orrs	r3, r2
 800bb34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	041b      	lsls	r3, r3, #16
 800bb42:	4313      	orrs	r3, r2
 800bb44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a19      	ldr	r2, [pc, #100]	@ (800bbc0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d004      	beq.n	800bb68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a18      	ldr	r2, [pc, #96]	@ (800bbc4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d11c      	bne.n	800bba2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb72:	051b      	lsls	r3, r3, #20
 800bb74:	4313      	orrs	r3, r2
 800bb76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb90:	4313      	orrs	r3, r2
 800bb92:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	40010000 	.word	0x40010000
 800bbc4:	40010400 	.word	0x40010400

0800bbc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e042      	b.n	800bc60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d106      	bne.n	800bbf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7f7 f869 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2224      	movs	r2, #36	@ 0x24
 800bbf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f022 0201 	bic.w	r2, r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f001 fa6e 	bl	800d0f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fbff 	bl	800c41c <UART_SetConfig>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d101      	bne.n	800bc28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e01b      	b.n	800bc60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689a      	ldr	r2, [r3, #8]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f042 0201 	orr.w	r2, r2, #1
 800bc56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 faed 	bl	800d238 <UART_CheckIdleState>
 800bc5e:	4603      	mov	r3, r0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b0ba      	sub	sp, #232	@ 0xe8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bc8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bc92:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bc96:	4013      	ands	r3, r2
 800bc98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bc9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11b      	bne.n	800bcdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bca8:	f003 0320 	and.w	r3, r3, #32
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d015      	beq.n	800bcdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcb4:	f003 0320 	and.w	r3, r3, #32
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d105      	bne.n	800bcc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d009      	beq.n	800bcdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 8377 	beq.w	800c3c0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	4798      	blx	r3
      }
      return;
 800bcda:	e371      	b.n	800c3c0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bcdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 8123 	beq.w	800bf2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bce6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bcea:	4b8d      	ldr	r3, [pc, #564]	@ (800bf20 <HAL_UART_IRQHandler+0x2b8>)
 800bcec:	4013      	ands	r3, r2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d106      	bne.n	800bd00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bcf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bcf6:	4b8b      	ldr	r3, [pc, #556]	@ (800bf24 <HAL_UART_IRQHandler+0x2bc>)
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 8116 	beq.w	800bf2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd04:	f003 0301 	and.w	r3, r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d011      	beq.n	800bd30 <HAL_UART_IRQHandler+0xc8>
 800bd0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00b      	beq.n	800bd30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd26:	f043 0201 	orr.w	r2, r3, #1
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd34:	f003 0302 	and.w	r3, r3, #2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d011      	beq.n	800bd60 <HAL_UART_IRQHandler+0xf8>
 800bd3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd56:	f043 0204 	orr.w	r2, r3, #4
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d011      	beq.n	800bd90 <HAL_UART_IRQHandler+0x128>
 800bd6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd86:	f043 0202 	orr.w	r2, r3, #2
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd94:	f003 0308 	and.w	r3, r3, #8
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d017      	beq.n	800bdcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bda0:	f003 0320 	and.w	r3, r3, #32
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d105      	bne.n	800bdb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bda8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bdac:	4b5c      	ldr	r3, [pc, #368]	@ (800bf20 <HAL_UART_IRQHandler+0x2b8>)
 800bdae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00b      	beq.n	800bdcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2208      	movs	r2, #8
 800bdba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdc2:	f043 0208 	orr.w	r2, r3, #8
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bdcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d012      	beq.n	800bdfe <HAL_UART_IRQHandler+0x196>
 800bdd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bddc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00c      	beq.n	800bdfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bdec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdf4:	f043 0220 	orr.w	r2, r3, #32
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 82dd 	beq.w	800c3c4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be0e:	f003 0320 	and.w	r3, r3, #32
 800be12:	2b00      	cmp	r3, #0
 800be14:	d013      	beq.n	800be3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be1a:	f003 0320 	and.w	r3, r3, #32
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d105      	bne.n	800be2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d007      	beq.n	800be3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be52:	2b40      	cmp	r3, #64	@ 0x40
 800be54:	d005      	beq.n	800be62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800be56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d054      	beq.n	800bf0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 fb00 	bl	800d468 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be72:	2b40      	cmp	r3, #64	@ 0x40
 800be74:	d146      	bne.n	800bf04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3308      	adds	r3, #8
 800be7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800be8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3308      	adds	r3, #8
 800be9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bea2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800beae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800beb2:	e841 2300 	strex	r3, r2, [r1]
 800beb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800beba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1d9      	bne.n	800be76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d017      	beq.n	800befc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bed2:	4a15      	ldr	r2, [pc, #84]	@ (800bf28 <HAL_UART_IRQHandler+0x2c0>)
 800bed4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bedc:	4618      	mov	r0, r3
 800bede:	f7f9 fbfb 	bl	80056d8 <HAL_DMA_Abort_IT>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d019      	beq.n	800bf1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800beee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bef6:	4610      	mov	r0, r2
 800bef8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800befa:	e00f      	b.n	800bf1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fa77 	bl	800c3f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf02:	e00b      	b.n	800bf1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fa73 	bl	800c3f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf0a:	e007      	b.n	800bf1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fa6f 	bl	800c3f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bf1a:	e253      	b.n	800c3c4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf1c:	bf00      	nop
    return;
 800bf1e:	e251      	b.n	800c3c4 <HAL_UART_IRQHandler+0x75c>
 800bf20:	10000001 	.word	0x10000001
 800bf24:	04000120 	.word	0x04000120
 800bf28:	0800d535 	.word	0x0800d535

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	f040 81e7 	bne.w	800c304 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bf36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf3a:	f003 0310 	and.w	r3, r3, #16
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 81e0 	beq.w	800c304 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bf44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf48:	f003 0310 	and.w	r3, r3, #16
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 81d9 	beq.w	800c304 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2210      	movs	r2, #16
 800bf58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf64:	2b40      	cmp	r3, #64	@ 0x40
 800bf66:	f040 8151 	bne.w	800c20c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a96      	ldr	r2, [pc, #600]	@ (800c1cc <HAL_UART_IRQHandler+0x564>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d068      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a93      	ldr	r2, [pc, #588]	@ (800c1d0 <HAL_UART_IRQHandler+0x568>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d061      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a91      	ldr	r2, [pc, #580]	@ (800c1d4 <HAL_UART_IRQHandler+0x56c>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d05a      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a8e      	ldr	r2, [pc, #568]	@ (800c1d8 <HAL_UART_IRQHandler+0x570>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d053      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a8c      	ldr	r2, [pc, #560]	@ (800c1dc <HAL_UART_IRQHandler+0x574>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d04c      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a89      	ldr	r2, [pc, #548]	@ (800c1e0 <HAL_UART_IRQHandler+0x578>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d045      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a87      	ldr	r2, [pc, #540]	@ (800c1e4 <HAL_UART_IRQHandler+0x57c>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d03e      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a84      	ldr	r2, [pc, #528]	@ (800c1e8 <HAL_UART_IRQHandler+0x580>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d037      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a82      	ldr	r2, [pc, #520]	@ (800c1ec <HAL_UART_IRQHandler+0x584>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d030      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a7f      	ldr	r2, [pc, #508]	@ (800c1f0 <HAL_UART_IRQHandler+0x588>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d029      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a7d      	ldr	r2, [pc, #500]	@ (800c1f4 <HAL_UART_IRQHandler+0x58c>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d022      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a7a      	ldr	r2, [pc, #488]	@ (800c1f8 <HAL_UART_IRQHandler+0x590>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d01b      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a78      	ldr	r2, [pc, #480]	@ (800c1fc <HAL_UART_IRQHandler+0x594>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d014      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a75      	ldr	r2, [pc, #468]	@ (800c200 <HAL_UART_IRQHandler+0x598>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d00d      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a73      	ldr	r2, [pc, #460]	@ (800c204 <HAL_UART_IRQHandler+0x59c>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d006      	beq.n	800c04a <HAL_UART_IRQHandler+0x3e2>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a70      	ldr	r2, [pc, #448]	@ (800c208 <HAL_UART_IRQHandler+0x5a0>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d106      	bne.n	800c058 <HAL_UART_IRQHandler+0x3f0>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	b29b      	uxth	r3, r3
 800c056:	e005      	b.n	800c064 <HAL_UART_IRQHandler+0x3fc>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	b29b      	uxth	r3, r3
 800c064:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 81ab 	beq.w	800c3c8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c078:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c07c:	429a      	cmp	r2, r3
 800c07e:	f080 81a3 	bcs.w	800c3c8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c088:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c098:	f000 8087 	beq.w	800c1aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c0a8:	e853 3f00 	ldrex	r3, [r3]
 800c0ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c0b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c0c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c0d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c0d6:	e841 2300 	strex	r3, r2, [r1]
 800c0da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c0de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1da      	bne.n	800c09c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c0f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0f8:	f023 0301 	bic.w	r3, r3, #1
 800c0fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3308      	adds	r3, #8
 800c106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c10a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c10e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c11c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1e1      	bne.n	800c0e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3308      	adds	r3, #8
 800c128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3308      	adds	r3, #8
 800c142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c14c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c14e:	e841 2300 	strex	r3, r2, [r1]
 800c152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1e3      	bne.n	800c122 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c170:	e853 3f00 	ldrex	r3, [r3]
 800c174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c178:	f023 0310 	bic.w	r3, r3, #16
 800c17c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	461a      	mov	r2, r3
 800c186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c18a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c18c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c192:	e841 2300 	strex	r3, r2, [r1]
 800c196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1e4      	bne.n	800c168 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7f8 ff79 	bl	800509c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f91d 	bl	800c404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1ca:	e0fd      	b.n	800c3c8 <HAL_UART_IRQHandler+0x760>
 800c1cc:	40020010 	.word	0x40020010
 800c1d0:	40020028 	.word	0x40020028
 800c1d4:	40020040 	.word	0x40020040
 800c1d8:	40020058 	.word	0x40020058
 800c1dc:	40020070 	.word	0x40020070
 800c1e0:	40020088 	.word	0x40020088
 800c1e4:	400200a0 	.word	0x400200a0
 800c1e8:	400200b8 	.word	0x400200b8
 800c1ec:	40020410 	.word	0x40020410
 800c1f0:	40020428 	.word	0x40020428
 800c1f4:	40020440 	.word	0x40020440
 800c1f8:	40020458 	.word	0x40020458
 800c1fc:	40020470 	.word	0x40020470
 800c200:	40020488 	.word	0x40020488
 800c204:	400204a0 	.word	0x400204a0
 800c208:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c218:	b29b      	uxth	r3, r3
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c226:	b29b      	uxth	r3, r3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 80cf 	beq.w	800c3cc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c22e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80ca 	beq.w	800c3cc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c240:	e853 3f00 	ldrex	r3, [r3]
 800c244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c24c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	461a      	mov	r2, r3
 800c256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c25a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c25c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c262:	e841 2300 	strex	r3, r2, [r1]
 800c266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e4      	bne.n	800c238 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3308      	adds	r3, #8
 800c274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	623b      	str	r3, [r7, #32]
   return(result);
 800c27e:	6a3a      	ldr	r2, [r7, #32]
 800c280:	4b55      	ldr	r3, [pc, #340]	@ (800c3d8 <HAL_UART_IRQHandler+0x770>)
 800c282:	4013      	ands	r3, r2
 800c284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3308      	adds	r3, #8
 800c28e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c292:	633a      	str	r2, [r7, #48]	@ 0x30
 800c294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e3      	bne.n	800c26e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	e853 3f00 	ldrex	r3, [r3]
 800c2c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 0310 	bic.w	r3, r3, #16
 800c2ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c2dc:	61fb      	str	r3, [r7, #28]
 800c2de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e0:	69b9      	ldr	r1, [r7, #24]
 800c2e2:	69fa      	ldr	r2, [r7, #28]
 800c2e4:	e841 2300 	strex	r3, r2, [r1]
 800c2e8:	617b      	str	r3, [r7, #20]
   return(result);
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1e4      	bne.n	800c2ba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f881 	bl	800c404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c302:	e063      	b.n	800c3cc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00e      	beq.n	800c32e <HAL_UART_IRQHandler+0x6c6>
 800c310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d008      	beq.n	800c32e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f001 f945 	bl	800d5b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c32c:	e051      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c336:	2b00      	cmp	r3, #0
 800c338:	d014      	beq.n	800c364 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c33a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c342:	2b00      	cmp	r3, #0
 800c344:	d105      	bne.n	800c352 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c34a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d008      	beq.n	800c364 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c356:	2b00      	cmp	r3, #0
 800c358:	d03a      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	4798      	blx	r3
    }
    return;
 800c362:	e035      	b.n	800c3d0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d009      	beq.n	800c384 <HAL_UART_IRQHandler+0x71c>
 800c370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f001 f8ef 	bl	800d560 <UART_EndTransmit_IT>
    return;
 800c382:	e026      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <HAL_UART_IRQHandler+0x73c>
 800c390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c394:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f001 f91e 	bl	800d5de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3a2:	e016      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d010      	beq.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
 800c3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da0c      	bge.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f001 f906 	bl	800d5ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3be:	e008      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c3c0:	bf00      	nop
 800c3c2:	e006      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800c3c4:	bf00      	nop
 800c3c6:	e004      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c3c8:	bf00      	nop
 800c3ca:	e002      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c3cc:	bf00      	nop
 800c3ce:	e000      	b.n	800c3d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800c3d0:	bf00      	nop
  }
}
 800c3d2:	37e8      	adds	r7, #232	@ 0xe8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	effffffe 	.word	0xeffffffe

0800c3dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c3e4:	bf00      	nop
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c41c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c420:	b092      	sub	sp, #72	@ 0x48
 800c422:	af00      	add	r7, sp, #0
 800c424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	689a      	ldr	r2, [r3, #8]
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	431a      	orrs	r2, r3
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	431a      	orrs	r2, r3
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	69db      	ldr	r3, [r3, #28]
 800c440:	4313      	orrs	r3, r2
 800c442:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	4bbe      	ldr	r3, [pc, #760]	@ (800c744 <UART_SetConfig+0x328>)
 800c44c:	4013      	ands	r3, r2
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	6812      	ldr	r2, [r2, #0]
 800c452:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c454:	430b      	orrs	r3, r1
 800c456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	430a      	orrs	r2, r1
 800c46c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4ab3      	ldr	r2, [pc, #716]	@ (800c748 <UART_SetConfig+0x32c>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d004      	beq.n	800c488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c484:	4313      	orrs	r3, r2
 800c486:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	689a      	ldr	r2, [r3, #8]
 800c48e:	4baf      	ldr	r3, [pc, #700]	@ (800c74c <UART_SetConfig+0x330>)
 800c490:	4013      	ands	r3, r2
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c498:	430b      	orrs	r3, r1
 800c49a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a2:	f023 010f 	bic.w	r1, r3, #15
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4aa6      	ldr	r2, [pc, #664]	@ (800c750 <UART_SetConfig+0x334>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d177      	bne.n	800c5ac <UART_SetConfig+0x190>
 800c4bc:	4ba5      	ldr	r3, [pc, #660]	@ (800c754 <UART_SetConfig+0x338>)
 800c4be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c4c4:	2b28      	cmp	r3, #40	@ 0x28
 800c4c6:	d86d      	bhi.n	800c5a4 <UART_SetConfig+0x188>
 800c4c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d0 <UART_SetConfig+0xb4>)
 800c4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ce:	bf00      	nop
 800c4d0:	0800c575 	.word	0x0800c575
 800c4d4:	0800c5a5 	.word	0x0800c5a5
 800c4d8:	0800c5a5 	.word	0x0800c5a5
 800c4dc:	0800c5a5 	.word	0x0800c5a5
 800c4e0:	0800c5a5 	.word	0x0800c5a5
 800c4e4:	0800c5a5 	.word	0x0800c5a5
 800c4e8:	0800c5a5 	.word	0x0800c5a5
 800c4ec:	0800c5a5 	.word	0x0800c5a5
 800c4f0:	0800c57d 	.word	0x0800c57d
 800c4f4:	0800c5a5 	.word	0x0800c5a5
 800c4f8:	0800c5a5 	.word	0x0800c5a5
 800c4fc:	0800c5a5 	.word	0x0800c5a5
 800c500:	0800c5a5 	.word	0x0800c5a5
 800c504:	0800c5a5 	.word	0x0800c5a5
 800c508:	0800c5a5 	.word	0x0800c5a5
 800c50c:	0800c5a5 	.word	0x0800c5a5
 800c510:	0800c585 	.word	0x0800c585
 800c514:	0800c5a5 	.word	0x0800c5a5
 800c518:	0800c5a5 	.word	0x0800c5a5
 800c51c:	0800c5a5 	.word	0x0800c5a5
 800c520:	0800c5a5 	.word	0x0800c5a5
 800c524:	0800c5a5 	.word	0x0800c5a5
 800c528:	0800c5a5 	.word	0x0800c5a5
 800c52c:	0800c5a5 	.word	0x0800c5a5
 800c530:	0800c58d 	.word	0x0800c58d
 800c534:	0800c5a5 	.word	0x0800c5a5
 800c538:	0800c5a5 	.word	0x0800c5a5
 800c53c:	0800c5a5 	.word	0x0800c5a5
 800c540:	0800c5a5 	.word	0x0800c5a5
 800c544:	0800c5a5 	.word	0x0800c5a5
 800c548:	0800c5a5 	.word	0x0800c5a5
 800c54c:	0800c5a5 	.word	0x0800c5a5
 800c550:	0800c595 	.word	0x0800c595
 800c554:	0800c5a5 	.word	0x0800c5a5
 800c558:	0800c5a5 	.word	0x0800c5a5
 800c55c:	0800c5a5 	.word	0x0800c5a5
 800c560:	0800c5a5 	.word	0x0800c5a5
 800c564:	0800c5a5 	.word	0x0800c5a5
 800c568:	0800c5a5 	.word	0x0800c5a5
 800c56c:	0800c5a5 	.word	0x0800c5a5
 800c570:	0800c59d 	.word	0x0800c59d
 800c574:	2301      	movs	r3, #1
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57a:	e326      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c57c:	2304      	movs	r3, #4
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c582:	e322      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c584:	2308      	movs	r3, #8
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58a:	e31e      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c58c:	2310      	movs	r3, #16
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c592:	e31a      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c594:	2320      	movs	r3, #32
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59a:	e316      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c59c:	2340      	movs	r3, #64	@ 0x40
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a2:	e312      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c5a4:	2380      	movs	r3, #128	@ 0x80
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5aa:	e30e      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a69      	ldr	r2, [pc, #420]	@ (800c758 <UART_SetConfig+0x33c>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d130      	bne.n	800c618 <UART_SetConfig+0x1fc>
 800c5b6:	4b67      	ldr	r3, [pc, #412]	@ (800c754 <UART_SetConfig+0x338>)
 800c5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ba:	f003 0307 	and.w	r3, r3, #7
 800c5be:	2b05      	cmp	r3, #5
 800c5c0:	d826      	bhi.n	800c610 <UART_SetConfig+0x1f4>
 800c5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c8 <UART_SetConfig+0x1ac>)
 800c5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c8:	0800c5e1 	.word	0x0800c5e1
 800c5cc:	0800c5e9 	.word	0x0800c5e9
 800c5d0:	0800c5f1 	.word	0x0800c5f1
 800c5d4:	0800c5f9 	.word	0x0800c5f9
 800c5d8:	0800c601 	.word	0x0800c601
 800c5dc:	0800c609 	.word	0x0800c609
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e6:	e2f0      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ee:	e2ec      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f6:	e2e8      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fe:	e2e4      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c600:	2320      	movs	r3, #32
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c606:	e2e0      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c608:	2340      	movs	r3, #64	@ 0x40
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60e:	e2dc      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c610:	2380      	movs	r3, #128	@ 0x80
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c616:	e2d8      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a4f      	ldr	r2, [pc, #316]	@ (800c75c <UART_SetConfig+0x340>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d130      	bne.n	800c684 <UART_SetConfig+0x268>
 800c622:	4b4c      	ldr	r3, [pc, #304]	@ (800c754 <UART_SetConfig+0x338>)
 800c624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c626:	f003 0307 	and.w	r3, r3, #7
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	d826      	bhi.n	800c67c <UART_SetConfig+0x260>
 800c62e:	a201      	add	r2, pc, #4	@ (adr r2, 800c634 <UART_SetConfig+0x218>)
 800c630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c634:	0800c64d 	.word	0x0800c64d
 800c638:	0800c655 	.word	0x0800c655
 800c63c:	0800c65d 	.word	0x0800c65d
 800c640:	0800c665 	.word	0x0800c665
 800c644:	0800c66d 	.word	0x0800c66d
 800c648:	0800c675 	.word	0x0800c675
 800c64c:	2300      	movs	r3, #0
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c652:	e2ba      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c654:	2304      	movs	r3, #4
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65a:	e2b6      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c65c:	2308      	movs	r3, #8
 800c65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c662:	e2b2      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c664:	2310      	movs	r3, #16
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66a:	e2ae      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c66c:	2320      	movs	r3, #32
 800c66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c672:	e2aa      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c674:	2340      	movs	r3, #64	@ 0x40
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67a:	e2a6      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c67c:	2380      	movs	r3, #128	@ 0x80
 800c67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c682:	e2a2      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a35      	ldr	r2, [pc, #212]	@ (800c760 <UART_SetConfig+0x344>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d130      	bne.n	800c6f0 <UART_SetConfig+0x2d4>
 800c68e:	4b31      	ldr	r3, [pc, #196]	@ (800c754 <UART_SetConfig+0x338>)
 800c690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	2b05      	cmp	r3, #5
 800c698:	d826      	bhi.n	800c6e8 <UART_SetConfig+0x2cc>
 800c69a:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a0 <UART_SetConfig+0x284>)
 800c69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a0:	0800c6b9 	.word	0x0800c6b9
 800c6a4:	0800c6c1 	.word	0x0800c6c1
 800c6a8:	0800c6c9 	.word	0x0800c6c9
 800c6ac:	0800c6d1 	.word	0x0800c6d1
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c6e1 	.word	0x0800c6e1
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6be:	e284      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6c6:	e280      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c6c8:	2308      	movs	r3, #8
 800c6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ce:	e27c      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6d6:	e278      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c6d8:	2320      	movs	r3, #32
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6de:	e274      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c6e0:	2340      	movs	r3, #64	@ 0x40
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6e6:	e270      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c6e8:	2380      	movs	r3, #128	@ 0x80
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ee:	e26c      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c764 <UART_SetConfig+0x348>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d142      	bne.n	800c780 <UART_SetConfig+0x364>
 800c6fa:	4b16      	ldr	r3, [pc, #88]	@ (800c754 <UART_SetConfig+0x338>)
 800c6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	2b05      	cmp	r3, #5
 800c704:	d838      	bhi.n	800c778 <UART_SetConfig+0x35c>
 800c706:	a201      	add	r2, pc, #4	@ (adr r2, 800c70c <UART_SetConfig+0x2f0>)
 800c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70c:	0800c725 	.word	0x0800c725
 800c710:	0800c72d 	.word	0x0800c72d
 800c714:	0800c735 	.word	0x0800c735
 800c718:	0800c73d 	.word	0x0800c73d
 800c71c:	0800c769 	.word	0x0800c769
 800c720:	0800c771 	.word	0x0800c771
 800c724:	2300      	movs	r3, #0
 800c726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c72a:	e24e      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c72c:	2304      	movs	r3, #4
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c732:	e24a      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c734:	2308      	movs	r3, #8
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c73a:	e246      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c73c:	2310      	movs	r3, #16
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c742:	e242      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c744:	cfff69f3 	.word	0xcfff69f3
 800c748:	58000c00 	.word	0x58000c00
 800c74c:	11fff4ff 	.word	0x11fff4ff
 800c750:	40011000 	.word	0x40011000
 800c754:	58024400 	.word	0x58024400
 800c758:	40004400 	.word	0x40004400
 800c75c:	40004800 	.word	0x40004800
 800c760:	40004c00 	.word	0x40004c00
 800c764:	40005000 	.word	0x40005000
 800c768:	2320      	movs	r3, #32
 800c76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c76e:	e22c      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c770:	2340      	movs	r3, #64	@ 0x40
 800c772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c776:	e228      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c778:	2380      	movs	r3, #128	@ 0x80
 800c77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c77e:	e224      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4ab1      	ldr	r2, [pc, #708]	@ (800ca4c <UART_SetConfig+0x630>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d176      	bne.n	800c878 <UART_SetConfig+0x45c>
 800c78a:	4bb1      	ldr	r3, [pc, #708]	@ (800ca50 <UART_SetConfig+0x634>)
 800c78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c78e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c792:	2b28      	cmp	r3, #40	@ 0x28
 800c794:	d86c      	bhi.n	800c870 <UART_SetConfig+0x454>
 800c796:	a201      	add	r2, pc, #4	@ (adr r2, 800c79c <UART_SetConfig+0x380>)
 800c798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79c:	0800c841 	.word	0x0800c841
 800c7a0:	0800c871 	.word	0x0800c871
 800c7a4:	0800c871 	.word	0x0800c871
 800c7a8:	0800c871 	.word	0x0800c871
 800c7ac:	0800c871 	.word	0x0800c871
 800c7b0:	0800c871 	.word	0x0800c871
 800c7b4:	0800c871 	.word	0x0800c871
 800c7b8:	0800c871 	.word	0x0800c871
 800c7bc:	0800c849 	.word	0x0800c849
 800c7c0:	0800c871 	.word	0x0800c871
 800c7c4:	0800c871 	.word	0x0800c871
 800c7c8:	0800c871 	.word	0x0800c871
 800c7cc:	0800c871 	.word	0x0800c871
 800c7d0:	0800c871 	.word	0x0800c871
 800c7d4:	0800c871 	.word	0x0800c871
 800c7d8:	0800c871 	.word	0x0800c871
 800c7dc:	0800c851 	.word	0x0800c851
 800c7e0:	0800c871 	.word	0x0800c871
 800c7e4:	0800c871 	.word	0x0800c871
 800c7e8:	0800c871 	.word	0x0800c871
 800c7ec:	0800c871 	.word	0x0800c871
 800c7f0:	0800c871 	.word	0x0800c871
 800c7f4:	0800c871 	.word	0x0800c871
 800c7f8:	0800c871 	.word	0x0800c871
 800c7fc:	0800c859 	.word	0x0800c859
 800c800:	0800c871 	.word	0x0800c871
 800c804:	0800c871 	.word	0x0800c871
 800c808:	0800c871 	.word	0x0800c871
 800c80c:	0800c871 	.word	0x0800c871
 800c810:	0800c871 	.word	0x0800c871
 800c814:	0800c871 	.word	0x0800c871
 800c818:	0800c871 	.word	0x0800c871
 800c81c:	0800c861 	.word	0x0800c861
 800c820:	0800c871 	.word	0x0800c871
 800c824:	0800c871 	.word	0x0800c871
 800c828:	0800c871 	.word	0x0800c871
 800c82c:	0800c871 	.word	0x0800c871
 800c830:	0800c871 	.word	0x0800c871
 800c834:	0800c871 	.word	0x0800c871
 800c838:	0800c871 	.word	0x0800c871
 800c83c:	0800c869 	.word	0x0800c869
 800c840:	2301      	movs	r3, #1
 800c842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c846:	e1c0      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c848:	2304      	movs	r3, #4
 800c84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c84e:	e1bc      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c850:	2308      	movs	r3, #8
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c856:	e1b8      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c858:	2310      	movs	r3, #16
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85e:	e1b4      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c860:	2320      	movs	r3, #32
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c866:	e1b0      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c868:	2340      	movs	r3, #64	@ 0x40
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86e:	e1ac      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c870:	2380      	movs	r3, #128	@ 0x80
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c876:	e1a8      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a75      	ldr	r2, [pc, #468]	@ (800ca54 <UART_SetConfig+0x638>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d130      	bne.n	800c8e4 <UART_SetConfig+0x4c8>
 800c882:	4b73      	ldr	r3, [pc, #460]	@ (800ca50 <UART_SetConfig+0x634>)
 800c884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b05      	cmp	r3, #5
 800c88c:	d826      	bhi.n	800c8dc <UART_SetConfig+0x4c0>
 800c88e:	a201      	add	r2, pc, #4	@ (adr r2, 800c894 <UART_SetConfig+0x478>)
 800c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c894:	0800c8ad 	.word	0x0800c8ad
 800c898:	0800c8b5 	.word	0x0800c8b5
 800c89c:	0800c8bd 	.word	0x0800c8bd
 800c8a0:	0800c8c5 	.word	0x0800c8c5
 800c8a4:	0800c8cd 	.word	0x0800c8cd
 800c8a8:	0800c8d5 	.word	0x0800c8d5
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8b2:	e18a      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c8b4:	2304      	movs	r3, #4
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ba:	e186      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c8bc:	2308      	movs	r3, #8
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c2:	e182      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ca:	e17e      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c8cc:	2320      	movs	r3, #32
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e17a      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c8d4:	2340      	movs	r3, #64	@ 0x40
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8da:	e176      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c8dc:	2380      	movs	r3, #128	@ 0x80
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	e172      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a5b      	ldr	r2, [pc, #364]	@ (800ca58 <UART_SetConfig+0x63c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d130      	bne.n	800c950 <UART_SetConfig+0x534>
 800c8ee:	4b58      	ldr	r3, [pc, #352]	@ (800ca50 <UART_SetConfig+0x634>)
 800c8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b05      	cmp	r3, #5
 800c8f8:	d826      	bhi.n	800c948 <UART_SetConfig+0x52c>
 800c8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c900 <UART_SetConfig+0x4e4>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c919 	.word	0x0800c919
 800c904:	0800c921 	.word	0x0800c921
 800c908:	0800c929 	.word	0x0800c929
 800c90c:	0800c931 	.word	0x0800c931
 800c910:	0800c939 	.word	0x0800c939
 800c914:	0800c941 	.word	0x0800c941
 800c918:	2300      	movs	r3, #0
 800c91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c91e:	e154      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c920:	2304      	movs	r3, #4
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c926:	e150      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c928:	2308      	movs	r3, #8
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c92e:	e14c      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c930:	2310      	movs	r3, #16
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c936:	e148      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c938:	2320      	movs	r3, #32
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e144      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c940:	2340      	movs	r3, #64	@ 0x40
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e140      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c948:	2380      	movs	r3, #128	@ 0x80
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e13c      	b.n	800cbca <UART_SetConfig+0x7ae>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a41      	ldr	r2, [pc, #260]	@ (800ca5c <UART_SetConfig+0x640>)
 800c956:	4293      	cmp	r3, r2
 800c958:	f040 8082 	bne.w	800ca60 <UART_SetConfig+0x644>
 800c95c:	4b3c      	ldr	r3, [pc, #240]	@ (800ca50 <UART_SetConfig+0x634>)
 800c95e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c960:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c964:	2b28      	cmp	r3, #40	@ 0x28
 800c966:	d86d      	bhi.n	800ca44 <UART_SetConfig+0x628>
 800c968:	a201      	add	r2, pc, #4	@ (adr r2, 800c970 <UART_SetConfig+0x554>)
 800c96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96e:	bf00      	nop
 800c970:	0800ca15 	.word	0x0800ca15
 800c974:	0800ca45 	.word	0x0800ca45
 800c978:	0800ca45 	.word	0x0800ca45
 800c97c:	0800ca45 	.word	0x0800ca45
 800c980:	0800ca45 	.word	0x0800ca45
 800c984:	0800ca45 	.word	0x0800ca45
 800c988:	0800ca45 	.word	0x0800ca45
 800c98c:	0800ca45 	.word	0x0800ca45
 800c990:	0800ca1d 	.word	0x0800ca1d
 800c994:	0800ca45 	.word	0x0800ca45
 800c998:	0800ca45 	.word	0x0800ca45
 800c99c:	0800ca45 	.word	0x0800ca45
 800c9a0:	0800ca45 	.word	0x0800ca45
 800c9a4:	0800ca45 	.word	0x0800ca45
 800c9a8:	0800ca45 	.word	0x0800ca45
 800c9ac:	0800ca45 	.word	0x0800ca45
 800c9b0:	0800ca25 	.word	0x0800ca25
 800c9b4:	0800ca45 	.word	0x0800ca45
 800c9b8:	0800ca45 	.word	0x0800ca45
 800c9bc:	0800ca45 	.word	0x0800ca45
 800c9c0:	0800ca45 	.word	0x0800ca45
 800c9c4:	0800ca45 	.word	0x0800ca45
 800c9c8:	0800ca45 	.word	0x0800ca45
 800c9cc:	0800ca45 	.word	0x0800ca45
 800c9d0:	0800ca2d 	.word	0x0800ca2d
 800c9d4:	0800ca45 	.word	0x0800ca45
 800c9d8:	0800ca45 	.word	0x0800ca45
 800c9dc:	0800ca45 	.word	0x0800ca45
 800c9e0:	0800ca45 	.word	0x0800ca45
 800c9e4:	0800ca45 	.word	0x0800ca45
 800c9e8:	0800ca45 	.word	0x0800ca45
 800c9ec:	0800ca45 	.word	0x0800ca45
 800c9f0:	0800ca35 	.word	0x0800ca35
 800c9f4:	0800ca45 	.word	0x0800ca45
 800c9f8:	0800ca45 	.word	0x0800ca45
 800c9fc:	0800ca45 	.word	0x0800ca45
 800ca00:	0800ca45 	.word	0x0800ca45
 800ca04:	0800ca45 	.word	0x0800ca45
 800ca08:	0800ca45 	.word	0x0800ca45
 800ca0c:	0800ca45 	.word	0x0800ca45
 800ca10:	0800ca3d 	.word	0x0800ca3d
 800ca14:	2301      	movs	r3, #1
 800ca16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1a:	e0d6      	b.n	800cbca <UART_SetConfig+0x7ae>
 800ca1c:	2304      	movs	r3, #4
 800ca1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca22:	e0d2      	b.n	800cbca <UART_SetConfig+0x7ae>
 800ca24:	2308      	movs	r3, #8
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca2a:	e0ce      	b.n	800cbca <UART_SetConfig+0x7ae>
 800ca2c:	2310      	movs	r3, #16
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca32:	e0ca      	b.n	800cbca <UART_SetConfig+0x7ae>
 800ca34:	2320      	movs	r3, #32
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca3a:	e0c6      	b.n	800cbca <UART_SetConfig+0x7ae>
 800ca3c:	2340      	movs	r3, #64	@ 0x40
 800ca3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca42:	e0c2      	b.n	800cbca <UART_SetConfig+0x7ae>
 800ca44:	2380      	movs	r3, #128	@ 0x80
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca4a:	e0be      	b.n	800cbca <UART_SetConfig+0x7ae>
 800ca4c:	40011400 	.word	0x40011400
 800ca50:	58024400 	.word	0x58024400
 800ca54:	40007800 	.word	0x40007800
 800ca58:	40007c00 	.word	0x40007c00
 800ca5c:	40011800 	.word	0x40011800
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4aad      	ldr	r2, [pc, #692]	@ (800cd1c <UART_SetConfig+0x900>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d176      	bne.n	800cb58 <UART_SetConfig+0x73c>
 800ca6a:	4bad      	ldr	r3, [pc, #692]	@ (800cd20 <UART_SetConfig+0x904>)
 800ca6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca72:	2b28      	cmp	r3, #40	@ 0x28
 800ca74:	d86c      	bhi.n	800cb50 <UART_SetConfig+0x734>
 800ca76:	a201      	add	r2, pc, #4	@ (adr r2, 800ca7c <UART_SetConfig+0x660>)
 800ca78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7c:	0800cb21 	.word	0x0800cb21
 800ca80:	0800cb51 	.word	0x0800cb51
 800ca84:	0800cb51 	.word	0x0800cb51
 800ca88:	0800cb51 	.word	0x0800cb51
 800ca8c:	0800cb51 	.word	0x0800cb51
 800ca90:	0800cb51 	.word	0x0800cb51
 800ca94:	0800cb51 	.word	0x0800cb51
 800ca98:	0800cb51 	.word	0x0800cb51
 800ca9c:	0800cb29 	.word	0x0800cb29
 800caa0:	0800cb51 	.word	0x0800cb51
 800caa4:	0800cb51 	.word	0x0800cb51
 800caa8:	0800cb51 	.word	0x0800cb51
 800caac:	0800cb51 	.word	0x0800cb51
 800cab0:	0800cb51 	.word	0x0800cb51
 800cab4:	0800cb51 	.word	0x0800cb51
 800cab8:	0800cb51 	.word	0x0800cb51
 800cabc:	0800cb31 	.word	0x0800cb31
 800cac0:	0800cb51 	.word	0x0800cb51
 800cac4:	0800cb51 	.word	0x0800cb51
 800cac8:	0800cb51 	.word	0x0800cb51
 800cacc:	0800cb51 	.word	0x0800cb51
 800cad0:	0800cb51 	.word	0x0800cb51
 800cad4:	0800cb51 	.word	0x0800cb51
 800cad8:	0800cb51 	.word	0x0800cb51
 800cadc:	0800cb39 	.word	0x0800cb39
 800cae0:	0800cb51 	.word	0x0800cb51
 800cae4:	0800cb51 	.word	0x0800cb51
 800cae8:	0800cb51 	.word	0x0800cb51
 800caec:	0800cb51 	.word	0x0800cb51
 800caf0:	0800cb51 	.word	0x0800cb51
 800caf4:	0800cb51 	.word	0x0800cb51
 800caf8:	0800cb51 	.word	0x0800cb51
 800cafc:	0800cb41 	.word	0x0800cb41
 800cb00:	0800cb51 	.word	0x0800cb51
 800cb04:	0800cb51 	.word	0x0800cb51
 800cb08:	0800cb51 	.word	0x0800cb51
 800cb0c:	0800cb51 	.word	0x0800cb51
 800cb10:	0800cb51 	.word	0x0800cb51
 800cb14:	0800cb51 	.word	0x0800cb51
 800cb18:	0800cb51 	.word	0x0800cb51
 800cb1c:	0800cb49 	.word	0x0800cb49
 800cb20:	2301      	movs	r3, #1
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb26:	e050      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb28:	2304      	movs	r3, #4
 800cb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2e:	e04c      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb30:	2308      	movs	r3, #8
 800cb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb36:	e048      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb38:	2310      	movs	r3, #16
 800cb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3e:	e044      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb40:	2320      	movs	r3, #32
 800cb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb46:	e040      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb48:	2340      	movs	r3, #64	@ 0x40
 800cb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4e:	e03c      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb50:	2380      	movs	r3, #128	@ 0x80
 800cb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb56:	e038      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a71      	ldr	r2, [pc, #452]	@ (800cd24 <UART_SetConfig+0x908>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d130      	bne.n	800cbc4 <UART_SetConfig+0x7a8>
 800cb62:	4b6f      	ldr	r3, [pc, #444]	@ (800cd20 <UART_SetConfig+0x904>)
 800cb64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b05      	cmp	r3, #5
 800cb6c:	d826      	bhi.n	800cbbc <UART_SetConfig+0x7a0>
 800cb6e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb74 <UART_SetConfig+0x758>)
 800cb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb74:	0800cb8d 	.word	0x0800cb8d
 800cb78:	0800cb95 	.word	0x0800cb95
 800cb7c:	0800cb9d 	.word	0x0800cb9d
 800cb80:	0800cba5 	.word	0x0800cba5
 800cb84:	0800cbad 	.word	0x0800cbad
 800cb88:	0800cbb5 	.word	0x0800cbb5
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb92:	e01a      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb94:	2304      	movs	r3, #4
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9a:	e016      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cb9c:	2308      	movs	r3, #8
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba2:	e012      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cba4:	2310      	movs	r3, #16
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbaa:	e00e      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cbac:	2320      	movs	r3, #32
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb2:	e00a      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cbb4:	2340      	movs	r3, #64	@ 0x40
 800cbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbba:	e006      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cbbc:	2380      	movs	r3, #128	@ 0x80
 800cbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbc2:	e002      	b.n	800cbca <UART_SetConfig+0x7ae>
 800cbc4:	2380      	movs	r3, #128	@ 0x80
 800cbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a55      	ldr	r2, [pc, #340]	@ (800cd24 <UART_SetConfig+0x908>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	f040 80f8 	bne.w	800cdc6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cbd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cbda:	2b20      	cmp	r3, #32
 800cbdc:	dc46      	bgt.n	800cc6c <UART_SetConfig+0x850>
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	db75      	blt.n	800ccce <UART_SetConfig+0x8b2>
 800cbe2:	3b02      	subs	r3, #2
 800cbe4:	2b1e      	cmp	r3, #30
 800cbe6:	d872      	bhi.n	800ccce <UART_SetConfig+0x8b2>
 800cbe8:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf0 <UART_SetConfig+0x7d4>)
 800cbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbee:	bf00      	nop
 800cbf0:	0800cc73 	.word	0x0800cc73
 800cbf4:	0800cccf 	.word	0x0800cccf
 800cbf8:	0800cc7b 	.word	0x0800cc7b
 800cbfc:	0800cccf 	.word	0x0800cccf
 800cc00:	0800cccf 	.word	0x0800cccf
 800cc04:	0800cccf 	.word	0x0800cccf
 800cc08:	0800cc8b 	.word	0x0800cc8b
 800cc0c:	0800cccf 	.word	0x0800cccf
 800cc10:	0800cccf 	.word	0x0800cccf
 800cc14:	0800cccf 	.word	0x0800cccf
 800cc18:	0800cccf 	.word	0x0800cccf
 800cc1c:	0800cccf 	.word	0x0800cccf
 800cc20:	0800cccf 	.word	0x0800cccf
 800cc24:	0800cccf 	.word	0x0800cccf
 800cc28:	0800cc9b 	.word	0x0800cc9b
 800cc2c:	0800cccf 	.word	0x0800cccf
 800cc30:	0800cccf 	.word	0x0800cccf
 800cc34:	0800cccf 	.word	0x0800cccf
 800cc38:	0800cccf 	.word	0x0800cccf
 800cc3c:	0800cccf 	.word	0x0800cccf
 800cc40:	0800cccf 	.word	0x0800cccf
 800cc44:	0800cccf 	.word	0x0800cccf
 800cc48:	0800cccf 	.word	0x0800cccf
 800cc4c:	0800cccf 	.word	0x0800cccf
 800cc50:	0800cccf 	.word	0x0800cccf
 800cc54:	0800cccf 	.word	0x0800cccf
 800cc58:	0800cccf 	.word	0x0800cccf
 800cc5c:	0800cccf 	.word	0x0800cccf
 800cc60:	0800cccf 	.word	0x0800cccf
 800cc64:	0800cccf 	.word	0x0800cccf
 800cc68:	0800ccc1 	.word	0x0800ccc1
 800cc6c:	2b40      	cmp	r3, #64	@ 0x40
 800cc6e:	d02a      	beq.n	800ccc6 <UART_SetConfig+0x8aa>
 800cc70:	e02d      	b.n	800ccce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cc72:	f7fc f87f 	bl	8008d74 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc78:	e02f      	b.n	800ccda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fc f88e 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc88:	e027      	b.n	800ccda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc8a:	f107 0318 	add.w	r3, r7, #24
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fc f9da 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc98:	e01f      	b.n	800ccda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc9a:	4b21      	ldr	r3, [pc, #132]	@ (800cd20 <UART_SetConfig+0x904>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f003 0320 	and.w	r3, r3, #32
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d009      	beq.n	800ccba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cca6:	4b1e      	ldr	r3, [pc, #120]	@ (800cd20 <UART_SetConfig+0x904>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	08db      	lsrs	r3, r3, #3
 800ccac:	f003 0303 	and.w	r3, r3, #3
 800ccb0:	4a1d      	ldr	r2, [pc, #116]	@ (800cd28 <UART_SetConfig+0x90c>)
 800ccb2:	fa22 f303 	lsr.w	r3, r2, r3
 800ccb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ccb8:	e00f      	b.n	800ccda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ccba:	4b1b      	ldr	r3, [pc, #108]	@ (800cd28 <UART_SetConfig+0x90c>)
 800ccbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccbe:	e00c      	b.n	800ccda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd2c <UART_SetConfig+0x910>)
 800ccc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccc4:	e009      	b.n	800ccda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cccc:	e005      	b.n	800ccda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ccd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ccda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 81ee 	beq.w	800d0be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce6:	4a12      	ldr	r2, [pc, #72]	@ (800cd30 <UART_SetConfig+0x914>)
 800cce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccec:	461a      	mov	r2, r3
 800ccee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccf4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	685a      	ldr	r2, [r3, #4]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	005b      	lsls	r3, r3, #1
 800ccfe:	4413      	add	r3, r2
 800cd00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d305      	bcc.n	800cd12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d910      	bls.n	800cd34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cd18:	e1d1      	b.n	800d0be <UART_SetConfig+0xca2>
 800cd1a:	bf00      	nop
 800cd1c:	40011c00 	.word	0x40011c00
 800cd20:	58024400 	.word	0x58024400
 800cd24:	58000c00 	.word	0x58000c00
 800cd28:	03d09000 	.word	0x03d09000
 800cd2c:	003d0900 	.word	0x003d0900
 800cd30:	08013754 	.word	0x08013754
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd36:	2200      	movs	r2, #0
 800cd38:	60bb      	str	r3, [r7, #8]
 800cd3a:	60fa      	str	r2, [r7, #12]
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd40:	4ac0      	ldr	r2, [pc, #768]	@ (800d044 <UART_SetConfig+0xc28>)
 800cd42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	2200      	movs	r2, #0
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	607a      	str	r2, [r7, #4]
 800cd4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd56:	f7f3 fcef 	bl	8000738 <__aeabi_uldivmod>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	4610      	mov	r0, r2
 800cd60:	4619      	mov	r1, r3
 800cd62:	f04f 0200 	mov.w	r2, #0
 800cd66:	f04f 0300 	mov.w	r3, #0
 800cd6a:	020b      	lsls	r3, r1, #8
 800cd6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cd70:	0202      	lsls	r2, r0, #8
 800cd72:	6979      	ldr	r1, [r7, #20]
 800cd74:	6849      	ldr	r1, [r1, #4]
 800cd76:	0849      	lsrs	r1, r1, #1
 800cd78:	2000      	movs	r0, #0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	eb12 0804 	adds.w	r8, r2, r4
 800cd82:	eb43 0905 	adc.w	r9, r3, r5
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	469a      	mov	sl, r3
 800cd8e:	4693      	mov	fp, r2
 800cd90:	4652      	mov	r2, sl
 800cd92:	465b      	mov	r3, fp
 800cd94:	4640      	mov	r0, r8
 800cd96:	4649      	mov	r1, r9
 800cd98:	f7f3 fcce 	bl	8000738 <__aeabi_uldivmod>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4613      	mov	r3, r2
 800cda2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdaa:	d308      	bcc.n	800cdbe <UART_SetConfig+0x9a2>
 800cdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdb2:	d204      	bcs.n	800cdbe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cdba:	60da      	str	r2, [r3, #12]
 800cdbc:	e17f      	b.n	800d0be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cdc4:	e17b      	b.n	800d0be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	69db      	ldr	r3, [r3, #28]
 800cdca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdce:	f040 80bd 	bne.w	800cf4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cdd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cdd6:	2b20      	cmp	r3, #32
 800cdd8:	dc48      	bgt.n	800ce6c <UART_SetConfig+0xa50>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	db7b      	blt.n	800ced6 <UART_SetConfig+0xaba>
 800cdde:	2b20      	cmp	r3, #32
 800cde0:	d879      	bhi.n	800ced6 <UART_SetConfig+0xaba>
 800cde2:	a201      	add	r2, pc, #4	@ (adr r2, 800cde8 <UART_SetConfig+0x9cc>)
 800cde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde8:	0800ce73 	.word	0x0800ce73
 800cdec:	0800ce7b 	.word	0x0800ce7b
 800cdf0:	0800ced7 	.word	0x0800ced7
 800cdf4:	0800ced7 	.word	0x0800ced7
 800cdf8:	0800ce83 	.word	0x0800ce83
 800cdfc:	0800ced7 	.word	0x0800ced7
 800ce00:	0800ced7 	.word	0x0800ced7
 800ce04:	0800ced7 	.word	0x0800ced7
 800ce08:	0800ce93 	.word	0x0800ce93
 800ce0c:	0800ced7 	.word	0x0800ced7
 800ce10:	0800ced7 	.word	0x0800ced7
 800ce14:	0800ced7 	.word	0x0800ced7
 800ce18:	0800ced7 	.word	0x0800ced7
 800ce1c:	0800ced7 	.word	0x0800ced7
 800ce20:	0800ced7 	.word	0x0800ced7
 800ce24:	0800ced7 	.word	0x0800ced7
 800ce28:	0800cea3 	.word	0x0800cea3
 800ce2c:	0800ced7 	.word	0x0800ced7
 800ce30:	0800ced7 	.word	0x0800ced7
 800ce34:	0800ced7 	.word	0x0800ced7
 800ce38:	0800ced7 	.word	0x0800ced7
 800ce3c:	0800ced7 	.word	0x0800ced7
 800ce40:	0800ced7 	.word	0x0800ced7
 800ce44:	0800ced7 	.word	0x0800ced7
 800ce48:	0800ced7 	.word	0x0800ced7
 800ce4c:	0800ced7 	.word	0x0800ced7
 800ce50:	0800ced7 	.word	0x0800ced7
 800ce54:	0800ced7 	.word	0x0800ced7
 800ce58:	0800ced7 	.word	0x0800ced7
 800ce5c:	0800ced7 	.word	0x0800ced7
 800ce60:	0800ced7 	.word	0x0800ced7
 800ce64:	0800ced7 	.word	0x0800ced7
 800ce68:	0800cec9 	.word	0x0800cec9
 800ce6c:	2b40      	cmp	r3, #64	@ 0x40
 800ce6e:	d02e      	beq.n	800cece <UART_SetConfig+0xab2>
 800ce70:	e031      	b.n	800ced6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce72:	f7fa f8e1 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 800ce76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ce78:	e033      	b.n	800cee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce7a:	f7fa f8f3 	bl	8007064 <HAL_RCC_GetPCLK2Freq>
 800ce7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ce80:	e02f      	b.n	800cee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fb ff8a 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce90:	e027      	b.n	800cee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce92:	f107 0318 	add.w	r3, r7, #24
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fc f8d6 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cea0:	e01f      	b.n	800cee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cea2:	4b69      	ldr	r3, [pc, #420]	@ (800d048 <UART_SetConfig+0xc2c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0320 	and.w	r3, r3, #32
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d009      	beq.n	800cec2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceae:	4b66      	ldr	r3, [pc, #408]	@ (800d048 <UART_SetConfig+0xc2c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	08db      	lsrs	r3, r3, #3
 800ceb4:	f003 0303 	and.w	r3, r3, #3
 800ceb8:	4a64      	ldr	r2, [pc, #400]	@ (800d04c <UART_SetConfig+0xc30>)
 800ceba:	fa22 f303 	lsr.w	r3, r2, r3
 800cebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cec0:	e00f      	b.n	800cee2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cec2:	4b62      	ldr	r3, [pc, #392]	@ (800d04c <UART_SetConfig+0xc30>)
 800cec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cec6:	e00c      	b.n	800cee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cec8:	4b61      	ldr	r3, [pc, #388]	@ (800d050 <UART_SetConfig+0xc34>)
 800ceca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cecc:	e009      	b.n	800cee2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ced2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ced4:	e005      	b.n	800cee2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ced6:	2300      	movs	r3, #0
 800ced8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cee0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 80ea 	beq.w	800d0be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceee:	4a55      	ldr	r2, [pc, #340]	@ (800d044 <UART_SetConfig+0xc28>)
 800cef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cef4:	461a      	mov	r2, r3
 800cef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cefc:	005a      	lsls	r2, r3, #1
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	085b      	lsrs	r3, r3, #1
 800cf04:	441a      	add	r2, r3
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf12:	2b0f      	cmp	r3, #15
 800cf14:	d916      	bls.n	800cf44 <UART_SetConfig+0xb28>
 800cf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf1c:	d212      	bcs.n	800cf44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	f023 030f 	bic.w	r3, r3, #15
 800cf26:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2a:	085b      	lsrs	r3, r3, #1
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf36:	4313      	orrs	r3, r2
 800cf38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cf40:	60da      	str	r2, [r3, #12]
 800cf42:	e0bc      	b.n	800d0be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf4a:	e0b8      	b.n	800d0be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf50:	2b20      	cmp	r3, #32
 800cf52:	dc4b      	bgt.n	800cfec <UART_SetConfig+0xbd0>
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f2c0 8087 	blt.w	800d068 <UART_SetConfig+0xc4c>
 800cf5a:	2b20      	cmp	r3, #32
 800cf5c:	f200 8084 	bhi.w	800d068 <UART_SetConfig+0xc4c>
 800cf60:	a201      	add	r2, pc, #4	@ (adr r2, 800cf68 <UART_SetConfig+0xb4c>)
 800cf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf66:	bf00      	nop
 800cf68:	0800cff3 	.word	0x0800cff3
 800cf6c:	0800cffb 	.word	0x0800cffb
 800cf70:	0800d069 	.word	0x0800d069
 800cf74:	0800d069 	.word	0x0800d069
 800cf78:	0800d003 	.word	0x0800d003
 800cf7c:	0800d069 	.word	0x0800d069
 800cf80:	0800d069 	.word	0x0800d069
 800cf84:	0800d069 	.word	0x0800d069
 800cf88:	0800d013 	.word	0x0800d013
 800cf8c:	0800d069 	.word	0x0800d069
 800cf90:	0800d069 	.word	0x0800d069
 800cf94:	0800d069 	.word	0x0800d069
 800cf98:	0800d069 	.word	0x0800d069
 800cf9c:	0800d069 	.word	0x0800d069
 800cfa0:	0800d069 	.word	0x0800d069
 800cfa4:	0800d069 	.word	0x0800d069
 800cfa8:	0800d023 	.word	0x0800d023
 800cfac:	0800d069 	.word	0x0800d069
 800cfb0:	0800d069 	.word	0x0800d069
 800cfb4:	0800d069 	.word	0x0800d069
 800cfb8:	0800d069 	.word	0x0800d069
 800cfbc:	0800d069 	.word	0x0800d069
 800cfc0:	0800d069 	.word	0x0800d069
 800cfc4:	0800d069 	.word	0x0800d069
 800cfc8:	0800d069 	.word	0x0800d069
 800cfcc:	0800d069 	.word	0x0800d069
 800cfd0:	0800d069 	.word	0x0800d069
 800cfd4:	0800d069 	.word	0x0800d069
 800cfd8:	0800d069 	.word	0x0800d069
 800cfdc:	0800d069 	.word	0x0800d069
 800cfe0:	0800d069 	.word	0x0800d069
 800cfe4:	0800d069 	.word	0x0800d069
 800cfe8:	0800d05b 	.word	0x0800d05b
 800cfec:	2b40      	cmp	r3, #64	@ 0x40
 800cfee:	d037      	beq.n	800d060 <UART_SetConfig+0xc44>
 800cff0:	e03a      	b.n	800d068 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cff2:	f7fa f821 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 800cff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cff8:	e03c      	b.n	800d074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cffa:	f7fa f833 	bl	8007064 <HAL_RCC_GetPCLK2Freq>
 800cffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d000:	e038      	b.n	800d074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d006:	4618      	mov	r0, r3
 800d008:	f7fb feca 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d010:	e030      	b.n	800d074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d012:	f107 0318 	add.w	r3, r7, #24
 800d016:	4618      	mov	r0, r3
 800d018:	f7fc f816 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d020:	e028      	b.n	800d074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d022:	4b09      	ldr	r3, [pc, #36]	@ (800d048 <UART_SetConfig+0xc2c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f003 0320 	and.w	r3, r3, #32
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d012      	beq.n	800d054 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d02e:	4b06      	ldr	r3, [pc, #24]	@ (800d048 <UART_SetConfig+0xc2c>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	08db      	lsrs	r3, r3, #3
 800d034:	f003 0303 	and.w	r3, r3, #3
 800d038:	4a04      	ldr	r2, [pc, #16]	@ (800d04c <UART_SetConfig+0xc30>)
 800d03a:	fa22 f303 	lsr.w	r3, r2, r3
 800d03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d040:	e018      	b.n	800d074 <UART_SetConfig+0xc58>
 800d042:	bf00      	nop
 800d044:	08013754 	.word	0x08013754
 800d048:	58024400 	.word	0x58024400
 800d04c:	03d09000 	.word	0x03d09000
 800d050:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d054:	4b24      	ldr	r3, [pc, #144]	@ (800d0e8 <UART_SetConfig+0xccc>)
 800d056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d058:	e00c      	b.n	800d074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d05a:	4b24      	ldr	r3, [pc, #144]	@ (800d0ec <UART_SetConfig+0xcd0>)
 800d05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d05e:	e009      	b.n	800d074 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d066:	e005      	b.n	800d074 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d072:	bf00      	nop
    }

    if (pclk != 0U)
 800d074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d076:	2b00      	cmp	r3, #0
 800d078:	d021      	beq.n	800d0be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d07e:	4a1c      	ldr	r2, [pc, #112]	@ (800d0f0 <UART_SetConfig+0xcd4>)
 800d080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d084:	461a      	mov	r2, r3
 800d086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d088:	fbb3 f2f2 	udiv	r2, r3, r2
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	085b      	lsrs	r3, r3, #1
 800d092:	441a      	add	r2, r3
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	fbb2 f3f3 	udiv	r3, r2, r3
 800d09c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a0:	2b0f      	cmp	r3, #15
 800d0a2:	d909      	bls.n	800d0b8 <UART_SetConfig+0xc9c>
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0aa:	d205      	bcs.n	800d0b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	60da      	str	r2, [r3, #12]
 800d0b6:	e002      	b.n	800d0be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d0da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3748      	adds	r7, #72	@ 0x48
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0e8:	03d09000 	.word	0x03d09000
 800d0ec:	003d0900 	.word	0x003d0900
 800d0f0:	08013754 	.word	0x08013754

0800d0f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d100:	f003 0308 	and.w	r3, r3, #8
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00a      	beq.n	800d11e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	430a      	orrs	r2, r1
 800d11c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00a      	beq.n	800d140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	430a      	orrs	r2, r1
 800d13e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d144:	f003 0302 	and.w	r3, r3, #2
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00a      	beq.n	800d162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	430a      	orrs	r2, r1
 800d160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d166:	f003 0304 	and.w	r3, r3, #4
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00a      	beq.n	800d184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	430a      	orrs	r2, r1
 800d182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d188:	f003 0310 	and.w	r3, r3, #16
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00a      	beq.n	800d1a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	430a      	orrs	r2, r1
 800d1a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1aa:	f003 0320 	and.w	r3, r3, #32
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00a      	beq.n	800d1c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	430a      	orrs	r2, r1
 800d1c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01a      	beq.n	800d20a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	430a      	orrs	r2, r1
 800d1e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1f2:	d10a      	bne.n	800d20a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	430a      	orrs	r2, r1
 800d22a:	605a      	str	r2, [r3, #4]
  }
}
 800d22c:	bf00      	nop
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b098      	sub	sp, #96	@ 0x60
 800d23c:	af02      	add	r7, sp, #8
 800d23e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d248:	f7f6 f9fc 	bl	8003644 <HAL_GetTick>
 800d24c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 0308 	and.w	r3, r3, #8
 800d258:	2b08      	cmp	r3, #8
 800d25a:	d12f      	bne.n	800d2bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d25c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d264:	2200      	movs	r2, #0
 800d266:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f88e 	bl	800d38c <UART_WaitOnFlagUntilTimeout>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d022      	beq.n	800d2bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27e:	e853 3f00 	ldrex	r3, [r3]
 800d282:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d28a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	461a      	mov	r2, r3
 800d292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d294:	647b      	str	r3, [r7, #68]	@ 0x44
 800d296:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d29c:	e841 2300 	strex	r3, r2, [r1]
 800d2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1e6      	bne.n	800d276 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2220      	movs	r2, #32
 800d2ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e063      	b.n	800d384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 0304 	and.w	r3, r3, #4
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	d149      	bne.n	800d35e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f857 	bl	800d38c <UART_WaitOnFlagUntilTimeout>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d03c      	beq.n	800d35e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ec:	e853 3f00 	ldrex	r3, [r3]
 800d2f0:	623b      	str	r3, [r7, #32]
   return(result);
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d302:	633b      	str	r3, [r7, #48]	@ 0x30
 800d304:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d30a:	e841 2300 	strex	r3, r2, [r1]
 800d30e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1e6      	bne.n	800d2e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3308      	adds	r3, #8
 800d31c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	e853 3f00 	ldrex	r3, [r3]
 800d324:	60fb      	str	r3, [r7, #12]
   return(result);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f023 0301 	bic.w	r3, r3, #1
 800d32c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	3308      	adds	r3, #8
 800d334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d336:	61fa      	str	r2, [r7, #28]
 800d338:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	69b9      	ldr	r1, [r7, #24]
 800d33c:	69fa      	ldr	r2, [r7, #28]
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	617b      	str	r3, [r7, #20]
   return(result);
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e5      	bne.n	800d316 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2220      	movs	r2, #32
 800d34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e012      	b.n	800d384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2220      	movs	r2, #32
 800d362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2220      	movs	r2, #32
 800d36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3758      	adds	r7, #88	@ 0x58
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	603b      	str	r3, [r7, #0]
 800d398:	4613      	mov	r3, r2
 800d39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d39c:	e04f      	b.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a4:	d04b      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3a6:	f7f6 f94d 	bl	8003644 <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	69ba      	ldr	r2, [r7, #24]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d302      	bcc.n	800d3bc <UART_WaitOnFlagUntilTimeout+0x30>
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e04e      	b.n	800d45e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d037      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2b80      	cmp	r3, #128	@ 0x80
 800d3d2:	d034      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2b40      	cmp	r3, #64	@ 0x40
 800d3d8:	d031      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69db      	ldr	r3, [r3, #28]
 800d3e0:	f003 0308 	and.w	r3, r3, #8
 800d3e4:	2b08      	cmp	r3, #8
 800d3e6:	d110      	bne.n	800d40a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2208      	movs	r2, #8
 800d3ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f000 f839 	bl	800d468 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2208      	movs	r2, #8
 800d3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e029      	b.n	800d45e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	69db      	ldr	r3, [r3, #28]
 800d410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d418:	d111      	bne.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f000 f81f 	bl	800d468 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2220      	movs	r2, #32
 800d42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d43a:	2303      	movs	r3, #3
 800d43c:	e00f      	b.n	800d45e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	69da      	ldr	r2, [r3, #28]
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	4013      	ands	r3, r2
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	bf0c      	ite	eq
 800d44e:	2301      	moveq	r3, #1
 800d450:	2300      	movne	r3, #0
 800d452:	b2db      	uxtb	r3, r3
 800d454:	461a      	mov	r2, r3
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d0a0      	beq.n	800d39e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
	...

0800d468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d468:	b480      	push	{r7}
 800d46a:	b095      	sub	sp, #84	@ 0x54
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d478:	e853 3f00 	ldrex	r3, [r3]
 800d47c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	461a      	mov	r2, r3
 800d48c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d48e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d490:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d492:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d496:	e841 2300 	strex	r3, r2, [r1]
 800d49a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e6      	bne.n	800d470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	3308      	adds	r3, #8
 800d4a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	e853 3f00 	ldrex	r3, [r3]
 800d4b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4b2:	69fa      	ldr	r2, [r7, #28]
 800d4b4:	4b1e      	ldr	r3, [pc, #120]	@ (800d530 <UART_EndRxTransfer+0xc8>)
 800d4b6:	4013      	ands	r3, r2
 800d4b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	3308      	adds	r3, #8
 800d4c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4ca:	e841 2300 	strex	r3, r2, [r1]
 800d4ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e5      	bne.n	800d4a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d118      	bne.n	800d510 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	e853 3f00 	ldrex	r3, [r3]
 800d4ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	f023 0310 	bic.w	r3, r3, #16
 800d4f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4fc:	61bb      	str	r3, [r7, #24]
 800d4fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d500:	6979      	ldr	r1, [r7, #20]
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	e841 2300 	strex	r3, r2, [r1]
 800d508:	613b      	str	r3, [r7, #16]
   return(result);
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e6      	bne.n	800d4de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2220      	movs	r2, #32
 800d514:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d524:	bf00      	nop
 800d526:	3754      	adds	r7, #84	@ 0x54
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	effffffe 	.word	0xeffffffe

0800d534 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2200      	movs	r2, #0
 800d546:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f7fe ff4c 	bl	800c3f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	e853 3f00 	ldrex	r3, [r3]
 800d574:	60bb      	str	r3, [r7, #8]
   return(result);
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d57c:	61fb      	str	r3, [r7, #28]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	461a      	mov	r2, r3
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	61bb      	str	r3, [r7, #24]
 800d588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58a:	6979      	ldr	r1, [r7, #20]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	e841 2300 	strex	r3, r2, [r1]
 800d592:	613b      	str	r3, [r7, #16]
   return(result);
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1e6      	bne.n	800d568 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2220      	movs	r2, #32
 800d59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7fe ff17 	bl	800c3dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ae:	bf00      	nop
 800d5b0:	3720      	adds	r7, #32
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	b083      	sub	sp, #12
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d5be:	bf00      	nop
 800d5c0:	370c      	adds	r7, #12
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr

0800d5ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d5ca:	b480      	push	{r7}
 800d5cc:	b083      	sub	sp, #12
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d5d2:	bf00      	nop
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b083      	sub	sp, #12
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b085      	sub	sp, #20
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d600:	2b01      	cmp	r3, #1
 800d602:	d101      	bne.n	800d608 <HAL_UARTEx_DisableFifoMode+0x16>
 800d604:	2302      	movs	r3, #2
 800d606:	e027      	b.n	800d658 <HAL_UARTEx_DisableFifoMode+0x66>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2224      	movs	r2, #36	@ 0x24
 800d614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 0201 	bic.w	r2, r2, #1
 800d62e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2220      	movs	r2, #32
 800d64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d674:	2b01      	cmp	r3, #1
 800d676:	d101      	bne.n	800d67c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d678:	2302      	movs	r3, #2
 800d67a:	e02d      	b.n	800d6d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2224      	movs	r2, #36	@ 0x24
 800d688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f022 0201 	bic.w	r2, r2, #1
 800d6a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	430a      	orrs	r2, r1
 800d6b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 f84f 	bl	800d75c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2220      	movs	r2, #32
 800d6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d101      	bne.n	800d6f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	e02d      	b.n	800d754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2224      	movs	r2, #36	@ 0x24
 800d704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f022 0201 	bic.w	r2, r2, #1
 800d71e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 f811 	bl	800d75c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2220      	movs	r2, #32
 800d746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d108      	bne.n	800d77e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d77c:	e031      	b.n	800d7e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d77e:	2310      	movs	r3, #16
 800d780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d782:	2310      	movs	r3, #16
 800d784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	0e5b      	lsrs	r3, r3, #25
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	f003 0307 	and.w	r3, r3, #7
 800d794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	0f5b      	lsrs	r3, r3, #29
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f003 0307 	and.w	r3, r3, #7
 800d7a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7a6:	7bbb      	ldrb	r3, [r7, #14]
 800d7a8:	7b3a      	ldrb	r2, [r7, #12]
 800d7aa:	4911      	ldr	r1, [pc, #68]	@ (800d7f0 <UARTEx_SetNbDataToProcess+0x94>)
 800d7ac:	5c8a      	ldrb	r2, [r1, r2]
 800d7ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d7b2:	7b3a      	ldrb	r2, [r7, #12]
 800d7b4:	490f      	ldr	r1, [pc, #60]	@ (800d7f4 <UARTEx_SetNbDataToProcess+0x98>)
 800d7b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
 800d7c6:	7b7a      	ldrb	r2, [r7, #13]
 800d7c8:	4909      	ldr	r1, [pc, #36]	@ (800d7f0 <UARTEx_SetNbDataToProcess+0x94>)
 800d7ca:	5c8a      	ldrb	r2, [r1, r2]
 800d7cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d7d0:	7b7a      	ldrb	r2, [r7, #13]
 800d7d2:	4908      	ldr	r1, [pc, #32]	@ (800d7f4 <UARTEx_SetNbDataToProcess+0x98>)
 800d7d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d7e2:	bf00      	nop
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	0801376c 	.word	0x0801376c
 800d7f4:	08013774 	.word	0x08013774

0800d7f8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d101      	bne.n	800d80a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e03c      	b.n	800d884 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7f5 fbfc 	bl	800301c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2202      	movs	r2, #2
 800d828:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f022 0201 	bic.w	r2, r2, #1
 800d83a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f85b 	bl	800d8f8 <USART_SetConfig>
 800d842:	4603      	mov	r3, r0
 800d844:	2b01      	cmp	r3, #1
 800d846:	d101      	bne.n	800d84c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	e01b      	b.n	800d884 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d85a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	689a      	ldr	r2, [r3, #8]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d86a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f042 0201 	orr.w	r2, r2, #1
 800d87a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fddd 	bl	800e43c <USART_CheckIdleState>
 800d882:	4603      	mov	r3, r0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	603b      	str	r3, [r7, #0]
 800d898:	4613      	mov	r3, r2
 800d89a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800d89c:	e018      	b.n	800d8d0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a4:	d014      	beq.n	800d8d0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8a6:	f7f5 fecd 	bl	8003644 <HAL_GetTick>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	69ba      	ldr	r2, [r7, #24]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d302      	bcc.n	800d8bc <USART_WaitOnFlagUntilTimeout+0x30>
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d109      	bne.n	800d8d0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	e00f      	b.n	800d8f0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	69da      	ldr	r2, [r3, #28]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	4013      	ands	r3, r2
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	bf0c      	ite	eq
 800d8e0:	2301      	moveq	r3, #1
 800d8e2:	2300      	movne	r3, #0
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	79fb      	ldrb	r3, [r7, #7]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d0d7      	beq.n	800d89e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b08e      	sub	sp, #56	@ 0x38
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800d906:	2300      	movs	r3, #0
 800d908:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	431a      	orrs	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	695b      	ldr	r3, [r3, #20]
 800d918:	4313      	orrs	r3, r2
 800d91a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	4bc9      	ldr	r3, [pc, #804]	@ (800dc4c <USART_SetConfig+0x354>)
 800d928:	4013      	ands	r3, r2
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6812      	ldr	r2, [r2, #0]
 800d92e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d930:	430b      	orrs	r3, r1
 800d932:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800d934:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d940:	4313      	orrs	r3, r2
 800d942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	699a      	ldr	r2, [r3, #24]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	69db      	ldr	r3, [r3, #28]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d950:	4313      	orrs	r3, r2
 800d952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d95a:	4313      	orrs	r3, r2
 800d95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	685a      	ldr	r2, [r3, #4]
 800d964:	4bba      	ldr	r3, [pc, #744]	@ (800dc50 <USART_SetConfig+0x358>)
 800d966:	4013      	ands	r3, r2
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	6812      	ldr	r2, [r2, #0]
 800d96c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d96e:	430b      	orrs	r3, r1
 800d970:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d978:	f023 010f 	bic.w	r1, r3, #15
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	430a      	orrs	r2, r1
 800d986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4ab1      	ldr	r2, [pc, #708]	@ (800dc54 <USART_SetConfig+0x35c>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d176      	bne.n	800da80 <USART_SetConfig+0x188>
 800d992:	4bb1      	ldr	r3, [pc, #708]	@ (800dc58 <USART_SetConfig+0x360>)
 800d994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d99a:	2b28      	cmp	r3, #40	@ 0x28
 800d99c:	d86c      	bhi.n	800da78 <USART_SetConfig+0x180>
 800d99e:	a201      	add	r2, pc, #4	@ (adr r2, 800d9a4 <USART_SetConfig+0xac>)
 800d9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a4:	0800da49 	.word	0x0800da49
 800d9a8:	0800da79 	.word	0x0800da79
 800d9ac:	0800da79 	.word	0x0800da79
 800d9b0:	0800da79 	.word	0x0800da79
 800d9b4:	0800da79 	.word	0x0800da79
 800d9b8:	0800da79 	.word	0x0800da79
 800d9bc:	0800da79 	.word	0x0800da79
 800d9c0:	0800da79 	.word	0x0800da79
 800d9c4:	0800da51 	.word	0x0800da51
 800d9c8:	0800da79 	.word	0x0800da79
 800d9cc:	0800da79 	.word	0x0800da79
 800d9d0:	0800da79 	.word	0x0800da79
 800d9d4:	0800da79 	.word	0x0800da79
 800d9d8:	0800da79 	.word	0x0800da79
 800d9dc:	0800da79 	.word	0x0800da79
 800d9e0:	0800da79 	.word	0x0800da79
 800d9e4:	0800da59 	.word	0x0800da59
 800d9e8:	0800da79 	.word	0x0800da79
 800d9ec:	0800da79 	.word	0x0800da79
 800d9f0:	0800da79 	.word	0x0800da79
 800d9f4:	0800da79 	.word	0x0800da79
 800d9f8:	0800da79 	.word	0x0800da79
 800d9fc:	0800da79 	.word	0x0800da79
 800da00:	0800da79 	.word	0x0800da79
 800da04:	0800da61 	.word	0x0800da61
 800da08:	0800da79 	.word	0x0800da79
 800da0c:	0800da79 	.word	0x0800da79
 800da10:	0800da79 	.word	0x0800da79
 800da14:	0800da79 	.word	0x0800da79
 800da18:	0800da79 	.word	0x0800da79
 800da1c:	0800da79 	.word	0x0800da79
 800da20:	0800da79 	.word	0x0800da79
 800da24:	0800da69 	.word	0x0800da69
 800da28:	0800da79 	.word	0x0800da79
 800da2c:	0800da79 	.word	0x0800da79
 800da30:	0800da79 	.word	0x0800da79
 800da34:	0800da79 	.word	0x0800da79
 800da38:	0800da79 	.word	0x0800da79
 800da3c:	0800da79 	.word	0x0800da79
 800da40:	0800da79 	.word	0x0800da79
 800da44:	0800da71 	.word	0x0800da71
 800da48:	2301      	movs	r3, #1
 800da4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da4e:	e18e      	b.n	800dd6e <USART_SetConfig+0x476>
 800da50:	2302      	movs	r3, #2
 800da52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da56:	e18a      	b.n	800dd6e <USART_SetConfig+0x476>
 800da58:	2304      	movs	r3, #4
 800da5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da5e:	e186      	b.n	800dd6e <USART_SetConfig+0x476>
 800da60:	2308      	movs	r3, #8
 800da62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da66:	e182      	b.n	800dd6e <USART_SetConfig+0x476>
 800da68:	2310      	movs	r3, #16
 800da6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da6e:	e17e      	b.n	800dd6e <USART_SetConfig+0x476>
 800da70:	2320      	movs	r3, #32
 800da72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da76:	e17a      	b.n	800dd6e <USART_SetConfig+0x476>
 800da78:	2340      	movs	r3, #64	@ 0x40
 800da7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da7e:	e176      	b.n	800dd6e <USART_SetConfig+0x476>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a75      	ldr	r2, [pc, #468]	@ (800dc5c <USART_SetConfig+0x364>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d130      	bne.n	800daec <USART_SetConfig+0x1f4>
 800da8a:	4b73      	ldr	r3, [pc, #460]	@ (800dc58 <USART_SetConfig+0x360>)
 800da8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da8e:	f003 0307 	and.w	r3, r3, #7
 800da92:	2b05      	cmp	r3, #5
 800da94:	d826      	bhi.n	800dae4 <USART_SetConfig+0x1ec>
 800da96:	a201      	add	r2, pc, #4	@ (adr r2, 800da9c <USART_SetConfig+0x1a4>)
 800da98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9c:	0800dab5 	.word	0x0800dab5
 800daa0:	0800dabd 	.word	0x0800dabd
 800daa4:	0800dac5 	.word	0x0800dac5
 800daa8:	0800dacd 	.word	0x0800dacd
 800daac:	0800dad5 	.word	0x0800dad5
 800dab0:	0800dadd 	.word	0x0800dadd
 800dab4:	2300      	movs	r3, #0
 800dab6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800daba:	e158      	b.n	800dd6e <USART_SetConfig+0x476>
 800dabc:	2302      	movs	r3, #2
 800dabe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dac2:	e154      	b.n	800dd6e <USART_SetConfig+0x476>
 800dac4:	2304      	movs	r3, #4
 800dac6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800daca:	e150      	b.n	800dd6e <USART_SetConfig+0x476>
 800dacc:	2308      	movs	r3, #8
 800dace:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dad2:	e14c      	b.n	800dd6e <USART_SetConfig+0x476>
 800dad4:	2310      	movs	r3, #16
 800dad6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dada:	e148      	b.n	800dd6e <USART_SetConfig+0x476>
 800dadc:	2320      	movs	r3, #32
 800dade:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dae2:	e144      	b.n	800dd6e <USART_SetConfig+0x476>
 800dae4:	2340      	movs	r3, #64	@ 0x40
 800dae6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800daea:	e140      	b.n	800dd6e <USART_SetConfig+0x476>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a5b      	ldr	r2, [pc, #364]	@ (800dc60 <USART_SetConfig+0x368>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d130      	bne.n	800db58 <USART_SetConfig+0x260>
 800daf6:	4b58      	ldr	r3, [pc, #352]	@ (800dc58 <USART_SetConfig+0x360>)
 800daf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dafa:	f003 0307 	and.w	r3, r3, #7
 800dafe:	2b05      	cmp	r3, #5
 800db00:	d826      	bhi.n	800db50 <USART_SetConfig+0x258>
 800db02:	a201      	add	r2, pc, #4	@ (adr r2, 800db08 <USART_SetConfig+0x210>)
 800db04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db08:	0800db21 	.word	0x0800db21
 800db0c:	0800db29 	.word	0x0800db29
 800db10:	0800db31 	.word	0x0800db31
 800db14:	0800db39 	.word	0x0800db39
 800db18:	0800db41 	.word	0x0800db41
 800db1c:	0800db49 	.word	0x0800db49
 800db20:	2300      	movs	r3, #0
 800db22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800db26:	e122      	b.n	800dd6e <USART_SetConfig+0x476>
 800db28:	2302      	movs	r3, #2
 800db2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800db2e:	e11e      	b.n	800dd6e <USART_SetConfig+0x476>
 800db30:	2304      	movs	r3, #4
 800db32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800db36:	e11a      	b.n	800dd6e <USART_SetConfig+0x476>
 800db38:	2308      	movs	r3, #8
 800db3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800db3e:	e116      	b.n	800dd6e <USART_SetConfig+0x476>
 800db40:	2310      	movs	r3, #16
 800db42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800db46:	e112      	b.n	800dd6e <USART_SetConfig+0x476>
 800db48:	2320      	movs	r3, #32
 800db4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800db4e:	e10e      	b.n	800dd6e <USART_SetConfig+0x476>
 800db50:	2340      	movs	r3, #64	@ 0x40
 800db52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800db56:	e10a      	b.n	800dd6e <USART_SetConfig+0x476>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a41      	ldr	r2, [pc, #260]	@ (800dc64 <USART_SetConfig+0x36c>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	f040 8086 	bne.w	800dc70 <USART_SetConfig+0x378>
 800db64:	4b3c      	ldr	r3, [pc, #240]	@ (800dc58 <USART_SetConfig+0x360>)
 800db66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db6c:	2b28      	cmp	r3, #40	@ 0x28
 800db6e:	d87b      	bhi.n	800dc68 <USART_SetConfig+0x370>
 800db70:	a201      	add	r2, pc, #4	@ (adr r2, 800db78 <USART_SetConfig+0x280>)
 800db72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db76:	bf00      	nop
 800db78:	0800dc1d 	.word	0x0800dc1d
 800db7c:	0800dc69 	.word	0x0800dc69
 800db80:	0800dc69 	.word	0x0800dc69
 800db84:	0800dc69 	.word	0x0800dc69
 800db88:	0800dc69 	.word	0x0800dc69
 800db8c:	0800dc69 	.word	0x0800dc69
 800db90:	0800dc69 	.word	0x0800dc69
 800db94:	0800dc69 	.word	0x0800dc69
 800db98:	0800dc25 	.word	0x0800dc25
 800db9c:	0800dc69 	.word	0x0800dc69
 800dba0:	0800dc69 	.word	0x0800dc69
 800dba4:	0800dc69 	.word	0x0800dc69
 800dba8:	0800dc69 	.word	0x0800dc69
 800dbac:	0800dc69 	.word	0x0800dc69
 800dbb0:	0800dc69 	.word	0x0800dc69
 800dbb4:	0800dc69 	.word	0x0800dc69
 800dbb8:	0800dc2d 	.word	0x0800dc2d
 800dbbc:	0800dc69 	.word	0x0800dc69
 800dbc0:	0800dc69 	.word	0x0800dc69
 800dbc4:	0800dc69 	.word	0x0800dc69
 800dbc8:	0800dc69 	.word	0x0800dc69
 800dbcc:	0800dc69 	.word	0x0800dc69
 800dbd0:	0800dc69 	.word	0x0800dc69
 800dbd4:	0800dc69 	.word	0x0800dc69
 800dbd8:	0800dc35 	.word	0x0800dc35
 800dbdc:	0800dc69 	.word	0x0800dc69
 800dbe0:	0800dc69 	.word	0x0800dc69
 800dbe4:	0800dc69 	.word	0x0800dc69
 800dbe8:	0800dc69 	.word	0x0800dc69
 800dbec:	0800dc69 	.word	0x0800dc69
 800dbf0:	0800dc69 	.word	0x0800dc69
 800dbf4:	0800dc69 	.word	0x0800dc69
 800dbf8:	0800dc3d 	.word	0x0800dc3d
 800dbfc:	0800dc69 	.word	0x0800dc69
 800dc00:	0800dc69 	.word	0x0800dc69
 800dc04:	0800dc69 	.word	0x0800dc69
 800dc08:	0800dc69 	.word	0x0800dc69
 800dc0c:	0800dc69 	.word	0x0800dc69
 800dc10:	0800dc69 	.word	0x0800dc69
 800dc14:	0800dc69 	.word	0x0800dc69
 800dc18:	0800dc45 	.word	0x0800dc45
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc22:	e0a4      	b.n	800dd6e <USART_SetConfig+0x476>
 800dc24:	2302      	movs	r3, #2
 800dc26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc2a:	e0a0      	b.n	800dd6e <USART_SetConfig+0x476>
 800dc2c:	2304      	movs	r3, #4
 800dc2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc32:	e09c      	b.n	800dd6e <USART_SetConfig+0x476>
 800dc34:	2308      	movs	r3, #8
 800dc36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc3a:	e098      	b.n	800dd6e <USART_SetConfig+0x476>
 800dc3c:	2310      	movs	r3, #16
 800dc3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc42:	e094      	b.n	800dd6e <USART_SetConfig+0x476>
 800dc44:	2320      	movs	r3, #32
 800dc46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc4a:	e090      	b.n	800dd6e <USART_SetConfig+0x476>
 800dc4c:	cfff69f3 	.word	0xcfff69f3
 800dc50:	ffffc0f6 	.word	0xffffc0f6
 800dc54:	40011000 	.word	0x40011000
 800dc58:	58024400 	.word	0x58024400
 800dc5c:	40004400 	.word	0x40004400
 800dc60:	40004800 	.word	0x40004800
 800dc64:	40011400 	.word	0x40011400
 800dc68:	2340      	movs	r3, #64	@ 0x40
 800dc6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dc6e:	e07e      	b.n	800dd6e <USART_SetConfig+0x476>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4ab5      	ldr	r2, [pc, #724]	@ (800df4c <USART_SetConfig+0x654>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d176      	bne.n	800dd68 <USART_SetConfig+0x470>
 800dc7a:	4bb5      	ldr	r3, [pc, #724]	@ (800df50 <USART_SetConfig+0x658>)
 800dc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc82:	2b28      	cmp	r3, #40	@ 0x28
 800dc84:	d86c      	bhi.n	800dd60 <USART_SetConfig+0x468>
 800dc86:	a201      	add	r2, pc, #4	@ (adr r2, 800dc8c <USART_SetConfig+0x394>)
 800dc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8c:	0800dd31 	.word	0x0800dd31
 800dc90:	0800dd61 	.word	0x0800dd61
 800dc94:	0800dd61 	.word	0x0800dd61
 800dc98:	0800dd61 	.word	0x0800dd61
 800dc9c:	0800dd61 	.word	0x0800dd61
 800dca0:	0800dd61 	.word	0x0800dd61
 800dca4:	0800dd61 	.word	0x0800dd61
 800dca8:	0800dd61 	.word	0x0800dd61
 800dcac:	0800dd39 	.word	0x0800dd39
 800dcb0:	0800dd61 	.word	0x0800dd61
 800dcb4:	0800dd61 	.word	0x0800dd61
 800dcb8:	0800dd61 	.word	0x0800dd61
 800dcbc:	0800dd61 	.word	0x0800dd61
 800dcc0:	0800dd61 	.word	0x0800dd61
 800dcc4:	0800dd61 	.word	0x0800dd61
 800dcc8:	0800dd61 	.word	0x0800dd61
 800dccc:	0800dd41 	.word	0x0800dd41
 800dcd0:	0800dd61 	.word	0x0800dd61
 800dcd4:	0800dd61 	.word	0x0800dd61
 800dcd8:	0800dd61 	.word	0x0800dd61
 800dcdc:	0800dd61 	.word	0x0800dd61
 800dce0:	0800dd61 	.word	0x0800dd61
 800dce4:	0800dd61 	.word	0x0800dd61
 800dce8:	0800dd61 	.word	0x0800dd61
 800dcec:	0800dd49 	.word	0x0800dd49
 800dcf0:	0800dd61 	.word	0x0800dd61
 800dcf4:	0800dd61 	.word	0x0800dd61
 800dcf8:	0800dd61 	.word	0x0800dd61
 800dcfc:	0800dd61 	.word	0x0800dd61
 800dd00:	0800dd61 	.word	0x0800dd61
 800dd04:	0800dd61 	.word	0x0800dd61
 800dd08:	0800dd61 	.word	0x0800dd61
 800dd0c:	0800dd51 	.word	0x0800dd51
 800dd10:	0800dd61 	.word	0x0800dd61
 800dd14:	0800dd61 	.word	0x0800dd61
 800dd18:	0800dd61 	.word	0x0800dd61
 800dd1c:	0800dd61 	.word	0x0800dd61
 800dd20:	0800dd61 	.word	0x0800dd61
 800dd24:	0800dd61 	.word	0x0800dd61
 800dd28:	0800dd61 	.word	0x0800dd61
 800dd2c:	0800dd59 	.word	0x0800dd59
 800dd30:	2301      	movs	r3, #1
 800dd32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd36:	e01a      	b.n	800dd6e <USART_SetConfig+0x476>
 800dd38:	2302      	movs	r3, #2
 800dd3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd3e:	e016      	b.n	800dd6e <USART_SetConfig+0x476>
 800dd40:	2304      	movs	r3, #4
 800dd42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd46:	e012      	b.n	800dd6e <USART_SetConfig+0x476>
 800dd48:	2308      	movs	r3, #8
 800dd4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd4e:	e00e      	b.n	800dd6e <USART_SetConfig+0x476>
 800dd50:	2310      	movs	r3, #16
 800dd52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd56:	e00a      	b.n	800dd6e <USART_SetConfig+0x476>
 800dd58:	2320      	movs	r3, #32
 800dd5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd5e:	e006      	b.n	800dd6e <USART_SetConfig+0x476>
 800dd60:	2340      	movs	r3, #64	@ 0x40
 800dd62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd66:	e002      	b.n	800dd6e <USART_SetConfig+0x476>
 800dd68:	2340      	movs	r3, #64	@ 0x40
 800dd6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800dd6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd72:	2b20      	cmp	r3, #32
 800dd74:	f200 832f 	bhi.w	800e3d6 <USART_SetConfig+0xade>
 800dd78:	a201      	add	r2, pc, #4	@ (adr r2, 800dd80 <USART_SetConfig+0x488>)
 800dd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7e:	bf00      	nop
 800dd80:	0800de05 	.word	0x0800de05
 800dd84:	0800debb 	.word	0x0800debb
 800dd88:	0800df7b 	.word	0x0800df7b
 800dd8c:	0800e3d7 	.word	0x0800e3d7
 800dd90:	0800e035 	.word	0x0800e035
 800dd94:	0800e3d7 	.word	0x0800e3d7
 800dd98:	0800e3d7 	.word	0x0800e3d7
 800dd9c:	0800e3d7 	.word	0x0800e3d7
 800dda0:	0800e0ef 	.word	0x0800e0ef
 800dda4:	0800e3d7 	.word	0x0800e3d7
 800dda8:	0800e3d7 	.word	0x0800e3d7
 800ddac:	0800e3d7 	.word	0x0800e3d7
 800ddb0:	0800e3d7 	.word	0x0800e3d7
 800ddb4:	0800e3d7 	.word	0x0800e3d7
 800ddb8:	0800e3d7 	.word	0x0800e3d7
 800ddbc:	0800e3d7 	.word	0x0800e3d7
 800ddc0:	0800e267 	.word	0x0800e267
 800ddc4:	0800e3d7 	.word	0x0800e3d7
 800ddc8:	0800e3d7 	.word	0x0800e3d7
 800ddcc:	0800e3d7 	.word	0x0800e3d7
 800ddd0:	0800e3d7 	.word	0x0800e3d7
 800ddd4:	0800e3d7 	.word	0x0800e3d7
 800ddd8:	0800e3d7 	.word	0x0800e3d7
 800dddc:	0800e3d7 	.word	0x0800e3d7
 800dde0:	0800e3d7 	.word	0x0800e3d7
 800dde4:	0800e3d7 	.word	0x0800e3d7
 800dde8:	0800e3d7 	.word	0x0800e3d7
 800ddec:	0800e3d7 	.word	0x0800e3d7
 800ddf0:	0800e3d7 	.word	0x0800e3d7
 800ddf4:	0800e3d7 	.word	0x0800e3d7
 800ddf8:	0800e3d7 	.word	0x0800e3d7
 800ddfc:	0800e3d7 	.word	0x0800e3d7
 800de00:	0800e325 	.word	0x0800e325
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800de04:	f7f9 f918 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 800de08:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d044      	beq.n	800de9c <USART_SetConfig+0x5a4>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de16:	2b01      	cmp	r3, #1
 800de18:	d03e      	beq.n	800de98 <USART_SetConfig+0x5a0>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de1e:	2b02      	cmp	r3, #2
 800de20:	d038      	beq.n	800de94 <USART_SetConfig+0x59c>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de26:	2b03      	cmp	r3, #3
 800de28:	d032      	beq.n	800de90 <USART_SetConfig+0x598>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de2e:	2b04      	cmp	r3, #4
 800de30:	d02c      	beq.n	800de8c <USART_SetConfig+0x594>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de36:	2b05      	cmp	r3, #5
 800de38:	d026      	beq.n	800de88 <USART_SetConfig+0x590>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de3e:	2b06      	cmp	r3, #6
 800de40:	d020      	beq.n	800de84 <USART_SetConfig+0x58c>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de46:	2b07      	cmp	r3, #7
 800de48:	d01a      	beq.n	800de80 <USART_SetConfig+0x588>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de4e:	2b08      	cmp	r3, #8
 800de50:	d014      	beq.n	800de7c <USART_SetConfig+0x584>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de56:	2b09      	cmp	r3, #9
 800de58:	d00e      	beq.n	800de78 <USART_SetConfig+0x580>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de5e:	2b0a      	cmp	r3, #10
 800de60:	d008      	beq.n	800de74 <USART_SetConfig+0x57c>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de66:	2b0b      	cmp	r3, #11
 800de68:	d102      	bne.n	800de70 <USART_SetConfig+0x578>
 800de6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de6e:	e016      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de70:	2301      	movs	r3, #1
 800de72:	e014      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de74:	2380      	movs	r3, #128	@ 0x80
 800de76:	e012      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de78:	2340      	movs	r3, #64	@ 0x40
 800de7a:	e010      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de7c:	2320      	movs	r3, #32
 800de7e:	e00e      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de80:	2310      	movs	r3, #16
 800de82:	e00c      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de84:	230c      	movs	r3, #12
 800de86:	e00a      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de88:	230a      	movs	r3, #10
 800de8a:	e008      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de8c:	2308      	movs	r3, #8
 800de8e:	e006      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de90:	2306      	movs	r3, #6
 800de92:	e004      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de94:	2304      	movs	r3, #4
 800de96:	e002      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de98:	2302      	movs	r3, #2
 800de9a:	e000      	b.n	800de9e <USART_SetConfig+0x5a6>
 800de9c:	2301      	movs	r3, #1
 800de9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dea0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dea4:	005a      	lsls	r2, r3, #1
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	085b      	lsrs	r3, r3, #1
 800deac:	441a      	add	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800deb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800deb8:	e291      	b.n	800e3de <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800deba:	f7f9 f8d3 	bl	8007064 <HAL_RCC_GetPCLK2Freq>
 800debe:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d049      	beq.n	800df5c <USART_SetConfig+0x664>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800decc:	2b01      	cmp	r3, #1
 800dece:	d043      	beq.n	800df58 <USART_SetConfig+0x660>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d03d      	beq.n	800df54 <USART_SetConfig+0x65c>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dedc:	2b03      	cmp	r3, #3
 800dede:	d032      	beq.n	800df46 <USART_SetConfig+0x64e>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee4:	2b04      	cmp	r3, #4
 800dee6:	d02c      	beq.n	800df42 <USART_SetConfig+0x64a>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deec:	2b05      	cmp	r3, #5
 800deee:	d026      	beq.n	800df3e <USART_SetConfig+0x646>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def4:	2b06      	cmp	r3, #6
 800def6:	d020      	beq.n	800df3a <USART_SetConfig+0x642>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800defc:	2b07      	cmp	r3, #7
 800defe:	d01a      	beq.n	800df36 <USART_SetConfig+0x63e>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df04:	2b08      	cmp	r3, #8
 800df06:	d014      	beq.n	800df32 <USART_SetConfig+0x63a>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df0c:	2b09      	cmp	r3, #9
 800df0e:	d00e      	beq.n	800df2e <USART_SetConfig+0x636>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df14:	2b0a      	cmp	r3, #10
 800df16:	d008      	beq.n	800df2a <USART_SetConfig+0x632>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df1c:	2b0b      	cmp	r3, #11
 800df1e:	d102      	bne.n	800df26 <USART_SetConfig+0x62e>
 800df20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df24:	e01b      	b.n	800df5e <USART_SetConfig+0x666>
 800df26:	2301      	movs	r3, #1
 800df28:	e019      	b.n	800df5e <USART_SetConfig+0x666>
 800df2a:	2380      	movs	r3, #128	@ 0x80
 800df2c:	e017      	b.n	800df5e <USART_SetConfig+0x666>
 800df2e:	2340      	movs	r3, #64	@ 0x40
 800df30:	e015      	b.n	800df5e <USART_SetConfig+0x666>
 800df32:	2320      	movs	r3, #32
 800df34:	e013      	b.n	800df5e <USART_SetConfig+0x666>
 800df36:	2310      	movs	r3, #16
 800df38:	e011      	b.n	800df5e <USART_SetConfig+0x666>
 800df3a:	230c      	movs	r3, #12
 800df3c:	e00f      	b.n	800df5e <USART_SetConfig+0x666>
 800df3e:	230a      	movs	r3, #10
 800df40:	e00d      	b.n	800df5e <USART_SetConfig+0x666>
 800df42:	2308      	movs	r3, #8
 800df44:	e00b      	b.n	800df5e <USART_SetConfig+0x666>
 800df46:	2306      	movs	r3, #6
 800df48:	e009      	b.n	800df5e <USART_SetConfig+0x666>
 800df4a:	bf00      	nop
 800df4c:	40011c00 	.word	0x40011c00
 800df50:	58024400 	.word	0x58024400
 800df54:	2304      	movs	r3, #4
 800df56:	e002      	b.n	800df5e <USART_SetConfig+0x666>
 800df58:	2302      	movs	r3, #2
 800df5a:	e000      	b.n	800df5e <USART_SetConfig+0x666>
 800df5c:	2301      	movs	r3, #1
 800df5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df60:	fbb2 f3f3 	udiv	r3, r2, r3
 800df64:	005a      	lsls	r2, r3, #1
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	085b      	lsrs	r3, r3, #1
 800df6c:	441a      	add	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	fbb2 f3f3 	udiv	r3, r2, r3
 800df76:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800df78:	e231      	b.n	800e3de <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df7a:	f107 0318 	add.w	r3, r7, #24
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fa ff0e 	bl	8008da0 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800df84:	69fa      	ldr	r2, [r7, #28]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d044      	beq.n	800e018 <USART_SetConfig+0x720>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df92:	2b01      	cmp	r3, #1
 800df94:	d03e      	beq.n	800e014 <USART_SetConfig+0x71c>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df9a:	2b02      	cmp	r3, #2
 800df9c:	d038      	beq.n	800e010 <USART_SetConfig+0x718>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa2:	2b03      	cmp	r3, #3
 800dfa4:	d032      	beq.n	800e00c <USART_SetConfig+0x714>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfaa:	2b04      	cmp	r3, #4
 800dfac:	d02c      	beq.n	800e008 <USART_SetConfig+0x710>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfb2:	2b05      	cmp	r3, #5
 800dfb4:	d026      	beq.n	800e004 <USART_SetConfig+0x70c>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfba:	2b06      	cmp	r3, #6
 800dfbc:	d020      	beq.n	800e000 <USART_SetConfig+0x708>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc2:	2b07      	cmp	r3, #7
 800dfc4:	d01a      	beq.n	800dffc <USART_SetConfig+0x704>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfca:	2b08      	cmp	r3, #8
 800dfcc:	d014      	beq.n	800dff8 <USART_SetConfig+0x700>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfd2:	2b09      	cmp	r3, #9
 800dfd4:	d00e      	beq.n	800dff4 <USART_SetConfig+0x6fc>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfda:	2b0a      	cmp	r3, #10
 800dfdc:	d008      	beq.n	800dff0 <USART_SetConfig+0x6f8>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfe2:	2b0b      	cmp	r3, #11
 800dfe4:	d102      	bne.n	800dfec <USART_SetConfig+0x6f4>
 800dfe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfea:	e016      	b.n	800e01a <USART_SetConfig+0x722>
 800dfec:	2301      	movs	r3, #1
 800dfee:	e014      	b.n	800e01a <USART_SetConfig+0x722>
 800dff0:	2380      	movs	r3, #128	@ 0x80
 800dff2:	e012      	b.n	800e01a <USART_SetConfig+0x722>
 800dff4:	2340      	movs	r3, #64	@ 0x40
 800dff6:	e010      	b.n	800e01a <USART_SetConfig+0x722>
 800dff8:	2320      	movs	r3, #32
 800dffa:	e00e      	b.n	800e01a <USART_SetConfig+0x722>
 800dffc:	2310      	movs	r3, #16
 800dffe:	e00c      	b.n	800e01a <USART_SetConfig+0x722>
 800e000:	230c      	movs	r3, #12
 800e002:	e00a      	b.n	800e01a <USART_SetConfig+0x722>
 800e004:	230a      	movs	r3, #10
 800e006:	e008      	b.n	800e01a <USART_SetConfig+0x722>
 800e008:	2308      	movs	r3, #8
 800e00a:	e006      	b.n	800e01a <USART_SetConfig+0x722>
 800e00c:	2306      	movs	r3, #6
 800e00e:	e004      	b.n	800e01a <USART_SetConfig+0x722>
 800e010:	2304      	movs	r3, #4
 800e012:	e002      	b.n	800e01a <USART_SetConfig+0x722>
 800e014:	2302      	movs	r3, #2
 800e016:	e000      	b.n	800e01a <USART_SetConfig+0x722>
 800e018:	2301      	movs	r3, #1
 800e01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e01e:	005a      	lsls	r2, r3, #1
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	085b      	lsrs	r3, r3, #1
 800e026:	441a      	add	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e030:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e032:	e1d4      	b.n	800e3de <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e034:	f107 030c 	add.w	r3, r7, #12
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fb f805 	bl	8009048 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e044:	2b00      	cmp	r3, #0
 800e046:	d044      	beq.n	800e0d2 <USART_SetConfig+0x7da>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d03e      	beq.n	800e0ce <USART_SetConfig+0x7d6>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e054:	2b02      	cmp	r3, #2
 800e056:	d038      	beq.n	800e0ca <USART_SetConfig+0x7d2>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d032      	beq.n	800e0c6 <USART_SetConfig+0x7ce>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e064:	2b04      	cmp	r3, #4
 800e066:	d02c      	beq.n	800e0c2 <USART_SetConfig+0x7ca>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e06c:	2b05      	cmp	r3, #5
 800e06e:	d026      	beq.n	800e0be <USART_SetConfig+0x7c6>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e074:	2b06      	cmp	r3, #6
 800e076:	d020      	beq.n	800e0ba <USART_SetConfig+0x7c2>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e07c:	2b07      	cmp	r3, #7
 800e07e:	d01a      	beq.n	800e0b6 <USART_SetConfig+0x7be>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e084:	2b08      	cmp	r3, #8
 800e086:	d014      	beq.n	800e0b2 <USART_SetConfig+0x7ba>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e08c:	2b09      	cmp	r3, #9
 800e08e:	d00e      	beq.n	800e0ae <USART_SetConfig+0x7b6>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e094:	2b0a      	cmp	r3, #10
 800e096:	d008      	beq.n	800e0aa <USART_SetConfig+0x7b2>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e09c:	2b0b      	cmp	r3, #11
 800e09e:	d102      	bne.n	800e0a6 <USART_SetConfig+0x7ae>
 800e0a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e0a4:	e016      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e014      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0aa:	2380      	movs	r3, #128	@ 0x80
 800e0ac:	e012      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0ae:	2340      	movs	r3, #64	@ 0x40
 800e0b0:	e010      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0b2:	2320      	movs	r3, #32
 800e0b4:	e00e      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0b6:	2310      	movs	r3, #16
 800e0b8:	e00c      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0ba:	230c      	movs	r3, #12
 800e0bc:	e00a      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0be:	230a      	movs	r3, #10
 800e0c0:	e008      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0c2:	2308      	movs	r3, #8
 800e0c4:	e006      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0c6:	2306      	movs	r3, #6
 800e0c8:	e004      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0ca:	2304      	movs	r3, #4
 800e0cc:	e002      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	e000      	b.n	800e0d4 <USART_SetConfig+0x7dc>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0d8:	005a      	lsls	r2, r3, #1
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	085b      	lsrs	r3, r3, #1
 800e0e0:	441a      	add	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ea:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800e0ec:	e177      	b.n	800e3de <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0ee:	4b8a      	ldr	r3, [pc, #552]	@ (800e318 <USART_SetConfig+0xa20>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f003 0320 	and.w	r3, r3, #32
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d05d      	beq.n	800e1b6 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800e0fa:	4b87      	ldr	r3, [pc, #540]	@ (800e318 <USART_SetConfig+0xa20>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	08db      	lsrs	r3, r3, #3
 800e100:	f003 0303 	and.w	r3, r3, #3
 800e104:	4a85      	ldr	r2, [pc, #532]	@ (800e31c <USART_SetConfig+0xa24>)
 800e106:	40da      	lsrs	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d044      	beq.n	800e19a <USART_SetConfig+0x8a2>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e114:	2b01      	cmp	r3, #1
 800e116:	d03e      	beq.n	800e196 <USART_SetConfig+0x89e>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d038      	beq.n	800e192 <USART_SetConfig+0x89a>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e124:	2b03      	cmp	r3, #3
 800e126:	d032      	beq.n	800e18e <USART_SetConfig+0x896>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	d02c      	beq.n	800e18a <USART_SetConfig+0x892>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e134:	2b05      	cmp	r3, #5
 800e136:	d026      	beq.n	800e186 <USART_SetConfig+0x88e>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13c:	2b06      	cmp	r3, #6
 800e13e:	d020      	beq.n	800e182 <USART_SetConfig+0x88a>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e144:	2b07      	cmp	r3, #7
 800e146:	d01a      	beq.n	800e17e <USART_SetConfig+0x886>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14c:	2b08      	cmp	r3, #8
 800e14e:	d014      	beq.n	800e17a <USART_SetConfig+0x882>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e154:	2b09      	cmp	r3, #9
 800e156:	d00e      	beq.n	800e176 <USART_SetConfig+0x87e>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e15c:	2b0a      	cmp	r3, #10
 800e15e:	d008      	beq.n	800e172 <USART_SetConfig+0x87a>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e164:	2b0b      	cmp	r3, #11
 800e166:	d102      	bne.n	800e16e <USART_SetConfig+0x876>
 800e168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e16c:	e016      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e16e:	2301      	movs	r3, #1
 800e170:	e014      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e172:	2380      	movs	r3, #128	@ 0x80
 800e174:	e012      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e176:	2340      	movs	r3, #64	@ 0x40
 800e178:	e010      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e17a:	2320      	movs	r3, #32
 800e17c:	e00e      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e17e:	2310      	movs	r3, #16
 800e180:	e00c      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e182:	230c      	movs	r3, #12
 800e184:	e00a      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e186:	230a      	movs	r3, #10
 800e188:	e008      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e18a:	2308      	movs	r3, #8
 800e18c:	e006      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e18e:	2306      	movs	r3, #6
 800e190:	e004      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e192:	2304      	movs	r3, #4
 800e194:	e002      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e196:	2302      	movs	r3, #2
 800e198:	e000      	b.n	800e19c <USART_SetConfig+0x8a4>
 800e19a:	2301      	movs	r3, #1
 800e19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a0:	005a      	lsls	r2, r3, #1
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	085b      	lsrs	r3, r3, #1
 800e1a8:	441a      	add	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1b2:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800e1b4:	e113      	b.n	800e3de <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d044      	beq.n	800e248 <USART_SetConfig+0x950>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d03e      	beq.n	800e244 <USART_SetConfig+0x94c>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d038      	beq.n	800e240 <USART_SetConfig+0x948>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d032      	beq.n	800e23c <USART_SetConfig+0x944>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1da:	2b04      	cmp	r3, #4
 800e1dc:	d02c      	beq.n	800e238 <USART_SetConfig+0x940>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1e2:	2b05      	cmp	r3, #5
 800e1e4:	d026      	beq.n	800e234 <USART_SetConfig+0x93c>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ea:	2b06      	cmp	r3, #6
 800e1ec:	d020      	beq.n	800e230 <USART_SetConfig+0x938>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f2:	2b07      	cmp	r3, #7
 800e1f4:	d01a      	beq.n	800e22c <USART_SetConfig+0x934>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1fa:	2b08      	cmp	r3, #8
 800e1fc:	d014      	beq.n	800e228 <USART_SetConfig+0x930>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e202:	2b09      	cmp	r3, #9
 800e204:	d00e      	beq.n	800e224 <USART_SetConfig+0x92c>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e20a:	2b0a      	cmp	r3, #10
 800e20c:	d008      	beq.n	800e220 <USART_SetConfig+0x928>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e212:	2b0b      	cmp	r3, #11
 800e214:	d102      	bne.n	800e21c <USART_SetConfig+0x924>
 800e216:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e21a:	e016      	b.n	800e24a <USART_SetConfig+0x952>
 800e21c:	2301      	movs	r3, #1
 800e21e:	e014      	b.n	800e24a <USART_SetConfig+0x952>
 800e220:	2380      	movs	r3, #128	@ 0x80
 800e222:	e012      	b.n	800e24a <USART_SetConfig+0x952>
 800e224:	2340      	movs	r3, #64	@ 0x40
 800e226:	e010      	b.n	800e24a <USART_SetConfig+0x952>
 800e228:	2320      	movs	r3, #32
 800e22a:	e00e      	b.n	800e24a <USART_SetConfig+0x952>
 800e22c:	2310      	movs	r3, #16
 800e22e:	e00c      	b.n	800e24a <USART_SetConfig+0x952>
 800e230:	230c      	movs	r3, #12
 800e232:	e00a      	b.n	800e24a <USART_SetConfig+0x952>
 800e234:	230a      	movs	r3, #10
 800e236:	e008      	b.n	800e24a <USART_SetConfig+0x952>
 800e238:	2308      	movs	r3, #8
 800e23a:	e006      	b.n	800e24a <USART_SetConfig+0x952>
 800e23c:	2306      	movs	r3, #6
 800e23e:	e004      	b.n	800e24a <USART_SetConfig+0x952>
 800e240:	2304      	movs	r3, #4
 800e242:	e002      	b.n	800e24a <USART_SetConfig+0x952>
 800e244:	2302      	movs	r3, #2
 800e246:	e000      	b.n	800e24a <USART_SetConfig+0x952>
 800e248:	2301      	movs	r3, #1
 800e24a:	4a34      	ldr	r2, [pc, #208]	@ (800e31c <USART_SetConfig+0xa24>)
 800e24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e250:	005a      	lsls	r2, r3, #1
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	085b      	lsrs	r3, r3, #1
 800e258:	441a      	add	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e262:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e264:	e0bb      	b.n	800e3de <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d044      	beq.n	800e2f8 <USART_SetConfig+0xa00>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e272:	2b01      	cmp	r3, #1
 800e274:	d03e      	beq.n	800e2f4 <USART_SetConfig+0x9fc>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d038      	beq.n	800e2f0 <USART_SetConfig+0x9f8>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e282:	2b03      	cmp	r3, #3
 800e284:	d032      	beq.n	800e2ec <USART_SetConfig+0x9f4>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e28a:	2b04      	cmp	r3, #4
 800e28c:	d02c      	beq.n	800e2e8 <USART_SetConfig+0x9f0>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e292:	2b05      	cmp	r3, #5
 800e294:	d026      	beq.n	800e2e4 <USART_SetConfig+0x9ec>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e29a:	2b06      	cmp	r3, #6
 800e29c:	d020      	beq.n	800e2e0 <USART_SetConfig+0x9e8>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a2:	2b07      	cmp	r3, #7
 800e2a4:	d01a      	beq.n	800e2dc <USART_SetConfig+0x9e4>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2aa:	2b08      	cmp	r3, #8
 800e2ac:	d014      	beq.n	800e2d8 <USART_SetConfig+0x9e0>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b2:	2b09      	cmp	r3, #9
 800e2b4:	d00e      	beq.n	800e2d4 <USART_SetConfig+0x9dc>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ba:	2b0a      	cmp	r3, #10
 800e2bc:	d008      	beq.n	800e2d0 <USART_SetConfig+0x9d8>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2c2:	2b0b      	cmp	r3, #11
 800e2c4:	d102      	bne.n	800e2cc <USART_SetConfig+0x9d4>
 800e2c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e2ca:	e016      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e014      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2d0:	2380      	movs	r3, #128	@ 0x80
 800e2d2:	e012      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2d4:	2340      	movs	r3, #64	@ 0x40
 800e2d6:	e010      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2d8:	2320      	movs	r3, #32
 800e2da:	e00e      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2dc:	2310      	movs	r3, #16
 800e2de:	e00c      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2e0:	230c      	movs	r3, #12
 800e2e2:	e00a      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2e4:	230a      	movs	r3, #10
 800e2e6:	e008      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2e8:	2308      	movs	r3, #8
 800e2ea:	e006      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2ec:	2306      	movs	r3, #6
 800e2ee:	e004      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2f0:	2304      	movs	r3, #4
 800e2f2:	e002      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	e000      	b.n	800e2fa <USART_SetConfig+0xa02>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	4a09      	ldr	r2, [pc, #36]	@ (800e320 <USART_SetConfig+0xa28>)
 800e2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e300:	005a      	lsls	r2, r3, #1
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	085b      	lsrs	r3, r3, #1
 800e308:	441a      	add	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e312:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e314:	e063      	b.n	800e3de <USART_SetConfig+0xae6>
 800e316:	bf00      	nop
 800e318:	58024400 	.word	0x58024400
 800e31c:	03d09000 	.word	0x03d09000
 800e320:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d044      	beq.n	800e3b6 <USART_SetConfig+0xabe>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e330:	2b01      	cmp	r3, #1
 800e332:	d03e      	beq.n	800e3b2 <USART_SetConfig+0xaba>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d038      	beq.n	800e3ae <USART_SetConfig+0xab6>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e340:	2b03      	cmp	r3, #3
 800e342:	d032      	beq.n	800e3aa <USART_SetConfig+0xab2>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d02c      	beq.n	800e3a6 <USART_SetConfig+0xaae>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e350:	2b05      	cmp	r3, #5
 800e352:	d026      	beq.n	800e3a2 <USART_SetConfig+0xaaa>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e358:	2b06      	cmp	r3, #6
 800e35a:	d020      	beq.n	800e39e <USART_SetConfig+0xaa6>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e360:	2b07      	cmp	r3, #7
 800e362:	d01a      	beq.n	800e39a <USART_SetConfig+0xaa2>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e368:	2b08      	cmp	r3, #8
 800e36a:	d014      	beq.n	800e396 <USART_SetConfig+0xa9e>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e370:	2b09      	cmp	r3, #9
 800e372:	d00e      	beq.n	800e392 <USART_SetConfig+0xa9a>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e378:	2b0a      	cmp	r3, #10
 800e37a:	d008      	beq.n	800e38e <USART_SetConfig+0xa96>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e380:	2b0b      	cmp	r3, #11
 800e382:	d102      	bne.n	800e38a <USART_SetConfig+0xa92>
 800e384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e388:	e016      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e38a:	2301      	movs	r3, #1
 800e38c:	e014      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e38e:	2380      	movs	r3, #128	@ 0x80
 800e390:	e012      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e392:	2340      	movs	r3, #64	@ 0x40
 800e394:	e010      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e396:	2320      	movs	r3, #32
 800e398:	e00e      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e39a:	2310      	movs	r3, #16
 800e39c:	e00c      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e39e:	230c      	movs	r3, #12
 800e3a0:	e00a      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e3a2:	230a      	movs	r3, #10
 800e3a4:	e008      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e3a6:	2308      	movs	r3, #8
 800e3a8:	e006      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e3aa:	2306      	movs	r3, #6
 800e3ac:	e004      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e3ae:	2304      	movs	r3, #4
 800e3b0:	e002      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e3b2:	2302      	movs	r3, #2
 800e3b4:	e000      	b.n	800e3b8 <USART_SetConfig+0xac0>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c0:	005a      	lsls	r2, r3, #1
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	085b      	lsrs	r3, r3, #1
 800e3c8:	441a      	add	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e3d4:	e003      	b.n	800e3de <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800e3dc:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800e3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e0:	2b0f      	cmp	r3, #15
 800e3e2:	d916      	bls.n	800e412 <USART_SetConfig+0xb1a>
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3ea:	d212      	bcs.n	800e412 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	f023 030f 	bic.w	r3, r3, #15
 800e3f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f8:	085b      	lsrs	r3, r3, #1
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	f003 0307 	and.w	r3, r3, #7
 800e400:	b29a      	uxth	r2, r3
 800e402:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e404:	4313      	orrs	r3, r2
 800e406:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e40e:	60da      	str	r2, [r3, #12]
 800e410:	e002      	b.n	800e418 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800e412:	2301      	movs	r3, #1
 800e414:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2201      	movs	r2, #1
 800e41c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2201      	movs	r2, #1
 800e422:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800e430:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800e434:	4618      	mov	r0, r3
 800e436:	3738      	adds	r7, #56	@ 0x38
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af02      	add	r7, sp, #8
 800e442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e44a:	f7f5 f8fb 	bl	8003644 <HAL_GetTick>
 800e44e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 0308 	and.w	r3, r3, #8
 800e45a:	2b08      	cmp	r3, #8
 800e45c:	d10e      	bne.n	800e47c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e45e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2200      	movs	r2, #0
 800e468:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f7ff fa0d 	bl	800d88c <USART_WaitOnFlagUntilTimeout>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d001      	beq.n	800e47c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	e01e      	b.n	800e4ba <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f003 0304 	and.w	r3, r3, #4
 800e486:	2b04      	cmp	r3, #4
 800e488:	d10e      	bne.n	800e4a8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e48a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7ff f9f7 	bl	800d88c <USART_WaitOnFlagUntilTimeout>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4a4:	2303      	movs	r3, #3
 800e4a6:	e008      	b.n	800e4ba <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800e4c2:	b480      	push	{r7}
 800e4c4:	b085      	sub	sp, #20
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d101      	bne.n	800e4d8 <HAL_USARTEx_EnableSlaveMode+0x16>
 800e4d4:	2302      	movs	r3, #2
 800e4d6:	e043      	b.n	800e560 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f022 0201 	bic.w	r2, r2, #1
 800e4fe:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	685a      	ldr	r2, [r3, #4]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e50e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	689a      	ldr	r2, [r3, #8]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e51e:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	685a      	ldr	r2, [r3, #4]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f042 0201 	orr.w	r2, r2, #1
 800e52e:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f042 0201 	orr.w	r2, r2, #1
 800e554:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d101      	bne.n	800e584 <HAL_USARTEx_ConfigNSS+0x18>
 800e580:	2302      	movs	r3, #2
 800e582:	e02a      	b.n	800e5da <HAL_USARTEx_ConfigNSS+0x6e>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2202      	movs	r2, #2
 800e590:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f022 0201 	bic.w	r2, r2, #1
 800e5aa:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	f023 0108 	bic.w	r1, r3, #8
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	430a      	orrs	r2, r1
 800e5be:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr

0800e5e6 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800e5e6:	b480      	push	{r7}
 800e5e8:	b085      	sub	sp, #20
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d101      	bne.n	800e5fc <HAL_USARTEx_DisableFifoMode+0x16>
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	e027      	b.n	800e64c <HAL_USARTEx_DisableFifoMode+0x66>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2201      	movs	r2, #1
 800e600:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2202      	movs	r2, #2
 800e608:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f022 0201 	bic.w	r2, r2, #1
 800e622:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e62a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2201      	movs	r2, #1
 800e63e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3714      	adds	r7, #20
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e668:	2b01      	cmp	r3, #1
 800e66a:	d101      	bne.n	800e670 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800e66c:	2302      	movs	r3, #2
 800e66e:	e02d      	b.n	800e6cc <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2202      	movs	r2, #2
 800e67c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f022 0201 	bic.w	r2, r2, #1
 800e696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 f84f 	bl	800e750 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e6ca:	2300      	movs	r3, #0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d101      	bne.n	800e6ec <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	e02d      	b.n	800e748 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f022 0201 	bic.w	r2, r2, #1
 800e712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	430a      	orrs	r2, r1
 800e726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f811 	bl	800e750 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68fa      	ldr	r2, [r7, #12]
 800e734:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2201      	movs	r2, #1
 800e73a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d106      	bne.n	800e76e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2201      	movs	r2, #1
 800e76a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e76c:	e02f      	b.n	800e7ce <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e76e:	2310      	movs	r3, #16
 800e770:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e772:	2310      	movs	r3, #16
 800e774:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800e77c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	f003 0307 	and.w	r3, r3, #7
 800e784:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800e78c:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	f003 0307 	and.w	r3, r3, #7
 800e794:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e796:	7bbb      	ldrb	r3, [r7, #14]
 800e798:	7b3a      	ldrb	r2, [r7, #12]
 800e79a:	4910      	ldr	r1, [pc, #64]	@ (800e7dc <USARTEx_SetNbDataToProcess+0x8c>)
 800e79c:	5c8a      	ldrb	r2, [r1, r2]
 800e79e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800e7a2:	7b3a      	ldrb	r2, [r7, #12]
 800e7a4:	490e      	ldr	r1, [pc, #56]	@ (800e7e0 <USARTEx_SetNbDataToProcess+0x90>)
 800e7a6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7b2:	7bfb      	ldrb	r3, [r7, #15]
 800e7b4:	7b7a      	ldrb	r2, [r7, #13]
 800e7b6:	4909      	ldr	r1, [pc, #36]	@ (800e7dc <USARTEx_SetNbDataToProcess+0x8c>)
 800e7b8:	5c8a      	ldrb	r2, [r1, r2]
 800e7ba:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800e7be:	7b7a      	ldrb	r2, [r7, #13]
 800e7c0:	4907      	ldr	r1, [pc, #28]	@ (800e7e0 <USARTEx_SetNbDataToProcess+0x90>)
 800e7c2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800e7ce:	bf00      	nop
 800e7d0:	3714      	adds	r7, #20
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	0801377c 	.word	0x0801377c
 800e7e0:	08013784 	.word	0x08013784

0800e7e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	b480      	push	{r7}
 800e7e8:	b085      	sub	sp, #20
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	f107 001c 	add.w	r0, r7, #28
 800e7f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e7fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e7fe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e802:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e806:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e80a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	4313      	orrs	r3, r2
 800e810:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	4b07      	ldr	r3, [pc, #28]	@ (800e834 <SDMMC_Init+0x50>)
 800e818:	4013      	ands	r3, r2
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	431a      	orrs	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3714      	adds	r7, #20
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	b004      	add	sp, #16
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	ffc02c00 	.word	0xffc02c00

0800e838 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e846:	4618      	mov	r0, r3
 800e848:	370c      	adds	r7, #12
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr

0800e852 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f043 0203 	orr.w	r2, r3, #3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f003 0303 	and.w	r3, r3, #3
}
 800e884:	4618      	mov	r0, r3
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e8ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e8b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e8ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	68da      	ldr	r2, [r3, #12]
 800e8c6:	4b06      	ldr	r3, [pc, #24]	@ (800e8e0 <SDMMC_SendCommand+0x50>)
 800e8c8:	4013      	ands	r3, r2
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	fffee0c0 	.word	0xfffee0c0

0800e8e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	b2db      	uxtb	r3, r3
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e8fe:	b480      	push	{r7}
 800e900:	b085      	sub	sp, #20
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
 800e906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3314      	adds	r3, #20
 800e90c:	461a      	mov	r2, r3
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	4413      	add	r3, r2
 800e912:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3714      	adds	r7, #20
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e924:	b480      	push	{r7}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	685a      	ldr	r2, [r3, #4]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e94a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e950:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e956:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	4313      	orrs	r3, r2
 800e95c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e962:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	431a      	orrs	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e96e:	2300      	movs	r3, #0

}
 800e970:	4618      	mov	r0, r3
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b088      	sub	sp, #32
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e98a:	2310      	movs	r3, #16
 800e98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e98e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e994:	2300      	movs	r3, #0
 800e996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e99c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e99e:	f107 0308 	add.w	r3, r7, #8
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ff73 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e9aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9ae:	2110      	movs	r1, #16
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f995 	bl	800ece0 <SDMMC_GetCmdResp1>
 800e9b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3720      	adds	r7, #32
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b088      	sub	sp, #32
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e9d0:	2307      	movs	r3, #7
 800e9d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9e4:	f107 0308 	add.w	r3, r7, #8
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff ff50 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e9f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9f4:	2107      	movs	r1, #7
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f972 	bl	800ece0 <SDMMC_GetCmdResp1>
 800e9fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9fe:	69fb      	ldr	r3, [r7, #28]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3720      	adds	r7, #32
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b088      	sub	sp, #32
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ea10:	2300      	movs	r3, #0
 800ea12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ea14:	2300      	movs	r3, #0
 800ea16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea26:	f107 0308 	add.w	r3, r7, #8
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7ff ff2f 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 fb96 	bl	800f164 <SDMMC_GetCmdError>
 800ea38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea3a:	69fb      	ldr	r3, [r7, #28]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3720      	adds	r7, #32
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ea4c:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ea50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ea52:	2308      	movs	r3, #8
 800ea54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea66:	f107 0308 	add.w	r3, r7, #8
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff ff0f 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fb28 	bl	800f0c8 <SDMMC_GetCmdResp7>
 800ea78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3720      	adds	r7, #32
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ea92:	2337      	movs	r3, #55	@ 0x37
 800ea94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eaa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eaa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eaa6:	f107 0308 	add.w	r3, r7, #8
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7ff feef 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800eab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eab6:	2137      	movs	r1, #55	@ 0x37
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f911 	bl	800ece0 <SDMMC_GetCmdResp1>
 800eabe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eac0:	69fb      	ldr	r3, [r7, #28]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3720      	adds	r7, #32
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b088      	sub	sp, #32
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ead8:	2329      	movs	r3, #41	@ 0x29
 800eada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eadc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eae2:	2300      	movs	r3, #0
 800eae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eaea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eaec:	f107 0308 	add.w	r3, r7, #8
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7ff fecc 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 fa2d 	bl	800ef58 <SDMMC_GetCmdResp3>
 800eafe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb00:	69fb      	ldr	r3, [r7, #28]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3720      	adds	r7, #32
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b088      	sub	sp, #32
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eb18:	2306      	movs	r3, #6
 800eb1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eb20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb22:	2300      	movs	r3, #0
 800eb24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb2c:	f107 0308 	add.w	r3, r7, #8
 800eb30:	4619      	mov	r1, r3
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7ff feac 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800eb38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb3c:	2106      	movs	r1, #6
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f8ce 	bl	800ece0 <SDMMC_GetCmdResp1>
 800eb44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb46:	69fb      	ldr	r3, [r7, #28]
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3720      	adds	r7, #32
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800eb5c:	2333      	movs	r3, #51	@ 0x33
 800eb5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eb64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb66:	2300      	movs	r3, #0
 800eb68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb70:	f107 0308 	add.w	r3, r7, #8
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff fe8a 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800eb7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb80:	2133      	movs	r1, #51	@ 0x33
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f8ac 	bl	800ece0 <SDMMC_GetCmdResp1>
 800eb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb8a:	69fb      	ldr	r3, [r7, #28]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b088      	sub	sp, #32
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eba0:	2302      	movs	r3, #2
 800eba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800eba4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800eba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ebb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebb4:	f107 0308 	add.w	r3, r7, #8
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7ff fe68 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 f97f 	bl	800eec4 <SDMMC_GetCmdResp2>
 800ebc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebc8:	69fb      	ldr	r3, [r7, #28]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3720      	adds	r7, #32
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b088      	sub	sp, #32
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ebe0:	2309      	movs	r3, #9
 800ebe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ebe4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ebe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebea:	2300      	movs	r3, #0
 800ebec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ebf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebf4:	f107 0308 	add.w	r3, r7, #8
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff fe48 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 f95f 	bl	800eec4 <SDMMC_GetCmdResp2>
 800ec06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec08:	69fb      	ldr	r3, [r7, #28]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3720      	adds	r7, #32
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b088      	sub	sp, #32
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
 800ec1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ec20:	2303      	movs	r3, #3
 800ec22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec34:	f107 0308 	add.w	r3, r7, #8
 800ec38:	4619      	mov	r1, r3
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7ff fe28 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	2103      	movs	r1, #3
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 f9c7 	bl	800efd8 <SDMMC_GetCmdResp6>
 800ec4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec4c:	69fb      	ldr	r3, [r7, #28]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3720      	adds	r7, #32
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b088      	sub	sp, #32
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ec64:	230d      	movs	r3, #13
 800ec66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec78:	f107 0308 	add.w	r3, r7, #8
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7ff fe06 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ec84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec88:	210d      	movs	r1, #13
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 f828 	bl	800ece0 <SDMMC_GetCmdResp1>
 800ec90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec92:	69fb      	ldr	r3, [r7, #28]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3720      	adds	r7, #32
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800eca4:	2300      	movs	r3, #0
 800eca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800eca8:	230d      	movs	r3, #13
 800ecaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ecb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ecba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecbc:	f107 0308 	add.w	r3, r7, #8
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff fde4 	bl	800e890 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ecc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eccc:	210d      	movs	r1, #13
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f806 	bl	800ece0 <SDMMC_GetCmdResp1>
 800ecd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecd6:	69fb      	ldr	r3, [r7, #28]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3720      	adds	r7, #32
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	460b      	mov	r3, r1
 800ecea:	607a      	str	r2, [r7, #4]
 800ecec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ecee:	4b70      	ldr	r3, [pc, #448]	@ (800eeb0 <SDMMC_GetCmdResp1+0x1d0>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4a70      	ldr	r2, [pc, #448]	@ (800eeb4 <SDMMC_GetCmdResp1+0x1d4>)
 800ecf4:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf8:	0a5a      	lsrs	r2, r3, #9
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	fb02 f303 	mul.w	r3, r2, r3
 800ed00:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	1e5a      	subs	r2, r3, #1
 800ed06:	61fa      	str	r2, [r7, #28]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d102      	bne.n	800ed12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed10:	e0c9      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed16:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ed18:	69ba      	ldr	r2, [r7, #24]
 800ed1a:	4b67      	ldr	r3, [pc, #412]	@ (800eeb8 <SDMMC_GetCmdResp1+0x1d8>)
 800ed1c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d0ef      	beq.n	800ed02 <SDMMC_GetCmdResp1+0x22>
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1ea      	bne.n	800ed02 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed30:	f003 0304 	and.w	r3, r3, #4
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d004      	beq.n	800ed42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2204      	movs	r2, #4
 800ed3c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed3e:	2304      	movs	r3, #4
 800ed40:	e0b1      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d004      	beq.n	800ed58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2201      	movs	r2, #1
 800ed52:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed54:	2301      	movs	r3, #1
 800ed56:	e0a6      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	4a58      	ldr	r2, [pc, #352]	@ (800eebc <SDMMC_GetCmdResp1+0x1dc>)
 800ed5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f7ff fdc0 	bl	800e8e4 <SDMMC_GetCommandResponse>
 800ed64:	4603      	mov	r3, r0
 800ed66:	461a      	mov	r2, r3
 800ed68:	7afb      	ldrb	r3, [r7, #11]
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d001      	beq.n	800ed72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e099      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ed72:	2100      	movs	r1, #0
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f7ff fdc2 	bl	800e8fe <SDMMC_GetResponse>
 800ed7a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ed7c:	697a      	ldr	r2, [r7, #20]
 800ed7e:	4b50      	ldr	r3, [pc, #320]	@ (800eec0 <SDMMC_GetCmdResp1+0x1e0>)
 800ed80:	4013      	ands	r3, r2
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ed86:	2300      	movs	r3, #0
 800ed88:	e08d      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	da02      	bge.n	800ed96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ed90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed94:	e087      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800eda0:	2340      	movs	r3, #64	@ 0x40
 800eda2:	e080      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800edae:	2380      	movs	r3, #128	@ 0x80
 800edb0:	e079      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800edbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800edc0:	e071      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800edcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800edd0:	e069      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ede0:	e061      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800edec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800edf0:	e059      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800edfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ee00:	e051      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ee0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ee10:	e049      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ee1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ee20:	e041      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ee2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee30:	e039      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ee3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ee40:	e031      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ee4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ee50:	e029      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ee5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ee60:	e021      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ee6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ee70:	e019      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d002      	beq.n	800ee82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ee7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ee80:	e011      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ee8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ee90:	e009      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	f003 0308 	and.w	r3, r3, #8
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ee9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800eea0:	e001      	b.n	800eea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eea2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3720      	adds	r7, #32
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	24000000 	.word	0x24000000
 800eeb4:	10624dd3 	.word	0x10624dd3
 800eeb8:	00200045 	.word	0x00200045
 800eebc:	002000c5 	.word	0x002000c5
 800eec0:	fdffe008 	.word	0xfdffe008

0800eec4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eecc:	4b1f      	ldr	r3, [pc, #124]	@ (800ef4c <SDMMC_GetCmdResp2+0x88>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a1f      	ldr	r2, [pc, #124]	@ (800ef50 <SDMMC_GetCmdResp2+0x8c>)
 800eed2:	fba2 2303 	umull	r2, r3, r2, r3
 800eed6:	0a5b      	lsrs	r3, r3, #9
 800eed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eedc:	fb02 f303 	mul.w	r3, r2, r3
 800eee0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	1e5a      	subs	r2, r3, #1
 800eee6:	60fa      	str	r2, [r7, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d102      	bne.n	800eef2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eeec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eef0:	e026      	b.n	800ef40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eef6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d0ef      	beq.n	800eee2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1ea      	bne.n	800eee2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef10:	f003 0304 	and.w	r3, r3, #4
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d004      	beq.n	800ef22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2204      	movs	r2, #4
 800ef1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef1e:	2304      	movs	r3, #4
 800ef20:	e00e      	b.n	800ef40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d004      	beq.n	800ef38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2201      	movs	r2, #1
 800ef32:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef34:	2301      	movs	r3, #1
 800ef36:	e003      	b.n	800ef40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a06      	ldr	r2, [pc, #24]	@ (800ef54 <SDMMC_GetCmdResp2+0x90>)
 800ef3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ef3e:	2300      	movs	r3, #0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3714      	adds	r7, #20
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	24000000 	.word	0x24000000
 800ef50:	10624dd3 	.word	0x10624dd3
 800ef54:	002000c5 	.word	0x002000c5

0800ef58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ef60:	4b1a      	ldr	r3, [pc, #104]	@ (800efcc <SDMMC_GetCmdResp3+0x74>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a1a      	ldr	r2, [pc, #104]	@ (800efd0 <SDMMC_GetCmdResp3+0x78>)
 800ef66:	fba2 2303 	umull	r2, r3, r2, r3
 800ef6a:	0a5b      	lsrs	r3, r3, #9
 800ef6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef70:	fb02 f303 	mul.w	r3, r2, r3
 800ef74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	1e5a      	subs	r2, r3, #1
 800ef7a:	60fa      	str	r2, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef84:	e01b      	b.n	800efbe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d0ef      	beq.n	800ef76 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1ea      	bne.n	800ef76 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efa4:	f003 0304 	and.w	r3, r3, #4
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d004      	beq.n	800efb6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2204      	movs	r2, #4
 800efb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efb2:	2304      	movs	r3, #4
 800efb4:	e003      	b.n	800efbe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4a06      	ldr	r2, [pc, #24]	@ (800efd4 <SDMMC_GetCmdResp3+0x7c>)
 800efba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop
 800efcc:	24000000 	.word	0x24000000
 800efd0:	10624dd3 	.word	0x10624dd3
 800efd4:	002000c5 	.word	0x002000c5

0800efd8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	460b      	mov	r3, r1
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800efe6:	4b35      	ldr	r3, [pc, #212]	@ (800f0bc <SDMMC_GetCmdResp6+0xe4>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a35      	ldr	r2, [pc, #212]	@ (800f0c0 <SDMMC_GetCmdResp6+0xe8>)
 800efec:	fba2 2303 	umull	r2, r3, r2, r3
 800eff0:	0a5b      	lsrs	r3, r3, #9
 800eff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eff6:	fb02 f303 	mul.w	r3, r2, r3
 800effa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	1e5a      	subs	r2, r3, #1
 800f000:	61fa      	str	r2, [r7, #28]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d102      	bne.n	800f00c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f006:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f00a:	e052      	b.n	800f0b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f010:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d0ef      	beq.n	800effc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1ea      	bne.n	800effc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f02a:	f003 0304 	and.w	r3, r3, #4
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d004      	beq.n	800f03c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2204      	movs	r2, #4
 800f036:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f038:	2304      	movs	r3, #4
 800f03a:	e03a      	b.n	800f0b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f040:	f003 0301 	and.w	r3, r3, #1
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2201      	movs	r2, #1
 800f04c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f04e:	2301      	movs	r3, #1
 800f050:	e02f      	b.n	800f0b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f052:	68f8      	ldr	r0, [r7, #12]
 800f054:	f7ff fc46 	bl	800e8e4 <SDMMC_GetCommandResponse>
 800f058:	4603      	mov	r3, r0
 800f05a:	461a      	mov	r2, r3
 800f05c:	7afb      	ldrb	r3, [r7, #11]
 800f05e:	4293      	cmp	r3, r2
 800f060:	d001      	beq.n	800f066 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f062:	2301      	movs	r3, #1
 800f064:	e025      	b.n	800f0b2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	4a16      	ldr	r2, [pc, #88]	@ (800f0c4 <SDMMC_GetCmdResp6+0xec>)
 800f06a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f06c:	2100      	movs	r1, #0
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f7ff fc45 	bl	800e8fe <SDMMC_GetResponse>
 800f074:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d106      	bne.n	800f08e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	0c1b      	lsrs	r3, r3, #16
 800f084:	b29a      	uxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f08a:	2300      	movs	r3, #0
 800f08c:	e011      	b.n	800f0b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f094:	2b00      	cmp	r3, #0
 800f096:	d002      	beq.n	800f09e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f098:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f09c:	e009      	b.n	800f0b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f0a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0ac:	e001      	b.n	800f0b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f0ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3720      	adds	r7, #32
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	24000000 	.word	0x24000000
 800f0c0:	10624dd3 	.word	0x10624dd3
 800f0c4:	002000c5 	.word	0x002000c5

0800f0c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b085      	sub	sp, #20
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0d0:	4b22      	ldr	r3, [pc, #136]	@ (800f15c <SDMMC_GetCmdResp7+0x94>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a22      	ldr	r2, [pc, #136]	@ (800f160 <SDMMC_GetCmdResp7+0x98>)
 800f0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f0da:	0a5b      	lsrs	r3, r3, #9
 800f0dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0e0:	fb02 f303 	mul.w	r3, r2, r3
 800f0e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	1e5a      	subs	r2, r3, #1
 800f0ea:	60fa      	str	r2, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d102      	bne.n	800f0f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f0f4:	e02c      	b.n	800f150 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f102:	2b00      	cmp	r3, #0
 800f104:	d0ef      	beq.n	800f0e6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1ea      	bne.n	800f0e6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f114:	f003 0304 	and.w	r3, r3, #4
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d004      	beq.n	800f126 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2204      	movs	r2, #4
 800f120:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f122:	2304      	movs	r3, #4
 800f124:	e014      	b.n	800f150 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d004      	beq.n	800f13c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2201      	movs	r2, #1
 800f136:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f138:	2301      	movs	r3, #1
 800f13a:	e009      	b.n	800f150 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2240      	movs	r2, #64	@ 0x40
 800f14c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f14e:	2300      	movs	r3, #0

}
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	24000000 	.word	0x24000000
 800f160:	10624dd3 	.word	0x10624dd3

0800f164 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f164:	b480      	push	{r7}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f16c:	4b11      	ldr	r3, [pc, #68]	@ (800f1b4 <SDMMC_GetCmdError+0x50>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a11      	ldr	r2, [pc, #68]	@ (800f1b8 <SDMMC_GetCmdError+0x54>)
 800f172:	fba2 2303 	umull	r2, r3, r2, r3
 800f176:	0a5b      	lsrs	r3, r3, #9
 800f178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f17c:	fb02 f303 	mul.w	r3, r2, r3
 800f180:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	1e5a      	subs	r2, r3, #1
 800f186:	60fa      	str	r2, [r7, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d102      	bne.n	800f192 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f18c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f190:	e009      	b.n	800f1a6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d0f1      	beq.n	800f182 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a06      	ldr	r2, [pc, #24]	@ (800f1bc <SDMMC_GetCmdError+0x58>)
 800f1a2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	24000000 	.word	0x24000000
 800f1b8:	10624dd3 	.word	0x10624dd3
 800f1bc:	002000c5 	.word	0x002000c5

0800f1c0 <__cvt>:
 800f1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c2:	ed2d 8b02 	vpush	{d8}
 800f1c6:	eeb0 8b40 	vmov.f64	d8, d0
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	4617      	mov	r7, r2
 800f1ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f1d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f1d2:	ee18 2a90 	vmov	r2, s17
 800f1d6:	f025 0520 	bic.w	r5, r5, #32
 800f1da:	2a00      	cmp	r2, #0
 800f1dc:	bfb6      	itet	lt
 800f1de:	222d      	movlt	r2, #45	@ 0x2d
 800f1e0:	2200      	movge	r2, #0
 800f1e2:	eeb1 8b40 	vneglt.f64	d8, d0
 800f1e6:	2d46      	cmp	r5, #70	@ 0x46
 800f1e8:	460c      	mov	r4, r1
 800f1ea:	701a      	strb	r2, [r3, #0]
 800f1ec:	d004      	beq.n	800f1f8 <__cvt+0x38>
 800f1ee:	2d45      	cmp	r5, #69	@ 0x45
 800f1f0:	d100      	bne.n	800f1f4 <__cvt+0x34>
 800f1f2:	3401      	adds	r4, #1
 800f1f4:	2102      	movs	r1, #2
 800f1f6:	e000      	b.n	800f1fa <__cvt+0x3a>
 800f1f8:	2103      	movs	r1, #3
 800f1fa:	ab03      	add	r3, sp, #12
 800f1fc:	9301      	str	r3, [sp, #4]
 800f1fe:	ab02      	add	r3, sp, #8
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	4622      	mov	r2, r4
 800f204:	4633      	mov	r3, r6
 800f206:	eeb0 0b48 	vmov.f64	d0, d8
 800f20a:	f001 f871 	bl	80102f0 <_dtoa_r>
 800f20e:	2d47      	cmp	r5, #71	@ 0x47
 800f210:	d114      	bne.n	800f23c <__cvt+0x7c>
 800f212:	07fb      	lsls	r3, r7, #31
 800f214:	d50a      	bpl.n	800f22c <__cvt+0x6c>
 800f216:	1902      	adds	r2, r0, r4
 800f218:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f220:	bf08      	it	eq
 800f222:	9203      	streq	r2, [sp, #12]
 800f224:	2130      	movs	r1, #48	@ 0x30
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	4293      	cmp	r3, r2
 800f22a:	d319      	bcc.n	800f260 <__cvt+0xa0>
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f230:	1a1b      	subs	r3, r3, r0
 800f232:	6013      	str	r3, [r2, #0]
 800f234:	b005      	add	sp, #20
 800f236:	ecbd 8b02 	vpop	{d8}
 800f23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f23c:	2d46      	cmp	r5, #70	@ 0x46
 800f23e:	eb00 0204 	add.w	r2, r0, r4
 800f242:	d1e9      	bne.n	800f218 <__cvt+0x58>
 800f244:	7803      	ldrb	r3, [r0, #0]
 800f246:	2b30      	cmp	r3, #48	@ 0x30
 800f248:	d107      	bne.n	800f25a <__cvt+0x9a>
 800f24a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f252:	bf1c      	itt	ne
 800f254:	f1c4 0401 	rsbne	r4, r4, #1
 800f258:	6034      	strne	r4, [r6, #0]
 800f25a:	6833      	ldr	r3, [r6, #0]
 800f25c:	441a      	add	r2, r3
 800f25e:	e7db      	b.n	800f218 <__cvt+0x58>
 800f260:	1c5c      	adds	r4, r3, #1
 800f262:	9403      	str	r4, [sp, #12]
 800f264:	7019      	strb	r1, [r3, #0]
 800f266:	e7de      	b.n	800f226 <__cvt+0x66>

0800f268 <__exponent>:
 800f268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f26a:	2900      	cmp	r1, #0
 800f26c:	bfba      	itte	lt
 800f26e:	4249      	neglt	r1, r1
 800f270:	232d      	movlt	r3, #45	@ 0x2d
 800f272:	232b      	movge	r3, #43	@ 0x2b
 800f274:	2909      	cmp	r1, #9
 800f276:	7002      	strb	r2, [r0, #0]
 800f278:	7043      	strb	r3, [r0, #1]
 800f27a:	dd29      	ble.n	800f2d0 <__exponent+0x68>
 800f27c:	f10d 0307 	add.w	r3, sp, #7
 800f280:	461d      	mov	r5, r3
 800f282:	270a      	movs	r7, #10
 800f284:	461a      	mov	r2, r3
 800f286:	fbb1 f6f7 	udiv	r6, r1, r7
 800f28a:	fb07 1416 	mls	r4, r7, r6, r1
 800f28e:	3430      	adds	r4, #48	@ 0x30
 800f290:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f294:	460c      	mov	r4, r1
 800f296:	2c63      	cmp	r4, #99	@ 0x63
 800f298:	f103 33ff 	add.w	r3, r3, #4294967295
 800f29c:	4631      	mov	r1, r6
 800f29e:	dcf1      	bgt.n	800f284 <__exponent+0x1c>
 800f2a0:	3130      	adds	r1, #48	@ 0x30
 800f2a2:	1e94      	subs	r4, r2, #2
 800f2a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f2a8:	1c41      	adds	r1, r0, #1
 800f2aa:	4623      	mov	r3, r4
 800f2ac:	42ab      	cmp	r3, r5
 800f2ae:	d30a      	bcc.n	800f2c6 <__exponent+0x5e>
 800f2b0:	f10d 0309 	add.w	r3, sp, #9
 800f2b4:	1a9b      	subs	r3, r3, r2
 800f2b6:	42ac      	cmp	r4, r5
 800f2b8:	bf88      	it	hi
 800f2ba:	2300      	movhi	r3, #0
 800f2bc:	3302      	adds	r3, #2
 800f2be:	4403      	add	r3, r0
 800f2c0:	1a18      	subs	r0, r3, r0
 800f2c2:	b003      	add	sp, #12
 800f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f2ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f2ce:	e7ed      	b.n	800f2ac <__exponent+0x44>
 800f2d0:	2330      	movs	r3, #48	@ 0x30
 800f2d2:	3130      	adds	r1, #48	@ 0x30
 800f2d4:	7083      	strb	r3, [r0, #2]
 800f2d6:	70c1      	strb	r1, [r0, #3]
 800f2d8:	1d03      	adds	r3, r0, #4
 800f2da:	e7f1      	b.n	800f2c0 <__exponent+0x58>
 800f2dc:	0000      	movs	r0, r0
	...

0800f2e0 <_printf_float>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	b08d      	sub	sp, #52	@ 0x34
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f2ec:	4616      	mov	r6, r2
 800f2ee:	461f      	mov	r7, r3
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	f000 fee9 	bl	80100c8 <_localeconv_r>
 800f2f6:	f8d0 b000 	ldr.w	fp, [r0]
 800f2fa:	4658      	mov	r0, fp
 800f2fc:	f7f1 f858 	bl	80003b0 <strlen>
 800f300:	2300      	movs	r3, #0
 800f302:	930a      	str	r3, [sp, #40]	@ 0x28
 800f304:	f8d8 3000 	ldr.w	r3, [r8]
 800f308:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f30c:	6822      	ldr	r2, [r4, #0]
 800f30e:	9005      	str	r0, [sp, #20]
 800f310:	3307      	adds	r3, #7
 800f312:	f023 0307 	bic.w	r3, r3, #7
 800f316:	f103 0108 	add.w	r1, r3, #8
 800f31a:	f8c8 1000 	str.w	r1, [r8]
 800f31e:	ed93 0b00 	vldr	d0, [r3]
 800f322:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f580 <_printf_float+0x2a0>
 800f326:	eeb0 7bc0 	vabs.f64	d7, d0
 800f32a:	eeb4 7b46 	vcmp.f64	d7, d6
 800f32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f332:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f336:	dd24      	ble.n	800f382 <_printf_float+0xa2>
 800f338:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f340:	d502      	bpl.n	800f348 <_printf_float+0x68>
 800f342:	232d      	movs	r3, #45	@ 0x2d
 800f344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f348:	498f      	ldr	r1, [pc, #572]	@ (800f588 <_printf_float+0x2a8>)
 800f34a:	4b90      	ldr	r3, [pc, #576]	@ (800f58c <_printf_float+0x2ac>)
 800f34c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f350:	bf94      	ite	ls
 800f352:	4688      	movls	r8, r1
 800f354:	4698      	movhi	r8, r3
 800f356:	f022 0204 	bic.w	r2, r2, #4
 800f35a:	2303      	movs	r3, #3
 800f35c:	6123      	str	r3, [r4, #16]
 800f35e:	6022      	str	r2, [r4, #0]
 800f360:	f04f 0a00 	mov.w	sl, #0
 800f364:	9700      	str	r7, [sp, #0]
 800f366:	4633      	mov	r3, r6
 800f368:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f36a:	4621      	mov	r1, r4
 800f36c:	4628      	mov	r0, r5
 800f36e:	f000 f9d1 	bl	800f714 <_printf_common>
 800f372:	3001      	adds	r0, #1
 800f374:	f040 8089 	bne.w	800f48a <_printf_float+0x1aa>
 800f378:	f04f 30ff 	mov.w	r0, #4294967295
 800f37c:	b00d      	add	sp, #52	@ 0x34
 800f37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f382:	eeb4 0b40 	vcmp.f64	d0, d0
 800f386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38a:	d709      	bvc.n	800f3a0 <_printf_float+0xc0>
 800f38c:	ee10 3a90 	vmov	r3, s1
 800f390:	2b00      	cmp	r3, #0
 800f392:	bfbc      	itt	lt
 800f394:	232d      	movlt	r3, #45	@ 0x2d
 800f396:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f39a:	497d      	ldr	r1, [pc, #500]	@ (800f590 <_printf_float+0x2b0>)
 800f39c:	4b7d      	ldr	r3, [pc, #500]	@ (800f594 <_printf_float+0x2b4>)
 800f39e:	e7d5      	b.n	800f34c <_printf_float+0x6c>
 800f3a0:	6863      	ldr	r3, [r4, #4]
 800f3a2:	1c59      	adds	r1, r3, #1
 800f3a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f3a8:	d139      	bne.n	800f41e <_printf_float+0x13e>
 800f3aa:	2306      	movs	r3, #6
 800f3ac:	6063      	str	r3, [r4, #4]
 800f3ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	6022      	str	r2, [r4, #0]
 800f3b6:	9303      	str	r3, [sp, #12]
 800f3b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f3be:	ab09      	add	r3, sp, #36	@ 0x24
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	6861      	ldr	r1, [r4, #4]
 800f3c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	f7ff fef9 	bl	800f1c0 <__cvt>
 800f3ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f3d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3d4:	4680      	mov	r8, r0
 800f3d6:	d129      	bne.n	800f42c <_printf_float+0x14c>
 800f3d8:	1cc8      	adds	r0, r1, #3
 800f3da:	db02      	blt.n	800f3e2 <_printf_float+0x102>
 800f3dc:	6863      	ldr	r3, [r4, #4]
 800f3de:	4299      	cmp	r1, r3
 800f3e0:	dd41      	ble.n	800f466 <_printf_float+0x186>
 800f3e2:	f1a9 0902 	sub.w	r9, r9, #2
 800f3e6:	fa5f f989 	uxtb.w	r9, r9
 800f3ea:	3901      	subs	r1, #1
 800f3ec:	464a      	mov	r2, r9
 800f3ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f3f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f3f4:	f7ff ff38 	bl	800f268 <__exponent>
 800f3f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f3fa:	1813      	adds	r3, r2, r0
 800f3fc:	2a01      	cmp	r2, #1
 800f3fe:	4682      	mov	sl, r0
 800f400:	6123      	str	r3, [r4, #16]
 800f402:	dc02      	bgt.n	800f40a <_printf_float+0x12a>
 800f404:	6822      	ldr	r2, [r4, #0]
 800f406:	07d2      	lsls	r2, r2, #31
 800f408:	d501      	bpl.n	800f40e <_printf_float+0x12e>
 800f40a:	3301      	adds	r3, #1
 800f40c:	6123      	str	r3, [r4, #16]
 800f40e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f412:	2b00      	cmp	r3, #0
 800f414:	d0a6      	beq.n	800f364 <_printf_float+0x84>
 800f416:	232d      	movs	r3, #45	@ 0x2d
 800f418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f41c:	e7a2      	b.n	800f364 <_printf_float+0x84>
 800f41e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f422:	d1c4      	bne.n	800f3ae <_printf_float+0xce>
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1c2      	bne.n	800f3ae <_printf_float+0xce>
 800f428:	2301      	movs	r3, #1
 800f42a:	e7bf      	b.n	800f3ac <_printf_float+0xcc>
 800f42c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f430:	d9db      	bls.n	800f3ea <_printf_float+0x10a>
 800f432:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f436:	d118      	bne.n	800f46a <_printf_float+0x18a>
 800f438:	2900      	cmp	r1, #0
 800f43a:	6863      	ldr	r3, [r4, #4]
 800f43c:	dd0b      	ble.n	800f456 <_printf_float+0x176>
 800f43e:	6121      	str	r1, [r4, #16]
 800f440:	b913      	cbnz	r3, 800f448 <_printf_float+0x168>
 800f442:	6822      	ldr	r2, [r4, #0]
 800f444:	07d0      	lsls	r0, r2, #31
 800f446:	d502      	bpl.n	800f44e <_printf_float+0x16e>
 800f448:	3301      	adds	r3, #1
 800f44a:	440b      	add	r3, r1
 800f44c:	6123      	str	r3, [r4, #16]
 800f44e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f450:	f04f 0a00 	mov.w	sl, #0
 800f454:	e7db      	b.n	800f40e <_printf_float+0x12e>
 800f456:	b913      	cbnz	r3, 800f45e <_printf_float+0x17e>
 800f458:	6822      	ldr	r2, [r4, #0]
 800f45a:	07d2      	lsls	r2, r2, #31
 800f45c:	d501      	bpl.n	800f462 <_printf_float+0x182>
 800f45e:	3302      	adds	r3, #2
 800f460:	e7f4      	b.n	800f44c <_printf_float+0x16c>
 800f462:	2301      	movs	r3, #1
 800f464:	e7f2      	b.n	800f44c <_printf_float+0x16c>
 800f466:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f46a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f46c:	4299      	cmp	r1, r3
 800f46e:	db05      	blt.n	800f47c <_printf_float+0x19c>
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	6121      	str	r1, [r4, #16]
 800f474:	07d8      	lsls	r0, r3, #31
 800f476:	d5ea      	bpl.n	800f44e <_printf_float+0x16e>
 800f478:	1c4b      	adds	r3, r1, #1
 800f47a:	e7e7      	b.n	800f44c <_printf_float+0x16c>
 800f47c:	2900      	cmp	r1, #0
 800f47e:	bfd4      	ite	le
 800f480:	f1c1 0202 	rsble	r2, r1, #2
 800f484:	2201      	movgt	r2, #1
 800f486:	4413      	add	r3, r2
 800f488:	e7e0      	b.n	800f44c <_printf_float+0x16c>
 800f48a:	6823      	ldr	r3, [r4, #0]
 800f48c:	055a      	lsls	r2, r3, #21
 800f48e:	d407      	bmi.n	800f4a0 <_printf_float+0x1c0>
 800f490:	6923      	ldr	r3, [r4, #16]
 800f492:	4642      	mov	r2, r8
 800f494:	4631      	mov	r1, r6
 800f496:	4628      	mov	r0, r5
 800f498:	47b8      	blx	r7
 800f49a:	3001      	adds	r0, #1
 800f49c:	d12a      	bne.n	800f4f4 <_printf_float+0x214>
 800f49e:	e76b      	b.n	800f378 <_printf_float+0x98>
 800f4a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f4a4:	f240 80e0 	bls.w	800f668 <_printf_float+0x388>
 800f4a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f4ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b4:	d133      	bne.n	800f51e <_printf_float+0x23e>
 800f4b6:	4a38      	ldr	r2, [pc, #224]	@ (800f598 <_printf_float+0x2b8>)
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	4628      	mov	r0, r5
 800f4be:	47b8      	blx	r7
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	f43f af59 	beq.w	800f378 <_printf_float+0x98>
 800f4c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f4ca:	4543      	cmp	r3, r8
 800f4cc:	db02      	blt.n	800f4d4 <_printf_float+0x1f4>
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	07d8      	lsls	r0, r3, #31
 800f4d2:	d50f      	bpl.n	800f4f4 <_printf_float+0x214>
 800f4d4:	9b05      	ldr	r3, [sp, #20]
 800f4d6:	465a      	mov	r2, fp
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4628      	mov	r0, r5
 800f4dc:	47b8      	blx	r7
 800f4de:	3001      	adds	r0, #1
 800f4e0:	f43f af4a 	beq.w	800f378 <_printf_float+0x98>
 800f4e4:	f04f 0900 	mov.w	r9, #0
 800f4e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4ec:	f104 0a1a 	add.w	sl, r4, #26
 800f4f0:	45c8      	cmp	r8, r9
 800f4f2:	dc09      	bgt.n	800f508 <_printf_float+0x228>
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	079b      	lsls	r3, r3, #30
 800f4f8:	f100 8107 	bmi.w	800f70a <_printf_float+0x42a>
 800f4fc:	68e0      	ldr	r0, [r4, #12]
 800f4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f500:	4298      	cmp	r0, r3
 800f502:	bfb8      	it	lt
 800f504:	4618      	movlt	r0, r3
 800f506:	e739      	b.n	800f37c <_printf_float+0x9c>
 800f508:	2301      	movs	r3, #1
 800f50a:	4652      	mov	r2, sl
 800f50c:	4631      	mov	r1, r6
 800f50e:	4628      	mov	r0, r5
 800f510:	47b8      	blx	r7
 800f512:	3001      	adds	r0, #1
 800f514:	f43f af30 	beq.w	800f378 <_printf_float+0x98>
 800f518:	f109 0901 	add.w	r9, r9, #1
 800f51c:	e7e8      	b.n	800f4f0 <_printf_float+0x210>
 800f51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f520:	2b00      	cmp	r3, #0
 800f522:	dc3b      	bgt.n	800f59c <_printf_float+0x2bc>
 800f524:	4a1c      	ldr	r2, [pc, #112]	@ (800f598 <_printf_float+0x2b8>)
 800f526:	2301      	movs	r3, #1
 800f528:	4631      	mov	r1, r6
 800f52a:	4628      	mov	r0, r5
 800f52c:	47b8      	blx	r7
 800f52e:	3001      	adds	r0, #1
 800f530:	f43f af22 	beq.w	800f378 <_printf_float+0x98>
 800f534:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f538:	ea59 0303 	orrs.w	r3, r9, r3
 800f53c:	d102      	bne.n	800f544 <_printf_float+0x264>
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	07d9      	lsls	r1, r3, #31
 800f542:	d5d7      	bpl.n	800f4f4 <_printf_float+0x214>
 800f544:	9b05      	ldr	r3, [sp, #20]
 800f546:	465a      	mov	r2, fp
 800f548:	4631      	mov	r1, r6
 800f54a:	4628      	mov	r0, r5
 800f54c:	47b8      	blx	r7
 800f54e:	3001      	adds	r0, #1
 800f550:	f43f af12 	beq.w	800f378 <_printf_float+0x98>
 800f554:	f04f 0a00 	mov.w	sl, #0
 800f558:	f104 0b1a 	add.w	fp, r4, #26
 800f55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f55e:	425b      	negs	r3, r3
 800f560:	4553      	cmp	r3, sl
 800f562:	dc01      	bgt.n	800f568 <_printf_float+0x288>
 800f564:	464b      	mov	r3, r9
 800f566:	e794      	b.n	800f492 <_printf_float+0x1b2>
 800f568:	2301      	movs	r3, #1
 800f56a:	465a      	mov	r2, fp
 800f56c:	4631      	mov	r1, r6
 800f56e:	4628      	mov	r0, r5
 800f570:	47b8      	blx	r7
 800f572:	3001      	adds	r0, #1
 800f574:	f43f af00 	beq.w	800f378 <_printf_float+0x98>
 800f578:	f10a 0a01 	add.w	sl, sl, #1
 800f57c:	e7ee      	b.n	800f55c <_printf_float+0x27c>
 800f57e:	bf00      	nop
 800f580:	ffffffff 	.word	0xffffffff
 800f584:	7fefffff 	.word	0x7fefffff
 800f588:	0801378c 	.word	0x0801378c
 800f58c:	08013790 	.word	0x08013790
 800f590:	08013794 	.word	0x08013794
 800f594:	08013798 	.word	0x08013798
 800f598:	0801379c 	.word	0x0801379c
 800f59c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f59e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f5a2:	4553      	cmp	r3, sl
 800f5a4:	bfa8      	it	ge
 800f5a6:	4653      	movge	r3, sl
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	4699      	mov	r9, r3
 800f5ac:	dc37      	bgt.n	800f61e <_printf_float+0x33e>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	9307      	str	r3, [sp, #28]
 800f5b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5b6:	f104 021a 	add.w	r2, r4, #26
 800f5ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5bc:	9907      	ldr	r1, [sp, #28]
 800f5be:	9306      	str	r3, [sp, #24]
 800f5c0:	eba3 0309 	sub.w	r3, r3, r9
 800f5c4:	428b      	cmp	r3, r1
 800f5c6:	dc31      	bgt.n	800f62c <_printf_float+0x34c>
 800f5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ca:	459a      	cmp	sl, r3
 800f5cc:	dc3b      	bgt.n	800f646 <_printf_float+0x366>
 800f5ce:	6823      	ldr	r3, [r4, #0]
 800f5d0:	07da      	lsls	r2, r3, #31
 800f5d2:	d438      	bmi.n	800f646 <_printf_float+0x366>
 800f5d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d6:	ebaa 0903 	sub.w	r9, sl, r3
 800f5da:	9b06      	ldr	r3, [sp, #24]
 800f5dc:	ebaa 0303 	sub.w	r3, sl, r3
 800f5e0:	4599      	cmp	r9, r3
 800f5e2:	bfa8      	it	ge
 800f5e4:	4699      	movge	r9, r3
 800f5e6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ea:	dc34      	bgt.n	800f656 <_printf_float+0x376>
 800f5ec:	f04f 0800 	mov.w	r8, #0
 800f5f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5f4:	f104 0b1a 	add.w	fp, r4, #26
 800f5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5fa:	ebaa 0303 	sub.w	r3, sl, r3
 800f5fe:	eba3 0309 	sub.w	r3, r3, r9
 800f602:	4543      	cmp	r3, r8
 800f604:	f77f af76 	ble.w	800f4f4 <_printf_float+0x214>
 800f608:	2301      	movs	r3, #1
 800f60a:	465a      	mov	r2, fp
 800f60c:	4631      	mov	r1, r6
 800f60e:	4628      	mov	r0, r5
 800f610:	47b8      	blx	r7
 800f612:	3001      	adds	r0, #1
 800f614:	f43f aeb0 	beq.w	800f378 <_printf_float+0x98>
 800f618:	f108 0801 	add.w	r8, r8, #1
 800f61c:	e7ec      	b.n	800f5f8 <_printf_float+0x318>
 800f61e:	4642      	mov	r2, r8
 800f620:	4631      	mov	r1, r6
 800f622:	4628      	mov	r0, r5
 800f624:	47b8      	blx	r7
 800f626:	3001      	adds	r0, #1
 800f628:	d1c1      	bne.n	800f5ae <_printf_float+0x2ce>
 800f62a:	e6a5      	b.n	800f378 <_printf_float+0x98>
 800f62c:	2301      	movs	r3, #1
 800f62e:	4631      	mov	r1, r6
 800f630:	4628      	mov	r0, r5
 800f632:	9206      	str	r2, [sp, #24]
 800f634:	47b8      	blx	r7
 800f636:	3001      	adds	r0, #1
 800f638:	f43f ae9e 	beq.w	800f378 <_printf_float+0x98>
 800f63c:	9b07      	ldr	r3, [sp, #28]
 800f63e:	9a06      	ldr	r2, [sp, #24]
 800f640:	3301      	adds	r3, #1
 800f642:	9307      	str	r3, [sp, #28]
 800f644:	e7b9      	b.n	800f5ba <_printf_float+0x2da>
 800f646:	9b05      	ldr	r3, [sp, #20]
 800f648:	465a      	mov	r2, fp
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b8      	blx	r7
 800f650:	3001      	adds	r0, #1
 800f652:	d1bf      	bne.n	800f5d4 <_printf_float+0x2f4>
 800f654:	e690      	b.n	800f378 <_printf_float+0x98>
 800f656:	9a06      	ldr	r2, [sp, #24]
 800f658:	464b      	mov	r3, r9
 800f65a:	4442      	add	r2, r8
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	d1c2      	bne.n	800f5ec <_printf_float+0x30c>
 800f666:	e687      	b.n	800f378 <_printf_float+0x98>
 800f668:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f66c:	f1b9 0f01 	cmp.w	r9, #1
 800f670:	dc01      	bgt.n	800f676 <_printf_float+0x396>
 800f672:	07db      	lsls	r3, r3, #31
 800f674:	d536      	bpl.n	800f6e4 <_printf_float+0x404>
 800f676:	2301      	movs	r3, #1
 800f678:	4642      	mov	r2, r8
 800f67a:	4631      	mov	r1, r6
 800f67c:	4628      	mov	r0, r5
 800f67e:	47b8      	blx	r7
 800f680:	3001      	adds	r0, #1
 800f682:	f43f ae79 	beq.w	800f378 <_printf_float+0x98>
 800f686:	9b05      	ldr	r3, [sp, #20]
 800f688:	465a      	mov	r2, fp
 800f68a:	4631      	mov	r1, r6
 800f68c:	4628      	mov	r0, r5
 800f68e:	47b8      	blx	r7
 800f690:	3001      	adds	r0, #1
 800f692:	f43f ae71 	beq.w	800f378 <_printf_float+0x98>
 800f696:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f69a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f6a6:	d018      	beq.n	800f6da <_printf_float+0x3fa>
 800f6a8:	464b      	mov	r3, r9
 800f6aa:	f108 0201 	add.w	r2, r8, #1
 800f6ae:	4631      	mov	r1, r6
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	47b8      	blx	r7
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	d10c      	bne.n	800f6d2 <_printf_float+0x3f2>
 800f6b8:	e65e      	b.n	800f378 <_printf_float+0x98>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	465a      	mov	r2, fp
 800f6be:	4631      	mov	r1, r6
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	47b8      	blx	r7
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	f43f ae57 	beq.w	800f378 <_printf_float+0x98>
 800f6ca:	f108 0801 	add.w	r8, r8, #1
 800f6ce:	45c8      	cmp	r8, r9
 800f6d0:	dbf3      	blt.n	800f6ba <_printf_float+0x3da>
 800f6d2:	4653      	mov	r3, sl
 800f6d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f6d8:	e6dc      	b.n	800f494 <_printf_float+0x1b4>
 800f6da:	f04f 0800 	mov.w	r8, #0
 800f6de:	f104 0b1a 	add.w	fp, r4, #26
 800f6e2:	e7f4      	b.n	800f6ce <_printf_float+0x3ee>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	4642      	mov	r2, r8
 800f6e8:	e7e1      	b.n	800f6ae <_printf_float+0x3ce>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	464a      	mov	r2, r9
 800f6ee:	4631      	mov	r1, r6
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	47b8      	blx	r7
 800f6f4:	3001      	adds	r0, #1
 800f6f6:	f43f ae3f 	beq.w	800f378 <_printf_float+0x98>
 800f6fa:	f108 0801 	add.w	r8, r8, #1
 800f6fe:	68e3      	ldr	r3, [r4, #12]
 800f700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f702:	1a5b      	subs	r3, r3, r1
 800f704:	4543      	cmp	r3, r8
 800f706:	dcf0      	bgt.n	800f6ea <_printf_float+0x40a>
 800f708:	e6f8      	b.n	800f4fc <_printf_float+0x21c>
 800f70a:	f04f 0800 	mov.w	r8, #0
 800f70e:	f104 0919 	add.w	r9, r4, #25
 800f712:	e7f4      	b.n	800f6fe <_printf_float+0x41e>

0800f714 <_printf_common>:
 800f714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f718:	4616      	mov	r6, r2
 800f71a:	4698      	mov	r8, r3
 800f71c:	688a      	ldr	r2, [r1, #8]
 800f71e:	690b      	ldr	r3, [r1, #16]
 800f720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f724:	4293      	cmp	r3, r2
 800f726:	bfb8      	it	lt
 800f728:	4613      	movlt	r3, r2
 800f72a:	6033      	str	r3, [r6, #0]
 800f72c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f730:	4607      	mov	r7, r0
 800f732:	460c      	mov	r4, r1
 800f734:	b10a      	cbz	r2, 800f73a <_printf_common+0x26>
 800f736:	3301      	adds	r3, #1
 800f738:	6033      	str	r3, [r6, #0]
 800f73a:	6823      	ldr	r3, [r4, #0]
 800f73c:	0699      	lsls	r1, r3, #26
 800f73e:	bf42      	ittt	mi
 800f740:	6833      	ldrmi	r3, [r6, #0]
 800f742:	3302      	addmi	r3, #2
 800f744:	6033      	strmi	r3, [r6, #0]
 800f746:	6825      	ldr	r5, [r4, #0]
 800f748:	f015 0506 	ands.w	r5, r5, #6
 800f74c:	d106      	bne.n	800f75c <_printf_common+0x48>
 800f74e:	f104 0a19 	add.w	sl, r4, #25
 800f752:	68e3      	ldr	r3, [r4, #12]
 800f754:	6832      	ldr	r2, [r6, #0]
 800f756:	1a9b      	subs	r3, r3, r2
 800f758:	42ab      	cmp	r3, r5
 800f75a:	dc26      	bgt.n	800f7aa <_printf_common+0x96>
 800f75c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f760:	6822      	ldr	r2, [r4, #0]
 800f762:	3b00      	subs	r3, #0
 800f764:	bf18      	it	ne
 800f766:	2301      	movne	r3, #1
 800f768:	0692      	lsls	r2, r2, #26
 800f76a:	d42b      	bmi.n	800f7c4 <_printf_common+0xb0>
 800f76c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f770:	4641      	mov	r1, r8
 800f772:	4638      	mov	r0, r7
 800f774:	47c8      	blx	r9
 800f776:	3001      	adds	r0, #1
 800f778:	d01e      	beq.n	800f7b8 <_printf_common+0xa4>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	6922      	ldr	r2, [r4, #16]
 800f77e:	f003 0306 	and.w	r3, r3, #6
 800f782:	2b04      	cmp	r3, #4
 800f784:	bf02      	ittt	eq
 800f786:	68e5      	ldreq	r5, [r4, #12]
 800f788:	6833      	ldreq	r3, [r6, #0]
 800f78a:	1aed      	subeq	r5, r5, r3
 800f78c:	68a3      	ldr	r3, [r4, #8]
 800f78e:	bf0c      	ite	eq
 800f790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f794:	2500      	movne	r5, #0
 800f796:	4293      	cmp	r3, r2
 800f798:	bfc4      	itt	gt
 800f79a:	1a9b      	subgt	r3, r3, r2
 800f79c:	18ed      	addgt	r5, r5, r3
 800f79e:	2600      	movs	r6, #0
 800f7a0:	341a      	adds	r4, #26
 800f7a2:	42b5      	cmp	r5, r6
 800f7a4:	d11a      	bne.n	800f7dc <_printf_common+0xc8>
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	e008      	b.n	800f7bc <_printf_common+0xa8>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	4652      	mov	r2, sl
 800f7ae:	4641      	mov	r1, r8
 800f7b0:	4638      	mov	r0, r7
 800f7b2:	47c8      	blx	r9
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d103      	bne.n	800f7c0 <_printf_common+0xac>
 800f7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c0:	3501      	adds	r5, #1
 800f7c2:	e7c6      	b.n	800f752 <_printf_common+0x3e>
 800f7c4:	18e1      	adds	r1, r4, r3
 800f7c6:	1c5a      	adds	r2, r3, #1
 800f7c8:	2030      	movs	r0, #48	@ 0x30
 800f7ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7ce:	4422      	add	r2, r4
 800f7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f7d8:	3302      	adds	r3, #2
 800f7da:	e7c7      	b.n	800f76c <_printf_common+0x58>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	4622      	mov	r2, r4
 800f7e0:	4641      	mov	r1, r8
 800f7e2:	4638      	mov	r0, r7
 800f7e4:	47c8      	blx	r9
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	d0e6      	beq.n	800f7b8 <_printf_common+0xa4>
 800f7ea:	3601      	adds	r6, #1
 800f7ec:	e7d9      	b.n	800f7a2 <_printf_common+0x8e>
	...

0800f7f0 <_printf_i>:
 800f7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7f4:	7e0f      	ldrb	r7, [r1, #24]
 800f7f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7f8:	2f78      	cmp	r7, #120	@ 0x78
 800f7fa:	4691      	mov	r9, r2
 800f7fc:	4680      	mov	r8, r0
 800f7fe:	460c      	mov	r4, r1
 800f800:	469a      	mov	sl, r3
 800f802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f806:	d807      	bhi.n	800f818 <_printf_i+0x28>
 800f808:	2f62      	cmp	r7, #98	@ 0x62
 800f80a:	d80a      	bhi.n	800f822 <_printf_i+0x32>
 800f80c:	2f00      	cmp	r7, #0
 800f80e:	f000 80d2 	beq.w	800f9b6 <_printf_i+0x1c6>
 800f812:	2f58      	cmp	r7, #88	@ 0x58
 800f814:	f000 80b9 	beq.w	800f98a <_printf_i+0x19a>
 800f818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f81c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f820:	e03a      	b.n	800f898 <_printf_i+0xa8>
 800f822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f826:	2b15      	cmp	r3, #21
 800f828:	d8f6      	bhi.n	800f818 <_printf_i+0x28>
 800f82a:	a101      	add	r1, pc, #4	@ (adr r1, 800f830 <_printf_i+0x40>)
 800f82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f830:	0800f889 	.word	0x0800f889
 800f834:	0800f89d 	.word	0x0800f89d
 800f838:	0800f819 	.word	0x0800f819
 800f83c:	0800f819 	.word	0x0800f819
 800f840:	0800f819 	.word	0x0800f819
 800f844:	0800f819 	.word	0x0800f819
 800f848:	0800f89d 	.word	0x0800f89d
 800f84c:	0800f819 	.word	0x0800f819
 800f850:	0800f819 	.word	0x0800f819
 800f854:	0800f819 	.word	0x0800f819
 800f858:	0800f819 	.word	0x0800f819
 800f85c:	0800f99d 	.word	0x0800f99d
 800f860:	0800f8c7 	.word	0x0800f8c7
 800f864:	0800f957 	.word	0x0800f957
 800f868:	0800f819 	.word	0x0800f819
 800f86c:	0800f819 	.word	0x0800f819
 800f870:	0800f9bf 	.word	0x0800f9bf
 800f874:	0800f819 	.word	0x0800f819
 800f878:	0800f8c7 	.word	0x0800f8c7
 800f87c:	0800f819 	.word	0x0800f819
 800f880:	0800f819 	.word	0x0800f819
 800f884:	0800f95f 	.word	0x0800f95f
 800f888:	6833      	ldr	r3, [r6, #0]
 800f88a:	1d1a      	adds	r2, r3, #4
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	6032      	str	r2, [r6, #0]
 800f890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f898:	2301      	movs	r3, #1
 800f89a:	e09d      	b.n	800f9d8 <_printf_i+0x1e8>
 800f89c:	6833      	ldr	r3, [r6, #0]
 800f89e:	6820      	ldr	r0, [r4, #0]
 800f8a0:	1d19      	adds	r1, r3, #4
 800f8a2:	6031      	str	r1, [r6, #0]
 800f8a4:	0606      	lsls	r6, r0, #24
 800f8a6:	d501      	bpl.n	800f8ac <_printf_i+0xbc>
 800f8a8:	681d      	ldr	r5, [r3, #0]
 800f8aa:	e003      	b.n	800f8b4 <_printf_i+0xc4>
 800f8ac:	0645      	lsls	r5, r0, #25
 800f8ae:	d5fb      	bpl.n	800f8a8 <_printf_i+0xb8>
 800f8b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f8b4:	2d00      	cmp	r5, #0
 800f8b6:	da03      	bge.n	800f8c0 <_printf_i+0xd0>
 800f8b8:	232d      	movs	r3, #45	@ 0x2d
 800f8ba:	426d      	negs	r5, r5
 800f8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8c0:	4859      	ldr	r0, [pc, #356]	@ (800fa28 <_printf_i+0x238>)
 800f8c2:	230a      	movs	r3, #10
 800f8c4:	e011      	b.n	800f8ea <_printf_i+0xfa>
 800f8c6:	6821      	ldr	r1, [r4, #0]
 800f8c8:	6833      	ldr	r3, [r6, #0]
 800f8ca:	0608      	lsls	r0, r1, #24
 800f8cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8d0:	d402      	bmi.n	800f8d8 <_printf_i+0xe8>
 800f8d2:	0649      	lsls	r1, r1, #25
 800f8d4:	bf48      	it	mi
 800f8d6:	b2ad      	uxthmi	r5, r5
 800f8d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f8da:	4853      	ldr	r0, [pc, #332]	@ (800fa28 <_printf_i+0x238>)
 800f8dc:	6033      	str	r3, [r6, #0]
 800f8de:	bf14      	ite	ne
 800f8e0:	230a      	movne	r3, #10
 800f8e2:	2308      	moveq	r3, #8
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f8ea:	6866      	ldr	r6, [r4, #4]
 800f8ec:	60a6      	str	r6, [r4, #8]
 800f8ee:	2e00      	cmp	r6, #0
 800f8f0:	bfa2      	ittt	ge
 800f8f2:	6821      	ldrge	r1, [r4, #0]
 800f8f4:	f021 0104 	bicge.w	r1, r1, #4
 800f8f8:	6021      	strge	r1, [r4, #0]
 800f8fa:	b90d      	cbnz	r5, 800f900 <_printf_i+0x110>
 800f8fc:	2e00      	cmp	r6, #0
 800f8fe:	d04b      	beq.n	800f998 <_printf_i+0x1a8>
 800f900:	4616      	mov	r6, r2
 800f902:	fbb5 f1f3 	udiv	r1, r5, r3
 800f906:	fb03 5711 	mls	r7, r3, r1, r5
 800f90a:	5dc7      	ldrb	r7, [r0, r7]
 800f90c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f910:	462f      	mov	r7, r5
 800f912:	42bb      	cmp	r3, r7
 800f914:	460d      	mov	r5, r1
 800f916:	d9f4      	bls.n	800f902 <_printf_i+0x112>
 800f918:	2b08      	cmp	r3, #8
 800f91a:	d10b      	bne.n	800f934 <_printf_i+0x144>
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	07df      	lsls	r7, r3, #31
 800f920:	d508      	bpl.n	800f934 <_printf_i+0x144>
 800f922:	6923      	ldr	r3, [r4, #16]
 800f924:	6861      	ldr	r1, [r4, #4]
 800f926:	4299      	cmp	r1, r3
 800f928:	bfde      	ittt	le
 800f92a:	2330      	movle	r3, #48	@ 0x30
 800f92c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f930:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f934:	1b92      	subs	r2, r2, r6
 800f936:	6122      	str	r2, [r4, #16]
 800f938:	f8cd a000 	str.w	sl, [sp]
 800f93c:	464b      	mov	r3, r9
 800f93e:	aa03      	add	r2, sp, #12
 800f940:	4621      	mov	r1, r4
 800f942:	4640      	mov	r0, r8
 800f944:	f7ff fee6 	bl	800f714 <_printf_common>
 800f948:	3001      	adds	r0, #1
 800f94a:	d14a      	bne.n	800f9e2 <_printf_i+0x1f2>
 800f94c:	f04f 30ff 	mov.w	r0, #4294967295
 800f950:	b004      	add	sp, #16
 800f952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	f043 0320 	orr.w	r3, r3, #32
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	4833      	ldr	r0, [pc, #204]	@ (800fa2c <_printf_i+0x23c>)
 800f960:	2778      	movs	r7, #120	@ 0x78
 800f962:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f966:	6823      	ldr	r3, [r4, #0]
 800f968:	6831      	ldr	r1, [r6, #0]
 800f96a:	061f      	lsls	r7, r3, #24
 800f96c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f970:	d402      	bmi.n	800f978 <_printf_i+0x188>
 800f972:	065f      	lsls	r7, r3, #25
 800f974:	bf48      	it	mi
 800f976:	b2ad      	uxthmi	r5, r5
 800f978:	6031      	str	r1, [r6, #0]
 800f97a:	07d9      	lsls	r1, r3, #31
 800f97c:	bf44      	itt	mi
 800f97e:	f043 0320 	orrmi.w	r3, r3, #32
 800f982:	6023      	strmi	r3, [r4, #0]
 800f984:	b11d      	cbz	r5, 800f98e <_printf_i+0x19e>
 800f986:	2310      	movs	r3, #16
 800f988:	e7ac      	b.n	800f8e4 <_printf_i+0xf4>
 800f98a:	4827      	ldr	r0, [pc, #156]	@ (800fa28 <_printf_i+0x238>)
 800f98c:	e7e9      	b.n	800f962 <_printf_i+0x172>
 800f98e:	6823      	ldr	r3, [r4, #0]
 800f990:	f023 0320 	bic.w	r3, r3, #32
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	e7f6      	b.n	800f986 <_printf_i+0x196>
 800f998:	4616      	mov	r6, r2
 800f99a:	e7bd      	b.n	800f918 <_printf_i+0x128>
 800f99c:	6833      	ldr	r3, [r6, #0]
 800f99e:	6825      	ldr	r5, [r4, #0]
 800f9a0:	6961      	ldr	r1, [r4, #20]
 800f9a2:	1d18      	adds	r0, r3, #4
 800f9a4:	6030      	str	r0, [r6, #0]
 800f9a6:	062e      	lsls	r6, r5, #24
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	d501      	bpl.n	800f9b0 <_printf_i+0x1c0>
 800f9ac:	6019      	str	r1, [r3, #0]
 800f9ae:	e002      	b.n	800f9b6 <_printf_i+0x1c6>
 800f9b0:	0668      	lsls	r0, r5, #25
 800f9b2:	d5fb      	bpl.n	800f9ac <_printf_i+0x1bc>
 800f9b4:	8019      	strh	r1, [r3, #0]
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	6123      	str	r3, [r4, #16]
 800f9ba:	4616      	mov	r6, r2
 800f9bc:	e7bc      	b.n	800f938 <_printf_i+0x148>
 800f9be:	6833      	ldr	r3, [r6, #0]
 800f9c0:	1d1a      	adds	r2, r3, #4
 800f9c2:	6032      	str	r2, [r6, #0]
 800f9c4:	681e      	ldr	r6, [r3, #0]
 800f9c6:	6862      	ldr	r2, [r4, #4]
 800f9c8:	2100      	movs	r1, #0
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f7f0 fca0 	bl	8000310 <memchr>
 800f9d0:	b108      	cbz	r0, 800f9d6 <_printf_i+0x1e6>
 800f9d2:	1b80      	subs	r0, r0, r6
 800f9d4:	6060      	str	r0, [r4, #4]
 800f9d6:	6863      	ldr	r3, [r4, #4]
 800f9d8:	6123      	str	r3, [r4, #16]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9e0:	e7aa      	b.n	800f938 <_printf_i+0x148>
 800f9e2:	6923      	ldr	r3, [r4, #16]
 800f9e4:	4632      	mov	r2, r6
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	47d0      	blx	sl
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	d0ad      	beq.n	800f94c <_printf_i+0x15c>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	079b      	lsls	r3, r3, #30
 800f9f4:	d413      	bmi.n	800fa1e <_printf_i+0x22e>
 800f9f6:	68e0      	ldr	r0, [r4, #12]
 800f9f8:	9b03      	ldr	r3, [sp, #12]
 800f9fa:	4298      	cmp	r0, r3
 800f9fc:	bfb8      	it	lt
 800f9fe:	4618      	movlt	r0, r3
 800fa00:	e7a6      	b.n	800f950 <_printf_i+0x160>
 800fa02:	2301      	movs	r3, #1
 800fa04:	4632      	mov	r2, r6
 800fa06:	4649      	mov	r1, r9
 800fa08:	4640      	mov	r0, r8
 800fa0a:	47d0      	blx	sl
 800fa0c:	3001      	adds	r0, #1
 800fa0e:	d09d      	beq.n	800f94c <_printf_i+0x15c>
 800fa10:	3501      	adds	r5, #1
 800fa12:	68e3      	ldr	r3, [r4, #12]
 800fa14:	9903      	ldr	r1, [sp, #12]
 800fa16:	1a5b      	subs	r3, r3, r1
 800fa18:	42ab      	cmp	r3, r5
 800fa1a:	dcf2      	bgt.n	800fa02 <_printf_i+0x212>
 800fa1c:	e7eb      	b.n	800f9f6 <_printf_i+0x206>
 800fa1e:	2500      	movs	r5, #0
 800fa20:	f104 0619 	add.w	r6, r4, #25
 800fa24:	e7f5      	b.n	800fa12 <_printf_i+0x222>
 800fa26:	bf00      	nop
 800fa28:	0801379e 	.word	0x0801379e
 800fa2c:	080137af 	.word	0x080137af

0800fa30 <_scanf_float>:
 800fa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa34:	b087      	sub	sp, #28
 800fa36:	4617      	mov	r7, r2
 800fa38:	9303      	str	r3, [sp, #12]
 800fa3a:	688b      	ldr	r3, [r1, #8]
 800fa3c:	1e5a      	subs	r2, r3, #1
 800fa3e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fa42:	bf81      	itttt	hi
 800fa44:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fa48:	eb03 0b05 	addhi.w	fp, r3, r5
 800fa4c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fa50:	608b      	strhi	r3, [r1, #8]
 800fa52:	680b      	ldr	r3, [r1, #0]
 800fa54:	460a      	mov	r2, r1
 800fa56:	f04f 0500 	mov.w	r5, #0
 800fa5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fa5e:	f842 3b1c 	str.w	r3, [r2], #28
 800fa62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fa66:	4680      	mov	r8, r0
 800fa68:	460c      	mov	r4, r1
 800fa6a:	bf98      	it	ls
 800fa6c:	f04f 0b00 	movls.w	fp, #0
 800fa70:	9201      	str	r2, [sp, #4]
 800fa72:	4616      	mov	r6, r2
 800fa74:	46aa      	mov	sl, r5
 800fa76:	46a9      	mov	r9, r5
 800fa78:	9502      	str	r5, [sp, #8]
 800fa7a:	68a2      	ldr	r2, [r4, #8]
 800fa7c:	b152      	cbz	r2, 800fa94 <_scanf_float+0x64>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	2b4e      	cmp	r3, #78	@ 0x4e
 800fa84:	d864      	bhi.n	800fb50 <_scanf_float+0x120>
 800fa86:	2b40      	cmp	r3, #64	@ 0x40
 800fa88:	d83c      	bhi.n	800fb04 <_scanf_float+0xd4>
 800fa8a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fa8e:	b2c8      	uxtb	r0, r1
 800fa90:	280e      	cmp	r0, #14
 800fa92:	d93a      	bls.n	800fb0a <_scanf_float+0xda>
 800fa94:	f1b9 0f00 	cmp.w	r9, #0
 800fa98:	d003      	beq.n	800faa2 <_scanf_float+0x72>
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800faa0:	6023      	str	r3, [r4, #0]
 800faa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800faa6:	f1ba 0f01 	cmp.w	sl, #1
 800faaa:	f200 8117 	bhi.w	800fcdc <_scanf_float+0x2ac>
 800faae:	9b01      	ldr	r3, [sp, #4]
 800fab0:	429e      	cmp	r6, r3
 800fab2:	f200 8108 	bhi.w	800fcc6 <_scanf_float+0x296>
 800fab6:	2001      	movs	r0, #1
 800fab8:	b007      	add	sp, #28
 800faba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fabe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fac2:	2a0d      	cmp	r2, #13
 800fac4:	d8e6      	bhi.n	800fa94 <_scanf_float+0x64>
 800fac6:	a101      	add	r1, pc, #4	@ (adr r1, 800facc <_scanf_float+0x9c>)
 800fac8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800facc:	0800fc13 	.word	0x0800fc13
 800fad0:	0800fa95 	.word	0x0800fa95
 800fad4:	0800fa95 	.word	0x0800fa95
 800fad8:	0800fa95 	.word	0x0800fa95
 800fadc:	0800fc73 	.word	0x0800fc73
 800fae0:	0800fc4b 	.word	0x0800fc4b
 800fae4:	0800fa95 	.word	0x0800fa95
 800fae8:	0800fa95 	.word	0x0800fa95
 800faec:	0800fc21 	.word	0x0800fc21
 800faf0:	0800fa95 	.word	0x0800fa95
 800faf4:	0800fa95 	.word	0x0800fa95
 800faf8:	0800fa95 	.word	0x0800fa95
 800fafc:	0800fa95 	.word	0x0800fa95
 800fb00:	0800fbd9 	.word	0x0800fbd9
 800fb04:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fb08:	e7db      	b.n	800fac2 <_scanf_float+0x92>
 800fb0a:	290e      	cmp	r1, #14
 800fb0c:	d8c2      	bhi.n	800fa94 <_scanf_float+0x64>
 800fb0e:	a001      	add	r0, pc, #4	@ (adr r0, 800fb14 <_scanf_float+0xe4>)
 800fb10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fb14:	0800fbc9 	.word	0x0800fbc9
 800fb18:	0800fa95 	.word	0x0800fa95
 800fb1c:	0800fbc9 	.word	0x0800fbc9
 800fb20:	0800fc5f 	.word	0x0800fc5f
 800fb24:	0800fa95 	.word	0x0800fa95
 800fb28:	0800fb71 	.word	0x0800fb71
 800fb2c:	0800fbaf 	.word	0x0800fbaf
 800fb30:	0800fbaf 	.word	0x0800fbaf
 800fb34:	0800fbaf 	.word	0x0800fbaf
 800fb38:	0800fbaf 	.word	0x0800fbaf
 800fb3c:	0800fbaf 	.word	0x0800fbaf
 800fb40:	0800fbaf 	.word	0x0800fbaf
 800fb44:	0800fbaf 	.word	0x0800fbaf
 800fb48:	0800fbaf 	.word	0x0800fbaf
 800fb4c:	0800fbaf 	.word	0x0800fbaf
 800fb50:	2b6e      	cmp	r3, #110	@ 0x6e
 800fb52:	d809      	bhi.n	800fb68 <_scanf_float+0x138>
 800fb54:	2b60      	cmp	r3, #96	@ 0x60
 800fb56:	d8b2      	bhi.n	800fabe <_scanf_float+0x8e>
 800fb58:	2b54      	cmp	r3, #84	@ 0x54
 800fb5a:	d07b      	beq.n	800fc54 <_scanf_float+0x224>
 800fb5c:	2b59      	cmp	r3, #89	@ 0x59
 800fb5e:	d199      	bne.n	800fa94 <_scanf_float+0x64>
 800fb60:	2d07      	cmp	r5, #7
 800fb62:	d197      	bne.n	800fa94 <_scanf_float+0x64>
 800fb64:	2508      	movs	r5, #8
 800fb66:	e02c      	b.n	800fbc2 <_scanf_float+0x192>
 800fb68:	2b74      	cmp	r3, #116	@ 0x74
 800fb6a:	d073      	beq.n	800fc54 <_scanf_float+0x224>
 800fb6c:	2b79      	cmp	r3, #121	@ 0x79
 800fb6e:	e7f6      	b.n	800fb5e <_scanf_float+0x12e>
 800fb70:	6821      	ldr	r1, [r4, #0]
 800fb72:	05c8      	lsls	r0, r1, #23
 800fb74:	d51b      	bpl.n	800fbae <_scanf_float+0x17e>
 800fb76:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fb7a:	6021      	str	r1, [r4, #0]
 800fb7c:	f109 0901 	add.w	r9, r9, #1
 800fb80:	f1bb 0f00 	cmp.w	fp, #0
 800fb84:	d003      	beq.n	800fb8e <_scanf_float+0x15e>
 800fb86:	3201      	adds	r2, #1
 800fb88:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb8c:	60a2      	str	r2, [r4, #8]
 800fb8e:	68a3      	ldr	r3, [r4, #8]
 800fb90:	3b01      	subs	r3, #1
 800fb92:	60a3      	str	r3, [r4, #8]
 800fb94:	6923      	ldr	r3, [r4, #16]
 800fb96:	3301      	adds	r3, #1
 800fb98:	6123      	str	r3, [r4, #16]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	607b      	str	r3, [r7, #4]
 800fba2:	f340 8087 	ble.w	800fcb4 <_scanf_float+0x284>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	603b      	str	r3, [r7, #0]
 800fbac:	e765      	b.n	800fa7a <_scanf_float+0x4a>
 800fbae:	eb1a 0105 	adds.w	r1, sl, r5
 800fbb2:	f47f af6f 	bne.w	800fa94 <_scanf_float+0x64>
 800fbb6:	6822      	ldr	r2, [r4, #0]
 800fbb8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fbbc:	6022      	str	r2, [r4, #0]
 800fbbe:	460d      	mov	r5, r1
 800fbc0:	468a      	mov	sl, r1
 800fbc2:	f806 3b01 	strb.w	r3, [r6], #1
 800fbc6:	e7e2      	b.n	800fb8e <_scanf_float+0x15e>
 800fbc8:	6822      	ldr	r2, [r4, #0]
 800fbca:	0610      	lsls	r0, r2, #24
 800fbcc:	f57f af62 	bpl.w	800fa94 <_scanf_float+0x64>
 800fbd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fbd4:	6022      	str	r2, [r4, #0]
 800fbd6:	e7f4      	b.n	800fbc2 <_scanf_float+0x192>
 800fbd8:	f1ba 0f00 	cmp.w	sl, #0
 800fbdc:	d10e      	bne.n	800fbfc <_scanf_float+0x1cc>
 800fbde:	f1b9 0f00 	cmp.w	r9, #0
 800fbe2:	d10e      	bne.n	800fc02 <_scanf_float+0x1d2>
 800fbe4:	6822      	ldr	r2, [r4, #0]
 800fbe6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fbea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fbee:	d108      	bne.n	800fc02 <_scanf_float+0x1d2>
 800fbf0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fbf4:	6022      	str	r2, [r4, #0]
 800fbf6:	f04f 0a01 	mov.w	sl, #1
 800fbfa:	e7e2      	b.n	800fbc2 <_scanf_float+0x192>
 800fbfc:	f1ba 0f02 	cmp.w	sl, #2
 800fc00:	d055      	beq.n	800fcae <_scanf_float+0x27e>
 800fc02:	2d01      	cmp	r5, #1
 800fc04:	d002      	beq.n	800fc0c <_scanf_float+0x1dc>
 800fc06:	2d04      	cmp	r5, #4
 800fc08:	f47f af44 	bne.w	800fa94 <_scanf_float+0x64>
 800fc0c:	3501      	adds	r5, #1
 800fc0e:	b2ed      	uxtb	r5, r5
 800fc10:	e7d7      	b.n	800fbc2 <_scanf_float+0x192>
 800fc12:	f1ba 0f01 	cmp.w	sl, #1
 800fc16:	f47f af3d 	bne.w	800fa94 <_scanf_float+0x64>
 800fc1a:	f04f 0a02 	mov.w	sl, #2
 800fc1e:	e7d0      	b.n	800fbc2 <_scanf_float+0x192>
 800fc20:	b97d      	cbnz	r5, 800fc42 <_scanf_float+0x212>
 800fc22:	f1b9 0f00 	cmp.w	r9, #0
 800fc26:	f47f af38 	bne.w	800fa9a <_scanf_float+0x6a>
 800fc2a:	6822      	ldr	r2, [r4, #0]
 800fc2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fc30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fc34:	f040 8101 	bne.w	800fe3a <_scanf_float+0x40a>
 800fc38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fc3c:	6022      	str	r2, [r4, #0]
 800fc3e:	2501      	movs	r5, #1
 800fc40:	e7bf      	b.n	800fbc2 <_scanf_float+0x192>
 800fc42:	2d03      	cmp	r5, #3
 800fc44:	d0e2      	beq.n	800fc0c <_scanf_float+0x1dc>
 800fc46:	2d05      	cmp	r5, #5
 800fc48:	e7de      	b.n	800fc08 <_scanf_float+0x1d8>
 800fc4a:	2d02      	cmp	r5, #2
 800fc4c:	f47f af22 	bne.w	800fa94 <_scanf_float+0x64>
 800fc50:	2503      	movs	r5, #3
 800fc52:	e7b6      	b.n	800fbc2 <_scanf_float+0x192>
 800fc54:	2d06      	cmp	r5, #6
 800fc56:	f47f af1d 	bne.w	800fa94 <_scanf_float+0x64>
 800fc5a:	2507      	movs	r5, #7
 800fc5c:	e7b1      	b.n	800fbc2 <_scanf_float+0x192>
 800fc5e:	6822      	ldr	r2, [r4, #0]
 800fc60:	0591      	lsls	r1, r2, #22
 800fc62:	f57f af17 	bpl.w	800fa94 <_scanf_float+0x64>
 800fc66:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fc6a:	6022      	str	r2, [r4, #0]
 800fc6c:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc70:	e7a7      	b.n	800fbc2 <_scanf_float+0x192>
 800fc72:	6822      	ldr	r2, [r4, #0]
 800fc74:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fc78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fc7c:	d006      	beq.n	800fc8c <_scanf_float+0x25c>
 800fc7e:	0550      	lsls	r0, r2, #21
 800fc80:	f57f af08 	bpl.w	800fa94 <_scanf_float+0x64>
 800fc84:	f1b9 0f00 	cmp.w	r9, #0
 800fc88:	f000 80d7 	beq.w	800fe3a <_scanf_float+0x40a>
 800fc8c:	0591      	lsls	r1, r2, #22
 800fc8e:	bf58      	it	pl
 800fc90:	9902      	ldrpl	r1, [sp, #8]
 800fc92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fc96:	bf58      	it	pl
 800fc98:	eba9 0101 	subpl.w	r1, r9, r1
 800fc9c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fca0:	bf58      	it	pl
 800fca2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fca6:	6022      	str	r2, [r4, #0]
 800fca8:	f04f 0900 	mov.w	r9, #0
 800fcac:	e789      	b.n	800fbc2 <_scanf_float+0x192>
 800fcae:	f04f 0a03 	mov.w	sl, #3
 800fcb2:	e786      	b.n	800fbc2 <_scanf_float+0x192>
 800fcb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fcb8:	4639      	mov	r1, r7
 800fcba:	4640      	mov	r0, r8
 800fcbc:	4798      	blx	r3
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	f43f aedb 	beq.w	800fa7a <_scanf_float+0x4a>
 800fcc4:	e6e6      	b.n	800fa94 <_scanf_float+0x64>
 800fcc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fcca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fcce:	463a      	mov	r2, r7
 800fcd0:	4640      	mov	r0, r8
 800fcd2:	4798      	blx	r3
 800fcd4:	6923      	ldr	r3, [r4, #16]
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	6123      	str	r3, [r4, #16]
 800fcda:	e6e8      	b.n	800faae <_scanf_float+0x7e>
 800fcdc:	1e6b      	subs	r3, r5, #1
 800fcde:	2b06      	cmp	r3, #6
 800fce0:	d824      	bhi.n	800fd2c <_scanf_float+0x2fc>
 800fce2:	2d02      	cmp	r5, #2
 800fce4:	d836      	bhi.n	800fd54 <_scanf_float+0x324>
 800fce6:	9b01      	ldr	r3, [sp, #4]
 800fce8:	429e      	cmp	r6, r3
 800fcea:	f67f aee4 	bls.w	800fab6 <_scanf_float+0x86>
 800fcee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fcf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fcf6:	463a      	mov	r2, r7
 800fcf8:	4640      	mov	r0, r8
 800fcfa:	4798      	blx	r3
 800fcfc:	6923      	ldr	r3, [r4, #16]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	6123      	str	r3, [r4, #16]
 800fd02:	e7f0      	b.n	800fce6 <_scanf_float+0x2b6>
 800fd04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fd0c:	463a      	mov	r2, r7
 800fd0e:	4640      	mov	r0, r8
 800fd10:	4798      	blx	r3
 800fd12:	6923      	ldr	r3, [r4, #16]
 800fd14:	3b01      	subs	r3, #1
 800fd16:	6123      	str	r3, [r4, #16]
 800fd18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd1c:	fa5f fa8a 	uxtb.w	sl, sl
 800fd20:	f1ba 0f02 	cmp.w	sl, #2
 800fd24:	d1ee      	bne.n	800fd04 <_scanf_float+0x2d4>
 800fd26:	3d03      	subs	r5, #3
 800fd28:	b2ed      	uxtb	r5, r5
 800fd2a:	1b76      	subs	r6, r6, r5
 800fd2c:	6823      	ldr	r3, [r4, #0]
 800fd2e:	05da      	lsls	r2, r3, #23
 800fd30:	d530      	bpl.n	800fd94 <_scanf_float+0x364>
 800fd32:	055b      	lsls	r3, r3, #21
 800fd34:	d511      	bpl.n	800fd5a <_scanf_float+0x32a>
 800fd36:	9b01      	ldr	r3, [sp, #4]
 800fd38:	429e      	cmp	r6, r3
 800fd3a:	f67f aebc 	bls.w	800fab6 <_scanf_float+0x86>
 800fd3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd46:	463a      	mov	r2, r7
 800fd48:	4640      	mov	r0, r8
 800fd4a:	4798      	blx	r3
 800fd4c:	6923      	ldr	r3, [r4, #16]
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	6123      	str	r3, [r4, #16]
 800fd52:	e7f0      	b.n	800fd36 <_scanf_float+0x306>
 800fd54:	46aa      	mov	sl, r5
 800fd56:	46b3      	mov	fp, r6
 800fd58:	e7de      	b.n	800fd18 <_scanf_float+0x2e8>
 800fd5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fd5e:	6923      	ldr	r3, [r4, #16]
 800fd60:	2965      	cmp	r1, #101	@ 0x65
 800fd62:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd66:	f106 35ff 	add.w	r5, r6, #4294967295
 800fd6a:	6123      	str	r3, [r4, #16]
 800fd6c:	d00c      	beq.n	800fd88 <_scanf_float+0x358>
 800fd6e:	2945      	cmp	r1, #69	@ 0x45
 800fd70:	d00a      	beq.n	800fd88 <_scanf_float+0x358>
 800fd72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd76:	463a      	mov	r2, r7
 800fd78:	4640      	mov	r0, r8
 800fd7a:	4798      	blx	r3
 800fd7c:	6923      	ldr	r3, [r4, #16]
 800fd7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fd82:	3b01      	subs	r3, #1
 800fd84:	1eb5      	subs	r5, r6, #2
 800fd86:	6123      	str	r3, [r4, #16]
 800fd88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd8c:	463a      	mov	r2, r7
 800fd8e:	4640      	mov	r0, r8
 800fd90:	4798      	blx	r3
 800fd92:	462e      	mov	r6, r5
 800fd94:	6822      	ldr	r2, [r4, #0]
 800fd96:	f012 0210 	ands.w	r2, r2, #16
 800fd9a:	d001      	beq.n	800fda0 <_scanf_float+0x370>
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	e68b      	b.n	800fab8 <_scanf_float+0x88>
 800fda0:	7032      	strb	r2, [r6, #0]
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fda8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fdac:	d11a      	bne.n	800fde4 <_scanf_float+0x3b4>
 800fdae:	9b02      	ldr	r3, [sp, #8]
 800fdb0:	454b      	cmp	r3, r9
 800fdb2:	eba3 0209 	sub.w	r2, r3, r9
 800fdb6:	d121      	bne.n	800fdfc <_scanf_float+0x3cc>
 800fdb8:	9901      	ldr	r1, [sp, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	f002 fb4d 	bl	801245c <_strtod_r>
 800fdc2:	9b03      	ldr	r3, [sp, #12]
 800fdc4:	6821      	ldr	r1, [r4, #0]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f011 0f02 	tst.w	r1, #2
 800fdcc:	f103 0204 	add.w	r2, r3, #4
 800fdd0:	d01f      	beq.n	800fe12 <_scanf_float+0x3e2>
 800fdd2:	9903      	ldr	r1, [sp, #12]
 800fdd4:	600a      	str	r2, [r1, #0]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	ed83 0b00 	vstr	d0, [r3]
 800fddc:	68e3      	ldr	r3, [r4, #12]
 800fdde:	3301      	adds	r3, #1
 800fde0:	60e3      	str	r3, [r4, #12]
 800fde2:	e7db      	b.n	800fd9c <_scanf_float+0x36c>
 800fde4:	9b04      	ldr	r3, [sp, #16]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d0e6      	beq.n	800fdb8 <_scanf_float+0x388>
 800fdea:	9905      	ldr	r1, [sp, #20]
 800fdec:	230a      	movs	r3, #10
 800fdee:	3101      	adds	r1, #1
 800fdf0:	4640      	mov	r0, r8
 800fdf2:	f002 fbb3 	bl	801255c <_strtol_r>
 800fdf6:	9b04      	ldr	r3, [sp, #16]
 800fdf8:	9e05      	ldr	r6, [sp, #20]
 800fdfa:	1ac2      	subs	r2, r0, r3
 800fdfc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fe00:	429e      	cmp	r6, r3
 800fe02:	bf28      	it	cs
 800fe04:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fe08:	490d      	ldr	r1, [pc, #52]	@ (800fe40 <_scanf_float+0x410>)
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	f000 f8f0 	bl	800fff0 <siprintf>
 800fe10:	e7d2      	b.n	800fdb8 <_scanf_float+0x388>
 800fe12:	f011 0f04 	tst.w	r1, #4
 800fe16:	9903      	ldr	r1, [sp, #12]
 800fe18:	600a      	str	r2, [r1, #0]
 800fe1a:	d1dc      	bne.n	800fdd6 <_scanf_float+0x3a6>
 800fe1c:	eeb4 0b40 	vcmp.f64	d0, d0
 800fe20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe24:	681d      	ldr	r5, [r3, #0]
 800fe26:	d705      	bvc.n	800fe34 <_scanf_float+0x404>
 800fe28:	4806      	ldr	r0, [pc, #24]	@ (800fe44 <_scanf_float+0x414>)
 800fe2a:	f000 f9d3 	bl	80101d4 <nanf>
 800fe2e:	ed85 0a00 	vstr	s0, [r5]
 800fe32:	e7d3      	b.n	800fddc <_scanf_float+0x3ac>
 800fe34:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fe38:	e7f9      	b.n	800fe2e <_scanf_float+0x3fe>
 800fe3a:	f04f 0900 	mov.w	r9, #0
 800fe3e:	e630      	b.n	800faa2 <_scanf_float+0x72>
 800fe40:	080137c0 	.word	0x080137c0
 800fe44:	08013b55 	.word	0x08013b55

0800fe48 <std>:
 800fe48:	2300      	movs	r3, #0
 800fe4a:	b510      	push	{r4, lr}
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	e9c0 3300 	strd	r3, r3, [r0]
 800fe52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe56:	6083      	str	r3, [r0, #8]
 800fe58:	8181      	strh	r1, [r0, #12]
 800fe5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe5c:	81c2      	strh	r2, [r0, #14]
 800fe5e:	6183      	str	r3, [r0, #24]
 800fe60:	4619      	mov	r1, r3
 800fe62:	2208      	movs	r2, #8
 800fe64:	305c      	adds	r0, #92	@ 0x5c
 800fe66:	f000 f926 	bl	80100b6 <memset>
 800fe6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fea0 <std+0x58>)
 800fe6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fea4 <std+0x5c>)
 800fe70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe72:	4b0d      	ldr	r3, [pc, #52]	@ (800fea8 <std+0x60>)
 800fe74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe76:	4b0d      	ldr	r3, [pc, #52]	@ (800feac <std+0x64>)
 800fe78:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe7a:	4b0d      	ldr	r3, [pc, #52]	@ (800feb0 <std+0x68>)
 800fe7c:	6224      	str	r4, [r4, #32]
 800fe7e:	429c      	cmp	r4, r3
 800fe80:	d006      	beq.n	800fe90 <std+0x48>
 800fe82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe86:	4294      	cmp	r4, r2
 800fe88:	d002      	beq.n	800fe90 <std+0x48>
 800fe8a:	33d0      	adds	r3, #208	@ 0xd0
 800fe8c:	429c      	cmp	r4, r3
 800fe8e:	d105      	bne.n	800fe9c <std+0x54>
 800fe90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe98:	f000 b98a 	b.w	80101b0 <__retarget_lock_init_recursive>
 800fe9c:	bd10      	pop	{r4, pc}
 800fe9e:	bf00      	nop
 800fea0:	08010031 	.word	0x08010031
 800fea4:	08010053 	.word	0x08010053
 800fea8:	0801008b 	.word	0x0801008b
 800feac:	080100af 	.word	0x080100af
 800feb0:	24000bc4 	.word	0x24000bc4

0800feb4 <stdio_exit_handler>:
 800feb4:	4a02      	ldr	r2, [pc, #8]	@ (800fec0 <stdio_exit_handler+0xc>)
 800feb6:	4903      	ldr	r1, [pc, #12]	@ (800fec4 <stdio_exit_handler+0x10>)
 800feb8:	4803      	ldr	r0, [pc, #12]	@ (800fec8 <stdio_exit_handler+0x14>)
 800feba:	f000 b869 	b.w	800ff90 <_fwalk_sglue>
 800febe:	bf00      	nop
 800fec0:	24000010 	.word	0x24000010
 800fec4:	08012b9d 	.word	0x08012b9d
 800fec8:	24000020 	.word	0x24000020

0800fecc <cleanup_stdio>:
 800fecc:	6841      	ldr	r1, [r0, #4]
 800fece:	4b0c      	ldr	r3, [pc, #48]	@ (800ff00 <cleanup_stdio+0x34>)
 800fed0:	4299      	cmp	r1, r3
 800fed2:	b510      	push	{r4, lr}
 800fed4:	4604      	mov	r4, r0
 800fed6:	d001      	beq.n	800fedc <cleanup_stdio+0x10>
 800fed8:	f002 fe60 	bl	8012b9c <_fflush_r>
 800fedc:	68a1      	ldr	r1, [r4, #8]
 800fede:	4b09      	ldr	r3, [pc, #36]	@ (800ff04 <cleanup_stdio+0x38>)
 800fee0:	4299      	cmp	r1, r3
 800fee2:	d002      	beq.n	800feea <cleanup_stdio+0x1e>
 800fee4:	4620      	mov	r0, r4
 800fee6:	f002 fe59 	bl	8012b9c <_fflush_r>
 800feea:	68e1      	ldr	r1, [r4, #12]
 800feec:	4b06      	ldr	r3, [pc, #24]	@ (800ff08 <cleanup_stdio+0x3c>)
 800feee:	4299      	cmp	r1, r3
 800fef0:	d004      	beq.n	800fefc <cleanup_stdio+0x30>
 800fef2:	4620      	mov	r0, r4
 800fef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fef8:	f002 be50 	b.w	8012b9c <_fflush_r>
 800fefc:	bd10      	pop	{r4, pc}
 800fefe:	bf00      	nop
 800ff00:	24000bc4 	.word	0x24000bc4
 800ff04:	24000c2c 	.word	0x24000c2c
 800ff08:	24000c94 	.word	0x24000c94

0800ff0c <global_stdio_init.part.0>:
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ff3c <global_stdio_init.part.0+0x30>)
 800ff10:	4c0b      	ldr	r4, [pc, #44]	@ (800ff40 <global_stdio_init.part.0+0x34>)
 800ff12:	4a0c      	ldr	r2, [pc, #48]	@ (800ff44 <global_stdio_init.part.0+0x38>)
 800ff14:	601a      	str	r2, [r3, #0]
 800ff16:	4620      	mov	r0, r4
 800ff18:	2200      	movs	r2, #0
 800ff1a:	2104      	movs	r1, #4
 800ff1c:	f7ff ff94 	bl	800fe48 <std>
 800ff20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ff24:	2201      	movs	r2, #1
 800ff26:	2109      	movs	r1, #9
 800ff28:	f7ff ff8e 	bl	800fe48 <std>
 800ff2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ff30:	2202      	movs	r2, #2
 800ff32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff36:	2112      	movs	r1, #18
 800ff38:	f7ff bf86 	b.w	800fe48 <std>
 800ff3c:	24000cfc 	.word	0x24000cfc
 800ff40:	24000bc4 	.word	0x24000bc4
 800ff44:	0800feb5 	.word	0x0800feb5

0800ff48 <__sfp_lock_acquire>:
 800ff48:	4801      	ldr	r0, [pc, #4]	@ (800ff50 <__sfp_lock_acquire+0x8>)
 800ff4a:	f000 b932 	b.w	80101b2 <__retarget_lock_acquire_recursive>
 800ff4e:	bf00      	nop
 800ff50:	24000d05 	.word	0x24000d05

0800ff54 <__sfp_lock_release>:
 800ff54:	4801      	ldr	r0, [pc, #4]	@ (800ff5c <__sfp_lock_release+0x8>)
 800ff56:	f000 b92d 	b.w	80101b4 <__retarget_lock_release_recursive>
 800ff5a:	bf00      	nop
 800ff5c:	24000d05 	.word	0x24000d05

0800ff60 <__sinit>:
 800ff60:	b510      	push	{r4, lr}
 800ff62:	4604      	mov	r4, r0
 800ff64:	f7ff fff0 	bl	800ff48 <__sfp_lock_acquire>
 800ff68:	6a23      	ldr	r3, [r4, #32]
 800ff6a:	b11b      	cbz	r3, 800ff74 <__sinit+0x14>
 800ff6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff70:	f7ff bff0 	b.w	800ff54 <__sfp_lock_release>
 800ff74:	4b04      	ldr	r3, [pc, #16]	@ (800ff88 <__sinit+0x28>)
 800ff76:	6223      	str	r3, [r4, #32]
 800ff78:	4b04      	ldr	r3, [pc, #16]	@ (800ff8c <__sinit+0x2c>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1f5      	bne.n	800ff6c <__sinit+0xc>
 800ff80:	f7ff ffc4 	bl	800ff0c <global_stdio_init.part.0>
 800ff84:	e7f2      	b.n	800ff6c <__sinit+0xc>
 800ff86:	bf00      	nop
 800ff88:	0800fecd 	.word	0x0800fecd
 800ff8c:	24000cfc 	.word	0x24000cfc

0800ff90 <_fwalk_sglue>:
 800ff90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff94:	4607      	mov	r7, r0
 800ff96:	4688      	mov	r8, r1
 800ff98:	4614      	mov	r4, r2
 800ff9a:	2600      	movs	r6, #0
 800ff9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffa0:	f1b9 0901 	subs.w	r9, r9, #1
 800ffa4:	d505      	bpl.n	800ffb2 <_fwalk_sglue+0x22>
 800ffa6:	6824      	ldr	r4, [r4, #0]
 800ffa8:	2c00      	cmp	r4, #0
 800ffaa:	d1f7      	bne.n	800ff9c <_fwalk_sglue+0xc>
 800ffac:	4630      	mov	r0, r6
 800ffae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb2:	89ab      	ldrh	r3, [r5, #12]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d907      	bls.n	800ffc8 <_fwalk_sglue+0x38>
 800ffb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	d003      	beq.n	800ffc8 <_fwalk_sglue+0x38>
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	47c0      	blx	r8
 800ffc6:	4306      	orrs	r6, r0
 800ffc8:	3568      	adds	r5, #104	@ 0x68
 800ffca:	e7e9      	b.n	800ffa0 <_fwalk_sglue+0x10>

0800ffcc <iprintf>:
 800ffcc:	b40f      	push	{r0, r1, r2, r3}
 800ffce:	b507      	push	{r0, r1, r2, lr}
 800ffd0:	4906      	ldr	r1, [pc, #24]	@ (800ffec <iprintf+0x20>)
 800ffd2:	ab04      	add	r3, sp, #16
 800ffd4:	6808      	ldr	r0, [r1, #0]
 800ffd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffda:	6881      	ldr	r1, [r0, #8]
 800ffdc:	9301      	str	r3, [sp, #4]
 800ffde:	f002 fc41 	bl	8012864 <_vfiprintf_r>
 800ffe2:	b003      	add	sp, #12
 800ffe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe8:	b004      	add	sp, #16
 800ffea:	4770      	bx	lr
 800ffec:	2400001c 	.word	0x2400001c

0800fff0 <siprintf>:
 800fff0:	b40e      	push	{r1, r2, r3}
 800fff2:	b500      	push	{lr}
 800fff4:	b09c      	sub	sp, #112	@ 0x70
 800fff6:	ab1d      	add	r3, sp, #116	@ 0x74
 800fff8:	9002      	str	r0, [sp, #8]
 800fffa:	9006      	str	r0, [sp, #24]
 800fffc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010000:	4809      	ldr	r0, [pc, #36]	@ (8010028 <siprintf+0x38>)
 8010002:	9107      	str	r1, [sp, #28]
 8010004:	9104      	str	r1, [sp, #16]
 8010006:	4909      	ldr	r1, [pc, #36]	@ (801002c <siprintf+0x3c>)
 8010008:	f853 2b04 	ldr.w	r2, [r3], #4
 801000c:	9105      	str	r1, [sp, #20]
 801000e:	6800      	ldr	r0, [r0, #0]
 8010010:	9301      	str	r3, [sp, #4]
 8010012:	a902      	add	r1, sp, #8
 8010014:	f002 fb00 	bl	8012618 <_svfiprintf_r>
 8010018:	9b02      	ldr	r3, [sp, #8]
 801001a:	2200      	movs	r2, #0
 801001c:	701a      	strb	r2, [r3, #0]
 801001e:	b01c      	add	sp, #112	@ 0x70
 8010020:	f85d eb04 	ldr.w	lr, [sp], #4
 8010024:	b003      	add	sp, #12
 8010026:	4770      	bx	lr
 8010028:	2400001c 	.word	0x2400001c
 801002c:	ffff0208 	.word	0xffff0208

08010030 <__sread>:
 8010030:	b510      	push	{r4, lr}
 8010032:	460c      	mov	r4, r1
 8010034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010038:	f000 f86c 	bl	8010114 <_read_r>
 801003c:	2800      	cmp	r0, #0
 801003e:	bfab      	itete	ge
 8010040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010042:	89a3      	ldrhlt	r3, [r4, #12]
 8010044:	181b      	addge	r3, r3, r0
 8010046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801004a:	bfac      	ite	ge
 801004c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801004e:	81a3      	strhlt	r3, [r4, #12]
 8010050:	bd10      	pop	{r4, pc}

08010052 <__swrite>:
 8010052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010056:	461f      	mov	r7, r3
 8010058:	898b      	ldrh	r3, [r1, #12]
 801005a:	05db      	lsls	r3, r3, #23
 801005c:	4605      	mov	r5, r0
 801005e:	460c      	mov	r4, r1
 8010060:	4616      	mov	r6, r2
 8010062:	d505      	bpl.n	8010070 <__swrite+0x1e>
 8010064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010068:	2302      	movs	r3, #2
 801006a:	2200      	movs	r2, #0
 801006c:	f000 f840 	bl	80100f0 <_lseek_r>
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	4632      	mov	r2, r6
 801007e:	463b      	mov	r3, r7
 8010080:	4628      	mov	r0, r5
 8010082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010086:	f000 b857 	b.w	8010138 <_write_r>

0801008a <__sseek>:
 801008a:	b510      	push	{r4, lr}
 801008c:	460c      	mov	r4, r1
 801008e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010092:	f000 f82d 	bl	80100f0 <_lseek_r>
 8010096:	1c43      	adds	r3, r0, #1
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	bf15      	itete	ne
 801009c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801009e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80100a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80100a6:	81a3      	strheq	r3, [r4, #12]
 80100a8:	bf18      	it	ne
 80100aa:	81a3      	strhne	r3, [r4, #12]
 80100ac:	bd10      	pop	{r4, pc}

080100ae <__sclose>:
 80100ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b2:	f000 b80d 	b.w	80100d0 <_close_r>

080100b6 <memset>:
 80100b6:	4402      	add	r2, r0
 80100b8:	4603      	mov	r3, r0
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d100      	bne.n	80100c0 <memset+0xa>
 80100be:	4770      	bx	lr
 80100c0:	f803 1b01 	strb.w	r1, [r3], #1
 80100c4:	e7f9      	b.n	80100ba <memset+0x4>
	...

080100c8 <_localeconv_r>:
 80100c8:	4800      	ldr	r0, [pc, #0]	@ (80100cc <_localeconv_r+0x4>)
 80100ca:	4770      	bx	lr
 80100cc:	2400015c 	.word	0x2400015c

080100d0 <_close_r>:
 80100d0:	b538      	push	{r3, r4, r5, lr}
 80100d2:	4d06      	ldr	r5, [pc, #24]	@ (80100ec <_close_r+0x1c>)
 80100d4:	2300      	movs	r3, #0
 80100d6:	4604      	mov	r4, r0
 80100d8:	4608      	mov	r0, r1
 80100da:	602b      	str	r3, [r5, #0]
 80100dc:	f7f3 f920 	bl	8003320 <_close>
 80100e0:	1c43      	adds	r3, r0, #1
 80100e2:	d102      	bne.n	80100ea <_close_r+0x1a>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	b103      	cbz	r3, 80100ea <_close_r+0x1a>
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	24000d00 	.word	0x24000d00

080100f0 <_lseek_r>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	4d07      	ldr	r5, [pc, #28]	@ (8010110 <_lseek_r+0x20>)
 80100f4:	4604      	mov	r4, r0
 80100f6:	4608      	mov	r0, r1
 80100f8:	4611      	mov	r1, r2
 80100fa:	2200      	movs	r2, #0
 80100fc:	602a      	str	r2, [r5, #0]
 80100fe:	461a      	mov	r2, r3
 8010100:	f7f3 f935 	bl	800336e <_lseek>
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	d102      	bne.n	801010e <_lseek_r+0x1e>
 8010108:	682b      	ldr	r3, [r5, #0]
 801010a:	b103      	cbz	r3, 801010e <_lseek_r+0x1e>
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	bd38      	pop	{r3, r4, r5, pc}
 8010110:	24000d00 	.word	0x24000d00

08010114 <_read_r>:
 8010114:	b538      	push	{r3, r4, r5, lr}
 8010116:	4d07      	ldr	r5, [pc, #28]	@ (8010134 <_read_r+0x20>)
 8010118:	4604      	mov	r4, r0
 801011a:	4608      	mov	r0, r1
 801011c:	4611      	mov	r1, r2
 801011e:	2200      	movs	r2, #0
 8010120:	602a      	str	r2, [r5, #0]
 8010122:	461a      	mov	r2, r3
 8010124:	f7f3 f8df 	bl	80032e6 <_read>
 8010128:	1c43      	adds	r3, r0, #1
 801012a:	d102      	bne.n	8010132 <_read_r+0x1e>
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	b103      	cbz	r3, 8010132 <_read_r+0x1e>
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	bd38      	pop	{r3, r4, r5, pc}
 8010134:	24000d00 	.word	0x24000d00

08010138 <_write_r>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4d07      	ldr	r5, [pc, #28]	@ (8010158 <_write_r+0x20>)
 801013c:	4604      	mov	r4, r0
 801013e:	4608      	mov	r0, r1
 8010140:	4611      	mov	r1, r2
 8010142:	2200      	movs	r2, #0
 8010144:	602a      	str	r2, [r5, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	f7f0 fccd 	bl	8000ae6 <_write>
 801014c:	1c43      	adds	r3, r0, #1
 801014e:	d102      	bne.n	8010156 <_write_r+0x1e>
 8010150:	682b      	ldr	r3, [r5, #0]
 8010152:	b103      	cbz	r3, 8010156 <_write_r+0x1e>
 8010154:	6023      	str	r3, [r4, #0]
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	24000d00 	.word	0x24000d00

0801015c <__errno>:
 801015c:	4b01      	ldr	r3, [pc, #4]	@ (8010164 <__errno+0x8>)
 801015e:	6818      	ldr	r0, [r3, #0]
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	2400001c 	.word	0x2400001c

08010168 <__libc_init_array>:
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	4d0d      	ldr	r5, [pc, #52]	@ (80101a0 <__libc_init_array+0x38>)
 801016c:	4c0d      	ldr	r4, [pc, #52]	@ (80101a4 <__libc_init_array+0x3c>)
 801016e:	1b64      	subs	r4, r4, r5
 8010170:	10a4      	asrs	r4, r4, #2
 8010172:	2600      	movs	r6, #0
 8010174:	42a6      	cmp	r6, r4
 8010176:	d109      	bne.n	801018c <__libc_init_array+0x24>
 8010178:	4d0b      	ldr	r5, [pc, #44]	@ (80101a8 <__libc_init_array+0x40>)
 801017a:	4c0c      	ldr	r4, [pc, #48]	@ (80101ac <__libc_init_array+0x44>)
 801017c:	f003 fab2 	bl	80136e4 <_init>
 8010180:	1b64      	subs	r4, r4, r5
 8010182:	10a4      	asrs	r4, r4, #2
 8010184:	2600      	movs	r6, #0
 8010186:	42a6      	cmp	r6, r4
 8010188:	d105      	bne.n	8010196 <__libc_init_array+0x2e>
 801018a:	bd70      	pop	{r4, r5, r6, pc}
 801018c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010190:	4798      	blx	r3
 8010192:	3601      	adds	r6, #1
 8010194:	e7ee      	b.n	8010174 <__libc_init_array+0xc>
 8010196:	f855 3b04 	ldr.w	r3, [r5], #4
 801019a:	4798      	blx	r3
 801019c:	3601      	adds	r6, #1
 801019e:	e7f2      	b.n	8010186 <__libc_init_array+0x1e>
 80101a0:	08013bc0 	.word	0x08013bc0
 80101a4:	08013bc0 	.word	0x08013bc0
 80101a8:	08013bc0 	.word	0x08013bc0
 80101ac:	08013bc4 	.word	0x08013bc4

080101b0 <__retarget_lock_init_recursive>:
 80101b0:	4770      	bx	lr

080101b2 <__retarget_lock_acquire_recursive>:
 80101b2:	4770      	bx	lr

080101b4 <__retarget_lock_release_recursive>:
 80101b4:	4770      	bx	lr

080101b6 <memcpy>:
 80101b6:	440a      	add	r2, r1
 80101b8:	4291      	cmp	r1, r2
 80101ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80101be:	d100      	bne.n	80101c2 <memcpy+0xc>
 80101c0:	4770      	bx	lr
 80101c2:	b510      	push	{r4, lr}
 80101c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101cc:	4291      	cmp	r1, r2
 80101ce:	d1f9      	bne.n	80101c4 <memcpy+0xe>
 80101d0:	bd10      	pop	{r4, pc}
	...

080101d4 <nanf>:
 80101d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80101dc <nanf+0x8>
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	7fc00000 	.word	0x7fc00000

080101e0 <quorem>:
 80101e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e4:	6903      	ldr	r3, [r0, #16]
 80101e6:	690c      	ldr	r4, [r1, #16]
 80101e8:	42a3      	cmp	r3, r4
 80101ea:	4607      	mov	r7, r0
 80101ec:	db7e      	blt.n	80102ec <quorem+0x10c>
 80101ee:	3c01      	subs	r4, #1
 80101f0:	f101 0814 	add.w	r8, r1, #20
 80101f4:	00a3      	lsls	r3, r4, #2
 80101f6:	f100 0514 	add.w	r5, r0, #20
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010200:	9301      	str	r3, [sp, #4]
 8010202:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801020a:	3301      	adds	r3, #1
 801020c:	429a      	cmp	r2, r3
 801020e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010212:	fbb2 f6f3 	udiv	r6, r2, r3
 8010216:	d32e      	bcc.n	8010276 <quorem+0x96>
 8010218:	f04f 0a00 	mov.w	sl, #0
 801021c:	46c4      	mov	ip, r8
 801021e:	46ae      	mov	lr, r5
 8010220:	46d3      	mov	fp, sl
 8010222:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010226:	b298      	uxth	r0, r3
 8010228:	fb06 a000 	mla	r0, r6, r0, sl
 801022c:	0c02      	lsrs	r2, r0, #16
 801022e:	0c1b      	lsrs	r3, r3, #16
 8010230:	fb06 2303 	mla	r3, r6, r3, r2
 8010234:	f8de 2000 	ldr.w	r2, [lr]
 8010238:	b280      	uxth	r0, r0
 801023a:	b292      	uxth	r2, r2
 801023c:	1a12      	subs	r2, r2, r0
 801023e:	445a      	add	r2, fp
 8010240:	f8de 0000 	ldr.w	r0, [lr]
 8010244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010248:	b29b      	uxth	r3, r3
 801024a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801024e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010252:	b292      	uxth	r2, r2
 8010254:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010258:	45e1      	cmp	r9, ip
 801025a:	f84e 2b04 	str.w	r2, [lr], #4
 801025e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010262:	d2de      	bcs.n	8010222 <quorem+0x42>
 8010264:	9b00      	ldr	r3, [sp, #0]
 8010266:	58eb      	ldr	r3, [r5, r3]
 8010268:	b92b      	cbnz	r3, 8010276 <quorem+0x96>
 801026a:	9b01      	ldr	r3, [sp, #4]
 801026c:	3b04      	subs	r3, #4
 801026e:	429d      	cmp	r5, r3
 8010270:	461a      	mov	r2, r3
 8010272:	d32f      	bcc.n	80102d4 <quorem+0xf4>
 8010274:	613c      	str	r4, [r7, #16]
 8010276:	4638      	mov	r0, r7
 8010278:	f001 f954 	bl	8011524 <__mcmp>
 801027c:	2800      	cmp	r0, #0
 801027e:	db25      	blt.n	80102cc <quorem+0xec>
 8010280:	4629      	mov	r1, r5
 8010282:	2000      	movs	r0, #0
 8010284:	f858 2b04 	ldr.w	r2, [r8], #4
 8010288:	f8d1 c000 	ldr.w	ip, [r1]
 801028c:	fa1f fe82 	uxth.w	lr, r2
 8010290:	fa1f f38c 	uxth.w	r3, ip
 8010294:	eba3 030e 	sub.w	r3, r3, lr
 8010298:	4403      	add	r3, r0
 801029a:	0c12      	lsrs	r2, r2, #16
 801029c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80102a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102aa:	45c1      	cmp	r9, r8
 80102ac:	f841 3b04 	str.w	r3, [r1], #4
 80102b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80102b4:	d2e6      	bcs.n	8010284 <quorem+0xa4>
 80102b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102be:	b922      	cbnz	r2, 80102ca <quorem+0xea>
 80102c0:	3b04      	subs	r3, #4
 80102c2:	429d      	cmp	r5, r3
 80102c4:	461a      	mov	r2, r3
 80102c6:	d30b      	bcc.n	80102e0 <quorem+0x100>
 80102c8:	613c      	str	r4, [r7, #16]
 80102ca:	3601      	adds	r6, #1
 80102cc:	4630      	mov	r0, r6
 80102ce:	b003      	add	sp, #12
 80102d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d4:	6812      	ldr	r2, [r2, #0]
 80102d6:	3b04      	subs	r3, #4
 80102d8:	2a00      	cmp	r2, #0
 80102da:	d1cb      	bne.n	8010274 <quorem+0x94>
 80102dc:	3c01      	subs	r4, #1
 80102de:	e7c6      	b.n	801026e <quorem+0x8e>
 80102e0:	6812      	ldr	r2, [r2, #0]
 80102e2:	3b04      	subs	r3, #4
 80102e4:	2a00      	cmp	r2, #0
 80102e6:	d1ef      	bne.n	80102c8 <quorem+0xe8>
 80102e8:	3c01      	subs	r4, #1
 80102ea:	e7ea      	b.n	80102c2 <quorem+0xe2>
 80102ec:	2000      	movs	r0, #0
 80102ee:	e7ee      	b.n	80102ce <quorem+0xee>

080102f0 <_dtoa_r>:
 80102f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f4:	ed2d 8b02 	vpush	{d8}
 80102f8:	69c7      	ldr	r7, [r0, #28]
 80102fa:	b091      	sub	sp, #68	@ 0x44
 80102fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010300:	ec55 4b10 	vmov	r4, r5, d0
 8010304:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010306:	9107      	str	r1, [sp, #28]
 8010308:	4681      	mov	r9, r0
 801030a:	9209      	str	r2, [sp, #36]	@ 0x24
 801030c:	930d      	str	r3, [sp, #52]	@ 0x34
 801030e:	b97f      	cbnz	r7, 8010330 <_dtoa_r+0x40>
 8010310:	2010      	movs	r0, #16
 8010312:	f000 fd8d 	bl	8010e30 <malloc>
 8010316:	4602      	mov	r2, r0
 8010318:	f8c9 001c 	str.w	r0, [r9, #28]
 801031c:	b920      	cbnz	r0, 8010328 <_dtoa_r+0x38>
 801031e:	4ba0      	ldr	r3, [pc, #640]	@ (80105a0 <_dtoa_r+0x2b0>)
 8010320:	21ef      	movs	r1, #239	@ 0xef
 8010322:	48a0      	ldr	r0, [pc, #640]	@ (80105a4 <_dtoa_r+0x2b4>)
 8010324:	f002 fd3c 	bl	8012da0 <__assert_func>
 8010328:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801032c:	6007      	str	r7, [r0, #0]
 801032e:	60c7      	str	r7, [r0, #12]
 8010330:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010334:	6819      	ldr	r1, [r3, #0]
 8010336:	b159      	cbz	r1, 8010350 <_dtoa_r+0x60>
 8010338:	685a      	ldr	r2, [r3, #4]
 801033a:	604a      	str	r2, [r1, #4]
 801033c:	2301      	movs	r3, #1
 801033e:	4093      	lsls	r3, r2
 8010340:	608b      	str	r3, [r1, #8]
 8010342:	4648      	mov	r0, r9
 8010344:	f000 fe6a 	bl	801101c <_Bfree>
 8010348:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801034c:	2200      	movs	r2, #0
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	1e2b      	subs	r3, r5, #0
 8010352:	bfbb      	ittet	lt
 8010354:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010358:	9303      	strlt	r3, [sp, #12]
 801035a:	2300      	movge	r3, #0
 801035c:	2201      	movlt	r2, #1
 801035e:	bfac      	ite	ge
 8010360:	6033      	strge	r3, [r6, #0]
 8010362:	6032      	strlt	r2, [r6, #0]
 8010364:	4b90      	ldr	r3, [pc, #576]	@ (80105a8 <_dtoa_r+0x2b8>)
 8010366:	9e03      	ldr	r6, [sp, #12]
 8010368:	43b3      	bics	r3, r6
 801036a:	d110      	bne.n	801038e <_dtoa_r+0x9e>
 801036c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801036e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010372:	6013      	str	r3, [r2, #0]
 8010374:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010378:	4323      	orrs	r3, r4
 801037a:	f000 84de 	beq.w	8010d3a <_dtoa_r+0xa4a>
 801037e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010380:	4f8a      	ldr	r7, [pc, #552]	@ (80105ac <_dtoa_r+0x2bc>)
 8010382:	2b00      	cmp	r3, #0
 8010384:	f000 84e0 	beq.w	8010d48 <_dtoa_r+0xa58>
 8010388:	1cfb      	adds	r3, r7, #3
 801038a:	f000 bcdb 	b.w	8010d44 <_dtoa_r+0xa54>
 801038e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010392:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039a:	d10a      	bne.n	80103b2 <_dtoa_r+0xc2>
 801039c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801039e:	2301      	movs	r3, #1
 80103a0:	6013      	str	r3, [r2, #0]
 80103a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80103a4:	b113      	cbz	r3, 80103ac <_dtoa_r+0xbc>
 80103a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80103a8:	4b81      	ldr	r3, [pc, #516]	@ (80105b0 <_dtoa_r+0x2c0>)
 80103aa:	6013      	str	r3, [r2, #0]
 80103ac:	4f81      	ldr	r7, [pc, #516]	@ (80105b4 <_dtoa_r+0x2c4>)
 80103ae:	f000 bccb 	b.w	8010d48 <_dtoa_r+0xa58>
 80103b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80103b4:	a90f      	add	r1, sp, #60	@ 0x3c
 80103b6:	4648      	mov	r0, r9
 80103b8:	eeb0 0b48 	vmov.f64	d0, d8
 80103bc:	f001 f9d2 	bl	8011764 <__d2b>
 80103c0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80103c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103c6:	9001      	str	r0, [sp, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d045      	beq.n	8010458 <_dtoa_r+0x168>
 80103cc:	eeb0 7b48 	vmov.f64	d7, d8
 80103d0:	ee18 1a90 	vmov	r1, s17
 80103d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80103d8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80103dc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80103e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80103e4:	2500      	movs	r5, #0
 80103e6:	ee07 1a90 	vmov	s15, r1
 80103ea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80103ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010588 <_dtoa_r+0x298>
 80103f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103f6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010590 <_dtoa_r+0x2a0>
 80103fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80103fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010598 <_dtoa_r+0x2a8>
 8010402:	ee07 3a90 	vmov	s15, r3
 8010406:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801040a:	eeb0 7b46 	vmov.f64	d7, d6
 801040e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010412:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010416:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801041e:	ee16 8a90 	vmov	r8, s13
 8010422:	d508      	bpl.n	8010436 <_dtoa_r+0x146>
 8010424:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010428:	eeb4 6b47 	vcmp.f64	d6, d7
 801042c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010430:	bf18      	it	ne
 8010432:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010436:	f1b8 0f16 	cmp.w	r8, #22
 801043a:	d82b      	bhi.n	8010494 <_dtoa_r+0x1a4>
 801043c:	495e      	ldr	r1, [pc, #376]	@ (80105b8 <_dtoa_r+0x2c8>)
 801043e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010442:	ed91 7b00 	vldr	d7, [r1]
 8010446:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801044a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044e:	d501      	bpl.n	8010454 <_dtoa_r+0x164>
 8010450:	f108 38ff 	add.w	r8, r8, #4294967295
 8010454:	2100      	movs	r1, #0
 8010456:	e01e      	b.n	8010496 <_dtoa_r+0x1a6>
 8010458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801045a:	4413      	add	r3, r2
 801045c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010460:	2920      	cmp	r1, #32
 8010462:	bfc1      	itttt	gt
 8010464:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010468:	408e      	lslgt	r6, r1
 801046a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801046e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010472:	bfd6      	itet	le
 8010474:	f1c1 0120 	rsble	r1, r1, #32
 8010478:	4331      	orrgt	r1, r6
 801047a:	fa04 f101 	lslle.w	r1, r4, r1
 801047e:	ee07 1a90 	vmov	s15, r1
 8010482:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010486:	3b01      	subs	r3, #1
 8010488:	ee17 1a90 	vmov	r1, s15
 801048c:	2501      	movs	r5, #1
 801048e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010492:	e7a8      	b.n	80103e6 <_dtoa_r+0xf6>
 8010494:	2101      	movs	r1, #1
 8010496:	1ad2      	subs	r2, r2, r3
 8010498:	1e53      	subs	r3, r2, #1
 801049a:	9306      	str	r3, [sp, #24]
 801049c:	bf45      	ittet	mi
 801049e:	f1c2 0301 	rsbmi	r3, r2, #1
 80104a2:	9305      	strmi	r3, [sp, #20]
 80104a4:	2300      	movpl	r3, #0
 80104a6:	2300      	movmi	r3, #0
 80104a8:	bf4c      	ite	mi
 80104aa:	9306      	strmi	r3, [sp, #24]
 80104ac:	9305      	strpl	r3, [sp, #20]
 80104ae:	f1b8 0f00 	cmp.w	r8, #0
 80104b2:	910c      	str	r1, [sp, #48]	@ 0x30
 80104b4:	db18      	blt.n	80104e8 <_dtoa_r+0x1f8>
 80104b6:	9b06      	ldr	r3, [sp, #24]
 80104b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80104bc:	4443      	add	r3, r8
 80104be:	9306      	str	r3, [sp, #24]
 80104c0:	2300      	movs	r3, #0
 80104c2:	9a07      	ldr	r2, [sp, #28]
 80104c4:	2a09      	cmp	r2, #9
 80104c6:	d849      	bhi.n	801055c <_dtoa_r+0x26c>
 80104c8:	2a05      	cmp	r2, #5
 80104ca:	bfc4      	itt	gt
 80104cc:	3a04      	subgt	r2, #4
 80104ce:	9207      	strgt	r2, [sp, #28]
 80104d0:	9a07      	ldr	r2, [sp, #28]
 80104d2:	f1a2 0202 	sub.w	r2, r2, #2
 80104d6:	bfcc      	ite	gt
 80104d8:	2400      	movgt	r4, #0
 80104da:	2401      	movle	r4, #1
 80104dc:	2a03      	cmp	r2, #3
 80104de:	d848      	bhi.n	8010572 <_dtoa_r+0x282>
 80104e0:	e8df f002 	tbb	[pc, r2]
 80104e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80104e8:	9b05      	ldr	r3, [sp, #20]
 80104ea:	2200      	movs	r2, #0
 80104ec:	eba3 0308 	sub.w	r3, r3, r8
 80104f0:	9305      	str	r3, [sp, #20]
 80104f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80104f4:	f1c8 0300 	rsb	r3, r8, #0
 80104f8:	e7e3      	b.n	80104c2 <_dtoa_r+0x1d2>
 80104fa:	2200      	movs	r2, #0
 80104fc:	9208      	str	r2, [sp, #32]
 80104fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010500:	2a00      	cmp	r2, #0
 8010502:	dc39      	bgt.n	8010578 <_dtoa_r+0x288>
 8010504:	f04f 0b01 	mov.w	fp, #1
 8010508:	46da      	mov	sl, fp
 801050a:	465a      	mov	r2, fp
 801050c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010510:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010514:	2100      	movs	r1, #0
 8010516:	2004      	movs	r0, #4
 8010518:	f100 0614 	add.w	r6, r0, #20
 801051c:	4296      	cmp	r6, r2
 801051e:	d930      	bls.n	8010582 <_dtoa_r+0x292>
 8010520:	6079      	str	r1, [r7, #4]
 8010522:	4648      	mov	r0, r9
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	f000 fd39 	bl	8010f9c <_Balloc>
 801052a:	9b04      	ldr	r3, [sp, #16]
 801052c:	4607      	mov	r7, r0
 801052e:	2800      	cmp	r0, #0
 8010530:	d146      	bne.n	80105c0 <_dtoa_r+0x2d0>
 8010532:	4b22      	ldr	r3, [pc, #136]	@ (80105bc <_dtoa_r+0x2cc>)
 8010534:	4602      	mov	r2, r0
 8010536:	f240 11af 	movw	r1, #431	@ 0x1af
 801053a:	e6f2      	b.n	8010322 <_dtoa_r+0x32>
 801053c:	2201      	movs	r2, #1
 801053e:	e7dd      	b.n	80104fc <_dtoa_r+0x20c>
 8010540:	2200      	movs	r2, #0
 8010542:	9208      	str	r2, [sp, #32]
 8010544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010546:	eb08 0b02 	add.w	fp, r8, r2
 801054a:	f10b 0a01 	add.w	sl, fp, #1
 801054e:	4652      	mov	r2, sl
 8010550:	2a01      	cmp	r2, #1
 8010552:	bfb8      	it	lt
 8010554:	2201      	movlt	r2, #1
 8010556:	e7db      	b.n	8010510 <_dtoa_r+0x220>
 8010558:	2201      	movs	r2, #1
 801055a:	e7f2      	b.n	8010542 <_dtoa_r+0x252>
 801055c:	2401      	movs	r4, #1
 801055e:	2200      	movs	r2, #0
 8010560:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010564:	f04f 3bff 	mov.w	fp, #4294967295
 8010568:	2100      	movs	r1, #0
 801056a:	46da      	mov	sl, fp
 801056c:	2212      	movs	r2, #18
 801056e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010570:	e7ce      	b.n	8010510 <_dtoa_r+0x220>
 8010572:	2201      	movs	r2, #1
 8010574:	9208      	str	r2, [sp, #32]
 8010576:	e7f5      	b.n	8010564 <_dtoa_r+0x274>
 8010578:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801057c:	46da      	mov	sl, fp
 801057e:	465a      	mov	r2, fp
 8010580:	e7c6      	b.n	8010510 <_dtoa_r+0x220>
 8010582:	3101      	adds	r1, #1
 8010584:	0040      	lsls	r0, r0, #1
 8010586:	e7c7      	b.n	8010518 <_dtoa_r+0x228>
 8010588:	636f4361 	.word	0x636f4361
 801058c:	3fd287a7 	.word	0x3fd287a7
 8010590:	8b60c8b3 	.word	0x8b60c8b3
 8010594:	3fc68a28 	.word	0x3fc68a28
 8010598:	509f79fb 	.word	0x509f79fb
 801059c:	3fd34413 	.word	0x3fd34413
 80105a0:	080137d2 	.word	0x080137d2
 80105a4:	080137e9 	.word	0x080137e9
 80105a8:	7ff00000 	.word	0x7ff00000
 80105ac:	080137ce 	.word	0x080137ce
 80105b0:	0801379d 	.word	0x0801379d
 80105b4:	0801379c 	.word	0x0801379c
 80105b8:	080138e0 	.word	0x080138e0
 80105bc:	08013841 	.word	0x08013841
 80105c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80105c4:	f1ba 0f0e 	cmp.w	sl, #14
 80105c8:	6010      	str	r0, [r2, #0]
 80105ca:	d86f      	bhi.n	80106ac <_dtoa_r+0x3bc>
 80105cc:	2c00      	cmp	r4, #0
 80105ce:	d06d      	beq.n	80106ac <_dtoa_r+0x3bc>
 80105d0:	f1b8 0f00 	cmp.w	r8, #0
 80105d4:	f340 80c2 	ble.w	801075c <_dtoa_r+0x46c>
 80105d8:	4aca      	ldr	r2, [pc, #808]	@ (8010904 <_dtoa_r+0x614>)
 80105da:	f008 010f 	and.w	r1, r8, #15
 80105de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80105e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80105e6:	ed92 7b00 	vldr	d7, [r2]
 80105ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 80105ee:	f000 80a9 	beq.w	8010744 <_dtoa_r+0x454>
 80105f2:	4ac5      	ldr	r2, [pc, #788]	@ (8010908 <_dtoa_r+0x618>)
 80105f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80105f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80105fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010600:	f001 010f 	and.w	r1, r1, #15
 8010604:	2203      	movs	r2, #3
 8010606:	48c0      	ldr	r0, [pc, #768]	@ (8010908 <_dtoa_r+0x618>)
 8010608:	2900      	cmp	r1, #0
 801060a:	f040 809d 	bne.w	8010748 <_dtoa_r+0x458>
 801060e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010612:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010616:	ed8d 7b02 	vstr	d7, [sp, #8]
 801061a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801061c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010620:	2900      	cmp	r1, #0
 8010622:	f000 80c1 	beq.w	80107a8 <_dtoa_r+0x4b8>
 8010626:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801062a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010632:	f140 80b9 	bpl.w	80107a8 <_dtoa_r+0x4b8>
 8010636:	f1ba 0f00 	cmp.w	sl, #0
 801063a:	f000 80b5 	beq.w	80107a8 <_dtoa_r+0x4b8>
 801063e:	f1bb 0f00 	cmp.w	fp, #0
 8010642:	dd31      	ble.n	80106a8 <_dtoa_r+0x3b8>
 8010644:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010648:	ee27 7b06 	vmul.f64	d7, d7, d6
 801064c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010650:	f108 31ff 	add.w	r1, r8, #4294967295
 8010654:	9104      	str	r1, [sp, #16]
 8010656:	3201      	adds	r2, #1
 8010658:	465c      	mov	r4, fp
 801065a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801065e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010662:	ee07 2a90 	vmov	s15, r2
 8010666:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801066a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801066e:	ee15 2a90 	vmov	r2, s11
 8010672:	ec51 0b15 	vmov	r0, r1, d5
 8010676:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801067a:	2c00      	cmp	r4, #0
 801067c:	f040 8098 	bne.w	80107b0 <_dtoa_r+0x4c0>
 8010680:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010684:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010688:	ec41 0b17 	vmov	d7, r0, r1
 801068c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010694:	f300 8261 	bgt.w	8010b5a <_dtoa_r+0x86a>
 8010698:	eeb1 7b47 	vneg.f64	d7, d7
 801069c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80106a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a4:	f100 80f5 	bmi.w	8010892 <_dtoa_r+0x5a2>
 80106a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80106ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80106ae:	2a00      	cmp	r2, #0
 80106b0:	f2c0 812c 	blt.w	801090c <_dtoa_r+0x61c>
 80106b4:	f1b8 0f0e 	cmp.w	r8, #14
 80106b8:	f300 8128 	bgt.w	801090c <_dtoa_r+0x61c>
 80106bc:	4b91      	ldr	r3, [pc, #580]	@ (8010904 <_dtoa_r+0x614>)
 80106be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80106c2:	ed93 6b00 	vldr	d6, [r3]
 80106c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da03      	bge.n	80106d4 <_dtoa_r+0x3e4>
 80106cc:	f1ba 0f00 	cmp.w	sl, #0
 80106d0:	f340 80d2 	ble.w	8010878 <_dtoa_r+0x588>
 80106d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80106d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106dc:	463e      	mov	r6, r7
 80106de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80106e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80106e6:	ee15 3a10 	vmov	r3, s10
 80106ea:	3330      	adds	r3, #48	@ 0x30
 80106ec:	f806 3b01 	strb.w	r3, [r6], #1
 80106f0:	1bf3      	subs	r3, r6, r7
 80106f2:	459a      	cmp	sl, r3
 80106f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80106f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80106fc:	f040 80f8 	bne.w	80108f0 <_dtoa_r+0x600>
 8010700:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010704:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070c:	f300 80dd 	bgt.w	80108ca <_dtoa_r+0x5da>
 8010710:	eeb4 7b46 	vcmp.f64	d7, d6
 8010714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010718:	d104      	bne.n	8010724 <_dtoa_r+0x434>
 801071a:	ee15 3a10 	vmov	r3, s10
 801071e:	07db      	lsls	r3, r3, #31
 8010720:	f100 80d3 	bmi.w	80108ca <_dtoa_r+0x5da>
 8010724:	9901      	ldr	r1, [sp, #4]
 8010726:	4648      	mov	r0, r9
 8010728:	f000 fc78 	bl	801101c <_Bfree>
 801072c:	2300      	movs	r3, #0
 801072e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010730:	7033      	strb	r3, [r6, #0]
 8010732:	f108 0301 	add.w	r3, r8, #1
 8010736:	6013      	str	r3, [r2, #0]
 8010738:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 8304 	beq.w	8010d48 <_dtoa_r+0xa58>
 8010740:	601e      	str	r6, [r3, #0]
 8010742:	e301      	b.n	8010d48 <_dtoa_r+0xa58>
 8010744:	2202      	movs	r2, #2
 8010746:	e75e      	b.n	8010606 <_dtoa_r+0x316>
 8010748:	07cc      	lsls	r4, r1, #31
 801074a:	d504      	bpl.n	8010756 <_dtoa_r+0x466>
 801074c:	ed90 6b00 	vldr	d6, [r0]
 8010750:	3201      	adds	r2, #1
 8010752:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010756:	1049      	asrs	r1, r1, #1
 8010758:	3008      	adds	r0, #8
 801075a:	e755      	b.n	8010608 <_dtoa_r+0x318>
 801075c:	d022      	beq.n	80107a4 <_dtoa_r+0x4b4>
 801075e:	f1c8 0100 	rsb	r1, r8, #0
 8010762:	4a68      	ldr	r2, [pc, #416]	@ (8010904 <_dtoa_r+0x614>)
 8010764:	f001 000f 	and.w	r0, r1, #15
 8010768:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801076c:	ed92 7b00 	vldr	d7, [r2]
 8010770:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010774:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010778:	4863      	ldr	r0, [pc, #396]	@ (8010908 <_dtoa_r+0x618>)
 801077a:	1109      	asrs	r1, r1, #4
 801077c:	2400      	movs	r4, #0
 801077e:	2202      	movs	r2, #2
 8010780:	b929      	cbnz	r1, 801078e <_dtoa_r+0x49e>
 8010782:	2c00      	cmp	r4, #0
 8010784:	f43f af49 	beq.w	801061a <_dtoa_r+0x32a>
 8010788:	ed8d 7b02 	vstr	d7, [sp, #8]
 801078c:	e745      	b.n	801061a <_dtoa_r+0x32a>
 801078e:	07ce      	lsls	r6, r1, #31
 8010790:	d505      	bpl.n	801079e <_dtoa_r+0x4ae>
 8010792:	ed90 6b00 	vldr	d6, [r0]
 8010796:	3201      	adds	r2, #1
 8010798:	2401      	movs	r4, #1
 801079a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801079e:	1049      	asrs	r1, r1, #1
 80107a0:	3008      	adds	r0, #8
 80107a2:	e7ed      	b.n	8010780 <_dtoa_r+0x490>
 80107a4:	2202      	movs	r2, #2
 80107a6:	e738      	b.n	801061a <_dtoa_r+0x32a>
 80107a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80107ac:	4654      	mov	r4, sl
 80107ae:	e754      	b.n	801065a <_dtoa_r+0x36a>
 80107b0:	4a54      	ldr	r2, [pc, #336]	@ (8010904 <_dtoa_r+0x614>)
 80107b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80107b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80107ba:	9a08      	ldr	r2, [sp, #32]
 80107bc:	ec41 0b17 	vmov	d7, r0, r1
 80107c0:	443c      	add	r4, r7
 80107c2:	b34a      	cbz	r2, 8010818 <_dtoa_r+0x528>
 80107c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80107c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80107cc:	463e      	mov	r6, r7
 80107ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80107d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80107d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80107da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80107de:	ee14 2a90 	vmov	r2, s9
 80107e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80107e6:	3230      	adds	r2, #48	@ 0x30
 80107e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80107f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f4:	f806 2b01 	strb.w	r2, [r6], #1
 80107f8:	d438      	bmi.n	801086c <_dtoa_r+0x57c>
 80107fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80107fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010806:	d462      	bmi.n	80108ce <_dtoa_r+0x5de>
 8010808:	42a6      	cmp	r6, r4
 801080a:	f43f af4d 	beq.w	80106a8 <_dtoa_r+0x3b8>
 801080e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010812:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010816:	e7e0      	b.n	80107da <_dtoa_r+0x4ea>
 8010818:	4621      	mov	r1, r4
 801081a:	463e      	mov	r6, r7
 801081c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010820:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010824:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010828:	ee14 2a90 	vmov	r2, s9
 801082c:	3230      	adds	r2, #48	@ 0x30
 801082e:	f806 2b01 	strb.w	r2, [r6], #1
 8010832:	42a6      	cmp	r6, r4
 8010834:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010838:	ee36 6b45 	vsub.f64	d6, d6, d5
 801083c:	d119      	bne.n	8010872 <_dtoa_r+0x582>
 801083e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010842:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010846:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084e:	dc3e      	bgt.n	80108ce <_dtoa_r+0x5de>
 8010850:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010854:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085c:	f57f af24 	bpl.w	80106a8 <_dtoa_r+0x3b8>
 8010860:	460e      	mov	r6, r1
 8010862:	3901      	subs	r1, #1
 8010864:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010868:	2b30      	cmp	r3, #48	@ 0x30
 801086a:	d0f9      	beq.n	8010860 <_dtoa_r+0x570>
 801086c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010870:	e758      	b.n	8010724 <_dtoa_r+0x434>
 8010872:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010876:	e7d5      	b.n	8010824 <_dtoa_r+0x534>
 8010878:	d10b      	bne.n	8010892 <_dtoa_r+0x5a2>
 801087a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801087e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010882:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088e:	f2c0 8161 	blt.w	8010b54 <_dtoa_r+0x864>
 8010892:	2400      	movs	r4, #0
 8010894:	4625      	mov	r5, r4
 8010896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010898:	43db      	mvns	r3, r3
 801089a:	9304      	str	r3, [sp, #16]
 801089c:	463e      	mov	r6, r7
 801089e:	f04f 0800 	mov.w	r8, #0
 80108a2:	4621      	mov	r1, r4
 80108a4:	4648      	mov	r0, r9
 80108a6:	f000 fbb9 	bl	801101c <_Bfree>
 80108aa:	2d00      	cmp	r5, #0
 80108ac:	d0de      	beq.n	801086c <_dtoa_r+0x57c>
 80108ae:	f1b8 0f00 	cmp.w	r8, #0
 80108b2:	d005      	beq.n	80108c0 <_dtoa_r+0x5d0>
 80108b4:	45a8      	cmp	r8, r5
 80108b6:	d003      	beq.n	80108c0 <_dtoa_r+0x5d0>
 80108b8:	4641      	mov	r1, r8
 80108ba:	4648      	mov	r0, r9
 80108bc:	f000 fbae 	bl	801101c <_Bfree>
 80108c0:	4629      	mov	r1, r5
 80108c2:	4648      	mov	r0, r9
 80108c4:	f000 fbaa 	bl	801101c <_Bfree>
 80108c8:	e7d0      	b.n	801086c <_dtoa_r+0x57c>
 80108ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80108ce:	4633      	mov	r3, r6
 80108d0:	461e      	mov	r6, r3
 80108d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108d6:	2a39      	cmp	r2, #57	@ 0x39
 80108d8:	d106      	bne.n	80108e8 <_dtoa_r+0x5f8>
 80108da:	429f      	cmp	r7, r3
 80108dc:	d1f8      	bne.n	80108d0 <_dtoa_r+0x5e0>
 80108de:	9a04      	ldr	r2, [sp, #16]
 80108e0:	3201      	adds	r2, #1
 80108e2:	9204      	str	r2, [sp, #16]
 80108e4:	2230      	movs	r2, #48	@ 0x30
 80108e6:	703a      	strb	r2, [r7, #0]
 80108e8:	781a      	ldrb	r2, [r3, #0]
 80108ea:	3201      	adds	r2, #1
 80108ec:	701a      	strb	r2, [r3, #0]
 80108ee:	e7bd      	b.n	801086c <_dtoa_r+0x57c>
 80108f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80108f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fc:	f47f aeef 	bne.w	80106de <_dtoa_r+0x3ee>
 8010900:	e710      	b.n	8010724 <_dtoa_r+0x434>
 8010902:	bf00      	nop
 8010904:	080138e0 	.word	0x080138e0
 8010908:	080138b8 	.word	0x080138b8
 801090c:	9908      	ldr	r1, [sp, #32]
 801090e:	2900      	cmp	r1, #0
 8010910:	f000 80e3 	beq.w	8010ada <_dtoa_r+0x7ea>
 8010914:	9907      	ldr	r1, [sp, #28]
 8010916:	2901      	cmp	r1, #1
 8010918:	f300 80c8 	bgt.w	8010aac <_dtoa_r+0x7bc>
 801091c:	2d00      	cmp	r5, #0
 801091e:	f000 80c1 	beq.w	8010aa4 <_dtoa_r+0x7b4>
 8010922:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010926:	9e05      	ldr	r6, [sp, #20]
 8010928:	461c      	mov	r4, r3
 801092a:	9304      	str	r3, [sp, #16]
 801092c:	9b05      	ldr	r3, [sp, #20]
 801092e:	4413      	add	r3, r2
 8010930:	9305      	str	r3, [sp, #20]
 8010932:	9b06      	ldr	r3, [sp, #24]
 8010934:	2101      	movs	r1, #1
 8010936:	4413      	add	r3, r2
 8010938:	4648      	mov	r0, r9
 801093a:	9306      	str	r3, [sp, #24]
 801093c:	f000 fc6c 	bl	8011218 <__i2b>
 8010940:	9b04      	ldr	r3, [sp, #16]
 8010942:	4605      	mov	r5, r0
 8010944:	b166      	cbz	r6, 8010960 <_dtoa_r+0x670>
 8010946:	9a06      	ldr	r2, [sp, #24]
 8010948:	2a00      	cmp	r2, #0
 801094a:	dd09      	ble.n	8010960 <_dtoa_r+0x670>
 801094c:	42b2      	cmp	r2, r6
 801094e:	9905      	ldr	r1, [sp, #20]
 8010950:	bfa8      	it	ge
 8010952:	4632      	movge	r2, r6
 8010954:	1a89      	subs	r1, r1, r2
 8010956:	9105      	str	r1, [sp, #20]
 8010958:	9906      	ldr	r1, [sp, #24]
 801095a:	1ab6      	subs	r6, r6, r2
 801095c:	1a8a      	subs	r2, r1, r2
 801095e:	9206      	str	r2, [sp, #24]
 8010960:	b1fb      	cbz	r3, 80109a2 <_dtoa_r+0x6b2>
 8010962:	9a08      	ldr	r2, [sp, #32]
 8010964:	2a00      	cmp	r2, #0
 8010966:	f000 80bc 	beq.w	8010ae2 <_dtoa_r+0x7f2>
 801096a:	b19c      	cbz	r4, 8010994 <_dtoa_r+0x6a4>
 801096c:	4629      	mov	r1, r5
 801096e:	4622      	mov	r2, r4
 8010970:	4648      	mov	r0, r9
 8010972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010974:	f000 fd10 	bl	8011398 <__pow5mult>
 8010978:	9a01      	ldr	r2, [sp, #4]
 801097a:	4601      	mov	r1, r0
 801097c:	4605      	mov	r5, r0
 801097e:	4648      	mov	r0, r9
 8010980:	f000 fc60 	bl	8011244 <__multiply>
 8010984:	9901      	ldr	r1, [sp, #4]
 8010986:	9004      	str	r0, [sp, #16]
 8010988:	4648      	mov	r0, r9
 801098a:	f000 fb47 	bl	801101c <_Bfree>
 801098e:	9a04      	ldr	r2, [sp, #16]
 8010990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010992:	9201      	str	r2, [sp, #4]
 8010994:	1b1a      	subs	r2, r3, r4
 8010996:	d004      	beq.n	80109a2 <_dtoa_r+0x6b2>
 8010998:	9901      	ldr	r1, [sp, #4]
 801099a:	4648      	mov	r0, r9
 801099c:	f000 fcfc 	bl	8011398 <__pow5mult>
 80109a0:	9001      	str	r0, [sp, #4]
 80109a2:	2101      	movs	r1, #1
 80109a4:	4648      	mov	r0, r9
 80109a6:	f000 fc37 	bl	8011218 <__i2b>
 80109aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ac:	4604      	mov	r4, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f000 81d0 	beq.w	8010d54 <_dtoa_r+0xa64>
 80109b4:	461a      	mov	r2, r3
 80109b6:	4601      	mov	r1, r0
 80109b8:	4648      	mov	r0, r9
 80109ba:	f000 fced 	bl	8011398 <__pow5mult>
 80109be:	9b07      	ldr	r3, [sp, #28]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	4604      	mov	r4, r0
 80109c4:	f300 8095 	bgt.w	8010af2 <_dtoa_r+0x802>
 80109c8:	9b02      	ldr	r3, [sp, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	f040 808b 	bne.w	8010ae6 <_dtoa_r+0x7f6>
 80109d0:	9b03      	ldr	r3, [sp, #12]
 80109d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80109d6:	2a00      	cmp	r2, #0
 80109d8:	f040 8087 	bne.w	8010aea <_dtoa_r+0x7fa>
 80109dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80109e0:	0d12      	lsrs	r2, r2, #20
 80109e2:	0512      	lsls	r2, r2, #20
 80109e4:	2a00      	cmp	r2, #0
 80109e6:	f000 8082 	beq.w	8010aee <_dtoa_r+0x7fe>
 80109ea:	9b05      	ldr	r3, [sp, #20]
 80109ec:	3301      	adds	r3, #1
 80109ee:	9305      	str	r3, [sp, #20]
 80109f0:	9b06      	ldr	r3, [sp, #24]
 80109f2:	3301      	adds	r3, #1
 80109f4:	9306      	str	r3, [sp, #24]
 80109f6:	2301      	movs	r3, #1
 80109f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 81af 	beq.w	8010d60 <_dtoa_r+0xa70>
 8010a02:	6922      	ldr	r2, [r4, #16]
 8010a04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010a08:	6910      	ldr	r0, [r2, #16]
 8010a0a:	f000 fbb9 	bl	8011180 <__hi0bits>
 8010a0e:	f1c0 0020 	rsb	r0, r0, #32
 8010a12:	9b06      	ldr	r3, [sp, #24]
 8010a14:	4418      	add	r0, r3
 8010a16:	f010 001f 	ands.w	r0, r0, #31
 8010a1a:	d076      	beq.n	8010b0a <_dtoa_r+0x81a>
 8010a1c:	f1c0 0220 	rsb	r2, r0, #32
 8010a20:	2a04      	cmp	r2, #4
 8010a22:	dd69      	ble.n	8010af8 <_dtoa_r+0x808>
 8010a24:	9b05      	ldr	r3, [sp, #20]
 8010a26:	f1c0 001c 	rsb	r0, r0, #28
 8010a2a:	4403      	add	r3, r0
 8010a2c:	9305      	str	r3, [sp, #20]
 8010a2e:	9b06      	ldr	r3, [sp, #24]
 8010a30:	4406      	add	r6, r0
 8010a32:	4403      	add	r3, r0
 8010a34:	9306      	str	r3, [sp, #24]
 8010a36:	9b05      	ldr	r3, [sp, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	dd05      	ble.n	8010a48 <_dtoa_r+0x758>
 8010a3c:	9901      	ldr	r1, [sp, #4]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	4648      	mov	r0, r9
 8010a42:	f000 fd03 	bl	801144c <__lshift>
 8010a46:	9001      	str	r0, [sp, #4]
 8010a48:	9b06      	ldr	r3, [sp, #24]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	dd05      	ble.n	8010a5a <_dtoa_r+0x76a>
 8010a4e:	4621      	mov	r1, r4
 8010a50:	461a      	mov	r2, r3
 8010a52:	4648      	mov	r0, r9
 8010a54:	f000 fcfa 	bl	801144c <__lshift>
 8010a58:	4604      	mov	r4, r0
 8010a5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d056      	beq.n	8010b0e <_dtoa_r+0x81e>
 8010a60:	9801      	ldr	r0, [sp, #4]
 8010a62:	4621      	mov	r1, r4
 8010a64:	f000 fd5e 	bl	8011524 <__mcmp>
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	da50      	bge.n	8010b0e <_dtoa_r+0x81e>
 8010a6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	9901      	ldr	r1, [sp, #4]
 8010a74:	2300      	movs	r3, #0
 8010a76:	220a      	movs	r2, #10
 8010a78:	4648      	mov	r0, r9
 8010a7a:	f000 faf1 	bl	8011060 <__multadd>
 8010a7e:	9b08      	ldr	r3, [sp, #32]
 8010a80:	9001      	str	r0, [sp, #4]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	f000 816e 	beq.w	8010d64 <_dtoa_r+0xa74>
 8010a88:	4629      	mov	r1, r5
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	220a      	movs	r2, #10
 8010a8e:	4648      	mov	r0, r9
 8010a90:	f000 fae6 	bl	8011060 <__multadd>
 8010a94:	f1bb 0f00 	cmp.w	fp, #0
 8010a98:	4605      	mov	r5, r0
 8010a9a:	dc64      	bgt.n	8010b66 <_dtoa_r+0x876>
 8010a9c:	9b07      	ldr	r3, [sp, #28]
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	dc3e      	bgt.n	8010b20 <_dtoa_r+0x830>
 8010aa2:	e060      	b.n	8010b66 <_dtoa_r+0x876>
 8010aa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010aa6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010aaa:	e73c      	b.n	8010926 <_dtoa_r+0x636>
 8010aac:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010ab0:	42a3      	cmp	r3, r4
 8010ab2:	bfbf      	itttt	lt
 8010ab4:	1ae2      	sublt	r2, r4, r3
 8010ab6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010ab8:	189b      	addlt	r3, r3, r2
 8010aba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010abc:	bfae      	itee	ge
 8010abe:	1b1c      	subge	r4, r3, r4
 8010ac0:	4623      	movlt	r3, r4
 8010ac2:	2400      	movlt	r4, #0
 8010ac4:	f1ba 0f00 	cmp.w	sl, #0
 8010ac8:	bfb5      	itete	lt
 8010aca:	9a05      	ldrlt	r2, [sp, #20]
 8010acc:	9e05      	ldrge	r6, [sp, #20]
 8010ace:	eba2 060a 	sublt.w	r6, r2, sl
 8010ad2:	4652      	movge	r2, sl
 8010ad4:	bfb8      	it	lt
 8010ad6:	2200      	movlt	r2, #0
 8010ad8:	e727      	b.n	801092a <_dtoa_r+0x63a>
 8010ada:	9e05      	ldr	r6, [sp, #20]
 8010adc:	9d08      	ldr	r5, [sp, #32]
 8010ade:	461c      	mov	r4, r3
 8010ae0:	e730      	b.n	8010944 <_dtoa_r+0x654>
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	e758      	b.n	8010998 <_dtoa_r+0x6a8>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	e786      	b.n	80109f8 <_dtoa_r+0x708>
 8010aea:	9b02      	ldr	r3, [sp, #8]
 8010aec:	e784      	b.n	80109f8 <_dtoa_r+0x708>
 8010aee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010af0:	e783      	b.n	80109fa <_dtoa_r+0x70a>
 8010af2:	2300      	movs	r3, #0
 8010af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010af6:	e784      	b.n	8010a02 <_dtoa_r+0x712>
 8010af8:	d09d      	beq.n	8010a36 <_dtoa_r+0x746>
 8010afa:	9b05      	ldr	r3, [sp, #20]
 8010afc:	321c      	adds	r2, #28
 8010afe:	4413      	add	r3, r2
 8010b00:	9305      	str	r3, [sp, #20]
 8010b02:	9b06      	ldr	r3, [sp, #24]
 8010b04:	4416      	add	r6, r2
 8010b06:	4413      	add	r3, r2
 8010b08:	e794      	b.n	8010a34 <_dtoa_r+0x744>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	e7f5      	b.n	8010afa <_dtoa_r+0x80a>
 8010b0e:	f1ba 0f00 	cmp.w	sl, #0
 8010b12:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b16:	46d3      	mov	fp, sl
 8010b18:	dc21      	bgt.n	8010b5e <_dtoa_r+0x86e>
 8010b1a:	9b07      	ldr	r3, [sp, #28]
 8010b1c:	2b02      	cmp	r3, #2
 8010b1e:	dd1e      	ble.n	8010b5e <_dtoa_r+0x86e>
 8010b20:	f1bb 0f00 	cmp.w	fp, #0
 8010b24:	f47f aeb7 	bne.w	8010896 <_dtoa_r+0x5a6>
 8010b28:	4621      	mov	r1, r4
 8010b2a:	465b      	mov	r3, fp
 8010b2c:	2205      	movs	r2, #5
 8010b2e:	4648      	mov	r0, r9
 8010b30:	f000 fa96 	bl	8011060 <__multadd>
 8010b34:	4601      	mov	r1, r0
 8010b36:	4604      	mov	r4, r0
 8010b38:	9801      	ldr	r0, [sp, #4]
 8010b3a:	f000 fcf3 	bl	8011524 <__mcmp>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f77f aea9 	ble.w	8010896 <_dtoa_r+0x5a6>
 8010b44:	463e      	mov	r6, r7
 8010b46:	2331      	movs	r3, #49	@ 0x31
 8010b48:	f806 3b01 	strb.w	r3, [r6], #1
 8010b4c:	9b04      	ldr	r3, [sp, #16]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	9304      	str	r3, [sp, #16]
 8010b52:	e6a4      	b.n	801089e <_dtoa_r+0x5ae>
 8010b54:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b58:	4654      	mov	r4, sl
 8010b5a:	4625      	mov	r5, r4
 8010b5c:	e7f2      	b.n	8010b44 <_dtoa_r+0x854>
 8010b5e:	9b08      	ldr	r3, [sp, #32]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f000 8103 	beq.w	8010d6c <_dtoa_r+0xa7c>
 8010b66:	2e00      	cmp	r6, #0
 8010b68:	dd05      	ble.n	8010b76 <_dtoa_r+0x886>
 8010b6a:	4629      	mov	r1, r5
 8010b6c:	4632      	mov	r2, r6
 8010b6e:	4648      	mov	r0, r9
 8010b70:	f000 fc6c 	bl	801144c <__lshift>
 8010b74:	4605      	mov	r5, r0
 8010b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d058      	beq.n	8010c2e <_dtoa_r+0x93e>
 8010b7c:	6869      	ldr	r1, [r5, #4]
 8010b7e:	4648      	mov	r0, r9
 8010b80:	f000 fa0c 	bl	8010f9c <_Balloc>
 8010b84:	4606      	mov	r6, r0
 8010b86:	b928      	cbnz	r0, 8010b94 <_dtoa_r+0x8a4>
 8010b88:	4b82      	ldr	r3, [pc, #520]	@ (8010d94 <_dtoa_r+0xaa4>)
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b90:	f7ff bbc7 	b.w	8010322 <_dtoa_r+0x32>
 8010b94:	692a      	ldr	r2, [r5, #16]
 8010b96:	3202      	adds	r2, #2
 8010b98:	0092      	lsls	r2, r2, #2
 8010b9a:	f105 010c 	add.w	r1, r5, #12
 8010b9e:	300c      	adds	r0, #12
 8010ba0:	f7ff fb09 	bl	80101b6 <memcpy>
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	4631      	mov	r1, r6
 8010ba8:	4648      	mov	r0, r9
 8010baa:	f000 fc4f 	bl	801144c <__lshift>
 8010bae:	1c7b      	adds	r3, r7, #1
 8010bb0:	9305      	str	r3, [sp, #20]
 8010bb2:	eb07 030b 	add.w	r3, r7, fp
 8010bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bb8:	9b02      	ldr	r3, [sp, #8]
 8010bba:	f003 0301 	and.w	r3, r3, #1
 8010bbe:	46a8      	mov	r8, r5
 8010bc0:	9308      	str	r3, [sp, #32]
 8010bc2:	4605      	mov	r5, r0
 8010bc4:	9b05      	ldr	r3, [sp, #20]
 8010bc6:	9801      	ldr	r0, [sp, #4]
 8010bc8:	4621      	mov	r1, r4
 8010bca:	f103 3bff 	add.w	fp, r3, #4294967295
 8010bce:	f7ff fb07 	bl	80101e0 <quorem>
 8010bd2:	4641      	mov	r1, r8
 8010bd4:	9002      	str	r0, [sp, #8]
 8010bd6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010bda:	9801      	ldr	r0, [sp, #4]
 8010bdc:	f000 fca2 	bl	8011524 <__mcmp>
 8010be0:	462a      	mov	r2, r5
 8010be2:	9006      	str	r0, [sp, #24]
 8010be4:	4621      	mov	r1, r4
 8010be6:	4648      	mov	r0, r9
 8010be8:	f000 fcb8 	bl	801155c <__mdiff>
 8010bec:	68c2      	ldr	r2, [r0, #12]
 8010bee:	4606      	mov	r6, r0
 8010bf0:	b9fa      	cbnz	r2, 8010c32 <_dtoa_r+0x942>
 8010bf2:	4601      	mov	r1, r0
 8010bf4:	9801      	ldr	r0, [sp, #4]
 8010bf6:	f000 fc95 	bl	8011524 <__mcmp>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	4631      	mov	r1, r6
 8010bfe:	4648      	mov	r0, r9
 8010c00:	920a      	str	r2, [sp, #40]	@ 0x28
 8010c02:	f000 fa0b 	bl	801101c <_Bfree>
 8010c06:	9b07      	ldr	r3, [sp, #28]
 8010c08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010c0a:	9e05      	ldr	r6, [sp, #20]
 8010c0c:	ea43 0102 	orr.w	r1, r3, r2
 8010c10:	9b08      	ldr	r3, [sp, #32]
 8010c12:	4319      	orrs	r1, r3
 8010c14:	d10f      	bne.n	8010c36 <_dtoa_r+0x946>
 8010c16:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c1a:	d028      	beq.n	8010c6e <_dtoa_r+0x97e>
 8010c1c:	9b06      	ldr	r3, [sp, #24]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dd02      	ble.n	8010c28 <_dtoa_r+0x938>
 8010c22:	9b02      	ldr	r3, [sp, #8]
 8010c24:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010c28:	f88b a000 	strb.w	sl, [fp]
 8010c2c:	e639      	b.n	80108a2 <_dtoa_r+0x5b2>
 8010c2e:	4628      	mov	r0, r5
 8010c30:	e7bd      	b.n	8010bae <_dtoa_r+0x8be>
 8010c32:	2201      	movs	r2, #1
 8010c34:	e7e2      	b.n	8010bfc <_dtoa_r+0x90c>
 8010c36:	9b06      	ldr	r3, [sp, #24]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	db04      	blt.n	8010c46 <_dtoa_r+0x956>
 8010c3c:	9907      	ldr	r1, [sp, #28]
 8010c3e:	430b      	orrs	r3, r1
 8010c40:	9908      	ldr	r1, [sp, #32]
 8010c42:	430b      	orrs	r3, r1
 8010c44:	d120      	bne.n	8010c88 <_dtoa_r+0x998>
 8010c46:	2a00      	cmp	r2, #0
 8010c48:	ddee      	ble.n	8010c28 <_dtoa_r+0x938>
 8010c4a:	9901      	ldr	r1, [sp, #4]
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	4648      	mov	r0, r9
 8010c50:	f000 fbfc 	bl	801144c <__lshift>
 8010c54:	4621      	mov	r1, r4
 8010c56:	9001      	str	r0, [sp, #4]
 8010c58:	f000 fc64 	bl	8011524 <__mcmp>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	dc03      	bgt.n	8010c68 <_dtoa_r+0x978>
 8010c60:	d1e2      	bne.n	8010c28 <_dtoa_r+0x938>
 8010c62:	f01a 0f01 	tst.w	sl, #1
 8010c66:	d0df      	beq.n	8010c28 <_dtoa_r+0x938>
 8010c68:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c6c:	d1d9      	bne.n	8010c22 <_dtoa_r+0x932>
 8010c6e:	2339      	movs	r3, #57	@ 0x39
 8010c70:	f88b 3000 	strb.w	r3, [fp]
 8010c74:	4633      	mov	r3, r6
 8010c76:	461e      	mov	r6, r3
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c7e:	2a39      	cmp	r2, #57	@ 0x39
 8010c80:	d053      	beq.n	8010d2a <_dtoa_r+0xa3a>
 8010c82:	3201      	adds	r2, #1
 8010c84:	701a      	strb	r2, [r3, #0]
 8010c86:	e60c      	b.n	80108a2 <_dtoa_r+0x5b2>
 8010c88:	2a00      	cmp	r2, #0
 8010c8a:	dd07      	ble.n	8010c9c <_dtoa_r+0x9ac>
 8010c8c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c90:	d0ed      	beq.n	8010c6e <_dtoa_r+0x97e>
 8010c92:	f10a 0301 	add.w	r3, sl, #1
 8010c96:	f88b 3000 	strb.w	r3, [fp]
 8010c9a:	e602      	b.n	80108a2 <_dtoa_r+0x5b2>
 8010c9c:	9b05      	ldr	r3, [sp, #20]
 8010c9e:	9a05      	ldr	r2, [sp, #20]
 8010ca0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d029      	beq.n	8010cfe <_dtoa_r+0xa0e>
 8010caa:	9901      	ldr	r1, [sp, #4]
 8010cac:	2300      	movs	r3, #0
 8010cae:	220a      	movs	r2, #10
 8010cb0:	4648      	mov	r0, r9
 8010cb2:	f000 f9d5 	bl	8011060 <__multadd>
 8010cb6:	45a8      	cmp	r8, r5
 8010cb8:	9001      	str	r0, [sp, #4]
 8010cba:	f04f 0300 	mov.w	r3, #0
 8010cbe:	f04f 020a 	mov.w	r2, #10
 8010cc2:	4641      	mov	r1, r8
 8010cc4:	4648      	mov	r0, r9
 8010cc6:	d107      	bne.n	8010cd8 <_dtoa_r+0x9e8>
 8010cc8:	f000 f9ca 	bl	8011060 <__multadd>
 8010ccc:	4680      	mov	r8, r0
 8010cce:	4605      	mov	r5, r0
 8010cd0:	9b05      	ldr	r3, [sp, #20]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	9305      	str	r3, [sp, #20]
 8010cd6:	e775      	b.n	8010bc4 <_dtoa_r+0x8d4>
 8010cd8:	f000 f9c2 	bl	8011060 <__multadd>
 8010cdc:	4629      	mov	r1, r5
 8010cde:	4680      	mov	r8, r0
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	220a      	movs	r2, #10
 8010ce4:	4648      	mov	r0, r9
 8010ce6:	f000 f9bb 	bl	8011060 <__multadd>
 8010cea:	4605      	mov	r5, r0
 8010cec:	e7f0      	b.n	8010cd0 <_dtoa_r+0x9e0>
 8010cee:	f1bb 0f00 	cmp.w	fp, #0
 8010cf2:	bfcc      	ite	gt
 8010cf4:	465e      	movgt	r6, fp
 8010cf6:	2601      	movle	r6, #1
 8010cf8:	443e      	add	r6, r7
 8010cfa:	f04f 0800 	mov.w	r8, #0
 8010cfe:	9901      	ldr	r1, [sp, #4]
 8010d00:	2201      	movs	r2, #1
 8010d02:	4648      	mov	r0, r9
 8010d04:	f000 fba2 	bl	801144c <__lshift>
 8010d08:	4621      	mov	r1, r4
 8010d0a:	9001      	str	r0, [sp, #4]
 8010d0c:	f000 fc0a 	bl	8011524 <__mcmp>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	dcaf      	bgt.n	8010c74 <_dtoa_r+0x984>
 8010d14:	d102      	bne.n	8010d1c <_dtoa_r+0xa2c>
 8010d16:	f01a 0f01 	tst.w	sl, #1
 8010d1a:	d1ab      	bne.n	8010c74 <_dtoa_r+0x984>
 8010d1c:	4633      	mov	r3, r6
 8010d1e:	461e      	mov	r6, r3
 8010d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d24:	2a30      	cmp	r2, #48	@ 0x30
 8010d26:	d0fa      	beq.n	8010d1e <_dtoa_r+0xa2e>
 8010d28:	e5bb      	b.n	80108a2 <_dtoa_r+0x5b2>
 8010d2a:	429f      	cmp	r7, r3
 8010d2c:	d1a3      	bne.n	8010c76 <_dtoa_r+0x986>
 8010d2e:	9b04      	ldr	r3, [sp, #16]
 8010d30:	3301      	adds	r3, #1
 8010d32:	9304      	str	r3, [sp, #16]
 8010d34:	2331      	movs	r3, #49	@ 0x31
 8010d36:	703b      	strb	r3, [r7, #0]
 8010d38:	e5b3      	b.n	80108a2 <_dtoa_r+0x5b2>
 8010d3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d3c:	4f16      	ldr	r7, [pc, #88]	@ (8010d98 <_dtoa_r+0xaa8>)
 8010d3e:	b11b      	cbz	r3, 8010d48 <_dtoa_r+0xa58>
 8010d40:	f107 0308 	add.w	r3, r7, #8
 8010d44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010d46:	6013      	str	r3, [r2, #0]
 8010d48:	4638      	mov	r0, r7
 8010d4a:	b011      	add	sp, #68	@ 0x44
 8010d4c:	ecbd 8b02 	vpop	{d8}
 8010d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d54:	9b07      	ldr	r3, [sp, #28]
 8010d56:	2b01      	cmp	r3, #1
 8010d58:	f77f ae36 	ble.w	80109c8 <_dtoa_r+0x6d8>
 8010d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d60:	2001      	movs	r0, #1
 8010d62:	e656      	b.n	8010a12 <_dtoa_r+0x722>
 8010d64:	f1bb 0f00 	cmp.w	fp, #0
 8010d68:	f77f aed7 	ble.w	8010b1a <_dtoa_r+0x82a>
 8010d6c:	463e      	mov	r6, r7
 8010d6e:	9801      	ldr	r0, [sp, #4]
 8010d70:	4621      	mov	r1, r4
 8010d72:	f7ff fa35 	bl	80101e0 <quorem>
 8010d76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010d7a:	f806 ab01 	strb.w	sl, [r6], #1
 8010d7e:	1bf2      	subs	r2, r6, r7
 8010d80:	4593      	cmp	fp, r2
 8010d82:	ddb4      	ble.n	8010cee <_dtoa_r+0x9fe>
 8010d84:	9901      	ldr	r1, [sp, #4]
 8010d86:	2300      	movs	r3, #0
 8010d88:	220a      	movs	r2, #10
 8010d8a:	4648      	mov	r0, r9
 8010d8c:	f000 f968 	bl	8011060 <__multadd>
 8010d90:	9001      	str	r0, [sp, #4]
 8010d92:	e7ec      	b.n	8010d6e <_dtoa_r+0xa7e>
 8010d94:	08013841 	.word	0x08013841
 8010d98:	080137c5 	.word	0x080137c5

08010d9c <_free_r>:
 8010d9c:	b538      	push	{r3, r4, r5, lr}
 8010d9e:	4605      	mov	r5, r0
 8010da0:	2900      	cmp	r1, #0
 8010da2:	d041      	beq.n	8010e28 <_free_r+0x8c>
 8010da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010da8:	1f0c      	subs	r4, r1, #4
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	bfb8      	it	lt
 8010dae:	18e4      	addlt	r4, r4, r3
 8010db0:	f000 f8e8 	bl	8010f84 <__malloc_lock>
 8010db4:	4a1d      	ldr	r2, [pc, #116]	@ (8010e2c <_free_r+0x90>)
 8010db6:	6813      	ldr	r3, [r2, #0]
 8010db8:	b933      	cbnz	r3, 8010dc8 <_free_r+0x2c>
 8010dba:	6063      	str	r3, [r4, #4]
 8010dbc:	6014      	str	r4, [r2, #0]
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc4:	f000 b8e4 	b.w	8010f90 <__malloc_unlock>
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	d908      	bls.n	8010dde <_free_r+0x42>
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	1821      	adds	r1, r4, r0
 8010dd0:	428b      	cmp	r3, r1
 8010dd2:	bf01      	itttt	eq
 8010dd4:	6819      	ldreq	r1, [r3, #0]
 8010dd6:	685b      	ldreq	r3, [r3, #4]
 8010dd8:	1809      	addeq	r1, r1, r0
 8010dda:	6021      	streq	r1, [r4, #0]
 8010ddc:	e7ed      	b.n	8010dba <_free_r+0x1e>
 8010dde:	461a      	mov	r2, r3
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	b10b      	cbz	r3, 8010de8 <_free_r+0x4c>
 8010de4:	42a3      	cmp	r3, r4
 8010de6:	d9fa      	bls.n	8010dde <_free_r+0x42>
 8010de8:	6811      	ldr	r1, [r2, #0]
 8010dea:	1850      	adds	r0, r2, r1
 8010dec:	42a0      	cmp	r0, r4
 8010dee:	d10b      	bne.n	8010e08 <_free_r+0x6c>
 8010df0:	6820      	ldr	r0, [r4, #0]
 8010df2:	4401      	add	r1, r0
 8010df4:	1850      	adds	r0, r2, r1
 8010df6:	4283      	cmp	r3, r0
 8010df8:	6011      	str	r1, [r2, #0]
 8010dfa:	d1e0      	bne.n	8010dbe <_free_r+0x22>
 8010dfc:	6818      	ldr	r0, [r3, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	6053      	str	r3, [r2, #4]
 8010e02:	4408      	add	r0, r1
 8010e04:	6010      	str	r0, [r2, #0]
 8010e06:	e7da      	b.n	8010dbe <_free_r+0x22>
 8010e08:	d902      	bls.n	8010e10 <_free_r+0x74>
 8010e0a:	230c      	movs	r3, #12
 8010e0c:	602b      	str	r3, [r5, #0]
 8010e0e:	e7d6      	b.n	8010dbe <_free_r+0x22>
 8010e10:	6820      	ldr	r0, [r4, #0]
 8010e12:	1821      	adds	r1, r4, r0
 8010e14:	428b      	cmp	r3, r1
 8010e16:	bf04      	itt	eq
 8010e18:	6819      	ldreq	r1, [r3, #0]
 8010e1a:	685b      	ldreq	r3, [r3, #4]
 8010e1c:	6063      	str	r3, [r4, #4]
 8010e1e:	bf04      	itt	eq
 8010e20:	1809      	addeq	r1, r1, r0
 8010e22:	6021      	streq	r1, [r4, #0]
 8010e24:	6054      	str	r4, [r2, #4]
 8010e26:	e7ca      	b.n	8010dbe <_free_r+0x22>
 8010e28:	bd38      	pop	{r3, r4, r5, pc}
 8010e2a:	bf00      	nop
 8010e2c:	24000d0c 	.word	0x24000d0c

08010e30 <malloc>:
 8010e30:	4b02      	ldr	r3, [pc, #8]	@ (8010e3c <malloc+0xc>)
 8010e32:	4601      	mov	r1, r0
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	f000 b825 	b.w	8010e84 <_malloc_r>
 8010e3a:	bf00      	nop
 8010e3c:	2400001c 	.word	0x2400001c

08010e40 <sbrk_aligned>:
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	4e0f      	ldr	r6, [pc, #60]	@ (8010e80 <sbrk_aligned+0x40>)
 8010e44:	460c      	mov	r4, r1
 8010e46:	6831      	ldr	r1, [r6, #0]
 8010e48:	4605      	mov	r5, r0
 8010e4a:	b911      	cbnz	r1, 8010e52 <sbrk_aligned+0x12>
 8010e4c:	f001 ff8e 	bl	8012d6c <_sbrk_r>
 8010e50:	6030      	str	r0, [r6, #0]
 8010e52:	4621      	mov	r1, r4
 8010e54:	4628      	mov	r0, r5
 8010e56:	f001 ff89 	bl	8012d6c <_sbrk_r>
 8010e5a:	1c43      	adds	r3, r0, #1
 8010e5c:	d103      	bne.n	8010e66 <sbrk_aligned+0x26>
 8010e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8010e62:	4620      	mov	r0, r4
 8010e64:	bd70      	pop	{r4, r5, r6, pc}
 8010e66:	1cc4      	adds	r4, r0, #3
 8010e68:	f024 0403 	bic.w	r4, r4, #3
 8010e6c:	42a0      	cmp	r0, r4
 8010e6e:	d0f8      	beq.n	8010e62 <sbrk_aligned+0x22>
 8010e70:	1a21      	subs	r1, r4, r0
 8010e72:	4628      	mov	r0, r5
 8010e74:	f001 ff7a 	bl	8012d6c <_sbrk_r>
 8010e78:	3001      	adds	r0, #1
 8010e7a:	d1f2      	bne.n	8010e62 <sbrk_aligned+0x22>
 8010e7c:	e7ef      	b.n	8010e5e <sbrk_aligned+0x1e>
 8010e7e:	bf00      	nop
 8010e80:	24000d08 	.word	0x24000d08

08010e84 <_malloc_r>:
 8010e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e88:	1ccd      	adds	r5, r1, #3
 8010e8a:	f025 0503 	bic.w	r5, r5, #3
 8010e8e:	3508      	adds	r5, #8
 8010e90:	2d0c      	cmp	r5, #12
 8010e92:	bf38      	it	cc
 8010e94:	250c      	movcc	r5, #12
 8010e96:	2d00      	cmp	r5, #0
 8010e98:	4606      	mov	r6, r0
 8010e9a:	db01      	blt.n	8010ea0 <_malloc_r+0x1c>
 8010e9c:	42a9      	cmp	r1, r5
 8010e9e:	d904      	bls.n	8010eaa <_malloc_r+0x26>
 8010ea0:	230c      	movs	r3, #12
 8010ea2:	6033      	str	r3, [r6, #0]
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f80 <_malloc_r+0xfc>
 8010eae:	f000 f869 	bl	8010f84 <__malloc_lock>
 8010eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8010eb6:	461c      	mov	r4, r3
 8010eb8:	bb44      	cbnz	r4, 8010f0c <_malloc_r+0x88>
 8010eba:	4629      	mov	r1, r5
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f7ff ffbf 	bl	8010e40 <sbrk_aligned>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	d158      	bne.n	8010f7a <_malloc_r+0xf6>
 8010ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8010ecc:	4627      	mov	r7, r4
 8010ece:	2f00      	cmp	r7, #0
 8010ed0:	d143      	bne.n	8010f5a <_malloc_r+0xd6>
 8010ed2:	2c00      	cmp	r4, #0
 8010ed4:	d04b      	beq.n	8010f6e <_malloc_r+0xea>
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	4639      	mov	r1, r7
 8010eda:	4630      	mov	r0, r6
 8010edc:	eb04 0903 	add.w	r9, r4, r3
 8010ee0:	f001 ff44 	bl	8012d6c <_sbrk_r>
 8010ee4:	4581      	cmp	r9, r0
 8010ee6:	d142      	bne.n	8010f6e <_malloc_r+0xea>
 8010ee8:	6821      	ldr	r1, [r4, #0]
 8010eea:	1a6d      	subs	r5, r5, r1
 8010eec:	4629      	mov	r1, r5
 8010eee:	4630      	mov	r0, r6
 8010ef0:	f7ff ffa6 	bl	8010e40 <sbrk_aligned>
 8010ef4:	3001      	adds	r0, #1
 8010ef6:	d03a      	beq.n	8010f6e <_malloc_r+0xea>
 8010ef8:	6823      	ldr	r3, [r4, #0]
 8010efa:	442b      	add	r3, r5
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	f8d8 3000 	ldr.w	r3, [r8]
 8010f02:	685a      	ldr	r2, [r3, #4]
 8010f04:	bb62      	cbnz	r2, 8010f60 <_malloc_r+0xdc>
 8010f06:	f8c8 7000 	str.w	r7, [r8]
 8010f0a:	e00f      	b.n	8010f2c <_malloc_r+0xa8>
 8010f0c:	6822      	ldr	r2, [r4, #0]
 8010f0e:	1b52      	subs	r2, r2, r5
 8010f10:	d420      	bmi.n	8010f54 <_malloc_r+0xd0>
 8010f12:	2a0b      	cmp	r2, #11
 8010f14:	d917      	bls.n	8010f46 <_malloc_r+0xc2>
 8010f16:	1961      	adds	r1, r4, r5
 8010f18:	42a3      	cmp	r3, r4
 8010f1a:	6025      	str	r5, [r4, #0]
 8010f1c:	bf18      	it	ne
 8010f1e:	6059      	strne	r1, [r3, #4]
 8010f20:	6863      	ldr	r3, [r4, #4]
 8010f22:	bf08      	it	eq
 8010f24:	f8c8 1000 	streq.w	r1, [r8]
 8010f28:	5162      	str	r2, [r4, r5]
 8010f2a:	604b      	str	r3, [r1, #4]
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f000 f82f 	bl	8010f90 <__malloc_unlock>
 8010f32:	f104 000b 	add.w	r0, r4, #11
 8010f36:	1d23      	adds	r3, r4, #4
 8010f38:	f020 0007 	bic.w	r0, r0, #7
 8010f3c:	1ac2      	subs	r2, r0, r3
 8010f3e:	bf1c      	itt	ne
 8010f40:	1a1b      	subne	r3, r3, r0
 8010f42:	50a3      	strne	r3, [r4, r2]
 8010f44:	e7af      	b.n	8010ea6 <_malloc_r+0x22>
 8010f46:	6862      	ldr	r2, [r4, #4]
 8010f48:	42a3      	cmp	r3, r4
 8010f4a:	bf0c      	ite	eq
 8010f4c:	f8c8 2000 	streq.w	r2, [r8]
 8010f50:	605a      	strne	r2, [r3, #4]
 8010f52:	e7eb      	b.n	8010f2c <_malloc_r+0xa8>
 8010f54:	4623      	mov	r3, r4
 8010f56:	6864      	ldr	r4, [r4, #4]
 8010f58:	e7ae      	b.n	8010eb8 <_malloc_r+0x34>
 8010f5a:	463c      	mov	r4, r7
 8010f5c:	687f      	ldr	r7, [r7, #4]
 8010f5e:	e7b6      	b.n	8010ece <_malloc_r+0x4a>
 8010f60:	461a      	mov	r2, r3
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	42a3      	cmp	r3, r4
 8010f66:	d1fb      	bne.n	8010f60 <_malloc_r+0xdc>
 8010f68:	2300      	movs	r3, #0
 8010f6a:	6053      	str	r3, [r2, #4]
 8010f6c:	e7de      	b.n	8010f2c <_malloc_r+0xa8>
 8010f6e:	230c      	movs	r3, #12
 8010f70:	6033      	str	r3, [r6, #0]
 8010f72:	4630      	mov	r0, r6
 8010f74:	f000 f80c 	bl	8010f90 <__malloc_unlock>
 8010f78:	e794      	b.n	8010ea4 <_malloc_r+0x20>
 8010f7a:	6005      	str	r5, [r0, #0]
 8010f7c:	e7d6      	b.n	8010f2c <_malloc_r+0xa8>
 8010f7e:	bf00      	nop
 8010f80:	24000d0c 	.word	0x24000d0c

08010f84 <__malloc_lock>:
 8010f84:	4801      	ldr	r0, [pc, #4]	@ (8010f8c <__malloc_lock+0x8>)
 8010f86:	f7ff b914 	b.w	80101b2 <__retarget_lock_acquire_recursive>
 8010f8a:	bf00      	nop
 8010f8c:	24000d04 	.word	0x24000d04

08010f90 <__malloc_unlock>:
 8010f90:	4801      	ldr	r0, [pc, #4]	@ (8010f98 <__malloc_unlock+0x8>)
 8010f92:	f7ff b90f 	b.w	80101b4 <__retarget_lock_release_recursive>
 8010f96:	bf00      	nop
 8010f98:	24000d04 	.word	0x24000d04

08010f9c <_Balloc>:
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	69c6      	ldr	r6, [r0, #28]
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	b976      	cbnz	r6, 8010fc4 <_Balloc+0x28>
 8010fa6:	2010      	movs	r0, #16
 8010fa8:	f7ff ff42 	bl	8010e30 <malloc>
 8010fac:	4602      	mov	r2, r0
 8010fae:	61e0      	str	r0, [r4, #28]
 8010fb0:	b920      	cbnz	r0, 8010fbc <_Balloc+0x20>
 8010fb2:	4b18      	ldr	r3, [pc, #96]	@ (8011014 <_Balloc+0x78>)
 8010fb4:	4818      	ldr	r0, [pc, #96]	@ (8011018 <_Balloc+0x7c>)
 8010fb6:	216b      	movs	r1, #107	@ 0x6b
 8010fb8:	f001 fef2 	bl	8012da0 <__assert_func>
 8010fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fc0:	6006      	str	r6, [r0, #0]
 8010fc2:	60c6      	str	r6, [r0, #12]
 8010fc4:	69e6      	ldr	r6, [r4, #28]
 8010fc6:	68f3      	ldr	r3, [r6, #12]
 8010fc8:	b183      	cbz	r3, 8010fec <_Balloc+0x50>
 8010fca:	69e3      	ldr	r3, [r4, #28]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fd2:	b9b8      	cbnz	r0, 8011004 <_Balloc+0x68>
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8010fda:	1d72      	adds	r2, r6, #5
 8010fdc:	0092      	lsls	r2, r2, #2
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f001 fefc 	bl	8012ddc <_calloc_r>
 8010fe4:	b160      	cbz	r0, 8011000 <_Balloc+0x64>
 8010fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fea:	e00e      	b.n	801100a <_Balloc+0x6e>
 8010fec:	2221      	movs	r2, #33	@ 0x21
 8010fee:	2104      	movs	r1, #4
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f001 fef3 	bl	8012ddc <_calloc_r>
 8010ff6:	69e3      	ldr	r3, [r4, #28]
 8010ff8:	60f0      	str	r0, [r6, #12]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1e4      	bne.n	8010fca <_Balloc+0x2e>
 8011000:	2000      	movs	r0, #0
 8011002:	bd70      	pop	{r4, r5, r6, pc}
 8011004:	6802      	ldr	r2, [r0, #0]
 8011006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801100a:	2300      	movs	r3, #0
 801100c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011010:	e7f7      	b.n	8011002 <_Balloc+0x66>
 8011012:	bf00      	nop
 8011014:	080137d2 	.word	0x080137d2
 8011018:	08013852 	.word	0x08013852

0801101c <_Bfree>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	69c6      	ldr	r6, [r0, #28]
 8011020:	4605      	mov	r5, r0
 8011022:	460c      	mov	r4, r1
 8011024:	b976      	cbnz	r6, 8011044 <_Bfree+0x28>
 8011026:	2010      	movs	r0, #16
 8011028:	f7ff ff02 	bl	8010e30 <malloc>
 801102c:	4602      	mov	r2, r0
 801102e:	61e8      	str	r0, [r5, #28]
 8011030:	b920      	cbnz	r0, 801103c <_Bfree+0x20>
 8011032:	4b09      	ldr	r3, [pc, #36]	@ (8011058 <_Bfree+0x3c>)
 8011034:	4809      	ldr	r0, [pc, #36]	@ (801105c <_Bfree+0x40>)
 8011036:	218f      	movs	r1, #143	@ 0x8f
 8011038:	f001 feb2 	bl	8012da0 <__assert_func>
 801103c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011040:	6006      	str	r6, [r0, #0]
 8011042:	60c6      	str	r6, [r0, #12]
 8011044:	b13c      	cbz	r4, 8011056 <_Bfree+0x3a>
 8011046:	69eb      	ldr	r3, [r5, #28]
 8011048:	6862      	ldr	r2, [r4, #4]
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011050:	6021      	str	r1, [r4, #0]
 8011052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	080137d2 	.word	0x080137d2
 801105c:	08013852 	.word	0x08013852

08011060 <__multadd>:
 8011060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011064:	690d      	ldr	r5, [r1, #16]
 8011066:	4607      	mov	r7, r0
 8011068:	460c      	mov	r4, r1
 801106a:	461e      	mov	r6, r3
 801106c:	f101 0c14 	add.w	ip, r1, #20
 8011070:	2000      	movs	r0, #0
 8011072:	f8dc 3000 	ldr.w	r3, [ip]
 8011076:	b299      	uxth	r1, r3
 8011078:	fb02 6101 	mla	r1, r2, r1, r6
 801107c:	0c1e      	lsrs	r6, r3, #16
 801107e:	0c0b      	lsrs	r3, r1, #16
 8011080:	fb02 3306 	mla	r3, r2, r6, r3
 8011084:	b289      	uxth	r1, r1
 8011086:	3001      	adds	r0, #1
 8011088:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801108c:	4285      	cmp	r5, r0
 801108e:	f84c 1b04 	str.w	r1, [ip], #4
 8011092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011096:	dcec      	bgt.n	8011072 <__multadd+0x12>
 8011098:	b30e      	cbz	r6, 80110de <__multadd+0x7e>
 801109a:	68a3      	ldr	r3, [r4, #8]
 801109c:	42ab      	cmp	r3, r5
 801109e:	dc19      	bgt.n	80110d4 <__multadd+0x74>
 80110a0:	6861      	ldr	r1, [r4, #4]
 80110a2:	4638      	mov	r0, r7
 80110a4:	3101      	adds	r1, #1
 80110a6:	f7ff ff79 	bl	8010f9c <_Balloc>
 80110aa:	4680      	mov	r8, r0
 80110ac:	b928      	cbnz	r0, 80110ba <__multadd+0x5a>
 80110ae:	4602      	mov	r2, r0
 80110b0:	4b0c      	ldr	r3, [pc, #48]	@ (80110e4 <__multadd+0x84>)
 80110b2:	480d      	ldr	r0, [pc, #52]	@ (80110e8 <__multadd+0x88>)
 80110b4:	21ba      	movs	r1, #186	@ 0xba
 80110b6:	f001 fe73 	bl	8012da0 <__assert_func>
 80110ba:	6922      	ldr	r2, [r4, #16]
 80110bc:	3202      	adds	r2, #2
 80110be:	f104 010c 	add.w	r1, r4, #12
 80110c2:	0092      	lsls	r2, r2, #2
 80110c4:	300c      	adds	r0, #12
 80110c6:	f7ff f876 	bl	80101b6 <memcpy>
 80110ca:	4621      	mov	r1, r4
 80110cc:	4638      	mov	r0, r7
 80110ce:	f7ff ffa5 	bl	801101c <_Bfree>
 80110d2:	4644      	mov	r4, r8
 80110d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110d8:	3501      	adds	r5, #1
 80110da:	615e      	str	r6, [r3, #20]
 80110dc:	6125      	str	r5, [r4, #16]
 80110de:	4620      	mov	r0, r4
 80110e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e4:	08013841 	.word	0x08013841
 80110e8:	08013852 	.word	0x08013852

080110ec <__s2b>:
 80110ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110f0:	460c      	mov	r4, r1
 80110f2:	4615      	mov	r5, r2
 80110f4:	461f      	mov	r7, r3
 80110f6:	2209      	movs	r2, #9
 80110f8:	3308      	adds	r3, #8
 80110fa:	4606      	mov	r6, r0
 80110fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011100:	2100      	movs	r1, #0
 8011102:	2201      	movs	r2, #1
 8011104:	429a      	cmp	r2, r3
 8011106:	db09      	blt.n	801111c <__s2b+0x30>
 8011108:	4630      	mov	r0, r6
 801110a:	f7ff ff47 	bl	8010f9c <_Balloc>
 801110e:	b940      	cbnz	r0, 8011122 <__s2b+0x36>
 8011110:	4602      	mov	r2, r0
 8011112:	4b19      	ldr	r3, [pc, #100]	@ (8011178 <__s2b+0x8c>)
 8011114:	4819      	ldr	r0, [pc, #100]	@ (801117c <__s2b+0x90>)
 8011116:	21d3      	movs	r1, #211	@ 0xd3
 8011118:	f001 fe42 	bl	8012da0 <__assert_func>
 801111c:	0052      	lsls	r2, r2, #1
 801111e:	3101      	adds	r1, #1
 8011120:	e7f0      	b.n	8011104 <__s2b+0x18>
 8011122:	9b08      	ldr	r3, [sp, #32]
 8011124:	6143      	str	r3, [r0, #20]
 8011126:	2d09      	cmp	r5, #9
 8011128:	f04f 0301 	mov.w	r3, #1
 801112c:	6103      	str	r3, [r0, #16]
 801112e:	dd16      	ble.n	801115e <__s2b+0x72>
 8011130:	f104 0909 	add.w	r9, r4, #9
 8011134:	46c8      	mov	r8, r9
 8011136:	442c      	add	r4, r5
 8011138:	f818 3b01 	ldrb.w	r3, [r8], #1
 801113c:	4601      	mov	r1, r0
 801113e:	3b30      	subs	r3, #48	@ 0x30
 8011140:	220a      	movs	r2, #10
 8011142:	4630      	mov	r0, r6
 8011144:	f7ff ff8c 	bl	8011060 <__multadd>
 8011148:	45a0      	cmp	r8, r4
 801114a:	d1f5      	bne.n	8011138 <__s2b+0x4c>
 801114c:	f1a5 0408 	sub.w	r4, r5, #8
 8011150:	444c      	add	r4, r9
 8011152:	1b2d      	subs	r5, r5, r4
 8011154:	1963      	adds	r3, r4, r5
 8011156:	42bb      	cmp	r3, r7
 8011158:	db04      	blt.n	8011164 <__s2b+0x78>
 801115a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115e:	340a      	adds	r4, #10
 8011160:	2509      	movs	r5, #9
 8011162:	e7f6      	b.n	8011152 <__s2b+0x66>
 8011164:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011168:	4601      	mov	r1, r0
 801116a:	3b30      	subs	r3, #48	@ 0x30
 801116c:	220a      	movs	r2, #10
 801116e:	4630      	mov	r0, r6
 8011170:	f7ff ff76 	bl	8011060 <__multadd>
 8011174:	e7ee      	b.n	8011154 <__s2b+0x68>
 8011176:	bf00      	nop
 8011178:	08013841 	.word	0x08013841
 801117c:	08013852 	.word	0x08013852

08011180 <__hi0bits>:
 8011180:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011184:	4603      	mov	r3, r0
 8011186:	bf36      	itet	cc
 8011188:	0403      	lslcc	r3, r0, #16
 801118a:	2000      	movcs	r0, #0
 801118c:	2010      	movcc	r0, #16
 801118e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011192:	bf3c      	itt	cc
 8011194:	021b      	lslcc	r3, r3, #8
 8011196:	3008      	addcc	r0, #8
 8011198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801119c:	bf3c      	itt	cc
 801119e:	011b      	lslcc	r3, r3, #4
 80111a0:	3004      	addcc	r0, #4
 80111a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111a6:	bf3c      	itt	cc
 80111a8:	009b      	lslcc	r3, r3, #2
 80111aa:	3002      	addcc	r0, #2
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	db05      	blt.n	80111bc <__hi0bits+0x3c>
 80111b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80111b4:	f100 0001 	add.w	r0, r0, #1
 80111b8:	bf08      	it	eq
 80111ba:	2020      	moveq	r0, #32
 80111bc:	4770      	bx	lr

080111be <__lo0bits>:
 80111be:	6803      	ldr	r3, [r0, #0]
 80111c0:	4602      	mov	r2, r0
 80111c2:	f013 0007 	ands.w	r0, r3, #7
 80111c6:	d00b      	beq.n	80111e0 <__lo0bits+0x22>
 80111c8:	07d9      	lsls	r1, r3, #31
 80111ca:	d421      	bmi.n	8011210 <__lo0bits+0x52>
 80111cc:	0798      	lsls	r0, r3, #30
 80111ce:	bf49      	itett	mi
 80111d0:	085b      	lsrmi	r3, r3, #1
 80111d2:	089b      	lsrpl	r3, r3, #2
 80111d4:	2001      	movmi	r0, #1
 80111d6:	6013      	strmi	r3, [r2, #0]
 80111d8:	bf5c      	itt	pl
 80111da:	6013      	strpl	r3, [r2, #0]
 80111dc:	2002      	movpl	r0, #2
 80111de:	4770      	bx	lr
 80111e0:	b299      	uxth	r1, r3
 80111e2:	b909      	cbnz	r1, 80111e8 <__lo0bits+0x2a>
 80111e4:	0c1b      	lsrs	r3, r3, #16
 80111e6:	2010      	movs	r0, #16
 80111e8:	b2d9      	uxtb	r1, r3
 80111ea:	b909      	cbnz	r1, 80111f0 <__lo0bits+0x32>
 80111ec:	3008      	adds	r0, #8
 80111ee:	0a1b      	lsrs	r3, r3, #8
 80111f0:	0719      	lsls	r1, r3, #28
 80111f2:	bf04      	itt	eq
 80111f4:	091b      	lsreq	r3, r3, #4
 80111f6:	3004      	addeq	r0, #4
 80111f8:	0799      	lsls	r1, r3, #30
 80111fa:	bf04      	itt	eq
 80111fc:	089b      	lsreq	r3, r3, #2
 80111fe:	3002      	addeq	r0, #2
 8011200:	07d9      	lsls	r1, r3, #31
 8011202:	d403      	bmi.n	801120c <__lo0bits+0x4e>
 8011204:	085b      	lsrs	r3, r3, #1
 8011206:	f100 0001 	add.w	r0, r0, #1
 801120a:	d003      	beq.n	8011214 <__lo0bits+0x56>
 801120c:	6013      	str	r3, [r2, #0]
 801120e:	4770      	bx	lr
 8011210:	2000      	movs	r0, #0
 8011212:	4770      	bx	lr
 8011214:	2020      	movs	r0, #32
 8011216:	4770      	bx	lr

08011218 <__i2b>:
 8011218:	b510      	push	{r4, lr}
 801121a:	460c      	mov	r4, r1
 801121c:	2101      	movs	r1, #1
 801121e:	f7ff febd 	bl	8010f9c <_Balloc>
 8011222:	4602      	mov	r2, r0
 8011224:	b928      	cbnz	r0, 8011232 <__i2b+0x1a>
 8011226:	4b05      	ldr	r3, [pc, #20]	@ (801123c <__i2b+0x24>)
 8011228:	4805      	ldr	r0, [pc, #20]	@ (8011240 <__i2b+0x28>)
 801122a:	f240 1145 	movw	r1, #325	@ 0x145
 801122e:	f001 fdb7 	bl	8012da0 <__assert_func>
 8011232:	2301      	movs	r3, #1
 8011234:	6144      	str	r4, [r0, #20]
 8011236:	6103      	str	r3, [r0, #16]
 8011238:	bd10      	pop	{r4, pc}
 801123a:	bf00      	nop
 801123c:	08013841 	.word	0x08013841
 8011240:	08013852 	.word	0x08013852

08011244 <__multiply>:
 8011244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011248:	4614      	mov	r4, r2
 801124a:	690a      	ldr	r2, [r1, #16]
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	429a      	cmp	r2, r3
 8011250:	bfa8      	it	ge
 8011252:	4623      	movge	r3, r4
 8011254:	460f      	mov	r7, r1
 8011256:	bfa4      	itt	ge
 8011258:	460c      	movge	r4, r1
 801125a:	461f      	movge	r7, r3
 801125c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011260:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011264:	68a3      	ldr	r3, [r4, #8]
 8011266:	6861      	ldr	r1, [r4, #4]
 8011268:	eb0a 0609 	add.w	r6, sl, r9
 801126c:	42b3      	cmp	r3, r6
 801126e:	b085      	sub	sp, #20
 8011270:	bfb8      	it	lt
 8011272:	3101      	addlt	r1, #1
 8011274:	f7ff fe92 	bl	8010f9c <_Balloc>
 8011278:	b930      	cbnz	r0, 8011288 <__multiply+0x44>
 801127a:	4602      	mov	r2, r0
 801127c:	4b44      	ldr	r3, [pc, #272]	@ (8011390 <__multiply+0x14c>)
 801127e:	4845      	ldr	r0, [pc, #276]	@ (8011394 <__multiply+0x150>)
 8011280:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011284:	f001 fd8c 	bl	8012da0 <__assert_func>
 8011288:	f100 0514 	add.w	r5, r0, #20
 801128c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011290:	462b      	mov	r3, r5
 8011292:	2200      	movs	r2, #0
 8011294:	4543      	cmp	r3, r8
 8011296:	d321      	bcc.n	80112dc <__multiply+0x98>
 8011298:	f107 0114 	add.w	r1, r7, #20
 801129c:	f104 0214 	add.w	r2, r4, #20
 80112a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80112a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80112a8:	9302      	str	r3, [sp, #8]
 80112aa:	1b13      	subs	r3, r2, r4
 80112ac:	3b15      	subs	r3, #21
 80112ae:	f023 0303 	bic.w	r3, r3, #3
 80112b2:	3304      	adds	r3, #4
 80112b4:	f104 0715 	add.w	r7, r4, #21
 80112b8:	42ba      	cmp	r2, r7
 80112ba:	bf38      	it	cc
 80112bc:	2304      	movcc	r3, #4
 80112be:	9301      	str	r3, [sp, #4]
 80112c0:	9b02      	ldr	r3, [sp, #8]
 80112c2:	9103      	str	r1, [sp, #12]
 80112c4:	428b      	cmp	r3, r1
 80112c6:	d80c      	bhi.n	80112e2 <__multiply+0x9e>
 80112c8:	2e00      	cmp	r6, #0
 80112ca:	dd03      	ble.n	80112d4 <__multiply+0x90>
 80112cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d05b      	beq.n	801138c <__multiply+0x148>
 80112d4:	6106      	str	r6, [r0, #16]
 80112d6:	b005      	add	sp, #20
 80112d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112dc:	f843 2b04 	str.w	r2, [r3], #4
 80112e0:	e7d8      	b.n	8011294 <__multiply+0x50>
 80112e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80112e6:	f1ba 0f00 	cmp.w	sl, #0
 80112ea:	d024      	beq.n	8011336 <__multiply+0xf2>
 80112ec:	f104 0e14 	add.w	lr, r4, #20
 80112f0:	46a9      	mov	r9, r5
 80112f2:	f04f 0c00 	mov.w	ip, #0
 80112f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80112fa:	f8d9 3000 	ldr.w	r3, [r9]
 80112fe:	fa1f fb87 	uxth.w	fp, r7
 8011302:	b29b      	uxth	r3, r3
 8011304:	fb0a 330b 	mla	r3, sl, fp, r3
 8011308:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801130c:	f8d9 7000 	ldr.w	r7, [r9]
 8011310:	4463      	add	r3, ip
 8011312:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011316:	fb0a c70b 	mla	r7, sl, fp, ip
 801131a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801131e:	b29b      	uxth	r3, r3
 8011320:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011324:	4572      	cmp	r2, lr
 8011326:	f849 3b04 	str.w	r3, [r9], #4
 801132a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801132e:	d8e2      	bhi.n	80112f6 <__multiply+0xb2>
 8011330:	9b01      	ldr	r3, [sp, #4]
 8011332:	f845 c003 	str.w	ip, [r5, r3]
 8011336:	9b03      	ldr	r3, [sp, #12]
 8011338:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801133c:	3104      	adds	r1, #4
 801133e:	f1b9 0f00 	cmp.w	r9, #0
 8011342:	d021      	beq.n	8011388 <__multiply+0x144>
 8011344:	682b      	ldr	r3, [r5, #0]
 8011346:	f104 0c14 	add.w	ip, r4, #20
 801134a:	46ae      	mov	lr, r5
 801134c:	f04f 0a00 	mov.w	sl, #0
 8011350:	f8bc b000 	ldrh.w	fp, [ip]
 8011354:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011358:	fb09 770b 	mla	r7, r9, fp, r7
 801135c:	4457      	add	r7, sl
 801135e:	b29b      	uxth	r3, r3
 8011360:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011364:	f84e 3b04 	str.w	r3, [lr], #4
 8011368:	f85c 3b04 	ldr.w	r3, [ip], #4
 801136c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011370:	f8be 3000 	ldrh.w	r3, [lr]
 8011374:	fb09 330a 	mla	r3, r9, sl, r3
 8011378:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801137c:	4562      	cmp	r2, ip
 801137e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011382:	d8e5      	bhi.n	8011350 <__multiply+0x10c>
 8011384:	9f01      	ldr	r7, [sp, #4]
 8011386:	51eb      	str	r3, [r5, r7]
 8011388:	3504      	adds	r5, #4
 801138a:	e799      	b.n	80112c0 <__multiply+0x7c>
 801138c:	3e01      	subs	r6, #1
 801138e:	e79b      	b.n	80112c8 <__multiply+0x84>
 8011390:	08013841 	.word	0x08013841
 8011394:	08013852 	.word	0x08013852

08011398 <__pow5mult>:
 8011398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801139c:	4615      	mov	r5, r2
 801139e:	f012 0203 	ands.w	r2, r2, #3
 80113a2:	4607      	mov	r7, r0
 80113a4:	460e      	mov	r6, r1
 80113a6:	d007      	beq.n	80113b8 <__pow5mult+0x20>
 80113a8:	4c25      	ldr	r4, [pc, #148]	@ (8011440 <__pow5mult+0xa8>)
 80113aa:	3a01      	subs	r2, #1
 80113ac:	2300      	movs	r3, #0
 80113ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80113b2:	f7ff fe55 	bl	8011060 <__multadd>
 80113b6:	4606      	mov	r6, r0
 80113b8:	10ad      	asrs	r5, r5, #2
 80113ba:	d03d      	beq.n	8011438 <__pow5mult+0xa0>
 80113bc:	69fc      	ldr	r4, [r7, #28]
 80113be:	b97c      	cbnz	r4, 80113e0 <__pow5mult+0x48>
 80113c0:	2010      	movs	r0, #16
 80113c2:	f7ff fd35 	bl	8010e30 <malloc>
 80113c6:	4602      	mov	r2, r0
 80113c8:	61f8      	str	r0, [r7, #28]
 80113ca:	b928      	cbnz	r0, 80113d8 <__pow5mult+0x40>
 80113cc:	4b1d      	ldr	r3, [pc, #116]	@ (8011444 <__pow5mult+0xac>)
 80113ce:	481e      	ldr	r0, [pc, #120]	@ (8011448 <__pow5mult+0xb0>)
 80113d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80113d4:	f001 fce4 	bl	8012da0 <__assert_func>
 80113d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113dc:	6004      	str	r4, [r0, #0]
 80113de:	60c4      	str	r4, [r0, #12]
 80113e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80113e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113e8:	b94c      	cbnz	r4, 80113fe <__pow5mult+0x66>
 80113ea:	f240 2171 	movw	r1, #625	@ 0x271
 80113ee:	4638      	mov	r0, r7
 80113f0:	f7ff ff12 	bl	8011218 <__i2b>
 80113f4:	2300      	movs	r3, #0
 80113f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80113fa:	4604      	mov	r4, r0
 80113fc:	6003      	str	r3, [r0, #0]
 80113fe:	f04f 0900 	mov.w	r9, #0
 8011402:	07eb      	lsls	r3, r5, #31
 8011404:	d50a      	bpl.n	801141c <__pow5mult+0x84>
 8011406:	4631      	mov	r1, r6
 8011408:	4622      	mov	r2, r4
 801140a:	4638      	mov	r0, r7
 801140c:	f7ff ff1a 	bl	8011244 <__multiply>
 8011410:	4631      	mov	r1, r6
 8011412:	4680      	mov	r8, r0
 8011414:	4638      	mov	r0, r7
 8011416:	f7ff fe01 	bl	801101c <_Bfree>
 801141a:	4646      	mov	r6, r8
 801141c:	106d      	asrs	r5, r5, #1
 801141e:	d00b      	beq.n	8011438 <__pow5mult+0xa0>
 8011420:	6820      	ldr	r0, [r4, #0]
 8011422:	b938      	cbnz	r0, 8011434 <__pow5mult+0x9c>
 8011424:	4622      	mov	r2, r4
 8011426:	4621      	mov	r1, r4
 8011428:	4638      	mov	r0, r7
 801142a:	f7ff ff0b 	bl	8011244 <__multiply>
 801142e:	6020      	str	r0, [r4, #0]
 8011430:	f8c0 9000 	str.w	r9, [r0]
 8011434:	4604      	mov	r4, r0
 8011436:	e7e4      	b.n	8011402 <__pow5mult+0x6a>
 8011438:	4630      	mov	r0, r6
 801143a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801143e:	bf00      	nop
 8011440:	080138ac 	.word	0x080138ac
 8011444:	080137d2 	.word	0x080137d2
 8011448:	08013852 	.word	0x08013852

0801144c <__lshift>:
 801144c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011450:	460c      	mov	r4, r1
 8011452:	6849      	ldr	r1, [r1, #4]
 8011454:	6923      	ldr	r3, [r4, #16]
 8011456:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801145a:	68a3      	ldr	r3, [r4, #8]
 801145c:	4607      	mov	r7, r0
 801145e:	4691      	mov	r9, r2
 8011460:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011464:	f108 0601 	add.w	r6, r8, #1
 8011468:	42b3      	cmp	r3, r6
 801146a:	db0b      	blt.n	8011484 <__lshift+0x38>
 801146c:	4638      	mov	r0, r7
 801146e:	f7ff fd95 	bl	8010f9c <_Balloc>
 8011472:	4605      	mov	r5, r0
 8011474:	b948      	cbnz	r0, 801148a <__lshift+0x3e>
 8011476:	4602      	mov	r2, r0
 8011478:	4b28      	ldr	r3, [pc, #160]	@ (801151c <__lshift+0xd0>)
 801147a:	4829      	ldr	r0, [pc, #164]	@ (8011520 <__lshift+0xd4>)
 801147c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011480:	f001 fc8e 	bl	8012da0 <__assert_func>
 8011484:	3101      	adds	r1, #1
 8011486:	005b      	lsls	r3, r3, #1
 8011488:	e7ee      	b.n	8011468 <__lshift+0x1c>
 801148a:	2300      	movs	r3, #0
 801148c:	f100 0114 	add.w	r1, r0, #20
 8011490:	f100 0210 	add.w	r2, r0, #16
 8011494:	4618      	mov	r0, r3
 8011496:	4553      	cmp	r3, sl
 8011498:	db33      	blt.n	8011502 <__lshift+0xb6>
 801149a:	6920      	ldr	r0, [r4, #16]
 801149c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114a0:	f104 0314 	add.w	r3, r4, #20
 80114a4:	f019 091f 	ands.w	r9, r9, #31
 80114a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80114ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80114b0:	d02b      	beq.n	801150a <__lshift+0xbe>
 80114b2:	f1c9 0e20 	rsb	lr, r9, #32
 80114b6:	468a      	mov	sl, r1
 80114b8:	2200      	movs	r2, #0
 80114ba:	6818      	ldr	r0, [r3, #0]
 80114bc:	fa00 f009 	lsl.w	r0, r0, r9
 80114c0:	4310      	orrs	r0, r2
 80114c2:	f84a 0b04 	str.w	r0, [sl], #4
 80114c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ca:	459c      	cmp	ip, r3
 80114cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80114d0:	d8f3      	bhi.n	80114ba <__lshift+0x6e>
 80114d2:	ebac 0304 	sub.w	r3, ip, r4
 80114d6:	3b15      	subs	r3, #21
 80114d8:	f023 0303 	bic.w	r3, r3, #3
 80114dc:	3304      	adds	r3, #4
 80114de:	f104 0015 	add.w	r0, r4, #21
 80114e2:	4584      	cmp	ip, r0
 80114e4:	bf38      	it	cc
 80114e6:	2304      	movcc	r3, #4
 80114e8:	50ca      	str	r2, [r1, r3]
 80114ea:	b10a      	cbz	r2, 80114f0 <__lshift+0xa4>
 80114ec:	f108 0602 	add.w	r6, r8, #2
 80114f0:	3e01      	subs	r6, #1
 80114f2:	4638      	mov	r0, r7
 80114f4:	612e      	str	r6, [r5, #16]
 80114f6:	4621      	mov	r1, r4
 80114f8:	f7ff fd90 	bl	801101c <_Bfree>
 80114fc:	4628      	mov	r0, r5
 80114fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011502:	f842 0f04 	str.w	r0, [r2, #4]!
 8011506:	3301      	adds	r3, #1
 8011508:	e7c5      	b.n	8011496 <__lshift+0x4a>
 801150a:	3904      	subs	r1, #4
 801150c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011510:	f841 2f04 	str.w	r2, [r1, #4]!
 8011514:	459c      	cmp	ip, r3
 8011516:	d8f9      	bhi.n	801150c <__lshift+0xc0>
 8011518:	e7ea      	b.n	80114f0 <__lshift+0xa4>
 801151a:	bf00      	nop
 801151c:	08013841 	.word	0x08013841
 8011520:	08013852 	.word	0x08013852

08011524 <__mcmp>:
 8011524:	690a      	ldr	r2, [r1, #16]
 8011526:	4603      	mov	r3, r0
 8011528:	6900      	ldr	r0, [r0, #16]
 801152a:	1a80      	subs	r0, r0, r2
 801152c:	b530      	push	{r4, r5, lr}
 801152e:	d10e      	bne.n	801154e <__mcmp+0x2a>
 8011530:	3314      	adds	r3, #20
 8011532:	3114      	adds	r1, #20
 8011534:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011538:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801153c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011540:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011544:	4295      	cmp	r5, r2
 8011546:	d003      	beq.n	8011550 <__mcmp+0x2c>
 8011548:	d205      	bcs.n	8011556 <__mcmp+0x32>
 801154a:	f04f 30ff 	mov.w	r0, #4294967295
 801154e:	bd30      	pop	{r4, r5, pc}
 8011550:	42a3      	cmp	r3, r4
 8011552:	d3f3      	bcc.n	801153c <__mcmp+0x18>
 8011554:	e7fb      	b.n	801154e <__mcmp+0x2a>
 8011556:	2001      	movs	r0, #1
 8011558:	e7f9      	b.n	801154e <__mcmp+0x2a>
	...

0801155c <__mdiff>:
 801155c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011560:	4689      	mov	r9, r1
 8011562:	4606      	mov	r6, r0
 8011564:	4611      	mov	r1, r2
 8011566:	4648      	mov	r0, r9
 8011568:	4614      	mov	r4, r2
 801156a:	f7ff ffdb 	bl	8011524 <__mcmp>
 801156e:	1e05      	subs	r5, r0, #0
 8011570:	d112      	bne.n	8011598 <__mdiff+0x3c>
 8011572:	4629      	mov	r1, r5
 8011574:	4630      	mov	r0, r6
 8011576:	f7ff fd11 	bl	8010f9c <_Balloc>
 801157a:	4602      	mov	r2, r0
 801157c:	b928      	cbnz	r0, 801158a <__mdiff+0x2e>
 801157e:	4b3f      	ldr	r3, [pc, #252]	@ (801167c <__mdiff+0x120>)
 8011580:	f240 2137 	movw	r1, #567	@ 0x237
 8011584:	483e      	ldr	r0, [pc, #248]	@ (8011680 <__mdiff+0x124>)
 8011586:	f001 fc0b 	bl	8012da0 <__assert_func>
 801158a:	2301      	movs	r3, #1
 801158c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011590:	4610      	mov	r0, r2
 8011592:	b003      	add	sp, #12
 8011594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011598:	bfbc      	itt	lt
 801159a:	464b      	movlt	r3, r9
 801159c:	46a1      	movlt	r9, r4
 801159e:	4630      	mov	r0, r6
 80115a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80115a4:	bfba      	itte	lt
 80115a6:	461c      	movlt	r4, r3
 80115a8:	2501      	movlt	r5, #1
 80115aa:	2500      	movge	r5, #0
 80115ac:	f7ff fcf6 	bl	8010f9c <_Balloc>
 80115b0:	4602      	mov	r2, r0
 80115b2:	b918      	cbnz	r0, 80115bc <__mdiff+0x60>
 80115b4:	4b31      	ldr	r3, [pc, #196]	@ (801167c <__mdiff+0x120>)
 80115b6:	f240 2145 	movw	r1, #581	@ 0x245
 80115ba:	e7e3      	b.n	8011584 <__mdiff+0x28>
 80115bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80115c0:	6926      	ldr	r6, [r4, #16]
 80115c2:	60c5      	str	r5, [r0, #12]
 80115c4:	f109 0310 	add.w	r3, r9, #16
 80115c8:	f109 0514 	add.w	r5, r9, #20
 80115cc:	f104 0e14 	add.w	lr, r4, #20
 80115d0:	f100 0b14 	add.w	fp, r0, #20
 80115d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80115d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80115dc:	9301      	str	r3, [sp, #4]
 80115de:	46d9      	mov	r9, fp
 80115e0:	f04f 0c00 	mov.w	ip, #0
 80115e4:	9b01      	ldr	r3, [sp, #4]
 80115e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80115ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80115ee:	9301      	str	r3, [sp, #4]
 80115f0:	fa1f f38a 	uxth.w	r3, sl
 80115f4:	4619      	mov	r1, r3
 80115f6:	b283      	uxth	r3, r0
 80115f8:	1acb      	subs	r3, r1, r3
 80115fa:	0c00      	lsrs	r0, r0, #16
 80115fc:	4463      	add	r3, ip
 80115fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011602:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011606:	b29b      	uxth	r3, r3
 8011608:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801160c:	4576      	cmp	r6, lr
 801160e:	f849 3b04 	str.w	r3, [r9], #4
 8011612:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011616:	d8e5      	bhi.n	80115e4 <__mdiff+0x88>
 8011618:	1b33      	subs	r3, r6, r4
 801161a:	3b15      	subs	r3, #21
 801161c:	f023 0303 	bic.w	r3, r3, #3
 8011620:	3415      	adds	r4, #21
 8011622:	3304      	adds	r3, #4
 8011624:	42a6      	cmp	r6, r4
 8011626:	bf38      	it	cc
 8011628:	2304      	movcc	r3, #4
 801162a:	441d      	add	r5, r3
 801162c:	445b      	add	r3, fp
 801162e:	461e      	mov	r6, r3
 8011630:	462c      	mov	r4, r5
 8011632:	4544      	cmp	r4, r8
 8011634:	d30e      	bcc.n	8011654 <__mdiff+0xf8>
 8011636:	f108 0103 	add.w	r1, r8, #3
 801163a:	1b49      	subs	r1, r1, r5
 801163c:	f021 0103 	bic.w	r1, r1, #3
 8011640:	3d03      	subs	r5, #3
 8011642:	45a8      	cmp	r8, r5
 8011644:	bf38      	it	cc
 8011646:	2100      	movcc	r1, #0
 8011648:	440b      	add	r3, r1
 801164a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801164e:	b191      	cbz	r1, 8011676 <__mdiff+0x11a>
 8011650:	6117      	str	r7, [r2, #16]
 8011652:	e79d      	b.n	8011590 <__mdiff+0x34>
 8011654:	f854 1b04 	ldr.w	r1, [r4], #4
 8011658:	46e6      	mov	lr, ip
 801165a:	0c08      	lsrs	r0, r1, #16
 801165c:	fa1c fc81 	uxtah	ip, ip, r1
 8011660:	4471      	add	r1, lr
 8011662:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011666:	b289      	uxth	r1, r1
 8011668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801166c:	f846 1b04 	str.w	r1, [r6], #4
 8011670:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011674:	e7dd      	b.n	8011632 <__mdiff+0xd6>
 8011676:	3f01      	subs	r7, #1
 8011678:	e7e7      	b.n	801164a <__mdiff+0xee>
 801167a:	bf00      	nop
 801167c:	08013841 	.word	0x08013841
 8011680:	08013852 	.word	0x08013852

08011684 <__ulp>:
 8011684:	b082      	sub	sp, #8
 8011686:	ed8d 0b00 	vstr	d0, [sp]
 801168a:	9a01      	ldr	r2, [sp, #4]
 801168c:	4b0f      	ldr	r3, [pc, #60]	@ (80116cc <__ulp+0x48>)
 801168e:	4013      	ands	r3, r2
 8011690:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011694:	2b00      	cmp	r3, #0
 8011696:	dc08      	bgt.n	80116aa <__ulp+0x26>
 8011698:	425b      	negs	r3, r3
 801169a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801169e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80116a2:	da04      	bge.n	80116ae <__ulp+0x2a>
 80116a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80116a8:	4113      	asrs	r3, r2
 80116aa:	2200      	movs	r2, #0
 80116ac:	e008      	b.n	80116c0 <__ulp+0x3c>
 80116ae:	f1a2 0314 	sub.w	r3, r2, #20
 80116b2:	2b1e      	cmp	r3, #30
 80116b4:	bfda      	itte	le
 80116b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80116ba:	40da      	lsrle	r2, r3
 80116bc:	2201      	movgt	r2, #1
 80116be:	2300      	movs	r3, #0
 80116c0:	4619      	mov	r1, r3
 80116c2:	4610      	mov	r0, r2
 80116c4:	ec41 0b10 	vmov	d0, r0, r1
 80116c8:	b002      	add	sp, #8
 80116ca:	4770      	bx	lr
 80116cc:	7ff00000 	.word	0x7ff00000

080116d0 <__b2d>:
 80116d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d4:	6906      	ldr	r6, [r0, #16]
 80116d6:	f100 0814 	add.w	r8, r0, #20
 80116da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80116de:	1f37      	subs	r7, r6, #4
 80116e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80116e4:	4610      	mov	r0, r2
 80116e6:	f7ff fd4b 	bl	8011180 <__hi0bits>
 80116ea:	f1c0 0320 	rsb	r3, r0, #32
 80116ee:	280a      	cmp	r0, #10
 80116f0:	600b      	str	r3, [r1, #0]
 80116f2:	491b      	ldr	r1, [pc, #108]	@ (8011760 <__b2d+0x90>)
 80116f4:	dc15      	bgt.n	8011722 <__b2d+0x52>
 80116f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80116fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80116fe:	45b8      	cmp	r8, r7
 8011700:	ea43 0501 	orr.w	r5, r3, r1
 8011704:	bf34      	ite	cc
 8011706:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801170a:	2300      	movcs	r3, #0
 801170c:	3015      	adds	r0, #21
 801170e:	fa02 f000 	lsl.w	r0, r2, r0
 8011712:	fa23 f30c 	lsr.w	r3, r3, ip
 8011716:	4303      	orrs	r3, r0
 8011718:	461c      	mov	r4, r3
 801171a:	ec45 4b10 	vmov	d0, r4, r5
 801171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011722:	45b8      	cmp	r8, r7
 8011724:	bf3a      	itte	cc
 8011726:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801172a:	f1a6 0708 	subcc.w	r7, r6, #8
 801172e:	2300      	movcs	r3, #0
 8011730:	380b      	subs	r0, #11
 8011732:	d012      	beq.n	801175a <__b2d+0x8a>
 8011734:	f1c0 0120 	rsb	r1, r0, #32
 8011738:	fa23 f401 	lsr.w	r4, r3, r1
 801173c:	4082      	lsls	r2, r0
 801173e:	4322      	orrs	r2, r4
 8011740:	4547      	cmp	r7, r8
 8011742:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011746:	bf8c      	ite	hi
 8011748:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801174c:	2200      	movls	r2, #0
 801174e:	4083      	lsls	r3, r0
 8011750:	40ca      	lsrs	r2, r1
 8011752:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011756:	4313      	orrs	r3, r2
 8011758:	e7de      	b.n	8011718 <__b2d+0x48>
 801175a:	ea42 0501 	orr.w	r5, r2, r1
 801175e:	e7db      	b.n	8011718 <__b2d+0x48>
 8011760:	3ff00000 	.word	0x3ff00000

08011764 <__d2b>:
 8011764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011768:	460f      	mov	r7, r1
 801176a:	2101      	movs	r1, #1
 801176c:	ec59 8b10 	vmov	r8, r9, d0
 8011770:	4616      	mov	r6, r2
 8011772:	f7ff fc13 	bl	8010f9c <_Balloc>
 8011776:	4604      	mov	r4, r0
 8011778:	b930      	cbnz	r0, 8011788 <__d2b+0x24>
 801177a:	4602      	mov	r2, r0
 801177c:	4b23      	ldr	r3, [pc, #140]	@ (801180c <__d2b+0xa8>)
 801177e:	4824      	ldr	r0, [pc, #144]	@ (8011810 <__d2b+0xac>)
 8011780:	f240 310f 	movw	r1, #783	@ 0x30f
 8011784:	f001 fb0c 	bl	8012da0 <__assert_func>
 8011788:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801178c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011790:	b10d      	cbz	r5, 8011796 <__d2b+0x32>
 8011792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011796:	9301      	str	r3, [sp, #4]
 8011798:	f1b8 0300 	subs.w	r3, r8, #0
 801179c:	d023      	beq.n	80117e6 <__d2b+0x82>
 801179e:	4668      	mov	r0, sp
 80117a0:	9300      	str	r3, [sp, #0]
 80117a2:	f7ff fd0c 	bl	80111be <__lo0bits>
 80117a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80117aa:	b1d0      	cbz	r0, 80117e2 <__d2b+0x7e>
 80117ac:	f1c0 0320 	rsb	r3, r0, #32
 80117b0:	fa02 f303 	lsl.w	r3, r2, r3
 80117b4:	430b      	orrs	r3, r1
 80117b6:	40c2      	lsrs	r2, r0
 80117b8:	6163      	str	r3, [r4, #20]
 80117ba:	9201      	str	r2, [sp, #4]
 80117bc:	9b01      	ldr	r3, [sp, #4]
 80117be:	61a3      	str	r3, [r4, #24]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	bf0c      	ite	eq
 80117c4:	2201      	moveq	r2, #1
 80117c6:	2202      	movne	r2, #2
 80117c8:	6122      	str	r2, [r4, #16]
 80117ca:	b1a5      	cbz	r5, 80117f6 <__d2b+0x92>
 80117cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80117d0:	4405      	add	r5, r0
 80117d2:	603d      	str	r5, [r7, #0]
 80117d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80117d8:	6030      	str	r0, [r6, #0]
 80117da:	4620      	mov	r0, r4
 80117dc:	b003      	add	sp, #12
 80117de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117e2:	6161      	str	r1, [r4, #20]
 80117e4:	e7ea      	b.n	80117bc <__d2b+0x58>
 80117e6:	a801      	add	r0, sp, #4
 80117e8:	f7ff fce9 	bl	80111be <__lo0bits>
 80117ec:	9b01      	ldr	r3, [sp, #4]
 80117ee:	6163      	str	r3, [r4, #20]
 80117f0:	3020      	adds	r0, #32
 80117f2:	2201      	movs	r2, #1
 80117f4:	e7e8      	b.n	80117c8 <__d2b+0x64>
 80117f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80117fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80117fe:	6038      	str	r0, [r7, #0]
 8011800:	6918      	ldr	r0, [r3, #16]
 8011802:	f7ff fcbd 	bl	8011180 <__hi0bits>
 8011806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801180a:	e7e5      	b.n	80117d8 <__d2b+0x74>
 801180c:	08013841 	.word	0x08013841
 8011810:	08013852 	.word	0x08013852

08011814 <__ratio>:
 8011814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011818:	4688      	mov	r8, r1
 801181a:	4669      	mov	r1, sp
 801181c:	4681      	mov	r9, r0
 801181e:	f7ff ff57 	bl	80116d0 <__b2d>
 8011822:	a901      	add	r1, sp, #4
 8011824:	4640      	mov	r0, r8
 8011826:	ec55 4b10 	vmov	r4, r5, d0
 801182a:	f7ff ff51 	bl	80116d0 <__b2d>
 801182e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011832:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011836:	1ad2      	subs	r2, r2, r3
 8011838:	e9dd 3100 	ldrd	r3, r1, [sp]
 801183c:	1a5b      	subs	r3, r3, r1
 801183e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011842:	ec57 6b10 	vmov	r6, r7, d0
 8011846:	2b00      	cmp	r3, #0
 8011848:	bfd6      	itet	le
 801184a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801184e:	462a      	movgt	r2, r5
 8011850:	463a      	movle	r2, r7
 8011852:	46ab      	mov	fp, r5
 8011854:	46a2      	mov	sl, r4
 8011856:	bfce      	itee	gt
 8011858:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801185c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011860:	ee00 3a90 	vmovle	s1, r3
 8011864:	ec4b ab17 	vmov	d7, sl, fp
 8011868:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801186c:	b003      	add	sp, #12
 801186e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011872 <__copybits>:
 8011872:	3901      	subs	r1, #1
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	1149      	asrs	r1, r1, #5
 8011878:	6914      	ldr	r4, [r2, #16]
 801187a:	3101      	adds	r1, #1
 801187c:	f102 0314 	add.w	r3, r2, #20
 8011880:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011884:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011888:	1f05      	subs	r5, r0, #4
 801188a:	42a3      	cmp	r3, r4
 801188c:	d30c      	bcc.n	80118a8 <__copybits+0x36>
 801188e:	1aa3      	subs	r3, r4, r2
 8011890:	3b11      	subs	r3, #17
 8011892:	f023 0303 	bic.w	r3, r3, #3
 8011896:	3211      	adds	r2, #17
 8011898:	42a2      	cmp	r2, r4
 801189a:	bf88      	it	hi
 801189c:	2300      	movhi	r3, #0
 801189e:	4418      	add	r0, r3
 80118a0:	2300      	movs	r3, #0
 80118a2:	4288      	cmp	r0, r1
 80118a4:	d305      	bcc.n	80118b2 <__copybits+0x40>
 80118a6:	bd70      	pop	{r4, r5, r6, pc}
 80118a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80118ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80118b0:	e7eb      	b.n	801188a <__copybits+0x18>
 80118b2:	f840 3b04 	str.w	r3, [r0], #4
 80118b6:	e7f4      	b.n	80118a2 <__copybits+0x30>

080118b8 <__any_on>:
 80118b8:	f100 0214 	add.w	r2, r0, #20
 80118bc:	6900      	ldr	r0, [r0, #16]
 80118be:	114b      	asrs	r3, r1, #5
 80118c0:	4298      	cmp	r0, r3
 80118c2:	b510      	push	{r4, lr}
 80118c4:	db11      	blt.n	80118ea <__any_on+0x32>
 80118c6:	dd0a      	ble.n	80118de <__any_on+0x26>
 80118c8:	f011 011f 	ands.w	r1, r1, #31
 80118cc:	d007      	beq.n	80118de <__any_on+0x26>
 80118ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80118d2:	fa24 f001 	lsr.w	r0, r4, r1
 80118d6:	fa00 f101 	lsl.w	r1, r0, r1
 80118da:	428c      	cmp	r4, r1
 80118dc:	d10b      	bne.n	80118f6 <__any_on+0x3e>
 80118de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d803      	bhi.n	80118ee <__any_on+0x36>
 80118e6:	2000      	movs	r0, #0
 80118e8:	bd10      	pop	{r4, pc}
 80118ea:	4603      	mov	r3, r0
 80118ec:	e7f7      	b.n	80118de <__any_on+0x26>
 80118ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118f2:	2900      	cmp	r1, #0
 80118f4:	d0f5      	beq.n	80118e2 <__any_on+0x2a>
 80118f6:	2001      	movs	r0, #1
 80118f8:	e7f6      	b.n	80118e8 <__any_on+0x30>

080118fa <sulp>:
 80118fa:	b570      	push	{r4, r5, r6, lr}
 80118fc:	4604      	mov	r4, r0
 80118fe:	460d      	mov	r5, r1
 8011900:	4616      	mov	r6, r2
 8011902:	ec45 4b10 	vmov	d0, r4, r5
 8011906:	f7ff febd 	bl	8011684 <__ulp>
 801190a:	b17e      	cbz	r6, 801192c <sulp+0x32>
 801190c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011910:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011914:	2b00      	cmp	r3, #0
 8011916:	dd09      	ble.n	801192c <sulp+0x32>
 8011918:	051b      	lsls	r3, r3, #20
 801191a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801191e:	2000      	movs	r0, #0
 8011920:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8011924:	ec41 0b17 	vmov	d7, r0, r1
 8011928:	ee20 0b07 	vmul.f64	d0, d0, d7
 801192c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011930 <_strtod_l>:
 8011930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011934:	ed2d 8b0a 	vpush	{d8-d12}
 8011938:	b097      	sub	sp, #92	@ 0x5c
 801193a:	4688      	mov	r8, r1
 801193c:	920e      	str	r2, [sp, #56]	@ 0x38
 801193e:	2200      	movs	r2, #0
 8011940:	9212      	str	r2, [sp, #72]	@ 0x48
 8011942:	9005      	str	r0, [sp, #20]
 8011944:	f04f 0a00 	mov.w	sl, #0
 8011948:	f04f 0b00 	mov.w	fp, #0
 801194c:	460a      	mov	r2, r1
 801194e:	9211      	str	r2, [sp, #68]	@ 0x44
 8011950:	7811      	ldrb	r1, [r2, #0]
 8011952:	292b      	cmp	r1, #43	@ 0x2b
 8011954:	d04c      	beq.n	80119f0 <_strtod_l+0xc0>
 8011956:	d839      	bhi.n	80119cc <_strtod_l+0x9c>
 8011958:	290d      	cmp	r1, #13
 801195a:	d833      	bhi.n	80119c4 <_strtod_l+0x94>
 801195c:	2908      	cmp	r1, #8
 801195e:	d833      	bhi.n	80119c8 <_strtod_l+0x98>
 8011960:	2900      	cmp	r1, #0
 8011962:	d03c      	beq.n	80119de <_strtod_l+0xae>
 8011964:	2200      	movs	r2, #0
 8011966:	9208      	str	r2, [sp, #32]
 8011968:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801196a:	782a      	ldrb	r2, [r5, #0]
 801196c:	2a30      	cmp	r2, #48	@ 0x30
 801196e:	f040 80b5 	bne.w	8011adc <_strtod_l+0x1ac>
 8011972:	786a      	ldrb	r2, [r5, #1]
 8011974:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011978:	2a58      	cmp	r2, #88	@ 0x58
 801197a:	d170      	bne.n	8011a5e <_strtod_l+0x12e>
 801197c:	9302      	str	r3, [sp, #8]
 801197e:	9b08      	ldr	r3, [sp, #32]
 8011980:	9301      	str	r3, [sp, #4]
 8011982:	ab12      	add	r3, sp, #72	@ 0x48
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	4a8b      	ldr	r2, [pc, #556]	@ (8011bb4 <_strtod_l+0x284>)
 8011988:	9805      	ldr	r0, [sp, #20]
 801198a:	ab13      	add	r3, sp, #76	@ 0x4c
 801198c:	a911      	add	r1, sp, #68	@ 0x44
 801198e:	f001 faa1 	bl	8012ed4 <__gethex>
 8011992:	f010 060f 	ands.w	r6, r0, #15
 8011996:	4604      	mov	r4, r0
 8011998:	d005      	beq.n	80119a6 <_strtod_l+0x76>
 801199a:	2e06      	cmp	r6, #6
 801199c:	d12a      	bne.n	80119f4 <_strtod_l+0xc4>
 801199e:	3501      	adds	r5, #1
 80119a0:	2300      	movs	r3, #0
 80119a2:	9511      	str	r5, [sp, #68]	@ 0x44
 80119a4:	9308      	str	r3, [sp, #32]
 80119a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f040 852f 	bne.w	801240c <_strtod_l+0xadc>
 80119ae:	9b08      	ldr	r3, [sp, #32]
 80119b0:	ec4b ab10 	vmov	d0, sl, fp
 80119b4:	b1cb      	cbz	r3, 80119ea <_strtod_l+0xba>
 80119b6:	eeb1 0b40 	vneg.f64	d0, d0
 80119ba:	b017      	add	sp, #92	@ 0x5c
 80119bc:	ecbd 8b0a 	vpop	{d8-d12}
 80119c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c4:	2920      	cmp	r1, #32
 80119c6:	d1cd      	bne.n	8011964 <_strtod_l+0x34>
 80119c8:	3201      	adds	r2, #1
 80119ca:	e7c0      	b.n	801194e <_strtod_l+0x1e>
 80119cc:	292d      	cmp	r1, #45	@ 0x2d
 80119ce:	d1c9      	bne.n	8011964 <_strtod_l+0x34>
 80119d0:	2101      	movs	r1, #1
 80119d2:	9108      	str	r1, [sp, #32]
 80119d4:	1c51      	adds	r1, r2, #1
 80119d6:	9111      	str	r1, [sp, #68]	@ 0x44
 80119d8:	7852      	ldrb	r2, [r2, #1]
 80119da:	2a00      	cmp	r2, #0
 80119dc:	d1c4      	bne.n	8011968 <_strtod_l+0x38>
 80119de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119e0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f040 850f 	bne.w	8012408 <_strtod_l+0xad8>
 80119ea:	ec4b ab10 	vmov	d0, sl, fp
 80119ee:	e7e4      	b.n	80119ba <_strtod_l+0x8a>
 80119f0:	2100      	movs	r1, #0
 80119f2:	e7ee      	b.n	80119d2 <_strtod_l+0xa2>
 80119f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80119f6:	b13a      	cbz	r2, 8011a08 <_strtod_l+0xd8>
 80119f8:	2135      	movs	r1, #53	@ 0x35
 80119fa:	a814      	add	r0, sp, #80	@ 0x50
 80119fc:	f7ff ff39 	bl	8011872 <__copybits>
 8011a00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011a02:	9805      	ldr	r0, [sp, #20]
 8011a04:	f7ff fb0a 	bl	801101c <_Bfree>
 8011a08:	1e73      	subs	r3, r6, #1
 8011a0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011a0c:	2b04      	cmp	r3, #4
 8011a0e:	d806      	bhi.n	8011a1e <_strtod_l+0xee>
 8011a10:	e8df f003 	tbb	[pc, r3]
 8011a14:	201d0314 	.word	0x201d0314
 8011a18:	14          	.byte	0x14
 8011a19:	00          	.byte	0x00
 8011a1a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8011a1e:	05e3      	lsls	r3, r4, #23
 8011a20:	bf48      	it	mi
 8011a22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011a26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a2a:	0d1b      	lsrs	r3, r3, #20
 8011a2c:	051b      	lsls	r3, r3, #20
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1b9      	bne.n	80119a6 <_strtod_l+0x76>
 8011a32:	f7fe fb93 	bl	801015c <__errno>
 8011a36:	2322      	movs	r3, #34	@ 0x22
 8011a38:	6003      	str	r3, [r0, #0]
 8011a3a:	e7b4      	b.n	80119a6 <_strtod_l+0x76>
 8011a3c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8011a40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011a44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011a48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a4c:	e7e7      	b.n	8011a1e <_strtod_l+0xee>
 8011a4e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8011bbc <_strtod_l+0x28c>
 8011a52:	e7e4      	b.n	8011a1e <_strtod_l+0xee>
 8011a54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011a58:	f04f 3aff 	mov.w	sl, #4294967295
 8011a5c:	e7df      	b.n	8011a1e <_strtod_l+0xee>
 8011a5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011a60:	1c5a      	adds	r2, r3, #1
 8011a62:	9211      	str	r2, [sp, #68]	@ 0x44
 8011a64:	785b      	ldrb	r3, [r3, #1]
 8011a66:	2b30      	cmp	r3, #48	@ 0x30
 8011a68:	d0f9      	beq.n	8011a5e <_strtod_l+0x12e>
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d09b      	beq.n	80119a6 <_strtod_l+0x76>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	2600      	movs	r6, #0
 8011a72:	9307      	str	r3, [sp, #28]
 8011a74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a78:	46b1      	mov	r9, r6
 8011a7a:	4635      	mov	r5, r6
 8011a7c:	220a      	movs	r2, #10
 8011a7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8011a80:	7804      	ldrb	r4, [r0, #0]
 8011a82:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8011a86:	b2d9      	uxtb	r1, r3
 8011a88:	2909      	cmp	r1, #9
 8011a8a:	d929      	bls.n	8011ae0 <_strtod_l+0x1b0>
 8011a8c:	494a      	ldr	r1, [pc, #296]	@ (8011bb8 <_strtod_l+0x288>)
 8011a8e:	2201      	movs	r2, #1
 8011a90:	f001 f95a 	bl	8012d48 <strncmp>
 8011a94:	b378      	cbz	r0, 8011af6 <_strtod_l+0x1c6>
 8011a96:	2000      	movs	r0, #0
 8011a98:	4622      	mov	r2, r4
 8011a9a:	462b      	mov	r3, r5
 8011a9c:	4607      	mov	r7, r0
 8011a9e:	9006      	str	r0, [sp, #24]
 8011aa0:	2a65      	cmp	r2, #101	@ 0x65
 8011aa2:	d001      	beq.n	8011aa8 <_strtod_l+0x178>
 8011aa4:	2a45      	cmp	r2, #69	@ 0x45
 8011aa6:	d117      	bne.n	8011ad8 <_strtod_l+0x1a8>
 8011aa8:	b91b      	cbnz	r3, 8011ab2 <_strtod_l+0x182>
 8011aaa:	9b07      	ldr	r3, [sp, #28]
 8011aac:	4303      	orrs	r3, r0
 8011aae:	d096      	beq.n	80119de <_strtod_l+0xae>
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8011ab6:	f108 0201 	add.w	r2, r8, #1
 8011aba:	9211      	str	r2, [sp, #68]	@ 0x44
 8011abc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011ac0:	2a2b      	cmp	r2, #43	@ 0x2b
 8011ac2:	d06b      	beq.n	8011b9c <_strtod_l+0x26c>
 8011ac4:	2a2d      	cmp	r2, #45	@ 0x2d
 8011ac6:	d071      	beq.n	8011bac <_strtod_l+0x27c>
 8011ac8:	f04f 0e00 	mov.w	lr, #0
 8011acc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8011ad0:	2c09      	cmp	r4, #9
 8011ad2:	d979      	bls.n	8011bc8 <_strtod_l+0x298>
 8011ad4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8011ad8:	2400      	movs	r4, #0
 8011ada:	e094      	b.n	8011c06 <_strtod_l+0x2d6>
 8011adc:	2300      	movs	r3, #0
 8011ade:	e7c7      	b.n	8011a70 <_strtod_l+0x140>
 8011ae0:	2d08      	cmp	r5, #8
 8011ae2:	f100 0001 	add.w	r0, r0, #1
 8011ae6:	bfd4      	ite	le
 8011ae8:	fb02 3909 	mlale	r9, r2, r9, r3
 8011aec:	fb02 3606 	mlagt	r6, r2, r6, r3
 8011af0:	3501      	adds	r5, #1
 8011af2:	9011      	str	r0, [sp, #68]	@ 0x44
 8011af4:	e7c3      	b.n	8011a7e <_strtod_l+0x14e>
 8011af6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011af8:	1c5a      	adds	r2, r3, #1
 8011afa:	9211      	str	r2, [sp, #68]	@ 0x44
 8011afc:	785a      	ldrb	r2, [r3, #1]
 8011afe:	b375      	cbz	r5, 8011b5e <_strtod_l+0x22e>
 8011b00:	4607      	mov	r7, r0
 8011b02:	462b      	mov	r3, r5
 8011b04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011b08:	2909      	cmp	r1, #9
 8011b0a:	d913      	bls.n	8011b34 <_strtod_l+0x204>
 8011b0c:	2101      	movs	r1, #1
 8011b0e:	9106      	str	r1, [sp, #24]
 8011b10:	e7c6      	b.n	8011aa0 <_strtod_l+0x170>
 8011b12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011b14:	1c5a      	adds	r2, r3, #1
 8011b16:	9211      	str	r2, [sp, #68]	@ 0x44
 8011b18:	785a      	ldrb	r2, [r3, #1]
 8011b1a:	3001      	adds	r0, #1
 8011b1c:	2a30      	cmp	r2, #48	@ 0x30
 8011b1e:	d0f8      	beq.n	8011b12 <_strtod_l+0x1e2>
 8011b20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011b24:	2b08      	cmp	r3, #8
 8011b26:	f200 8476 	bhi.w	8012416 <_strtod_l+0xae6>
 8011b2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011b2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b2e:	4607      	mov	r7, r0
 8011b30:	2000      	movs	r0, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	3a30      	subs	r2, #48	@ 0x30
 8011b36:	f100 0101 	add.w	r1, r0, #1
 8011b3a:	d023      	beq.n	8011b84 <_strtod_l+0x254>
 8011b3c:	440f      	add	r7, r1
 8011b3e:	eb00 0c03 	add.w	ip, r0, r3
 8011b42:	4619      	mov	r1, r3
 8011b44:	240a      	movs	r4, #10
 8011b46:	4561      	cmp	r1, ip
 8011b48:	d10b      	bne.n	8011b62 <_strtod_l+0x232>
 8011b4a:	1c5c      	adds	r4, r3, #1
 8011b4c:	4403      	add	r3, r0
 8011b4e:	2b08      	cmp	r3, #8
 8011b50:	4404      	add	r4, r0
 8011b52:	dc11      	bgt.n	8011b78 <_strtod_l+0x248>
 8011b54:	230a      	movs	r3, #10
 8011b56:	fb03 2909 	mla	r9, r3, r9, r2
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	e013      	b.n	8011b86 <_strtod_l+0x256>
 8011b5e:	4628      	mov	r0, r5
 8011b60:	e7dc      	b.n	8011b1c <_strtod_l+0x1ec>
 8011b62:	2908      	cmp	r1, #8
 8011b64:	f101 0101 	add.w	r1, r1, #1
 8011b68:	dc02      	bgt.n	8011b70 <_strtod_l+0x240>
 8011b6a:	fb04 f909 	mul.w	r9, r4, r9
 8011b6e:	e7ea      	b.n	8011b46 <_strtod_l+0x216>
 8011b70:	2910      	cmp	r1, #16
 8011b72:	bfd8      	it	le
 8011b74:	4366      	mulle	r6, r4
 8011b76:	e7e6      	b.n	8011b46 <_strtod_l+0x216>
 8011b78:	2b0f      	cmp	r3, #15
 8011b7a:	dcee      	bgt.n	8011b5a <_strtod_l+0x22a>
 8011b7c:	230a      	movs	r3, #10
 8011b7e:	fb03 2606 	mla	r6, r3, r6, r2
 8011b82:	e7ea      	b.n	8011b5a <_strtod_l+0x22a>
 8011b84:	461c      	mov	r4, r3
 8011b86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011b88:	1c5a      	adds	r2, r3, #1
 8011b8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8011b8c:	785a      	ldrb	r2, [r3, #1]
 8011b8e:	4608      	mov	r0, r1
 8011b90:	4623      	mov	r3, r4
 8011b92:	e7b7      	b.n	8011b04 <_strtod_l+0x1d4>
 8011b94:	2301      	movs	r3, #1
 8011b96:	2700      	movs	r7, #0
 8011b98:	9306      	str	r3, [sp, #24]
 8011b9a:	e786      	b.n	8011aaa <_strtod_l+0x17a>
 8011b9c:	f04f 0e00 	mov.w	lr, #0
 8011ba0:	f108 0202 	add.w	r2, r8, #2
 8011ba4:	9211      	str	r2, [sp, #68]	@ 0x44
 8011ba6:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011baa:	e78f      	b.n	8011acc <_strtod_l+0x19c>
 8011bac:	f04f 0e01 	mov.w	lr, #1
 8011bb0:	e7f6      	b.n	8011ba0 <_strtod_l+0x270>
 8011bb2:	bf00      	nop
 8011bb4:	080139c0 	.word	0x080139c0
 8011bb8:	080139a8 	.word	0x080139a8
 8011bbc:	7ff00000 	.word	0x7ff00000
 8011bc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011bc2:	1c54      	adds	r4, r2, #1
 8011bc4:	9411      	str	r4, [sp, #68]	@ 0x44
 8011bc6:	7852      	ldrb	r2, [r2, #1]
 8011bc8:	2a30      	cmp	r2, #48	@ 0x30
 8011bca:	d0f9      	beq.n	8011bc0 <_strtod_l+0x290>
 8011bcc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8011bd0:	2c08      	cmp	r4, #8
 8011bd2:	d881      	bhi.n	8011ad8 <_strtod_l+0x1a8>
 8011bd4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8011bd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bdc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011bde:	1c51      	adds	r1, r2, #1
 8011be0:	9111      	str	r1, [sp, #68]	@ 0x44
 8011be2:	7852      	ldrb	r2, [r2, #1]
 8011be4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8011be8:	2c09      	cmp	r4, #9
 8011bea:	d938      	bls.n	8011c5e <_strtod_l+0x32e>
 8011bec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8011bee:	1b0c      	subs	r4, r1, r4
 8011bf0:	2c08      	cmp	r4, #8
 8011bf2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8011bf6:	dc02      	bgt.n	8011bfe <_strtod_l+0x2ce>
 8011bf8:	4564      	cmp	r4, ip
 8011bfa:	bfa8      	it	ge
 8011bfc:	4664      	movge	r4, ip
 8011bfe:	f1be 0f00 	cmp.w	lr, #0
 8011c02:	d000      	beq.n	8011c06 <_strtod_l+0x2d6>
 8011c04:	4264      	negs	r4, r4
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d14e      	bne.n	8011ca8 <_strtod_l+0x378>
 8011c0a:	9b07      	ldr	r3, [sp, #28]
 8011c0c:	4318      	orrs	r0, r3
 8011c0e:	f47f aeca 	bne.w	80119a6 <_strtod_l+0x76>
 8011c12:	9b06      	ldr	r3, [sp, #24]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f47f aee2 	bne.w	80119de <_strtod_l+0xae>
 8011c1a:	2a69      	cmp	r2, #105	@ 0x69
 8011c1c:	d027      	beq.n	8011c6e <_strtod_l+0x33e>
 8011c1e:	dc24      	bgt.n	8011c6a <_strtod_l+0x33a>
 8011c20:	2a49      	cmp	r2, #73	@ 0x49
 8011c22:	d024      	beq.n	8011c6e <_strtod_l+0x33e>
 8011c24:	2a4e      	cmp	r2, #78	@ 0x4e
 8011c26:	f47f aeda 	bne.w	80119de <_strtod_l+0xae>
 8011c2a:	4997      	ldr	r1, [pc, #604]	@ (8011e88 <_strtod_l+0x558>)
 8011c2c:	a811      	add	r0, sp, #68	@ 0x44
 8011c2e:	f001 fb73 	bl	8013318 <__match>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	f43f aed3 	beq.w	80119de <_strtod_l+0xae>
 8011c38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	2b28      	cmp	r3, #40	@ 0x28
 8011c3e:	d12d      	bne.n	8011c9c <_strtod_l+0x36c>
 8011c40:	4992      	ldr	r1, [pc, #584]	@ (8011e8c <_strtod_l+0x55c>)
 8011c42:	aa14      	add	r2, sp, #80	@ 0x50
 8011c44:	a811      	add	r0, sp, #68	@ 0x44
 8011c46:	f001 fb7b 	bl	8013340 <__hexnan>
 8011c4a:	2805      	cmp	r0, #5
 8011c4c:	d126      	bne.n	8011c9c <_strtod_l+0x36c>
 8011c4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011c50:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8011c54:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011c58:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011c5c:	e6a3      	b.n	80119a6 <_strtod_l+0x76>
 8011c5e:	240a      	movs	r4, #10
 8011c60:	fb04 2c0c 	mla	ip, r4, ip, r2
 8011c64:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8011c68:	e7b8      	b.n	8011bdc <_strtod_l+0x2ac>
 8011c6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8011c6c:	e7db      	b.n	8011c26 <_strtod_l+0x2f6>
 8011c6e:	4988      	ldr	r1, [pc, #544]	@ (8011e90 <_strtod_l+0x560>)
 8011c70:	a811      	add	r0, sp, #68	@ 0x44
 8011c72:	f001 fb51 	bl	8013318 <__match>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	f43f aeb1 	beq.w	80119de <_strtod_l+0xae>
 8011c7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011c7e:	4985      	ldr	r1, [pc, #532]	@ (8011e94 <_strtod_l+0x564>)
 8011c80:	3b01      	subs	r3, #1
 8011c82:	a811      	add	r0, sp, #68	@ 0x44
 8011c84:	9311      	str	r3, [sp, #68]	@ 0x44
 8011c86:	f001 fb47 	bl	8013318 <__match>
 8011c8a:	b910      	cbnz	r0, 8011c92 <_strtod_l+0x362>
 8011c8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011c8e:	3301      	adds	r3, #1
 8011c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8011c92:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8011ea8 <_strtod_l+0x578>
 8011c96:	f04f 0a00 	mov.w	sl, #0
 8011c9a:	e684      	b.n	80119a6 <_strtod_l+0x76>
 8011c9c:	487e      	ldr	r0, [pc, #504]	@ (8011e98 <_strtod_l+0x568>)
 8011c9e:	f001 f877 	bl	8012d90 <nan>
 8011ca2:	ec5b ab10 	vmov	sl, fp, d0
 8011ca6:	e67e      	b.n	80119a6 <_strtod_l+0x76>
 8011ca8:	ee07 9a90 	vmov	s15, r9
 8011cac:	1be2      	subs	r2, r4, r7
 8011cae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011cb2:	2d00      	cmp	r5, #0
 8011cb4:	bf08      	it	eq
 8011cb6:	461d      	moveq	r5, r3
 8011cb8:	2b10      	cmp	r3, #16
 8011cba:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	bfa8      	it	ge
 8011cc0:	2210      	movge	r2, #16
 8011cc2:	2b09      	cmp	r3, #9
 8011cc4:	ec5b ab17 	vmov	sl, fp, d7
 8011cc8:	dc15      	bgt.n	8011cf6 <_strtod_l+0x3c6>
 8011cca:	1be1      	subs	r1, r4, r7
 8011ccc:	2900      	cmp	r1, #0
 8011cce:	f43f ae6a 	beq.w	80119a6 <_strtod_l+0x76>
 8011cd2:	eba4 0107 	sub.w	r1, r4, r7
 8011cd6:	dd72      	ble.n	8011dbe <_strtod_l+0x48e>
 8011cd8:	2916      	cmp	r1, #22
 8011cda:	dc59      	bgt.n	8011d90 <_strtod_l+0x460>
 8011cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8011e9c <_strtod_l+0x56c>)
 8011cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ce4:	ed93 7b00 	vldr	d7, [r3]
 8011ce8:	ec4b ab16 	vmov	d6, sl, fp
 8011cec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011cf0:	ec5b ab17 	vmov	sl, fp, d7
 8011cf4:	e657      	b.n	80119a6 <_strtod_l+0x76>
 8011cf6:	4969      	ldr	r1, [pc, #420]	@ (8011e9c <_strtod_l+0x56c>)
 8011cf8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011cfc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8011d00:	ee06 6a90 	vmov	s13, r6
 8011d04:	2b0f      	cmp	r3, #15
 8011d06:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8011d0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011d0e:	ec5b ab16 	vmov	sl, fp, d6
 8011d12:	ddda      	ble.n	8011cca <_strtod_l+0x39a>
 8011d14:	1a9a      	subs	r2, r3, r2
 8011d16:	1be1      	subs	r1, r4, r7
 8011d18:	440a      	add	r2, r1
 8011d1a:	2a00      	cmp	r2, #0
 8011d1c:	f340 8094 	ble.w	8011e48 <_strtod_l+0x518>
 8011d20:	f012 000f 	ands.w	r0, r2, #15
 8011d24:	d00a      	beq.n	8011d3c <_strtod_l+0x40c>
 8011d26:	495d      	ldr	r1, [pc, #372]	@ (8011e9c <_strtod_l+0x56c>)
 8011d28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011d2c:	ed91 7b00 	vldr	d7, [r1]
 8011d30:	ec4b ab16 	vmov	d6, sl, fp
 8011d34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d38:	ec5b ab17 	vmov	sl, fp, d7
 8011d3c:	f032 020f 	bics.w	r2, r2, #15
 8011d40:	d073      	beq.n	8011e2a <_strtod_l+0x4fa>
 8011d42:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8011d46:	dd47      	ble.n	8011dd8 <_strtod_l+0x4a8>
 8011d48:	2400      	movs	r4, #0
 8011d4a:	4625      	mov	r5, r4
 8011d4c:	9407      	str	r4, [sp, #28]
 8011d4e:	4626      	mov	r6, r4
 8011d50:	9a05      	ldr	r2, [sp, #20]
 8011d52:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011ea8 <_strtod_l+0x578>
 8011d56:	2322      	movs	r3, #34	@ 0x22
 8011d58:	6013      	str	r3, [r2, #0]
 8011d5a:	f04f 0a00 	mov.w	sl, #0
 8011d5e:	9b07      	ldr	r3, [sp, #28]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f43f ae20 	beq.w	80119a6 <_strtod_l+0x76>
 8011d66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011d68:	9805      	ldr	r0, [sp, #20]
 8011d6a:	f7ff f957 	bl	801101c <_Bfree>
 8011d6e:	9805      	ldr	r0, [sp, #20]
 8011d70:	4631      	mov	r1, r6
 8011d72:	f7ff f953 	bl	801101c <_Bfree>
 8011d76:	9805      	ldr	r0, [sp, #20]
 8011d78:	4629      	mov	r1, r5
 8011d7a:	f7ff f94f 	bl	801101c <_Bfree>
 8011d7e:	9907      	ldr	r1, [sp, #28]
 8011d80:	9805      	ldr	r0, [sp, #20]
 8011d82:	f7ff f94b 	bl	801101c <_Bfree>
 8011d86:	9805      	ldr	r0, [sp, #20]
 8011d88:	4621      	mov	r1, r4
 8011d8a:	f7ff f947 	bl	801101c <_Bfree>
 8011d8e:	e60a      	b.n	80119a6 <_strtod_l+0x76>
 8011d90:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8011d94:	1be0      	subs	r0, r4, r7
 8011d96:	4281      	cmp	r1, r0
 8011d98:	dbbc      	blt.n	8011d14 <_strtod_l+0x3e4>
 8011d9a:	4a40      	ldr	r2, [pc, #256]	@ (8011e9c <_strtod_l+0x56c>)
 8011d9c:	f1c3 030f 	rsb	r3, r3, #15
 8011da0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011da4:	ed91 7b00 	vldr	d7, [r1]
 8011da8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011daa:	ec4b ab16 	vmov	d6, sl, fp
 8011dae:	1acb      	subs	r3, r1, r3
 8011db0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011db8:	ed92 6b00 	vldr	d6, [r2]
 8011dbc:	e796      	b.n	8011cec <_strtod_l+0x3bc>
 8011dbe:	3116      	adds	r1, #22
 8011dc0:	dba8      	blt.n	8011d14 <_strtod_l+0x3e4>
 8011dc2:	4b36      	ldr	r3, [pc, #216]	@ (8011e9c <_strtod_l+0x56c>)
 8011dc4:	1b3c      	subs	r4, r7, r4
 8011dc6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011dca:	ed94 7b00 	vldr	d7, [r4]
 8011dce:	ec4b ab16 	vmov	d6, sl, fp
 8011dd2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011dd6:	e78b      	b.n	8011cf0 <_strtod_l+0x3c0>
 8011dd8:	2000      	movs	r0, #0
 8011dda:	ec4b ab17 	vmov	d7, sl, fp
 8011dde:	4e30      	ldr	r6, [pc, #192]	@ (8011ea0 <_strtod_l+0x570>)
 8011de0:	1112      	asrs	r2, r2, #4
 8011de2:	4601      	mov	r1, r0
 8011de4:	2a01      	cmp	r2, #1
 8011de6:	dc23      	bgt.n	8011e30 <_strtod_l+0x500>
 8011de8:	b108      	cbz	r0, 8011dee <_strtod_l+0x4be>
 8011dea:	ec5b ab17 	vmov	sl, fp, d7
 8011dee:	4a2c      	ldr	r2, [pc, #176]	@ (8011ea0 <_strtod_l+0x570>)
 8011df0:	482c      	ldr	r0, [pc, #176]	@ (8011ea4 <_strtod_l+0x574>)
 8011df2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011df6:	ed92 7b00 	vldr	d7, [r2]
 8011dfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011dfe:	ec4b ab16 	vmov	d6, sl, fp
 8011e02:	4a29      	ldr	r2, [pc, #164]	@ (8011ea8 <_strtod_l+0x578>)
 8011e04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e08:	ee17 1a90 	vmov	r1, s15
 8011e0c:	400a      	ands	r2, r1
 8011e0e:	4282      	cmp	r2, r0
 8011e10:	ec5b ab17 	vmov	sl, fp, d7
 8011e14:	d898      	bhi.n	8011d48 <_strtod_l+0x418>
 8011e16:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8011e1a:	4282      	cmp	r2, r0
 8011e1c:	bf86      	itte	hi
 8011e1e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8011eac <_strtod_l+0x57c>
 8011e22:	f04f 3aff 	movhi.w	sl, #4294967295
 8011e26:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	9206      	str	r2, [sp, #24]
 8011e2e:	e076      	b.n	8011f1e <_strtod_l+0x5ee>
 8011e30:	f012 0f01 	tst.w	r2, #1
 8011e34:	d004      	beq.n	8011e40 <_strtod_l+0x510>
 8011e36:	ed96 6b00 	vldr	d6, [r6]
 8011e3a:	2001      	movs	r0, #1
 8011e3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e40:	3101      	adds	r1, #1
 8011e42:	1052      	asrs	r2, r2, #1
 8011e44:	3608      	adds	r6, #8
 8011e46:	e7cd      	b.n	8011de4 <_strtod_l+0x4b4>
 8011e48:	d0ef      	beq.n	8011e2a <_strtod_l+0x4fa>
 8011e4a:	4252      	negs	r2, r2
 8011e4c:	f012 000f 	ands.w	r0, r2, #15
 8011e50:	d00a      	beq.n	8011e68 <_strtod_l+0x538>
 8011e52:	4912      	ldr	r1, [pc, #72]	@ (8011e9c <_strtod_l+0x56c>)
 8011e54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011e58:	ed91 7b00 	vldr	d7, [r1]
 8011e5c:	ec4b ab16 	vmov	d6, sl, fp
 8011e60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011e64:	ec5b ab17 	vmov	sl, fp, d7
 8011e68:	1112      	asrs	r2, r2, #4
 8011e6a:	d0de      	beq.n	8011e2a <_strtod_l+0x4fa>
 8011e6c:	2a1f      	cmp	r2, #31
 8011e6e:	dd1f      	ble.n	8011eb0 <_strtod_l+0x580>
 8011e70:	2400      	movs	r4, #0
 8011e72:	4625      	mov	r5, r4
 8011e74:	9407      	str	r4, [sp, #28]
 8011e76:	4626      	mov	r6, r4
 8011e78:	9a05      	ldr	r2, [sp, #20]
 8011e7a:	2322      	movs	r3, #34	@ 0x22
 8011e7c:	f04f 0a00 	mov.w	sl, #0
 8011e80:	f04f 0b00 	mov.w	fp, #0
 8011e84:	6013      	str	r3, [r2, #0]
 8011e86:	e76a      	b.n	8011d5e <_strtod_l+0x42e>
 8011e88:	08013799 	.word	0x08013799
 8011e8c:	080139ac 	.word	0x080139ac
 8011e90:	08013791 	.word	0x08013791
 8011e94:	080137c8 	.word	0x080137c8
 8011e98:	08013b55 	.word	0x08013b55
 8011e9c:	080138e0 	.word	0x080138e0
 8011ea0:	080138b8 	.word	0x080138b8
 8011ea4:	7ca00000 	.word	0x7ca00000
 8011ea8:	7ff00000 	.word	0x7ff00000
 8011eac:	7fefffff 	.word	0x7fefffff
 8011eb0:	f012 0110 	ands.w	r1, r2, #16
 8011eb4:	bf18      	it	ne
 8011eb6:	216a      	movne	r1, #106	@ 0x6a
 8011eb8:	9106      	str	r1, [sp, #24]
 8011eba:	ec4b ab17 	vmov	d7, sl, fp
 8011ebe:	49b0      	ldr	r1, [pc, #704]	@ (8012180 <_strtod_l+0x850>)
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	07d6      	lsls	r6, r2, #31
 8011ec4:	d504      	bpl.n	8011ed0 <_strtod_l+0x5a0>
 8011ec6:	ed91 6b00 	vldr	d6, [r1]
 8011eca:	2001      	movs	r0, #1
 8011ecc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011ed0:	1052      	asrs	r2, r2, #1
 8011ed2:	f101 0108 	add.w	r1, r1, #8
 8011ed6:	d1f4      	bne.n	8011ec2 <_strtod_l+0x592>
 8011ed8:	b108      	cbz	r0, 8011ede <_strtod_l+0x5ae>
 8011eda:	ec5b ab17 	vmov	sl, fp, d7
 8011ede:	9a06      	ldr	r2, [sp, #24]
 8011ee0:	b1b2      	cbz	r2, 8011f10 <_strtod_l+0x5e0>
 8011ee2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8011ee6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8011eea:	2a00      	cmp	r2, #0
 8011eec:	4658      	mov	r0, fp
 8011eee:	dd0f      	ble.n	8011f10 <_strtod_l+0x5e0>
 8011ef0:	2a1f      	cmp	r2, #31
 8011ef2:	dd55      	ble.n	8011fa0 <_strtod_l+0x670>
 8011ef4:	2a34      	cmp	r2, #52	@ 0x34
 8011ef6:	bfde      	ittt	le
 8011ef8:	f04f 32ff 	movle.w	r2, #4294967295
 8011efc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8011f00:	408a      	lslle	r2, r1
 8011f02:	f04f 0a00 	mov.w	sl, #0
 8011f06:	bfcc      	ite	gt
 8011f08:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011f0c:	ea02 0b00 	andle.w	fp, r2, r0
 8011f10:	ec4b ab17 	vmov	d7, sl, fp
 8011f14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1c:	d0a8      	beq.n	8011e70 <_strtod_l+0x540>
 8011f1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011f20:	9805      	ldr	r0, [sp, #20]
 8011f22:	f8cd 9000 	str.w	r9, [sp]
 8011f26:	462a      	mov	r2, r5
 8011f28:	f7ff f8e0 	bl	80110ec <__s2b>
 8011f2c:	9007      	str	r0, [sp, #28]
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	f43f af0a 	beq.w	8011d48 <_strtod_l+0x418>
 8011f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f36:	1b3f      	subs	r7, r7, r4
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	bfb4      	ite	lt
 8011f3c:	463b      	movlt	r3, r7
 8011f3e:	2300      	movge	r3, #0
 8011f40:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f44:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8012170 <_strtod_l+0x840>
 8011f48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011f4c:	2400      	movs	r4, #0
 8011f4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011f50:	4625      	mov	r5, r4
 8011f52:	9b07      	ldr	r3, [sp, #28]
 8011f54:	9805      	ldr	r0, [sp, #20]
 8011f56:	6859      	ldr	r1, [r3, #4]
 8011f58:	f7ff f820 	bl	8010f9c <_Balloc>
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f43f aef6 	beq.w	8011d50 <_strtod_l+0x420>
 8011f64:	9b07      	ldr	r3, [sp, #28]
 8011f66:	691a      	ldr	r2, [r3, #16]
 8011f68:	ec4b ab19 	vmov	d9, sl, fp
 8011f6c:	3202      	adds	r2, #2
 8011f6e:	f103 010c 	add.w	r1, r3, #12
 8011f72:	0092      	lsls	r2, r2, #2
 8011f74:	300c      	adds	r0, #12
 8011f76:	f7fe f91e 	bl	80101b6 <memcpy>
 8011f7a:	eeb0 0b49 	vmov.f64	d0, d9
 8011f7e:	9805      	ldr	r0, [sp, #20]
 8011f80:	aa14      	add	r2, sp, #80	@ 0x50
 8011f82:	a913      	add	r1, sp, #76	@ 0x4c
 8011f84:	f7ff fbee 	bl	8011764 <__d2b>
 8011f88:	9012      	str	r0, [sp, #72]	@ 0x48
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	f43f aee0 	beq.w	8011d50 <_strtod_l+0x420>
 8011f90:	9805      	ldr	r0, [sp, #20]
 8011f92:	2101      	movs	r1, #1
 8011f94:	f7ff f940 	bl	8011218 <__i2b>
 8011f98:	4605      	mov	r5, r0
 8011f9a:	b940      	cbnz	r0, 8011fae <_strtod_l+0x67e>
 8011f9c:	2500      	movs	r5, #0
 8011f9e:	e6d7      	b.n	8011d50 <_strtod_l+0x420>
 8011fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8011fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8011fa8:	ea02 0a0a 	and.w	sl, r2, sl
 8011fac:	e7b0      	b.n	8011f10 <_strtod_l+0x5e0>
 8011fae:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8011fb0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011fb2:	2f00      	cmp	r7, #0
 8011fb4:	bfab      	itete	ge
 8011fb6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8011fb8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8011fba:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8011fbe:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8011fc2:	bfac      	ite	ge
 8011fc4:	eb07 0903 	addge.w	r9, r7, r3
 8011fc8:	eba3 0807 	sublt.w	r8, r3, r7
 8011fcc:	9b06      	ldr	r3, [sp, #24]
 8011fce:	1aff      	subs	r7, r7, r3
 8011fd0:	4417      	add	r7, r2
 8011fd2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8011fd6:	4a6b      	ldr	r2, [pc, #428]	@ (8012184 <_strtod_l+0x854>)
 8011fd8:	3f01      	subs	r7, #1
 8011fda:	4297      	cmp	r7, r2
 8011fdc:	da51      	bge.n	8012082 <_strtod_l+0x752>
 8011fde:	1bd1      	subs	r1, r2, r7
 8011fe0:	291f      	cmp	r1, #31
 8011fe2:	eba3 0301 	sub.w	r3, r3, r1
 8011fe6:	f04f 0201 	mov.w	r2, #1
 8011fea:	dc3e      	bgt.n	801206a <_strtod_l+0x73a>
 8011fec:	408a      	lsls	r2, r1
 8011fee:	920c      	str	r2, [sp, #48]	@ 0x30
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011ff4:	eb09 0703 	add.w	r7, r9, r3
 8011ff8:	4498      	add	r8, r3
 8011ffa:	9b06      	ldr	r3, [sp, #24]
 8011ffc:	45b9      	cmp	r9, r7
 8011ffe:	4498      	add	r8, r3
 8012000:	464b      	mov	r3, r9
 8012002:	bfa8      	it	ge
 8012004:	463b      	movge	r3, r7
 8012006:	4543      	cmp	r3, r8
 8012008:	bfa8      	it	ge
 801200a:	4643      	movge	r3, r8
 801200c:	2b00      	cmp	r3, #0
 801200e:	bfc2      	ittt	gt
 8012010:	1aff      	subgt	r7, r7, r3
 8012012:	eba8 0803 	subgt.w	r8, r8, r3
 8012016:	eba9 0903 	subgt.w	r9, r9, r3
 801201a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801201c:	2b00      	cmp	r3, #0
 801201e:	dd16      	ble.n	801204e <_strtod_l+0x71e>
 8012020:	4629      	mov	r1, r5
 8012022:	9805      	ldr	r0, [sp, #20]
 8012024:	461a      	mov	r2, r3
 8012026:	f7ff f9b7 	bl	8011398 <__pow5mult>
 801202a:	4605      	mov	r5, r0
 801202c:	2800      	cmp	r0, #0
 801202e:	d0b5      	beq.n	8011f9c <_strtod_l+0x66c>
 8012030:	4601      	mov	r1, r0
 8012032:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012034:	9805      	ldr	r0, [sp, #20]
 8012036:	f7ff f905 	bl	8011244 <__multiply>
 801203a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801203c:	2800      	cmp	r0, #0
 801203e:	f43f ae87 	beq.w	8011d50 <_strtod_l+0x420>
 8012042:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012044:	9805      	ldr	r0, [sp, #20]
 8012046:	f7fe ffe9 	bl	801101c <_Bfree>
 801204a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801204c:	9312      	str	r3, [sp, #72]	@ 0x48
 801204e:	2f00      	cmp	r7, #0
 8012050:	dc1b      	bgt.n	801208a <_strtod_l+0x75a>
 8012052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012054:	2b00      	cmp	r3, #0
 8012056:	dd21      	ble.n	801209c <_strtod_l+0x76c>
 8012058:	4631      	mov	r1, r6
 801205a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801205c:	9805      	ldr	r0, [sp, #20]
 801205e:	f7ff f99b 	bl	8011398 <__pow5mult>
 8012062:	4606      	mov	r6, r0
 8012064:	b9d0      	cbnz	r0, 801209c <_strtod_l+0x76c>
 8012066:	2600      	movs	r6, #0
 8012068:	e672      	b.n	8011d50 <_strtod_l+0x420>
 801206a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801206e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8012072:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8012076:	37e2      	adds	r7, #226	@ 0xe2
 8012078:	fa02 f107 	lsl.w	r1, r2, r7
 801207c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801207e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012080:	e7b8      	b.n	8011ff4 <_strtod_l+0x6c4>
 8012082:	2200      	movs	r2, #0
 8012084:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012086:	2201      	movs	r2, #1
 8012088:	e7f9      	b.n	801207e <_strtod_l+0x74e>
 801208a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801208c:	9805      	ldr	r0, [sp, #20]
 801208e:	463a      	mov	r2, r7
 8012090:	f7ff f9dc 	bl	801144c <__lshift>
 8012094:	9012      	str	r0, [sp, #72]	@ 0x48
 8012096:	2800      	cmp	r0, #0
 8012098:	d1db      	bne.n	8012052 <_strtod_l+0x722>
 801209a:	e659      	b.n	8011d50 <_strtod_l+0x420>
 801209c:	f1b8 0f00 	cmp.w	r8, #0
 80120a0:	dd07      	ble.n	80120b2 <_strtod_l+0x782>
 80120a2:	4631      	mov	r1, r6
 80120a4:	9805      	ldr	r0, [sp, #20]
 80120a6:	4642      	mov	r2, r8
 80120a8:	f7ff f9d0 	bl	801144c <__lshift>
 80120ac:	4606      	mov	r6, r0
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d0d9      	beq.n	8012066 <_strtod_l+0x736>
 80120b2:	f1b9 0f00 	cmp.w	r9, #0
 80120b6:	dd08      	ble.n	80120ca <_strtod_l+0x79a>
 80120b8:	4629      	mov	r1, r5
 80120ba:	9805      	ldr	r0, [sp, #20]
 80120bc:	464a      	mov	r2, r9
 80120be:	f7ff f9c5 	bl	801144c <__lshift>
 80120c2:	4605      	mov	r5, r0
 80120c4:	2800      	cmp	r0, #0
 80120c6:	f43f ae43 	beq.w	8011d50 <_strtod_l+0x420>
 80120ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80120cc:	9805      	ldr	r0, [sp, #20]
 80120ce:	4632      	mov	r2, r6
 80120d0:	f7ff fa44 	bl	801155c <__mdiff>
 80120d4:	4604      	mov	r4, r0
 80120d6:	2800      	cmp	r0, #0
 80120d8:	f43f ae3a 	beq.w	8011d50 <_strtod_l+0x420>
 80120dc:	2300      	movs	r3, #0
 80120de:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80120e2:	60c3      	str	r3, [r0, #12]
 80120e4:	4629      	mov	r1, r5
 80120e6:	f7ff fa1d 	bl	8011524 <__mcmp>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	da4e      	bge.n	801218c <_strtod_l+0x85c>
 80120ee:	ea58 080a 	orrs.w	r8, r8, sl
 80120f2:	d174      	bne.n	80121de <_strtod_l+0x8ae>
 80120f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d170      	bne.n	80121de <_strtod_l+0x8ae>
 80120fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012100:	0d1b      	lsrs	r3, r3, #20
 8012102:	051b      	lsls	r3, r3, #20
 8012104:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012108:	d969      	bls.n	80121de <_strtod_l+0x8ae>
 801210a:	6963      	ldr	r3, [r4, #20]
 801210c:	b913      	cbnz	r3, 8012114 <_strtod_l+0x7e4>
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	2b01      	cmp	r3, #1
 8012112:	dd64      	ble.n	80121de <_strtod_l+0x8ae>
 8012114:	4621      	mov	r1, r4
 8012116:	2201      	movs	r2, #1
 8012118:	9805      	ldr	r0, [sp, #20]
 801211a:	f7ff f997 	bl	801144c <__lshift>
 801211e:	4629      	mov	r1, r5
 8012120:	4604      	mov	r4, r0
 8012122:	f7ff f9ff 	bl	8011524 <__mcmp>
 8012126:	2800      	cmp	r0, #0
 8012128:	dd59      	ble.n	80121de <_strtod_l+0x8ae>
 801212a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801212e:	9a06      	ldr	r2, [sp, #24]
 8012130:	0d1b      	lsrs	r3, r3, #20
 8012132:	051b      	lsls	r3, r3, #20
 8012134:	2a00      	cmp	r2, #0
 8012136:	d070      	beq.n	801221a <_strtod_l+0x8ea>
 8012138:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801213c:	d86d      	bhi.n	801221a <_strtod_l+0x8ea>
 801213e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012142:	f67f ae99 	bls.w	8011e78 <_strtod_l+0x548>
 8012146:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8012178 <_strtod_l+0x848>
 801214a:	ec4b ab16 	vmov	d6, sl, fp
 801214e:	4b0e      	ldr	r3, [pc, #56]	@ (8012188 <_strtod_l+0x858>)
 8012150:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012154:	ee17 2a90 	vmov	r2, s15
 8012158:	4013      	ands	r3, r2
 801215a:	ec5b ab17 	vmov	sl, fp, d7
 801215e:	2b00      	cmp	r3, #0
 8012160:	f47f ae01 	bne.w	8011d66 <_strtod_l+0x436>
 8012164:	9a05      	ldr	r2, [sp, #20]
 8012166:	2322      	movs	r3, #34	@ 0x22
 8012168:	6013      	str	r3, [r2, #0]
 801216a:	e5fc      	b.n	8011d66 <_strtod_l+0x436>
 801216c:	f3af 8000 	nop.w
 8012170:	ffc00000 	.word	0xffc00000
 8012174:	41dfffff 	.word	0x41dfffff
 8012178:	00000000 	.word	0x00000000
 801217c:	39500000 	.word	0x39500000
 8012180:	080139d8 	.word	0x080139d8
 8012184:	fffffc02 	.word	0xfffffc02
 8012188:	7ff00000 	.word	0x7ff00000
 801218c:	46d9      	mov	r9, fp
 801218e:	d15d      	bne.n	801224c <_strtod_l+0x91c>
 8012190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012194:	f1b8 0f00 	cmp.w	r8, #0
 8012198:	d02a      	beq.n	80121f0 <_strtod_l+0x8c0>
 801219a:	4aab      	ldr	r2, [pc, #684]	@ (8012448 <_strtod_l+0xb18>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d12a      	bne.n	80121f6 <_strtod_l+0x8c6>
 80121a0:	9b06      	ldr	r3, [sp, #24]
 80121a2:	4652      	mov	r2, sl
 80121a4:	b1fb      	cbz	r3, 80121e6 <_strtod_l+0x8b6>
 80121a6:	4ba9      	ldr	r3, [pc, #676]	@ (801244c <_strtod_l+0xb1c>)
 80121a8:	ea0b 0303 	and.w	r3, fp, r3
 80121ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80121b0:	f04f 31ff 	mov.w	r1, #4294967295
 80121b4:	d81a      	bhi.n	80121ec <_strtod_l+0x8bc>
 80121b6:	0d1b      	lsrs	r3, r3, #20
 80121b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80121bc:	fa01 f303 	lsl.w	r3, r1, r3
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d118      	bne.n	80121f6 <_strtod_l+0x8c6>
 80121c4:	4ba2      	ldr	r3, [pc, #648]	@ (8012450 <_strtod_l+0xb20>)
 80121c6:	4599      	cmp	r9, r3
 80121c8:	d102      	bne.n	80121d0 <_strtod_l+0x8a0>
 80121ca:	3201      	adds	r2, #1
 80121cc:	f43f adc0 	beq.w	8011d50 <_strtod_l+0x420>
 80121d0:	4b9e      	ldr	r3, [pc, #632]	@ (801244c <_strtod_l+0xb1c>)
 80121d2:	ea09 0303 	and.w	r3, r9, r3
 80121d6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80121da:	f04f 0a00 	mov.w	sl, #0
 80121de:	9b06      	ldr	r3, [sp, #24]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d1b0      	bne.n	8012146 <_strtod_l+0x816>
 80121e4:	e5bf      	b.n	8011d66 <_strtod_l+0x436>
 80121e6:	f04f 33ff 	mov.w	r3, #4294967295
 80121ea:	e7e9      	b.n	80121c0 <_strtod_l+0x890>
 80121ec:	460b      	mov	r3, r1
 80121ee:	e7e7      	b.n	80121c0 <_strtod_l+0x890>
 80121f0:	ea53 030a 	orrs.w	r3, r3, sl
 80121f4:	d099      	beq.n	801212a <_strtod_l+0x7fa>
 80121f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121f8:	b1c3      	cbz	r3, 801222c <_strtod_l+0x8fc>
 80121fa:	ea13 0f09 	tst.w	r3, r9
 80121fe:	d0ee      	beq.n	80121de <_strtod_l+0x8ae>
 8012200:	9a06      	ldr	r2, [sp, #24]
 8012202:	4650      	mov	r0, sl
 8012204:	4659      	mov	r1, fp
 8012206:	f1b8 0f00 	cmp.w	r8, #0
 801220a:	d013      	beq.n	8012234 <_strtod_l+0x904>
 801220c:	f7ff fb75 	bl	80118fa <sulp>
 8012210:	ee39 7b00 	vadd.f64	d7, d9, d0
 8012214:	ec5b ab17 	vmov	sl, fp, d7
 8012218:	e7e1      	b.n	80121de <_strtod_l+0x8ae>
 801221a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801221e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012222:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012226:	f04f 3aff 	mov.w	sl, #4294967295
 801222a:	e7d8      	b.n	80121de <_strtod_l+0x8ae>
 801222c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801222e:	ea13 0f0a 	tst.w	r3, sl
 8012232:	e7e4      	b.n	80121fe <_strtod_l+0x8ce>
 8012234:	f7ff fb61 	bl	80118fa <sulp>
 8012238:	ee39 0b40 	vsub.f64	d0, d9, d0
 801223c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012244:	ec5b ab10 	vmov	sl, fp, d0
 8012248:	d1c9      	bne.n	80121de <_strtod_l+0x8ae>
 801224a:	e615      	b.n	8011e78 <_strtod_l+0x548>
 801224c:	4629      	mov	r1, r5
 801224e:	4620      	mov	r0, r4
 8012250:	f7ff fae0 	bl	8011814 <__ratio>
 8012254:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8012258:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012260:	d85d      	bhi.n	801231e <_strtod_l+0x9ee>
 8012262:	f1b8 0f00 	cmp.w	r8, #0
 8012266:	d164      	bne.n	8012332 <_strtod_l+0xa02>
 8012268:	f1ba 0f00 	cmp.w	sl, #0
 801226c:	d14b      	bne.n	8012306 <_strtod_l+0x9d6>
 801226e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012272:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d160      	bne.n	801233c <_strtod_l+0xa0c>
 801227a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801227e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8012282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012286:	d401      	bmi.n	801228c <_strtod_l+0x95c>
 8012288:	ee20 8b08 	vmul.f64	d8, d0, d8
 801228c:	eeb1 ab48 	vneg.f64	d10, d8
 8012290:	486e      	ldr	r0, [pc, #440]	@ (801244c <_strtod_l+0xb1c>)
 8012292:	4970      	ldr	r1, [pc, #448]	@ (8012454 <_strtod_l+0xb24>)
 8012294:	ea09 0700 	and.w	r7, r9, r0
 8012298:	428f      	cmp	r7, r1
 801229a:	ec53 2b1a 	vmov	r2, r3, d10
 801229e:	d17d      	bne.n	801239c <_strtod_l+0xa6c>
 80122a0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80122a4:	ec4b ab1c 	vmov	d12, sl, fp
 80122a8:	eeb0 0b4c 	vmov.f64	d0, d12
 80122ac:	f7ff f9ea 	bl	8011684 <__ulp>
 80122b0:	4866      	ldr	r0, [pc, #408]	@ (801244c <_strtod_l+0xb1c>)
 80122b2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80122b6:	ee1c 3a90 	vmov	r3, s25
 80122ba:	4a67      	ldr	r2, [pc, #412]	@ (8012458 <_strtod_l+0xb28>)
 80122bc:	ea03 0100 	and.w	r1, r3, r0
 80122c0:	4291      	cmp	r1, r2
 80122c2:	ec5b ab1c 	vmov	sl, fp, d12
 80122c6:	d93c      	bls.n	8012342 <_strtod_l+0xa12>
 80122c8:	ee19 2a90 	vmov	r2, s19
 80122cc:	4b60      	ldr	r3, [pc, #384]	@ (8012450 <_strtod_l+0xb20>)
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d104      	bne.n	80122dc <_strtod_l+0x9ac>
 80122d2:	ee19 3a10 	vmov	r3, s18
 80122d6:	3301      	adds	r3, #1
 80122d8:	f43f ad3a 	beq.w	8011d50 <_strtod_l+0x420>
 80122dc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8012450 <_strtod_l+0xb20>
 80122e0:	f04f 3aff 	mov.w	sl, #4294967295
 80122e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80122e6:	9805      	ldr	r0, [sp, #20]
 80122e8:	f7fe fe98 	bl	801101c <_Bfree>
 80122ec:	9805      	ldr	r0, [sp, #20]
 80122ee:	4631      	mov	r1, r6
 80122f0:	f7fe fe94 	bl	801101c <_Bfree>
 80122f4:	9805      	ldr	r0, [sp, #20]
 80122f6:	4629      	mov	r1, r5
 80122f8:	f7fe fe90 	bl	801101c <_Bfree>
 80122fc:	9805      	ldr	r0, [sp, #20]
 80122fe:	4621      	mov	r1, r4
 8012300:	f7fe fe8c 	bl	801101c <_Bfree>
 8012304:	e625      	b.n	8011f52 <_strtod_l+0x622>
 8012306:	f1ba 0f01 	cmp.w	sl, #1
 801230a:	d103      	bne.n	8012314 <_strtod_l+0x9e4>
 801230c:	f1bb 0f00 	cmp.w	fp, #0
 8012310:	f43f adb2 	beq.w	8011e78 <_strtod_l+0x548>
 8012314:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8012318:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801231c:	e7b8      	b.n	8012290 <_strtod_l+0x960>
 801231e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8012322:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012326:	f1b8 0f00 	cmp.w	r8, #0
 801232a:	d0af      	beq.n	801228c <_strtod_l+0x95c>
 801232c:	eeb0 ab48 	vmov.f64	d10, d8
 8012330:	e7ae      	b.n	8012290 <_strtod_l+0x960>
 8012332:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8012336:	eeb0 8b4a 	vmov.f64	d8, d10
 801233a:	e7a9      	b.n	8012290 <_strtod_l+0x960>
 801233c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8012340:	e7a6      	b.n	8012290 <_strtod_l+0x960>
 8012342:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012346:	9b06      	ldr	r3, [sp, #24]
 8012348:	46d9      	mov	r9, fp
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1ca      	bne.n	80122e4 <_strtod_l+0x9b4>
 801234e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012352:	0d1b      	lsrs	r3, r3, #20
 8012354:	051b      	lsls	r3, r3, #20
 8012356:	429f      	cmp	r7, r3
 8012358:	d1c4      	bne.n	80122e4 <_strtod_l+0x9b4>
 801235a:	ec51 0b18 	vmov	r0, r1, d8
 801235e:	f7ee fa03 	bl	8000768 <__aeabi_d2lz>
 8012362:	f7ee f9bb 	bl	80006dc <__aeabi_l2d>
 8012366:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801236a:	ec41 0b17 	vmov	d7, r0, r1
 801236e:	ea49 090a 	orr.w	r9, r9, sl
 8012372:	ea59 0908 	orrs.w	r9, r9, r8
 8012376:	ee38 8b47 	vsub.f64	d8, d8, d7
 801237a:	d03c      	beq.n	80123f6 <_strtod_l+0xac6>
 801237c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012430 <_strtod_l+0xb00>
 8012380:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012388:	f53f aced 	bmi.w	8011d66 <_strtod_l+0x436>
 801238c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012438 <_strtod_l+0xb08>
 8012390:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012398:	dda4      	ble.n	80122e4 <_strtod_l+0x9b4>
 801239a:	e4e4      	b.n	8011d66 <_strtod_l+0x436>
 801239c:	9906      	ldr	r1, [sp, #24]
 801239e:	b1e1      	cbz	r1, 80123da <_strtod_l+0xaaa>
 80123a0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80123a4:	d819      	bhi.n	80123da <_strtod_l+0xaaa>
 80123a6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80123aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ae:	d811      	bhi.n	80123d4 <_strtod_l+0xaa4>
 80123b0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80123b4:	ee18 3a10 	vmov	r3, s16
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	bf38      	it	cc
 80123bc:	2301      	movcc	r3, #1
 80123be:	ee08 3a10 	vmov	s16, r3
 80123c2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80123c6:	f1b8 0f00 	cmp.w	r8, #0
 80123ca:	d111      	bne.n	80123f0 <_strtod_l+0xac0>
 80123cc:	eeb1 7b48 	vneg.f64	d7, d8
 80123d0:	ec53 2b17 	vmov	r2, r3, d7
 80123d4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80123d8:	1bcb      	subs	r3, r1, r7
 80123da:	eeb0 0b49 	vmov.f64	d0, d9
 80123de:	ec43 2b1a 	vmov	d10, r2, r3
 80123e2:	f7ff f94f 	bl	8011684 <__ulp>
 80123e6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80123ea:	ec5b ab19 	vmov	sl, fp, d9
 80123ee:	e7aa      	b.n	8012346 <_strtod_l+0xa16>
 80123f0:	eeb0 7b48 	vmov.f64	d7, d8
 80123f4:	e7ec      	b.n	80123d0 <_strtod_l+0xaa0>
 80123f6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8012440 <_strtod_l+0xb10>
 80123fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80123fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012402:	f57f af6f 	bpl.w	80122e4 <_strtod_l+0x9b4>
 8012406:	e4ae      	b.n	8011d66 <_strtod_l+0x436>
 8012408:	2300      	movs	r3, #0
 801240a:	9308      	str	r3, [sp, #32]
 801240c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801240e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012410:	6013      	str	r3, [r2, #0]
 8012412:	f7ff bacc 	b.w	80119ae <_strtod_l+0x7e>
 8012416:	2a65      	cmp	r2, #101	@ 0x65
 8012418:	f43f abbc 	beq.w	8011b94 <_strtod_l+0x264>
 801241c:	2a45      	cmp	r2, #69	@ 0x45
 801241e:	f43f abb9 	beq.w	8011b94 <_strtod_l+0x264>
 8012422:	2301      	movs	r3, #1
 8012424:	9306      	str	r3, [sp, #24]
 8012426:	f7ff bbf0 	b.w	8011c0a <_strtod_l+0x2da>
 801242a:	bf00      	nop
 801242c:	f3af 8000 	nop.w
 8012430:	94a03595 	.word	0x94a03595
 8012434:	3fdfffff 	.word	0x3fdfffff
 8012438:	35afe535 	.word	0x35afe535
 801243c:	3fe00000 	.word	0x3fe00000
 8012440:	94a03595 	.word	0x94a03595
 8012444:	3fcfffff 	.word	0x3fcfffff
 8012448:	000fffff 	.word	0x000fffff
 801244c:	7ff00000 	.word	0x7ff00000
 8012450:	7fefffff 	.word	0x7fefffff
 8012454:	7fe00000 	.word	0x7fe00000
 8012458:	7c9fffff 	.word	0x7c9fffff

0801245c <_strtod_r>:
 801245c:	4b01      	ldr	r3, [pc, #4]	@ (8012464 <_strtod_r+0x8>)
 801245e:	f7ff ba67 	b.w	8011930 <_strtod_l>
 8012462:	bf00      	nop
 8012464:	2400006c 	.word	0x2400006c

08012468 <_strtol_l.constprop.0>:
 8012468:	2b24      	cmp	r3, #36	@ 0x24
 801246a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801246e:	4686      	mov	lr, r0
 8012470:	4690      	mov	r8, r2
 8012472:	d801      	bhi.n	8012478 <_strtol_l.constprop.0+0x10>
 8012474:	2b01      	cmp	r3, #1
 8012476:	d106      	bne.n	8012486 <_strtol_l.constprop.0+0x1e>
 8012478:	f7fd fe70 	bl	801015c <__errno>
 801247c:	2316      	movs	r3, #22
 801247e:	6003      	str	r3, [r0, #0]
 8012480:	2000      	movs	r0, #0
 8012482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012486:	4834      	ldr	r0, [pc, #208]	@ (8012558 <_strtol_l.constprop.0+0xf0>)
 8012488:	460d      	mov	r5, r1
 801248a:	462a      	mov	r2, r5
 801248c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012490:	5d06      	ldrb	r6, [r0, r4]
 8012492:	f016 0608 	ands.w	r6, r6, #8
 8012496:	d1f8      	bne.n	801248a <_strtol_l.constprop.0+0x22>
 8012498:	2c2d      	cmp	r4, #45	@ 0x2d
 801249a:	d12d      	bne.n	80124f8 <_strtol_l.constprop.0+0x90>
 801249c:	782c      	ldrb	r4, [r5, #0]
 801249e:	2601      	movs	r6, #1
 80124a0:	1c95      	adds	r5, r2, #2
 80124a2:	f033 0210 	bics.w	r2, r3, #16
 80124a6:	d109      	bne.n	80124bc <_strtol_l.constprop.0+0x54>
 80124a8:	2c30      	cmp	r4, #48	@ 0x30
 80124aa:	d12a      	bne.n	8012502 <_strtol_l.constprop.0+0x9a>
 80124ac:	782a      	ldrb	r2, [r5, #0]
 80124ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80124b2:	2a58      	cmp	r2, #88	@ 0x58
 80124b4:	d125      	bne.n	8012502 <_strtol_l.constprop.0+0x9a>
 80124b6:	786c      	ldrb	r4, [r5, #1]
 80124b8:	2310      	movs	r3, #16
 80124ba:	3502      	adds	r5, #2
 80124bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80124c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80124c4:	2200      	movs	r2, #0
 80124c6:	fbbc f9f3 	udiv	r9, ip, r3
 80124ca:	4610      	mov	r0, r2
 80124cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80124d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80124d4:	2f09      	cmp	r7, #9
 80124d6:	d81b      	bhi.n	8012510 <_strtol_l.constprop.0+0xa8>
 80124d8:	463c      	mov	r4, r7
 80124da:	42a3      	cmp	r3, r4
 80124dc:	dd27      	ble.n	801252e <_strtol_l.constprop.0+0xc6>
 80124de:	1c57      	adds	r7, r2, #1
 80124e0:	d007      	beq.n	80124f2 <_strtol_l.constprop.0+0x8a>
 80124e2:	4581      	cmp	r9, r0
 80124e4:	d320      	bcc.n	8012528 <_strtol_l.constprop.0+0xc0>
 80124e6:	d101      	bne.n	80124ec <_strtol_l.constprop.0+0x84>
 80124e8:	45a2      	cmp	sl, r4
 80124ea:	db1d      	blt.n	8012528 <_strtol_l.constprop.0+0xc0>
 80124ec:	fb00 4003 	mla	r0, r0, r3, r4
 80124f0:	2201      	movs	r2, #1
 80124f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124f6:	e7eb      	b.n	80124d0 <_strtol_l.constprop.0+0x68>
 80124f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80124fa:	bf04      	itt	eq
 80124fc:	782c      	ldrbeq	r4, [r5, #0]
 80124fe:	1c95      	addeq	r5, r2, #2
 8012500:	e7cf      	b.n	80124a2 <_strtol_l.constprop.0+0x3a>
 8012502:	2b00      	cmp	r3, #0
 8012504:	d1da      	bne.n	80124bc <_strtol_l.constprop.0+0x54>
 8012506:	2c30      	cmp	r4, #48	@ 0x30
 8012508:	bf0c      	ite	eq
 801250a:	2308      	moveq	r3, #8
 801250c:	230a      	movne	r3, #10
 801250e:	e7d5      	b.n	80124bc <_strtol_l.constprop.0+0x54>
 8012510:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012514:	2f19      	cmp	r7, #25
 8012516:	d801      	bhi.n	801251c <_strtol_l.constprop.0+0xb4>
 8012518:	3c37      	subs	r4, #55	@ 0x37
 801251a:	e7de      	b.n	80124da <_strtol_l.constprop.0+0x72>
 801251c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012520:	2f19      	cmp	r7, #25
 8012522:	d804      	bhi.n	801252e <_strtol_l.constprop.0+0xc6>
 8012524:	3c57      	subs	r4, #87	@ 0x57
 8012526:	e7d8      	b.n	80124da <_strtol_l.constprop.0+0x72>
 8012528:	f04f 32ff 	mov.w	r2, #4294967295
 801252c:	e7e1      	b.n	80124f2 <_strtol_l.constprop.0+0x8a>
 801252e:	1c53      	adds	r3, r2, #1
 8012530:	d108      	bne.n	8012544 <_strtol_l.constprop.0+0xdc>
 8012532:	2322      	movs	r3, #34	@ 0x22
 8012534:	f8ce 3000 	str.w	r3, [lr]
 8012538:	4660      	mov	r0, ip
 801253a:	f1b8 0f00 	cmp.w	r8, #0
 801253e:	d0a0      	beq.n	8012482 <_strtol_l.constprop.0+0x1a>
 8012540:	1e69      	subs	r1, r5, #1
 8012542:	e006      	b.n	8012552 <_strtol_l.constprop.0+0xea>
 8012544:	b106      	cbz	r6, 8012548 <_strtol_l.constprop.0+0xe0>
 8012546:	4240      	negs	r0, r0
 8012548:	f1b8 0f00 	cmp.w	r8, #0
 801254c:	d099      	beq.n	8012482 <_strtol_l.constprop.0+0x1a>
 801254e:	2a00      	cmp	r2, #0
 8012550:	d1f6      	bne.n	8012540 <_strtol_l.constprop.0+0xd8>
 8012552:	f8c8 1000 	str.w	r1, [r8]
 8012556:	e794      	b.n	8012482 <_strtol_l.constprop.0+0x1a>
 8012558:	08013a01 	.word	0x08013a01

0801255c <_strtol_r>:
 801255c:	f7ff bf84 	b.w	8012468 <_strtol_l.constprop.0>

08012560 <__ssputs_r>:
 8012560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012564:	688e      	ldr	r6, [r1, #8]
 8012566:	461f      	mov	r7, r3
 8012568:	42be      	cmp	r6, r7
 801256a:	680b      	ldr	r3, [r1, #0]
 801256c:	4682      	mov	sl, r0
 801256e:	460c      	mov	r4, r1
 8012570:	4690      	mov	r8, r2
 8012572:	d82d      	bhi.n	80125d0 <__ssputs_r+0x70>
 8012574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012578:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801257c:	d026      	beq.n	80125cc <__ssputs_r+0x6c>
 801257e:	6965      	ldr	r5, [r4, #20]
 8012580:	6909      	ldr	r1, [r1, #16]
 8012582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012586:	eba3 0901 	sub.w	r9, r3, r1
 801258a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801258e:	1c7b      	adds	r3, r7, #1
 8012590:	444b      	add	r3, r9
 8012592:	106d      	asrs	r5, r5, #1
 8012594:	429d      	cmp	r5, r3
 8012596:	bf38      	it	cc
 8012598:	461d      	movcc	r5, r3
 801259a:	0553      	lsls	r3, r2, #21
 801259c:	d527      	bpl.n	80125ee <__ssputs_r+0x8e>
 801259e:	4629      	mov	r1, r5
 80125a0:	f7fe fc70 	bl	8010e84 <_malloc_r>
 80125a4:	4606      	mov	r6, r0
 80125a6:	b360      	cbz	r0, 8012602 <__ssputs_r+0xa2>
 80125a8:	6921      	ldr	r1, [r4, #16]
 80125aa:	464a      	mov	r2, r9
 80125ac:	f7fd fe03 	bl	80101b6 <memcpy>
 80125b0:	89a3      	ldrh	r3, [r4, #12]
 80125b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80125b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125ba:	81a3      	strh	r3, [r4, #12]
 80125bc:	6126      	str	r6, [r4, #16]
 80125be:	6165      	str	r5, [r4, #20]
 80125c0:	444e      	add	r6, r9
 80125c2:	eba5 0509 	sub.w	r5, r5, r9
 80125c6:	6026      	str	r6, [r4, #0]
 80125c8:	60a5      	str	r5, [r4, #8]
 80125ca:	463e      	mov	r6, r7
 80125cc:	42be      	cmp	r6, r7
 80125ce:	d900      	bls.n	80125d2 <__ssputs_r+0x72>
 80125d0:	463e      	mov	r6, r7
 80125d2:	6820      	ldr	r0, [r4, #0]
 80125d4:	4632      	mov	r2, r6
 80125d6:	4641      	mov	r1, r8
 80125d8:	f000 fb9c 	bl	8012d14 <memmove>
 80125dc:	68a3      	ldr	r3, [r4, #8]
 80125de:	1b9b      	subs	r3, r3, r6
 80125e0:	60a3      	str	r3, [r4, #8]
 80125e2:	6823      	ldr	r3, [r4, #0]
 80125e4:	4433      	add	r3, r6
 80125e6:	6023      	str	r3, [r4, #0]
 80125e8:	2000      	movs	r0, #0
 80125ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ee:	462a      	mov	r2, r5
 80125f0:	f000 ff53 	bl	801349a <_realloc_r>
 80125f4:	4606      	mov	r6, r0
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d1e0      	bne.n	80125bc <__ssputs_r+0x5c>
 80125fa:	6921      	ldr	r1, [r4, #16]
 80125fc:	4650      	mov	r0, sl
 80125fe:	f7fe fbcd 	bl	8010d9c <_free_r>
 8012602:	230c      	movs	r3, #12
 8012604:	f8ca 3000 	str.w	r3, [sl]
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801260e:	81a3      	strh	r3, [r4, #12]
 8012610:	f04f 30ff 	mov.w	r0, #4294967295
 8012614:	e7e9      	b.n	80125ea <__ssputs_r+0x8a>
	...

08012618 <_svfiprintf_r>:
 8012618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801261c:	4698      	mov	r8, r3
 801261e:	898b      	ldrh	r3, [r1, #12]
 8012620:	061b      	lsls	r3, r3, #24
 8012622:	b09d      	sub	sp, #116	@ 0x74
 8012624:	4607      	mov	r7, r0
 8012626:	460d      	mov	r5, r1
 8012628:	4614      	mov	r4, r2
 801262a:	d510      	bpl.n	801264e <_svfiprintf_r+0x36>
 801262c:	690b      	ldr	r3, [r1, #16]
 801262e:	b973      	cbnz	r3, 801264e <_svfiprintf_r+0x36>
 8012630:	2140      	movs	r1, #64	@ 0x40
 8012632:	f7fe fc27 	bl	8010e84 <_malloc_r>
 8012636:	6028      	str	r0, [r5, #0]
 8012638:	6128      	str	r0, [r5, #16]
 801263a:	b930      	cbnz	r0, 801264a <_svfiprintf_r+0x32>
 801263c:	230c      	movs	r3, #12
 801263e:	603b      	str	r3, [r7, #0]
 8012640:	f04f 30ff 	mov.w	r0, #4294967295
 8012644:	b01d      	add	sp, #116	@ 0x74
 8012646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801264a:	2340      	movs	r3, #64	@ 0x40
 801264c:	616b      	str	r3, [r5, #20]
 801264e:	2300      	movs	r3, #0
 8012650:	9309      	str	r3, [sp, #36]	@ 0x24
 8012652:	2320      	movs	r3, #32
 8012654:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012658:	f8cd 800c 	str.w	r8, [sp, #12]
 801265c:	2330      	movs	r3, #48	@ 0x30
 801265e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80127fc <_svfiprintf_r+0x1e4>
 8012662:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012666:	f04f 0901 	mov.w	r9, #1
 801266a:	4623      	mov	r3, r4
 801266c:	469a      	mov	sl, r3
 801266e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012672:	b10a      	cbz	r2, 8012678 <_svfiprintf_r+0x60>
 8012674:	2a25      	cmp	r2, #37	@ 0x25
 8012676:	d1f9      	bne.n	801266c <_svfiprintf_r+0x54>
 8012678:	ebba 0b04 	subs.w	fp, sl, r4
 801267c:	d00b      	beq.n	8012696 <_svfiprintf_r+0x7e>
 801267e:	465b      	mov	r3, fp
 8012680:	4622      	mov	r2, r4
 8012682:	4629      	mov	r1, r5
 8012684:	4638      	mov	r0, r7
 8012686:	f7ff ff6b 	bl	8012560 <__ssputs_r>
 801268a:	3001      	adds	r0, #1
 801268c:	f000 80a7 	beq.w	80127de <_svfiprintf_r+0x1c6>
 8012690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012692:	445a      	add	r2, fp
 8012694:	9209      	str	r2, [sp, #36]	@ 0x24
 8012696:	f89a 3000 	ldrb.w	r3, [sl]
 801269a:	2b00      	cmp	r3, #0
 801269c:	f000 809f 	beq.w	80127de <_svfiprintf_r+0x1c6>
 80126a0:	2300      	movs	r3, #0
 80126a2:	f04f 32ff 	mov.w	r2, #4294967295
 80126a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126aa:	f10a 0a01 	add.w	sl, sl, #1
 80126ae:	9304      	str	r3, [sp, #16]
 80126b0:	9307      	str	r3, [sp, #28]
 80126b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80126b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80126b8:	4654      	mov	r4, sl
 80126ba:	2205      	movs	r2, #5
 80126bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126c0:	484e      	ldr	r0, [pc, #312]	@ (80127fc <_svfiprintf_r+0x1e4>)
 80126c2:	f7ed fe25 	bl	8000310 <memchr>
 80126c6:	9a04      	ldr	r2, [sp, #16]
 80126c8:	b9d8      	cbnz	r0, 8012702 <_svfiprintf_r+0xea>
 80126ca:	06d0      	lsls	r0, r2, #27
 80126cc:	bf44      	itt	mi
 80126ce:	2320      	movmi	r3, #32
 80126d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126d4:	0711      	lsls	r1, r2, #28
 80126d6:	bf44      	itt	mi
 80126d8:	232b      	movmi	r3, #43	@ 0x2b
 80126da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126de:	f89a 3000 	ldrb.w	r3, [sl]
 80126e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80126e4:	d015      	beq.n	8012712 <_svfiprintf_r+0xfa>
 80126e6:	9a07      	ldr	r2, [sp, #28]
 80126e8:	4654      	mov	r4, sl
 80126ea:	2000      	movs	r0, #0
 80126ec:	f04f 0c0a 	mov.w	ip, #10
 80126f0:	4621      	mov	r1, r4
 80126f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126f6:	3b30      	subs	r3, #48	@ 0x30
 80126f8:	2b09      	cmp	r3, #9
 80126fa:	d94b      	bls.n	8012794 <_svfiprintf_r+0x17c>
 80126fc:	b1b0      	cbz	r0, 801272c <_svfiprintf_r+0x114>
 80126fe:	9207      	str	r2, [sp, #28]
 8012700:	e014      	b.n	801272c <_svfiprintf_r+0x114>
 8012702:	eba0 0308 	sub.w	r3, r0, r8
 8012706:	fa09 f303 	lsl.w	r3, r9, r3
 801270a:	4313      	orrs	r3, r2
 801270c:	9304      	str	r3, [sp, #16]
 801270e:	46a2      	mov	sl, r4
 8012710:	e7d2      	b.n	80126b8 <_svfiprintf_r+0xa0>
 8012712:	9b03      	ldr	r3, [sp, #12]
 8012714:	1d19      	adds	r1, r3, #4
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	9103      	str	r1, [sp, #12]
 801271a:	2b00      	cmp	r3, #0
 801271c:	bfbb      	ittet	lt
 801271e:	425b      	neglt	r3, r3
 8012720:	f042 0202 	orrlt.w	r2, r2, #2
 8012724:	9307      	strge	r3, [sp, #28]
 8012726:	9307      	strlt	r3, [sp, #28]
 8012728:	bfb8      	it	lt
 801272a:	9204      	strlt	r2, [sp, #16]
 801272c:	7823      	ldrb	r3, [r4, #0]
 801272e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012730:	d10a      	bne.n	8012748 <_svfiprintf_r+0x130>
 8012732:	7863      	ldrb	r3, [r4, #1]
 8012734:	2b2a      	cmp	r3, #42	@ 0x2a
 8012736:	d132      	bne.n	801279e <_svfiprintf_r+0x186>
 8012738:	9b03      	ldr	r3, [sp, #12]
 801273a:	1d1a      	adds	r2, r3, #4
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	9203      	str	r2, [sp, #12]
 8012740:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012744:	3402      	adds	r4, #2
 8012746:	9305      	str	r3, [sp, #20]
 8012748:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801280c <_svfiprintf_r+0x1f4>
 801274c:	7821      	ldrb	r1, [r4, #0]
 801274e:	2203      	movs	r2, #3
 8012750:	4650      	mov	r0, sl
 8012752:	f7ed fddd 	bl	8000310 <memchr>
 8012756:	b138      	cbz	r0, 8012768 <_svfiprintf_r+0x150>
 8012758:	9b04      	ldr	r3, [sp, #16]
 801275a:	eba0 000a 	sub.w	r0, r0, sl
 801275e:	2240      	movs	r2, #64	@ 0x40
 8012760:	4082      	lsls	r2, r0
 8012762:	4313      	orrs	r3, r2
 8012764:	3401      	adds	r4, #1
 8012766:	9304      	str	r3, [sp, #16]
 8012768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801276c:	4824      	ldr	r0, [pc, #144]	@ (8012800 <_svfiprintf_r+0x1e8>)
 801276e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012772:	2206      	movs	r2, #6
 8012774:	f7ed fdcc 	bl	8000310 <memchr>
 8012778:	2800      	cmp	r0, #0
 801277a:	d036      	beq.n	80127ea <_svfiprintf_r+0x1d2>
 801277c:	4b21      	ldr	r3, [pc, #132]	@ (8012804 <_svfiprintf_r+0x1ec>)
 801277e:	bb1b      	cbnz	r3, 80127c8 <_svfiprintf_r+0x1b0>
 8012780:	9b03      	ldr	r3, [sp, #12]
 8012782:	3307      	adds	r3, #7
 8012784:	f023 0307 	bic.w	r3, r3, #7
 8012788:	3308      	adds	r3, #8
 801278a:	9303      	str	r3, [sp, #12]
 801278c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801278e:	4433      	add	r3, r6
 8012790:	9309      	str	r3, [sp, #36]	@ 0x24
 8012792:	e76a      	b.n	801266a <_svfiprintf_r+0x52>
 8012794:	fb0c 3202 	mla	r2, ip, r2, r3
 8012798:	460c      	mov	r4, r1
 801279a:	2001      	movs	r0, #1
 801279c:	e7a8      	b.n	80126f0 <_svfiprintf_r+0xd8>
 801279e:	2300      	movs	r3, #0
 80127a0:	3401      	adds	r4, #1
 80127a2:	9305      	str	r3, [sp, #20]
 80127a4:	4619      	mov	r1, r3
 80127a6:	f04f 0c0a 	mov.w	ip, #10
 80127aa:	4620      	mov	r0, r4
 80127ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127b0:	3a30      	subs	r2, #48	@ 0x30
 80127b2:	2a09      	cmp	r2, #9
 80127b4:	d903      	bls.n	80127be <_svfiprintf_r+0x1a6>
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d0c6      	beq.n	8012748 <_svfiprintf_r+0x130>
 80127ba:	9105      	str	r1, [sp, #20]
 80127bc:	e7c4      	b.n	8012748 <_svfiprintf_r+0x130>
 80127be:	fb0c 2101 	mla	r1, ip, r1, r2
 80127c2:	4604      	mov	r4, r0
 80127c4:	2301      	movs	r3, #1
 80127c6:	e7f0      	b.n	80127aa <_svfiprintf_r+0x192>
 80127c8:	ab03      	add	r3, sp, #12
 80127ca:	9300      	str	r3, [sp, #0]
 80127cc:	462a      	mov	r2, r5
 80127ce:	4b0e      	ldr	r3, [pc, #56]	@ (8012808 <_svfiprintf_r+0x1f0>)
 80127d0:	a904      	add	r1, sp, #16
 80127d2:	4638      	mov	r0, r7
 80127d4:	f7fc fd84 	bl	800f2e0 <_printf_float>
 80127d8:	1c42      	adds	r2, r0, #1
 80127da:	4606      	mov	r6, r0
 80127dc:	d1d6      	bne.n	801278c <_svfiprintf_r+0x174>
 80127de:	89ab      	ldrh	r3, [r5, #12]
 80127e0:	065b      	lsls	r3, r3, #25
 80127e2:	f53f af2d 	bmi.w	8012640 <_svfiprintf_r+0x28>
 80127e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127e8:	e72c      	b.n	8012644 <_svfiprintf_r+0x2c>
 80127ea:	ab03      	add	r3, sp, #12
 80127ec:	9300      	str	r3, [sp, #0]
 80127ee:	462a      	mov	r2, r5
 80127f0:	4b05      	ldr	r3, [pc, #20]	@ (8012808 <_svfiprintf_r+0x1f0>)
 80127f2:	a904      	add	r1, sp, #16
 80127f4:	4638      	mov	r0, r7
 80127f6:	f7fc fffb 	bl	800f7f0 <_printf_i>
 80127fa:	e7ed      	b.n	80127d8 <_svfiprintf_r+0x1c0>
 80127fc:	08013b01 	.word	0x08013b01
 8012800:	08013b0b 	.word	0x08013b0b
 8012804:	0800f2e1 	.word	0x0800f2e1
 8012808:	08012561 	.word	0x08012561
 801280c:	08013b07 	.word	0x08013b07

08012810 <__sfputc_r>:
 8012810:	6893      	ldr	r3, [r2, #8]
 8012812:	3b01      	subs	r3, #1
 8012814:	2b00      	cmp	r3, #0
 8012816:	b410      	push	{r4}
 8012818:	6093      	str	r3, [r2, #8]
 801281a:	da08      	bge.n	801282e <__sfputc_r+0x1e>
 801281c:	6994      	ldr	r4, [r2, #24]
 801281e:	42a3      	cmp	r3, r4
 8012820:	db01      	blt.n	8012826 <__sfputc_r+0x16>
 8012822:	290a      	cmp	r1, #10
 8012824:	d103      	bne.n	801282e <__sfputc_r+0x1e>
 8012826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801282a:	f000 b9df 	b.w	8012bec <__swbuf_r>
 801282e:	6813      	ldr	r3, [r2, #0]
 8012830:	1c58      	adds	r0, r3, #1
 8012832:	6010      	str	r0, [r2, #0]
 8012834:	7019      	strb	r1, [r3, #0]
 8012836:	4608      	mov	r0, r1
 8012838:	f85d 4b04 	ldr.w	r4, [sp], #4
 801283c:	4770      	bx	lr

0801283e <__sfputs_r>:
 801283e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012840:	4606      	mov	r6, r0
 8012842:	460f      	mov	r7, r1
 8012844:	4614      	mov	r4, r2
 8012846:	18d5      	adds	r5, r2, r3
 8012848:	42ac      	cmp	r4, r5
 801284a:	d101      	bne.n	8012850 <__sfputs_r+0x12>
 801284c:	2000      	movs	r0, #0
 801284e:	e007      	b.n	8012860 <__sfputs_r+0x22>
 8012850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012854:	463a      	mov	r2, r7
 8012856:	4630      	mov	r0, r6
 8012858:	f7ff ffda 	bl	8012810 <__sfputc_r>
 801285c:	1c43      	adds	r3, r0, #1
 801285e:	d1f3      	bne.n	8012848 <__sfputs_r+0xa>
 8012860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012864 <_vfiprintf_r>:
 8012864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012868:	460d      	mov	r5, r1
 801286a:	b09d      	sub	sp, #116	@ 0x74
 801286c:	4614      	mov	r4, r2
 801286e:	4698      	mov	r8, r3
 8012870:	4606      	mov	r6, r0
 8012872:	b118      	cbz	r0, 801287c <_vfiprintf_r+0x18>
 8012874:	6a03      	ldr	r3, [r0, #32]
 8012876:	b90b      	cbnz	r3, 801287c <_vfiprintf_r+0x18>
 8012878:	f7fd fb72 	bl	800ff60 <__sinit>
 801287c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801287e:	07d9      	lsls	r1, r3, #31
 8012880:	d405      	bmi.n	801288e <_vfiprintf_r+0x2a>
 8012882:	89ab      	ldrh	r3, [r5, #12]
 8012884:	059a      	lsls	r2, r3, #22
 8012886:	d402      	bmi.n	801288e <_vfiprintf_r+0x2a>
 8012888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801288a:	f7fd fc92 	bl	80101b2 <__retarget_lock_acquire_recursive>
 801288e:	89ab      	ldrh	r3, [r5, #12]
 8012890:	071b      	lsls	r3, r3, #28
 8012892:	d501      	bpl.n	8012898 <_vfiprintf_r+0x34>
 8012894:	692b      	ldr	r3, [r5, #16]
 8012896:	b99b      	cbnz	r3, 80128c0 <_vfiprintf_r+0x5c>
 8012898:	4629      	mov	r1, r5
 801289a:	4630      	mov	r0, r6
 801289c:	f000 f9e4 	bl	8012c68 <__swsetup_r>
 80128a0:	b170      	cbz	r0, 80128c0 <_vfiprintf_r+0x5c>
 80128a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80128a4:	07dc      	lsls	r4, r3, #31
 80128a6:	d504      	bpl.n	80128b2 <_vfiprintf_r+0x4e>
 80128a8:	f04f 30ff 	mov.w	r0, #4294967295
 80128ac:	b01d      	add	sp, #116	@ 0x74
 80128ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b2:	89ab      	ldrh	r3, [r5, #12]
 80128b4:	0598      	lsls	r0, r3, #22
 80128b6:	d4f7      	bmi.n	80128a8 <_vfiprintf_r+0x44>
 80128b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128ba:	f7fd fc7b 	bl	80101b4 <__retarget_lock_release_recursive>
 80128be:	e7f3      	b.n	80128a8 <_vfiprintf_r+0x44>
 80128c0:	2300      	movs	r3, #0
 80128c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80128c4:	2320      	movs	r3, #32
 80128c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80128ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80128ce:	2330      	movs	r3, #48	@ 0x30
 80128d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012a80 <_vfiprintf_r+0x21c>
 80128d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80128d8:	f04f 0901 	mov.w	r9, #1
 80128dc:	4623      	mov	r3, r4
 80128de:	469a      	mov	sl, r3
 80128e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128e4:	b10a      	cbz	r2, 80128ea <_vfiprintf_r+0x86>
 80128e6:	2a25      	cmp	r2, #37	@ 0x25
 80128e8:	d1f9      	bne.n	80128de <_vfiprintf_r+0x7a>
 80128ea:	ebba 0b04 	subs.w	fp, sl, r4
 80128ee:	d00b      	beq.n	8012908 <_vfiprintf_r+0xa4>
 80128f0:	465b      	mov	r3, fp
 80128f2:	4622      	mov	r2, r4
 80128f4:	4629      	mov	r1, r5
 80128f6:	4630      	mov	r0, r6
 80128f8:	f7ff ffa1 	bl	801283e <__sfputs_r>
 80128fc:	3001      	adds	r0, #1
 80128fe:	f000 80a7 	beq.w	8012a50 <_vfiprintf_r+0x1ec>
 8012902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012904:	445a      	add	r2, fp
 8012906:	9209      	str	r2, [sp, #36]	@ 0x24
 8012908:	f89a 3000 	ldrb.w	r3, [sl]
 801290c:	2b00      	cmp	r3, #0
 801290e:	f000 809f 	beq.w	8012a50 <_vfiprintf_r+0x1ec>
 8012912:	2300      	movs	r3, #0
 8012914:	f04f 32ff 	mov.w	r2, #4294967295
 8012918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801291c:	f10a 0a01 	add.w	sl, sl, #1
 8012920:	9304      	str	r3, [sp, #16]
 8012922:	9307      	str	r3, [sp, #28]
 8012924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012928:	931a      	str	r3, [sp, #104]	@ 0x68
 801292a:	4654      	mov	r4, sl
 801292c:	2205      	movs	r2, #5
 801292e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012932:	4853      	ldr	r0, [pc, #332]	@ (8012a80 <_vfiprintf_r+0x21c>)
 8012934:	f7ed fcec 	bl	8000310 <memchr>
 8012938:	9a04      	ldr	r2, [sp, #16]
 801293a:	b9d8      	cbnz	r0, 8012974 <_vfiprintf_r+0x110>
 801293c:	06d1      	lsls	r1, r2, #27
 801293e:	bf44      	itt	mi
 8012940:	2320      	movmi	r3, #32
 8012942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012946:	0713      	lsls	r3, r2, #28
 8012948:	bf44      	itt	mi
 801294a:	232b      	movmi	r3, #43	@ 0x2b
 801294c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012950:	f89a 3000 	ldrb.w	r3, [sl]
 8012954:	2b2a      	cmp	r3, #42	@ 0x2a
 8012956:	d015      	beq.n	8012984 <_vfiprintf_r+0x120>
 8012958:	9a07      	ldr	r2, [sp, #28]
 801295a:	4654      	mov	r4, sl
 801295c:	2000      	movs	r0, #0
 801295e:	f04f 0c0a 	mov.w	ip, #10
 8012962:	4621      	mov	r1, r4
 8012964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012968:	3b30      	subs	r3, #48	@ 0x30
 801296a:	2b09      	cmp	r3, #9
 801296c:	d94b      	bls.n	8012a06 <_vfiprintf_r+0x1a2>
 801296e:	b1b0      	cbz	r0, 801299e <_vfiprintf_r+0x13a>
 8012970:	9207      	str	r2, [sp, #28]
 8012972:	e014      	b.n	801299e <_vfiprintf_r+0x13a>
 8012974:	eba0 0308 	sub.w	r3, r0, r8
 8012978:	fa09 f303 	lsl.w	r3, r9, r3
 801297c:	4313      	orrs	r3, r2
 801297e:	9304      	str	r3, [sp, #16]
 8012980:	46a2      	mov	sl, r4
 8012982:	e7d2      	b.n	801292a <_vfiprintf_r+0xc6>
 8012984:	9b03      	ldr	r3, [sp, #12]
 8012986:	1d19      	adds	r1, r3, #4
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	9103      	str	r1, [sp, #12]
 801298c:	2b00      	cmp	r3, #0
 801298e:	bfbb      	ittet	lt
 8012990:	425b      	neglt	r3, r3
 8012992:	f042 0202 	orrlt.w	r2, r2, #2
 8012996:	9307      	strge	r3, [sp, #28]
 8012998:	9307      	strlt	r3, [sp, #28]
 801299a:	bfb8      	it	lt
 801299c:	9204      	strlt	r2, [sp, #16]
 801299e:	7823      	ldrb	r3, [r4, #0]
 80129a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80129a2:	d10a      	bne.n	80129ba <_vfiprintf_r+0x156>
 80129a4:	7863      	ldrb	r3, [r4, #1]
 80129a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80129a8:	d132      	bne.n	8012a10 <_vfiprintf_r+0x1ac>
 80129aa:	9b03      	ldr	r3, [sp, #12]
 80129ac:	1d1a      	adds	r2, r3, #4
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	9203      	str	r2, [sp, #12]
 80129b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80129b6:	3402      	adds	r4, #2
 80129b8:	9305      	str	r3, [sp, #20]
 80129ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012a90 <_vfiprintf_r+0x22c>
 80129be:	7821      	ldrb	r1, [r4, #0]
 80129c0:	2203      	movs	r2, #3
 80129c2:	4650      	mov	r0, sl
 80129c4:	f7ed fca4 	bl	8000310 <memchr>
 80129c8:	b138      	cbz	r0, 80129da <_vfiprintf_r+0x176>
 80129ca:	9b04      	ldr	r3, [sp, #16]
 80129cc:	eba0 000a 	sub.w	r0, r0, sl
 80129d0:	2240      	movs	r2, #64	@ 0x40
 80129d2:	4082      	lsls	r2, r0
 80129d4:	4313      	orrs	r3, r2
 80129d6:	3401      	adds	r4, #1
 80129d8:	9304      	str	r3, [sp, #16]
 80129da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129de:	4829      	ldr	r0, [pc, #164]	@ (8012a84 <_vfiprintf_r+0x220>)
 80129e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80129e4:	2206      	movs	r2, #6
 80129e6:	f7ed fc93 	bl	8000310 <memchr>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d03f      	beq.n	8012a6e <_vfiprintf_r+0x20a>
 80129ee:	4b26      	ldr	r3, [pc, #152]	@ (8012a88 <_vfiprintf_r+0x224>)
 80129f0:	bb1b      	cbnz	r3, 8012a3a <_vfiprintf_r+0x1d6>
 80129f2:	9b03      	ldr	r3, [sp, #12]
 80129f4:	3307      	adds	r3, #7
 80129f6:	f023 0307 	bic.w	r3, r3, #7
 80129fa:	3308      	adds	r3, #8
 80129fc:	9303      	str	r3, [sp, #12]
 80129fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a00:	443b      	add	r3, r7
 8012a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a04:	e76a      	b.n	80128dc <_vfiprintf_r+0x78>
 8012a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	2001      	movs	r0, #1
 8012a0e:	e7a8      	b.n	8012962 <_vfiprintf_r+0xfe>
 8012a10:	2300      	movs	r3, #0
 8012a12:	3401      	adds	r4, #1
 8012a14:	9305      	str	r3, [sp, #20]
 8012a16:	4619      	mov	r1, r3
 8012a18:	f04f 0c0a 	mov.w	ip, #10
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a22:	3a30      	subs	r2, #48	@ 0x30
 8012a24:	2a09      	cmp	r2, #9
 8012a26:	d903      	bls.n	8012a30 <_vfiprintf_r+0x1cc>
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d0c6      	beq.n	80129ba <_vfiprintf_r+0x156>
 8012a2c:	9105      	str	r1, [sp, #20]
 8012a2e:	e7c4      	b.n	80129ba <_vfiprintf_r+0x156>
 8012a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a34:	4604      	mov	r4, r0
 8012a36:	2301      	movs	r3, #1
 8012a38:	e7f0      	b.n	8012a1c <_vfiprintf_r+0x1b8>
 8012a3a:	ab03      	add	r3, sp, #12
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	462a      	mov	r2, r5
 8012a40:	4b12      	ldr	r3, [pc, #72]	@ (8012a8c <_vfiprintf_r+0x228>)
 8012a42:	a904      	add	r1, sp, #16
 8012a44:	4630      	mov	r0, r6
 8012a46:	f7fc fc4b 	bl	800f2e0 <_printf_float>
 8012a4a:	4607      	mov	r7, r0
 8012a4c:	1c78      	adds	r0, r7, #1
 8012a4e:	d1d6      	bne.n	80129fe <_vfiprintf_r+0x19a>
 8012a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a52:	07d9      	lsls	r1, r3, #31
 8012a54:	d405      	bmi.n	8012a62 <_vfiprintf_r+0x1fe>
 8012a56:	89ab      	ldrh	r3, [r5, #12]
 8012a58:	059a      	lsls	r2, r3, #22
 8012a5a:	d402      	bmi.n	8012a62 <_vfiprintf_r+0x1fe>
 8012a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a5e:	f7fd fba9 	bl	80101b4 <__retarget_lock_release_recursive>
 8012a62:	89ab      	ldrh	r3, [r5, #12]
 8012a64:	065b      	lsls	r3, r3, #25
 8012a66:	f53f af1f 	bmi.w	80128a8 <_vfiprintf_r+0x44>
 8012a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a6c:	e71e      	b.n	80128ac <_vfiprintf_r+0x48>
 8012a6e:	ab03      	add	r3, sp, #12
 8012a70:	9300      	str	r3, [sp, #0]
 8012a72:	462a      	mov	r2, r5
 8012a74:	4b05      	ldr	r3, [pc, #20]	@ (8012a8c <_vfiprintf_r+0x228>)
 8012a76:	a904      	add	r1, sp, #16
 8012a78:	4630      	mov	r0, r6
 8012a7a:	f7fc feb9 	bl	800f7f0 <_printf_i>
 8012a7e:	e7e4      	b.n	8012a4a <_vfiprintf_r+0x1e6>
 8012a80:	08013b01 	.word	0x08013b01
 8012a84:	08013b0b 	.word	0x08013b0b
 8012a88:	0800f2e1 	.word	0x0800f2e1
 8012a8c:	0801283f 	.word	0x0801283f
 8012a90:	08013b07 	.word	0x08013b07

08012a94 <__sflush_r>:
 8012a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9c:	0716      	lsls	r6, r2, #28
 8012a9e:	4605      	mov	r5, r0
 8012aa0:	460c      	mov	r4, r1
 8012aa2:	d454      	bmi.n	8012b4e <__sflush_r+0xba>
 8012aa4:	684b      	ldr	r3, [r1, #4]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	dc02      	bgt.n	8012ab0 <__sflush_r+0x1c>
 8012aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	dd48      	ble.n	8012b42 <__sflush_r+0xae>
 8012ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ab2:	2e00      	cmp	r6, #0
 8012ab4:	d045      	beq.n	8012b42 <__sflush_r+0xae>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012abc:	682f      	ldr	r7, [r5, #0]
 8012abe:	6a21      	ldr	r1, [r4, #32]
 8012ac0:	602b      	str	r3, [r5, #0]
 8012ac2:	d030      	beq.n	8012b26 <__sflush_r+0x92>
 8012ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012ac6:	89a3      	ldrh	r3, [r4, #12]
 8012ac8:	0759      	lsls	r1, r3, #29
 8012aca:	d505      	bpl.n	8012ad8 <__sflush_r+0x44>
 8012acc:	6863      	ldr	r3, [r4, #4]
 8012ace:	1ad2      	subs	r2, r2, r3
 8012ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012ad2:	b10b      	cbz	r3, 8012ad8 <__sflush_r+0x44>
 8012ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ad6:	1ad2      	subs	r2, r2, r3
 8012ad8:	2300      	movs	r3, #0
 8012ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012adc:	6a21      	ldr	r1, [r4, #32]
 8012ade:	4628      	mov	r0, r5
 8012ae0:	47b0      	blx	r6
 8012ae2:	1c43      	adds	r3, r0, #1
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	d106      	bne.n	8012af6 <__sflush_r+0x62>
 8012ae8:	6829      	ldr	r1, [r5, #0]
 8012aea:	291d      	cmp	r1, #29
 8012aec:	d82b      	bhi.n	8012b46 <__sflush_r+0xb2>
 8012aee:	4a2a      	ldr	r2, [pc, #168]	@ (8012b98 <__sflush_r+0x104>)
 8012af0:	410a      	asrs	r2, r1
 8012af2:	07d6      	lsls	r6, r2, #31
 8012af4:	d427      	bmi.n	8012b46 <__sflush_r+0xb2>
 8012af6:	2200      	movs	r2, #0
 8012af8:	6062      	str	r2, [r4, #4]
 8012afa:	04d9      	lsls	r1, r3, #19
 8012afc:	6922      	ldr	r2, [r4, #16]
 8012afe:	6022      	str	r2, [r4, #0]
 8012b00:	d504      	bpl.n	8012b0c <__sflush_r+0x78>
 8012b02:	1c42      	adds	r2, r0, #1
 8012b04:	d101      	bne.n	8012b0a <__sflush_r+0x76>
 8012b06:	682b      	ldr	r3, [r5, #0]
 8012b08:	b903      	cbnz	r3, 8012b0c <__sflush_r+0x78>
 8012b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b0e:	602f      	str	r7, [r5, #0]
 8012b10:	b1b9      	cbz	r1, 8012b42 <__sflush_r+0xae>
 8012b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b16:	4299      	cmp	r1, r3
 8012b18:	d002      	beq.n	8012b20 <__sflush_r+0x8c>
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	f7fe f93e 	bl	8010d9c <_free_r>
 8012b20:	2300      	movs	r3, #0
 8012b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b24:	e00d      	b.n	8012b42 <__sflush_r+0xae>
 8012b26:	2301      	movs	r3, #1
 8012b28:	4628      	mov	r0, r5
 8012b2a:	47b0      	blx	r6
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	1c50      	adds	r0, r2, #1
 8012b30:	d1c9      	bne.n	8012ac6 <__sflush_r+0x32>
 8012b32:	682b      	ldr	r3, [r5, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d0c6      	beq.n	8012ac6 <__sflush_r+0x32>
 8012b38:	2b1d      	cmp	r3, #29
 8012b3a:	d001      	beq.n	8012b40 <__sflush_r+0xac>
 8012b3c:	2b16      	cmp	r3, #22
 8012b3e:	d11e      	bne.n	8012b7e <__sflush_r+0xea>
 8012b40:	602f      	str	r7, [r5, #0]
 8012b42:	2000      	movs	r0, #0
 8012b44:	e022      	b.n	8012b8c <__sflush_r+0xf8>
 8012b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b4a:	b21b      	sxth	r3, r3
 8012b4c:	e01b      	b.n	8012b86 <__sflush_r+0xf2>
 8012b4e:	690f      	ldr	r7, [r1, #16]
 8012b50:	2f00      	cmp	r7, #0
 8012b52:	d0f6      	beq.n	8012b42 <__sflush_r+0xae>
 8012b54:	0793      	lsls	r3, r2, #30
 8012b56:	680e      	ldr	r6, [r1, #0]
 8012b58:	bf08      	it	eq
 8012b5a:	694b      	ldreq	r3, [r1, #20]
 8012b5c:	600f      	str	r7, [r1, #0]
 8012b5e:	bf18      	it	ne
 8012b60:	2300      	movne	r3, #0
 8012b62:	eba6 0807 	sub.w	r8, r6, r7
 8012b66:	608b      	str	r3, [r1, #8]
 8012b68:	f1b8 0f00 	cmp.w	r8, #0
 8012b6c:	dde9      	ble.n	8012b42 <__sflush_r+0xae>
 8012b6e:	6a21      	ldr	r1, [r4, #32]
 8012b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012b72:	4643      	mov	r3, r8
 8012b74:	463a      	mov	r2, r7
 8012b76:	4628      	mov	r0, r5
 8012b78:	47b0      	blx	r6
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	dc08      	bgt.n	8012b90 <__sflush_r+0xfc>
 8012b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b86:	81a3      	strh	r3, [r4, #12]
 8012b88:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b90:	4407      	add	r7, r0
 8012b92:	eba8 0800 	sub.w	r8, r8, r0
 8012b96:	e7e7      	b.n	8012b68 <__sflush_r+0xd4>
 8012b98:	dfbffffe 	.word	0xdfbffffe

08012b9c <_fflush_r>:
 8012b9c:	b538      	push	{r3, r4, r5, lr}
 8012b9e:	690b      	ldr	r3, [r1, #16]
 8012ba0:	4605      	mov	r5, r0
 8012ba2:	460c      	mov	r4, r1
 8012ba4:	b913      	cbnz	r3, 8012bac <_fflush_r+0x10>
 8012ba6:	2500      	movs	r5, #0
 8012ba8:	4628      	mov	r0, r5
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	b118      	cbz	r0, 8012bb6 <_fflush_r+0x1a>
 8012bae:	6a03      	ldr	r3, [r0, #32]
 8012bb0:	b90b      	cbnz	r3, 8012bb6 <_fflush_r+0x1a>
 8012bb2:	f7fd f9d5 	bl	800ff60 <__sinit>
 8012bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d0f3      	beq.n	8012ba6 <_fflush_r+0xa>
 8012bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012bc0:	07d0      	lsls	r0, r2, #31
 8012bc2:	d404      	bmi.n	8012bce <_fflush_r+0x32>
 8012bc4:	0599      	lsls	r1, r3, #22
 8012bc6:	d402      	bmi.n	8012bce <_fflush_r+0x32>
 8012bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012bca:	f7fd faf2 	bl	80101b2 <__retarget_lock_acquire_recursive>
 8012bce:	4628      	mov	r0, r5
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	f7ff ff5f 	bl	8012a94 <__sflush_r>
 8012bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012bd8:	07da      	lsls	r2, r3, #31
 8012bda:	4605      	mov	r5, r0
 8012bdc:	d4e4      	bmi.n	8012ba8 <_fflush_r+0xc>
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	059b      	lsls	r3, r3, #22
 8012be2:	d4e1      	bmi.n	8012ba8 <_fflush_r+0xc>
 8012be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012be6:	f7fd fae5 	bl	80101b4 <__retarget_lock_release_recursive>
 8012bea:	e7dd      	b.n	8012ba8 <_fflush_r+0xc>

08012bec <__swbuf_r>:
 8012bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bee:	460e      	mov	r6, r1
 8012bf0:	4614      	mov	r4, r2
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	b118      	cbz	r0, 8012bfe <__swbuf_r+0x12>
 8012bf6:	6a03      	ldr	r3, [r0, #32]
 8012bf8:	b90b      	cbnz	r3, 8012bfe <__swbuf_r+0x12>
 8012bfa:	f7fd f9b1 	bl	800ff60 <__sinit>
 8012bfe:	69a3      	ldr	r3, [r4, #24]
 8012c00:	60a3      	str	r3, [r4, #8]
 8012c02:	89a3      	ldrh	r3, [r4, #12]
 8012c04:	071a      	lsls	r2, r3, #28
 8012c06:	d501      	bpl.n	8012c0c <__swbuf_r+0x20>
 8012c08:	6923      	ldr	r3, [r4, #16]
 8012c0a:	b943      	cbnz	r3, 8012c1e <__swbuf_r+0x32>
 8012c0c:	4621      	mov	r1, r4
 8012c0e:	4628      	mov	r0, r5
 8012c10:	f000 f82a 	bl	8012c68 <__swsetup_r>
 8012c14:	b118      	cbz	r0, 8012c1e <__swbuf_r+0x32>
 8012c16:	f04f 37ff 	mov.w	r7, #4294967295
 8012c1a:	4638      	mov	r0, r7
 8012c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c1e:	6823      	ldr	r3, [r4, #0]
 8012c20:	6922      	ldr	r2, [r4, #16]
 8012c22:	1a98      	subs	r0, r3, r2
 8012c24:	6963      	ldr	r3, [r4, #20]
 8012c26:	b2f6      	uxtb	r6, r6
 8012c28:	4283      	cmp	r3, r0
 8012c2a:	4637      	mov	r7, r6
 8012c2c:	dc05      	bgt.n	8012c3a <__swbuf_r+0x4e>
 8012c2e:	4621      	mov	r1, r4
 8012c30:	4628      	mov	r0, r5
 8012c32:	f7ff ffb3 	bl	8012b9c <_fflush_r>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	d1ed      	bne.n	8012c16 <__swbuf_r+0x2a>
 8012c3a:	68a3      	ldr	r3, [r4, #8]
 8012c3c:	3b01      	subs	r3, #1
 8012c3e:	60a3      	str	r3, [r4, #8]
 8012c40:	6823      	ldr	r3, [r4, #0]
 8012c42:	1c5a      	adds	r2, r3, #1
 8012c44:	6022      	str	r2, [r4, #0]
 8012c46:	701e      	strb	r6, [r3, #0]
 8012c48:	6962      	ldr	r2, [r4, #20]
 8012c4a:	1c43      	adds	r3, r0, #1
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d004      	beq.n	8012c5a <__swbuf_r+0x6e>
 8012c50:	89a3      	ldrh	r3, [r4, #12]
 8012c52:	07db      	lsls	r3, r3, #31
 8012c54:	d5e1      	bpl.n	8012c1a <__swbuf_r+0x2e>
 8012c56:	2e0a      	cmp	r6, #10
 8012c58:	d1df      	bne.n	8012c1a <__swbuf_r+0x2e>
 8012c5a:	4621      	mov	r1, r4
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f7ff ff9d 	bl	8012b9c <_fflush_r>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d0d9      	beq.n	8012c1a <__swbuf_r+0x2e>
 8012c66:	e7d6      	b.n	8012c16 <__swbuf_r+0x2a>

08012c68 <__swsetup_r>:
 8012c68:	b538      	push	{r3, r4, r5, lr}
 8012c6a:	4b29      	ldr	r3, [pc, #164]	@ (8012d10 <__swsetup_r+0xa8>)
 8012c6c:	4605      	mov	r5, r0
 8012c6e:	6818      	ldr	r0, [r3, #0]
 8012c70:	460c      	mov	r4, r1
 8012c72:	b118      	cbz	r0, 8012c7c <__swsetup_r+0x14>
 8012c74:	6a03      	ldr	r3, [r0, #32]
 8012c76:	b90b      	cbnz	r3, 8012c7c <__swsetup_r+0x14>
 8012c78:	f7fd f972 	bl	800ff60 <__sinit>
 8012c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c80:	0719      	lsls	r1, r3, #28
 8012c82:	d422      	bmi.n	8012cca <__swsetup_r+0x62>
 8012c84:	06da      	lsls	r2, r3, #27
 8012c86:	d407      	bmi.n	8012c98 <__swsetup_r+0x30>
 8012c88:	2209      	movs	r2, #9
 8012c8a:	602a      	str	r2, [r5, #0]
 8012c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c90:	81a3      	strh	r3, [r4, #12]
 8012c92:	f04f 30ff 	mov.w	r0, #4294967295
 8012c96:	e033      	b.n	8012d00 <__swsetup_r+0x98>
 8012c98:	0758      	lsls	r0, r3, #29
 8012c9a:	d512      	bpl.n	8012cc2 <__swsetup_r+0x5a>
 8012c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c9e:	b141      	cbz	r1, 8012cb2 <__swsetup_r+0x4a>
 8012ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ca4:	4299      	cmp	r1, r3
 8012ca6:	d002      	beq.n	8012cae <__swsetup_r+0x46>
 8012ca8:	4628      	mov	r0, r5
 8012caa:	f7fe f877 	bl	8010d9c <_free_r>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8012cb2:	89a3      	ldrh	r3, [r4, #12]
 8012cb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012cb8:	81a3      	strh	r3, [r4, #12]
 8012cba:	2300      	movs	r3, #0
 8012cbc:	6063      	str	r3, [r4, #4]
 8012cbe:	6923      	ldr	r3, [r4, #16]
 8012cc0:	6023      	str	r3, [r4, #0]
 8012cc2:	89a3      	ldrh	r3, [r4, #12]
 8012cc4:	f043 0308 	orr.w	r3, r3, #8
 8012cc8:	81a3      	strh	r3, [r4, #12]
 8012cca:	6923      	ldr	r3, [r4, #16]
 8012ccc:	b94b      	cbnz	r3, 8012ce2 <__swsetup_r+0x7a>
 8012cce:	89a3      	ldrh	r3, [r4, #12]
 8012cd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012cd8:	d003      	beq.n	8012ce2 <__swsetup_r+0x7a>
 8012cda:	4621      	mov	r1, r4
 8012cdc:	4628      	mov	r0, r5
 8012cde:	f000 fc4f 	bl	8013580 <__smakebuf_r>
 8012ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ce6:	f013 0201 	ands.w	r2, r3, #1
 8012cea:	d00a      	beq.n	8012d02 <__swsetup_r+0x9a>
 8012cec:	2200      	movs	r2, #0
 8012cee:	60a2      	str	r2, [r4, #8]
 8012cf0:	6962      	ldr	r2, [r4, #20]
 8012cf2:	4252      	negs	r2, r2
 8012cf4:	61a2      	str	r2, [r4, #24]
 8012cf6:	6922      	ldr	r2, [r4, #16]
 8012cf8:	b942      	cbnz	r2, 8012d0c <__swsetup_r+0xa4>
 8012cfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012cfe:	d1c5      	bne.n	8012c8c <__swsetup_r+0x24>
 8012d00:	bd38      	pop	{r3, r4, r5, pc}
 8012d02:	0799      	lsls	r1, r3, #30
 8012d04:	bf58      	it	pl
 8012d06:	6962      	ldrpl	r2, [r4, #20]
 8012d08:	60a2      	str	r2, [r4, #8]
 8012d0a:	e7f4      	b.n	8012cf6 <__swsetup_r+0x8e>
 8012d0c:	2000      	movs	r0, #0
 8012d0e:	e7f7      	b.n	8012d00 <__swsetup_r+0x98>
 8012d10:	2400001c 	.word	0x2400001c

08012d14 <memmove>:
 8012d14:	4288      	cmp	r0, r1
 8012d16:	b510      	push	{r4, lr}
 8012d18:	eb01 0402 	add.w	r4, r1, r2
 8012d1c:	d902      	bls.n	8012d24 <memmove+0x10>
 8012d1e:	4284      	cmp	r4, r0
 8012d20:	4623      	mov	r3, r4
 8012d22:	d807      	bhi.n	8012d34 <memmove+0x20>
 8012d24:	1e43      	subs	r3, r0, #1
 8012d26:	42a1      	cmp	r1, r4
 8012d28:	d008      	beq.n	8012d3c <memmove+0x28>
 8012d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d32:	e7f8      	b.n	8012d26 <memmove+0x12>
 8012d34:	4402      	add	r2, r0
 8012d36:	4601      	mov	r1, r0
 8012d38:	428a      	cmp	r2, r1
 8012d3a:	d100      	bne.n	8012d3e <memmove+0x2a>
 8012d3c:	bd10      	pop	{r4, pc}
 8012d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d46:	e7f7      	b.n	8012d38 <memmove+0x24>

08012d48 <strncmp>:
 8012d48:	b510      	push	{r4, lr}
 8012d4a:	b16a      	cbz	r2, 8012d68 <strncmp+0x20>
 8012d4c:	3901      	subs	r1, #1
 8012d4e:	1884      	adds	r4, r0, r2
 8012d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d103      	bne.n	8012d64 <strncmp+0x1c>
 8012d5c:	42a0      	cmp	r0, r4
 8012d5e:	d001      	beq.n	8012d64 <strncmp+0x1c>
 8012d60:	2a00      	cmp	r2, #0
 8012d62:	d1f5      	bne.n	8012d50 <strncmp+0x8>
 8012d64:	1ad0      	subs	r0, r2, r3
 8012d66:	bd10      	pop	{r4, pc}
 8012d68:	4610      	mov	r0, r2
 8012d6a:	e7fc      	b.n	8012d66 <strncmp+0x1e>

08012d6c <_sbrk_r>:
 8012d6c:	b538      	push	{r3, r4, r5, lr}
 8012d6e:	4d06      	ldr	r5, [pc, #24]	@ (8012d88 <_sbrk_r+0x1c>)
 8012d70:	2300      	movs	r3, #0
 8012d72:	4604      	mov	r4, r0
 8012d74:	4608      	mov	r0, r1
 8012d76:	602b      	str	r3, [r5, #0]
 8012d78:	f7f0 fb06 	bl	8003388 <_sbrk>
 8012d7c:	1c43      	adds	r3, r0, #1
 8012d7e:	d102      	bne.n	8012d86 <_sbrk_r+0x1a>
 8012d80:	682b      	ldr	r3, [r5, #0]
 8012d82:	b103      	cbz	r3, 8012d86 <_sbrk_r+0x1a>
 8012d84:	6023      	str	r3, [r4, #0]
 8012d86:	bd38      	pop	{r3, r4, r5, pc}
 8012d88:	24000d00 	.word	0x24000d00
 8012d8c:	00000000 	.word	0x00000000

08012d90 <nan>:
 8012d90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012d98 <nan+0x8>
 8012d94:	4770      	bx	lr
 8012d96:	bf00      	nop
 8012d98:	00000000 	.word	0x00000000
 8012d9c:	7ff80000 	.word	0x7ff80000

08012da0 <__assert_func>:
 8012da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012da2:	4614      	mov	r4, r2
 8012da4:	461a      	mov	r2, r3
 8012da6:	4b09      	ldr	r3, [pc, #36]	@ (8012dcc <__assert_func+0x2c>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	4605      	mov	r5, r0
 8012dac:	68d8      	ldr	r0, [r3, #12]
 8012dae:	b954      	cbnz	r4, 8012dc6 <__assert_func+0x26>
 8012db0:	4b07      	ldr	r3, [pc, #28]	@ (8012dd0 <__assert_func+0x30>)
 8012db2:	461c      	mov	r4, r3
 8012db4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012db8:	9100      	str	r1, [sp, #0]
 8012dba:	462b      	mov	r3, r5
 8012dbc:	4905      	ldr	r1, [pc, #20]	@ (8012dd4 <__assert_func+0x34>)
 8012dbe:	f000 fba7 	bl	8013510 <fiprintf>
 8012dc2:	f000 fc3b 	bl	801363c <abort>
 8012dc6:	4b04      	ldr	r3, [pc, #16]	@ (8012dd8 <__assert_func+0x38>)
 8012dc8:	e7f4      	b.n	8012db4 <__assert_func+0x14>
 8012dca:	bf00      	nop
 8012dcc:	2400001c 	.word	0x2400001c
 8012dd0:	08013b55 	.word	0x08013b55
 8012dd4:	08013b27 	.word	0x08013b27
 8012dd8:	08013b1a 	.word	0x08013b1a

08012ddc <_calloc_r>:
 8012ddc:	b570      	push	{r4, r5, r6, lr}
 8012dde:	fba1 5402 	umull	r5, r4, r1, r2
 8012de2:	b93c      	cbnz	r4, 8012df4 <_calloc_r+0x18>
 8012de4:	4629      	mov	r1, r5
 8012de6:	f7fe f84d 	bl	8010e84 <_malloc_r>
 8012dea:	4606      	mov	r6, r0
 8012dec:	b928      	cbnz	r0, 8012dfa <_calloc_r+0x1e>
 8012dee:	2600      	movs	r6, #0
 8012df0:	4630      	mov	r0, r6
 8012df2:	bd70      	pop	{r4, r5, r6, pc}
 8012df4:	220c      	movs	r2, #12
 8012df6:	6002      	str	r2, [r0, #0]
 8012df8:	e7f9      	b.n	8012dee <_calloc_r+0x12>
 8012dfa:	462a      	mov	r2, r5
 8012dfc:	4621      	mov	r1, r4
 8012dfe:	f7fd f95a 	bl	80100b6 <memset>
 8012e02:	e7f5      	b.n	8012df0 <_calloc_r+0x14>

08012e04 <rshift>:
 8012e04:	6903      	ldr	r3, [r0, #16]
 8012e06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012e0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012e12:	f100 0414 	add.w	r4, r0, #20
 8012e16:	dd45      	ble.n	8012ea4 <rshift+0xa0>
 8012e18:	f011 011f 	ands.w	r1, r1, #31
 8012e1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012e20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012e24:	d10c      	bne.n	8012e40 <rshift+0x3c>
 8012e26:	f100 0710 	add.w	r7, r0, #16
 8012e2a:	4629      	mov	r1, r5
 8012e2c:	42b1      	cmp	r1, r6
 8012e2e:	d334      	bcc.n	8012e9a <rshift+0x96>
 8012e30:	1a9b      	subs	r3, r3, r2
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	1eea      	subs	r2, r5, #3
 8012e36:	4296      	cmp	r6, r2
 8012e38:	bf38      	it	cc
 8012e3a:	2300      	movcc	r3, #0
 8012e3c:	4423      	add	r3, r4
 8012e3e:	e015      	b.n	8012e6c <rshift+0x68>
 8012e40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012e44:	f1c1 0820 	rsb	r8, r1, #32
 8012e48:	40cf      	lsrs	r7, r1
 8012e4a:	f105 0e04 	add.w	lr, r5, #4
 8012e4e:	46a1      	mov	r9, r4
 8012e50:	4576      	cmp	r6, lr
 8012e52:	46f4      	mov	ip, lr
 8012e54:	d815      	bhi.n	8012e82 <rshift+0x7e>
 8012e56:	1a9a      	subs	r2, r3, r2
 8012e58:	0092      	lsls	r2, r2, #2
 8012e5a:	3a04      	subs	r2, #4
 8012e5c:	3501      	adds	r5, #1
 8012e5e:	42ae      	cmp	r6, r5
 8012e60:	bf38      	it	cc
 8012e62:	2200      	movcc	r2, #0
 8012e64:	18a3      	adds	r3, r4, r2
 8012e66:	50a7      	str	r7, [r4, r2]
 8012e68:	b107      	cbz	r7, 8012e6c <rshift+0x68>
 8012e6a:	3304      	adds	r3, #4
 8012e6c:	1b1a      	subs	r2, r3, r4
 8012e6e:	42a3      	cmp	r3, r4
 8012e70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012e74:	bf08      	it	eq
 8012e76:	2300      	moveq	r3, #0
 8012e78:	6102      	str	r2, [r0, #16]
 8012e7a:	bf08      	it	eq
 8012e7c:	6143      	streq	r3, [r0, #20]
 8012e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e82:	f8dc c000 	ldr.w	ip, [ip]
 8012e86:	fa0c fc08 	lsl.w	ip, ip, r8
 8012e8a:	ea4c 0707 	orr.w	r7, ip, r7
 8012e8e:	f849 7b04 	str.w	r7, [r9], #4
 8012e92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012e96:	40cf      	lsrs	r7, r1
 8012e98:	e7da      	b.n	8012e50 <rshift+0x4c>
 8012e9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8012e9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012ea2:	e7c3      	b.n	8012e2c <rshift+0x28>
 8012ea4:	4623      	mov	r3, r4
 8012ea6:	e7e1      	b.n	8012e6c <rshift+0x68>

08012ea8 <__hexdig_fun>:
 8012ea8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012eac:	2b09      	cmp	r3, #9
 8012eae:	d802      	bhi.n	8012eb6 <__hexdig_fun+0xe>
 8012eb0:	3820      	subs	r0, #32
 8012eb2:	b2c0      	uxtb	r0, r0
 8012eb4:	4770      	bx	lr
 8012eb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012eba:	2b05      	cmp	r3, #5
 8012ebc:	d801      	bhi.n	8012ec2 <__hexdig_fun+0x1a>
 8012ebe:	3847      	subs	r0, #71	@ 0x47
 8012ec0:	e7f7      	b.n	8012eb2 <__hexdig_fun+0xa>
 8012ec2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012ec6:	2b05      	cmp	r3, #5
 8012ec8:	d801      	bhi.n	8012ece <__hexdig_fun+0x26>
 8012eca:	3827      	subs	r0, #39	@ 0x27
 8012ecc:	e7f1      	b.n	8012eb2 <__hexdig_fun+0xa>
 8012ece:	2000      	movs	r0, #0
 8012ed0:	4770      	bx	lr
	...

08012ed4 <__gethex>:
 8012ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ed8:	b085      	sub	sp, #20
 8012eda:	468a      	mov	sl, r1
 8012edc:	9302      	str	r3, [sp, #8]
 8012ede:	680b      	ldr	r3, [r1, #0]
 8012ee0:	9001      	str	r0, [sp, #4]
 8012ee2:	4690      	mov	r8, r2
 8012ee4:	1c9c      	adds	r4, r3, #2
 8012ee6:	46a1      	mov	r9, r4
 8012ee8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012eec:	2830      	cmp	r0, #48	@ 0x30
 8012eee:	d0fa      	beq.n	8012ee6 <__gethex+0x12>
 8012ef0:	eba9 0303 	sub.w	r3, r9, r3
 8012ef4:	f1a3 0b02 	sub.w	fp, r3, #2
 8012ef8:	f7ff ffd6 	bl	8012ea8 <__hexdig_fun>
 8012efc:	4605      	mov	r5, r0
 8012efe:	2800      	cmp	r0, #0
 8012f00:	d168      	bne.n	8012fd4 <__gethex+0x100>
 8012f02:	49a0      	ldr	r1, [pc, #640]	@ (8013184 <__gethex+0x2b0>)
 8012f04:	2201      	movs	r2, #1
 8012f06:	4648      	mov	r0, r9
 8012f08:	f7ff ff1e 	bl	8012d48 <strncmp>
 8012f0c:	4607      	mov	r7, r0
 8012f0e:	2800      	cmp	r0, #0
 8012f10:	d167      	bne.n	8012fe2 <__gethex+0x10e>
 8012f12:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012f16:	4626      	mov	r6, r4
 8012f18:	f7ff ffc6 	bl	8012ea8 <__hexdig_fun>
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	d062      	beq.n	8012fe6 <__gethex+0x112>
 8012f20:	4623      	mov	r3, r4
 8012f22:	7818      	ldrb	r0, [r3, #0]
 8012f24:	2830      	cmp	r0, #48	@ 0x30
 8012f26:	4699      	mov	r9, r3
 8012f28:	f103 0301 	add.w	r3, r3, #1
 8012f2c:	d0f9      	beq.n	8012f22 <__gethex+0x4e>
 8012f2e:	f7ff ffbb 	bl	8012ea8 <__hexdig_fun>
 8012f32:	fab0 f580 	clz	r5, r0
 8012f36:	096d      	lsrs	r5, r5, #5
 8012f38:	f04f 0b01 	mov.w	fp, #1
 8012f3c:	464a      	mov	r2, r9
 8012f3e:	4616      	mov	r6, r2
 8012f40:	3201      	adds	r2, #1
 8012f42:	7830      	ldrb	r0, [r6, #0]
 8012f44:	f7ff ffb0 	bl	8012ea8 <__hexdig_fun>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d1f8      	bne.n	8012f3e <__gethex+0x6a>
 8012f4c:	498d      	ldr	r1, [pc, #564]	@ (8013184 <__gethex+0x2b0>)
 8012f4e:	2201      	movs	r2, #1
 8012f50:	4630      	mov	r0, r6
 8012f52:	f7ff fef9 	bl	8012d48 <strncmp>
 8012f56:	2800      	cmp	r0, #0
 8012f58:	d13f      	bne.n	8012fda <__gethex+0x106>
 8012f5a:	b944      	cbnz	r4, 8012f6e <__gethex+0x9a>
 8012f5c:	1c74      	adds	r4, r6, #1
 8012f5e:	4622      	mov	r2, r4
 8012f60:	4616      	mov	r6, r2
 8012f62:	3201      	adds	r2, #1
 8012f64:	7830      	ldrb	r0, [r6, #0]
 8012f66:	f7ff ff9f 	bl	8012ea8 <__hexdig_fun>
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	d1f8      	bne.n	8012f60 <__gethex+0x8c>
 8012f6e:	1ba4      	subs	r4, r4, r6
 8012f70:	00a7      	lsls	r7, r4, #2
 8012f72:	7833      	ldrb	r3, [r6, #0]
 8012f74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012f78:	2b50      	cmp	r3, #80	@ 0x50
 8012f7a:	d13e      	bne.n	8012ffa <__gethex+0x126>
 8012f7c:	7873      	ldrb	r3, [r6, #1]
 8012f7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012f80:	d033      	beq.n	8012fea <__gethex+0x116>
 8012f82:	2b2d      	cmp	r3, #45	@ 0x2d
 8012f84:	d034      	beq.n	8012ff0 <__gethex+0x11c>
 8012f86:	1c71      	adds	r1, r6, #1
 8012f88:	2400      	movs	r4, #0
 8012f8a:	7808      	ldrb	r0, [r1, #0]
 8012f8c:	f7ff ff8c 	bl	8012ea8 <__hexdig_fun>
 8012f90:	1e43      	subs	r3, r0, #1
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	2b18      	cmp	r3, #24
 8012f96:	d830      	bhi.n	8012ffa <__gethex+0x126>
 8012f98:	f1a0 0210 	sub.w	r2, r0, #16
 8012f9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012fa0:	f7ff ff82 	bl	8012ea8 <__hexdig_fun>
 8012fa4:	f100 3cff 	add.w	ip, r0, #4294967295
 8012fa8:	fa5f fc8c 	uxtb.w	ip, ip
 8012fac:	f1bc 0f18 	cmp.w	ip, #24
 8012fb0:	f04f 030a 	mov.w	r3, #10
 8012fb4:	d91e      	bls.n	8012ff4 <__gethex+0x120>
 8012fb6:	b104      	cbz	r4, 8012fba <__gethex+0xe6>
 8012fb8:	4252      	negs	r2, r2
 8012fba:	4417      	add	r7, r2
 8012fbc:	f8ca 1000 	str.w	r1, [sl]
 8012fc0:	b1ed      	cbz	r5, 8012ffe <__gethex+0x12a>
 8012fc2:	f1bb 0f00 	cmp.w	fp, #0
 8012fc6:	bf0c      	ite	eq
 8012fc8:	2506      	moveq	r5, #6
 8012fca:	2500      	movne	r5, #0
 8012fcc:	4628      	mov	r0, r5
 8012fce:	b005      	add	sp, #20
 8012fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd4:	2500      	movs	r5, #0
 8012fd6:	462c      	mov	r4, r5
 8012fd8:	e7b0      	b.n	8012f3c <__gethex+0x68>
 8012fda:	2c00      	cmp	r4, #0
 8012fdc:	d1c7      	bne.n	8012f6e <__gethex+0x9a>
 8012fde:	4627      	mov	r7, r4
 8012fe0:	e7c7      	b.n	8012f72 <__gethex+0x9e>
 8012fe2:	464e      	mov	r6, r9
 8012fe4:	462f      	mov	r7, r5
 8012fe6:	2501      	movs	r5, #1
 8012fe8:	e7c3      	b.n	8012f72 <__gethex+0x9e>
 8012fea:	2400      	movs	r4, #0
 8012fec:	1cb1      	adds	r1, r6, #2
 8012fee:	e7cc      	b.n	8012f8a <__gethex+0xb6>
 8012ff0:	2401      	movs	r4, #1
 8012ff2:	e7fb      	b.n	8012fec <__gethex+0x118>
 8012ff4:	fb03 0002 	mla	r0, r3, r2, r0
 8012ff8:	e7ce      	b.n	8012f98 <__gethex+0xc4>
 8012ffa:	4631      	mov	r1, r6
 8012ffc:	e7de      	b.n	8012fbc <__gethex+0xe8>
 8012ffe:	eba6 0309 	sub.w	r3, r6, r9
 8013002:	3b01      	subs	r3, #1
 8013004:	4629      	mov	r1, r5
 8013006:	2b07      	cmp	r3, #7
 8013008:	dc0a      	bgt.n	8013020 <__gethex+0x14c>
 801300a:	9801      	ldr	r0, [sp, #4]
 801300c:	f7fd ffc6 	bl	8010f9c <_Balloc>
 8013010:	4604      	mov	r4, r0
 8013012:	b940      	cbnz	r0, 8013026 <__gethex+0x152>
 8013014:	4b5c      	ldr	r3, [pc, #368]	@ (8013188 <__gethex+0x2b4>)
 8013016:	4602      	mov	r2, r0
 8013018:	21e4      	movs	r1, #228	@ 0xe4
 801301a:	485c      	ldr	r0, [pc, #368]	@ (801318c <__gethex+0x2b8>)
 801301c:	f7ff fec0 	bl	8012da0 <__assert_func>
 8013020:	3101      	adds	r1, #1
 8013022:	105b      	asrs	r3, r3, #1
 8013024:	e7ef      	b.n	8013006 <__gethex+0x132>
 8013026:	f100 0a14 	add.w	sl, r0, #20
 801302a:	2300      	movs	r3, #0
 801302c:	4655      	mov	r5, sl
 801302e:	469b      	mov	fp, r3
 8013030:	45b1      	cmp	r9, r6
 8013032:	d337      	bcc.n	80130a4 <__gethex+0x1d0>
 8013034:	f845 bb04 	str.w	fp, [r5], #4
 8013038:	eba5 050a 	sub.w	r5, r5, sl
 801303c:	10ad      	asrs	r5, r5, #2
 801303e:	6125      	str	r5, [r4, #16]
 8013040:	4658      	mov	r0, fp
 8013042:	f7fe f89d 	bl	8011180 <__hi0bits>
 8013046:	016d      	lsls	r5, r5, #5
 8013048:	f8d8 6000 	ldr.w	r6, [r8]
 801304c:	1a2d      	subs	r5, r5, r0
 801304e:	42b5      	cmp	r5, r6
 8013050:	dd54      	ble.n	80130fc <__gethex+0x228>
 8013052:	1bad      	subs	r5, r5, r6
 8013054:	4629      	mov	r1, r5
 8013056:	4620      	mov	r0, r4
 8013058:	f7fe fc2e 	bl	80118b8 <__any_on>
 801305c:	4681      	mov	r9, r0
 801305e:	b178      	cbz	r0, 8013080 <__gethex+0x1ac>
 8013060:	1e6b      	subs	r3, r5, #1
 8013062:	1159      	asrs	r1, r3, #5
 8013064:	f003 021f 	and.w	r2, r3, #31
 8013068:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801306c:	f04f 0901 	mov.w	r9, #1
 8013070:	fa09 f202 	lsl.w	r2, r9, r2
 8013074:	420a      	tst	r2, r1
 8013076:	d003      	beq.n	8013080 <__gethex+0x1ac>
 8013078:	454b      	cmp	r3, r9
 801307a:	dc36      	bgt.n	80130ea <__gethex+0x216>
 801307c:	f04f 0902 	mov.w	r9, #2
 8013080:	4629      	mov	r1, r5
 8013082:	4620      	mov	r0, r4
 8013084:	f7ff febe 	bl	8012e04 <rshift>
 8013088:	442f      	add	r7, r5
 801308a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801308e:	42bb      	cmp	r3, r7
 8013090:	da42      	bge.n	8013118 <__gethex+0x244>
 8013092:	9801      	ldr	r0, [sp, #4]
 8013094:	4621      	mov	r1, r4
 8013096:	f7fd ffc1 	bl	801101c <_Bfree>
 801309a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801309c:	2300      	movs	r3, #0
 801309e:	6013      	str	r3, [r2, #0]
 80130a0:	25a3      	movs	r5, #163	@ 0xa3
 80130a2:	e793      	b.n	8012fcc <__gethex+0xf8>
 80130a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80130a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80130aa:	d012      	beq.n	80130d2 <__gethex+0x1fe>
 80130ac:	2b20      	cmp	r3, #32
 80130ae:	d104      	bne.n	80130ba <__gethex+0x1e6>
 80130b0:	f845 bb04 	str.w	fp, [r5], #4
 80130b4:	f04f 0b00 	mov.w	fp, #0
 80130b8:	465b      	mov	r3, fp
 80130ba:	7830      	ldrb	r0, [r6, #0]
 80130bc:	9303      	str	r3, [sp, #12]
 80130be:	f7ff fef3 	bl	8012ea8 <__hexdig_fun>
 80130c2:	9b03      	ldr	r3, [sp, #12]
 80130c4:	f000 000f 	and.w	r0, r0, #15
 80130c8:	4098      	lsls	r0, r3
 80130ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80130ce:	3304      	adds	r3, #4
 80130d0:	e7ae      	b.n	8013030 <__gethex+0x15c>
 80130d2:	45b1      	cmp	r9, r6
 80130d4:	d8ea      	bhi.n	80130ac <__gethex+0x1d8>
 80130d6:	492b      	ldr	r1, [pc, #172]	@ (8013184 <__gethex+0x2b0>)
 80130d8:	9303      	str	r3, [sp, #12]
 80130da:	2201      	movs	r2, #1
 80130dc:	4630      	mov	r0, r6
 80130de:	f7ff fe33 	bl	8012d48 <strncmp>
 80130e2:	9b03      	ldr	r3, [sp, #12]
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d1e1      	bne.n	80130ac <__gethex+0x1d8>
 80130e8:	e7a2      	b.n	8013030 <__gethex+0x15c>
 80130ea:	1ea9      	subs	r1, r5, #2
 80130ec:	4620      	mov	r0, r4
 80130ee:	f7fe fbe3 	bl	80118b8 <__any_on>
 80130f2:	2800      	cmp	r0, #0
 80130f4:	d0c2      	beq.n	801307c <__gethex+0x1a8>
 80130f6:	f04f 0903 	mov.w	r9, #3
 80130fa:	e7c1      	b.n	8013080 <__gethex+0x1ac>
 80130fc:	da09      	bge.n	8013112 <__gethex+0x23e>
 80130fe:	1b75      	subs	r5, r6, r5
 8013100:	4621      	mov	r1, r4
 8013102:	9801      	ldr	r0, [sp, #4]
 8013104:	462a      	mov	r2, r5
 8013106:	f7fe f9a1 	bl	801144c <__lshift>
 801310a:	1b7f      	subs	r7, r7, r5
 801310c:	4604      	mov	r4, r0
 801310e:	f100 0a14 	add.w	sl, r0, #20
 8013112:	f04f 0900 	mov.w	r9, #0
 8013116:	e7b8      	b.n	801308a <__gethex+0x1b6>
 8013118:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801311c:	42bd      	cmp	r5, r7
 801311e:	dd6f      	ble.n	8013200 <__gethex+0x32c>
 8013120:	1bed      	subs	r5, r5, r7
 8013122:	42ae      	cmp	r6, r5
 8013124:	dc34      	bgt.n	8013190 <__gethex+0x2bc>
 8013126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801312a:	2b02      	cmp	r3, #2
 801312c:	d022      	beq.n	8013174 <__gethex+0x2a0>
 801312e:	2b03      	cmp	r3, #3
 8013130:	d024      	beq.n	801317c <__gethex+0x2a8>
 8013132:	2b01      	cmp	r3, #1
 8013134:	d115      	bne.n	8013162 <__gethex+0x28e>
 8013136:	42ae      	cmp	r6, r5
 8013138:	d113      	bne.n	8013162 <__gethex+0x28e>
 801313a:	2e01      	cmp	r6, #1
 801313c:	d10b      	bne.n	8013156 <__gethex+0x282>
 801313e:	9a02      	ldr	r2, [sp, #8]
 8013140:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013144:	6013      	str	r3, [r2, #0]
 8013146:	2301      	movs	r3, #1
 8013148:	6123      	str	r3, [r4, #16]
 801314a:	f8ca 3000 	str.w	r3, [sl]
 801314e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013150:	2562      	movs	r5, #98	@ 0x62
 8013152:	601c      	str	r4, [r3, #0]
 8013154:	e73a      	b.n	8012fcc <__gethex+0xf8>
 8013156:	1e71      	subs	r1, r6, #1
 8013158:	4620      	mov	r0, r4
 801315a:	f7fe fbad 	bl	80118b8 <__any_on>
 801315e:	2800      	cmp	r0, #0
 8013160:	d1ed      	bne.n	801313e <__gethex+0x26a>
 8013162:	9801      	ldr	r0, [sp, #4]
 8013164:	4621      	mov	r1, r4
 8013166:	f7fd ff59 	bl	801101c <_Bfree>
 801316a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801316c:	2300      	movs	r3, #0
 801316e:	6013      	str	r3, [r2, #0]
 8013170:	2550      	movs	r5, #80	@ 0x50
 8013172:	e72b      	b.n	8012fcc <__gethex+0xf8>
 8013174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013176:	2b00      	cmp	r3, #0
 8013178:	d1f3      	bne.n	8013162 <__gethex+0x28e>
 801317a:	e7e0      	b.n	801313e <__gethex+0x26a>
 801317c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801317e:	2b00      	cmp	r3, #0
 8013180:	d1dd      	bne.n	801313e <__gethex+0x26a>
 8013182:	e7ee      	b.n	8013162 <__gethex+0x28e>
 8013184:	080139a8 	.word	0x080139a8
 8013188:	08013841 	.word	0x08013841
 801318c:	08013b56 	.word	0x08013b56
 8013190:	1e6f      	subs	r7, r5, #1
 8013192:	f1b9 0f00 	cmp.w	r9, #0
 8013196:	d130      	bne.n	80131fa <__gethex+0x326>
 8013198:	b127      	cbz	r7, 80131a4 <__gethex+0x2d0>
 801319a:	4639      	mov	r1, r7
 801319c:	4620      	mov	r0, r4
 801319e:	f7fe fb8b 	bl	80118b8 <__any_on>
 80131a2:	4681      	mov	r9, r0
 80131a4:	117a      	asrs	r2, r7, #5
 80131a6:	2301      	movs	r3, #1
 80131a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80131ac:	f007 071f 	and.w	r7, r7, #31
 80131b0:	40bb      	lsls	r3, r7
 80131b2:	4213      	tst	r3, r2
 80131b4:	4629      	mov	r1, r5
 80131b6:	4620      	mov	r0, r4
 80131b8:	bf18      	it	ne
 80131ba:	f049 0902 	orrne.w	r9, r9, #2
 80131be:	f7ff fe21 	bl	8012e04 <rshift>
 80131c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80131c6:	1b76      	subs	r6, r6, r5
 80131c8:	2502      	movs	r5, #2
 80131ca:	f1b9 0f00 	cmp.w	r9, #0
 80131ce:	d047      	beq.n	8013260 <__gethex+0x38c>
 80131d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d015      	beq.n	8013204 <__gethex+0x330>
 80131d8:	2b03      	cmp	r3, #3
 80131da:	d017      	beq.n	801320c <__gethex+0x338>
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d109      	bne.n	80131f4 <__gethex+0x320>
 80131e0:	f019 0f02 	tst.w	r9, #2
 80131e4:	d006      	beq.n	80131f4 <__gethex+0x320>
 80131e6:	f8da 3000 	ldr.w	r3, [sl]
 80131ea:	ea49 0903 	orr.w	r9, r9, r3
 80131ee:	f019 0f01 	tst.w	r9, #1
 80131f2:	d10e      	bne.n	8013212 <__gethex+0x33e>
 80131f4:	f045 0510 	orr.w	r5, r5, #16
 80131f8:	e032      	b.n	8013260 <__gethex+0x38c>
 80131fa:	f04f 0901 	mov.w	r9, #1
 80131fe:	e7d1      	b.n	80131a4 <__gethex+0x2d0>
 8013200:	2501      	movs	r5, #1
 8013202:	e7e2      	b.n	80131ca <__gethex+0x2f6>
 8013204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013206:	f1c3 0301 	rsb	r3, r3, #1
 801320a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801320c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801320e:	2b00      	cmp	r3, #0
 8013210:	d0f0      	beq.n	80131f4 <__gethex+0x320>
 8013212:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013216:	f104 0314 	add.w	r3, r4, #20
 801321a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801321e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013222:	f04f 0c00 	mov.w	ip, #0
 8013226:	4618      	mov	r0, r3
 8013228:	f853 2b04 	ldr.w	r2, [r3], #4
 801322c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013230:	d01b      	beq.n	801326a <__gethex+0x396>
 8013232:	3201      	adds	r2, #1
 8013234:	6002      	str	r2, [r0, #0]
 8013236:	2d02      	cmp	r5, #2
 8013238:	f104 0314 	add.w	r3, r4, #20
 801323c:	d13c      	bne.n	80132b8 <__gethex+0x3e4>
 801323e:	f8d8 2000 	ldr.w	r2, [r8]
 8013242:	3a01      	subs	r2, #1
 8013244:	42b2      	cmp	r2, r6
 8013246:	d109      	bne.n	801325c <__gethex+0x388>
 8013248:	1171      	asrs	r1, r6, #5
 801324a:	2201      	movs	r2, #1
 801324c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013250:	f006 061f 	and.w	r6, r6, #31
 8013254:	fa02 f606 	lsl.w	r6, r2, r6
 8013258:	421e      	tst	r6, r3
 801325a:	d13a      	bne.n	80132d2 <__gethex+0x3fe>
 801325c:	f045 0520 	orr.w	r5, r5, #32
 8013260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013262:	601c      	str	r4, [r3, #0]
 8013264:	9b02      	ldr	r3, [sp, #8]
 8013266:	601f      	str	r7, [r3, #0]
 8013268:	e6b0      	b.n	8012fcc <__gethex+0xf8>
 801326a:	4299      	cmp	r1, r3
 801326c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013270:	d8d9      	bhi.n	8013226 <__gethex+0x352>
 8013272:	68a3      	ldr	r3, [r4, #8]
 8013274:	459b      	cmp	fp, r3
 8013276:	db17      	blt.n	80132a8 <__gethex+0x3d4>
 8013278:	6861      	ldr	r1, [r4, #4]
 801327a:	9801      	ldr	r0, [sp, #4]
 801327c:	3101      	adds	r1, #1
 801327e:	f7fd fe8d 	bl	8010f9c <_Balloc>
 8013282:	4681      	mov	r9, r0
 8013284:	b918      	cbnz	r0, 801328e <__gethex+0x3ba>
 8013286:	4b1a      	ldr	r3, [pc, #104]	@ (80132f0 <__gethex+0x41c>)
 8013288:	4602      	mov	r2, r0
 801328a:	2184      	movs	r1, #132	@ 0x84
 801328c:	e6c5      	b.n	801301a <__gethex+0x146>
 801328e:	6922      	ldr	r2, [r4, #16]
 8013290:	3202      	adds	r2, #2
 8013292:	f104 010c 	add.w	r1, r4, #12
 8013296:	0092      	lsls	r2, r2, #2
 8013298:	300c      	adds	r0, #12
 801329a:	f7fc ff8c 	bl	80101b6 <memcpy>
 801329e:	4621      	mov	r1, r4
 80132a0:	9801      	ldr	r0, [sp, #4]
 80132a2:	f7fd febb 	bl	801101c <_Bfree>
 80132a6:	464c      	mov	r4, r9
 80132a8:	6923      	ldr	r3, [r4, #16]
 80132aa:	1c5a      	adds	r2, r3, #1
 80132ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80132b0:	6122      	str	r2, [r4, #16]
 80132b2:	2201      	movs	r2, #1
 80132b4:	615a      	str	r2, [r3, #20]
 80132b6:	e7be      	b.n	8013236 <__gethex+0x362>
 80132b8:	6922      	ldr	r2, [r4, #16]
 80132ba:	455a      	cmp	r2, fp
 80132bc:	dd0b      	ble.n	80132d6 <__gethex+0x402>
 80132be:	2101      	movs	r1, #1
 80132c0:	4620      	mov	r0, r4
 80132c2:	f7ff fd9f 	bl	8012e04 <rshift>
 80132c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80132ca:	3701      	adds	r7, #1
 80132cc:	42bb      	cmp	r3, r7
 80132ce:	f6ff aee0 	blt.w	8013092 <__gethex+0x1be>
 80132d2:	2501      	movs	r5, #1
 80132d4:	e7c2      	b.n	801325c <__gethex+0x388>
 80132d6:	f016 061f 	ands.w	r6, r6, #31
 80132da:	d0fa      	beq.n	80132d2 <__gethex+0x3fe>
 80132dc:	4453      	add	r3, sl
 80132de:	f1c6 0620 	rsb	r6, r6, #32
 80132e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80132e6:	f7fd ff4b 	bl	8011180 <__hi0bits>
 80132ea:	42b0      	cmp	r0, r6
 80132ec:	dbe7      	blt.n	80132be <__gethex+0x3ea>
 80132ee:	e7f0      	b.n	80132d2 <__gethex+0x3fe>
 80132f0:	08013841 	.word	0x08013841

080132f4 <L_shift>:
 80132f4:	f1c2 0208 	rsb	r2, r2, #8
 80132f8:	0092      	lsls	r2, r2, #2
 80132fa:	b570      	push	{r4, r5, r6, lr}
 80132fc:	f1c2 0620 	rsb	r6, r2, #32
 8013300:	6843      	ldr	r3, [r0, #4]
 8013302:	6804      	ldr	r4, [r0, #0]
 8013304:	fa03 f506 	lsl.w	r5, r3, r6
 8013308:	432c      	orrs	r4, r5
 801330a:	40d3      	lsrs	r3, r2
 801330c:	6004      	str	r4, [r0, #0]
 801330e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013312:	4288      	cmp	r0, r1
 8013314:	d3f4      	bcc.n	8013300 <L_shift+0xc>
 8013316:	bd70      	pop	{r4, r5, r6, pc}

08013318 <__match>:
 8013318:	b530      	push	{r4, r5, lr}
 801331a:	6803      	ldr	r3, [r0, #0]
 801331c:	3301      	adds	r3, #1
 801331e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013322:	b914      	cbnz	r4, 801332a <__match+0x12>
 8013324:	6003      	str	r3, [r0, #0]
 8013326:	2001      	movs	r0, #1
 8013328:	bd30      	pop	{r4, r5, pc}
 801332a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801332e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013332:	2d19      	cmp	r5, #25
 8013334:	bf98      	it	ls
 8013336:	3220      	addls	r2, #32
 8013338:	42a2      	cmp	r2, r4
 801333a:	d0f0      	beq.n	801331e <__match+0x6>
 801333c:	2000      	movs	r0, #0
 801333e:	e7f3      	b.n	8013328 <__match+0x10>

08013340 <__hexnan>:
 8013340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013344:	680b      	ldr	r3, [r1, #0]
 8013346:	6801      	ldr	r1, [r0, #0]
 8013348:	115e      	asrs	r6, r3, #5
 801334a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801334e:	f013 031f 	ands.w	r3, r3, #31
 8013352:	b087      	sub	sp, #28
 8013354:	bf18      	it	ne
 8013356:	3604      	addne	r6, #4
 8013358:	2500      	movs	r5, #0
 801335a:	1f37      	subs	r7, r6, #4
 801335c:	4682      	mov	sl, r0
 801335e:	4690      	mov	r8, r2
 8013360:	9301      	str	r3, [sp, #4]
 8013362:	f846 5c04 	str.w	r5, [r6, #-4]
 8013366:	46b9      	mov	r9, r7
 8013368:	463c      	mov	r4, r7
 801336a:	9502      	str	r5, [sp, #8]
 801336c:	46ab      	mov	fp, r5
 801336e:	784a      	ldrb	r2, [r1, #1]
 8013370:	1c4b      	adds	r3, r1, #1
 8013372:	9303      	str	r3, [sp, #12]
 8013374:	b342      	cbz	r2, 80133c8 <__hexnan+0x88>
 8013376:	4610      	mov	r0, r2
 8013378:	9105      	str	r1, [sp, #20]
 801337a:	9204      	str	r2, [sp, #16]
 801337c:	f7ff fd94 	bl	8012ea8 <__hexdig_fun>
 8013380:	2800      	cmp	r0, #0
 8013382:	d151      	bne.n	8013428 <__hexnan+0xe8>
 8013384:	9a04      	ldr	r2, [sp, #16]
 8013386:	9905      	ldr	r1, [sp, #20]
 8013388:	2a20      	cmp	r2, #32
 801338a:	d818      	bhi.n	80133be <__hexnan+0x7e>
 801338c:	9b02      	ldr	r3, [sp, #8]
 801338e:	459b      	cmp	fp, r3
 8013390:	dd13      	ble.n	80133ba <__hexnan+0x7a>
 8013392:	454c      	cmp	r4, r9
 8013394:	d206      	bcs.n	80133a4 <__hexnan+0x64>
 8013396:	2d07      	cmp	r5, #7
 8013398:	dc04      	bgt.n	80133a4 <__hexnan+0x64>
 801339a:	462a      	mov	r2, r5
 801339c:	4649      	mov	r1, r9
 801339e:	4620      	mov	r0, r4
 80133a0:	f7ff ffa8 	bl	80132f4 <L_shift>
 80133a4:	4544      	cmp	r4, r8
 80133a6:	d952      	bls.n	801344e <__hexnan+0x10e>
 80133a8:	2300      	movs	r3, #0
 80133aa:	f1a4 0904 	sub.w	r9, r4, #4
 80133ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80133b2:	f8cd b008 	str.w	fp, [sp, #8]
 80133b6:	464c      	mov	r4, r9
 80133b8:	461d      	mov	r5, r3
 80133ba:	9903      	ldr	r1, [sp, #12]
 80133bc:	e7d7      	b.n	801336e <__hexnan+0x2e>
 80133be:	2a29      	cmp	r2, #41	@ 0x29
 80133c0:	d157      	bne.n	8013472 <__hexnan+0x132>
 80133c2:	3102      	adds	r1, #2
 80133c4:	f8ca 1000 	str.w	r1, [sl]
 80133c8:	f1bb 0f00 	cmp.w	fp, #0
 80133cc:	d051      	beq.n	8013472 <__hexnan+0x132>
 80133ce:	454c      	cmp	r4, r9
 80133d0:	d206      	bcs.n	80133e0 <__hexnan+0xa0>
 80133d2:	2d07      	cmp	r5, #7
 80133d4:	dc04      	bgt.n	80133e0 <__hexnan+0xa0>
 80133d6:	462a      	mov	r2, r5
 80133d8:	4649      	mov	r1, r9
 80133da:	4620      	mov	r0, r4
 80133dc:	f7ff ff8a 	bl	80132f4 <L_shift>
 80133e0:	4544      	cmp	r4, r8
 80133e2:	d936      	bls.n	8013452 <__hexnan+0x112>
 80133e4:	f1a8 0204 	sub.w	r2, r8, #4
 80133e8:	4623      	mov	r3, r4
 80133ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80133ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80133f2:	429f      	cmp	r7, r3
 80133f4:	d2f9      	bcs.n	80133ea <__hexnan+0xaa>
 80133f6:	1b3b      	subs	r3, r7, r4
 80133f8:	f023 0303 	bic.w	r3, r3, #3
 80133fc:	3304      	adds	r3, #4
 80133fe:	3401      	adds	r4, #1
 8013400:	3e03      	subs	r6, #3
 8013402:	42b4      	cmp	r4, r6
 8013404:	bf88      	it	hi
 8013406:	2304      	movhi	r3, #4
 8013408:	4443      	add	r3, r8
 801340a:	2200      	movs	r2, #0
 801340c:	f843 2b04 	str.w	r2, [r3], #4
 8013410:	429f      	cmp	r7, r3
 8013412:	d2fb      	bcs.n	801340c <__hexnan+0xcc>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	b91b      	cbnz	r3, 8013420 <__hexnan+0xe0>
 8013418:	4547      	cmp	r7, r8
 801341a:	d128      	bne.n	801346e <__hexnan+0x12e>
 801341c:	2301      	movs	r3, #1
 801341e:	603b      	str	r3, [r7, #0]
 8013420:	2005      	movs	r0, #5
 8013422:	b007      	add	sp, #28
 8013424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013428:	3501      	adds	r5, #1
 801342a:	2d08      	cmp	r5, #8
 801342c:	f10b 0b01 	add.w	fp, fp, #1
 8013430:	dd06      	ble.n	8013440 <__hexnan+0x100>
 8013432:	4544      	cmp	r4, r8
 8013434:	d9c1      	bls.n	80133ba <__hexnan+0x7a>
 8013436:	2300      	movs	r3, #0
 8013438:	f844 3c04 	str.w	r3, [r4, #-4]
 801343c:	2501      	movs	r5, #1
 801343e:	3c04      	subs	r4, #4
 8013440:	6822      	ldr	r2, [r4, #0]
 8013442:	f000 000f 	and.w	r0, r0, #15
 8013446:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801344a:	6020      	str	r0, [r4, #0]
 801344c:	e7b5      	b.n	80133ba <__hexnan+0x7a>
 801344e:	2508      	movs	r5, #8
 8013450:	e7b3      	b.n	80133ba <__hexnan+0x7a>
 8013452:	9b01      	ldr	r3, [sp, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d0dd      	beq.n	8013414 <__hexnan+0xd4>
 8013458:	f1c3 0320 	rsb	r3, r3, #32
 801345c:	f04f 32ff 	mov.w	r2, #4294967295
 8013460:	40da      	lsrs	r2, r3
 8013462:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013466:	4013      	ands	r3, r2
 8013468:	f846 3c04 	str.w	r3, [r6, #-4]
 801346c:	e7d2      	b.n	8013414 <__hexnan+0xd4>
 801346e:	3f04      	subs	r7, #4
 8013470:	e7d0      	b.n	8013414 <__hexnan+0xd4>
 8013472:	2004      	movs	r0, #4
 8013474:	e7d5      	b.n	8013422 <__hexnan+0xe2>

08013476 <__ascii_mbtowc>:
 8013476:	b082      	sub	sp, #8
 8013478:	b901      	cbnz	r1, 801347c <__ascii_mbtowc+0x6>
 801347a:	a901      	add	r1, sp, #4
 801347c:	b142      	cbz	r2, 8013490 <__ascii_mbtowc+0x1a>
 801347e:	b14b      	cbz	r3, 8013494 <__ascii_mbtowc+0x1e>
 8013480:	7813      	ldrb	r3, [r2, #0]
 8013482:	600b      	str	r3, [r1, #0]
 8013484:	7812      	ldrb	r2, [r2, #0]
 8013486:	1e10      	subs	r0, r2, #0
 8013488:	bf18      	it	ne
 801348a:	2001      	movne	r0, #1
 801348c:	b002      	add	sp, #8
 801348e:	4770      	bx	lr
 8013490:	4610      	mov	r0, r2
 8013492:	e7fb      	b.n	801348c <__ascii_mbtowc+0x16>
 8013494:	f06f 0001 	mvn.w	r0, #1
 8013498:	e7f8      	b.n	801348c <__ascii_mbtowc+0x16>

0801349a <_realloc_r>:
 801349a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801349e:	4680      	mov	r8, r0
 80134a0:	4615      	mov	r5, r2
 80134a2:	460c      	mov	r4, r1
 80134a4:	b921      	cbnz	r1, 80134b0 <_realloc_r+0x16>
 80134a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134aa:	4611      	mov	r1, r2
 80134ac:	f7fd bcea 	b.w	8010e84 <_malloc_r>
 80134b0:	b92a      	cbnz	r2, 80134be <_realloc_r+0x24>
 80134b2:	f7fd fc73 	bl	8010d9c <_free_r>
 80134b6:	2400      	movs	r4, #0
 80134b8:	4620      	mov	r0, r4
 80134ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134be:	f000 f8c4 	bl	801364a <_malloc_usable_size_r>
 80134c2:	4285      	cmp	r5, r0
 80134c4:	4606      	mov	r6, r0
 80134c6:	d802      	bhi.n	80134ce <_realloc_r+0x34>
 80134c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80134cc:	d8f4      	bhi.n	80134b8 <_realloc_r+0x1e>
 80134ce:	4629      	mov	r1, r5
 80134d0:	4640      	mov	r0, r8
 80134d2:	f7fd fcd7 	bl	8010e84 <_malloc_r>
 80134d6:	4607      	mov	r7, r0
 80134d8:	2800      	cmp	r0, #0
 80134da:	d0ec      	beq.n	80134b6 <_realloc_r+0x1c>
 80134dc:	42b5      	cmp	r5, r6
 80134de:	462a      	mov	r2, r5
 80134e0:	4621      	mov	r1, r4
 80134e2:	bf28      	it	cs
 80134e4:	4632      	movcs	r2, r6
 80134e6:	f7fc fe66 	bl	80101b6 <memcpy>
 80134ea:	4621      	mov	r1, r4
 80134ec:	4640      	mov	r0, r8
 80134ee:	f7fd fc55 	bl	8010d9c <_free_r>
 80134f2:	463c      	mov	r4, r7
 80134f4:	e7e0      	b.n	80134b8 <_realloc_r+0x1e>

080134f6 <__ascii_wctomb>:
 80134f6:	4603      	mov	r3, r0
 80134f8:	4608      	mov	r0, r1
 80134fa:	b141      	cbz	r1, 801350e <__ascii_wctomb+0x18>
 80134fc:	2aff      	cmp	r2, #255	@ 0xff
 80134fe:	d904      	bls.n	801350a <__ascii_wctomb+0x14>
 8013500:	228a      	movs	r2, #138	@ 0x8a
 8013502:	601a      	str	r2, [r3, #0]
 8013504:	f04f 30ff 	mov.w	r0, #4294967295
 8013508:	4770      	bx	lr
 801350a:	700a      	strb	r2, [r1, #0]
 801350c:	2001      	movs	r0, #1
 801350e:	4770      	bx	lr

08013510 <fiprintf>:
 8013510:	b40e      	push	{r1, r2, r3}
 8013512:	b503      	push	{r0, r1, lr}
 8013514:	4601      	mov	r1, r0
 8013516:	ab03      	add	r3, sp, #12
 8013518:	4805      	ldr	r0, [pc, #20]	@ (8013530 <fiprintf+0x20>)
 801351a:	f853 2b04 	ldr.w	r2, [r3], #4
 801351e:	6800      	ldr	r0, [r0, #0]
 8013520:	9301      	str	r3, [sp, #4]
 8013522:	f7ff f99f 	bl	8012864 <_vfiprintf_r>
 8013526:	b002      	add	sp, #8
 8013528:	f85d eb04 	ldr.w	lr, [sp], #4
 801352c:	b003      	add	sp, #12
 801352e:	4770      	bx	lr
 8013530:	2400001c 	.word	0x2400001c

08013534 <__swhatbuf_r>:
 8013534:	b570      	push	{r4, r5, r6, lr}
 8013536:	460c      	mov	r4, r1
 8013538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801353c:	2900      	cmp	r1, #0
 801353e:	b096      	sub	sp, #88	@ 0x58
 8013540:	4615      	mov	r5, r2
 8013542:	461e      	mov	r6, r3
 8013544:	da0d      	bge.n	8013562 <__swhatbuf_r+0x2e>
 8013546:	89a3      	ldrh	r3, [r4, #12]
 8013548:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801354c:	f04f 0100 	mov.w	r1, #0
 8013550:	bf14      	ite	ne
 8013552:	2340      	movne	r3, #64	@ 0x40
 8013554:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013558:	2000      	movs	r0, #0
 801355a:	6031      	str	r1, [r6, #0]
 801355c:	602b      	str	r3, [r5, #0]
 801355e:	b016      	add	sp, #88	@ 0x58
 8013560:	bd70      	pop	{r4, r5, r6, pc}
 8013562:	466a      	mov	r2, sp
 8013564:	f000 f848 	bl	80135f8 <_fstat_r>
 8013568:	2800      	cmp	r0, #0
 801356a:	dbec      	blt.n	8013546 <__swhatbuf_r+0x12>
 801356c:	9901      	ldr	r1, [sp, #4]
 801356e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013572:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013576:	4259      	negs	r1, r3
 8013578:	4159      	adcs	r1, r3
 801357a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801357e:	e7eb      	b.n	8013558 <__swhatbuf_r+0x24>

08013580 <__smakebuf_r>:
 8013580:	898b      	ldrh	r3, [r1, #12]
 8013582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013584:	079d      	lsls	r5, r3, #30
 8013586:	4606      	mov	r6, r0
 8013588:	460c      	mov	r4, r1
 801358a:	d507      	bpl.n	801359c <__smakebuf_r+0x1c>
 801358c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013590:	6023      	str	r3, [r4, #0]
 8013592:	6123      	str	r3, [r4, #16]
 8013594:	2301      	movs	r3, #1
 8013596:	6163      	str	r3, [r4, #20]
 8013598:	b003      	add	sp, #12
 801359a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801359c:	ab01      	add	r3, sp, #4
 801359e:	466a      	mov	r2, sp
 80135a0:	f7ff ffc8 	bl	8013534 <__swhatbuf_r>
 80135a4:	9f00      	ldr	r7, [sp, #0]
 80135a6:	4605      	mov	r5, r0
 80135a8:	4639      	mov	r1, r7
 80135aa:	4630      	mov	r0, r6
 80135ac:	f7fd fc6a 	bl	8010e84 <_malloc_r>
 80135b0:	b948      	cbnz	r0, 80135c6 <__smakebuf_r+0x46>
 80135b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135b6:	059a      	lsls	r2, r3, #22
 80135b8:	d4ee      	bmi.n	8013598 <__smakebuf_r+0x18>
 80135ba:	f023 0303 	bic.w	r3, r3, #3
 80135be:	f043 0302 	orr.w	r3, r3, #2
 80135c2:	81a3      	strh	r3, [r4, #12]
 80135c4:	e7e2      	b.n	801358c <__smakebuf_r+0xc>
 80135c6:	89a3      	ldrh	r3, [r4, #12]
 80135c8:	6020      	str	r0, [r4, #0]
 80135ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135ce:	81a3      	strh	r3, [r4, #12]
 80135d0:	9b01      	ldr	r3, [sp, #4]
 80135d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80135d6:	b15b      	cbz	r3, 80135f0 <__smakebuf_r+0x70>
 80135d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135dc:	4630      	mov	r0, r6
 80135de:	f000 f81d 	bl	801361c <_isatty_r>
 80135e2:	b128      	cbz	r0, 80135f0 <__smakebuf_r+0x70>
 80135e4:	89a3      	ldrh	r3, [r4, #12]
 80135e6:	f023 0303 	bic.w	r3, r3, #3
 80135ea:	f043 0301 	orr.w	r3, r3, #1
 80135ee:	81a3      	strh	r3, [r4, #12]
 80135f0:	89a3      	ldrh	r3, [r4, #12]
 80135f2:	431d      	orrs	r5, r3
 80135f4:	81a5      	strh	r5, [r4, #12]
 80135f6:	e7cf      	b.n	8013598 <__smakebuf_r+0x18>

080135f8 <_fstat_r>:
 80135f8:	b538      	push	{r3, r4, r5, lr}
 80135fa:	4d07      	ldr	r5, [pc, #28]	@ (8013618 <_fstat_r+0x20>)
 80135fc:	2300      	movs	r3, #0
 80135fe:	4604      	mov	r4, r0
 8013600:	4608      	mov	r0, r1
 8013602:	4611      	mov	r1, r2
 8013604:	602b      	str	r3, [r5, #0]
 8013606:	f7ef fe97 	bl	8003338 <_fstat>
 801360a:	1c43      	adds	r3, r0, #1
 801360c:	d102      	bne.n	8013614 <_fstat_r+0x1c>
 801360e:	682b      	ldr	r3, [r5, #0]
 8013610:	b103      	cbz	r3, 8013614 <_fstat_r+0x1c>
 8013612:	6023      	str	r3, [r4, #0]
 8013614:	bd38      	pop	{r3, r4, r5, pc}
 8013616:	bf00      	nop
 8013618:	24000d00 	.word	0x24000d00

0801361c <_isatty_r>:
 801361c:	b538      	push	{r3, r4, r5, lr}
 801361e:	4d06      	ldr	r5, [pc, #24]	@ (8013638 <_isatty_r+0x1c>)
 8013620:	2300      	movs	r3, #0
 8013622:	4604      	mov	r4, r0
 8013624:	4608      	mov	r0, r1
 8013626:	602b      	str	r3, [r5, #0]
 8013628:	f7ef fe96 	bl	8003358 <_isatty>
 801362c:	1c43      	adds	r3, r0, #1
 801362e:	d102      	bne.n	8013636 <_isatty_r+0x1a>
 8013630:	682b      	ldr	r3, [r5, #0]
 8013632:	b103      	cbz	r3, 8013636 <_isatty_r+0x1a>
 8013634:	6023      	str	r3, [r4, #0]
 8013636:	bd38      	pop	{r3, r4, r5, pc}
 8013638:	24000d00 	.word	0x24000d00

0801363c <abort>:
 801363c:	b508      	push	{r3, lr}
 801363e:	2006      	movs	r0, #6
 8013640:	f000 f834 	bl	80136ac <raise>
 8013644:	2001      	movs	r0, #1
 8013646:	f7ef fe43 	bl	80032d0 <_exit>

0801364a <_malloc_usable_size_r>:
 801364a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801364e:	1f18      	subs	r0, r3, #4
 8013650:	2b00      	cmp	r3, #0
 8013652:	bfbc      	itt	lt
 8013654:	580b      	ldrlt	r3, [r1, r0]
 8013656:	18c0      	addlt	r0, r0, r3
 8013658:	4770      	bx	lr

0801365a <_raise_r>:
 801365a:	291f      	cmp	r1, #31
 801365c:	b538      	push	{r3, r4, r5, lr}
 801365e:	4605      	mov	r5, r0
 8013660:	460c      	mov	r4, r1
 8013662:	d904      	bls.n	801366e <_raise_r+0x14>
 8013664:	2316      	movs	r3, #22
 8013666:	6003      	str	r3, [r0, #0]
 8013668:	f04f 30ff 	mov.w	r0, #4294967295
 801366c:	bd38      	pop	{r3, r4, r5, pc}
 801366e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013670:	b112      	cbz	r2, 8013678 <_raise_r+0x1e>
 8013672:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013676:	b94b      	cbnz	r3, 801368c <_raise_r+0x32>
 8013678:	4628      	mov	r0, r5
 801367a:	f000 f831 	bl	80136e0 <_getpid_r>
 801367e:	4622      	mov	r2, r4
 8013680:	4601      	mov	r1, r0
 8013682:	4628      	mov	r0, r5
 8013684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013688:	f000 b818 	b.w	80136bc <_kill_r>
 801368c:	2b01      	cmp	r3, #1
 801368e:	d00a      	beq.n	80136a6 <_raise_r+0x4c>
 8013690:	1c59      	adds	r1, r3, #1
 8013692:	d103      	bne.n	801369c <_raise_r+0x42>
 8013694:	2316      	movs	r3, #22
 8013696:	6003      	str	r3, [r0, #0]
 8013698:	2001      	movs	r0, #1
 801369a:	e7e7      	b.n	801366c <_raise_r+0x12>
 801369c:	2100      	movs	r1, #0
 801369e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80136a2:	4620      	mov	r0, r4
 80136a4:	4798      	blx	r3
 80136a6:	2000      	movs	r0, #0
 80136a8:	e7e0      	b.n	801366c <_raise_r+0x12>
	...

080136ac <raise>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	@ (80136b8 <raise+0xc>)
 80136ae:	4601      	mov	r1, r0
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	f7ff bfd2 	b.w	801365a <_raise_r>
 80136b6:	bf00      	nop
 80136b8:	2400001c 	.word	0x2400001c

080136bc <_kill_r>:
 80136bc:	b538      	push	{r3, r4, r5, lr}
 80136be:	4d07      	ldr	r5, [pc, #28]	@ (80136dc <_kill_r+0x20>)
 80136c0:	2300      	movs	r3, #0
 80136c2:	4604      	mov	r4, r0
 80136c4:	4608      	mov	r0, r1
 80136c6:	4611      	mov	r1, r2
 80136c8:	602b      	str	r3, [r5, #0]
 80136ca:	f7ef fdf1 	bl	80032b0 <_kill>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	d102      	bne.n	80136d8 <_kill_r+0x1c>
 80136d2:	682b      	ldr	r3, [r5, #0]
 80136d4:	b103      	cbz	r3, 80136d8 <_kill_r+0x1c>
 80136d6:	6023      	str	r3, [r4, #0]
 80136d8:	bd38      	pop	{r3, r4, r5, pc}
 80136da:	bf00      	nop
 80136dc:	24000d00 	.word	0x24000d00

080136e0 <_getpid_r>:
 80136e0:	f7ef bdde 	b.w	80032a0 <_getpid>

080136e4 <_init>:
 80136e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e6:	bf00      	nop
 80136e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ea:	bc08      	pop	{r3}
 80136ec:	469e      	mov	lr, r3
 80136ee:	4770      	bx	lr

080136f0 <_fini>:
 80136f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f2:	bf00      	nop
 80136f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136f6:	bc08      	pop	{r3}
 80136f8:	469e      	mov	lr, r3
 80136fa:	4770      	bx	lr
