
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e3c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08017110  08017110  00018110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017820  08017820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017828  08017828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801782c  0801782c  0001882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000350  24000000  08017830  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017cc  24000350  08017b80  00019350  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001b1c  08017b80  00019b1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019350  2**0
                  CONTENTS, READONLY
 10 .debug_info   000315a9  00000000  00000000  0001937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f9d  00000000  00000000  0004a927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028c8  00000000  00000000  0004f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000205f  00000000  00000000  00052190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b703  00000000  00000000  000541ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000336fd  00000000  00000000  0005f8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c221  00000000  00000000  00092fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff210  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c59c  00000000  00000000  001ff254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  0020b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000350 	.word	0x24000350
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080170f4 	.word	0x080170f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000354 	.word	0x24000354
 800030c:	080170f4 	.word	0x080170f4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bme680_platform_read>:
  *
  */


int8_t bme680_platform_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	BME_GTXBuffer[0] = reg_addr | 0x80;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <bme680_platform_read+0x70>)
 8000ab2:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aba:	4814      	ldr	r0, [pc, #80]	@ (8000b0c <bme680_platform_read+0x74>)
 8000abc:	f007 ffae 	bl	8008a1c <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&hspi2, BME_GTXBuffer, BME_GRXBuffer, length+1, 1000); // timeout 1000msec;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000acc:	9200      	str	r2, [sp, #0]
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <bme680_platform_read+0x78>)
 8000ad0:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <bme680_platform_read+0x70>)
 8000ad2:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <bme680_platform_read+0x7c>)
 8000ad4:	f00e fa60 	bl	800ef98 <HAL_SPI_TransmitReceive>
    while(hspi2.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000ad8:	bf00      	nop
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <bme680_platform_read+0x7c>)
 8000adc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d0f9      	beq.n	8000ada <bme680_platform_read+0x42>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_SET); // NSS High
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <bme680_platform_read+0x74>)
 8000aee:	f007 ff95 	bl	8008a1c <HAL_GPIO_WritePin>
    memcpy(reg_data, BME_GRXBuffer+1, length);
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <bme680_platform_read+0x80>)
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4619      	mov	r1, r3
 8000af8:	68b8      	ldr	r0, [r7, #8]
 8000afa:	f013 f8f6 	bl	8013cea <memcpy>

    return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240003dc 	.word	0x240003dc
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	240005dc 	.word	0x240005dc
 8000b14:	24001630 	.word	0x24001630
 8000b18:	240005dd 	.word	0x240005dd

08000b1c <bme680_platform_write>:

int8_t bme680_platform_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]
	BME_GTXBuffer[0] = reg_addr & 0x7F;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <bme680_platform_write+0x6c>)
 8000b36:	701a      	strb	r2, [r3, #0]
    memcpy(&BME_GTXBuffer[1], reg_data, length);
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <bme680_platform_write+0x70>)
 8000b3e:	f013 f8d4 	bl	8013cea <memcpy>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <bme680_platform_write+0x74>)
 8000b4a:	f007 ff67 	bl	8008a1c <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&hspi2, BME_GTXBuffer, length+1, 1000); // send register address + write data
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5a:	490b      	ldr	r1, [pc, #44]	@ (8000b88 <bme680_platform_write+0x6c>)
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <bme680_platform_write+0x78>)
 8000b5e:	f00d fdbb 	bl	800e6d8 <HAL_SPI_Transmit>
    while(hspi2.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000b62:	bf00      	nop
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <bme680_platform_write+0x78>)
 8000b66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d0f9      	beq.n	8000b64 <bme680_platform_write+0x48>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_SET); // NSS High
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <bme680_platform_write+0x74>)
 8000b78:	f007 ff50 	bl	8008a1c <HAL_GPIO_WritePin>

    return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240003dc 	.word	0x240003dc
 8000b8c:	240003dd 	.word	0x240003dd
 8000b90:	58020400 	.word	0x58020400
 8000b94:	24001630 	.word	0x24001630

08000b98 <bme680_delay_func>:
  * @}
  *
  */

void bme680_delay_func(uint32_t period, void *intf_ptr)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8000ba2:	e008      	b.n	8000bb6 <bme680_delay_func+0x1e>
	{
		for(i = 0; i < 84; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e002      	b.n	8000bb0 <bme680_delay_func+0x18>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b53      	cmp	r3, #83	@ 0x53
 8000bb4:	d9f9      	bls.n	8000baa <bme680_delay_func+0x12>
	while(period--)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <bme680_delay_func+0xc>
		{
			;
		}
	}
	//HAL_Delay(period/1000);
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <BME680_Init>:
  *
  * @param  bme680_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BME680_Init(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0



	uint8_t chipid;
	int8_t rslt = BME68X_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71fb      	strb	r3, [r7, #7]

	dev_bme->intf = BME68X_SPI_INTF;
 8000bda:	4b44      	ldr	r3, [pc, #272]	@ (8000cec <BME680_Init+0x11c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	731a      	strb	r2, [r3, #12]

	dev_bme->read = bme680_platform_read;
 8000be2:	4b42      	ldr	r3, [pc, #264]	@ (8000cec <BME680_Init+0x11c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a42      	ldr	r2, [pc, #264]	@ (8000cf0 <BME680_Init+0x120>)
 8000be8:	641a      	str	r2, [r3, #64]	@ 0x40
	dev_bme->write = bme680_platform_write;
 8000bea:	4b40      	ldr	r3, [pc, #256]	@ (8000cec <BME680_Init+0x11c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a41      	ldr	r2, [pc, #260]	@ (8000cf4 <BME680_Init+0x124>)
 8000bf0:	645a      	str	r2, [r3, #68]	@ 0x44
	dev_bme->intf_ptr = &bme680_dev_addr;
 8000bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cec <BME680_Init+0x11c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a40      	ldr	r2, [pc, #256]	@ (8000cf8 <BME680_Init+0x128>)
 8000bf8:	605a      	str	r2, [r3, #4]
	dev_bme->delay_us = bme680_delay_func;
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8000cec <BME680_Init+0x11c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000cfc <BME680_Init+0x12c>)
 8000c00:	649a      	str	r2, [r3, #72]	@ 0x48
	dev_bme->amb_temp = 25;
 8000c02:	4b3a      	ldr	r3, [pc, #232]	@ (8000cec <BME680_Init+0x11c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2219      	movs	r2, #25
 8000c08:	739a      	strb	r2, [r3, #14]
    bme680_delay_func(100000, dev_bme->intf_ptr);
 8000c0a:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <BME680_Init+0x11c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4619      	mov	r1, r3
 8000c12:	483b      	ldr	r0, [pc, #236]	@ (8000d00 <BME680_Init+0x130>)
 8000c14:	f7ff ffc0 	bl	8000b98 <bme680_delay_func>

    bme680_platform_read(BME68X_REG_CHIP_ID, &chipid, 1, dev_bme->intf_ptr);
 8000c18:	4b34      	ldr	r3, [pc, #208]	@ (8000cec <BME680_Init+0x11c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	1db9      	adds	r1, r7, #6
 8000c20:	2201      	movs	r2, #1
 8000c22:	20d0      	movs	r0, #208	@ 0xd0
 8000c24:	f7ff ff38 	bl	8000a98 <bme680_platform_read>

    bme680_delay_func(100000, dev_bme->intf_ptr);
 8000c28:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <BME680_Init+0x11c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4833      	ldr	r0, [pc, #204]	@ (8000d00 <BME680_Init+0x130>)
 8000c32:	f7ff ffb1 	bl	8000b98 <bme680_delay_func>
	/* Initialize bmi323. */
	rslt += bme68x_init(dev_bme);
 8000c36:	4b2d      	ldr	r3, [pc, #180]	@ (8000cec <BME680_Init+0x11c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f866 	bl	8000d0c <bme68x_init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	71fb      	strb	r3, [r7, #7]

	if (rslt != BME68X_OK)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <BME680_Init+0x8a>
	{
		//printf("bme680_init() failed, error code: %d\r\n", rslt);
		return rslt;
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	e044      	b.n	8000ce4 <BME680_Init+0x114>
	else
	{
		//printf("BME680 initialized successfully\r\n");
	}

	rslt += bme68x_get_regs(BME68X_REG_CHIP_ID, &chipid, 1, dev_bme);
 8000c5a:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <BME680_Init+0x11c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1db9      	adds	r1, r7, #6
 8000c60:	2201      	movs	r2, #1
 8000c62:	20d0      	movs	r0, #208	@ 0xd0
 8000c64:	f000 f910 	bl	8000e88 <bme68x_get_regs>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	71fb      	strb	r3, [r7, #7]
	if (rslt != BME68X_OK)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <BME680_Init+0xb2>
	{
		//printf("read chip ID failed, error code: %d\r\n", rslt);
		return rslt;
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	e030      	b.n	8000ce4 <BME680_Init+0x114>
	}

	bme680_config.os_hum = BME68X_OS_2X;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <BME680_Init+0x134>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	701a      	strb	r2, [r3, #0]
	bme680_config.os_pres = BME68X_OS_4X;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <BME680_Init+0x134>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	709a      	strb	r2, [r3, #2]
	bme680_config.os_temp = BME68X_OS_8X;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <BME680_Init+0x134>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	705a      	strb	r2, [r3, #1]
	bme680_config.filter = BME68X_FILTER_SIZE_3;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <BME680_Init+0x134>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	70da      	strb	r2, [r3, #3]

	rslt += bme68x_set_conf(&bme680_config, dev_bme);
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <BME680_Init+0x11c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4818      	ldr	r0, [pc, #96]	@ (8000d04 <BME680_Init+0x134>)
 8000ca2:	f000 f979 	bl	8000f98 <bme68x_set_conf>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4413      	add	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	71fb      	strb	r3, [r7, #7]

	heater_config.enable = 1;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <BME680_Init+0x138>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
	heater_config.heatr_temp = 320; //Target temperature in degrees Celsius
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <BME680_Init+0x138>)
 8000cba:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cbe:	805a      	strh	r2, [r3, #2]
	heater_config.heatr_dur = 150; // Heating duration in milliseconds
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <BME680_Init+0x138>)
 8000cc2:	2296      	movs	r2, #150	@ 0x96
 8000cc4:	809a      	strh	r2, [r3, #4]

	rslt += bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heater_config, dev_bme);
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <BME680_Init+0x11c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	490e      	ldr	r1, [pc, #56]	@ (8000d08 <BME680_Init+0x138>)
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fae7 	bl	80012a2 <bme68x_set_heatr_conf>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	71fb      	strb	r3, [r7, #7]




    return rslt;
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000000 	.word	0x24000000
 8000cf0:	08000a99 	.word	0x08000a99
 8000cf4:	08000b1d 	.word	0x08000b1d
 8000cf8:	240003d8 	.word	0x240003d8
 8000cfc:	08000b99 	.word	0x08000b99
 8000d00:	000186a0 	.word	0x000186a0
 8000d04:	240003bc 	.word	0x240003bc
 8000d08:	240003c4 	.word	0x240003c4

08000d0c <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f8fb 	bl	8000f10 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	20d0      	movs	r0, #208	@ 0xd0
 8000d22:	f000 f8b1 	bl	8000e88 <bme68x_get_regs>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d114      	bne.n	8000d5c <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b61      	cmp	r3, #97	@ 0x61
 8000d38:	d10e      	bne.n	8000d58 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 ff80 	bl	8001c40 <read_variant_id>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d107      	bne.n	8000d5c <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fe73 	bl	8001a38 <get_calib_data>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e001      	b.n	8000d5c <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000d58:	23fd      	movs	r3, #253	@ 0xfd
 8000d5a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f000 fca9 	bl	80016e0 <null_ptr_check>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d16c      	bne.n	8000e76 <bme68x_set_regs+0x10e>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d069      	beq.n	8000e76 <bme68x_set_regs+0x10e>
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d066      	beq.n	8000e76 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d05d      	beq.n	8000e6a <bme68x_set_regs+0x102>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0a      	cmp	r3, #10
 8000db2:	d85a      	bhi.n	8000e6a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000db8:	e034      	b.n	8000e24 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	7b1b      	ldrb	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d118      	bne.n	8000df4 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000dc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fbc6 	bl	800155e <set_mem_page>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000dd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	3328      	adds	r3, #40	@ 0x28
 8000dec:	443b      	add	r3, r7
 8000dee:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000df2:	e009      	b.n	8000e08 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000df4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	441a      	add	r2, r3
 8000dfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	3328      	adds	r3, #40	@ 0x28
 8000e02:	443b      	add	r3, r7
 8000e04:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000e08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	3301      	adds	r3, #1
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	3328      	adds	r3, #40	@ 0x28
 8000e18:	443b      	add	r3, r7
 8000e1a:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000e1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8c6      	bhi.n	8000dba <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11e      	bne.n	8000e72 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8000e38:	7c38      	ldrb	r0, [r7, #16]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685d      	ldr	r5, [r3, #4]
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	1c59      	adds	r1, r3, #1
 8000e4a:	462b      	mov	r3, r5
 8000e4c:	47a0      	blx	r4
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8000e62:	23fe      	movs	r3, #254	@ 0xfe
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8000e68:	e003      	b.n	8000e72 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8000e6a:	23fc      	movs	r3, #252	@ 0xfc
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000e70:	e004      	b.n	8000e7c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8000e72:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000e74:	e002      	b.n	8000e7c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000e76:	23ff      	movs	r3, #255	@ 0xff
 8000e78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8000e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}

08000e88 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f000 fc21 	bl	80016e0 <null_ptr_check>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8000ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d12a      	bne.n	8000f00 <bme68x_get_regs+0x78>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d027      	beq.n	8000f00 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	7b1b      	ldrb	r3, [r3, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10e      	bne.n	8000ed6 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	6839      	ldr	r1, [r7, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fb4e 	bl	800155e <set_mem_page>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8000ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ed4:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	7bf8      	ldrb	r0, [r7, #15]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	47a0      	blx	r4
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8000efa:	23fe      	movs	r3, #254	@ 0xfe
 8000efc:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8000efe:	e001      	b.n	8000f04 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000f00:	23ff      	movs	r3, #255	@ 0xff
 8000f02:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}

08000f10 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8000f18:	23e0      	movs	r3, #224	@ 0xe0
 8000f1a:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8000f1c:	23b6      	movs	r3, #182	@ 0xb6
 8000f1e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 fbdd 	bl	80016e0 <null_ptr_check>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d12b      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7b1b      	ldrb	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d104      	bne.n	8000f44 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fb74 	bl	8001628 <get_mem_page>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d11e      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000f4c:	f107 010d 	add.w	r1, r7, #13
 8000f50:	f107 000e 	add.w	r0, r7, #14
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f7ff ff06 	bl	8000d68 <bme68x_set_regs>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d110      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6852      	ldr	r2, [r2, #4]
 8000f70:	4611      	mov	r1, r2
 8000f72:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f76:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7b1b      	ldrb	r3, [r3, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d104      	bne.n	8000f8a <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fb51 	bl	8001628 <get_mem_page>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	77bb      	strb	r3, [r7, #30]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8000faa:	4a7c      	ldr	r2, [pc, #496]	@ (800119c <bme68x_set_conf+0x204>)
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb4:	6018      	str	r0, [r3, #0]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f94a 	bl	8001262 <bme68x_get_op_mode>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8000fd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 f8df 	bl	80011a0 <bme68x_set_op_mode>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8000fec:	23ff      	movs	r3, #255	@ 0xff
 8000fee:	77fb      	strb	r3, [r7, #31]
 8000ff0:	e0b2      	b.n	8001158 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8000ff2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80ae 	bne.w	8001158 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8000ffc:	7d38      	ldrb	r0, [r7, #20]
 8000ffe:	f107 010c 	add.w	r1, r7, #12
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2205      	movs	r2, #5
 8001006:	f7ff ff3f 	bl	8000e88 <bme68x_get_regs>
 800100a:	4603      	mov	r3, r0
 800100c:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8001016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d108      	bne.n	8001030 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3303      	adds	r3, #3
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	2107      	movs	r1, #7
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fb2d 	bl	8001686 <boundary_check>
 800102c:	4603      	mov	r3, r0
 800102e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001030:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d108      	bne.n	800104a <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	2105      	movs	r1, #5
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fb20 	bl	8001686 <boundary_check>
 8001046:	4603      	mov	r3, r0
 8001048:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800104a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d108      	bne.n	8001064 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3302      	adds	r3, #2
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	2105      	movs	r1, #5
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fb13 	bl	8001686 <boundary_check>
 8001060:	4603      	mov	r3, r0
 8001062:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001064:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d107      	bne.n	800107c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	2105      	movs	r1, #5
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fb07 	bl	8001686 <boundary_check>
 8001078:	4603      	mov	r3, r0
 800107a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800107c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d108      	bne.n	8001096 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3304      	adds	r3, #4
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	2108      	movs	r1, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fafa 	bl	8001686 <boundary_check>
 8001092:	4603      	mov	r3, r0
 8001094:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001096:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d15c      	bne.n	8001158 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800109e:	7c3b      	ldrb	r3, [r7, #16]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f023 031c 	bic.w	r3, r3, #28
 80010a6:	b25a      	sxtb	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	78db      	ldrb	r3, [r3, #3]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f003 031c 	and.w	r3, r3, #28
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	015b      	lsls	r3, r3, #5
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	f023 031c 	bic.w	r3, r3, #28
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	f003 031c 	and.w	r3, r3, #28
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f023 0307 	bic.w	r3, r3, #7
 8001100:	b25a      	sxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d004      	beq.n	8001128 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001128:	7c3b      	ldrb	r3, [r7, #16]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	b25a      	sxtb	r2, r3
 8001132:	7fbb      	ldrb	r3, [r7, #30]
 8001134:	015b      	lsls	r3, r3, #5
 8001136:	b25b      	sxtb	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001148:	b25a      	sxtb	r2, r3
 800114a:	7f7b      	ldrb	r3, [r7, #29]
 800114c:	01db      	lsls	r3, r3, #7
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001158:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001160:	f107 010c 	add.w	r1, r7, #12
 8001164:	f107 0014 	add.w	r0, r7, #20
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2205      	movs	r2, #5
 800116c:	f7ff fdfc 	bl	8000d68 <bme68x_set_regs>
 8001170:	4603      	mov	r3, r0
 8001172:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001174:	7f3b      	ldrb	r3, [r7, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00a      	beq.n	8001190 <bme68x_set_conf+0x1f8>
 800117a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001182:	7f3b      	ldrb	r3, [r7, #28]
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f80a 	bl	80011a0 <bme68x_set_op_mode>
 800118c:	4603      	mov	r3, r0
 800118e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001190:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08017110 	.word	0x08017110

080011a0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80011b0:	2374      	movs	r3, #116	@ 0x74
 80011b2:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80011b4:	f107 010d 	add.w	r1, r7, #13
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	2074      	movs	r0, #116	@ 0x74
 80011be:	f7ff fe63 	bl	8000e88 <bme68x_get_regs>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d11d      	bne.n	800120a <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d016      	beq.n	800120a <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	f023 0303 	bic.w	r3, r3, #3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80011e6:	f107 010d 	add.w	r1, r7, #13
 80011ea:	f107 000c 	add.w	r0, r7, #12
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f7ff fdb9 	bl	8000d68 <bme68x_set_regs>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	6852      	ldr	r2, [r2, #4]
 8001202:	4611      	mov	r1, r2
 8001204:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001208:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <bme68x_set_op_mode+0x78>
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0cd      	beq.n	80011b4 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01b      	beq.n	8001256 <bme68x_set_op_mode+0xb6>
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d117      	bne.n	8001256 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001226:	7b7b      	ldrb	r3, [r7, #13]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	b25a      	sxtb	r2, r3
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	b25b      	sxtb	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b25b      	sxtb	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001242:	f107 010d 	add.w	r1, r7, #13
 8001246:	f107 000c 	add.w	r0, r7, #12
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2201      	movs	r2, #1
 800124e:	f7ff fd8b 	bl	8000d68 <bme68x_set_regs>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00f      	beq.n	8001292 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001272:	f107 010e 	add.w	r1, r7, #14
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	2074      	movs	r0, #116	@ 0x74
 800127c:	f7ff fe04 	bl	8000e88 <bme68x_get_regs>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e001      	b.n	8001296 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001292:	23ff      	movs	r3, #255	@ 0xff
 8001294:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b088      	sub	sp, #32
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80012b8:	f247 1370 	movw	r3, #29040	@ 0x7170
 80012bc:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d06e      	beq.n	80013a2 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ff6a 	bl	80011a0 <bme68x_set_op_mode>
 80012cc:	4603      	mov	r3, r0
 80012ce:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80012d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80012d8:	f107 021c 	add.w	r2, r7, #28
 80012dc:	7bf9      	ldrb	r1, [r7, #15]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f000 fa1d 	bl	8001720 <set_conf>
 80012e6:	4603      	mov	r3, r0
 80012e8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d159      	bne.n	80013a6 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80012f2:	f107 0118 	add.w	r1, r7, #24
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2202      	movs	r2, #2
 80012fa:	2070      	movs	r0, #112	@ 0x70
 80012fc:	f7ff fdc4 	bl	8000e88 <bme68x_get_regs>
 8001300:	4603      	mov	r3, r0
 8001302:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8001304:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d14c      	bne.n	80013a6 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001314:	2300      	movs	r3, #0
 8001316:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d102      	bne.n	8001326 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8001320:	2302      	movs	r3, #2
 8001322:	777b      	strb	r3, [r7, #29]
 8001324:	e006      	b.n	8001334 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001326:	2301      	movs	r3, #1
 8001328:	777b      	strb	r3, [r7, #29]
 800132a:	e003      	b.n	8001334 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800132c:	2301      	movs	r3, #1
 800132e:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8001330:	2300      	movs	r3, #0
 8001332:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001334:	7e3b      	ldrb	r3, [r7, #24]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	f023 0308 	bic.w	r3, r3, #8
 800133c:	b25a      	sxtb	r2, r3
 800133e:	7fbb      	ldrb	r3, [r7, #30]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	b25b      	sxtb	r3, r3
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001352:	7e7b      	ldrb	r3, [r7, #25]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	f023 030f 	bic.w	r3, r3, #15
 800135a:	b25a      	sxtb	r2, r3
 800135c:	7f3b      	ldrb	r3, [r7, #28]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b25b      	sxtb	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800136e:	7e7b      	ldrb	r3, [r7, #25]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001376:	b25a      	sxtb	r2, r3
 8001378:	7f7b      	ldrb	r3, [r7, #29]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	b25b      	sxtb	r3, r3
 800137e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001382:	b25b      	sxtb	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800138c:	f107 0118 	add.w	r1, r7, #24
 8001390:	f107 0014 	add.w	r0, r7, #20
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f7ff fce6 	bl	8000d68 <bme68x_set_regs>
 800139c:	4603      	mov	r3, r0
 800139e:	77fb      	strb	r3, [r7, #31]
 80013a0:	e001      	b.n	80013a6 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80013a2:	23ff      	movs	r3, #255	@ 0xff
 80013a4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	@ 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80013c6:	d902      	bls.n	80013ce <calc_res_heat+0x1a>
    {
        temp = 400;
 80013c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80013cc:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013dc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80013e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80014f8 <calc_res_heat+0x144>
 80013e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013fe:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80014fc <calc_res_heat+0x148>
 8001402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001406:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001500 <calc_res_heat+0x14c>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001504 <calc_res_heat+0x150>
 8001412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001416:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001428:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001508 <calc_res_heat+0x154>
 800142c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001430:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800144a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800144e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001456:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001468:	edd7 7a07 	vldr	s15, [r7, #28]
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	ed97 7a06 	vldr	s14, [r7, #24]
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800148e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001492:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800149a:	edd7 7a05 	vldr	s15, [r7, #20]
 800149e:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800150c <calc_res_heat+0x158>
 80014b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014bc:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80014c0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80014c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80014cc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80014d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80014d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001510 <calc_res_heat+0x15c>
 80014d8:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80014e4:	793b      	ldrb	r3, [r7, #4]
 80014e6:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	372c      	adds	r7, #44	@ 0x2c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	42440000 	.word	0x42440000
 80014fc:	47000000 	.word	0x47000000
 8001500:	3a03126f 	.word	0x3a03126f
 8001504:	3b1a0275 	.word	0x3b1a0275
 8001508:	44800000 	.word	0x44800000
 800150c:	3b03126f 	.word	0x3b03126f
 8001510:	4059999a 	.word	0x4059999a

08001514 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8001528:	d308      	bcc.n	800153c <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 800152a:	23ff      	movs	r3, #255	@ 0xff
 800152c:	73bb      	strb	r3, [r7, #14]
 800152e:	e00f      	b.n	8001550 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001540:	d8f6      	bhi.n	8001530 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	019b      	lsls	r3, r3, #6
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8001550:	7bbb      	ldrb	r3, [r7, #14]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <set_mem_page>:
    return rslt;
}

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800155e:	b590      	push	{r4, r7, lr}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	6039      	str	r1, [r7, #0]
 8001568:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f000 f8b8 	bl	80016e0 <null_ptr_check>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d14f      	bne.n	800161c <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
 8001588:	e001      	b.n	800158e <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800158a:	2310      	movs	r3, #16
 800158c:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7b5b      	ldrb	r3, [r3, #13]
 8001592:	7bba      	ldrb	r2, [r7, #14]
 8001594:	429a      	cmp	r2, r3
 8001596:	d041      	beq.n	800161c <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	7bba      	ldrb	r2, [r7, #14]
 800159c:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f107 010d 	add.w	r1, r7, #13
 80015aa:	2201      	movs	r2, #1
 80015ac:	20f3      	movs	r0, #243	@ 0xf3
 80015ae:	47a0      	blx	r4
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80015c4:	23fe      	movs	r3, #254	@ 0xfe
 80015c6:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d125      	bne.n	800161c <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	f023 0310 	bic.w	r3, r3, #16
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	b25a      	sxtb	r2, r3
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f107 010d 	add.w	r1, r7, #13
 80015fe:	2201      	movs	r2, #1
 8001600:	2073      	movs	r0, #115	@ 0x73
 8001602:	47a0      	blx	r4
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001618:	23fe      	movs	r3, #254	@ 0xfe
 800161a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}

08001628 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f855 	bl	80016e0 <null_ptr_check>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11b      	bne.n	800167a <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f107 010e 	add.w	r1, r7, #14
 800164e:	2201      	movs	r2, #1
 8001650:	20f3      	movs	r0, #243	@ 0xf3
 8001652:	47a0      	blx	r4
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8001668:	23fe      	movs	r3, #254	@ 0xfe
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e005      	b.n	800167a <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800166e:	7bbb      	ldrb	r3, [r7, #14]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}

08001686 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	460b      	mov	r3, r1
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f823 	bl	80016e0 <null_ptr_check>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d015      	beq.n	80016d0 <boundary_check+0x4a>
 80016a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d111      	bne.n	80016d0 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	7afa      	ldrb	r2, [r7, #11]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20e      	bcs.n	80016d4 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	7afa      	ldrb	r2, [r7, #11]
 80016ba:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 80016ce:	e001      	b.n	80016d4 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80016d0:	23ff      	movs	r3, #255	@ 0xff
 80016d2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <null_ptr_check+0x2a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <null_ptr_check+0x2a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <null_ptr_check+0x2a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800170a:	23ff      	movs	r3, #255	@ 0xff
 800170c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b093      	sub	sp, #76	@ 0x4c
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	460b      	mov	r3, r1
 800172e:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 800173c:	236e      	movs	r3, #110	@ 0x6e
 800173e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001742:	4aa1      	ldr	r2, [pc, #644]	@ (80019c8 <set_conf+0x2a8>)
 8001744:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001748:	ca07      	ldmia	r2, {r0, r1, r2}
 800174a:	c303      	stmia	r3!, {r0, r1}
 800174c:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800174e:	4a9e      	ldr	r2, [pc, #632]	@ (80019c8 <set_conf+0x2a8>)
 8001750:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001754:	ca07      	ldmia	r2, {r0, r1, r2}
 8001756:	c303      	stmia	r3!, {r0, r1}
 8001758:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800175a:	4a9b      	ldr	r2, [pc, #620]	@ (80019c8 <set_conf+0x2a8>)
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	ca07      	ldmia	r2, {r0, r1, r2}
 8001762:	c303      	stmia	r3!, {r0, r1}
 8001764:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001766:	4a98      	ldr	r2, [pc, #608]	@ (80019c8 <set_conf+0x2a8>)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	ca07      	ldmia	r2, {r0, r1, r2}
 800176e:	c303      	stmia	r3!, {r0, r1}
 8001770:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d024      	beq.n	80017c2 <set_conf+0xa2>
 8001778:	2b03      	cmp	r3, #3
 800177a:	f300 80f9 	bgt.w	8001970 <set_conf+0x250>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <set_conf+0x68>
 8001782:	2b02      	cmp	r3, #2
 8001784:	d07c      	beq.n	8001880 <set_conf+0x160>
 8001786:	e0f3      	b.n	8001970 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8001788:	235a      	movs	r3, #90	@ 0x5a
 800178a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	885b      	ldrh	r3, [r3, #2]
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe0d 	bl	80013b4 <calc_res_heat>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff feb2 	bl	8001514 <calc_gas_wait>
 80017b0:	4603      	mov	r3, r0
 80017b2:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 80017c0:	e0db      	b.n	800197a <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <set_conf+0xb2>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80017d2:	23ff      	movs	r3, #255	@ 0xff
 80017d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 80017d8:	e0cf      	b.n	800197a <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80017e0:	e03f      	b.n	8001862 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80017e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80017e6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80017ea:	325a      	adds	r2, #90	@ 0x5a
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	3348      	adds	r3, #72	@ 0x48
 80017f0:	443b      	add	r3, r7
 80017f2:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fdd2 	bl	80013b4 <calc_res_heat>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001818:	443b      	add	r3, r7
 800181a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800181e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001822:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8001826:	3264      	adds	r2, #100	@ 0x64
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	3348      	adds	r3, #72	@ 0x48
 800182c:	443b      	add	r3, r7
 800182e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe65 	bl	8001514 <calc_gas_wait>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001852:	443b      	add	r3, r7
 8001854:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8001858:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800185c:	3301      	adds	r3, #1
 800185e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	7c1b      	ldrb	r3, [r3, #16]
 8001866:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800186a:	429a      	cmp	r2, r3
 800186c:	d3b9      	bcc.n	80017e2 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	7c1a      	ldrb	r2, [r3, #16]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	7c1b      	ldrb	r3, [r3, #16]
 800187a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 800187e:	e07c      	b.n	800197a <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <set_conf+0x170>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d103      	bne.n	8001898 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8001890:	23ff      	movs	r3, #255	@ 0xff
 8001892:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8001896:	e070      	b.n	800197a <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8a5b      	ldrh	r3, [r3, #18]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80018ac:	e03a      	b.n	8001924 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80018ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018b2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80018b6:	325a      	adds	r2, #90	@ 0x5a
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	3348      	adds	r3, #72	@ 0x48
 80018bc:	443b      	add	r3, r7
 80018be:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fd6c 	bl	80013b4 <calc_res_heat>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80018e4:	443b      	add	r3, r7
 80018e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80018ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018ee:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80018f2:	3264      	adds	r2, #100	@ 0x64
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	3348      	adds	r3, #72	@ 0x48
 80018f8:	443b      	add	r3, r7
 80018fa:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	3348      	adds	r3, #72	@ 0x48
 8001914:	443b      	add	r3, r7
 8001916:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 800191a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800191e:	3301      	adds	r3, #1
 8001920:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	7c1b      	ldrb	r3, [r3, #16]
 8001928:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800192c:	429a      	cmp	r2, r3
 800192e:	d3be      	bcc.n	80018ae <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	7c1a      	ldrb	r2, [r3, #16]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8a5b      	ldrh	r3, [r3, #18]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 f841 	bl	80019cc <calc_heatr_dur_shared>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8001950:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10f      	bne.n	8001978 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8001958:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800195c:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	f7ff fa00 	bl	8000d68 <bme68x_set_regs>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 800196e:	e003      	b.n	8001978 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001970:	2301      	movs	r3, #1
 8001972:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001976:	e000      	b.n	800197a <set_conf+0x25a>
            break;
 8001978:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 800197a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10b      	bne.n	800199a <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8001982:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001986:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800198a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f7ff f9ea 	bl	8000d68 <bme68x_set_regs>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 800199a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10b      	bne.n	80019ba <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 80019a2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80019a6:	f107 0114 	add.w	r1, r7, #20
 80019aa:	f107 0020 	add.w	r0, r7, #32
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f7ff f9da 	bl	8000d68 <bme68x_set_regs>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80019ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80019be:	4618      	mov	r0, r3
 80019c0:	374c      	adds	r7, #76	@ 0x4c
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	080171a0 	.word	0x080171a0

080019cc <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f240 7282 	movw	r2, #1922	@ 0x782
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d902      	bls.n	80019ea <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 80019e4:	23ff      	movs	r3, #255	@ 0xff
 80019e6:	73bb      	strb	r3, [r7, #14]
 80019e8:	e01d      	b.n	8001a26 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f0:	fb03 f202 	mul.w	r2, r3, r2
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <calc_heatr_dur_shared+0x68>)
 80019f6:	fba3 1302 	umull	r1, r3, r3, r2
 80019fa:	1ad2      	subs	r2, r2, r3
 80019fc:	0852      	lsrs	r2, r2, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8001a04:	e005      	b.n	8001a12 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a16:	d8f6      	bhi.n	8001a06 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	019b      	lsls	r3, r3, #6
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	12c8b89f 	.word	0x12c8b89f

08001a38 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	@ 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8001a40:	f107 010c 	add.w	r1, r7, #12
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2217      	movs	r2, #23
 8001a48:	208a      	movs	r0, #138	@ 0x8a
 8001a4a:	f7ff fa1d 	bl	8000e88 <bme68x_get_regs>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 8001a54:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10b      	bne.n	8001a74 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	f103 0117 	add.w	r1, r3, #23
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	220e      	movs	r2, #14
 8001a68:	20e1      	movs	r0, #225	@ 0xe1
 8001a6a:	f7ff fa0d 	bl	8000e88 <bme68x_get_regs>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 8001a74:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10b      	bne.n	8001a94 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2205      	movs	r2, #5
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff f9fd 	bl	8000e88 <bme68x_get_regs>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8001a94:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 80cb 	bne.w	8001c34 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8001a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8001ad2:	7c7b      	ldrb	r3, [r7, #17]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	7c3b      	ldrb	r3, [r7, #16]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8001ae6:	7cfb      	ldrb	r3, [r7, #19]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	7cbb      	ldrb	r3, [r7, #18]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8001af8:	7d3b      	ldrb	r3, [r7, #20]
 8001afa:	b25a      	sxtb	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	7dbb      	ldrb	r3, [r7, #22]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8001b14:	7e7b      	ldrb	r3, [r7, #25]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	7e3b      	ldrb	r3, [r7, #24]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8001b26:	7efb      	ldrb	r3, [r7, #27]
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8001b30:	7ebb      	ldrb	r3, [r7, #26]
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	7fbb      	ldrb	r3, [r7, #30]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8001b4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8001b62:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8001b74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8001b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8001ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8001bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bb4:	b25a      	sxtb	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8001bba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8001bc4:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8001bcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8001bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bda:	b25a      	sxtb	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8001be0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8001bf6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bfa:	b25a      	sxtb	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8001c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da00      	bge.n	8001c0e <get_calib_data+0x1d6>
 8001c0c:	330f      	adds	r3, #15
 8001c0e:	111b      	asrs	r3, r3, #4
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8001c18:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001c1c:	b25a      	sxtb	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8001c24:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	111b      	asrs	r3, r3, #4
 8001c2c:	b25a      	sxtb	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 8001c34:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3738      	adds	r7, #56	@ 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8001c4c:	f107 010e 	add.w	r1, r7, #14
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	20f0      	movs	r0, #240	@ 0xf0
 8001c56:	f7ff f917 	bl	8000e88 <bme68x_get_regs>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 8001c82:	2300      	movs	r3, #0
 8001c84:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f001 f959 	bl	8002f3e <null_ptr_check>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 8001c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7a5b      	ldrb	r3, [r3, #9]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	72da      	strb	r2, [r3, #11]
 8001cac:	e002      	b.n	8001cb4 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8001cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d118      	bne.n	8001cee <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8d3 	bl	8001e68 <bmi3_soft_reset>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10f      	bne.n	8001cee <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 8001cce:	f107 010c 	add.w	r1, r7, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 f821 	bl	8001d1e <bmi3_get_regs>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 8001ce8:	7b3a      	ldrb	r2, [r7, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 8001cf6:	7b7b      	ldrb	r3, [r7, #13]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d104      	bne.n	8001d0a <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8001d06:	839a      	strh	r2, [r3, #28]
 8001d08:	e003      	b.n	8001d12 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001d10:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b0a7      	sub	sp, #156	@ 0x9c
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f001 f901 	bl	8002f3e <null_ptr_check>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 8001d42:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d145      	bne.n	8001dd6 <bmi3_get_regs+0xb8>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d042      	beq.n	8001dd6 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7a5b      	ldrb	r3, [r3, #9]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d5e:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691c      	ldr	r4, [r3, #16]
 8001d64:	89bb      	ldrh	r3, [r7, #12]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	7ad2      	ldrb	r2, [r2, #11]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f107 0114 	add.w	r1, r7, #20
 8001d76:	7bf8      	ldrb	r0, [r7, #15]
 8001d78:	47a0      	blx	r4
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6852      	ldr	r2, [r2, #4]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8001d9a:	e012      	b.n	8001dc2 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8001d9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	7ad2      	ldrb	r2, [r2, #11]
 8001da4:	441a      	add	r2, r3
 8001da6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	440b      	add	r3, r1
 8001dae:	3298      	adds	r2, #152	@ 0x98
 8001db0:	443a      	add	r2, r7
 8001db2:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001db6:	701a      	strb	r2, [r3, #0]
                index++;
 8001db8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8001dc2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8001dc6:	89bb      	ldrh	r3, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d3e7      	bcc.n	8001d9c <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001dcc:	e006      	b.n	8001ddc <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 8001dce:	23fe      	movs	r3, #254	@ 0xfe
 8001dd0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8001dd4:	e002      	b.n	8001ddc <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001dd6:	23ff      	movs	r3, #255	@ 0xff
 8001dd8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8001ddc:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	379c      	adds	r7, #156	@ 0x9c
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}

08001de8 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4603      	mov	r3, r0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	4613      	mov	r3, r2
 8001df8:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f001 f89f 	bl	8002f3e <null_ptr_check>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 8001e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d125      	bne.n	8001e58 <bmi3_set_regs+0x70>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d022      	beq.n	8001e58 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7a5b      	ldrb	r3, [r3, #9]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e20:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695c      	ldr	r4, [r3, #20]
 8001e26:	89ba      	ldrh	r2, [r7, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	7bf8      	ldrb	r0, [r7, #15]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	47a0      	blx	r4
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6852      	ldr	r2, [r2, #4]
 8001e42:	4611      	mov	r1, r2
 8001e44:	2002      	movs	r0, #2
 8001e46:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 8001e52:	23fe      	movs	r3, #254	@ 0xfe
 8001e54:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8001e56:	e001      	b.n	8001e5c <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8001e58:	23ff      	movs	r3, #255	@ 0xff
 8001e5a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 8001e70:	2300      	movs	r3, #0
 8001e72:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 8001e74:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001e78:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 8001e7e:	2300      	movs	r3, #0
 8001e80:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 8001e82:	2301      	movs	r3, #1
 8001e84:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f001 f857 	bl	8002f3e <null_ptr_check>
 8001e90:	4603      	mov	r3, r0
 8001e92:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 8001e94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d16f      	bne.n	8001f7c <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	f64d 60af 	movw	r0, #57007	@ 0xdeaf
 8001ea2:	f000 f873 	bl	8001f8c <bmi3_set_command_register>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6852      	ldr	r2, [r2, #4]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eb8:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 8001eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <bmi3_soft_reset+0x74>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7a5b      	ldrb	r3, [r3, #9]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 8001eca:	f107 011c 	add.w	r1, r7, #28
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff ff23 	bl	8001d1e <bmi3_get_regs>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 8001edc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d108      	bne.n	8001ef6 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 8001ee4:	f107 0118 	add.w	r1, r7, #24
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	2012      	movs	r0, #18
 8001eee:	f7ff ff7b 	bl	8001de8 <bmi3_set_regs>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 8001efe:	f107 010c 	add.w	r1, r7, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	2014      	movs	r0, #20
 8001f08:	f7ff ff6e 	bl	8001de8 <bmi3_set_regs>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d108      	bne.n	8001f2a <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 8001f18:	f107 0114 	add.w	r1, r7, #20
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	2040      	movs	r0, #64	@ 0x40
 8001f22:	f7ff ff61 	bl	8001de8 <bmi3_set_regs>
 8001f26:	4603      	mov	r3, r0
 8001f28:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 8001f2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d124      	bne.n	8001f7c <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8001f32:	e020      	b.n	8001f76 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6852      	ldr	r2, [r2, #4]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <bmi3_soft_reset+0x120>)
 8001f40:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 8001f42:	f107 0110 	add.w	r1, r7, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	f7ff fee7 	bl	8001d1e <bmi3_get_regs>
 8001f50:	4603      	mov	r3, r0
 8001f52:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 8001f54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 8001f5c:	7c3b      	ldrb	r3, [r7, #16]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	77fb      	strb	r3, [r7, #31]

                        break;
 8001f6a:	e007      	b.n	8001f7c <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 8001f6c:	23f2      	movs	r3, #242	@ 0xf2
 8001f6e:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 8001f70:	7fbb      	ldrb	r3, [r7, #30]
 8001f72:	3301      	adds	r3, #1
 8001f74:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 8001f76:	7fbb      	ldrb	r3, [r7, #30]
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d9db      	bls.n	8001f34 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 8001f7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	000186a0 	.word	0x000186a0

08001f8c <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 8001f98:	2300      	movs	r3, #0
 8001f9a:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 8001fac:	f107 010c 	add.w	r1, r7, #12
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	207e      	movs	r0, #126	@ 0x7e
 8001fb6:	f7ff ff17 	bl	8001de8 <bmi3_set_regs>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 ffaf 	bl	8002f3e <null_ptr_check>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 8001fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 80f1 	bne.w	80021d0 <bmi3_set_sensor_config+0x204>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80ed 	beq.w	80021d0 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75bb      	strb	r3, [r7, #22]
 8001ffa:	e0e3      	b.n	80021c4 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 8001ffc:	7dbb      	ldrb	r3, [r7, #22]
 8001ffe:	222e      	movs	r2, #46	@ 0x2e
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	f200 80d4 	bhi.w	80021b8 <bmi3_set_sensor_config+0x1ec>
 8002010:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <bmi3_set_sensor_config+0x4c>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	0800204d 	.word	0x0800204d
 800201c:	08002069 	.word	0x08002069
 8002020:	080020bd 	.word	0x080020bd
 8002024:	08002085 	.word	0x08002085
 8002028:	080020a1 	.word	0x080020a1
 800202c:	0800212d 	.word	0x0800212d
 8002030:	080020f5 	.word	0x080020f5
 8002034:	08002111 	.word	0x08002111
 8002038:	080020d9 	.word	0x080020d9
 800203c:	08002149 	.word	0x08002149
 8002040:	08002165 	.word	0x08002165
 8002044:	08002181 	.word	0x08002181
 8002048:	0800219d 	.word	0x0800219d
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 800204c:	7dbb      	ldrb	r3, [r7, #22]
 800204e:	222e      	movs	r2, #46	@ 0x2e
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	3302      	adds	r3, #2
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 faa3 	bl	80025a8 <set_accel_config>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
                    break;
 8002066:	e0aa      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8002068:	7dbb      	ldrb	r3, [r7, #22]
 800206a:	222e      	movs	r2, #46	@ 0x2e
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	3302      	adds	r3, #2
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fc37 	bl	80028ec <set_gyro_config>
 800207e:	4603      	mov	r3, r0
 8002080:	75fb      	strb	r3, [r7, #23]
                    break;
 8002082:	e09c      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8002084:	7dbb      	ldrb	r3, [r7, #22]
 8002086:	222e      	movs	r2, #46	@ 0x2e
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	3302      	adds	r3, #2
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f001 f803 	bl	80030a0 <set_any_motion_config>
 800209a:	4603      	mov	r3, r0
 800209c:	75fb      	strb	r3, [r7, #23]
                    break;
 800209e:	e08e      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80020a0:	7dbb      	ldrb	r3, [r7, #22]
 80020a2:	222e      	movs	r2, #46	@ 0x2e
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	3302      	adds	r3, #2
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 f95f 	bl	8003374 <set_no_motion_config>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]
                    break;
 80020ba:	e080      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80020bc:	7dbb      	ldrb	r3, [r7, #22]
 80020be:	222e      	movs	r2, #46	@ 0x2e
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	3302      	adds	r3, #2
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 fbad 	bl	800382c <set_sig_motion_config>
 80020d2:	4603      	mov	r3, r0
 80020d4:	75fb      	strb	r3, [r7, #23]
                    break;
 80020d6:	e072      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 80020d8:	7dbb      	ldrb	r3, [r7, #22]
 80020da:	222e      	movs	r2, #46	@ 0x2e
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	3302      	adds	r3, #2
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 fa91 	bl	8003610 <set_flat_config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	75fb      	strb	r3, [r7, #23]
                    break;
 80020f2:	e064      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 80020f4:	7dbb      	ldrb	r3, [r7, #22]
 80020f6:	222e      	movs	r2, #46	@ 0x2e
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	3302      	adds	r3, #2
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	f001 fcbb 	bl	8003a80 <set_tilt_config>
 800210a:	4603      	mov	r3, r0
 800210c:	75fb      	strb	r3, [r7, #23]
                    break;
 800210e:	e056      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8002110:	7dbb      	ldrb	r3, [r7, #22]
 8002112:	222e      	movs	r2, #46	@ 0x2e
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	3302      	adds	r3, #2
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4618      	mov	r0, r3
 8002122:	f001 fd98 	bl	8003c56 <set_orientation_config>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]
                    break;
 800212a:	e048      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 800212c:	7dbb      	ldrb	r3, [r7, #22]
 800212e:	222e      	movs	r2, #46	@ 0x2e
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	3302      	adds	r3, #2
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f002 f84b 	bl	80041d8 <set_step_config>
 8002142:	4603      	mov	r3, r0
 8002144:	75fb      	strb	r3, [r7, #23]
                    break;
 8002146:	e03a      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8002148:	7dbb      	ldrb	r3, [r7, #22]
 800214a:	222e      	movs	r2, #46	@ 0x2e
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	3302      	adds	r3, #2
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fb7d 	bl	8004858 <set_tap_config>
 800215e:	4603      	mov	r3, r0
 8002160:	75fb      	strb	r3, [r7, #23]
                    break;
 8002162:	e02c      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	222e      	movs	r2, #46	@ 0x2e
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	3302      	adds	r3, #2
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fd69 	bl	8004c4c <set_alternate_accel_config>
 800217a:	4603      	mov	r3, r0
 800217c:	75fb      	strb	r3, [r7, #23]
                    break;
 800217e:	e01e      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8002180:	7dbb      	ldrb	r3, [r7, #22]
 8002182:	222e      	movs	r2, #46	@ 0x2e
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	3302      	adds	r3, #2
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fde4 	bl	8004d5e <set_alternate_gyro_config>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
                    break;
 800219a:	e010      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 800219c:	7dbb      	ldrb	r3, [r7, #22]
 800219e:	222e      	movs	r2, #46	@ 0x2e
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	3302      	adds	r3, #2
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 fe5f 	bl	8004e70 <set_alternate_auto_config>
 80021b2:	4603      	mov	r3, r0
 80021b4:	75fb      	strb	r3, [r7, #23]
                    break;
 80021b6:	e002      	b.n	80021be <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 80021b8:	23fa      	movs	r3, #250	@ 0xfa
 80021ba:	75fb      	strb	r3, [r7, #23]
                    break;
 80021bc:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 80021be:	7dbb      	ldrb	r3, [r7, #22]
 80021c0:	3301      	adds	r3, #1
 80021c2:	75bb      	strb	r3, [r7, #22]
 80021c4:	7dba      	ldrb	r2, [r7, #22]
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f4ff af17 	bcc.w	8001ffc <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80021ce:	e001      	b.n	80021d4 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80021d0:	23ff      	movs	r3, #255	@ 0xff
 80021d2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80021d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	460b      	mov	r3, r1
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fea3 	bl	8002f3e <null_ptr_check>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80021fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 80f1 	bne.w	80023e8 <bmi3_get_sensor_config+0x208>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ed 	beq.w	80023e8 <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 800220e:	2300      	movs	r3, #0
 8002210:	75bb      	strb	r3, [r7, #22]
 8002212:	e0e3      	b.n	80023dc <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 8002214:	7dbb      	ldrb	r3, [r7, #22]
 8002216:	222e      	movs	r2, #46	@ 0x2e
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	f200 80d4 	bhi.w	80023d0 <bmi3_get_sensor_config+0x1f0>
 8002228:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <bmi3_get_sensor_config+0x50>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002265 	.word	0x08002265
 8002234:	08002281 	.word	0x08002281
 8002238:	080022d5 	.word	0x080022d5
 800223c:	0800229d 	.word	0x0800229d
 8002240:	080022b9 	.word	0x080022b9
 8002244:	08002345 	.word	0x08002345
 8002248:	0800230d 	.word	0x0800230d
 800224c:	08002329 	.word	0x08002329
 8002250:	080022f1 	.word	0x080022f1
 8002254:	08002361 	.word	0x08002361
 8002258:	0800237d 	.word	0x0800237d
 800225c:	08002399 	.word	0x08002399
 8002260:	080023b5 	.word	0x080023b5
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8002264:	7dbb      	ldrb	r3, [r7, #22]
 8002266:	222e      	movs	r2, #46	@ 0x2e
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	3302      	adds	r3, #2
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fa4d 	bl	8002714 <get_accel_config>
 800227a:	4603      	mov	r3, r0
 800227c:	75fb      	strb	r3, [r7, #23]
                    break;
 800227e:	e0aa      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8002280:	7dbb      	ldrb	r3, [r7, #22]
 8002282:	222e      	movs	r2, #46	@ 0x2e
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	3302      	adds	r3, #2
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fd73 	bl	8002d7c <get_gyro_config>
 8002296:	4603      	mov	r3, r0
 8002298:	75fb      	strb	r3, [r7, #23]
                    break;
 800229a:	e09c      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 800229c:	7dbb      	ldrb	r3, [r7, #22]
 800229e:	222e      	movs	r2, #46	@ 0x2e
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	3302      	adds	r3, #2
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fe66 	bl	8002f7e <get_any_motion_config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	75fb      	strb	r3, [r7, #23]
                    break;
 80022b6:	e08e      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 80022b8:	7dbb      	ldrb	r3, [r7, #22]
 80022ba:	222e      	movs	r2, #46	@ 0x2e
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	3302      	adds	r3, #2
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 ffc1 	bl	8003250 <get_no_motion_config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	75fb      	strb	r3, [r7, #23]
                    break;
 80022d2:	e080      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80022d4:	7dbb      	ldrb	r3, [r7, #22]
 80022d6:	222e      	movs	r2, #46	@ 0x2e
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	3302      	adds	r3, #2
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 fa17 	bl	8003718 <get_sig_motion_config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]
                    break;
 80022ee:	e072      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 80022f0:	7dbb      	ldrb	r3, [r7, #22]
 80022f2:	222e      	movs	r2, #46	@ 0x2e
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	3302      	adds	r3, #2
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	f001 f90d 	bl	8003520 <get_flat_config>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]
                    break;
 800230a:	e064      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 800230c:	7dbb      	ldrb	r3, [r7, #22]
 800230e:	222e      	movs	r2, #46	@ 0x2e
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	3302      	adds	r3, #2
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f001 fb41 	bl	80039a4 <get_tilt_config>
 8002322:	4603      	mov	r3, r0
 8002324:	75fb      	strb	r3, [r7, #23]
                    break;
 8002326:	e056      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 8002328:	7dbb      	ldrb	r3, [r7, #22]
 800232a:	222e      	movs	r2, #46	@ 0x2e
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	3302      	adds	r3, #2
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f001 fc02 	bl	8003b42 <get_orientation_config>
 800233e:	4603      	mov	r3, r0
 8002340:	75fb      	strb	r3, [r7, #23]
                    break;
 8002342:	e048      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8002344:	7dbb      	ldrb	r3, [r7, #22]
 8002346:	222e      	movs	r2, #46	@ 0x2e
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	3302      	adds	r3, #2
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	f001 fd37 	bl	8003dc8 <get_step_config>
 800235a:	4603      	mov	r3, r0
 800235c:	75fb      	strb	r3, [r7, #23]
                    break;
 800235e:	e03a      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8002360:	7dbb      	ldrb	r3, [r7, #22]
 8002362:	222e      	movs	r2, #46	@ 0x2e
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	3302      	adds	r3, #2
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	f002 f9b3 	bl	80046dc <get_tap_config>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]
                    break;
 800237a:	e02c      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 800237c:	7dbb      	ldrb	r3, [r7, #22]
 800237e:	222e      	movs	r2, #46	@ 0x2e
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	3302      	adds	r3, #2
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	f002 fcaa 	bl	8004ce6 <get_alternate_accel_config>
 8002392:	4603      	mov	r3, r0
 8002394:	75fb      	strb	r3, [r7, #23]
                    break;
 8002396:	e01e      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8002398:	7dbb      	ldrb	r3, [r7, #22]
 800239a:	222e      	movs	r2, #46	@ 0x2e
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	3302      	adds	r3, #2
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 fd25 	bl	8004df8 <get_alternate_gyro_config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
                    break;
 80023b2:	e010      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 80023b4:	7dbb      	ldrb	r3, [r7, #22]
 80023b6:	222e      	movs	r2, #46	@ 0x2e
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	3302      	adds	r3, #2
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 fd9d 	bl	8004f04 <get_alternate_auto_config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]
                    break;
 80023ce:	e002      	b.n	80023d6 <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 80023d0:	23fa      	movs	r3, #250	@ 0xfa
 80023d2:	75fb      	strb	r3, [r7, #23]
                    break;
 80023d4:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 80023d6:	7dbb      	ldrb	r3, [r7, #22]
 80023d8:	3301      	adds	r3, #1
 80023da:	75bb      	strb	r3, [r7, #22]
 80023dc:	7dba      	ldrb	r2, [r7, #22]
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f4ff af17 	bcc.w	8002214 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80023e6:	e001      	b.n	80023ec <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80023e8:	23ff      	movs	r3, #255	@ 0xff
 80023ea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80023ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <bmi3_get_sensor_data>:
/*!
 * @brief This API gets the sensor/feature data for accelerometer, gyroscope,
 * step counter, orientation, i3c sync accel, i3c sync gyro and i3c sync temperature.
 */
int8_t bmi3_get_sensor_data(struct bmi3_sensor_data *sensor_data, uint8_t n_sens, struct bmi3_dev *dev)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	460b      	mov	r3, r1
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fd99 	bl	8002f3e <null_ptr_check>
 800240c:	4603      	mov	r3, r0
 800240e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8002410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 80bf 	bne.w	8002598 <bmi3_get_sensor_data+0x1a0>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80bb 	beq.w	8002598 <bmi3_get_sensor_data+0x1a0>
    {
        for (loop = 0; loop < n_sens; loop++)
 8002422:	2300      	movs	r3, #0
 8002424:	75bb      	strb	r3, [r7, #22]
 8002426:	e0af      	b.n	8002588 <bmi3_get_sensor_data+0x190>
        {
            switch (sensor_data[loop].type)
 8002428:	7dba      	ldrb	r2, [r7, #22]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b10      	cmp	r3, #16
 800243c:	f200 809a 	bhi.w	8002574 <bmi3_get_sensor_data+0x17c>
 8002440:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <bmi3_get_sensor_data+0x50>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	0800248d 	.word	0x0800248d
 800244c:	080024af 	.word	0x080024af
 8002450:	08002575 	.word	0x08002575
 8002454:	08002575 	.word	0x08002575
 8002458:	08002575 	.word	0x08002575
 800245c:	080024d1 	.word	0x080024d1
 8002460:	08002575 	.word	0x08002575
 8002464:	080024f3 	.word	0x080024f3
 8002468:	08002575 	.word	0x08002575
 800246c:	08002575 	.word	0x08002575
 8002470:	08002575 	.word	0x08002575
 8002474:	08002575 	.word	0x08002575
 8002478:	08002575 	.word	0x08002575
 800247c:	08002575 	.word	0x08002575
 8002480:	08002515 	.word	0x08002515
 8002484:	08002535 	.word	0x08002535
 8002488:	08002555 	.word	0x08002555
            {
                case BMI3_ACCEL:
                    rslt = get_accel_sensor_data(&sensor_data[loop].sens_data.acc, BMI3_REG_ACC_DATA_X, dev);
 800248c:	7dba      	ldrb	r2, [r7, #22]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fb2a 	bl	8002afc <get_accel_sensor_data>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75fb      	strb	r3, [r7, #23]
                    break;
 80024ac:	e065      	b.n	800257a <bmi3_get_sensor_data+0x182>

                case BMI3_GYRO:
                    rslt = get_gyro_sensor_data(&sensor_data[loop].sens_data.gyr, BMI3_REG_GYR_DATA_X, dev);
 80024ae:	7dba      	ldrb	r2, [r7, #22]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	461a      	mov	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	2106      	movs	r1, #6
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fb84 	bl	8002bd2 <get_gyro_sensor_data>
 80024ca:	4603      	mov	r3, r0
 80024cc:	75fb      	strb	r3, [r7, #23]
                    break;
 80024ce:	e054      	b.n	800257a <bmi3_get_sensor_data+0x182>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_counter_sensor_data(&sensor_data[loop].sens_data.step_counter_output,
 80024d0:	7dba      	ldrb	r2, [r7, #22]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	2112      	movs	r1, #18
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fbdd 	bl	8002ca6 <get_step_counter_sensor_data>
 80024ec:	4603      	mov	r3, r0
 80024ee:	75fb      	strb	r3, [r7, #23]
                                                        BMI3_REG_FEATURE_IO2,
                                                        dev);
                    break;
 80024f0:	e043      	b.n	800257a <bmi3_get_sensor_data+0x182>

                case BMI3_ORIENTATION:
                    rslt = get_orient_output_data(&sensor_data[loop].sens_data.orient_output,
 80024f2:	7dba      	ldrb	r2, [r7, #22]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	2147      	movs	r1, #71	@ 0x47
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fc07 	bl	8002d1c <get_orient_output_data>
 800250e:	4603      	mov	r3, r0
 8002510:	75fb      	strb	r3, [r7, #23]
                                                  BMI3_REG_FEATURE_EVENT_EXT,
                                                  dev);
                    break;
 8002512:	e032      	b.n	800257a <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_ACCEL:
                    rslt = get_i3c_sync_accel_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8002514:	7dba      	ldrb	r2, [r7, #22]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	3304      	adds	r3, #4
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f002 fa97 	bl	8004a5c <get_i3c_sync_accel_sensor_data>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]
                    break;
 8002532:	e022      	b.n	800257a <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_GYRO:
                    rslt = get_i3c_sync_gyro_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8002534:	7dba      	ldrb	r2, [r7, #22]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fae0 	bl	8004b0e <get_i3c_sync_gyro_sensor_data>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]
                    break;
 8002552:	e012      	b.n	800257a <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_TEMP:
                    rslt = get_i3c_sync_temp_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8002554:	7dba      	ldrb	r2, [r7, #22]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fb2c 	bl	8004bc6 <get_i3c_sync_temp_data>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]
                    break;
 8002572:	e002      	b.n	800257a <bmi3_get_sensor_data+0x182>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8002574:	23fa      	movs	r3, #250	@ 0xfa
 8002576:	75fb      	strb	r3, [r7, #23]
                    break;
 8002578:	bf00      	nop
            }

            /* Return error if any of the get sensor data fails */
            if (rslt != BMI3_OK)
 800257a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <bmi3_get_sensor_data+0x19c>
        for (loop = 0; loop < n_sens; loop++)
 8002582:	7dbb      	ldrb	r3, [r7, #22]
 8002584:	3301      	adds	r3, #1
 8002586:	75bb      	strb	r3, [r7, #22]
 8002588:	7dba      	ldrb	r2, [r7, #22]
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	429a      	cmp	r2, r3
 800258e:	f4ff af4b 	bcc.w	8002428 <bmi3_get_sensor_data+0x30>
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8002592:	e003      	b.n	800259c <bmi3_get_sensor_data+0x1a4>
            {
                break;
 8002594:	bf00      	nop
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8002596:	e001      	b.n	800259c <bmi3_get_sensor_data+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002598:	23ff      	movs	r3, #255	@ 0xff
 800259a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800259c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 80025b2:	2300      	movs	r3, #0
 80025b4:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a3 	beq.w	8002704 <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1c58      	adds	r0, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	1c99      	adds	r1, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	1d1a      	adds	r2, r3, #4
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f000 f8ee 	bl	80027ac <validate_bw_avg_acc_mode>
 80025d0:	4603      	mov	r3, r0
 80025d2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80025d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d108      	bne.n	80025ee <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3303      	adds	r3, #3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f000 f91c 	bl	8002822 <validate_acc_odr_range>
 80025ea:	4603      	mov	r3, r0
 80025ec:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 80025ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11f      	bne.n	8002636 <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	789b      	ldrb	r3, [r3, #2]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d109      	bne.n	8002612 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	791b      	ldrb	r3, [r3, #4]
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f002 fcb5 	bl	8004f78 <validate_acc_odr_avg>
 800260e:	4603      	mov	r3, r0
 8002610:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	789b      	ldrb	r3, [r3, #2]
 8002616:	2b04      	cmp	r3, #4
 8002618:	d003      	beq.n	8002622 <set_accel_config+0x7a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	789b      	ldrb	r3, [r3, #2]
 800261e:	2b07      	cmp	r3, #7
 8002620:	d109      	bne.n	8002636 <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <set_accel_config+0x8e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d801      	bhi.n	8002636 <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8002632:	23fc      	movs	r3, #252	@ 0xfc
 8002634:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8002636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d15f      	bne.n	80026fe <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 800263e:	7a3b      	ldrb	r3, [r7, #8]
 8002640:	b21b      	sxth	r3, r3
 8002642:	f023 030f 	bic.w	r3, r3, #15
 8002646:	b21a      	sxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b21b      	sxth	r3, r3
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	b21b      	sxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b21b      	sxth	r3, r3
 8002658:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 800265a:	7a3b      	ldrb	r3, [r7, #8]
 800265c:	b21b      	sxth	r3, r3
 800265e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002662:	b21a      	sxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	78db      	ldrb	r3, [r3, #3]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	b21b      	sxth	r3, r3
 800266c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b21b      	sxth	r3, r3
 8002676:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8002678:	7a3b      	ldrb	r3, [r7, #8]
 800267a:	b21b      	sxth	r3, r3
 800267c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002680:	b21a      	sxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	b21b      	sxth	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	b21b      	sxth	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	b21b      	sxth	r3, r3
 8002692:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 8002694:	7a7b      	ldrb	r3, [r7, #9]
 8002696:	b21a      	sxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	791b      	ldrb	r3, [r3, #4]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b21b      	sxth	r3, r3
 80026a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 80026ac:	7a7b      	ldrb	r3, [r7, #9]
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	789b      	ldrb	r3, [r3, #2]
 80026b4:	031b      	lsls	r3, r3, #12
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 80026c4:	8abb      	ldrh	r3, [r7, #20]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	8a7b      	ldrh	r3, [r7, #18]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	8a3b      	ldrh	r3, [r7, #16]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 80026da:	89fa      	ldrh	r2, [r7, #14]
 80026dc:	89bb      	ldrh	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 80026ea:	f107 0108 	add.w	r1, r7, #8
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	2020      	movs	r0, #32
 80026f4:	f7ff fb78 	bl	8001de8 <bmi3_set_regs>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]
 80026fc:	e004      	b.n	8002708 <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80026fe:	23fc      	movs	r3, #252	@ 0xfc
 8002700:	75fb      	strb	r3, [r7, #23]
 8002702:	e001      	b.n	8002708 <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002704:	23ff      	movs	r3, #255	@ 0xff
 8002706:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 800271e:	2300      	movs	r3, #0
 8002720:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d039      	beq.n	800279c <get_accel_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 8002728:	f107 0108 	add.w	r1, r7, #8
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2202      	movs	r2, #2
 8002730:	2020      	movs	r0, #32
 8002732:	f7ff faf4 	bl	8001d1e <bmi3_get_regs>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d12e      	bne.n	80027a0 <get_accel_config+0x8c>
        {
            reg_data = data_array[0];
 8002742:	7a3b      	ldrb	r3, [r7, #8]
 8002744:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8002746:	89bb      	ldrh	r3, [r7, #12]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	b2da      	uxtb	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 8002754:	89bb      	ldrh	r3, [r7, #12]
 8002756:	111b      	asrs	r3, r3, #4
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	b2da      	uxtb	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 8002764:	89bb      	ldrh	r3, [r7, #12]
 8002766:	11db      	asrs	r3, r3, #7
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8002774:	7a7b      	ldrb	r3, [r7, #9]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 800277a:	89bb      	ldrh	r3, [r7, #12]
 800277c:	121b      	asrs	r3, r3, #8
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	b2da      	uxtb	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 800278a:	89bb      	ldrh	r3, [r7, #12]
 800278c:	131b      	asrs	r3, r3, #12
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	709a      	strb	r2, [r3, #2]
 800279a:	e001      	b.n	80027a0 <get_accel_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800279c:	23ff      	movs	r3, #255	@ 0xff
 800279e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80027a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d026      	beq.n	800280e <validate_bw_avg_acc_mode+0x62>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d023      	beq.n	800280e <validate_bw_avg_acc_mode+0x62>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2207      	movs	r2, #7
 80027d0:	2100      	movs	r1, #0
 80027d2:	68b8      	ldr	r0, [r7, #8]
 80027d4:	f000 f84e 	bl	8002874 <check_boundary_val>
 80027d8:	4603      	mov	r3, r0
 80027da:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80027dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d117      	bne.n	8002814 <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2206      	movs	r2, #6
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f842 	bl	8002874 <check_boundary_val>
 80027f0:	4603      	mov	r3, r0
 80027f2:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 80027f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	2100      	movs	r1, #0
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f836 	bl	8002874 <check_boundary_val>
 8002808:	4603      	mov	r3, r0
 800280a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 800280c:	e002      	b.n	8002814 <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800280e:	23ff      	movs	r3, #255	@ 0xff
 8002810:	75fb      	strb	r3, [r7, #23]
 8002812:	e000      	b.n	8002816 <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8002814:	bf00      	nop
    }

    return rslt;
 8002816:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d017      	beq.n	8002864 <validate_acc_odr_range+0x42>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d014      	beq.n	8002864 <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	220e      	movs	r2, #14
 800283e:	2101      	movs	r1, #1
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f817 	bl	8002874 <check_boundary_val>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800284a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	2100      	movs	r1, #0
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	f000 f80b 	bl	8002874 <check_boundary_val>
 800285e:	4603      	mov	r3, r0
 8002860:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8002862:	e001      	b.n	8002868 <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002864:	23ff      	movs	r3, #255	@ 0xff
 8002866:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002868:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	72fb      	strb	r3, [r7, #11]
 8002882:	4613      	mov	r3, r2
 8002884:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fb59 	bl	8002f3e <null_ptr_check>
 800288c:	4603      	mov	r3, r0
 800288e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8002890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <check_boundary_val+0x68>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01e      	beq.n	80028dc <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	7afa      	ldrb	r2, [r7, #11]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d909      	bls.n	80028bc <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	7afa      	ldrb	r2, [r7, #11]
 80028ac:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7a1b      	ldrb	r3, [r3, #8]
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	7aba      	ldrb	r2, [r7, #10]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d20c      	bcs.n	80028e0 <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	7aba      	ldrb	r2, [r7, #10]
 80028ca:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7a1b      	ldrb	r3, [r3, #8]
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 80028da:	e001      	b.n	80028e0 <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80028dc:	23ff      	movs	r3, #255	@ 0xff
 80028de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80028e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 80028f6:	2300      	movs	r3, #0
 80028f8:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8091 	beq.w	8002a24 <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	1c58      	adds	r0, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1c99      	adds	r1, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	1d1a      	adds	r2, r3, #4
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f000 f890 	bl	8002a34 <validate_bw_avg_gyr_mode>
 8002914:	4603      	mov	r3, r0
 8002916:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3303      	adds	r3, #3
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f000 f8be 	bl	8002aaa <validate_gyr_odr_range>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8002932:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	789b      	ldrb	r3, [r3, #2]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d109      	bne.n	8002956 <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	791b      	ldrb	r3, [r3, #4]
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f002 fbf1 	bl	8005134 <validate_gyr_odr_avg>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8002956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d15f      	bne.n	8002a1e <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 800295e:	7a3b      	ldrb	r3, [r7, #8]
 8002960:	b21b      	sxth	r3, r3
 8002962:	f023 030f 	bic.w	r3, r3, #15
 8002966:	b21a      	sxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b21b      	sxth	r3, r3
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b21b      	sxth	r3, r3
 8002978:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 800297a:	7a3b      	ldrb	r3, [r7, #8]
 800297c:	b21b      	sxth	r3, r3
 800297e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002982:	b21a      	sxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	78db      	ldrb	r3, [r3, #3]
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	b21b      	sxth	r3, r3
 800298c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002990:	b21b      	sxth	r3, r3
 8002992:	4313      	orrs	r3, r2
 8002994:	b21b      	sxth	r3, r3
 8002996:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8002998:	7a3b      	ldrb	r3, [r7, #8]
 800299a:	b21b      	sxth	r3, r3
 800299c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	01db      	lsls	r3, r3, #7
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 80029b4:	7a7b      	ldrb	r3, [r7, #9]
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	791b      	ldrb	r3, [r3, #4]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b21b      	sxth	r3, r3
 80029c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	4313      	orrs	r3, r2
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 80029cc:	7a7b      	ldrb	r3, [r7, #9]
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	789b      	ldrb	r3, [r3, #2]
 80029d4:	031b      	lsls	r3, r3, #12
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 80029e4:	8abb      	ldrh	r3, [r7, #20]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	8a7b      	ldrh	r3, [r7, #18]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	8a3b      	ldrh	r3, [r7, #16]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 80029fa:	89fa      	ldrh	r2, [r7, #14]
 80029fc:	89bb      	ldrh	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8002a0a:	f107 0108 	add.w	r1, r7, #8
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2202      	movs	r2, #2
 8002a12:	2021      	movs	r0, #33	@ 0x21
 8002a14:	f7ff f9e8 	bl	8001de8 <bmi3_set_regs>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]
 8002a1c:	e004      	b.n	8002a28 <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8002a1e:	23fb      	movs	r3, #251	@ 0xfb
 8002a20:	75fb      	strb	r3, [r7, #23]
 8002a22:	e001      	b.n	8002a28 <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002a24:	23ff      	movs	r3, #255	@ 0xff
 8002a26:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d026      	beq.n	8002a96 <validate_bw_avg_gyr_mode+0x62>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d023      	beq.n	8002a96 <validate_bw_avg_gyr_mode+0x62>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2207      	movs	r2, #7
 8002a58:	2100      	movs	r1, #0
 8002a5a:	68b8      	ldr	r0, [r7, #8]
 8002a5c:	f7ff ff0a 	bl	8002874 <check_boundary_val>
 8002a60:	4603      	mov	r3, r0
 8002a62:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d117      	bne.n	8002a9c <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2206      	movs	r2, #6
 8002a70:	2100      	movs	r1, #0
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff fefe 	bl	8002874 <check_boundary_val>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8002a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2201      	movs	r2, #1
 8002a88:	2100      	movs	r1, #0
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff fef2 	bl	8002874 <check_boundary_val>
 8002a90:	4603      	mov	r3, r0
 8002a92:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8002a94:	e002      	b.n	8002a9c <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002a96:	23ff      	movs	r3, #255	@ 0xff
 8002a98:	75fb      	strb	r3, [r7, #23]
 8002a9a:	e000      	b.n	8002a9e <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 8002a9c:	bf00      	nop
    }

    return rslt;
 8002a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d017      	beq.n	8002aec <validate_gyr_odr_range+0x42>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d014      	beq.n	8002aec <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	220e      	movs	r2, #14
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff fed3 	bl	8002874 <check_boundary_val>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2204      	movs	r2, #4
 8002ade:	2100      	movs	r1, #0
 8002ae0:	68b8      	ldr	r0, [r7, #8]
 8002ae2:	f7ff fec7 	bl	8002874 <check_boundary_val>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8002aea:	e001      	b.n	8002af0 <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002aec:	23ff      	movs	r3, #255	@ 0xff
 8002aee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <get_accel_sensor_data>:

/*!
 * @brief This internal API gets the accelerometer data from the register.
 */
int8_t get_accel_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	@ 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	460b      	mov	r3, r1
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_ACC_NUM_BYTES] = { 0 };
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]

    /* Stores the accel x, y and z axis data from register */
    uint16_t acc_data[6];

    if (data != NULL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04e      	beq.n	8002bc0 <get_accel_sensor_data+0xc4>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_ACC_NUM_BYTES, dev);
 8002b22:	f107 0120 	add.w	r1, r7, #32
 8002b26:	7af8      	ldrb	r0, [r7, #11]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2214      	movs	r2, #20
 8002b2c:	f7ff f8f7 	bl	8001d1e <bmi3_get_regs>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8002b36:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d143      	bne.n	8002bc6 <get_accel_sensor_data+0xca>
        {
            acc_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8002b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b42:	b21a      	sxth	r2, r3
 8002b44:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	b21b      	sxth	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	82bb      	strh	r3, [r7, #20]
            acc_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8002b54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	b21b      	sxth	r3, r3
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	82fb      	strh	r3, [r7, #22]
            acc_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8002b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b6e:	b21a      	sxth	r2, r3
 8002b70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	833b      	strh	r3, [r7, #24]
            acc_data[3] = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 8002b80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	837b      	strh	r3, [r7, #26]
            acc_data[4] = (reg_data[16] | (uint16_t)reg_data[17] << 8);
 8002b96:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	83bb      	strh	r3, [r7, #28]
            acc_data[5] = reg_data[18];
 8002bac:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002bb0:	83fb      	strh	r3, [r7, #30]

            /* Get accelerometer data from the register */
            get_acc_data(data, acc_data);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f92b 	bl	8002e14 <get_acc_data>
 8002bbe:	e002      	b.n	8002bc6 <get_accel_sensor_data+0xca>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002bc0:	23ff      	movs	r3, #255	@ 0xff
 8002bc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8002bc6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3738      	adds	r7, #56	@ 0x38
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <get_gyro_sensor_data>:

/*!
 * @brief This internal API gets the gyroscope data from the register.
 */
int8_t get_gyro_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b08c      	sub	sp, #48	@ 0x30
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_GYR_NUM_BYTES] = { 0 };
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	811a      	strh	r2, [r3, #8]

    /* Variable to store x, y and z axis gyro data */
    uint16_t gyr_data[6];

    if (data != NULL)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d04e      	beq.n	8002c94 <get_gyro_sensor_data+0xc2>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_GYR_NUM_BYTES, dev);
 8002bf6:	f107 0120 	add.w	r1, r7, #32
 8002bfa:	7af8      	ldrb	r0, [r7, #11]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	220e      	movs	r2, #14
 8002c00:	f7ff f88d 	bl	8001d1e <bmi3_get_regs>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8002c0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d143      	bne.n	8002c9a <get_gyro_sensor_data+0xc8>
        {
            gyr_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8002c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c16:	b21a      	sxth	r2, r3
 8002c18:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b21b      	sxth	r3, r3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	82bb      	strh	r3, [r7, #20]
            gyr_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8002c28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b21b      	sxth	r3, r3
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b21b      	sxth	r3, r3
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	82fb      	strh	r3, [r7, #22]
            gyr_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8002c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c42:	b21a      	sxth	r2, r3
 8002c44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	b21b      	sxth	r3, r3
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	833b      	strh	r3, [r7, #24]
            gyr_data[3] = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 8002c54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	b21b      	sxth	r3, r3
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	837b      	strh	r3, [r7, #26]
            gyr_data[4] = (reg_data[10] | (uint16_t)reg_data[11] << 8);
 8002c6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	83bb      	strh	r3, [r7, #28]
            gyr_data[5] = reg_data[12];
 8002c80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002c84:	83fb      	strh	r3, [r7, #30]

            /* Get gyro data from the register */
            get_gyr_data(data, gyr_data);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f90b 	bl	8002ea8 <get_gyr_data>
 8002c92:	e002      	b.n	8002c9a <get_gyro_sensor_data+0xc8>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002c94:	23ff      	movs	r3, #255	@ 0xff
 8002c96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8002c9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3730      	adds	r7, #48	@ 0x30
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <get_step_counter_sensor_data>:

/*!
 * @brief This internal API gets the step counter data from the register.
 */
static int8_t get_step_counter_sensor_data(uint32_t *step_count, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[4] = { 0 };
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]

    if (step_count != NULL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d026      	beq.n	8002d0c <get_step_counter_sensor_data+0x66>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, 4, dev);
 8002cbe:	f107 0110 	add.w	r1, r7, #16
 8002cc2:	7af8      	ldrb	r0, [r7, #11]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	f7ff f829 	bl	8001d1e <bmi3_get_regs>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d11b      	bne.n	8002d10 <get_step_counter_sensor_data+0x6a>
        {
            /* Get the step counter output in 4 bytes */
            *step_count = (uint32_t) reg_data[0];
 8002cd8:	7c3b      	ldrb	r3, [r7, #16]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[1] << 8);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	7c7b      	ldrb	r3, [r7, #17]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[2] << 16);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	7cbb      	ldrb	r3, [r7, #18]
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[3] << 24);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e001      	b.n	8002d10 <get_step_counter_sensor_data+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002d0c:	23ff      	movs	r3, #255	@ 0xff
 8002d0e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <get_orient_output_data>:
/*!
 * @brief This internal API gets the output values of orientation: portrait-
 * landscape and face up-down.
 */
static int8_t get_orient_output_data(struct bmi3_orientation_output *orient_out, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	460b      	mov	r3, r1
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[2] = { 0 };
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	82bb      	strh	r3, [r7, #20]

    if (orient_out != NULL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01b      	beq.n	8002d6c <get_orient_output_data+0x50>
    {
        /* Read the data from feature engine status register */
        rslt = bmi3_get_regs(reg_addr, reg_data, 2, dev);
 8002d34:	f107 0114 	add.w	r1, r7, #20
 8002d38:	7af8      	ldrb	r0, [r7, #11]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f7fe ffee 	bl	8001d1e <bmi3_get_regs>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8002d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d110      	bne.n	8002d70 <get_orient_output_data+0x54>
        {
            /* Get the output value of the orientation detection feature */
            orient_out->orientation_portrait_landscape = BMI3_GET_BIT_POS0(reg_data[0],
 8002d4e:	7d3b      	ldrb	r3, [r7, #20]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	701a      	strb	r2, [r3, #0]
                                                                           BMI3_ORIENTATION_PORTRAIT_LANDSCAPE);

            /* Get the output value of the orientation face up-down feature */
            orient_out->orientation_faceup_down = BMI3_GET_BITS(reg_data[0], BMI3_ORIENTATION_FACEUP_DOWN);
 8002d5a:	7d3b      	ldrb	r3, [r7, #20]
 8002d5c:	109b      	asrs	r3, r3, #2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	705a      	strb	r2, [r3, #1]
 8002d6a:	e001      	b.n	8002d70 <get_orient_output_data+0x54>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002d6c:	23ff      	movs	r3, #255	@ 0xff
 8002d6e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8002d86:	2300      	movs	r3, #0
 8002d88:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d039      	beq.n	8002e04 <get_gyro_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 8002d90:	f107 0108 	add.w	r1, r7, #8
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2202      	movs	r2, #2
 8002d98:	2021      	movs	r0, #33	@ 0x21
 8002d9a:	f7fe ffc0 	bl	8001d1e <bmi3_get_regs>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d12e      	bne.n	8002e08 <get_gyro_config+0x8c>
        {
            reg_data = data_array[0];
 8002daa:	7a3b      	ldrb	r3, [r7, #8]
 8002dac:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 8002dae:	89bb      	ldrh	r3, [r7, #12]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 8002dbc:	89bb      	ldrh	r3, [r7, #12]
 8002dbe:	111b      	asrs	r3, r3, #4
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 8002dcc:	89bb      	ldrh	r3, [r7, #12]
 8002dce:	11db      	asrs	r3, r3, #7
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8002ddc:	7a7b      	ldrb	r3, [r7, #9]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 8002de2:	89bb      	ldrh	r3, [r7, #12]
 8002de4:	121b      	asrs	r3, r3, #8
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 8002df2:	89bb      	ldrh	r3, [r7, #12]
 8002df4:	131b      	asrs	r3, r3, #12
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	709a      	strb	r2, [r3, #2]
 8002e02:	e001      	b.n	8002e08 <get_gyro_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8002e04:	23ff      	movs	r3, #255	@ 0xff
 8002e06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <get_acc_data>:

/*!
 * @brief This internal API gets the accelerometer data.
 */
static void get_acc_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b21a      	sxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3304      	adds	r3, #4
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3306      	adds	r3, #6
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_ACC_X_MASK);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	330a      	adds	r3, #10
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	b2d9      	uxtb	r1, r3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	7b13      	ldrb	r3, [r2, #12]
 8002e66:	f361 0300 	bfi	r3, r1, #0, #1
 8002e6a:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_ACC_Y_MASK) >> BMI3_SATF_ACC_Y_POS;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	330a      	adds	r3, #10
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	105b      	asrs	r3, r3, #1
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	b2d9      	uxtb	r1, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	7b13      	ldrb	r3, [r2, #12]
 8002e7e:	f361 0341 	bfi	r3, r1, #1, #1
 8002e82:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_ACC_Z_MASK) >> BMI3_SATF_ACC_Z_POS;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	330a      	adds	r3, #10
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	109b      	asrs	r3, r3, #2
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	b2d9      	uxtb	r1, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	7b13      	ldrb	r3, [r2, #12]
 8002e96:	f361 0382 	bfi	r3, r1, #2, #1
 8002e9a:	7313      	strb	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <get_gyr_data>:

/*!
 * @brief This internal API gets the gyroscope data.
 */
static void get_gyr_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b21a      	sxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	3306      	adds	r3, #6
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_GYR_X_MASK) >> BMI3_SATF_GYR_X_POS;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	330a      	adds	r3, #10
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	10db      	asrs	r3, r3, #3
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	b2d9      	uxtb	r1, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	7b13      	ldrb	r3, [r2, #12]
 8002efc:	f361 0300 	bfi	r3, r1, #0, #1
 8002f00:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_GYR_Y_MASK) >> BMI3_SATF_GYR_Y_POS;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	330a      	adds	r3, #10
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	111b      	asrs	r3, r3, #4
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	b2d9      	uxtb	r1, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	7b13      	ldrb	r3, [r2, #12]
 8002f14:	f361 0341 	bfi	r3, r1, #1, #1
 8002f18:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_GYR_Z_MASK) >> BMI3_SATF_GYR_Z_POS;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	330a      	adds	r3, #10
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	115b      	asrs	r3, r3, #5
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	b2d9      	uxtb	r1, r3
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	7b13      	ldrb	r3, [r2, #12]
 8002f2c:	f361 0382 	bfi	r3, r1, #2, #1
 8002f30:	7313      	strb	r3, [r2, #12]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <null_ptr_check+0x26>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <null_ptr_check+0x26>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <null_ptr_check+0x26>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 8002f64:	23ff      	movs	r3, #255	@ 0xff
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e001      	b.n	8002f6e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b088      	sub	sp, #32
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 8002f90:	2305      	movs	r3, #5
 8002f92:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d078      	beq.n	8003090 <get_any_motion_config+0x112>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8002f9e:	f107 010c 	add.w	r1, r7, #12
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	2041      	movs	r0, #65	@ 0x41
 8002fa8:	f7fe ff1e 	bl	8001de8 <bmi3_set_regs>
 8002fac:	4603      	mov	r3, r0
 8002fae:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8002fb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d16d      	bne.n	8003094 <get_any_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 8002fb8:	f107 0110 	add.w	r1, r7, #16
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2206      	movs	r2, #6
 8002fc0:	2042      	movs	r0, #66	@ 0x42
 8002fc2:	f7fe feac 	bl	8001d1e <bmi3_get_regs>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8002fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d160      	bne.n	8003094 <get_any_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 8002fd2:	7fbb      	ldrb	r3, [r7, #30]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	77ba      	strb	r2, [r7, #30]
 8002fd8:	3320      	adds	r3, #32
 8002fda:	443b      	add	r3, r7
 8002fdc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002fe0:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8002fe2:	7fbb      	ldrb	r3, [r7, #30]
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	77ba      	strb	r2, [r7, #30]
 8002fe8:	3320      	adds	r3, #32
 8002fea:	443b      	add	r3, r7
 8002fec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8002ff4:	8bba      	ldrh	r2, [r7, #28]
 8002ff6:	8b7b      	ldrh	r3, [r7, #26]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 8002ffc:	8b3b      	ldrh	r3, [r7, #24]
 8002ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 8003008:	8b3b      	ldrh	r3, [r7, #24]
 800300a:	131b      	asrs	r3, r3, #12
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 8003018:	7fbb      	ldrb	r3, [r7, #30]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	77ba      	strb	r2, [r7, #30]
 800301e:	3320      	adds	r3, #32
 8003020:	443b      	add	r3, r7
 8003022:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003026:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 8003028:	7fbb      	ldrb	r3, [r7, #30]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	77ba      	strb	r2, [r7, #30]
 800302e:	3320      	adds	r3, #32
 8003030:	443b      	add	r3, r7
 8003032:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 800303a:	8bba      	ldrh	r2, [r7, #28]
 800303c:	8b7b      	ldrh	r3, [r7, #26]
 800303e:	4313      	orrs	r3, r2
 8003040:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8003042:	8b3b      	ldrh	r3, [r7, #24]
 8003044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 800304e:	7fbb      	ldrb	r3, [r7, #30]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	77ba      	strb	r2, [r7, #30]
 8003054:	3320      	adds	r3, #32
 8003056:	443b      	add	r3, r7
 8003058:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800305c:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 800305e:	7fbb      	ldrb	r3, [r7, #30]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	77ba      	strb	r2, [r7, #30]
 8003064:	3320      	adds	r3, #32
 8003066:	443b      	add	r3, r7
 8003068:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8003070:	8bba      	ldrh	r2, [r7, #28]
 8003072:	8b7b      	ldrh	r3, [r7, #26]
 8003074:	4313      	orrs	r3, r2
 8003076:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8003078:	8b3b      	ldrh	r3, [r7, #24]
 800307a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8003084:	8b3b      	ldrh	r3, [r7, #24]
 8003086:	0b5b      	lsrs	r3, r3, #13
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	811a      	strh	r2, [r3, #8]
 800308e:	e001      	b.n	8003094 <get_any_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003090:	23ff      	movs	r3, #255	@ 0xff
 8003092:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003094:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08e      	sub	sp, #56	@ 0x38
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 80030aa:	2305      	movs	r3, #5
 80030ac:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	2300      	movs	r3, #0
 80030b4:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	2300      	movs	r3, #0
 80030bc:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80b6 	beq.w	8003232 <set_any_motion_config+0x192>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80030c6:	f107 011c 	add.w	r1, r7, #28
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2202      	movs	r2, #2
 80030ce:	2041      	movs	r0, #65	@ 0x41
 80030d0:	f7fe fe8a 	bl	8001de8 <bmi3_set_regs>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 80030da:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 80aa 	bne.w	8003238 <set_any_motion_config+0x198>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80030e4:	7b3b      	ldrb	r3, [r7, #12]
 80030e6:	b21a      	sxth	r2, r3
 80030e8:	4b56      	ldr	r3, [pc, #344]	@ (8003244 <set_any_motion_config+0x1a4>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	b21a      	sxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	885b      	ldrh	r3, [r3, #2]
 80030f2:	b21b      	sxth	r3, r3
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 8003100:	7b7b      	ldrb	r3, [r7, #13]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8003106:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800310a:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <set_any_motion_config+0x1a4>)
 800310c:	4013      	ands	r3, r2
 800310e:	b21a      	sxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	885b      	ldrh	r3, [r3, #2]
 8003114:	b21b      	sxth	r3, r3
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	b21b      	sxth	r3, r3
 800311c:	4313      	orrs	r3, r2
 800311e:	b21b      	sxth	r3, r3
 8003120:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 8003122:	7b7b      	ldrb	r3, [r7, #13]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 8003128:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800312c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003130:	b21a      	sxth	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	031b      	lsls	r3, r3, #12
 8003138:	b21b      	sxth	r3, r3
 800313a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800313e:	b21b      	sxth	r3, r3
 8003140:	4313      	orrs	r3, r2
 8003142:	b21b      	sxth	r3, r3
 8003144:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8003146:	7bbb      	ldrb	r3, [r7, #14]
 8003148:	b21a      	sxth	r2, r3
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <set_any_motion_config+0x1a8>)
 800314c:	4013      	ands	r3, r2
 800314e:	b21a      	sxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	88db      	ldrh	r3, [r3, #6]
 8003154:	b21b      	sxth	r3, r3
 8003156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800315a:	b21b      	sxth	r3, r3
 800315c:	4313      	orrs	r3, r2
 800315e:	b21b      	sxth	r3, r3
 8003160:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8003162:	7bbb      	ldrb	r3, [r7, #14]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8003168:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800316c:	4b36      	ldr	r3, [pc, #216]	@ (8003248 <set_any_motion_config+0x1a8>)
 800316e:	4013      	ands	r3, r2
 8003170:	b21a      	sxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	88db      	ldrh	r3, [r3, #6]
 8003176:	b21b      	sxth	r3, r3
 8003178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800317c:	b21b      	sxth	r3, r3
 800317e:	4313      	orrs	r3, r2
 8003180:	b21b      	sxth	r3, r3
 8003182:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	b21a      	sxth	r2, r3
 8003188:	4b30      	ldr	r3, [pc, #192]	@ (800324c <set_any_motion_config+0x1ac>)
 800318a:	4013      	ands	r3, r2
 800318c:	b21a      	sxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b21b      	sxth	r3, r3
 8003194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003198:	b21b      	sxth	r3, r3
 800319a:	4313      	orrs	r3, r2
 800319c:	b21b      	sxth	r3, r3
 800319e:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 80031a0:	7c3b      	ldrb	r3, [r7, #16]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 80031a6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80031aa:	4b28      	ldr	r3, [pc, #160]	@ (800324c <set_any_motion_config+0x1ac>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	b21a      	sxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	b21b      	sxth	r3, r3
 80031c0:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 80031c2:	7c7b      	ldrb	r3, [r7, #17]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 80031c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80031cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031d0:	b21a      	sxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	891b      	ldrh	r3, [r3, #8]
 80031d6:	035b      	lsls	r3, r3, #13
 80031d8:	b21b      	sxth	r3, r3
 80031da:	4313      	orrs	r3, r2
 80031dc:	b21b      	sxth	r3, r3
 80031de:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 80031e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 80031e6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80031e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80031ea:	4313      	orrs	r3, r2
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 80031f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 80031fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b29b      	uxth	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 8003206:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003208:	b2db      	uxtb	r3, r3
 800320a:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 800320c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800320e:	8bfb      	ldrh	r3, [r7, #30]
 8003210:	4313      	orrs	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	b29b      	uxth	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 800321c:	f107 0114 	add.w	r1, r7, #20
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2206      	movs	r2, #6
 8003224:	2042      	movs	r0, #66	@ 0x42
 8003226:	f7fe fddf 	bl	8001de8 <bmi3_set_regs>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003230:	e002      	b.n	8003238 <set_any_motion_config+0x198>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003232:	23ff      	movs	r3, #255	@ 0xff
 8003234:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8003238:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800323c:	4618      	mov	r0, r3
 800323e:	3738      	adds	r7, #56	@ 0x38
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	fffff000 	.word	0xfffff000
 8003248:	fffffc00 	.word	0xfffffc00
 800324c:	ffffe000 	.word	0xffffe000

08003250 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	2300      	movs	r3, #0
 8003260:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8003262:	2308      	movs	r3, #8
 8003264:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d078      	beq.n	8003362 <get_no_motion_config+0x112>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003270:	f107 010c 	add.w	r1, r7, #12
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2202      	movs	r2, #2
 8003278:	2041      	movs	r0, #65	@ 0x41
 800327a:	f7fe fdb5 	bl	8001de8 <bmi3_set_regs>
 800327e:	4603      	mov	r3, r0
 8003280:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003282:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d16d      	bne.n	8003366 <get_no_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 800328a:	f107 0110 	add.w	r1, r7, #16
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2206      	movs	r2, #6
 8003292:	2042      	movs	r0, #66	@ 0x42
 8003294:	f7fe fd43 	bl	8001d1e <bmi3_get_regs>
 8003298:	4603      	mov	r3, r0
 800329a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 800329c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d160      	bne.n	8003366 <get_no_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 80032a4:	7fbb      	ldrb	r3, [r7, #30]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	77ba      	strb	r2, [r7, #30]
 80032aa:	3320      	adds	r3, #32
 80032ac:	443b      	add	r3, r7
 80032ae:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032b2:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80032b4:	7fbb      	ldrb	r3, [r7, #30]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	77ba      	strb	r2, [r7, #30]
 80032ba:	3320      	adds	r3, #32
 80032bc:	443b      	add	r3, r7
 80032be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80032c6:	8bba      	ldrh	r2, [r7, #28]
 80032c8:	8b7b      	ldrh	r3, [r7, #26]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80032ce:	8b3b      	ldrh	r3, [r7, #24]
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 80032da:	8b3b      	ldrh	r3, [r7, #24]
 80032dc:	131b      	asrs	r3, r3, #12
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 80032ea:	7fbb      	ldrb	r3, [r7, #30]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	77ba      	strb	r2, [r7, #30]
 80032f0:	3320      	adds	r3, #32
 80032f2:	443b      	add	r3, r7
 80032f4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032f8:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80032fa:	7fbb      	ldrb	r3, [r7, #30]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	77ba      	strb	r2, [r7, #30]
 8003300:	3320      	adds	r3, #32
 8003302:	443b      	add	r3, r7
 8003304:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 800330c:	8bba      	ldrh	r2, [r7, #28]
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	4313      	orrs	r3, r2
 8003312:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8003314:	8b3b      	ldrh	r3, [r7, #24]
 8003316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 8003320:	7fbb      	ldrb	r3, [r7, #30]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	77ba      	strb	r2, [r7, #30]
 8003326:	3320      	adds	r3, #32
 8003328:	443b      	add	r3, r7
 800332a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800332e:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8003330:	7fbb      	ldrb	r3, [r7, #30]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	77ba      	strb	r2, [r7, #30]
 8003336:	3320      	adds	r3, #32
 8003338:	443b      	add	r3, r7
 800333a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8003342:	8bba      	ldrh	r2, [r7, #28]
 8003344:	8b7b      	ldrh	r3, [r7, #26]
 8003346:	4313      	orrs	r3, r2
 8003348:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 800334a:	8b3b      	ldrh	r3, [r7, #24]
 800334c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003350:	b29a      	uxth	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8003356:	8b3b      	ldrh	r3, [r7, #24]
 8003358:	0b5b      	lsrs	r3, r3, #13
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	811a      	strh	r2, [r3, #8]
 8003360:	e001      	b.n	8003366 <get_no_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003362:	23ff      	movs	r3, #255	@ 0xff
 8003364:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003366:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08e      	sub	sp, #56	@ 0x38
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 800337e:	2308      	movs	r3, #8
 8003380:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	2300      	movs	r3, #0
 8003388:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	2300      	movs	r3, #0
 8003390:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80b3 	beq.w	8003500 <set_no_motion_config+0x18c>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800339a:	f107 011c 	add.w	r1, r7, #28
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2202      	movs	r2, #2
 80033a2:	2041      	movs	r0, #65	@ 0x41
 80033a4:	f7fe fd20 	bl	8001de8 <bmi3_set_regs>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 80033ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 80a7 	bne.w	8003506 <set_no_motion_config+0x192>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80033b8:	7b3b      	ldrb	r3, [r7, #12]
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	4b55      	ldr	r3, [pc, #340]	@ (8003514 <set_no_motion_config+0x1a0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	b21a      	sxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	885b      	ldrh	r3, [r3, #2]
 80033c6:	b21b      	sxth	r3, r3
 80033c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80033d4:	7b7b      	ldrb	r3, [r7, #13]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80033da:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80033de:	4b4d      	ldr	r3, [pc, #308]	@ (8003514 <set_no_motion_config+0x1a0>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	885b      	ldrh	r3, [r3, #2]
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b21b      	sxth	r3, r3
 80033f4:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 80033f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80033fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033fe:	b21a      	sxth	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	791b      	ldrb	r3, [r3, #4]
 8003404:	031b      	lsls	r3, r3, #12
 8003406:	b21b      	sxth	r3, r3
 8003408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800340c:	b21b      	sxth	r3, r3
 800340e:	4313      	orrs	r3, r2
 8003410:	b21b      	sxth	r3, r3
 8003412:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	b21a      	sxth	r2, r3
 8003418:	4b3f      	ldr	r3, [pc, #252]	@ (8003518 <set_no_motion_config+0x1a4>)
 800341a:	4013      	ands	r3, r2
 800341c:	b21a      	sxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	88db      	ldrh	r3, [r3, #6]
 8003422:	b21b      	sxth	r3, r3
 8003424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003428:	b21b      	sxth	r3, r3
 800342a:	4313      	orrs	r3, r2
 800342c:	b21b      	sxth	r3, r3
 800342e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8003436:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800343a:	4b37      	ldr	r3, [pc, #220]	@ (8003518 <set_no_motion_config+0x1a4>)
 800343c:	4013      	ands	r3, r2
 800343e:	b21a      	sxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	88db      	ldrh	r3, [r3, #6]
 8003444:	b21b      	sxth	r3, r3
 8003446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344a:	b21b      	sxth	r3, r3
 800344c:	4313      	orrs	r3, r2
 800344e:	b21b      	sxth	r3, r3
 8003450:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	b21a      	sxth	r2, r3
 8003456:	4b31      	ldr	r3, [pc, #196]	@ (800351c <set_no_motion_config+0x1a8>)
 8003458:	4013      	ands	r3, r2
 800345a:	b21a      	sxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b21b      	sxth	r3, r3
 8003462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003466:	b21b      	sxth	r3, r3
 8003468:	4313      	orrs	r3, r2
 800346a:	b21b      	sxth	r3, r3
 800346c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 800346e:	7c3b      	ldrb	r3, [r7, #16]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8003474:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8003478:	4b28      	ldr	r3, [pc, #160]	@ (800351c <set_no_motion_config+0x1a8>)
 800347a:	4013      	ands	r3, r2
 800347c:	b21a      	sxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b21b      	sxth	r3, r3
 8003484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003488:	b21b      	sxth	r3, r3
 800348a:	4313      	orrs	r3, r2
 800348c:	b21b      	sxth	r3, r3
 800348e:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8003490:	7c7b      	ldrb	r3, [r7, #17]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 8003496:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800349a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800349e:	b21a      	sxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	891b      	ldrh	r3, [r3, #8]
 80034a4:	035b      	lsls	r3, r3, #13
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 80034ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 80034b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80034b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	b29b      	uxth	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 80034c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 80034ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 80034d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 80034da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80034dc:	8bfb      	ldrh	r3, [r7, #30]
 80034de:	4313      	orrs	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80034ea:	f107 0114 	add.w	r1, r7, #20
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2206      	movs	r2, #6
 80034f2:	2042      	movs	r0, #66	@ 0x42
 80034f4:	f7fe fc78 	bl	8001de8 <bmi3_set_regs>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80034fe:	e002      	b.n	8003506 <set_no_motion_config+0x192>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003500:	23ff      	movs	r3, #255	@ 0xff
 8003502:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8003506:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800350a:	4618      	mov	r0, r3
 800350c:	3738      	adds	r7, #56	@ 0x38
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	fffff000 	.word	0xfffff000
 8003518:	fffffc00 	.word	0xfffffc00
 800351c:	ffffe000 	.word	0xffffe000

08003520 <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800352e:	230b      	movs	r3, #11
 8003530:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d061      	beq.n	8003600 <get_flat_config+0xe0>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800353c:	f107 0108 	add.w	r1, r7, #8
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2202      	movs	r2, #2
 8003544:	2041      	movs	r0, #65	@ 0x41
 8003546:	f7fe fc4f 	bl	8001de8 <bmi3_set_regs>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800354e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d156      	bne.n	8003604 <get_flat_config+0xe4>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8003556:	f107 010c 	add.w	r1, r7, #12
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2204      	movs	r2, #4
 800355e:	2042      	movs	r0, #66	@ 0x42
 8003560:	f7fe fbdd 	bl	8001d1e <bmi3_get_regs>
 8003564:	4603      	mov	r3, r0
 8003566:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8003568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d149      	bne.n	8003604 <get_flat_config+0xe4>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8003570:	7dbb      	ldrb	r3, [r7, #22]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	75ba      	strb	r2, [r7, #22]
 8003576:	3318      	adds	r3, #24
 8003578:	443b      	add	r3, r7
 800357a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800357e:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 8003580:	7dbb      	ldrb	r3, [r7, #22]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	75ba      	strb	r2, [r7, #22]
 8003586:	3318      	adds	r3, #24
 8003588:	443b      	add	r3, r7
 800358a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 8003592:	8aba      	ldrh	r2, [r7, #20]
 8003594:	8a7b      	ldrh	r3, [r7, #18]
 8003596:	4313      	orrs	r3, r2
 8003598:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 800359a:	8a3b      	ldrh	r3, [r7, #16]
 800359c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 80035a6:	8a3b      	ldrh	r3, [r7, #16]
 80035a8:	119b      	asrs	r3, r3, #6
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 80035b6:	8a3b      	ldrh	r3, [r7, #16]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 80035c0:	7dbb      	ldrb	r3, [r7, #22]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	75ba      	strb	r2, [r7, #22]
 80035c6:	3318      	adds	r3, #24
 80035c8:	443b      	add	r3, r7
 80035ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80035ce:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80035d0:	7dbb      	ldrb	r3, [r7, #22]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	75ba      	strb	r2, [r7, #22]
 80035d6:	3318      	adds	r3, #24
 80035d8:	443b      	add	r3, r7
 80035da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 80035e2:	8aba      	ldrh	r2, [r7, #20]
 80035e4:	8a7b      	ldrh	r3, [r7, #18]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 80035ea:	8a3b      	ldrh	r3, [r7, #16]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 80035f4:	8a3b      	ldrh	r3, [r7, #16]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	809a      	strh	r2, [r3, #4]
 80035fe:	e001      	b.n	8003604 <get_flat_config+0xe4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003600:	23ff      	movs	r3, #255	@ 0xff
 8003602:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003604:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 800361e:	230b      	movs	r3, #11
 8003620:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d06f      	beq.n	8003708 <set_flat_config+0xf8>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003628:	f107 010c 	add.w	r1, r7, #12
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2202      	movs	r2, #2
 8003630:	2041      	movs	r0, #65	@ 0x41
 8003632:	f7fe fbd9 	bl	8001de8 <bmi3_set_regs>
 8003636:	4603      	mov	r3, r0
 8003638:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 800363a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d164      	bne.n	800370c <set_flat_config+0xfc>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8003642:	7c3b      	ldrb	r3, [r7, #16]
 8003644:	b21b      	sxth	r3, r3
 8003646:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800364a:	b21a      	sxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b21b      	sxth	r3, r3
 8003652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003656:	b21b      	sxth	r3, r3
 8003658:	4313      	orrs	r3, r2
 800365a:	b21b      	sxth	r3, r3
 800365c:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 800365e:	7c3b      	ldrb	r3, [r7, #16]
 8003660:	b21b      	sxth	r3, r3
 8003662:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003666:	b21a      	sxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	885b      	ldrh	r3, [r3, #2]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	b21b      	sxth	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	b21b      	sxth	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	b21b      	sxth	r3, r3
 8003678:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 800367a:	7c7b      	ldrb	r3, [r7, #17]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 8003680:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	b21a      	sxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	88db      	ldrh	r3, [r3, #6]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	b21b      	sxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b21b      	sxth	r3, r3
 8003694:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 8003696:	7cbb      	ldrb	r3, [r7, #18]
 8003698:	b21b      	sxth	r3, r3
 800369a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800369e:	b21a      	sxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	891b      	ldrh	r3, [r3, #8]
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b21b      	sxth	r3, r3
 80036ae:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 80036b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	b21a      	sxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 80036cc:	8bbb      	ldrh	r3, [r7, #28]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	4313      	orrs	r3, r2
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 80036da:	8b3b      	ldrh	r3, [r7, #24]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 80036e4:	8afb      	ldrh	r3, [r7, #22]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 80036ea:	8abb      	ldrh	r3, [r7, #20]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 80036f4:	f107 0110 	add.w	r1, r7, #16
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2204      	movs	r2, #4
 80036fc:	2042      	movs	r0, #66	@ 0x42
 80036fe:	f7fe fb73 	bl	8001de8 <bmi3_set_regs>
 8003702:	4603      	mov	r3, r0
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e001      	b.n	800370c <set_flat_config+0xfc>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003708:	23ff      	movs	r3, #255	@ 0xff
 800370a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800370c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8003722:	230d      	movs	r3, #13
 8003724:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d074      	beq.n	800381a <get_sig_motion_config+0x102>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003730:	f107 010c 	add.w	r1, r7, #12
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2202      	movs	r2, #2
 8003738:	2041      	movs	r0, #65	@ 0x41
 800373a:	f7fe fb55 	bl	8001de8 <bmi3_set_regs>
 800373e:	4603      	mov	r3, r0
 8003740:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d169      	bne.n	800381e <get_sig_motion_config+0x106>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 800374a:	f107 0110 	add.w	r1, r7, #16
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2206      	movs	r2, #6
 8003752:	2042      	movs	r0, #66	@ 0x42
 8003754:	f7fe fae3 	bl	8001d1e <bmi3_get_regs>
 8003758:	4603      	mov	r3, r0
 800375a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 800375c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d15c      	bne.n	800381e <get_sig_motion_config+0x106>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 8003764:	7fbb      	ldrb	r3, [r7, #30]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	77ba      	strb	r2, [r7, #30]
 800376a:	3320      	adds	r3, #32
 800376c:	443b      	add	r3, r7
 800376e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003772:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8003774:	7fbb      	ldrb	r3, [r7, #30]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	77ba      	strb	r2, [r7, #30]
 800377a:	3320      	adds	r3, #32
 800377c:	443b      	add	r3, r7
 800377e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8003786:	8bba      	ldrh	r2, [r7, #28]
 8003788:	8b7b      	ldrh	r3, [r7, #26]
 800378a:	4313      	orrs	r3, r2
 800378c:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8b3a      	ldrh	r2, [r7, #24]
 8003792:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8003794:	7fbb      	ldrb	r3, [r7, #30]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	77ba      	strb	r2, [r7, #30]
 800379a:	3320      	adds	r3, #32
 800379c:	443b      	add	r3, r7
 800379e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80037a2:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80037a4:	7fbb      	ldrb	r3, [r7, #30]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	77ba      	strb	r2, [r7, #30]
 80037aa:	3320      	adds	r3, #32
 80037ac:	443b      	add	r3, r7
 80037ae:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80037b6:	8bba      	ldrh	r2, [r7, #28]
 80037b8:	8b7b      	ldrh	r3, [r7, #26]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 80037be:	8b3b      	ldrh	r3, [r7, #24]
 80037c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 80037ca:	8b3b      	ldrh	r3, [r7, #24]
 80037cc:	0a9b      	lsrs	r3, r3, #10
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 80037d6:	7fbb      	ldrb	r3, [r7, #30]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	77ba      	strb	r2, [r7, #30]
 80037dc:	3320      	adds	r3, #32
 80037de:	443b      	add	r3, r7
 80037e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80037e4:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 80037e6:	7fbb      	ldrb	r3, [r7, #30]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	77ba      	strb	r2, [r7, #30]
 80037ec:	3320      	adds	r3, #32
 80037ee:	443b      	add	r3, r7
 80037f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80037f8:	8bba      	ldrh	r2, [r7, #28]
 80037fa:	8b7b      	ldrh	r3, [r7, #26]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 8003800:	8b3b      	ldrh	r3, [r7, #24]
 8003802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 800380c:	8b3b      	ldrh	r3, [r7, #24]
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	b29b      	uxth	r3, r3
 8003812:	b2da      	uxtb	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	721a      	strb	r2, [r3, #8]
 8003818:	e001      	b.n	800381e <get_sig_motion_config+0x106>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800381a:	23ff      	movs	r3, #255	@ 0xff
 800381c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800381e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	@ 0x38
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8003836:	230d      	movs	r3, #13
 8003838:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	2300      	movs	r3, #0
 8003840:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	2300      	movs	r3, #0
 8003848:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 809d 	beq.w	800398c <set_sig_motion_config+0x160>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003852:	f107 011c 	add.w	r1, r7, #28
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2202      	movs	r2, #2
 800385a:	2041      	movs	r0, #65	@ 0x41
 800385c:	f7fe fac4 	bl	8001de8 <bmi3_set_regs>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8003866:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 8091 	bne.w	8003992 <set_sig_motion_config+0x166>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	86bb      	strh	r3, [r7, #52]	@ 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8003876:	7b7b      	ldrb	r3, [r7, #13]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8003882:	7bbb      	ldrb	r3, [r7, #14]
 8003884:	b21a      	sxth	r2, r3
 8003886:	4b46      	ldr	r3, [pc, #280]	@ (80039a0 <set_sig_motion_config+0x174>)
 8003888:	4013      	ands	r3, r2
 800388a:	b21a      	sxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	885b      	ldrh	r3, [r3, #2]
 8003890:	b21b      	sxth	r3, r3
 8003892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003896:	b21b      	sxth	r3, r3
 8003898:	4313      	orrs	r3, r2
 800389a:	b21b      	sxth	r3, r3
 800389c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 80038a4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 80038a8:	4b3d      	ldr	r3, [pc, #244]	@ (80039a0 <set_sig_motion_config+0x174>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	b21a      	sxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	885b      	ldrh	r3, [r3, #2]
 80038b2:	b21b      	sxth	r3, r3
 80038b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	4313      	orrs	r3, r2
 80038bc:	b21b      	sxth	r3, r3
 80038be:	857b      	strh	r3, [r7, #42]	@ 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 80038c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80038ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ce:	b21a      	sxth	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	791b      	ldrb	r3, [r3, #4]
 80038d4:	029b      	lsls	r3, r3, #10
 80038d6:	b21b      	sxth	r3, r3
 80038d8:	4313      	orrs	r3, r2
 80038da:	b21b      	sxth	r3, r3
 80038dc:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 80038de:	7c3b      	ldrb	r3, [r7, #16]
 80038e0:	b21a      	sxth	r2, r3
 80038e2:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <set_sig_motion_config+0x174>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	88db      	ldrh	r3, [r3, #6]
 80038ec:	b21b      	sxth	r3, r3
 80038ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f2:	b21b      	sxth	r3, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b21b      	sxth	r3, r3
 80038f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 80038fa:	7c7b      	ldrb	r3, [r7, #17]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8003900:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8003904:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <set_sig_motion_config+0x174>)
 8003906:	4013      	ands	r3, r2
 8003908:	b21a      	sxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	88db      	ldrh	r3, [r3, #6]
 800390e:	b21b      	sxth	r3, r3
 8003910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003914:	b21b      	sxth	r3, r3
 8003916:	4313      	orrs	r3, r2
 8003918:	b21b      	sxth	r3, r3
 800391a:	847b      	strh	r3, [r7, #34]	@ 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 800391c:	7c7b      	ldrb	r3, [r7, #17]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 8003922:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392a:	b21a      	sxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7a1b      	ldrb	r3, [r3, #8]
 8003930:	029b      	lsls	r3, r3, #10
 8003932:	b21b      	sxth	r3, r3
 8003934:	4313      	orrs	r3, r2
 8003936:	b21b      	sxth	r3, r3
 8003938:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 800393a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800393c:	b2db      	uxtb	r3, r3
 800393e:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8003940:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	b29b      	uxth	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 800394a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800394c:	b2db      	uxtb	r3, r3
 800394e:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8003950:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003952:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003954:	4313      	orrs	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8003960:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003962:	b2db      	uxtb	r3, r3
 8003964:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8003966:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003968:	8c3b      	ldrh	r3, [r7, #32]
 800396a:	4313      	orrs	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b29b      	uxth	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8003976:	f107 0114 	add.w	r1, r7, #20
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2206      	movs	r2, #6
 800397e:	2042      	movs	r0, #66	@ 0x42
 8003980:	f7fe fa32 	bl	8001de8 <bmi3_set_regs>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800398a:	e002      	b.n	8003992 <set_sig_motion_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800398c:	23ff      	movs	r3, #255	@ 0xff
 800398e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8003992:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003996:	4618      	mov	r0, r3
 8003998:	3738      	adds	r7, #56	@ 0x38
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	fffffc00 	.word	0xfffffc00

080039a4 <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 80039b2:	2321      	movs	r3, #33	@ 0x21
 80039b4:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d057      	beq.n	8003a70 <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80039c0:	f107 0108 	add.w	r1, r7, #8
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2202      	movs	r2, #2
 80039c8:	2041      	movs	r0, #65	@ 0x41
 80039ca:	f7fe fa0d 	bl	8001de8 <bmi3_set_regs>
 80039ce:	4603      	mov	r3, r0
 80039d0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80039d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d14c      	bne.n	8003a74 <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 80039da:	f107 010c 	add.w	r1, r7, #12
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2204      	movs	r2, #4
 80039e2:	2042      	movs	r0, #66	@ 0x42
 80039e4:	f7fe f99b 	bl	8001d1e <bmi3_get_regs>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 80039ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d13f      	bne.n	8003a74 <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 80039f4:	7dbb      	ldrb	r3, [r7, #22]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	75ba      	strb	r2, [r7, #22]
 80039fa:	3318      	adds	r3, #24
 80039fc:	443b      	add	r3, r7
 80039fe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a02:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8003a04:	7dbb      	ldrb	r3, [r7, #22]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	75ba      	strb	r2, [r7, #22]
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	443b      	add	r3, r7
 8003a0e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a12:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003a14:	8a7b      	ldrh	r3, [r7, #18]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	b21a      	sxth	r2, r3
 8003a1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 8003a24:	8a3b      	ldrh	r3, [r7, #16]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 8003a2e:	8a3b      	ldrh	r3, [r7, #16]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 8003a38:	7dbb      	ldrb	r3, [r7, #22]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	75ba      	strb	r2, [r7, #22]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	443b      	add	r3, r7
 8003a42:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a46:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8003a48:	7dbb      	ldrb	r3, [r7, #22]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	75ba      	strb	r2, [r7, #22]
 8003a4e:	3318      	adds	r3, #24
 8003a50:	443b      	add	r3, r7
 8003a52:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a56:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003a58:	8a7b      	ldrh	r3, [r7, #18]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	b21a      	sxth	r2, r3
 8003a5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b21b      	sxth	r3, r3
 8003a66:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8a3a      	ldrh	r2, [r7, #16]
 8003a6c:	809a      	strh	r2, [r3, #4]
 8003a6e:	e001      	b.n	8003a74 <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003a70:	23ff      	movs	r3, #255	@ 0xff
 8003a72:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8003a8a:	2321      	movs	r3, #33	@ 0x21
 8003a8c:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d04a      	beq.n	8003b32 <set_tilt_config+0xb2>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003a9c:	f107 0110 	add.w	r1, r7, #16
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	2041      	movs	r0, #65	@ 0x41
 8003aa6:	f7fe f99f 	bl	8001de8 <bmi3_set_regs>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8003aae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13f      	bne.n	8003b36 <set_tilt_config+0xb6>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 8003ab6:	7a3b      	ldrb	r3, [r7, #8]
 8003ab8:	b21b      	sxth	r3, r3
 8003aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003abe:	b21a      	sxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	b21b      	sxth	r3, r3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b21b      	sxth	r3, r3
 8003ace:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8003ad0:	7a7b      	ldrb	r3, [r7, #9]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 8003ad6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	b21a      	sxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	885b      	ldrh	r3, [r3, #2]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	b21b      	sxth	r3, r3
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	b21b      	sxth	r3, r3
 8003aea:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	889b      	ldrh	r3, [r3, #4]
 8003af0:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	889b      	ldrh	r3, [r3, #4]
 8003afc:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 8003afe:	8bbb      	ldrh	r3, [r7, #28]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 8003b04:	8b3b      	ldrh	r3, [r7, #24]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8003b0e:	8afb      	ldrh	r3, [r7, #22]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8003b14:	8a7b      	ldrh	r3, [r7, #18]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8003b1e:	f107 010c 	add.w	r1, r7, #12
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2204      	movs	r2, #4
 8003b26:	2042      	movs	r0, #66	@ 0x42
 8003b28:	f7fe f95e 	bl	8001de8 <bmi3_set_regs>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e001      	b.n	8003b36 <set_tilt_config+0xb6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003b32:	23ff      	movs	r3, #255	@ 0xff
 8003b34:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003b36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8003b50:	231c      	movs	r3, #28
 8003b52:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d073      	beq.n	8003c46 <get_orientation_config+0x104>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003b5e:	f107 0108 	add.w	r1, r7, #8
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2202      	movs	r2, #2
 8003b66:	2041      	movs	r0, #65	@ 0x41
 8003b68:	f7fe f93e 	bl	8001de8 <bmi3_set_regs>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d168      	bne.n	8003c4a <get_orientation_config+0x108>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8003b78:	f107 010c 	add.w	r1, r7, #12
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	2042      	movs	r0, #66	@ 0x42
 8003b82:	f7fe f8cc 	bl	8001d1e <bmi3_get_regs>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8003b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d15b      	bne.n	8003c4a <get_orientation_config+0x108>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8003b92:	7dbb      	ldrb	r3, [r7, #22]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	75ba      	strb	r2, [r7, #22]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	443b      	add	r3, r7
 8003b9c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ba0:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8003ba2:	7dbb      	ldrb	r3, [r7, #22]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	75ba      	strb	r2, [r7, #22]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	443b      	add	r3, r7
 8003bac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8003bb4:	8aba      	ldrh	r2, [r7, #20]
 8003bb6:	8a7b      	ldrh	r3, [r7, #18]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 8003bbc:	8a3b      	ldrh	r3, [r7, #16]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 8003bca:	8a3b      	ldrh	r3, [r7, #16]
 8003bcc:	105b      	asrs	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 8003bda:	8a3b      	ldrh	r3, [r7, #16]
 8003bdc:	10db      	asrs	r3, r3, #3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 8003bea:	8a3b      	ldrh	r3, [r7, #16]
 8003bec:	115b      	asrs	r3, r3, #5
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 8003bfa:	8a3b      	ldrh	r3, [r7, #16]
 8003bfc:	0adb      	lsrs	r3, r3, #11
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8003c06:	7dbb      	ldrb	r3, [r7, #22]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	75ba      	strb	r2, [r7, #22]
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	443b      	add	r3, r7
 8003c10:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003c14:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8003c16:	7dbb      	ldrb	r3, [r7, #22]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	75ba      	strb	r2, [r7, #22]
 8003c1c:	3318      	adds	r3, #24
 8003c1e:	443b      	add	r3, r7
 8003c20:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8003c28:	8aba      	ldrh	r2, [r7, #20]
 8003c2a:	8a7b      	ldrh	r3, [r7, #18]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 8003c30:	8a3b      	ldrh	r3, [r7, #16]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 8003c38:	8a3b      	ldrh	r3, [r7, #16]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	715a      	strb	r2, [r3, #5]
 8003c44:	e001      	b.n	8003c4a <get_orientation_config+0x108>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003c46:	23ff      	movs	r3, #255	@ 0xff
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003c4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08a      	sub	sp, #40	@ 0x28
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8003c64:	231c      	movs	r3, #28
 8003c66:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a3 	beq.w	8003db6 <set_orientation_config+0x160>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8003c70:	f107 010c 	add.w	r1, r7, #12
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2202      	movs	r2, #2
 8003c78:	2041      	movs	r0, #65	@ 0x41
 8003c7a:	f7fe f8b5 	bl	8001de8 <bmi3_set_regs>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI3_OK)
 8003c84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f040 8097 	bne.w	8003dbc <set_orientation_config+0x166>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 8003c8e:	7c3b      	ldrb	r3, [r7, #16]
 8003c90:	b21b      	sxth	r3, r3
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	b21a      	sxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	b21b      	sxth	r3, r3
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b21b      	sxth	r3, r3
 8003ca8:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 8003caa:	7c3b      	ldrb	r3, [r7, #16]
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	f023 0306 	bic.w	r3, r3, #6
 8003cb2:	b21a      	sxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	b21b      	sxth	r3, r3
 8003cbc:	f003 0306 	and.w	r3, r3, #6
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 8003cc8:	7c3b      	ldrb	r3, [r7, #16]
 8003cca:	b21b      	sxth	r3, r3
 8003ccc:	f023 0318 	bic.w	r3, r3, #24
 8003cd0:	b21a      	sxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	b21b      	sxth	r3, r3
 8003cda:	f003 0318 	and.w	r3, r3, #24
 8003cde:	b21b      	sxth	r3, r3
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 8003ce6:	7c3b      	ldrb	r3, [r7, #16]
 8003ce8:	b21b      	sxth	r3, r3
 8003cea:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8003cee:	b21a      	sxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	78db      	ldrb	r3, [r3, #3]
 8003cf4:	015b      	lsls	r3, r3, #5
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8003cfc:	b21b      	sxth	r3, r3
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 8003d04:	7c7b      	ldrb	r3, [r7, #17]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 8003d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d0e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	78db      	ldrb	r3, [r3, #3]
 8003d18:	015b      	lsls	r3, r3, #5
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	b21b      	sxth	r3, r3
 8003d26:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 8003d28:	7c7b      	ldrb	r3, [r7, #17]
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	791b      	ldrb	r3, [r3, #4]
 8003d30:	02db      	lsls	r3, r3, #11
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 8003d3a:	7cbb      	ldrb	r3, [r7, #18]
 8003d3c:	b21b      	sxth	r3, r3
 8003d3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	799b      	ldrb	r3, [r3, #6]
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	795b      	ldrb	r3, [r3, #5]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8003d62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8c3b      	ldrh	r3, [r7, #32]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8bfb      	ldrh	r3, [r7, #30]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8003d80:	8bba      	ldrh	r2, [r7, #28]
 8003d82:	8b7b      	ldrh	r3, [r7, #26]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8003d90:	8b3b      	ldrh	r3, [r7, #24]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 8003d96:	8afb      	ldrh	r3, [r7, #22]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8003da0:	f107 0110 	add.w	r1, r7, #16
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2204      	movs	r2, #4
 8003da8:	2042      	movs	r0, #66	@ 0x42
 8003daa:	f7fe f81d 	bl	8001de8 <bmi3_set_regs>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003db4:	e002      	b.n	8003dbc <set_orientation_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003db6:	23ff      	movs	r3, #255	@ 0xff
 8003db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003dbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3728      	adds	r7, #40	@ 0x28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	@ 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 8003de6:	2310      	movs	r3, #16
 8003de8:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 81e7 	beq.w	80041c6 <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8003df8:	f107 010c 	add.w	r1, r7, #12
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	2041      	movs	r0, #65	@ 0x41
 8003e02:	f7fd fff1 	bl	8001de8 <bmi3_set_regs>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8003e0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f040 81db 	bne.w	80041cc <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8003e16:	f107 0110 	add.w	r1, r7, #16
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2218      	movs	r2, #24
 8003e1e:	2042      	movs	r0, #66	@ 0x42
 8003e20:	f7fd ff7d 	bl	8001d1e <bmi3_get_regs>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (rslt == BMI3_OK)
 8003e2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 81cc 	bne.w	80041cc <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003e34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003e3e:	3330      	adds	r3, #48	@ 0x30
 8003e40:	443b      	add	r3, r7
 8003e42:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003e46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003e48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003e52:	3330      	adds	r3, #48	@ 0x30
 8003e54:	443b      	add	r3, r7
 8003e56:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003e5a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003e5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003e66:	4313      	orrs	r3, r2
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 8003e6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 8003e78:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e7a:	129b      	asrs	r3, r3, #10
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 8003e88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003e92:	3330      	adds	r3, #48	@ 0x30
 8003e94:	443b      	add	r3, r7
 8003e96:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003e9a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003e9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003ea6:	3330      	adds	r3, #48	@ 0x30
 8003ea8:	443b      	add	r3, r7
 8003eaa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003eae:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003eb0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	b21a      	sxth	r2, r3
 8003eb6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003ec4:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 8003ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003ed0:	3330      	adds	r3, #48	@ 0x30
 8003ed2:	443b      	add	r3, r7
 8003ed4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003ed8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003eda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003ee4:	3330      	adds	r3, #48	@ 0x30
 8003ee6:	443b      	add	r3, r7
 8003ee8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003eec:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003eee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f02:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 8003f04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003f0e:	3330      	adds	r3, #48	@ 0x30
 8003f10:	443b      	add	r3, r7
 8003f12:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003f16:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003f18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003f22:	3330      	adds	r3, #48	@ 0x30
 8003f24:	443b      	add	r3, r7
 8003f26:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003f2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003f2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	b21a      	sxth	r2, r3
 8003f32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003f36:	4313      	orrs	r3, r2
 8003f38:	b21b      	sxth	r3, r3
 8003f3a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f40:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 8003f42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003f4c:	3330      	adds	r3, #48	@ 0x30
 8003f4e:	443b      	add	r3, r7
 8003f50:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003f54:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003f56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003f60:	3330      	adds	r3, #48	@ 0x30
 8003f62:	443b      	add	r3, r7
 8003f64:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003f68:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003f6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003f74:	4313      	orrs	r3, r2
 8003f76:	b21b      	sxth	r3, r3
 8003f78:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f7e:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 8003f80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003f8a:	3330      	adds	r3, #48	@ 0x30
 8003f8c:	443b      	add	r3, r7
 8003f8e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003f92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003f94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003f9e:	3330      	adds	r3, #48	@ 0x30
 8003fa0:	443b      	add	r3, r7
 8003fa2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003fa6:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003fa8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	b21a      	sxth	r2, r3
 8003fae:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003fbc:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 8003fbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003fc8:	3330      	adds	r3, #48	@ 0x30
 8003fca:	443b      	add	r3, r7
 8003fcc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003fd0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8003fd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8003fdc:	3330      	adds	r3, #48	@ 0x30
 8003fde:	443b      	add	r3, r7
 8003fe0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003fe4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8003fe6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	b21a      	sxth	r2, r3
 8003fec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	b21b      	sxth	r3, r3
 8003ff4:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003ffa:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8003ffc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004006:	3330      	adds	r3, #48	@ 0x30
 8004008:	443b      	add	r3, r7
 800400a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800400e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8004010:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800401a:	3330      	adds	r3, #48	@ 0x30
 800401c:	443b      	add	r3, r7
 800401e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004022:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8004024:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	b21a      	sxth	r2, r3
 800402a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800402e:	4313      	orrs	r3, r2
 8004030:	b21b      	sxth	r3, r3
 8004032:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 8004034:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 8004040:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004042:	111b      	asrs	r3, r3, #4
 8004044:	b29b      	uxth	r3, r3
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 8004050:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 800405a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004064:	3330      	adds	r3, #48	@ 0x30
 8004066:	443b      	add	r3, r7
 8004068:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800406c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800406e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004078:	3330      	adds	r3, #48	@ 0x30
 800407a:	443b      	add	r3, r7
 800407c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004080:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8004082:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	b21a      	sxth	r2, r3
 8004088:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800408c:	4313      	orrs	r3, r2
 800408e:	b21b      	sxth	r3, r3
 8004090:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 8004092:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004094:	b2db      	uxtb	r3, r3
 8004096:	b29a      	uxth	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 800409c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80040a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80040b0:	3330      	adds	r3, #48	@ 0x30
 80040b2:	443b      	add	r3, r7
 80040b4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80040b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80040ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80040c4:	3330      	adds	r3, #48	@ 0x30
 80040c6:	443b      	add	r3, r7
 80040c8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80040cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80040ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80040d8:	4313      	orrs	r3, r2
 80040da:	b21b      	sxth	r3, r3
 80040dc:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 80040de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 80040ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80040f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80040fe:	3330      	adds	r3, #48	@ 0x30
 8004100:	443b      	add	r3, r7
 8004102:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004106:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8004108:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004112:	3330      	adds	r3, #48	@ 0x30
 8004114:	443b      	add	r3, r7
 8004116:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800411a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800411c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	b21a      	sxth	r2, r3
 8004122:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004126:	4313      	orrs	r3, r2
 8004128:	b21b      	sxth	r3, r3
 800412a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 800412c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800412e:	b2db      	uxtb	r3, r3
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 8004136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8004140:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800414a:	3330      	adds	r3, #48	@ 0x30
 800414c:	443b      	add	r3, r7
 800414e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004152:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8004154:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800415e:	3330      	adds	r3, #48	@ 0x30
 8004160:	443b      	add	r3, r7
 8004162:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004166:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8004168:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	b21a      	sxth	r2, r3
 800416e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004172:	4313      	orrs	r3, r2
 8004174:	b21b      	sxth	r3, r3
 8004176:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 8004178:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	845a      	strh	r2, [r3, #34]	@ 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 8004184:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004186:	105b      	asrs	r3, r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	849a      	strh	r2, [r3, #36]	@ 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 8004194:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004196:	111b      	asrs	r3, r3, #4
 8004198:	b29b      	uxth	r3, r3
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	84da      	strh	r2, [r3, #38]	@ 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 80041a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80041a6:	115b      	asrs	r3, r3, #5
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 80041b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80041b6:	129b      	asrs	r3, r3, #10
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041c4:	e002      	b.n	80041cc <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 80041c6:	23fa      	movs	r3, #250	@ 0xfa
 80041c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80041cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3730      	adds	r7, #48	@ 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b0a4      	sub	sp, #144	@ 0x90
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 80041e2:	2310      	movs	r3, #16
 80041e4:	873b      	strh	r3, [r7, #56]	@ 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	f107 030c 	add.w	r3, r7, #12
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8259 	beq.w	80046c8 <set_step_config+0x4f0>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004216:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2202      	movs	r2, #2
 800421e:	2041      	movs	r0, #65	@ 0x41
 8004220:	f7fd fde2 	bl	8001de8 <bmi3_set_regs>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (rslt == BMI3_OK)
 800422a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800422e:	2b00      	cmp	r3, #0
 8004230:	f040 824d 	bne.w	80046ce <set_step_config+0x4f6>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 8004234:	7a3b      	ldrb	r3, [r7, #8]
 8004236:	b21a      	sxth	r2, r3
 8004238:	4bac      	ldr	r3, [pc, #688]	@ (80044ec <set_step_config+0x314>)
 800423a:	4013      	ands	r3, r2
 800423c:	b21a      	sxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b21b      	sxth	r3, r3
 8004244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004248:	b21b      	sxth	r3, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	b21b      	sxth	r3, r3
 800424e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 8004252:	7a7b      	ldrb	r3, [r7, #9]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 800425a:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 800425e:	4ba3      	ldr	r3, [pc, #652]	@ (80044ec <set_step_config+0x314>)
 8004260:	4013      	ands	r3, r2
 8004262:	b21a      	sxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b21b      	sxth	r3, r3
 800426a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426e:	b21b      	sxth	r3, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	b21b      	sxth	r3, r3
 8004274:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 8004278:	7a7b      	ldrb	r3, [r7, #9]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 8004280:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8004284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004288:	b21a      	sxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	885b      	ldrh	r3, [r3, #2]
 800428e:	029b      	lsls	r3, r3, #10
 8004290:	b21b      	sxth	r3, r3
 8004292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004296:	b21b      	sxth	r3, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	b21b      	sxth	r3, r3
 800429c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	889b      	ldrh	r3, [r3, #4]
 80042a4:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 80042a8:	7afb      	ldrb	r3, [r7, #11]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	889b      	ldrh	r3, [r3, #4]
 80042b4:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	88db      	ldrh	r3, [r3, #6]
 80042bc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 80042c0:	7b7b      	ldrb	r3, [r7, #13]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	88db      	ldrh	r3, [r3, #6]
 80042cc:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	891b      	ldrh	r3, [r3, #8]
 80042d4:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	891b      	ldrh	r3, [r3, #8]
 80042e4:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	895b      	ldrh	r3, [r3, #10]
 80042ec:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 80042f0:	7c7b      	ldrb	r3, [r7, #17]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	895b      	ldrh	r3, [r3, #10]
 80042fc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	899b      	ldrh	r3, [r3, #12]
 8004304:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	899b      	ldrh	r3, [r3, #12]
 8004314:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	89db      	ldrh	r3, [r3, #14]
 800431c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 8004320:	7d7b      	ldrb	r3, [r7, #21]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	89db      	ldrh	r3, [r3, #14]
 800432c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 8004330:	7dbb      	ldrb	r3, [r7, #22]
 8004332:	b21b      	sxth	r3, r3
 8004334:	f023 030f 	bic.w	r3, r3, #15
 8004338:	b21a      	sxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8a1b      	ldrh	r3, [r3, #16]
 800433e:	b21b      	sxth	r3, r3
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	b21b      	sxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	b21b      	sxth	r3, r3
 800434a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 800434e:	7dbb      	ldrb	r3, [r7, #22]
 8004350:	b21b      	sxth	r3, r3
 8004352:	f023 0310 	bic.w	r3, r3, #16
 8004356:	b21a      	sxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8a5b      	ldrh	r3, [r3, #18]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	b21b      	sxth	r3, r3
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	b21b      	sxth	r3, r3
 8004366:	4313      	orrs	r3, r2
 8004368:	b21b      	sxth	r3, r3
 800436a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 800436e:	7dbb      	ldrb	r3, [r7, #22]
 8004370:	b21b      	sxth	r3, r3
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	b21a      	sxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8a9b      	ldrh	r3, [r3, #20]
 800437c:	015b      	lsls	r3, r3, #5
 800437e:	b21b      	sxth	r3, r3
 8004380:	4313      	orrs	r3, r2
 8004382:	b21b      	sxth	r3, r3
 8004384:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8004390:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	b21a      	sxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8a9b      	ldrh	r3, [r3, #20]
 800439e:	015b      	lsls	r3, r3, #5
 80043a0:	b21b      	sxth	r3, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 80043aa:	7e3b      	ldrb	r3, [r7, #24]
 80043ac:	b21b      	sxth	r3, r3
 80043ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8adb      	ldrh	r3, [r3, #22]
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	b21b      	sxth	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b21b      	sxth	r3, r3
 80043c2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 80043c6:	7e7b      	ldrb	r3, [r7, #25]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 80043ce:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	b21a      	sxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8b1b      	ldrh	r3, [r3, #24]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	b21b      	sxth	r3, r3
 80043de:	4313      	orrs	r3, r2
 80043e0:	b21b      	sxth	r3, r3
 80043e2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 80043e6:	7ebb      	ldrb	r3, [r7, #26]
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	f023 030f 	bic.w	r3, r3, #15
 80043ee:	b21a      	sxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8b5b      	ldrh	r3, [r3, #26]
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b21b      	sxth	r3, r3
 8004400:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 8004404:	7ebb      	ldrb	r3, [r7, #26]
 8004406:	b21b      	sxth	r3, r3
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	b21a      	sxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8b9b      	ldrh	r3, [r3, #28]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	b21b      	sxth	r3, r3
 8004416:	4313      	orrs	r3, r2
 8004418:	b21b      	sxth	r3, r3
 800441a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 800441e:	7efb      	ldrb	r3, [r7, #27]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 8004426:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	b21a      	sxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8b9b      	ldrh	r3, [r3, #28]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	b21b      	sxth	r3, r3
 8004438:	4313      	orrs	r3, r2
 800443a:	b21b      	sxth	r3, r3
 800443c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 8004440:	7f3b      	ldrb	r3, [r7, #28]
 8004442:	b21b      	sxth	r3, r3
 8004444:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004448:	b21a      	sxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8bdb      	ldrh	r3, [r3, #30]
 800444e:	b21b      	sxth	r3, r3
 8004450:	b2db      	uxtb	r3, r3
 8004452:	b21b      	sxth	r3, r3
 8004454:	4313      	orrs	r3, r2
 8004456:	b21b      	sxth	r3, r3
 8004458:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 800445c:	7f7b      	ldrb	r3, [r7, #29]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 8004464:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004468:	b2db      	uxtb	r3, r3
 800446a:	b21a      	sxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8c1b      	ldrh	r3, [r3, #32]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	b21b      	sxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b21b      	sxth	r3, r3
 8004478:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 800447c:	7fbb      	ldrb	r3, [r7, #30]
 800447e:	b21b      	sxth	r3, r3
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	b21a      	sxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800448a:	b21b      	sxth	r3, r3
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	b21b      	sxth	r3, r3
 8004492:	4313      	orrs	r3, r2
 8004494:	b21b      	sxth	r3, r3
 8004496:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 800449a:	7fbb      	ldrb	r3, [r7, #30]
 800449c:	b21b      	sxth	r3, r3
 800449e:	f023 030e 	bic.w	r3, r3, #14
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	b21b      	sxth	r3, r3
 80044ac:	f003 030e 	and.w	r3, r3, #14
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 80044ba:	7fbb      	ldrb	r3, [r7, #30]
 80044bc:	b21b      	sxth	r3, r3
 80044be:	f023 0310 	bic.w	r3, r3, #16
 80044c2:	b21a      	sxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	b21b      	sxth	r3, r3
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	4313      	orrs	r3, r2
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80044da:	7fbb      	ldrb	r3, [r7, #30]
 80044dc:	b21b      	sxth	r3, r3
 80044de:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80044e2:	b21a      	sxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e8:	015b      	lsls	r3, r3, #5
 80044ea:	e001      	b.n	80044f0 <set_step_config+0x318>
 80044ec:	fffffc00 	.word	0xfffffc00
 80044f0:	b21b      	sxth	r3, r3
 80044f2:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 80044f6:	b21b      	sxth	r3, r3
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 8004500:	7ffb      	ldrb	r3, [r7, #31]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 8004508:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800450c:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8004510:	b21a      	sxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004516:	015b      	lsls	r3, r3, #5
 8004518:	b21b      	sxth	r3, r3
 800451a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800451e:	b21b      	sxth	r3, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	b21b      	sxth	r3, r3
 8004524:	87fb      	strh	r3, [r7, #62]	@ 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 800452c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8004530:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004534:	b21a      	sxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	b21b      	sxth	r3, r3
 800453e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004542:	b21b      	sxth	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b21b      	sxth	r3, r3
 8004548:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            step_config[0] = (uint8_t)watermark1;
 800454a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 8004554:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8004558:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800455c:	4313      	orrs	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	b29b      	uxth	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 800456a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 8004574:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	b29b      	uxth	r3, r3
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 8004582:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 800458c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	b29b      	uxth	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 800459a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 80045a4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80045a8:	0a1b      	lsrs	r3, r3, #8
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 80045b2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 80045bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 80045ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 80045d4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	b29b      	uxth	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 80045e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 80045ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 80045fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4313      	orrs	r3, r2
 8004608:	b2da      	uxtb	r2, r3
 800460a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4313      	orrs	r3, r2
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 8004618:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	b29b      	uxth	r3, r3
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 8004626:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 8004630:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	b29b      	uxth	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 800463e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8004642:	b2da      	uxtb	r2, r3
 8004644:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 8004652:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	b29b      	uxth	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            step_config[20] = (uint8_t)step_duration_max;
 8004660:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 800466a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	b29b      	uxth	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 8004678:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800467c:	b2da      	uxtb	r2, r3
 800467e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004682:	b2db      	uxtb	r3, r3
 8004684:	4313      	orrs	r3, r2
 8004686:	b2da      	uxtb	r2, r3
 8004688:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800468c:	b2db      	uxtb	r3, r3
 800468e:	4313      	orrs	r3, r2
 8004690:	b2da      	uxtb	r2, r3
 8004692:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4313      	orrs	r3, r2
 800469a:	b2db      	uxtb	r3, r3
            step_config[22] =
 800469c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 80046a0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80046a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 80046b2:	f107 0120 	add.w	r1, r7, #32
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2218      	movs	r2, #24
 80046ba:	2042      	movs	r0, #66	@ 0x42
 80046bc:	f7fd fb94 	bl	8001de8 <bmi3_set_regs>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80046c6:	e002      	b.n	80046ce <set_step_config+0x4f6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80046c8:	23ff      	movs	r3, #255	@ 0xff
 80046ca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return rslt;
 80046ce:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3790      	adds	r7, #144	@ 0x90
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop

080046dc <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	2300      	movs	r3, #0
 80046ec:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 80046ee:	231e      	movs	r3, #30
 80046f0:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a4 	beq.w	8004846 <get_tap_config+0x16a>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80046fe:	f107 010c 	add.w	r1, r7, #12
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2202      	movs	r2, #2
 8004706:	2041      	movs	r0, #65	@ 0x41
 8004708:	f7fd fb6e 	bl	8001de8 <bmi3_set_regs>
 800470c:	4603      	mov	r3, r0
 800470e:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8004710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 8098 	bne.w	800484a <get_tap_config+0x16e>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 800471a:	f107 0110 	add.w	r1, r7, #16
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2206      	movs	r2, #6
 8004722:	2042      	movs	r0, #66	@ 0x42
 8004724:	f7fd fafb 	bl	8001d1e <bmi3_get_regs>
 8004728:	4603      	mov	r3, r0
 800472a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 800472c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 808a 	bne.w	800484a <get_tap_config+0x16e>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8004736:	7fbb      	ldrb	r3, [r7, #30]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	77ba      	strb	r2, [r7, #30]
 800473c:	3320      	adds	r3, #32
 800473e:	443b      	add	r3, r7
 8004740:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004744:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8004746:	7fbb      	ldrb	r3, [r7, #30]
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	77ba      	strb	r2, [r7, #30]
 800474c:	3320      	adds	r3, #32
 800474e:	443b      	add	r3, r7
 8004750:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8004758:	8bba      	ldrh	r2, [r7, #28]
 800475a:	8b7b      	ldrh	r3, [r7, #26]
 800475c:	4313      	orrs	r3, r2
 800475e:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 8004760:	8b3b      	ldrh	r3, [r7, #24]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	b2da      	uxtb	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 800476e:	8b3b      	ldrh	r3, [r7, #24]
 8004770:	109b      	asrs	r3, r3, #2
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	b2da      	uxtb	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 800477e:	8b3b      	ldrh	r3, [r7, #24]
 8004780:	10db      	asrs	r3, r3, #3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b2da      	uxtb	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 800478e:	8b3b      	ldrh	r3, [r7, #24]
 8004790:	119b      	asrs	r3, r3, #6
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	b2da      	uxtb	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 800479e:	7fbb      	ldrb	r3, [r7, #30]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	77ba      	strb	r2, [r7, #30]
 80047a4:	3320      	adds	r3, #32
 80047a6:	443b      	add	r3, r7
 80047a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047ac:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 80047ae:	7fbb      	ldrb	r3, [r7, #30]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	77ba      	strb	r2, [r7, #30]
 80047b4:	3320      	adds	r3, #32
 80047b6:	443b      	add	r3, r7
 80047b8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 80047c0:	8bba      	ldrh	r2, [r7, #28]
 80047c2:	8b7b      	ldrh	r3, [r7, #26]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 80047c8:	8b3b      	ldrh	r3, [r7, #24]
 80047ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 80047d4:	8b3b      	ldrh	r3, [r7, #24]
 80047d6:	0a9b      	lsrs	r3, r3, #10
 80047d8:	b29b      	uxth	r3, r3
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 80047e0:	7fbb      	ldrb	r3, [r7, #30]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	77ba      	strb	r2, [r7, #30]
 80047e6:	3320      	adds	r3, #32
 80047e8:	443b      	add	r3, r7
 80047ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047ee:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 80047f0:	7fbb      	ldrb	r3, [r7, #30]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	77ba      	strb	r2, [r7, #30]
 80047f6:	3320      	adds	r3, #32
 80047f8:	443b      	add	r3, r7
 80047fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8004802:	8bba      	ldrh	r2, [r7, #28]
 8004804:	8b7b      	ldrh	r3, [r7, #26]
 8004806:	4313      	orrs	r3, r2
 8004808:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 800480a:	8b3b      	ldrh	r3, [r7, #24]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	b2da      	uxtb	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 8004818:	8b3b      	ldrh	r3, [r7, #24]
 800481a:	111b      	asrs	r3, r3, #4
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	b2da      	uxtb	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 8004828:	8b3b      	ldrh	r3, [r7, #24]
 800482a:	121b      	asrs	r3, r3, #8
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	b2da      	uxtb	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 8004838:	8b3b      	ldrh	r3, [r7, #24]
 800483a:	0b1b      	lsrs	r3, r3, #12
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2da      	uxtb	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	729a      	strb	r2, [r3, #10]
 8004844:	e001      	b.n	800484a <get_tap_config+0x16e>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004846:	23ff      	movs	r3, #255	@ 0xff
 8004848:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800484a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	@ 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	2300      	movs	r3, #0
 8004868:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 800486a:	231e      	movs	r3, #30
 800486c:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80e8 	beq.w	8004a46 <set_tap_config+0x1ee>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8004876:	f107 010c 	add.w	r1, r7, #12
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2202      	movs	r2, #2
 800487e:	2041      	movs	r0, #65	@ 0x41
 8004880:	f7fd fab2 	bl	8001de8 <bmi3_set_regs>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 800488a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 80dc 	bne.w	8004a4c <set_tap_config+0x1f4>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8004894:	7c3b      	ldrb	r3, [r7, #16]
 8004896:	b21b      	sxth	r3, r3
 8004898:	f023 0303 	bic.w	r3, r3, #3
 800489c:	b21a      	sxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b21b      	sxth	r3, r3
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	b21b      	sxth	r3, r3
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 80048b0:	7c3b      	ldrb	r3, [r7, #16]
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	f023 0304 	bic.w	r3, r3, #4
 80048b8:	b21a      	sxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	785b      	ldrb	r3, [r3, #1]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	b21b      	sxth	r3, r3
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	b21b      	sxth	r3, r3
 80048c8:	4313      	orrs	r3, r2
 80048ca:	b21b      	sxth	r3, r3
 80048cc:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 80048ce:	7c3b      	ldrb	r3, [r7, #16]
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80048d6:	b21a      	sxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	789b      	ldrb	r3, [r3, #2]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	b21b      	sxth	r3, r3
 80048e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b21b      	sxth	r3, r3
 80048ea:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 80048ec:	7c3b      	ldrb	r3, [r7, #16]
 80048ee:	b21b      	sxth	r3, r3
 80048f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048f4:	b21a      	sxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	78db      	ldrb	r3, [r3, #3]
 80048fa:	019b      	lsls	r3, r3, #6
 80048fc:	b21b      	sxth	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	b21b      	sxth	r3, r3
 8004902:	4313      	orrs	r3, r2
 8004904:	b21b      	sxth	r3, r3
 8004906:	84fb      	strh	r3, [r7, #38]	@ 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8004908:	7cbb      	ldrb	r3, [r7, #18]
 800490a:	b21a      	sxth	r2, r3
 800490c:	4b52      	ldr	r3, [pc, #328]	@ (8004a58 <set_tap_config+0x200>)
 800490e:	4013      	ands	r3, r2
 8004910:	b21a      	sxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	889b      	ldrh	r3, [r3, #4]
 8004916:	b21b      	sxth	r3, r3
 8004918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491c:	b21b      	sxth	r3, r3
 800491e:	4313      	orrs	r3, r2
 8004920:	b21b      	sxth	r3, r3
 8004922:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 800492a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800492e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a58 <set_tap_config+0x200>)
 8004930:	4013      	ands	r3, r2
 8004932:	b21a      	sxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	889b      	ldrh	r3, [r3, #4]
 8004938:	b21b      	sxth	r3, r3
 800493a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800493e:	b21b      	sxth	r3, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	b21b      	sxth	r3, r3
 8004944:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 800494c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004954:	b21a      	sxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	799b      	ldrb	r3, [r3, #6]
 800495a:	029b      	lsls	r3, r3, #10
 800495c:	b21b      	sxth	r3, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	b21b      	sxth	r3, r3
 8004962:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8004964:	7d3b      	ldrb	r3, [r7, #20]
 8004966:	b21b      	sxth	r3, r3
 8004968:	f023 030f 	bic.w	r3, r3, #15
 800496c:	b21a      	sxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	79db      	ldrb	r3, [r3, #7]
 8004972:	b21b      	sxth	r3, r3
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	b21b      	sxth	r3, r3
 800497a:	4313      	orrs	r3, r2
 800497c:	b21b      	sxth	r3, r3
 800497e:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8004980:	7d3b      	ldrb	r3, [r7, #20]
 8004982:	b21b      	sxth	r3, r3
 8004984:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004988:	b21a      	sxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7a1b      	ldrb	r3, [r3, #8]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	b21b      	sxth	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	b21b      	sxth	r3, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 800499a:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 800499c:	7d7b      	ldrb	r3, [r7, #21]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 80049a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049aa:	b21a      	sxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7a5b      	ldrb	r3, [r3, #9]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	b21b      	sxth	r3, r3
 80049b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b21b      	sxth	r3, r3
 80049be:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 80049c0:	7d7b      	ldrb	r3, [r7, #21]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 80049c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ce:	b21a      	sxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	7a9b      	ldrb	r3, [r3, #10]
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	b21b      	sxth	r3, r3
 80049d8:	4313      	orrs	r3, r2
 80049da:	b21b      	sxth	r3, r3
 80049dc:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 80049de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4313      	orrs	r3, r2
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 80049fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8004a02:	8c3a      	ldrh	r2, [r7, #32]
 8004a04:	8bfb      	ldrh	r3, [r7, #30]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8004a12:	8bbb      	ldrh	r3, [r7, #28]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	8b7b      	ldrh	r3, [r7, #26]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8004a20:	8b3a      	ldrh	r2, [r7, #24]
 8004a22:	8afb      	ldrh	r3, [r7, #22]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8004a30:	f107 0110 	add.w	r1, r7, #16
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2206      	movs	r2, #6
 8004a38:	2042      	movs	r0, #66	@ 0x42
 8004a3a:	f7fd f9d5 	bl	8001de8 <bmi3_set_regs>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004a44:	e002      	b.n	8004a4c <set_tap_config+0x1f4>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004a46:	23ff      	movs	r3, #255	@ 0xff
 8004a48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8004a4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3730      	adds	r7, #48	@ 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	fffffc00 	.word	0xfffffc00

08004a5c <get_i3c_sync_accel_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync accelerometer data from the register.
 */
static int8_t get_i3c_sync_accel_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_ACC] = { 0 };
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	f107 0310 	add.w	r3, r7, #16
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	605a      	str	r2, [r3, #4]
 8004a74:	609a      	str	r2, [r3, #8]

    /* Array to set the base address of i3c sync accel data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_ACC, 0 };
 8004a76:	2337      	movs	r3, #55	@ 0x37
 8004a78:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d03e      	beq.n	8004afe <get_i3c_sync_accel_sensor_data+0xa2>
    {
        /* Set the i3c sync accelerometer base address to feature engine transmission address to start DMA transaction
         * */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004a80:	f107 0108 	add.w	r1, r7, #8
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2202      	movs	r2, #2
 8004a88:	2041      	movs	r0, #65	@ 0x41
 8004a8a:	f7fd f9ad 	bl	8001de8 <bmi3_set_regs>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8004a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d133      	bne.n	8004b02 <get_i3c_sync_accel_sensor_data+0xa6>
        {
            /* Get the configuration from the feature engine register where i3c sync accel data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_ACC, dev);
 8004a9a:	f107 010c 	add.w	r1, r7, #12
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	2042      	movs	r0, #66	@ 0x42
 8004aa4:	f7fd f93b 	bl	8001d1e <bmi3_get_regs>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	77fb      	strb	r3, [r7, #31]

            data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8004aac:	7b3b      	ldrb	r3, [r7, #12]
 8004aae:	b21a      	sxth	r2, r3
 8004ab0:	7b7b      	ldrb	r3, [r7, #13]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	801a      	strh	r2, [r3, #0]
            data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8004ac0:	7bbb      	ldrb	r3, [r7, #14]
 8004ac2:	b21a      	sxth	r2, r3
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	4313      	orrs	r3, r2
 8004acc:	b21b      	sxth	r3, r3
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	805a      	strh	r2, [r3, #2]
            data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8004ad4:	7c3b      	ldrb	r3, [r7, #16]
 8004ad6:	b21a      	sxth	r2, r3
 8004ad8:	7c7b      	ldrb	r3, [r7, #17]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	b21b      	sxth	r3, r3
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	b21b      	sxth	r3, r3
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	809a      	strh	r2, [r3, #4]
            data->sync_time = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 8004ae8:	7ebb      	ldrb	r3, [r7, #26]
 8004aea:	b21a      	sxth	r2, r3
 8004aec:	7efb      	ldrb	r3, [r7, #27]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	b21b      	sxth	r3, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	811a      	strh	r2, [r3, #8]
 8004afc:	e001      	b.n	8004b02 <get_i3c_sync_accel_sensor_data+0xa6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004afe:	23ff      	movs	r3, #255	@ 0xff
 8004b00:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <get_i3c_sync_gyro_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync gyroscope data from the register.
 */
static int8_t get_i3c_sync_gyro_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_GYR] = { 0 };
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	f107 0310 	add.w	r3, r7, #16
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	809a      	strh	r2, [r3, #4]

    /* Array to set the base address of i3c sync gyro data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_GYR, 0 };
 8004b26:	233a      	movs	r3, #58	@ 0x3a
 8004b28:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d042      	beq.n	8004bb6 <get_i3c_sync_gyro_sensor_data+0xa8>
    {
        /* Set the i3c sync gyroscope base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004b30:	f107 0108 	add.w	r1, r7, #8
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2202      	movs	r2, #2
 8004b38:	2041      	movs	r0, #65	@ 0x41
 8004b3a:	f7fd f955 	bl	8001de8 <bmi3_set_regs>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d137      	bne.n	8004bba <get_i3c_sync_gyro_sensor_data+0xac>
        {
            /* Get the configuration from the feature engine register where i3c sync gyro data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_GYR, dev);
 8004b4a:	f107 010c 	add.w	r1, r7, #12
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	220a      	movs	r2, #10
 8004b52:	2042      	movs	r0, #66	@ 0x42
 8004b54:	f7fd f8e3 	bl	8001d1e <bmi3_get_regs>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8004b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d12a      	bne.n	8004bba <get_i3c_sync_gyro_sensor_data+0xac>
            {
                data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8004b64:	7b3b      	ldrb	r3, [r7, #12]
 8004b66:	b21a      	sxth	r2, r3
 8004b68:	7b7b      	ldrb	r3, [r7, #13]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	b21b      	sxth	r3, r3
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	b21b      	sxth	r3, r3
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	801a      	strh	r2, [r3, #0]
                data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8004b78:	7bbb      	ldrb	r3, [r7, #14]
 8004b7a:	b21a      	sxth	r2, r3
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	b21b      	sxth	r3, r3
 8004b82:	4313      	orrs	r3, r2
 8004b84:	b21b      	sxth	r3, r3
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	805a      	strh	r2, [r3, #2]
                data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8004b8c:	7c3b      	ldrb	r3, [r7, #16]
 8004b8e:	b21a      	sxth	r2, r3
 8004b90:	7c7b      	ldrb	r3, [r7, #17]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	b21b      	sxth	r3, r3
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b21b      	sxth	r3, r3
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	809a      	strh	r2, [r3, #4]
                data->sync_time = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 8004ba0:	7d3b      	ldrb	r3, [r7, #20]
 8004ba2:	b21a      	sxth	r2, r3
 8004ba4:	7d7b      	ldrb	r3, [r7, #21]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b21b      	sxth	r3, r3
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	811a      	strh	r2, [r3, #8]
 8004bb4:	e001      	b.n	8004bba <get_i3c_sync_gyro_sensor_data+0xac>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004bb6:	23ff      	movs	r3, #255	@ 0xff
 8004bb8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <get_i3c_sync_temp_data>:

/*!
 * @brief This internal API gets the i3c sync temperature data from the register.
 */
static int8_t get_i3c_sync_temp_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_TEMP] = { 0 };
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of i3c sync temperature data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_TEMP, 0 };
 8004bd4:	233d      	movs	r3, #61	@ 0x3d
 8004bd6:	81bb      	strh	r3, [r7, #12]

    if (data != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02e      	beq.n	8004c3c <get_i3c_sync_temp_data+0x76>
    {
        /* Set the i3c sync temperature base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004bde:	f107 010c 	add.w	r1, r7, #12
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2202      	movs	r2, #2
 8004be6:	2041      	movs	r0, #65	@ 0x41
 8004be8:	f7fd f8fe 	bl	8001de8 <bmi3_set_regs>
 8004bec:	4603      	mov	r3, r0
 8004bee:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d123      	bne.n	8004c40 <get_i3c_sync_temp_data+0x7a>
        {
            /* Get the configuration from the feature engine register where i3c sync temperature data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_TEMP, dev);
 8004bf8:	f107 0110 	add.w	r1, r7, #16
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	2042      	movs	r0, #66	@ 0x42
 8004c02:	f7fd f88c 	bl	8001d1e <bmi3_get_regs>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8004c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d116      	bne.n	8004c40 <get_i3c_sync_temp_data+0x7a>
            {
                data->sync_temp = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8004c12:	7c3b      	ldrb	r3, [r7, #16]
 8004c14:	b21a      	sxth	r2, r3
 8004c16:	7c7b      	ldrb	r3, [r7, #17]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	b21b      	sxth	r3, r3
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	80da      	strh	r2, [r3, #6]
                data->sync_time = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8004c26:	7cbb      	ldrb	r3, [r7, #18]
 8004c28:	b21a      	sxth	r2, r3
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	b21b      	sxth	r3, r3
 8004c30:	4313      	orrs	r3, r2
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	811a      	strh	r2, [r3, #8]
 8004c3a:	e001      	b.n	8004c40 <get_i3c_sync_temp_data+0x7a>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004c3c:	23ff      	movs	r3, #255	@ 0xff
 8004c3e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8004c56:	2300      	movs	r3, #0
 8004c58:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03a      	beq.n	8004cd6 <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8004c60:	7b3b      	ldrb	r3, [r7, #12]
 8004c62:	b21b      	sxth	r3, r3
 8004c64:	f023 030f 	bic.w	r3, r3, #15
 8004c68:	b21a      	sxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	b21b      	sxth	r3, r3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8004c7c:	7b7b      	ldrb	r3, [r7, #13]
 8004c7e:	b21a      	sxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	789b      	ldrb	r3, [r3, #2]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c8c:	b21b      	sxth	r3, r3
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b21b      	sxth	r3, r3
 8004c92:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8004c94:	7b7b      	ldrb	r3, [r7, #13]
 8004c96:	b21a      	sxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	031b      	lsls	r3, r3, #12
 8004c9e:	b21b      	sxth	r3, r3
 8004ca0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8004cac:	8abb      	ldrh	r3, [r7, #20]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8004cb2:	8a7a      	ldrh	r2, [r7, #18]
 8004cb4:	8a3b      	ldrh	r3, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 8004cc2:	f107 010c 	add.w	r1, r7, #12
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2028      	movs	r0, #40	@ 0x28
 8004ccc:	f7fd f88c 	bl	8001de8 <bmi3_set_regs>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]
 8004cd4:	e001      	b.n	8004cda <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004cd6:	23ff      	movs	r3, #255	@ 0xff
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d029      	beq.n	8004d4e <get_alternate_accel_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 8004cfa:	f107 0108 	add.w	r1, r7, #8
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2202      	movs	r2, #2
 8004d02:	2028      	movs	r0, #40	@ 0x28
 8004d04:	f7fd f80b 	bl	8001d1e <bmi3_get_regs>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8004d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11e      	bne.n	8004d52 <get_alternate_accel_config+0x6c>
        {
            reg_data = data_array[0];
 8004d14:	7a3b      	ldrb	r3, [r7, #8]
 8004d16:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 8004d18:	89bb      	ldrh	r3, [r7, #12]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8004d26:	7a7b      	ldrb	r3, [r7, #9]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 8004d2c:	89bb      	ldrh	r3, [r7, #12]
 8004d2e:	121b      	asrs	r3, r3, #8
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 8004d3c:	89bb      	ldrh	r3, [r7, #12]
 8004d3e:	131b      	asrs	r3, r3, #12
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	705a      	strb	r2, [r3, #1]
 8004d4c:	e001      	b.n	8004d52 <get_alternate_accel_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004d4e:	23ff      	movs	r3, #255	@ 0xff
 8004d50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8004d68:	2300      	movs	r3, #0
 8004d6a:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d03a      	beq.n	8004de8 <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8004d72:	7b3b      	ldrb	r3, [r7, #12]
 8004d74:	b21b      	sxth	r3, r3
 8004d76:	f023 030f 	bic.w	r3, r3, #15
 8004d7a:	b21a      	sxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b21b      	sxth	r3, r3
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	b21b      	sxth	r3, r3
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	b21b      	sxth	r3, r3
 8004d8c:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 8004d8e:	7b7b      	ldrb	r3, [r7, #13]
 8004d90:	b21a      	sxth	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	789b      	ldrb	r3, [r3, #2]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	b21b      	sxth	r3, r3
 8004d9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b21b      	sxth	r3, r3
 8004da4:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 8004da6:	7b7b      	ldrb	r3, [r7, #13]
 8004da8:	b21a      	sxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	031b      	lsls	r3, r3, #12
 8004db0:	b21b      	sxth	r3, r3
 8004db2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004db6:	b21b      	sxth	r3, r3
 8004db8:	4313      	orrs	r3, r2
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 8004dbe:	8abb      	ldrh	r3, [r7, #20]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 8004dc4:	8a7a      	ldrh	r2, [r7, #18]
 8004dc6:	8a3b      	ldrh	r3, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 8004dd4:	f107 010c 	add.w	r1, r7, #12
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	2029      	movs	r0, #41	@ 0x29
 8004dde:	f7fd f803 	bl	8001de8 <bmi3_set_regs>
 8004de2:	4603      	mov	r3, r0
 8004de4:	75fb      	strb	r3, [r7, #23]
 8004de6:	e001      	b.n	8004dec <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004de8:	23ff      	movs	r3, #255	@ 0xff
 8004dea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8004e02:	2300      	movs	r3, #0
 8004e04:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d029      	beq.n	8004e60 <get_alternate_gyro_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 8004e0c:	f107 0108 	add.w	r1, r7, #8
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2202      	movs	r2, #2
 8004e14:	2029      	movs	r0, #41	@ 0x29
 8004e16:	f7fc ff82 	bl	8001d1e <bmi3_get_regs>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8004e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11e      	bne.n	8004e64 <get_alternate_gyro_config+0x6c>
        {
            reg_data = data_array[0];
 8004e26:	7a3b      	ldrb	r3, [r7, #8]
 8004e28:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 8004e2a:	89bb      	ldrh	r3, [r7, #12]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8004e38:	7a7b      	ldrb	r3, [r7, #9]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 8004e3e:	89bb      	ldrh	r3, [r7, #12]
 8004e40:	121b      	asrs	r3, r3, #8
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 8004e4e:	89bb      	ldrh	r3, [r7, #12]
 8004e50:	131b      	asrs	r3, r3, #12
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	705a      	strb	r2, [r3, #1]
 8004e5e:	e001      	b.n	8004e64 <get_alternate_gyro_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004e60:	23ff      	movs	r3, #255	@ 0xff
 8004e62:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8004e7e:	2323      	movs	r3, #35	@ 0x23
 8004e80:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d035      	beq.n	8004ef4 <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004e88:	f107 010c 	add.w	r1, r7, #12
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	2041      	movs	r0, #65	@ 0x41
 8004e92:	f7fc ffa9 	bl	8001de8 <bmi3_set_regs>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12a      	bne.n	8004ef8 <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 8004ea2:	7c3b      	ldrb	r3, [r7, #16]
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f023 030f 	bic.w	r3, r3, #15
 8004eaa:	b25a      	sxtb	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	b25b      	sxtb	r3, r3
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 8004ebe:	7c3b      	ldrb	r3, [r7, #16]
 8004ec0:	b25b      	sxtb	r3, r3
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	b25a      	sxtb	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	b25b      	sxtb	r3, r3
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	b25b      	sxtb	r3, r3
 8004ed4:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 8004ed6:	7dba      	ldrb	r2, [r7, #22]
 8004ed8:	7d7b      	ldrb	r3, [r7, #21]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8004ee0:	f107 0110 	add.w	r1, r7, #16
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	2042      	movs	r0, #66	@ 0x42
 8004eea:	f7fc ff7d 	bl	8001de8 <bmi3_set_regs>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]
 8004ef2:	e001      	b.n	8004ef8 <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004ef4:	23ff      	movs	r3, #255	@ 0xff
 8004ef6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 8004f0e:	2300      	movs	r3, #0
 8004f10:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 8004f12:	2323      	movs	r3, #35	@ 0x23
 8004f14:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d025      	beq.n	8004f68 <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004f1c:	f107 0108 	add.w	r1, r7, #8
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2202      	movs	r2, #2
 8004f24:	2041      	movs	r0, #65	@ 0x41
 8004f26:	f7fc ff5f 	bl	8001de8 <bmi3_set_regs>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8004f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11a      	bne.n	8004f6c <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8004f36:	f107 010c 	add.w	r1, r7, #12
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2042      	movs	r0, #66	@ 0x42
 8004f40:	f7fc feed 	bl	8001d1e <bmi3_get_regs>
 8004f44:	4603      	mov	r3, r0
 8004f46:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8004f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8004f50:	7b3b      	ldrb	r3, [r7, #12]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 8004f5c:	7b3b      	ldrb	r3, [r7, #12]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	705a      	strb	r2, [r3, #1]
 8004f66:	e001      	b.n	8004f6c <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004f68:	23ff      	movs	r3, #255	@ 0xff
 8004f6a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	460a      	mov	r2, r1
 8004f82:	71fb      	strb	r3, [r7, #7]
 8004f84:	4613      	mov	r3, r2
 8004f86:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	2b09      	cmp	r3, #9
 8004f9a:	d835      	bhi.n	8005008 <validate_acc_odr_avg+0x90>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <validate_acc_odr_avg+0x2c>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fd9 	.word	0x08004fd9
 8004fb0:	08004fdf 	.word	0x08004fdf
 8004fb4:	08004fe5 	.word	0x08004fe5
 8004fb8:	08004feb 	.word	0x08004feb
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	08004ffd 	.word	0x08004ffd
 8004fc8:	08005003 	.word	0x08005003
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800508c <validate_acc_odr_avg+0x114>)
 8004fce:	617b      	str	r3, [r7, #20]
            break;
 8004fd0:	e01b      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005090 <validate_acc_odr_avg+0x118>)
 8004fd4:	617b      	str	r3, [r7, #20]
            break;
 8004fd6:	e018      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 8004fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8005094 <validate_acc_odr_avg+0x11c>)
 8004fda:	617b      	str	r3, [r7, #20]
            break;
 8004fdc:	e015      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 8004fde:	4b2e      	ldr	r3, [pc, #184]	@ (8005098 <validate_acc_odr_avg+0x120>)
 8004fe0:	617b      	str	r3, [r7, #20]
            break;
 8004fe2:	e012      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800509c <validate_acc_odr_avg+0x124>)
 8004fe6:	617b      	str	r3, [r7, #20]
            break;
 8004fe8:	e00f      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 8004fea:	4b2d      	ldr	r3, [pc, #180]	@ (80050a0 <validate_acc_odr_avg+0x128>)
 8004fec:	617b      	str	r3, [r7, #20]
            break;
 8004fee:	e00c      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 8004ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80050a4 <validate_acc_odr_avg+0x12c>)
 8004ff2:	617b      	str	r3, [r7, #20]
            break;
 8004ff4:	e009      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80050a8 <validate_acc_odr_avg+0x130>)
 8004ff8:	617b      	str	r3, [r7, #20]
            break;
 8004ffa:	e006      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80050ac <validate_acc_odr_avg+0x134>)
 8004ffe:	617b      	str	r3, [r7, #20]
            break;
 8005000:	e003      	b.n	800500a <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 8005002:	4b2b      	ldr	r3, [pc, #172]	@ (80050b0 <validate_acc_odr_avg+0x138>)
 8005004:	617b      	str	r3, [r7, #20]
            break;
 8005006:	e000      	b.n	800500a <validate_acc_odr_avg+0x92>
        default:
            break;
 8005008:	bf00      	nop
    }

    switch (acc_avg)
 800500a:	79bb      	ldrb	r3, [r7, #6]
 800500c:	2b06      	cmp	r3, #6
 800500e:	d82d      	bhi.n	800506c <validate_acc_odr_avg+0xf4>
 8005010:	a201      	add	r2, pc, #4	@ (adr r2, 8005018 <validate_acc_odr_avg+0xa0>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	08005035 	.word	0x08005035
 800501c:	0800503d 	.word	0x0800503d
 8005020:	08005045 	.word	0x08005045
 8005024:	0800504d 	.word	0x0800504d
 8005028:	08005055 	.word	0x08005055
 800502c:	0800505d 	.word	0x0800505d
 8005030:	08005065 	.word	0x08005065
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 8005034:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005038:	613b      	str	r3, [r7, #16]
            break;
 800503a:	e018      	b.n	800506e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 800503c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005040:	613b      	str	r3, [r7, #16]
            break;
 8005042:	e014      	b.n	800506e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 8005044:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005048:	613b      	str	r3, [r7, #16]
            break;
 800504a:	e010      	b.n	800506e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 800504c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005050:	613b      	str	r3, [r7, #16]
            break;
 8005052:	e00c      	b.n	800506e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 8005054:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005058:	613b      	str	r3, [r7, #16]
            break;
 800505a:	e008      	b.n	800506e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 800505c:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8005060:	613b      	str	r3, [r7, #16]
            break;
 8005062:	e004      	b.n	800506e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 8005064:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8005068:	613b      	str	r3, [r7, #16]
            break;
 800506a:	e000      	b.n	800506e <validate_acc_odr_avg+0xf6>
        default:
            break;
 800506c:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 800506e:	edd7 0a04 	vldr	s1, [r7, #16]
 8005072:	ed97 0a05 	vldr	s0, [r7, #20]
 8005076:	f000 f81d 	bl	80050b4 <accel_skipped_samples_check>
 800507a:	4603      	mov	r3, r0
 800507c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800507e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	3f480000 	.word	0x3f480000
 8005090:	3fc80000 	.word	0x3fc80000
 8005094:	40480000 	.word	0x40480000
 8005098:	40c80000 	.word	0x40c80000
 800509c:	41480000 	.word	0x41480000
 80050a0:	41c80000 	.word	0x41c80000
 80050a4:	42480000 	.word	0x42480000
 80050a8:	42c80000 	.word	0x42c80000
 80050ac:	43480000 	.word	0x43480000
 80050b0:	43c80000 	.word	0x43c80000

080050b4 <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80050be:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 80050c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005130 <accel_skipped_samples_check+0x7c>)
 80050c4:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 80050cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80050d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	dd1f      	ble.n	800511a <accel_skipped_samples_check+0x66>
 80050da:	edd7 7a00 	vldr	s15, [r7]
 80050de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	dd18      	ble.n	800511a <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80050e8:	edd7 6a04 	vldr	s13, [r7, #16]
 80050ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80050f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f4:	edd7 7a00 	vldr	s15, [r7]
 80050f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050fc:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 8005100:	edd7 7a03 	vldr	s15, [r7, #12]
 8005104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510c:	dd02      	ble.n	8005114 <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8005112:	e004      	b.n	800511e <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 8005114:	23fc      	movs	r3, #252	@ 0xfc
 8005116:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 8005118:	e001      	b.n	800511e <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 800511a:	23fc      	movs	r3, #252	@ 0xfc
 800511c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800511e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	45c80000 	.word	0x45c80000

08005134 <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	460a      	mov	r2, r1
 800513e:	71fb      	strb	r3, [r7, #7]
 8005140:	4613      	mov	r3, r2
 8005142:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	3b01      	subs	r3, #1
 8005154:	2b09      	cmp	r3, #9
 8005156:	d835      	bhi.n	80051c4 <validate_gyr_odr_avg+0x90>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <validate_gyr_odr_avg+0x2c>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005189 	.word	0x08005189
 8005164:	0800518f 	.word	0x0800518f
 8005168:	08005195 	.word	0x08005195
 800516c:	0800519b 	.word	0x0800519b
 8005170:	080051a1 	.word	0x080051a1
 8005174:	080051a7 	.word	0x080051a7
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051b3 	.word	0x080051b3
 8005180:	080051b9 	.word	0x080051b9
 8005184:	080051bf 	.word	0x080051bf
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 8005188:	4b2f      	ldr	r3, [pc, #188]	@ (8005248 <validate_gyr_odr_avg+0x114>)
 800518a:	617b      	str	r3, [r7, #20]
            break;
 800518c:	e01b      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 800518e:	4b2f      	ldr	r3, [pc, #188]	@ (800524c <validate_gyr_odr_avg+0x118>)
 8005190:	617b      	str	r3, [r7, #20]
            break;
 8005192:	e018      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 8005194:	4b2e      	ldr	r3, [pc, #184]	@ (8005250 <validate_gyr_odr_avg+0x11c>)
 8005196:	617b      	str	r3, [r7, #20]
            break;
 8005198:	e015      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 800519a:	4b2e      	ldr	r3, [pc, #184]	@ (8005254 <validate_gyr_odr_avg+0x120>)
 800519c:	617b      	str	r3, [r7, #20]
            break;
 800519e:	e012      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 80051a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005258 <validate_gyr_odr_avg+0x124>)
 80051a2:	617b      	str	r3, [r7, #20]
            break;
 80051a4:	e00f      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 80051a6:	4b2d      	ldr	r3, [pc, #180]	@ (800525c <validate_gyr_odr_avg+0x128>)
 80051a8:	617b      	str	r3, [r7, #20]
            break;
 80051aa:	e00c      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 80051ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005260 <validate_gyr_odr_avg+0x12c>)
 80051ae:	617b      	str	r3, [r7, #20]
            break;
 80051b0:	e009      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 80051b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005264 <validate_gyr_odr_avg+0x130>)
 80051b4:	617b      	str	r3, [r7, #20]
            break;
 80051b6:	e006      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 80051b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005268 <validate_gyr_odr_avg+0x134>)
 80051ba:	617b      	str	r3, [r7, #20]
            break;
 80051bc:	e003      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 80051be:	4b2b      	ldr	r3, [pc, #172]	@ (800526c <validate_gyr_odr_avg+0x138>)
 80051c0:	617b      	str	r3, [r7, #20]
            break;
 80051c2:	e000      	b.n	80051c6 <validate_gyr_odr_avg+0x92>
        default:
            break;
 80051c4:	bf00      	nop
    }

    switch (gyr_avg)
 80051c6:	79bb      	ldrb	r3, [r7, #6]
 80051c8:	2b06      	cmp	r3, #6
 80051ca:	d82d      	bhi.n	8005228 <validate_gyr_odr_avg+0xf4>
 80051cc:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <validate_gyr_odr_avg+0xa0>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	080051f9 	.word	0x080051f9
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005219 	.word	0x08005219
 80051ec:	08005221 	.word	0x08005221
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 80051f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80051f4:	613b      	str	r3, [r7, #16]
            break;
 80051f6:	e018      	b.n	800522a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 80051f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051fc:	613b      	str	r3, [r7, #16]
            break;
 80051fe:	e014      	b.n	800522a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 8005200:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005204:	613b      	str	r3, [r7, #16]
            break;
 8005206:	e010      	b.n	800522a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 8005208:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800520c:	613b      	str	r3, [r7, #16]
            break;
 800520e:	e00c      	b.n	800522a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 8005210:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005214:	613b      	str	r3, [r7, #16]
            break;
 8005216:	e008      	b.n	800522a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 8005218:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 800521c:	613b      	str	r3, [r7, #16]
            break;
 800521e:	e004      	b.n	800522a <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 8005220:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8005224:	613b      	str	r3, [r7, #16]
            break;
 8005226:	e000      	b.n	800522a <validate_gyr_odr_avg+0xf6>
        default:
            break;
 8005228:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 800522a:	edd7 0a04 	vldr	s1, [r7, #16]
 800522e:	ed97 0a05 	vldr	s0, [r7, #20]
 8005232:	f000 f81d 	bl	8005270 <gyro_skipped_samples_check>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	3f480000 	.word	0x3f480000
 800524c:	3fc80000 	.word	0x3fc80000
 8005250:	40480000 	.word	0x40480000
 8005254:	40c80000 	.word	0x40c80000
 8005258:	41480000 	.word	0x41480000
 800525c:	41c80000 	.word	0x41c80000
 8005260:	42480000 	.word	0x42480000
 8005264:	42c80000 	.word	0x42c80000
 8005268:	43480000 	.word	0x43480000
 800526c:	43c80000 	.word	0x43c80000

08005270 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	ed87 0a01 	vstr	s0, [r7, #4]
 800527a:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800527e:	4b1b      	ldr	r3, [pc, #108]	@ (80052ec <gyro_skipped_samples_check+0x7c>)
 8005280:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8005288:	edd7 7a01 	vldr	s15, [r7, #4]
 800528c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	dd1f      	ble.n	80052d6 <gyro_skipped_samples_check+0x66>
 8005296:	edd7 7a00 	vldr	s15, [r7]
 800529a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a2:	dd18      	ble.n	80052d6 <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80052a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80052a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80052ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b0:	edd7 7a00 	vldr	s15, [r7]
 80052b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b8:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80052bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80052c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c8:	dd02      	ble.n	80052d0 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80052ce:	e004      	b.n	80052da <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 80052d0:	23fb      	movs	r3, #251	@ 0xfb
 80052d2:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80052d4:	e001      	b.n	80052da <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 80052d6:	23fb      	movs	r3, #251	@ 0xfb
 80052d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80052da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	45c80000 	.word	0x45c80000

080052f0 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fdf5 	bl	8005ee8 <null_ptr_check>
 80052fe:	4603      	mov	r3, r0
 8005300:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 8005302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc fcb5 	bl	8001c7a <bmi3_init>
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 8005314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b43      	cmp	r3, #67	@ 0x43
 8005322:	d103      	bne.n	800532c <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2210      	movs	r2, #16
 8005328:	731a      	strb	r2, [r3, #12]
 800532a:	e001      	b.n	8005330 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 800532c:	23fd      	movs	r3, #253	@ 0xfd
 800532e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 8005330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	2001      	movs	r0, #1
 800533c:	f000 f832 	bl	80053a4 <bmi323_context_switch_selection>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	460b      	mov	r3, r1
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 800535e:	7afb      	ldrb	r3, [r7, #11]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4619      	mov	r1, r3
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7fc fe31 	bl	8001fcc <bmi3_set_sensor_config>
 800536a:	4603      	mov	r3, r0
 800536c:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800536e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	460b      	mov	r3, r1
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 8005388:	7afb      	ldrb	r3, [r7, #11]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4619      	mov	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7fc ff26 	bl	80021e0 <bmi3_get_sensor_config>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8005398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b0c8      	sub	sp, #288	@ 0x120
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4602      	mov	r2, r0
 80053ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80053b4:	6019      	str	r1, [r3, #0]
 80053b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053ba:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80053be:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    if (context_sel < BMI323_SEL_MAX)
 80053c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053ca:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	f200 8578 	bhi.w	8005ec6 <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 80053d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80053de:	2203      	movs	r2, #3
 80053e0:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 80053e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053e6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80053f0:	1c59      	adds	r1, r3, #1
 80053f2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80053f6:	4618      	mov	r0, r3
 80053f8:	49e3      	ldr	r1, [pc, #908]	@ (8005788 <bmi323_context_switch_selection+0x3e4>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	4403      	add	r3, r0
 8005402:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005406:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800540a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800540e:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 8005410:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005414:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005424:	4618      	mov	r0, r3
 8005426:	49d8      	ldr	r1, [pc, #864]	@ (8005788 <bmi323_context_switch_selection+0x3e4>)
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	4403      	add	r3, r0
 8005430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800543a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800543e:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 8005440:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005444:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005454:	4618      	mov	r0, r3
 8005456:	49cc      	ldr	r1, [pc, #816]	@ (8005788 <bmi323_context_switch_selection+0x3e4>)
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	4403      	add	r3, r0
 8005460:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005464:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005468:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800546c:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 800546e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005472:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800547c:	1c59      	adds	r1, r3, #1
 800547e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005482:	4618      	mov	r0, r3
 8005484:	49c0      	ldr	r1, [pc, #768]	@ (8005788 <bmi323_context_switch_selection+0x3e4>)
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	4403      	add	r3, r0
 800548e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005492:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005496:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800549a:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 800549c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054a0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80054a4:	781a      	ldrb	r2, [r3, #0]
 80054a6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80054b0:	4618      	mov	r0, r3
 80054b2:	49b5      	ldr	r1, [pc, #724]	@ (8005788 <bmi323_context_switch_selection+0x3e4>)
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	4403      	add	r3, r0
 80054bc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80054c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80054c8:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 80054d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80054d8:	2204      	movs	r2, #4
 80054da:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 80054de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054e2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80054f2:	4618      	mov	r0, r3
 80054f4:	49a5      	ldr	r1, [pc, #660]	@ (800578c <bmi323_context_switch_selection+0x3e8>)
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	4403      	add	r3, r0
 80054fe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005502:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005506:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800550a:	865a      	strh	r2, [r3, #50]	@ 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 800550c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005510:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005520:	4618      	mov	r0, r3
 8005522:	499a      	ldr	r1, [pc, #616]	@ (800578c <bmi323_context_switch_selection+0x3e8>)
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	4403      	add	r3, r0
 800552c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005536:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800553a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 800553e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005542:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005552:	4618      	mov	r0, r3
 8005554:	498d      	ldr	r1, [pc, #564]	@ (800578c <bmi323_context_switch_selection+0x3e8>)
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	4403      	add	r3, r0
 800555e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005562:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005566:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800556a:	86da      	strh	r2, [r3, #54]	@ 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 800556c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005570:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800557a:	1c59      	adds	r1, r3, #1
 800557c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005580:	4618      	mov	r0, r3
 8005582:	4982      	ldr	r1, [pc, #520]	@ (800578c <bmi323_context_switch_selection+0x3e8>)
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	4403      	add	r3, r0
 800558c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005590:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005594:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005598:	861a      	strh	r2, [r3, #48]	@ 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 800559a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800559e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80055a8:	1c59      	adds	r1, r3, #1
 80055aa:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80055ae:	4618      	mov	r0, r3
 80055b0:	4976      	ldr	r1, [pc, #472]	@ (800578c <bmi323_context_switch_selection+0x3e8>)
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	4403      	add	r3, r0
 80055ba:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80055be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80055c6:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Set tap configuration */
        index = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[2].type = BMI323_TAP;
 80055ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055d2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80055d6:	2209      	movs	r2, #9
 80055d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 80055dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055e0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80055e4:	781a      	ldrb	r2, [r3, #0]
 80055e6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80055f0:	4618      	mov	r0, r3
 80055f2:	4967      	ldr	r1, [pc, #412]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4403      	add	r3, r0
 80055fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005608:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800560c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 8005610:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005614:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005624:	4618      	mov	r0, r3
 8005626:	495a      	ldr	r1, [pc, #360]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4403      	add	r3, r0
 8005632:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800563c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005640:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 8005644:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005648:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005658:	4618      	mov	r0, r3
 800565a:	494d      	ldr	r1, [pc, #308]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4403      	add	r3, r0
 8005666:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005670:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005674:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8005678:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800567c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005686:	1c59      	adds	r1, r3, #1
 8005688:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800568c:	4618      	mov	r0, r3
 800568e:	4940      	ldr	r1, [pc, #256]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4403      	add	r3, r0
 800569a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 80056ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056b0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80056c0:	4618      	mov	r0, r3
 80056c2:	4933      	ldr	r1, [pc, #204]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4403      	add	r3, r0
 80056ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80056d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 80056de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056e2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80056f2:	4618      	mov	r0, r3
 80056f4:	4926      	ldr	r1, [pc, #152]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4403      	add	r3, r0
 8005700:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800570a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800570e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 8005712:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005716:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005726:	4618      	mov	r0, r3
 8005728:	4919      	ldr	r1, [pc, #100]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4403      	add	r3, r0
 8005734:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005738:	b2da      	uxtb	r2, r3
 800573a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800573e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005742:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 8005746:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800574a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800574e:	781a      	ldrb	r2, [r3, #0]
 8005750:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800575a:	4618      	mov	r0, r3
 800575c:	490c      	ldr	r1, [pc, #48]	@ (8005790 <bmi323_context_switch_selection+0x3ec>)
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4403      	add	r3, r0
 8005768:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005772:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005776:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 800577a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800577e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	e006      	b.n	8005794 <bmi323_context_switch_selection+0x3f0>
 8005786:	bf00      	nop
 8005788:	24000004 	.word	0x24000004
 800578c:	24000024 	.word	0x24000024
 8005790:	24000044 	.word	0x24000044
 8005794:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800579e:	4618      	mov	r0, r3
 80057a0:	49e9      	ldr	r1, [pc, #932]	@ (8005b48 <bmi323_context_switch_selection+0x7a4>)
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4403      	add	r3, r0
 80057ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80057ba:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 80057be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057c2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80057cc:	1c59      	adds	r1, r3, #1
 80057ce:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80057d2:	4618      	mov	r0, r3
 80057d4:	49dc      	ldr	r1, [pc, #880]	@ (8005b48 <bmi323_context_switch_selection+0x7a4>)
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4403      	add	r3, r0
 80057e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057ea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80057ee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

        /* Set step counter configuration */
        index = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 80057f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005800:	2205      	movs	r2, #5
 8005802:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 8005806:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800580a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005814:	1c59      	adds	r1, r3, #1
 8005816:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800581a:	4618      	mov	r0, r3
 800581c:	49cb      	ldr	r1, [pc, #812]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 800581e:	2316      	movs	r3, #22
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	4403      	add	r3, r0
 8005826:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800582a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800582e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005832:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 8005836:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800583a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800584a:	4618      	mov	r0, r3
 800584c:	49bf      	ldr	r1, [pc, #764]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 800584e:	2316      	movs	r3, #22
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	4403      	add	r3, r0
 8005856:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800585a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800585e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005862:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 8005866:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800586a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005874:	1c59      	adds	r1, r3, #1
 8005876:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800587a:	4618      	mov	r0, r3
 800587c:	49b3      	ldr	r1, [pc, #716]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 800587e:	2316      	movs	r3, #22
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	4403      	add	r3, r0
 8005886:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800588a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800588e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005892:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 8005896:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800589a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80058a4:	1c59      	adds	r1, r3, #1
 80058a6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80058aa:	4618      	mov	r0, r3
 80058ac:	49a7      	ldr	r1, [pc, #668]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 80058ae:	2316      	movs	r3, #22
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	4403      	add	r3, r0
 80058b6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80058ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058be:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80058c2:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 80058c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058ca:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80058ce:	781a      	ldrb	r2, [r3, #0]
 80058d0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80058d4:	1c59      	adds	r1, r3, #1
 80058d6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80058da:	4618      	mov	r0, r3
 80058dc:	499b      	ldr	r1, [pc, #620]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 80058de:	2316      	movs	r3, #22
 80058e0:	fb02 f303 	mul.w	r3, r2, r3
 80058e4:	4403      	add	r3, r0
 80058e6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80058ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058ee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80058f2:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 80058f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058fa:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80058fe:	781a      	ldrb	r2, [r3, #0]
 8005900:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005904:	1c59      	adds	r1, r3, #1
 8005906:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800590a:	4618      	mov	r0, r3
 800590c:	498f      	ldr	r1, [pc, #572]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 800590e:	2316      	movs	r3, #22
 8005910:	fb02 f303 	mul.w	r3, r2, r3
 8005914:	4403      	add	r3, r0
 8005916:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800591a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800591e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005922:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 8005926:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800592a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005934:	1c59      	adds	r1, r3, #1
 8005936:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800593a:	4618      	mov	r0, r3
 800593c:	4983      	ldr	r1, [pc, #524]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 800593e:	2316      	movs	r3, #22
 8005940:	fb02 f303 	mul.w	r3, r2, r3
 8005944:	4403      	add	r3, r0
 8005946:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800594a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800594e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005952:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 8005956:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800595a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800595e:	781a      	ldrb	r2, [r3, #0]
 8005960:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800596a:	4618      	mov	r0, r3
 800596c:	4977      	ldr	r1, [pc, #476]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 800596e:	2316      	movs	r3, #22
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	4403      	add	r3, r0
 8005976:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800597a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800597e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005982:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 8005986:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800598a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800599a:	4618      	mov	r0, r3
 800599c:	496b      	ldr	r1, [pc, #428]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 800599e:	2316      	movs	r3, #22
 80059a0:	fb02 f303 	mul.w	r3, r2, r3
 80059a4:	4403      	add	r3, r0
 80059a6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80059aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80059b2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 80059b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059ba:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80059c4:	1c59      	adds	r1, r3, #1
 80059c6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80059ca:	4618      	mov	r0, r3
 80059cc:	495f      	ldr	r1, [pc, #380]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 80059ce:	2316      	movs	r3, #22
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	4403      	add	r3, r0
 80059d6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80059da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80059e2:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 80059e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059ea:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80059ee:	781a      	ldrb	r2, [r3, #0]
 80059f0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80059fa:	4618      	mov	r0, r3
 80059fc:	4953      	ldr	r1, [pc, #332]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 80059fe:	2316      	movs	r3, #22
 8005a00:	fb02 f303 	mul.w	r3, r2, r3
 8005a04:	4403      	add	r3, r0
 8005a06:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005a0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005a12:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 8005a16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a1a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005a1e:	781a      	ldrb	r2, [r3, #0]
 8005a20:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005a24:	1c59      	adds	r1, r3, #1
 8005a26:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	4947      	ldr	r1, [pc, #284]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 8005a2e:	2316      	movs	r3, #22
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	4403      	add	r3, r0
 8005a36:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005a3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005a42:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8005a46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a4a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005a54:	1c59      	adds	r1, r3, #1
 8005a56:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	493b      	ldr	r1, [pc, #236]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 8005a5e:	2316      	movs	r3, #22
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	4403      	add	r3, r0
 8005a66:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005a6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005a72:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8005a76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a7a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	492f      	ldr	r1, [pc, #188]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 8005a8e:	2316      	movs	r3, #22
 8005a90:	fb02 f303 	mul.w	r3, r2, r3
 8005a94:	4403      	add	r3, r0
 8005a96:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005a9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005aa2:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8005aa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005aaa:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005ab4:	1c59      	adds	r1, r3, #1
 8005ab6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005aba:	4618      	mov	r0, r3
 8005abc:	4923      	ldr	r1, [pc, #140]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 8005abe:	2316      	movs	r3, #22
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	4403      	add	r3, r0
 8005ac6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005aca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ace:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005ad2:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8005ad6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ada:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005aea:	4618      	mov	r0, r3
 8005aec:	4917      	ldr	r1, [pc, #92]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 8005aee:	2316      	movs	r3, #22
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	4403      	add	r3, r0
 8005af6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005afa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005afe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b02:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8005b06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b0a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005b0e:	781a      	ldrb	r2, [r3, #0]
 8005b10:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	490b      	ldr	r1, [pc, #44]	@ (8005b4c <bmi323_context_switch_selection+0x7a8>)
 8005b1e:	2316      	movs	r3, #22
 8005b20:	fb02 f303 	mul.w	r3, r2, r3
 8005b24:	4403      	add	r3, r0
 8005b26:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005b2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b2e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b32:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8005b36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b3a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005b44:	1c59      	adds	r1, r3, #1
 8005b46:	e003      	b.n	8005b50 <bmi323_context_switch_selection+0x7ac>
 8005b48:	24000044 	.word	0x24000044
 8005b4c:	24000080 	.word	0x24000080
 8005b50:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005b54:	4618      	mov	r0, r3
 8005b56:	49e1      	ldr	r1, [pc, #900]	@ (8005edc <bmi323_context_switch_selection+0xb38>)
 8005b58:	2316      	movs	r3, #22
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	4403      	add	r3, r0
 8005b60:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005b64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b6c:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8005b70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b74:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005b84:	4618      	mov	r0, r3
 8005b86:	49d5      	ldr	r1, [pc, #852]	@ (8005edc <bmi323_context_switch_selection+0xb38>)
 8005b88:	2316      	movs	r3, #22
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	4403      	add	r3, r0
 8005b90:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005b94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005b9c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8005ba0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ba4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005ba8:	781a      	ldrb	r2, [r3, #0]
 8005baa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005bae:	1c59      	adds	r1, r3, #1
 8005bb0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	49c9      	ldr	r1, [pc, #804]	@ (8005edc <bmi323_context_switch_selection+0xb38>)
 8005bb8:	2316      	movs	r3, #22
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	4403      	add	r3, r0
 8005bc0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005bc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005bc8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005bcc:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8005bd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005bd4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005be4:	4618      	mov	r0, r3
 8005be6:	49bd      	ldr	r1, [pc, #756]	@ (8005edc <bmi323_context_switch_selection+0xb38>)
 8005be8:	2316      	movs	r3, #22
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	4403      	add	r3, r0
 8005bf0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005bf4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005bf8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005bfc:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 8005c00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c04:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005c14:	4618      	mov	r0, r3
 8005c16:	49b1      	ldr	r1, [pc, #708]	@ (8005edc <bmi323_context_switch_selection+0xb38>)
 8005c18:	2316      	movs	r3, #22
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	4403      	add	r3, r0
 8005c20:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005c24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005c2c:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

        /* Set significant motion configuration */
        index = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8005c36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c3a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8005c44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c48:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005c58:	4618      	mov	r0, r3
 8005c5a:	49a1      	ldr	r1, [pc, #644]	@ (8005ee0 <bmi323_context_switch_selection+0xb3c>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	4403      	add	r3, r0
 8005c64:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005c68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005c70:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 8005c74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c78:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005c88:	4618      	mov	r0, r3
 8005c8a:	4995      	ldr	r1, [pc, #596]	@ (8005ee0 <bmi323_context_switch_selection+0xb3c>)
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	4403      	add	r3, r0
 8005c94:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005c98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005ca0:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 8005ca4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ca8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005cb8:	4618      	mov	r0, r3
 8005cba:	4989      	ldr	r1, [pc, #548]	@ (8005ee0 <bmi323_context_switch_selection+0xb3c>)
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4403      	add	r3, r0
 8005cc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005cd2:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8005cd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cda:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005cde:	781a      	ldrb	r2, [r3, #0]
 8005ce0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005cea:	4618      	mov	r0, r3
 8005cec:	497c      	ldr	r1, [pc, #496]	@ (8005ee0 <bmi323_context_switch_selection+0xb3c>)
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	4403      	add	r3, r0
 8005cf6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005cfa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cfe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005d02:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8005d06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d0a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005d14:	1c59      	adds	r1, r3, #1
 8005d16:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	4970      	ldr	r1, [pc, #448]	@ (8005ee0 <bmi323_context_switch_selection+0xb3c>)
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	4403      	add	r3, r0
 8005d26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005d34:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

        /* Set orientation configuration */
        index = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 8005d3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d42:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005d46:	2207      	movs	r2, #7
 8005d48:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 8005d4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d50:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005d60:	4618      	mov	r0, r3
 8005d62:	4960      	ldr	r1, [pc, #384]	@ (8005ee4 <bmi323_context_switch_selection+0xb40>)
 8005d64:	4613      	mov	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	4403      	add	r3, r0
 8005d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005d7a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 8005d7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d82:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005d92:	4618      	mov	r0, r3
 8005d94:	4953      	ldr	r1, [pc, #332]	@ (8005ee4 <bmi323_context_switch_selection+0xb40>)
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	4403      	add	r3, r0
 8005d9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005da8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005dac:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8005db0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005db4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	4947      	ldr	r1, [pc, #284]	@ (8005ee4 <bmi323_context_switch_selection+0xb40>)
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	4403      	add	r3, r0
 8005dd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005dda:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005dde:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 8005de2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005de6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005df0:	1c59      	adds	r1, r3, #1
 8005df2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005df6:	4618      	mov	r0, r3
 8005df8:	493a      	ldr	r1, [pc, #232]	@ (8005ee4 <bmi323_context_switch_selection+0xb40>)
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	4403      	add	r3, r0
 8005e02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005e10:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 8005e14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e18:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005e1c:	781a      	ldrb	r2, [r3, #0]
 8005e1e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005e28:	4618      	mov	r0, r3
 8005e2a:	492e      	ldr	r1, [pc, #184]	@ (8005ee4 <bmi323_context_switch_selection+0xb40>)
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	1a9b      	subs	r3, r3, r2
 8005e32:	4403      	add	r3, r0
 8005e34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005e42:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 8005e46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e4a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e54:	1c59      	adds	r1, r3, #1
 8005e56:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	4921      	ldr	r1, [pc, #132]	@ (8005ee4 <bmi323_context_switch_selection+0xb40>)
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	4403      	add	r3, r0
 8005e66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005e74:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8005e78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e7c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	4915      	ldr	r1, [pc, #84]	@ (8005ee4 <bmi323_context_switch_selection+0xb40>)
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	4403      	add	r3, r0
 8005e98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ea2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005ea6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 8005eaa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005eae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005eb2:	f107 0008 	add.w	r0, r7, #8
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	2106      	movs	r1, #6
 8005eba:	f7ff fa49 	bl	8005350 <bmi323_set_sensor_config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8005ec4:	e002      	b.n	8005ecc <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 8005ec6:	23f3      	movs	r3, #243	@ 0xf3
 8005ec8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    return rslt;
 8005ecc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	24000080 	.word	0x24000080
 8005ee0:	24000104 	.word	0x24000104
 8005ee4:	24000124 	.word	0x24000124

08005ee8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <null_ptr_check+0x26>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <null_ptr_check+0x26>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <null_ptr_check+0x26>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 8005f0e:	23ff      	movs	r3, #255	@ 0xff
 8005f10:	73fb      	strb	r3, [r7, #15]
 8005f12:	e001      	b.n	8005f18 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <accel_lsb_to_mg_8g>:

float accel_lsb_to_mg_4g(int16_t val) {
    return (val / 8192.0f) * GRAVITY_EARTH;
}

float accel_lsb_to_mg_8g(int16_t val) {
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	80fb      	strh	r3, [r7, #6]
    return (val / 4096.0f) * GRAVITY_EARTH;
 8005f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f3e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8005f5c <accel_lsb_to_mg_8g+0x34>
 8005f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f46:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005f60 <accel_lsb_to_mg_8g+0x38>
 8005f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	45800000 	.word	0x45800000
 8005f60:	411ce80a 	.word	0x411ce80a

08005f64 <gyro_lsb_to_dps_2000>:

float gyro_lsb_to_dps_1000(int16_t val) {
    return val / 32.768f;
}

float gyro_lsb_to_dps_2000(int16_t val) {
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	80fb      	strh	r3, [r7, #6]
    return val / 16.384f;
 8005f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f7a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005f94 <gyro_lsb_to_dps_2000+0x30>
 8005f7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f82:	eef0 7a66 	vmov.f32	s15, s13
}
 8005f86:	eeb0 0a67 	vmov.f32	s0, s15
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	4183126f 	.word	0x4183126f

08005f98 <bmi3_interface_init>:

int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]

		bmi->intf = BMI3_SPI_INTF;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	725a      	strb	r2, [r3, #9]
		bmi->read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005fdc <bmi3_interface_init+0x44>)
 8005fb2:	611a      	str	r2, [r3, #16]
		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <bmi3_interface_init+0x48>)
 8005fb8:	615a      	str	r2, [r3, #20]

	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <bmi3_interface_init+0x4c>)
 8005fbe:	605a      	str	r2, [r3, #4]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a09      	ldr	r2, [pc, #36]	@ (8005fe8 <bmi3_interface_init+0x50>)
 8005fc4:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	81da      	strh	r2, [r3, #14]

	return rslt;
 8005fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	0800637d 	.word	0x0800637d
 8005fe0:	080063fd 	.word	0x080063fd
 8005fe4:	240007fc 	.word	0x240007fc
 8005fe8:	08006345 	.word	0x08006345

08005fec <Init_BMI323>:

int8_t Init_BMI323()
{ // START INIT
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t chipid;


	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 8005ff6:	4b24      	ldr	r3, [pc, #144]	@ (8006088 <Init_BMI323+0x9c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff ffcb 	bl	8005f98 <bmi3_interface_init>
 8006002:	4603      	mov	r3, r0
 8006004:	71fb      	strb	r3, [r7, #7]

	bst_delay_us(100000, dev->intf_ptr);
 8006006:	4b20      	ldr	r3, [pc, #128]	@ (8006088 <Init_BMI323+0x9c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	4619      	mov	r1, r3
 800600e:	481f      	ldr	r0, [pc, #124]	@ (800608c <Init_BMI323+0xa0>)
 8006010:	f000 f998 	bl	8006344 <bst_delay_us>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 8006014:	4b1c      	ldr	r3, [pc, #112]	@ (8006088 <Init_BMI323+0x9c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff f969 	bl	80052f0 <bmi323_init>
 800601e:	4603      	mov	r3, r0
 8006020:	71fb      	strb	r3, [r7, #7]

	if (rslt != BMI3_OK)
 8006022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <Init_BMI323+0x50>
	{
		printf("bmi323_init() failed, error code: %d\r\n", rslt);
 800602a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602e:	4619      	mov	r1, r3
 8006030:	4817      	ldr	r0, [pc, #92]	@ (8006090 <Init_BMI323+0xa4>)
 8006032:	f00d fc73 	bl	801391c <iprintf>
		return rslt;
 8006036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603a:	e021      	b.n	8006080 <Init_BMI323+0x94>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 800603c:	4b12      	ldr	r3, [pc, #72]	@ (8006088 <Init_BMI323+0x9c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	1db9      	adds	r1, r7, #6
 8006042:	2201      	movs	r2, #1
 8006044:	2000      	movs	r0, #0
 8006046:	f7fb fe6a 	bl	8001d1e <bmi3_get_regs>
 800604a:	4603      	mov	r3, r0
 800604c:	71fb      	strb	r3, [r7, #7]
	if (rslt != BMI3_OK)
 800604e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <Init_BMI323+0x7c>
	{
		printf("read chip ID failed, error code: %d\r\n", rslt);
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	4619      	mov	r1, r3
 800605c:	480d      	ldr	r0, [pc, #52]	@ (8006094 <Init_BMI323+0xa8>)
 800605e:	f00d fc5d 	bl	801391c <iprintf>
		return rslt;
 8006062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006066:	e00b      	b.n	8006080 <Init_BMI323+0x94>
	//printf("Result of self-test error is %d\n", st_result_status.self_test_err_rslt);
	//printf("Result of ST_result is %d\n", st_result_status.self_test_rslt);
#endif

	#if defined(ACC_GYRO)
	Open_BMI323_ACC(dev);
 8006068:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <Init_BMI323+0x9c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 f813 	bl	8006098 <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 8006072:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <Init_BMI323+0x9c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f854 	bl	8006124 <Open_BMI323_GYRO>
	#endif

	//rslt += bmi3_perform_gyro_sc(BMI3_SC_SENSITIVITY_EN, 1, selfcal_rslt, dev);

	return rslt;
 800607c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	24000150 	.word	0x24000150
 800608c:	000186a0 	.word	0x000186a0
 8006090:	080171ac 	.word	0x080171ac
 8006094:	080171d4 	.word	0x080171d4

08006098 <Open_BMI323_ACC>:

int8_t Open_BMI323_ACC()
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08c      	sub	sp, #48	@ 0x30
 800609c:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 80060a4:	463b      	mov	r3, r7
 80060a6:	222e      	movs	r2, #46	@ 0x2e
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f00d fd9e 	bl	8013bec <memset>

	config.type = BMI3_ACCEL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 80060b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006120 <Open_BMI323_ACC+0x88>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	463b      	mov	r3, r7
 80060ba:	2101      	movs	r1, #1
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff f95c 	bl	800537a <bmi323_get_sensor_config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 80060c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d121      	bne.n	8006114 <Open_BMI323_ACC+0x7c>
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_LOW_PWR;
	#else
		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 80060d0:	2300      	movs	r3, #0
 80060d2:	70fb      	strb	r3, [r7, #3]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG64;
 80060d4:	2306      	movs	r3, #6
 80060d6:	71bb      	strb	r3, [r7, #6]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_HIGH_PERF;
 80060d8:	2307      	movs	r3, #7
 80060da:	713b      	strb	r3, [r7, #4]
	#endif


		config.cfg.acc.odr      = BMI3_ACC_ODR_100HZ;
 80060dc:	2308      	movs	r3, #8
 80060de:	70bb      	strb	r3, [r7, #2]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_8G;
 80060e0:	2302      	movs	r3, #2
 80060e2:	717b      	strb	r3, [r7, #5]

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80060e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006120 <Open_BMI323_ACC+0x88>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	463b      	mov	r3, r7
 80060ea:	2101      	movs	r1, #1
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff f92f 	bl	8005350 <bmi323_set_sensor_config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 80060f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <Open_BMI323_ACC+0x7c>
		else
		{
			//printf("Open ACC set successfully\r\n");

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 8006100:	4b07      	ldr	r3, [pc, #28]	@ (8006120 <Open_BMI323_ACC+0x88>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	463b      	mov	r3, r7
 8006106:	2101      	movs	r1, #1
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff f936 	bl	800537a <bmi323_get_sensor_config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//printf("avg_num = %d\r\n", config.cfg.acc.avg_num);
			}
		}
	}

	return rslt;
 8006114:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8006118:	4618      	mov	r0, r3
 800611a:	3730      	adds	r7, #48	@ 0x30
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	24000150 	.word	0x24000150

08006124 <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO()
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08c      	sub	sp, #48	@ 0x30
 8006128:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8006130:	463b      	mov	r3, r7
 8006132:	222e      	movs	r2, #46	@ 0x2e
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f00d fd58 	bl	8013bec <memset>

	config.type = BMI3_GYRO;
 800613c:	2301      	movs	r3, #1
 800613e:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8006140:	4b1a      	ldr	r3, [pc, #104]	@ (80061ac <Open_BMI323_GYRO+0x88>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	463b      	mov	r3, r7
 8006146:	2101      	movs	r1, #1
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f916 	bl	800537a <bmi323_get_sensor_config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 8006154:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006158:	2b00      	cmp	r3, #0
 800615a:	d121      	bne.n	80061a0 <Open_BMI323_GYRO+0x7c>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_100HZ;
 800615c:	2308      	movs	r3, #8
 800615e:	70bb      	strb	r3, [r7, #2]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 8006160:	2304      	movs	r3, #4
 8006162:	717b      	strb	r3, [r7, #5]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_HALF;
 8006164:	2300      	movs	r3, #0
 8006166:	70fb      	strb	r3, [r7, #3]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_HIGH_PERF;
 8006168:	2307      	movs	r3, #7
 800616a:	713b      	strb	r3, [r7, #4]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG64;
 800616c:	2306      	movs	r3, #6
 800616e:	71bb      	strb	r3, [r7, #6]
	#endif

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 8006170:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <Open_BMI323_GYRO+0x88>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	463b      	mov	r3, r7
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff f8e9 	bl	8005350 <bmi323_set_sensor_config>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 8006184:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <Open_BMI323_GYRO+0x7c>
		else
		{
			//printf("Open GYRO successfully\r\n");

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <Open_BMI323_GYRO+0x88>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	463b      	mov	r3, r7
 8006192:	2101      	movs	r1, #1
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff f8f0 	bl	800537a <bmi323_get_sensor_config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//printf("avg_num = %d\r\n", config.cfg.gyr.avg_num);
			}
		}
	}

	return rslt;
 80061a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3730      	adds	r7, #48	@ 0x30
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	24000150 	.word	0x24000150

080061b0 <bmi323_data_poll>:
	return rslt;
}


// Function to get and return the sensor data
IMU_6_Axis_Data bmi323_data_poll() {
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b094      	sub	sp, #80	@ 0x50
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
    IMU_6_Axis_Data imu_data = {0};
 80061b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	611a      	str	r2, [r3, #16]
 80061c8:	615a      	str	r2, [r3, #20]
    struct bmi3_sensor_data sensor_data[2];

    // Set the types of data we want to read
    sensor_data[0].type = BMI3_ACCEL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	733b      	strb	r3, [r7, #12]
    sensor_data[1].type = BMI3_GYRO;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3020 	strb.w	r3, [r7, #32]

    // Get the sensor data
    int8_t rslt = bmi3_get_sensor_data(sensor_data, 2, dev);
 80061d4:	4b32      	ldr	r3, [pc, #200]	@ (80062a0 <bmi323_data_poll+0xf0>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	2102      	movs	r1, #2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fc f90a 	bl	80023f8 <bmi3_get_sensor_data>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (rslt == BMI3_OK) {
 80061ea:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d148      	bne.n	8006284 <bmi323_data_poll+0xd4>
        // Use the appropriate conversion functions
        // Replace these with the actual functions based on your configuration

        // Fill accelerometer data
        if (sensor_data[0].type == BMI3_ACCEL) {
 80061f2:	7b3b      	ldrb	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d126      	bne.n	8006246 <bmi323_data_poll+0x96>
            imu_data.acceleration[0] = accel_lsb_to_mg_8g(sensor_data[0].sens_data.acc.x) / 10;  // Assuming ±4g range
 80061f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff fe93 	bl	8005f28 <accel_lsb_to_mg_8g>
 8006202:	eeb0 7a40 	vmov.f32	s14, s0
 8006206:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800620a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800620e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            imu_data.acceleration[1] = accel_lsb_to_mg_8g(sensor_data[0].sens_data.acc.y) / 10;  // Assuming ±4g range
 8006212:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fe86 	bl	8005f28 <accel_lsb_to_mg_8g>
 800621c:	eeb0 7a40 	vmov.f32	s14, s0
 8006220:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006228:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            imu_data.acceleration[2] = accel_lsb_to_mg_8g(sensor_data[0].sens_data.acc.z) / 10;  // Assuming ±4g range
 800622c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fe79 	bl	8005f28 <accel_lsb_to_mg_8g>
 8006236:	eeb0 7a40 	vmov.f32	s14, s0
 800623a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800623e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006242:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        }

        // Fill gyroscope data
        if (sensor_data[1].type == BMI3_GYRO) {
 8006246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d11a      	bne.n	8006284 <bmi323_data_poll+0xd4>
            imu_data.gyroscope[0] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.x);  // Assuming ±2000°/s range
 800624e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fe86 	bl	8005f64 <gyro_lsb_to_dps_2000>
 8006258:	eef0 7a40 	vmov.f32	s15, s0
 800625c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            imu_data.gyroscope[1] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.y);  // Assuming ±2000°/s range
 8006260:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fe7d 	bl	8005f64 <gyro_lsb_to_dps_2000>
 800626a:	eef0 7a40 	vmov.f32	s15, s0
 800626e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            imu_data.gyroscope[2] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.z);  // Assuming ±2000°/s range
 8006272:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fe74 	bl	8005f64 <gyro_lsb_to_dps_2000>
 800627c:	eef0 7a40 	vmov.f32	s15, s0
 8006280:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        }
    } else {
        //printf("Failed to get sensor data. Error code: %d\n", rslt);
    }

    return imu_data;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	461d      	mov	r5, r3
 8006288:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800628c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800628e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006294:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	3750      	adds	r7, #80	@ 0x50
 800629c:	46bd      	mov	sp, r7
 800629e:	bdb0      	pop	{r4, r5, r7, pc}
 80062a0:	24000150 	.word	0x24000150

080062a4 <bmi323_print_sensor_data>:


void bmi323_print_sensor_data(IMU_6_Axis_Data *data){
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af04      	add	r7, sp, #16
 80062aa:	6078      	str	r0, [r7, #4]
	printf("BMI323 IMU: \n");
 80062ac:	481f      	ldr	r0, [pc, #124]	@ (800632c <bmi323_print_sensor_data+0x88>)
 80062ae:	f00d fb9d 	bl	80139ec <puts>
    printf("Acceleration: -> ");
 80062b2:	481f      	ldr	r0, [pc, #124]	@ (8006330 <bmi323_print_sensor_data+0x8c>)
 80062b4:	f00d fb32 	bl	801391c <iprintf>
    printf("X: %f m/s^2, Y: %f m/s^2, Z: %f m/s^2\n", data->acceleration[0], data->acceleration[1], data->acceleration[2]);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	edd3 7a00 	vldr	s15, [r3]
 80062be:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80062c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80062d2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80062d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80062da:	ed8d 7b00 	vstr	d7, [sp]
 80062de:	ec53 2b15 	vmov	r2, r3, d5
 80062e2:	4814      	ldr	r0, [pc, #80]	@ (8006334 <bmi323_print_sensor_data+0x90>)
 80062e4:	f00d fb1a 	bl	801391c <iprintf>
    printf("Angular Rate -> ");
 80062e8:	4813      	ldr	r0, [pc, #76]	@ (8006338 <bmi323_print_sensor_data+0x94>)
 80062ea:	f00d fb17 	bl	801391c <iprintf>
    printf("X: %f dps, Y: %f dps, Z: %f dps\n", data->gyroscope[0], data->gyroscope[1], data->gyroscope[2]);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80062f4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80062fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	edd3 6a05 	vldr	s13, [r3, #20]
 8006308:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800630c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006310:	ed8d 7b00 	vstr	d7, [sp]
 8006314:	ec53 2b15 	vmov	r2, r3, d5
 8006318:	4808      	ldr	r0, [pc, #32]	@ (800633c <bmi323_print_sensor_data+0x98>)
 800631a:	f00d faff 	bl	801391c <iprintf>
    printf("----- \n");
 800631e:	4808      	ldr	r0, [pc, #32]	@ (8006340 <bmi323_print_sensor_data+0x9c>)
 8006320:	f00d fb64 	bl	80139ec <puts>
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	080171fc 	.word	0x080171fc
 8006330:	0801720c 	.word	0x0801720c
 8006334:	08017220 	.word	0x08017220
 8006338:	08017248 	.word	0x08017248
 800633c:	0801725c 	.word	0x0801725c
 8006340:	08017280 	.word	0x08017280

08006344 <bst_delay_us>:

extern SPI_HandleTypeDef hspi1;


void bst_delay_us(uint32_t period, void *intf_ptr)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
//	HAL_Delay(period/1000);
	uint32_t i;

	while(period--)
 800634e:	e008      	b.n	8006362 <bst_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e002      	b.n	800635c <bst_delay_us+0x18>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b53      	cmp	r3, #83	@ 0x53
 8006360:	d9f9      	bls.n	8006356 <bst_delay_us+0x12>
	while(period--)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f1      	bne.n	8006350 <bst_delay_us+0xc>
		{
			;
		}
	}
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <SensorAPI_SPIx_Read>:

#if defined(USE_BOSCH_SENSOR_API)


int8_t SensorAPI_SPIx_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af02      	add	r7, sp, #8
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006392:	b2da      	uxtb	r2, r3
 8006394:	4b14      	ldr	r3, [pc, #80]	@ (80063e8 <SensorAPI_SPIx_Read+0x6c>)
 8006396:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8006398:	2200      	movs	r2, #0
 800639a:	2110      	movs	r1, #16
 800639c:	4813      	ldr	r0, [pc, #76]	@ (80063ec <SensorAPI_SPIx_Read+0x70>)
 800639e:	f002 fb3d 	bl	8008a1c <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&hspi1, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3301      	adds	r3, #1
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063ae:	9200      	str	r2, [sp, #0]
 80063b0:	4a0f      	ldr	r2, [pc, #60]	@ (80063f0 <SensorAPI_SPIx_Read+0x74>)
 80063b2:	490d      	ldr	r1, [pc, #52]	@ (80063e8 <SensorAPI_SPIx_Read+0x6c>)
 80063b4:	480f      	ldr	r0, [pc, #60]	@ (80063f4 <SensorAPI_SPIx_Read+0x78>)
 80063b6:	f008 fdef 	bl	800ef98 <HAL_SPI_TransmitReceive>
    while(hspi1.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 80063ba:	bf00      	nop
 80063bc:	4b0d      	ldr	r3, [pc, #52]	@ (80063f4 <SensorAPI_SPIx_Read+0x78>)
 80063be:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d0f9      	beq.n	80063bc <SensorAPI_SPIx_Read+0x40>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 80063c8:	2201      	movs	r2, #1
 80063ca:	2110      	movs	r1, #16
 80063cc:	4807      	ldr	r0, [pc, #28]	@ (80063ec <SensorAPI_SPIx_Read+0x70>)
 80063ce:	f002 fb25 	bl	8008a1c <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 80063d2:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <SensorAPI_SPIx_Read+0x7c>)
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4619      	mov	r1, r3
 80063d8:	68b8      	ldr	r0, [r7, #8]
 80063da:	f00d fc86 	bl	8013cea <memcpy>

    return 0;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	24000800 	.word	0x24000800
 80063ec:	58020000 	.word	0x58020000
 80063f0:	24000a00 	.word	0x24000a00
 80063f4:	240015a8 	.word	0x240015a8
 80063f8:	24000a01 	.word	0x24000a01

080063fc <SensorAPI_SPIx_Write>:

int8_t SensorAPI_SPIx_Write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006412:	b2da      	uxtb	r2, r3
 8006414:	4b13      	ldr	r3, [pc, #76]	@ (8006464 <SensorAPI_SPIx_Write+0x68>)
 8006416:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	4812      	ldr	r0, [pc, #72]	@ (8006468 <SensorAPI_SPIx_Write+0x6c>)
 800641e:	f00d fc64 	bl	8013cea <memcpy>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8006422:	2200      	movs	r2, #0
 8006424:	2110      	movs	r1, #16
 8006426:	4811      	ldr	r0, [pc, #68]	@ (800646c <SensorAPI_SPIx_Write+0x70>)
 8006428:	f002 faf8 	bl	8008a1c <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&hspi1, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	b29b      	uxth	r3, r3
 8006430:	3301      	adds	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006438:	490a      	ldr	r1, [pc, #40]	@ (8006464 <SensorAPI_SPIx_Write+0x68>)
 800643a:	480d      	ldr	r0, [pc, #52]	@ (8006470 <SensorAPI_SPIx_Write+0x74>)
 800643c:	f008 f94c 	bl	800e6d8 <HAL_SPI_Transmit>
    while(hspi1.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8006440:	bf00      	nop
 8006442:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <SensorAPI_SPIx_Write+0x74>)
 8006444:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d0f9      	beq.n	8006442 <SensorAPI_SPIx_Write+0x46>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 800644e:	2201      	movs	r2, #1
 8006450:	2110      	movs	r1, #16
 8006452:	4806      	ldr	r0, [pc, #24]	@ (800646c <SensorAPI_SPIx_Write+0x70>)
 8006454:	f002 fae2 	bl	8008a1c <HAL_GPIO_WritePin>

    return 0;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	24000800 	.word	0x24000800
 8006468:	24000801 	.word	0x24000801
 800646c:	58020000 	.word	0x58020000
 8006470:	240015a8 	.word	0x240015a8

08006474 <bno055_init>:
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	23ff      	movs	r3, #255	@ 0xff
 800647e:	73fb      	strb	r3, [r7, #15]
 8006480:	2300      	movs	r3, #0
 8006482:	73bb      	strb	r3, [r7, #14]
 8006484:	2300      	movs	r3, #0
 8006486:	737b      	strb	r3, [r7, #13]
 8006488:	2300      	movs	r3, #0
 800648a:	813b      	strh	r3, [r7, #8]
 800648c:	4a58      	ldr	r2, [pc, #352]	@ (80065f0 <bno055_init+0x17c>)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b57      	ldr	r3, [pc, #348]	@ (80065f0 <bno055_init+0x17c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68dc      	ldr	r4, [r3, #12]
 8006498:	4b55      	ldr	r3, [pc, #340]	@ (80065f0 <bno055_init+0x17c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	7a58      	ldrb	r0, [r3, #9]
 800649e:	f107 020d 	add.w	r2, r7, #13
 80064a2:	2301      	movs	r3, #1
 80064a4:	2107      	movs	r1, #7
 80064a6:	47a0      	blx	r4
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
 80064ac:	4b50      	ldr	r3, [pc, #320]	@ (80065f0 <bno055_init+0x17c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691c      	ldr	r4, [r3, #16]
 80064b2:	4b4f      	ldr	r3, [pc, #316]	@ (80065f0 <bno055_init+0x17c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	7a58      	ldrb	r0, [r3, #9]
 80064b8:	f107 020e 	add.w	r2, r7, #14
 80064bc:	2301      	movs	r3, #1
 80064be:	2100      	movs	r1, #0
 80064c0:	47a0      	blx	r4
 80064c2:	4603      	mov	r3, r0
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	4413      	add	r3, r2
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	73fb      	strb	r3, [r7, #15]
 80064ce:	4b48      	ldr	r3, [pc, #288]	@ (80065f0 <bno055_init+0x17c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	7bba      	ldrb	r2, [r7, #14]
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	4b46      	ldr	r3, [pc, #280]	@ (80065f0 <bno055_init+0x17c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691c      	ldr	r4, [r3, #16]
 80064dc:	4b44      	ldr	r3, [pc, #272]	@ (80065f0 <bno055_init+0x17c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	7a58      	ldrb	r0, [r3, #9]
 80064e2:	f107 020e 	add.w	r2, r7, #14
 80064e6:	2301      	movs	r3, #1
 80064e8:	2101      	movs	r1, #1
 80064ea:	47a0      	blx	r4
 80064ec:	4603      	mov	r3, r0
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	4413      	add	r3, r2
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	4b3d      	ldr	r3, [pc, #244]	@ (80065f0 <bno055_init+0x17c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	7bba      	ldrb	r2, [r7, #14]
 80064fe:	715a      	strb	r2, [r3, #5]
 8006500:	4b3b      	ldr	r3, [pc, #236]	@ (80065f0 <bno055_init+0x17c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691c      	ldr	r4, [r3, #16]
 8006506:	4b3a      	ldr	r3, [pc, #232]	@ (80065f0 <bno055_init+0x17c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	7a58      	ldrb	r0, [r3, #9]
 800650c:	f107 020e 	add.w	r2, r7, #14
 8006510:	2301      	movs	r3, #1
 8006512:	2102      	movs	r1, #2
 8006514:	47a0      	blx	r4
 8006516:	4603      	mov	r3, r0
 8006518:	b2da      	uxtb	r2, r3
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	4413      	add	r3, r2
 800651e:	b2db      	uxtb	r3, r3
 8006520:	73fb      	strb	r3, [r7, #15]
 8006522:	4b33      	ldr	r3, [pc, #204]	@ (80065f0 <bno055_init+0x17c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	7bba      	ldrb	r2, [r7, #14]
 8006528:	719a      	strb	r2, [r3, #6]
 800652a:	4b31      	ldr	r3, [pc, #196]	@ (80065f0 <bno055_init+0x17c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691c      	ldr	r4, [r3, #16]
 8006530:	4b2f      	ldr	r3, [pc, #188]	@ (80065f0 <bno055_init+0x17c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	7a58      	ldrb	r0, [r3, #9]
 8006536:	f107 020e 	add.w	r2, r7, #14
 800653a:	2301      	movs	r3, #1
 800653c:	2103      	movs	r1, #3
 800653e:	47a0      	blx	r4
 8006540:	4603      	mov	r3, r0
 8006542:	b2da      	uxtb	r2, r3
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	4413      	add	r3, r2
 8006548:	b2db      	uxtb	r3, r3
 800654a:	73fb      	strb	r3, [r7, #15]
 800654c:	4b28      	ldr	r3, [pc, #160]	@ (80065f0 <bno055_init+0x17c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	7bba      	ldrb	r2, [r7, #14]
 8006552:	71da      	strb	r2, [r3, #7]
 8006554:	4b26      	ldr	r3, [pc, #152]	@ (80065f0 <bno055_init+0x17c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691c      	ldr	r4, [r3, #16]
 800655a:	4b25      	ldr	r3, [pc, #148]	@ (80065f0 <bno055_init+0x17c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	7a58      	ldrb	r0, [r3, #9]
 8006560:	f107 020e 	add.w	r2, r7, #14
 8006564:	2301      	movs	r3, #1
 8006566:	2106      	movs	r1, #6
 8006568:	47a0      	blx	r4
 800656a:	4603      	mov	r3, r0
 800656c:	b2da      	uxtb	r2, r3
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	4413      	add	r3, r2
 8006572:	b2db      	uxtb	r3, r3
 8006574:	73fb      	strb	r3, [r7, #15]
 8006576:	4b1e      	ldr	r3, [pc, #120]	@ (80065f0 <bno055_init+0x17c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	7bba      	ldrb	r2, [r7, #14]
 800657c:	721a      	strb	r2, [r3, #8]
 800657e:	4b1c      	ldr	r3, [pc, #112]	@ (80065f0 <bno055_init+0x17c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691c      	ldr	r4, [r3, #16]
 8006584:	4b1a      	ldr	r3, [pc, #104]	@ (80065f0 <bno055_init+0x17c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	7a58      	ldrb	r0, [r3, #9]
 800658a:	f107 0208 	add.w	r2, r7, #8
 800658e:	2302      	movs	r3, #2
 8006590:	2104      	movs	r1, #4
 8006592:	47a0      	blx	r4
 8006594:	4603      	mov	r3, r0
 8006596:	b2da      	uxtb	r2, r3
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	4413      	add	r3, r2
 800659c:	b2db      	uxtb	r3, r3
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	7a3b      	ldrb	r3, [r7, #8]
 80065a2:	723b      	strb	r3, [r7, #8]
 80065a4:	7a7b      	ldrb	r3, [r7, #9]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	7a3b      	ldrb	r3, [r7, #8]
 80065ac:	4619      	mov	r1, r3
 80065ae:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <bno055_init+0x17c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	b292      	uxth	r2, r2
 80065b6:	805a      	strh	r2, [r3, #2]
 80065b8:	4b0d      	ldr	r3, [pc, #52]	@ (80065f0 <bno055_init+0x17c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691c      	ldr	r4, [r3, #16]
 80065be:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <bno055_init+0x17c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	7a58      	ldrb	r0, [r3, #9]
 80065c4:	f107 020e 	add.w	r2, r7, #14
 80065c8:	2301      	movs	r3, #1
 80065ca:	2107      	movs	r1, #7
 80065cc:	47a0      	blx	r4
 80065ce:	4603      	mov	r3, r0
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	4413      	add	r3, r2
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	73fb      	strb	r3, [r7, #15]
 80065da:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <bno055_init+0x17c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	7bba      	ldrb	r2, [r7, #14]
 80065e0:	711a      	strb	r2, [r3, #4]
 80065e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd90      	pop	{r4, r7, pc}
 80065ee:	bf00      	nop
 80065f0:	24001200 	.word	0x24001200

080065f4 <bno055_write_register>:
 80065f4:	b590      	push	{r4, r7, lr}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
 8006600:	4613      	mov	r3, r2
 8006602:	71bb      	strb	r3, [r7, #6]
 8006604:	23ff      	movs	r3, #255	@ 0xff
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	4b0c      	ldr	r3, [pc, #48]	@ (800663c <bno055_write_register+0x48>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d102      	bne.n	8006616 <bno055_write_register+0x22>
 8006610:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8006614:	e00d      	b.n	8006632 <bno055_write_register+0x3e>
 8006616:	4b09      	ldr	r3, [pc, #36]	@ (800663c <bno055_write_register+0x48>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68dc      	ldr	r4, [r3, #12]
 800661c:	4b07      	ldr	r3, [pc, #28]	@ (800663c <bno055_write_register+0x48>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	7a58      	ldrb	r0, [r3, #9]
 8006622:	79bb      	ldrb	r3, [r7, #6]
 8006624:	79f9      	ldrb	r1, [r7, #7]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	47a0      	blx	r4
 800662a:	4603      	mov	r3, r0
 800662c:	73fb      	strb	r3, [r7, #15]
 800662e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	bd90      	pop	{r4, r7, pc}
 800663a:	bf00      	nop
 800663c:	24001200 	.word	0x24001200

08006640 <bno055_write_page_id>:
 8006640:	b590      	push	{r4, r7, lr}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
 800664a:	23ff      	movs	r3, #255	@ 0xff
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	2300      	movs	r3, #0
 8006650:	73bb      	strb	r3, [r7, #14]
 8006652:	4b1e      	ldr	r3, [pc, #120]	@ (80066cc <bno055_write_page_id+0x8c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <bno055_write_page_id+0x20>
 800665a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800665e:	e030      	b.n	80066c2 <bno055_write_page_id+0x82>
 8006660:	4b1a      	ldr	r3, [pc, #104]	@ (80066cc <bno055_write_page_id+0x8c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691c      	ldr	r4, [r3, #16]
 8006666:	4b19      	ldr	r3, [pc, #100]	@ (80066cc <bno055_write_page_id+0x8c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	7a58      	ldrb	r0, [r3, #9]
 800666c:	f107 020e 	add.w	r2, r7, #14
 8006670:	2301      	movs	r3, #1
 8006672:	2107      	movs	r1, #7
 8006674:	47a0      	blx	r4
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
 800667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d11b      	bne.n	80066ba <bno055_write_page_id+0x7a>
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	73bb      	strb	r3, [r7, #14]
 8006686:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <bno055_write_page_id+0x8c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68dc      	ldr	r4, [r3, #12]
 800668c:	4b0f      	ldr	r3, [pc, #60]	@ (80066cc <bno055_write_page_id+0x8c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	7a58      	ldrb	r0, [r3, #9]
 8006692:	f107 020e 	add.w	r2, r7, #14
 8006696:	2301      	movs	r3, #1
 8006698:	2107      	movs	r1, #7
 800669a:	47a0      	blx	r4
 800669c:	4603      	mov	r3, r0
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	4413      	add	r3, r2
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	73fb      	strb	r3, [r7, #15]
 80066a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d106      	bne.n	80066be <bno055_write_page_id+0x7e>
 80066b0:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <bno055_write_page_id+0x8c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	79fa      	ldrb	r2, [r7, #7]
 80066b6:	711a      	strb	r2, [r3, #4]
 80066b8:	e001      	b.n	80066be <bno055_write_page_id+0x7e>
 80066ba:	23ff      	movs	r3, #255	@ 0xff
 80066bc:	73fb      	strb	r3, [r7, #15]
 80066be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}
 80066ca:	bf00      	nop
 80066cc:	24001200 	.word	0x24001200

080066d0 <bno055_get_operation_mode>:
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	23ff      	movs	r3, #255	@ 0xff
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	2300      	movs	r3, #0
 80066de:	737b      	strb	r3, [r7, #13]
 80066e0:	23ff      	movs	r3, #255	@ 0xff
 80066e2:	73bb      	strb	r3, [r7, #14]
 80066e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006750 <bno055_get_operation_mode+0x80>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <bno055_get_operation_mode+0x22>
 80066ec:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80066f0:	e02a      	b.n	8006748 <bno055_get_operation_mode+0x78>
 80066f2:	4b17      	ldr	r3, [pc, #92]	@ (8006750 <bno055_get_operation_mode+0x80>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	791b      	ldrb	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <bno055_get_operation_mode+0x36>
 80066fc:	2000      	movs	r0, #0
 80066fe:	f7ff ff9f 	bl	8006640 <bno055_write_page_id>
 8006702:	4603      	mov	r3, r0
 8006704:	73bb      	strb	r3, [r7, #14]
 8006706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <bno055_get_operation_mode+0x48>
 800670e:	4b10      	ldr	r3, [pc, #64]	@ (8006750 <bno055_get_operation_mode+0x80>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	791b      	ldrb	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d113      	bne.n	8006740 <bno055_get_operation_mode+0x70>
 8006718:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <bno055_get_operation_mode+0x80>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691c      	ldr	r4, [r3, #16]
 800671e:	4b0c      	ldr	r3, [pc, #48]	@ (8006750 <bno055_get_operation_mode+0x80>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	7a58      	ldrb	r0, [r3, #9]
 8006724:	f107 020d 	add.w	r2, r7, #13
 8006728:	2301      	movs	r3, #1
 800672a:	213d      	movs	r1, #61	@ 0x3d
 800672c:	47a0      	blx	r4
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]
 8006732:	7b7b      	ldrb	r3, [r7, #13]
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	b2da      	uxtb	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e001      	b.n	8006744 <bno055_get_operation_mode+0x74>
 8006740:	23ff      	movs	r3, #255	@ 0xff
 8006742:	73fb      	strb	r3, [r7, #15]
 8006744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}
 8006750:	24001200 	.word	0x24001200

08006754 <bno055_set_operation_mode>:
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	71fb      	strb	r3, [r7, #7]
 800675e:	23ff      	movs	r3, #255	@ 0xff
 8006760:	73fb      	strb	r3, [r7, #15]
 8006762:	2300      	movs	r3, #0
 8006764:	737b      	strb	r3, [r7, #13]
 8006766:	2300      	movs	r3, #0
 8006768:	733b      	strb	r3, [r7, #12]
 800676a:	23ff      	movs	r3, #255	@ 0xff
 800676c:	73bb      	strb	r3, [r7, #14]
 800676e:	4b5c      	ldr	r3, [pc, #368]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <bno055_set_operation_mode+0x28>
 8006776:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800677a:	e0ac      	b.n	80068d6 <bno055_set_operation_mode+0x182>
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff ffa5 	bl	80066d0 <bno055_get_operation_mode>
 8006786:	4603      	mov	r3, r0
 8006788:	73bb      	strb	r3, [r7, #14]
 800678a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 809d 	bne.w	80068ce <bno055_set_operation_mode+0x17a>
 8006794:	7b3b      	ldrb	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d137      	bne.n	800680a <bno055_set_operation_mode+0xb6>
 800679a:	4b51      	ldr	r3, [pc, #324]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691c      	ldr	r4, [r3, #16]
 80067a0:	4b4f      	ldr	r3, [pc, #316]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	7a58      	ldrb	r0, [r3, #9]
 80067a6:	f107 020d 	add.w	r2, r7, #13
 80067aa:	2301      	movs	r3, #1
 80067ac:	213d      	movs	r1, #61	@ 0x3d
 80067ae:	47a0      	blx	r4
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 808a 	bne.w	80068d2 <bno055_set_operation_mode+0x17e>
 80067be:	7b7b      	ldrb	r3, [r7, #13]
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	f023 030f 	bic.w	r3, r3, #15
 80067c6:	b25a      	sxtb	r2, r3
 80067c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	b25b      	sxtb	r3, r3
 80067d2:	4313      	orrs	r3, r2
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	737b      	strb	r3, [r7, #13]
 80067da:	4b41      	ldr	r3, [pc, #260]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68dc      	ldr	r4, [r3, #12]
 80067e0:	4b3f      	ldr	r3, [pc, #252]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	7a58      	ldrb	r0, [r3, #9]
 80067e6:	f107 020d 	add.w	r2, r7, #13
 80067ea:	2301      	movs	r3, #1
 80067ec:	213d      	movs	r1, #61	@ 0x3d
 80067ee:	47a0      	blx	r4
 80067f0:	4603      	mov	r3, r0
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	4413      	add	r3, r2
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	4b38      	ldr	r3, [pc, #224]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8006806:	4798      	blx	r3
 8006808:	e063      	b.n	80068d2 <bno055_set_operation_mode+0x17e>
 800680a:	4b35      	ldr	r3, [pc, #212]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691c      	ldr	r4, [r3, #16]
 8006810:	4b33      	ldr	r3, [pc, #204]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	7a58      	ldrb	r0, [r3, #9]
 8006816:	f107 020d 	add.w	r2, r7, #13
 800681a:	2301      	movs	r3, #1
 800681c:	213d      	movs	r1, #61	@ 0x3d
 800681e:	47a0      	blx	r4
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
 8006824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d116      	bne.n	800685a <bno055_set_operation_mode+0x106>
 800682c:	7b7b      	ldrb	r3, [r7, #13]
 800682e:	f023 030f 	bic.w	r3, r3, #15
 8006832:	b2db      	uxtb	r3, r3
 8006834:	737b      	strb	r3, [r7, #13]
 8006836:	f107 030d 	add.w	r3, r7, #13
 800683a:	2201      	movs	r2, #1
 800683c:	4619      	mov	r1, r3
 800683e:	203d      	movs	r0, #61	@ 0x3d
 8006840:	f7ff fed8 	bl	80065f4 <bno055_write_register>
 8006844:	4603      	mov	r3, r0
 8006846:	b2da      	uxtb	r2, r3
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	4413      	add	r3, r2
 800684c:	b2db      	uxtb	r3, r3
 800684e:	73fb      	strb	r3, [r7, #15]
 8006850:	4b23      	ldr	r3, [pc, #140]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	2014      	movs	r0, #20
 8006858:	4798      	blx	r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d038      	beq.n	80068d2 <bno055_set_operation_mode+0x17e>
 8006860:	4b1f      	ldr	r3, [pc, #124]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691c      	ldr	r4, [r3, #16]
 8006866:	4b1e      	ldr	r3, [pc, #120]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	7a58      	ldrb	r0, [r3, #9]
 800686c:	f107 020d 	add.w	r2, r7, #13
 8006870:	2301      	movs	r3, #1
 8006872:	213d      	movs	r1, #61	@ 0x3d
 8006874:	47a0      	blx	r4
 8006876:	4603      	mov	r3, r0
 8006878:	73fb      	strb	r3, [r7, #15]
 800687a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d127      	bne.n	80068d2 <bno055_set_operation_mode+0x17e>
 8006882:	7b7b      	ldrb	r3, [r7, #13]
 8006884:	b25b      	sxtb	r3, r3
 8006886:	f023 030f 	bic.w	r3, r3, #15
 800688a:	b25a      	sxtb	r2, r3
 800688c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	b25b      	sxtb	r3, r3
 8006896:	4313      	orrs	r3, r2
 8006898:	b25b      	sxtb	r3, r3
 800689a:	b2db      	uxtb	r3, r3
 800689c:	737b      	strb	r3, [r7, #13]
 800689e:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68dc      	ldr	r4, [r3, #12]
 80068a4:	4b0e      	ldr	r3, [pc, #56]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	7a58      	ldrb	r0, [r3, #9]
 80068aa:	f107 020d 	add.w	r2, r7, #13
 80068ae:	2301      	movs	r3, #1
 80068b0:	213d      	movs	r1, #61	@ 0x3d
 80068b2:	47a0      	blx	r4
 80068b4:	4603      	mov	r3, r0
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	4413      	add	r3, r2
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	4b07      	ldr	r3, [pc, #28]	@ (80068e0 <bno055_set_operation_mode+0x18c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80068ca:	4798      	blx	r3
 80068cc:	e001      	b.n	80068d2 <bno055_set_operation_mode+0x17e>
 80068ce:	23ff      	movs	r3, #255	@ 0xff
 80068d0:	73fb      	strb	r3, [r7, #15]
 80068d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd90      	pop	{r4, r7, pc}
 80068de:	bf00      	nop
 80068e0:	24001200 	.word	0x24001200

080068e4 <bno055_set_power_mode>:
 80068e4:	b590      	push	{r4, r7, lr}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	71fb      	strb	r3, [r7, #7]
 80068ee:	23ff      	movs	r3, #255	@ 0xff
 80068f0:	73fb      	strb	r3, [r7, #15]
 80068f2:	2300      	movs	r3, #0
 80068f4:	737b      	strb	r3, [r7, #13]
 80068f6:	2300      	movs	r3, #0
 80068f8:	733b      	strb	r3, [r7, #12]
 80068fa:	23ff      	movs	r3, #255	@ 0xff
 80068fc:	73bb      	strb	r3, [r7, #14]
 80068fe:	4b35      	ldr	r3, [pc, #212]	@ (80069d4 <bno055_set_power_mode+0xf0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <bno055_set_power_mode+0x28>
 8006906:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800690a:	e05f      	b.n	80069cc <bno055_set_power_mode+0xe8>
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fedd 	bl	80066d0 <bno055_get_operation_mode>
 8006916:	4603      	mov	r3, r0
 8006918:	73bb      	strb	r3, [r7, #14]
 800691a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d143      	bne.n	80069aa <bno055_set_power_mode+0xc6>
 8006922:	7b3b      	ldrb	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <bno055_set_power_mode+0x56>
 8006928:	2000      	movs	r0, #0
 800692a:	f7ff ff13 	bl	8006754 <bno055_set_operation_mode>
 800692e:	4603      	mov	r3, r0
 8006930:	b2da      	uxtb	r2, r3
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	4413      	add	r3, r2
 8006936:	b2db      	uxtb	r3, r3
 8006938:	73bb      	strb	r3, [r7, #14]
 800693a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d130      	bne.n	80069a4 <bno055_set_power_mode+0xc0>
 8006942:	4b24      	ldr	r3, [pc, #144]	@ (80069d4 <bno055_set_power_mode+0xf0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691c      	ldr	r4, [r3, #16]
 8006948:	4b22      	ldr	r3, [pc, #136]	@ (80069d4 <bno055_set_power_mode+0xf0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	7a58      	ldrb	r0, [r3, #9]
 800694e:	f107 020d 	add.w	r2, r7, #13
 8006952:	2301      	movs	r3, #1
 8006954:	213e      	movs	r1, #62	@ 0x3e
 8006956:	47a0      	blx	r4
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d124      	bne.n	80069ae <bno055_set_power_mode+0xca>
 8006964:	7b7b      	ldrb	r3, [r7, #13]
 8006966:	b25b      	sxtb	r3, r3
 8006968:	f023 0303 	bic.w	r3, r3, #3
 800696c:	b25a      	sxtb	r2, r3
 800696e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	b25b      	sxtb	r3, r3
 8006978:	4313      	orrs	r3, r2
 800697a:	b25b      	sxtb	r3, r3
 800697c:	b2db      	uxtb	r3, r3
 800697e:	737b      	strb	r3, [r7, #13]
 8006980:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <bno055_set_power_mode+0xf0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68dc      	ldr	r4, [r3, #12]
 8006986:	4b13      	ldr	r3, [pc, #76]	@ (80069d4 <bno055_set_power_mode+0xf0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	7a58      	ldrb	r0, [r3, #9]
 800698c:	f107 020d 	add.w	r2, r7, #13
 8006990:	2301      	movs	r3, #1
 8006992:	213e      	movs	r1, #62	@ 0x3e
 8006994:	47a0      	blx	r4
 8006996:	4603      	mov	r3, r0
 8006998:	b2da      	uxtb	r2, r3
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4413      	add	r3, r2
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	73fb      	strb	r3, [r7, #15]
 80069a2:	e004      	b.n	80069ae <bno055_set_power_mode+0xca>
 80069a4:	23ff      	movs	r3, #255	@ 0xff
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e001      	b.n	80069ae <bno055_set_power_mode+0xca>
 80069aa:	23ff      	movs	r3, #255	@ 0xff
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	7b3b      	ldrb	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <bno055_set_power_mode+0xe4>
 80069b4:	7b3b      	ldrb	r3, [r7, #12]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fecc 	bl	8006754 <bno055_set_operation_mode>
 80069bc:	4603      	mov	r3, r0
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	4413      	add	r3, r2
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	73fb      	strb	r3, [r7, #15]
 80069c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd90      	pop	{r4, r7, pc}
 80069d4:	24001200 	.word	0x24001200

080069d8 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af02      	add	r7, sp, #8
 80069de:	603a      	str	r2, [r7, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
 80069e6:	460b      	mov	r3, r1
 80069e8:	71bb      	strb	r3, [r7, #6]
 80069ea:	4613      	mov	r3, r2
 80069ec:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 80069f6:	1dba      	adds	r2, r7, #6
 80069f8:	89f9      	ldrh	r1, [r7, #14]
 80069fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2301      	movs	r3, #1
 8006a02:	4809      	ldr	r0, [pc, #36]	@ (8006a28 <bno055_platform_read+0x50>)
 8006a04:	f002 f8c0 	bl	8008b88 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8006a08:	797b      	ldrb	r3, [r7, #5]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	89f9      	ldrh	r1, [r7, #14]
 8006a0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a12:	9200      	str	r2, [sp, #0]
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	4804      	ldr	r0, [pc, #16]	@ (8006a28 <bno055_platform_read+0x50>)
 8006a18:	f002 f9ce 	bl	8008db8 <HAL_I2C_Master_Receive>
    return 0;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	24001484 	.word	0x24001484

08006a2c <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	603a      	str	r2, [r7, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	71bb      	strb	r3, [r7, #6]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 8006a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a80 <bno055_platform_write+0x54>)
 8006a4c:	79bb      	ldrb	r3, [r7, #6]
 8006a4e:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 8006a50:	797b      	ldrb	r3, [r7, #5]
 8006a52:	461a      	mov	r2, r3
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	480b      	ldr	r0, [pc, #44]	@ (8006a84 <bno055_platform_write+0x58>)
 8006a58:	f00d f947 	bl	8013cea <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8006a5c:	797b      	ldrb	r3, [r7, #5]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3301      	adds	r3, #1
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	89f9      	ldrh	r1, [r7, #14]
 8006a66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a6a:	9200      	str	r2, [sp, #0]
 8006a6c:	4a04      	ldr	r2, [pc, #16]	@ (8006a80 <bno055_platform_write+0x54>)
 8006a6e:	4806      	ldr	r0, [pc, #24]	@ (8006a88 <bno055_platform_write+0x5c>)
 8006a70:	f002 f88a 	bl	8008b88 <HAL_I2C_Master_Transmit>
    return 0;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	2400121c 	.word	0x2400121c
 8006a84:	2400121d 	.word	0x2400121d
 8006a88:	24001484 	.word	0x24001484

08006a8c <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(Delay--)
 8006a94:	e008      	b.n	8006aa8 <DelayUs+0x1c>
	{
		for(i = 0; i < 84; i++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e002      	b.n	8006aa2 <DelayUs+0x16>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b53      	cmp	r3, #83	@ 0x53
 8006aa6:	d9f9      	bls.n	8006a9c <DelayUs+0x10>
	while(Delay--)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f1      	bne.n	8006a96 <DelayUs+0xa>
			;
		}
	}

	//HAL_Delay(Delay);
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BNO055_Init(){
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8006ac6:	4b23      	ldr	r3, [pc, #140]	@ (8006b54 <BNO055_Init+0x94>)
 8006ac8:	4a23      	ldr	r2, [pc, #140]	@ (8006b58 <BNO055_Init+0x98>)
 8006aca:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8006acc:	4b21      	ldr	r3, [pc, #132]	@ (8006b54 <BNO055_Init+0x94>)
 8006ace:	4a23      	ldr	r2, [pc, #140]	@ (8006b5c <BNO055_Init+0x9c>)
 8006ad0:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 8006ad2:	4b20      	ldr	r3, [pc, #128]	@ (8006b54 <BNO055_Init+0x94>)
 8006ad4:	4a22      	ldr	r2, [pc, #136]	@ (8006b60 <BNO055_Init+0xa0>)
 8006ad6:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8006ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b54 <BNO055_Init+0x94>)
 8006ada:	2228      	movs	r2, #40	@ 0x28
 8006adc:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8006ade:	1dfa      	adds	r2, r7, #7
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	2028      	movs	r0, #40	@ 0x28
 8006ae6:	f7ff ff77 	bl	80069d8 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8006aea:	481a      	ldr	r0, [pc, #104]	@ (8006b54 <BNO055_Init+0x94>)
 8006aec:	f7ff fcc2 	bl	8006474 <bno055_init>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b64 <BNO055_Init+0xa4>)
 8006af6:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8006af8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b68 <BNO055_Init+0xa8>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8006afe:	4b1a      	ldr	r3, [pc, #104]	@ (8006b68 <BNO055_Init+0xa8>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff feee 	bl	80068e4 <bno055_set_power_mode>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <BNO055_Init+0xa4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4413      	add	r3, r2
 8006b12:	4a14      	ldr	r2, [pc, #80]	@ (8006b64 <BNO055_Init+0xa4>)
 8006b14:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
	    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8006b16:	200c      	movs	r0, #12
 8006b18:	f7ff fe1c 	bl	8006754 <bno055_set_operation_mode>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <BNO055_Init+0xa4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4413      	add	r3, r2
 8006b26:	4a0f      	ldr	r2, [pc, #60]	@ (8006b64 <BNO055_Init+0xa4>)
 8006b28:	6013      	str	r3, [r2, #0]
	    comres += bno055_get_operation_mode(&op_mode_current);
 8006b2a:	4810      	ldr	r0, [pc, #64]	@ (8006b6c <BNO055_Init+0xac>)
 8006b2c:	f7ff fdd0 	bl	80066d0 <bno055_get_operation_mode>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b0b      	ldr	r3, [pc, #44]	@ (8006b64 <BNO055_Init+0xa4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4413      	add	r3, r2
 8006b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b64 <BNO055_Init+0xa4>)
 8006b3c:	6013      	str	r3, [r2, #0]
//		}
//		else
//		{
//			printf("bno055_init failed, comres=%d\r\n", comres);
//		}
	    DelayUs(1000000); // 1 second
 8006b3e:	480c      	ldr	r0, [pc, #48]	@ (8006b70 <BNO055_Init+0xb0>)
 8006b40:	f7ff ffa4 	bl	8006a8c <DelayUs>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 8006b44:	4b07      	ldr	r3, [pc, #28]	@ (8006b64 <BNO055_Init+0xa4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	b25b      	sxtb	r3, r3
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	24001204 	.word	0x24001204
 8006b58:	08006a2d 	.word	0x08006a2d
 8006b5c:	080069d9 	.word	0x080069d9
 8006b60:	08006a8d 	.word	0x08006a8d
 8006b64:	24000154 	.word	0x24000154
 8006b68:	2400141d 	.word	0x2400141d
 8006b6c:	2400141c 	.word	0x2400141c
 8006b70:	000f4240 	.word	0x000f4240

08006b74 <ms5607_delay_func>:
static struct MS5607UncompensatedValues uncompValues;
/* Compensated values structure */
static struct MS5607Readings readings;

void ms5607_delay_func(uint32_t period)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8006b7c:	e008      	b.n	8006b90 <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 84; i++)
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	e002      	b.n	8006b8a <ms5607_delay_func+0x16>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b53      	cmp	r3, #83	@ 0x53
 8006b8e:	d9f9      	bls.n	8006b84 <ms5607_delay_func+0x10>
	while(period--)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f1      	bne.n	8006b7e <ms5607_delay_func+0xa>
		{
			;
		}
	}
	//HAL_Delay(period/1000);
}
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0

  enableCSB();
 8006bac:	f000 f87c 	bl	8006ca8 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8006bb0:	4b12      	ldr	r3, [pc, #72]	@ (8006bfc <MS5607_Init+0x54>)
 8006bb2:	221e      	movs	r2, #30
 8006bb4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4910      	ldr	r1, [pc, #64]	@ (8006bfc <MS5607_Init+0x54>)
 8006bbc:	4810      	ldr	r0, [pc, #64]	@ (8006c00 <MS5607_Init+0x58>)
 8006bbe:	f007 fd8b 	bl	800e6d8 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8006bc2:	bf00      	nop
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c00 <MS5607_Init+0x58>)
 8006bc6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d0f9      	beq.n	8006bc4 <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 8006bd0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8006bd4:	f7ff ffce 	bl	8006b74 <ms5607_delay_func>
  disableCSB();
 8006bd8:	f000 f872 	bl	8006cc0 <disableCSB>

  MS5607PromRead(&promData);
 8006bdc:	4809      	ldr	r0, [pc, #36]	@ (8006c04 <MS5607_Init+0x5c>)
 8006bde:	f000 f813 	bl	8006c08 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8006be2:	4b08      	ldr	r3, [pc, #32]	@ (8006c04 <MS5607_Init+0x5c>)
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <MS5607_Init+0x4a>
 8006bea:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <MS5607_Init+0x5c>)
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	2bff      	cmp	r3, #255	@ 0xff
 8006bf0:	d101      	bne.n	8006bf6 <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8006bf6:	2300      	movs	r3, #0
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	2400141e 	.word	0x2400141e
 8006c00:	240016b8 	.word	0x240016b8
 8006c04:	24001420 	.word	0x24001420

08006c08 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8006c14:	2300      	movs	r3, #0
 8006c16:	75fb      	strb	r3, [r7, #23]
 8006c18:	e01e      	b.n	8006c58 <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	b25b      	sxtb	r3, r3
 8006c20:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8006c24:	b25b      	sxtb	r3, r3
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca0 <MS5607PromRead+0x98>)
 8006c2a:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8006c2c:	f000 f83c 	bl	8006ca8 <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8006c30:	230a      	movs	r3, #10
 8006c32:	2201      	movs	r2, #1
 8006c34:	491a      	ldr	r1, [pc, #104]	@ (8006ca0 <MS5607PromRead+0x98>)
 8006c36:	481b      	ldr	r0, [pc, #108]	@ (8006ca4 <MS5607PromRead+0x9c>)
 8006c38:	f007 fd4e 	bl	800e6d8 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 8006c3c:	230a      	movs	r3, #10
 8006c3e:	2202      	movs	r2, #2
 8006c40:	6939      	ldr	r1, [r7, #16]
 8006c42:	4818      	ldr	r0, [pc, #96]	@ (8006ca4 <MS5607PromRead+0x9c>)
 8006c44:	f007 ff36 	bl	800eab4 <HAL_SPI_Receive>
    disableCSB();
 8006c48:	f000 f83a 	bl	8006cc0 <disableCSB>
    structPointer++;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3302      	adds	r3, #2
 8006c50:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	3301      	adds	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b07      	cmp	r3, #7
 8006c5c:	d9dd      	bls.n	8006c1a <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
 8006c66:	e012      	b.n	8006c8e <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	785a      	ldrb	r2, [r3, #1]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	7afa      	ldrb	r2, [r7, #11]
 8006c80:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	3302      	adds	r3, #2
 8006c86:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	2b07      	cmp	r3, #7
 8006c92:	d9e9      	bls.n	8006c68 <MS5607PromRead+0x60>
  }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	2400141e 	.word	0x2400141e
 8006ca4:	240016b8 	.word	0x240016b8

08006ca8 <enableCSB>:
int32_t MS5607GetPressurePa(void){
  return readings.pressure;
}

/* Sets the CS pin */
void enableCSB(void){
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8006cac:	2200      	movs	r2, #0
 8006cae:	2110      	movs	r1, #16
 8006cb0:	4802      	ldr	r0, [pc, #8]	@ (8006cbc <enableCSB+0x14>)
 8006cb2:	f001 feb3 	bl	8008a1c <HAL_GPIO_WritePin>
}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	58021000 	.word	0x58021000

08006cc0 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	2110      	movs	r1, #16
 8006cc8:	4802      	ldr	r0, [pc, #8]	@ (8006cd4 <disableCSB+0x14>)
 8006cca:	f001 fea7 	bl	8008a1c <HAL_GPIO_WritePin>
}
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	58021000 	.word	0x58021000

08006cd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006ce0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8006ce4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d013      	beq.n	8006d18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006cf0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8006cf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8006cf8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006d00:	e000      	b.n	8006d04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8006d02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006d04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f9      	beq.n	8006d02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006d0e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006d18:	687b      	ldr	r3, [r7, #4]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
	int i=0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e009      	b.n	8006d50 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	60ba      	str	r2, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff ffc7 	bl	8006cd8 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	dbf1      	blt.n	8006d3c <_write+0x16>
	}
	return len;
 8006d58:	687b      	ldr	r3, [r7, #4]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8006d66:	f000 fc2d 	bl	80075c4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d6a:	f001 fa85 	bl	8008278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d6e:	f000 f81d 	bl	8006dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d72:	f000 fb15 	bl	80073a0 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8006d76:	f000 f947 	bl	8007008 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8006d7a:	f000 f885 	bl	8006e88 <MX_I2C1_Init>
  MX_I2C2_Init();
 8006d7e:	f000 f8c3 	bl	8006f08 <MX_I2C2_Init>
  MX_I2C4_Init();
 8006d82:	f000 f901 	bl	8006f88 <MX_I2C4_Init>
  MX_SPI1_Init();
 8006d86:	f000 f95d 	bl	8007044 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006d8a:	f000 f9b1 	bl	80070f0 <MX_SPI2_Init>
  MX_UART8_Init();
 8006d8e:	f000 fa5b 	bl	8007248 <MX_UART8_Init>
  MX_USART1_Init();
 8006d92:	f000 faa7 	bl	80072e4 <MX_USART1_Init>
  MX_SPI4_Init();
 8006d96:	f000 fa01 	bl	800719c <MX_SPI4_Init>
  MX_FATFS_Init();
 8006d9a:	f00b fcc1 	bl	8012720 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 8006d9e:	f001 f995 	bl	80080cc <SensorManager_Init>
  TestTelemetry();
 8006da2:	f001 fa19 	bl	80081d8 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <main+0x44>
	...

08006dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b09c      	sub	sp, #112	@ 0x70
 8006db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006db6:	224c      	movs	r2, #76	@ 0x4c
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f00c ff16 	bl	8013bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f00c ff10 	bl	8013bec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006dcc:	2002      	movs	r0, #2
 8006dce:	f002 fc27 	bl	8009620 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e84 <SystemClock_Config+0xd8>)
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	4a2a      	ldr	r2, [pc, #168]	@ (8006e84 <SystemClock_Config+0xd8>)
 8006ddc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006de0:	6193      	str	r3, [r2, #24]
 8006de2:	4b28      	ldr	r3, [pc, #160]	@ (8006e84 <SystemClock_Config+0xd8>)
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006dee:	bf00      	nop
 8006df0:	4b24      	ldr	r3, [pc, #144]	@ (8006e84 <SystemClock_Config+0xd8>)
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfc:	d1f8      	bne.n	8006df0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8006e10:	2303      	movs	r3, #3
 8006e12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8006e14:	231f      	movs	r3, #31
 8006e16:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006e20:	2302      	movs	r3, #2
 8006e22:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006e24:	230c      	movs	r3, #12
 8006e26:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8006e2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e36:	4618      	mov	r0, r3
 8006e38:	f002 fc2c 	bl	8009694 <HAL_RCC_OscConfig>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006e42:	f000 fbeb 	bl	800761c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e46:	233f      	movs	r3, #63	@ 0x3f
 8006e48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006e52:	2308      	movs	r3, #8
 8006e54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006e56:	2340      	movs	r3, #64	@ 0x40
 8006e58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006e5a:	2340      	movs	r3, #64	@ 0x40
 8006e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006e64:	2340      	movs	r3, #64	@ 0x40
 8006e66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006e68:	1d3b      	adds	r3, r7, #4
 8006e6a:	2103      	movs	r1, #3
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f002 ffeb 	bl	8009e48 <HAL_RCC_ClockConfig>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006e78:	f000 fbd0 	bl	800761c <Error_Handler>
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3770      	adds	r7, #112	@ 0x70
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	58024800 	.word	0x58024800

08006e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006f00 <MX_I2C1_Init+0x78>)
 8006e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 8006e92:	4b1a      	ldr	r3, [pc, #104]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006e94:	4a1b      	ldr	r2, [pc, #108]	@ (8006f04 <MX_I2C1_Init+0x7c>)
 8006e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006e98:	4b18      	ldr	r3, [pc, #96]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e9e:	4b17      	ldr	r3, [pc, #92]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ea4:	4b15      	ldr	r3, [pc, #84]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006eaa:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006eb0:	4b12      	ldr	r3, [pc, #72]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006eb6:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006ec2:	480e      	ldr	r0, [pc, #56]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006ec4:	f001 fdc4 	bl	8008a50 <HAL_I2C_Init>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006ece:	f000 fba5 	bl	800761c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4809      	ldr	r0, [pc, #36]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006ed6:	f002 fb0b 	bl	80094f0 <HAL_I2CEx_ConfigAnalogFilter>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006ee0:	f000 fb9c 	bl	800761c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4805      	ldr	r0, [pc, #20]	@ (8006efc <MX_I2C1_Init+0x74>)
 8006ee8:	f002 fb4d 	bl	8009586 <HAL_I2CEx_ConfigDigitalFilter>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006ef2:	f000 fb93 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006ef6:	bf00      	nop
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	24001430 	.word	0x24001430
 8006f00:	40005400 	.word	0x40005400
 8006f04:	20a0a3f6 	.word	0x20a0a3f6

08006f08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006f80 <MX_I2C2_Init+0x78>)
 8006f10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 8006f12:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f14:	4a1b      	ldr	r2, [pc, #108]	@ (8006f84 <MX_I2C2_Init+0x7c>)
 8006f16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006f18:	4b18      	ldr	r3, [pc, #96]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f1e:	4b17      	ldr	r3, [pc, #92]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006f24:	4b15      	ldr	r3, [pc, #84]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006f2a:	4b14      	ldr	r3, [pc, #80]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006f30:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f36:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006f42:	480e      	ldr	r0, [pc, #56]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f44:	f001 fd84 	bl	8008a50 <HAL_I2C_Init>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006f4e:	f000 fb65 	bl	800761c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006f52:	2100      	movs	r1, #0
 8006f54:	4809      	ldr	r0, [pc, #36]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f56:	f002 facb 	bl	80094f0 <HAL_I2CEx_ConfigAnalogFilter>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006f60:	f000 fb5c 	bl	800761c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006f64:	2100      	movs	r1, #0
 8006f66:	4805      	ldr	r0, [pc, #20]	@ (8006f7c <MX_I2C2_Init+0x74>)
 8006f68:	f002 fb0d 	bl	8009586 <HAL_I2CEx_ConfigDigitalFilter>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006f72:	f000 fb53 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006f76:	bf00      	nop
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	24001484 	.word	0x24001484
 8006f80:	40005800 	.word	0x40005800
 8006f84:	20a0a3f6 	.word	0x20a0a3f6

08006f88 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8006f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007000 <MX_I2C4_Init+0x78>)
 8006f90:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 8006f92:	4b1a      	ldr	r3, [pc, #104]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006f94:	4a1b      	ldr	r2, [pc, #108]	@ (8007004 <MX_I2C4_Init+0x7c>)
 8006f96:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8006f98:	4b18      	ldr	r3, [pc, #96]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f9e:	4b17      	ldr	r3, [pc, #92]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006fa4:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8006faa:	4b14      	ldr	r3, [pc, #80]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006fb0:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006fb6:	4b11      	ldr	r3, [pc, #68]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8006fc2:	480e      	ldr	r0, [pc, #56]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fc4:	f001 fd44 	bl	8008a50 <HAL_I2C_Init>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8006fce:	f000 fb25 	bl	800761c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8006fd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006fd6:	4809      	ldr	r0, [pc, #36]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fd8:	f002 fa8a 	bl	80094f0 <HAL_I2CEx_ConfigAnalogFilter>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8006fe2:	f000 fb1b 	bl	800761c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4804      	ldr	r0, [pc, #16]	@ (8006ffc <MX_I2C4_Init+0x74>)
 8006fea:	f002 facc 	bl	8009586 <HAL_I2CEx_ConfigDigitalFilter>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8006ff4:	f000 fb12 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8006ff8:	bf00      	nop
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	240014d8 	.word	0x240014d8
 8007000:	58001c00 	.word	0x58001c00
 8007004:	60405858 	.word	0x60405858

08007008 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800700c:	4b0b      	ldr	r3, [pc, #44]	@ (800703c <MX_SDMMC1_SD_Init+0x34>)
 800700e:	4a0c      	ldr	r2, [pc, #48]	@ (8007040 <MX_SDMMC1_SD_Init+0x38>)
 8007010:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007012:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <MX_SDMMC1_SD_Init+0x34>)
 8007014:	2200      	movs	r2, #0
 8007016:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007018:	4b08      	ldr	r3, [pc, #32]	@ (800703c <MX_SDMMC1_SD_Init+0x34>)
 800701a:	2200      	movs	r2, #0
 800701c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800701e:	4b07      	ldr	r3, [pc, #28]	@ (800703c <MX_SDMMC1_SD_Init+0x34>)
 8007020:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007024:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007026:	4b05      	ldr	r3, [pc, #20]	@ (800703c <MX_SDMMC1_SD_Init+0x34>)
 8007028:	2200      	movs	r2, #0
 800702a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800702c:	4b03      	ldr	r3, [pc, #12]	@ (800703c <MX_SDMMC1_SD_Init+0x34>)
 800702e:	2200      	movs	r2, #0
 8007030:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8007032:	bf00      	nop
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	2400152c 	.word	0x2400152c
 8007040:	52007000 	.word	0x52007000

08007044 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007048:	4b27      	ldr	r3, [pc, #156]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 800704a:	4a28      	ldr	r2, [pc, #160]	@ (80070ec <MX_SPI1_Init+0xa8>)
 800704c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800704e:	4b26      	ldr	r3, [pc, #152]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007050:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007056:	4b24      	ldr	r3, [pc, #144]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007058:	2200      	movs	r2, #0
 800705a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800705c:	4b22      	ldr	r3, [pc, #136]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 800705e:	2207      	movs	r2, #7
 8007060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007062:	4b21      	ldr	r3, [pc, #132]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007064:	2200      	movs	r2, #0
 8007066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007068:	4b1f      	ldr	r3, [pc, #124]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 800706a:	2200      	movs	r2, #0
 800706c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800706e:	4b1e      	ldr	r3, [pc, #120]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007070:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007076:	4b1c      	ldr	r3, [pc, #112]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007078:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800707c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800707e:	4b1a      	ldr	r3, [pc, #104]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007080:	2200      	movs	r2, #0
 8007082:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007084:	4b18      	ldr	r3, [pc, #96]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007086:	2200      	movs	r2, #0
 8007088:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800708a:	4b17      	ldr	r3, [pc, #92]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 800708c:	2200      	movs	r2, #0
 800708e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8007090:	4b15      	ldr	r3, [pc, #84]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007092:	2200      	movs	r2, #0
 8007094:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007096:	4b14      	ldr	r3, [pc, #80]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 8007098:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800709c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800709e:	4b12      	ldr	r3, [pc, #72]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80070a4:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80070aa:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80070b0:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80070b6:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80070bc:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070be:	2200      	movs	r2, #0
 80070c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80070c2:	4b09      	ldr	r3, [pc, #36]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80070c8:	4b07      	ldr	r3, [pc, #28]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80070ce:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80070d4:	4804      	ldr	r0, [pc, #16]	@ (80070e8 <MX_SPI1_Init+0xa4>)
 80070d6:	f007 f9db 	bl	800e490 <HAL_SPI_Init>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80070e0:	f000 fa9c 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80070e4:	bf00      	nop
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	240015a8 	.word	0x240015a8
 80070ec:	40013000 	.word	0x40013000

080070f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80070f4:	4b27      	ldr	r3, [pc, #156]	@ (8007194 <MX_SPI2_Init+0xa4>)
 80070f6:	4a28      	ldr	r2, [pc, #160]	@ (8007198 <MX_SPI2_Init+0xa8>)
 80070f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80070fa:	4b26      	ldr	r3, [pc, #152]	@ (8007194 <MX_SPI2_Init+0xa4>)
 80070fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007100:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007102:	4b24      	ldr	r3, [pc, #144]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007104:	2200      	movs	r2, #0
 8007106:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007108:	4b22      	ldr	r3, [pc, #136]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800710a:	2207      	movs	r2, #7
 800710c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800710e:	4b21      	ldr	r3, [pc, #132]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007110:	2200      	movs	r2, #0
 8007112:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007114:	4b1f      	ldr	r3, [pc, #124]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007116:	2200      	movs	r2, #0
 8007118:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800711a:	4b1e      	ldr	r3, [pc, #120]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800711c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007120:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007122:	4b1c      	ldr	r3, [pc, #112]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007124:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8007128:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800712a:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800712c:	2200      	movs	r2, #0
 800712e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007130:	4b18      	ldr	r3, [pc, #96]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007132:	2200      	movs	r2, #0
 8007134:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007136:	4b17      	ldr	r3, [pc, #92]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007138:	2200      	movs	r2, #0
 800713a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800713c:	4b15      	ldr	r3, [pc, #84]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800713e:	2200      	movs	r2, #0
 8007140:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007142:	4b14      	ldr	r3, [pc, #80]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007144:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007148:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800714a:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800714c:	2200      	movs	r2, #0
 800714e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007150:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007152:	2200      	movs	r2, #0
 8007154:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007158:	2200      	movs	r2, #0
 800715a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800715c:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800715e:	2200      	movs	r2, #0
 8007160:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007162:	4b0c      	ldr	r3, [pc, #48]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007164:	2200      	movs	r2, #0
 8007166:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007168:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800716a:	2200      	movs	r2, #0
 800716c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800716e:	4b09      	ldr	r3, [pc, #36]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007170:	2200      	movs	r2, #0
 8007172:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007174:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007176:	2200      	movs	r2, #0
 8007178:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800717a:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <MX_SPI2_Init+0xa4>)
 800717c:	2200      	movs	r2, #0
 800717e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007180:	4804      	ldr	r0, [pc, #16]	@ (8007194 <MX_SPI2_Init+0xa4>)
 8007182:	f007 f985 	bl	800e490 <HAL_SPI_Init>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800718c:	f000 fa46 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}
 8007194:	24001630 	.word	0x24001630
 8007198:	40003800 	.word	0x40003800

0800719c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80071a0:	4b27      	ldr	r3, [pc, #156]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071a2:	4a28      	ldr	r2, [pc, #160]	@ (8007244 <MX_SPI4_Init+0xa8>)
 80071a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80071a6:	4b26      	ldr	r3, [pc, #152]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80071ac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80071ae:	4b24      	ldr	r3, [pc, #144]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80071b4:	4b22      	ldr	r3, [pc, #136]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071b6:	2207      	movs	r2, #7
 80071b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80071ba:	4b21      	ldr	r3, [pc, #132]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071bc:	2200      	movs	r2, #0
 80071be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80071c0:	4b1f      	ldr	r3, [pc, #124]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80071c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80071cc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80071ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071d0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80071d4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80071d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071d8:	2200      	movs	r2, #0
 80071da:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80071dc:	4b18      	ldr	r3, [pc, #96]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071de:	2200      	movs	r2, #0
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e2:	4b17      	ldr	r3, [pc, #92]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80071e8:	4b15      	ldr	r3, [pc, #84]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80071ee:	4b14      	ldr	r3, [pc, #80]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80071f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80071f6:	4b12      	ldr	r3, [pc, #72]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80071fc:	4b10      	ldr	r3, [pc, #64]	@ (8007240 <MX_SPI4_Init+0xa4>)
 80071fe:	2200      	movs	r2, #0
 8007200:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007202:	4b0f      	ldr	r3, [pc, #60]	@ (8007240 <MX_SPI4_Init+0xa4>)
 8007204:	2200      	movs	r2, #0
 8007206:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007208:	4b0d      	ldr	r3, [pc, #52]	@ (8007240 <MX_SPI4_Init+0xa4>)
 800720a:	2200      	movs	r2, #0
 800720c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800720e:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <MX_SPI4_Init+0xa4>)
 8007210:	2200      	movs	r2, #0
 8007212:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007214:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <MX_SPI4_Init+0xa4>)
 8007216:	2200      	movs	r2, #0
 8007218:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800721a:	4b09      	ldr	r3, [pc, #36]	@ (8007240 <MX_SPI4_Init+0xa4>)
 800721c:	2200      	movs	r2, #0
 800721e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007220:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <MX_SPI4_Init+0xa4>)
 8007222:	2200      	movs	r2, #0
 8007224:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007226:	4b06      	ldr	r3, [pc, #24]	@ (8007240 <MX_SPI4_Init+0xa4>)
 8007228:	2200      	movs	r2, #0
 800722a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800722c:	4804      	ldr	r0, [pc, #16]	@ (8007240 <MX_SPI4_Init+0xa4>)
 800722e:	f007 f92f 	bl	800e490 <HAL_SPI_Init>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8007238:	f000 f9f0 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800723c:	bf00      	nop
 800723e:	bd80      	pop	{r7, pc}
 8007240:	240016b8 	.word	0x240016b8
 8007244:	40013400 	.word	0x40013400

08007248 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800724c:	4b23      	ldr	r3, [pc, #140]	@ (80072dc <MX_UART8_Init+0x94>)
 800724e:	4a24      	ldr	r2, [pc, #144]	@ (80072e0 <MX_UART8_Init+0x98>)
 8007250:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8007252:	4b22      	ldr	r3, [pc, #136]	@ (80072dc <MX_UART8_Init+0x94>)
 8007254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007258:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800725a:	4b20      	ldr	r3, [pc, #128]	@ (80072dc <MX_UART8_Init+0x94>)
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8007260:	4b1e      	ldr	r3, [pc, #120]	@ (80072dc <MX_UART8_Init+0x94>)
 8007262:	2200      	movs	r2, #0
 8007264:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8007266:	4b1d      	ldr	r3, [pc, #116]	@ (80072dc <MX_UART8_Init+0x94>)
 8007268:	2200      	movs	r2, #0
 800726a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800726c:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <MX_UART8_Init+0x94>)
 800726e:	220c      	movs	r2, #12
 8007270:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8007272:	4b1a      	ldr	r3, [pc, #104]	@ (80072dc <MX_UART8_Init+0x94>)
 8007274:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8007278:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800727a:	4b18      	ldr	r3, [pc, #96]	@ (80072dc <MX_UART8_Init+0x94>)
 800727c:	2200      	movs	r2, #0
 800727e:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007280:	4b16      	ldr	r3, [pc, #88]	@ (80072dc <MX_UART8_Init+0x94>)
 8007282:	2200      	movs	r2, #0
 8007284:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007286:	4b15      	ldr	r3, [pc, #84]	@ (80072dc <MX_UART8_Init+0x94>)
 8007288:	2200      	movs	r2, #0
 800728a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800728c:	4b13      	ldr	r3, [pc, #76]	@ (80072dc <MX_UART8_Init+0x94>)
 800728e:	2200      	movs	r2, #0
 8007290:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8007292:	4812      	ldr	r0, [pc, #72]	@ (80072dc <MX_UART8_Init+0x94>)
 8007294:	f008 faa3 	bl	800f7de <HAL_UART_Init>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 800729e:	f000 f9bd 	bl	800761c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80072a2:	2100      	movs	r1, #0
 80072a4:	480d      	ldr	r0, [pc, #52]	@ (80072dc <MX_UART8_Init+0x94>)
 80072a6:	f009 fbb0 	bl	8010a0a <HAL_UARTEx_SetTxFifoThreshold>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 80072b0:	f000 f9b4 	bl	800761c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80072b4:	2100      	movs	r1, #0
 80072b6:	4809      	ldr	r0, [pc, #36]	@ (80072dc <MX_UART8_Init+0x94>)
 80072b8:	f009 fbe5 	bl	8010a86 <HAL_UARTEx_SetRxFifoThreshold>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 80072c2:	f000 f9ab 	bl	800761c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80072c6:	4805      	ldr	r0, [pc, #20]	@ (80072dc <MX_UART8_Init+0x94>)
 80072c8:	f009 fb66 	bl	8010998 <HAL_UARTEx_DisableFifoMode>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 80072d2:	f000 f9a3 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	24001740 	.word	0x24001740
 80072e0:	40007c00 	.word	0x40007c00

080072e4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80072e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007398 <MX_USART1_Init+0xb4>)
 80072ea:	4a2c      	ldr	r2, [pc, #176]	@ (800739c <MX_USART1_Init+0xb8>)
 80072ec:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80072ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007398 <MX_USART1_Init+0xb4>)
 80072f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80072f4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80072f6:	4b28      	ldr	r3, [pc, #160]	@ (8007398 <MX_USART1_Init+0xb4>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80072fc:	4b26      	ldr	r3, [pc, #152]	@ (8007398 <MX_USART1_Init+0xb4>)
 80072fe:	2200      	movs	r2, #0
 8007300:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8007302:	4b25      	ldr	r3, [pc, #148]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007304:	2200      	movs	r2, #0
 8007306:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8007308:	4b23      	ldr	r3, [pc, #140]	@ (8007398 <MX_USART1_Init+0xb4>)
 800730a:	220c      	movs	r2, #12
 800730c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800730e:	4b22      	ldr	r3, [pc, #136]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007310:	2200      	movs	r2, #0
 8007312:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8007314:	4b20      	ldr	r3, [pc, #128]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007316:	2200      	movs	r2, #0
 8007318:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800731a:	4b1f      	ldr	r3, [pc, #124]	@ (8007398 <MX_USART1_Init+0xb4>)
 800731c:	2200      	movs	r2, #0
 800731e:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8007320:	4b1d      	ldr	r3, [pc, #116]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007322:	2200      	movs	r2, #0
 8007324:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8007326:	4b1c      	ldr	r3, [pc, #112]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007328:	2201      	movs	r2, #1
 800732a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800732c:	481a      	ldr	r0, [pc, #104]	@ (8007398 <MX_USART1_Init+0xb4>)
 800732e:	f009 fc37 	bl	8010ba0 <HAL_USART_Init>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8007338:	f000 f970 	bl	800761c <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800733c:	2100      	movs	r1, #0
 800733e:	4816      	ldr	r0, [pc, #88]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007340:	f00a fb5e 	bl	8011a00 <HAL_USARTEx_SetTxFifoThreshold>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 800734a:	f000 f967 	bl	800761c <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800734e:	2100      	movs	r1, #0
 8007350:	4811      	ldr	r0, [pc, #68]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007352:	f00a fb93 	bl	8011a7c <HAL_USARTEx_SetRxFifoThreshold>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 800735c:	f000 f95e 	bl	800761c <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8007360:	2100      	movs	r1, #0
 8007362:	480d      	ldr	r0, [pc, #52]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007364:	f00a fad6 	bl	8011914 <HAL_USARTEx_ConfigNSS>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 800736e:	f000 f955 	bl	800761c <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8007372:	4809      	ldr	r0, [pc, #36]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007374:	f00a fb0b 	bl	801198e <HAL_USARTEx_DisableFifoMode>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 800737e:	f000 f94d 	bl	800761c <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8007382:	4805      	ldr	r0, [pc, #20]	@ (8007398 <MX_USART1_Init+0xb4>)
 8007384:	f00a fa71 	bl	801186a <HAL_USARTEx_EnableSlaveMode>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <MX_USART1_Init+0xae>
  {
    Error_Handler();
 800738e:	f000 f945 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007392:	bf00      	nop
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	240017d4 	.word	0x240017d4
 800739c:	40011000 	.word	0x40011000

080073a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08c      	sub	sp, #48	@ 0x30
 80073a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a6:	f107 031c 	add.w	r3, r7, #28
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	605a      	str	r2, [r3, #4]
 80073b0:	609a      	str	r2, [r3, #8]
 80073b2:	60da      	str	r2, [r3, #12]
 80073b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073b6:	4b7d      	ldr	r3, [pc, #500]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073bc:	4a7b      	ldr	r2, [pc, #492]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073be:	f043 0304 	orr.w	r3, r3, #4
 80073c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80073c6:	4b79      	ldr	r3, [pc, #484]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80073d4:	4b75      	ldr	r3, [pc, #468]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073da:	4a74      	ldr	r2, [pc, #464]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073dc:	f043 0310 	orr.w	r3, r3, #16
 80073e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80073e4:	4b71      	ldr	r3, [pc, #452]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073f2:	4b6e      	ldr	r3, [pc, #440]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073f8:	4a6c      	ldr	r2, [pc, #432]	@ (80075ac <MX_GPIO_Init+0x20c>)
 80073fa:	f043 0302 	orr.w	r3, r3, #2
 80073fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007402:	4b6a      	ldr	r3, [pc, #424]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007410:	4b66      	ldr	r3, [pc, #408]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007416:	4a65      	ldr	r2, [pc, #404]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007420:	4b62      	ldr	r3, [pc, #392]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800742e:	4b5f      	ldr	r3, [pc, #380]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007434:	4a5d      	ldr	r2, [pc, #372]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007436:	f043 0308 	orr.w	r3, r3, #8
 800743a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800743e:	4b5b      	ldr	r3, [pc, #364]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800744c:	4b57      	ldr	r3, [pc, #348]	@ (80075ac <MX_GPIO_Init+0x20c>)
 800744e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007452:	4a56      	ldr	r2, [pc, #344]	@ (80075ac <MX_GPIO_Init+0x20c>)
 8007454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800745c:	4b53      	ldr	r3, [pc, #332]	@ (80075ac <MX_GPIO_Init+0x20c>)
 800745e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800746a:	2200      	movs	r2, #0
 800746c:	2110      	movs	r1, #16
 800746e:	4850      	ldr	r0, [pc, #320]	@ (80075b0 <MX_GPIO_Init+0x210>)
 8007470:	f001 fad4 	bl	8008a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8007474:	2200      	movs	r2, #0
 8007476:	2110      	movs	r1, #16
 8007478:	484e      	ldr	r0, [pc, #312]	@ (80075b4 <MX_GPIO_Init+0x214>)
 800747a:	f001 facf 	bl	8008a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 800747e:	2200      	movs	r2, #0
 8007480:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8007484:	484c      	ldr	r0, [pc, #304]	@ (80075b8 <MX_GPIO_Init+0x218>)
 8007486:	f001 fac9 	bl	8008a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 800748a:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 800748e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007490:	2300      	movs	r3, #0
 8007492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007494:	2300      	movs	r3, #0
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007498:	f107 031c 	add.w	r3, r7, #28
 800749c:	4619      	mov	r1, r3
 800749e:	4847      	ldr	r0, [pc, #284]	@ (80075bc <MX_GPIO_Init+0x21c>)
 80074a0:	f001 f8fc 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80074a4:	2310      	movs	r3, #16
 80074a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074a8:	2301      	movs	r3, #1
 80074aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074b0:	2302      	movs	r3, #2
 80074b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80074b4:	f107 031c 	add.w	r3, r7, #28
 80074b8:	4619      	mov	r1, r3
 80074ba:	483d      	ldr	r0, [pc, #244]	@ (80075b0 <MX_GPIO_Init+0x210>)
 80074bc:	f001 f8ee 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80074c0:	2302      	movs	r3, #2
 80074c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074c4:	2303      	movs	r3, #3
 80074c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074cc:	f107 031c 	add.w	r3, r7, #28
 80074d0:	4619      	mov	r1, r3
 80074d2:	483b      	ldr	r0, [pc, #236]	@ (80075c0 <MX_GPIO_Init+0x220>)
 80074d4:	f001 f8e2 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80074d8:	2308      	movs	r3, #8
 80074da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074dc:	2303      	movs	r3, #3
 80074de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074e4:	f107 031c 	add.w	r3, r7, #28
 80074e8:	4619      	mov	r1, r3
 80074ea:	4834      	ldr	r0, [pc, #208]	@ (80075bc <MX_GPIO_Init+0x21c>)
 80074ec:	f001 f8d6 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 80074f0:	2310      	movs	r3, #16
 80074f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074f4:	2301      	movs	r3, #1
 80074f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8007500:	f107 031c 	add.w	r3, r7, #28
 8007504:	4619      	mov	r1, r3
 8007506:	482b      	ldr	r0, [pc, #172]	@ (80075b4 <MX_GPIO_Init+0x214>)
 8007508:	f001 f8c8 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800750c:	2304      	movs	r3, #4
 800750e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007510:	2303      	movs	r3, #3
 8007512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	2300      	movs	r3, #0
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007518:	f107 031c 	add.w	r3, r7, #28
 800751c:	4619      	mov	r1, r3
 800751e:	4826      	ldr	r0, [pc, #152]	@ (80075b8 <MX_GPIO_Init+0x218>)
 8007520:	f001 f8bc 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8007524:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8007528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800752a:	2300      	movs	r3, #0
 800752c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752e:	2300      	movs	r3, #0
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007532:	f107 031c 	add.w	r3, r7, #28
 8007536:	4619      	mov	r1, r3
 8007538:	481d      	ldr	r0, [pc, #116]	@ (80075b0 <MX_GPIO_Init+0x210>)
 800753a:	f001 f8af 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 800753e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8007542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007544:	2301      	movs	r3, #1
 8007546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007548:	2300      	movs	r3, #0
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800754c:	2300      	movs	r3, #0
 800754e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007550:	f107 031c 	add.w	r3, r7, #28
 8007554:	4619      	mov	r1, r3
 8007556:	4818      	ldr	r0, [pc, #96]	@ (80075b8 <MX_GPIO_Init+0x218>)
 8007558:	f001 f8a0 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800755c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007562:	2303      	movs	r3, #3
 8007564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007566:	2300      	movs	r3, #0
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800756a:	f107 031c 	add.w	r3, r7, #28
 800756e:	4619      	mov	r1, r3
 8007570:	480f      	ldr	r0, [pc, #60]	@ (80075b0 <MX_GPIO_Init+0x210>)
 8007572:	f001 f893 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007576:	2308      	movs	r3, #8
 8007578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800757a:	2303      	movs	r3, #3
 800757c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757e:	2300      	movs	r3, #0
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007582:	f107 031c 	add.w	r3, r7, #28
 8007586:	4619      	mov	r1, r3
 8007588:	480a      	ldr	r0, [pc, #40]	@ (80075b4 <MX_GPIO_Init+0x214>)
 800758a:	f001 f887 	bl	800869c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 800758e:	2200      	movs	r2, #0
 8007590:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007594:	4808      	ldr	r0, [pc, #32]	@ (80075b8 <MX_GPIO_Init+0x218>)
 8007596:	f001 fa41 	bl	8008a1c <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 800759a:	2200      	movs	r2, #0
 800759c:	2110      	movs	r1, #16
 800759e:	4805      	ldr	r0, [pc, #20]	@ (80075b4 <MX_GPIO_Init+0x214>)
 80075a0:	f001 fa3c 	bl	8008a1c <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80075a4:	bf00      	nop
 80075a6:	3730      	adds	r7, #48	@ 0x30
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	58024400 	.word	0x58024400
 80075b0:	58021000 	.word	0x58021000
 80075b4:	58020000 	.word	0x58020000
 80075b8:	58020400 	.word	0x58020400
 80075bc:	58020800 	.word	0x58020800
 80075c0:	58020c00 	.word	0x58020c00

080075c4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80075ca:	463b      	mov	r3, r7
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	609a      	str	r2, [r3, #8]
 80075d4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80075d6:	f000 ffe9 	bl	80085ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80075da:	2301      	movs	r3, #1
 80075dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80075de:	2300      	movs	r3, #0
 80075e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80075e6:	231f      	movs	r3, #31
 80075e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80075ea:	2387      	movs	r3, #135	@ 0x87
 80075ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80075f2:	2300      	movs	r3, #0
 80075f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80075f6:	2301      	movs	r3, #1
 80075f8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80075fe:	2300      	movs	r3, #0
 8007600:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007606:	463b      	mov	r3, r7
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f807 	bl	800861c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800760e:	2004      	movs	r0, #4
 8007610:	f000 ffe4 	bl	80085dc <HAL_MPU_Enable>

}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007620:	b672      	cpsid	i
}
 8007622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007624:	bf00      	nop
 8007626:	e7fd      	b.n	8007624 <Error_Handler+0x8>

08007628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800762e:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <HAL_MspInit+0x30>)
 8007630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007634:	4a08      	ldr	r2, [pc, #32]	@ (8007658 <HAL_MspInit+0x30>)
 8007636:	f043 0302 	orr.w	r3, r3, #2
 800763a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800763e:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <HAL_MspInit+0x30>)
 8007640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	607b      	str	r3, [r7, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	58024400 	.word	0x58024400

0800765c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b0bc      	sub	sp, #240	@ 0xf0
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007664:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	605a      	str	r2, [r3, #4]
 800766e:	609a      	str	r2, [r3, #8]
 8007670:	60da      	str	r2, [r3, #12]
 8007672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007674:	f107 0320 	add.w	r3, r7, #32
 8007678:	22b8      	movs	r2, #184	@ 0xb8
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f00c fab5 	bl	8013bec <memset>
  if(hi2c->Instance==I2C1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a74      	ldr	r2, [pc, #464]	@ (8007858 <HAL_I2C_MspInit+0x1fc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d147      	bne.n	800771c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800768c:	f04f 0208 	mov.w	r2, #8
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800769e:	f107 0320 	add.w	r3, r7, #32
 80076a2:	4618      	mov	r0, r3
 80076a4:	f002 ff5c 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80076ae:	f7ff ffb5 	bl	800761c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076b2:	4b6a      	ldr	r3, [pc, #424]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80076b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076b8:	4a68      	ldr	r2, [pc, #416]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80076ba:	f043 0302 	orr.w	r3, r3, #2
 80076be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80076c2:	4b66      	ldr	r3, [pc, #408]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80076c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80076d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80076d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076d8:	2312      	movs	r3, #18
 80076da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e4:	2300      	movs	r3, #0
 80076e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80076ea:	2304      	movs	r3, #4
 80076ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80076f4:	4619      	mov	r1, r3
 80076f6:	485a      	ldr	r0, [pc, #360]	@ (8007860 <HAL_I2C_MspInit+0x204>)
 80076f8:	f000 ffd0 	bl	800869c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80076fc:	4b57      	ldr	r3, [pc, #348]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80076fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007702:	4a56      	ldr	r2, [pc, #344]	@ (800785c <HAL_I2C_MspInit+0x200>)
 8007704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007708:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800770c:	4b53      	ldr	r3, [pc, #332]	@ (800785c <HAL_I2C_MspInit+0x200>)
 800770e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800771a:	e098      	b.n	800784e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a50      	ldr	r2, [pc, #320]	@ (8007864 <HAL_I2C_MspInit+0x208>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d147      	bne.n	80077b6 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007726:	f04f 0208 	mov.w	r2, #8
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8007732:	2300      	movs	r3, #0
 8007734:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007738:	f107 0320 	add.w	r3, r7, #32
 800773c:	4618      	mov	r0, r3
 800773e:	f002 ff0f 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8007748:	f7ff ff68 	bl	800761c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800774c:	4b43      	ldr	r3, [pc, #268]	@ (800785c <HAL_I2C_MspInit+0x200>)
 800774e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007752:	4a42      	ldr	r2, [pc, #264]	@ (800785c <HAL_I2C_MspInit+0x200>)
 8007754:	f043 0302 	orr.w	r3, r3, #2
 8007758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800775c:	4b3f      	ldr	r3, [pc, #252]	@ (800785c <HAL_I2C_MspInit+0x200>)
 800775e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800776a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800776e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007772:	2312      	movs	r3, #18
 8007774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007778:	2300      	movs	r3, #0
 800777a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800777e:	2300      	movs	r3, #0
 8007780:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007784:	2304      	movs	r3, #4
 8007786:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800778a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800778e:	4619      	mov	r1, r3
 8007790:	4833      	ldr	r0, [pc, #204]	@ (8007860 <HAL_I2C_MspInit+0x204>)
 8007792:	f000 ff83 	bl	800869c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007796:	4b31      	ldr	r3, [pc, #196]	@ (800785c <HAL_I2C_MspInit+0x200>)
 8007798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800779c:	4a2f      	ldr	r2, [pc, #188]	@ (800785c <HAL_I2C_MspInit+0x200>)
 800779e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80077a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80077a6:	4b2d      	ldr	r3, [pc, #180]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80077a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	693b      	ldr	r3, [r7, #16]
}
 80077b4:	e04b      	b.n	800784e <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007868 <HAL_I2C_MspInit+0x20c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d146      	bne.n	800784e <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80077c0:	f04f 0210 	mov.w	r2, #16
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80077cc:	2300      	movs	r3, #0
 80077ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80077d2:	f107 0320 	add.w	r3, r7, #32
 80077d6:	4618      	mov	r0, r3
 80077d8:	f002 fec2 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80077e2:	f7ff ff1b 	bl	800761c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077e6:	4b1d      	ldr	r3, [pc, #116]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80077e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ec:	4a1b      	ldr	r2, [pc, #108]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80077ee:	f043 0308 	orr.w	r3, r3, #8
 80077f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077f6:	4b19      	ldr	r3, [pc, #100]	@ (800785c <HAL_I2C_MspInit+0x200>)
 80077f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8007804:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007808:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800780c:	2312      	movs	r3, #18
 800780e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007812:	2300      	movs	r3, #0
 8007814:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007818:	2303      	movs	r3, #3
 800781a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800781e:	2304      	movs	r3, #4
 8007820:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007824:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007828:	4619      	mov	r1, r3
 800782a:	4810      	ldr	r0, [pc, #64]	@ (800786c <HAL_I2C_MspInit+0x210>)
 800782c:	f000 ff36 	bl	800869c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007830:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <HAL_I2C_MspInit+0x200>)
 8007832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007836:	4a09      	ldr	r2, [pc, #36]	@ (800785c <HAL_I2C_MspInit+0x200>)
 8007838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007840:	4b06      	ldr	r3, [pc, #24]	@ (800785c <HAL_I2C_MspInit+0x200>)
 8007842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800784a:	60bb      	str	r3, [r7, #8]
 800784c:	68bb      	ldr	r3, [r7, #8]
}
 800784e:	bf00      	nop
 8007850:	37f0      	adds	r7, #240	@ 0xf0
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40005400 	.word	0x40005400
 800785c:	58024400 	.word	0x58024400
 8007860:	58020400 	.word	0x58020400
 8007864:	40005800 	.word	0x40005800
 8007868:	58001c00 	.word	0x58001c00
 800786c:	58020c00 	.word	0x58020c00

08007870 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b0ba      	sub	sp, #232	@ 0xe8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007878:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	605a      	str	r2, [r3, #4]
 8007882:	609a      	str	r2, [r3, #8]
 8007884:	60da      	str	r2, [r3, #12]
 8007886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007888:	f107 0318 	add.w	r3, r7, #24
 800788c:	22b8      	movs	r2, #184	@ 0xb8
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f00c f9ab 	bl	8013bec <memset>
  if(hsd->Instance==SDMMC1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a38      	ldr	r2, [pc, #224]	@ (800797c <HAL_SD_MspInit+0x10c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d169      	bne.n	8007974 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80078a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80078b0:	f107 0318 	add.w	r3, r7, #24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f002 fe53 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80078c0:	f7ff feac 	bl	800761c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80078c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007980 <HAL_SD_MspInit+0x110>)
 80078c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80078ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007980 <HAL_SD_MspInit+0x110>)
 80078cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80078d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007980 <HAL_SD_MspInit+0x110>)
 80078d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80078da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078e2:	4b27      	ldr	r3, [pc, #156]	@ (8007980 <HAL_SD_MspInit+0x110>)
 80078e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078e8:	4a25      	ldr	r2, [pc, #148]	@ (8007980 <HAL_SD_MspInit+0x110>)
 80078ea:	f043 0308 	orr.w	r3, r3, #8
 80078ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80078f2:	4b23      	ldr	r3, [pc, #140]	@ (8007980 <HAL_SD_MspInit+0x110>)
 80078f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007900:	4b1f      	ldr	r3, [pc, #124]	@ (8007980 <HAL_SD_MspInit+0x110>)
 8007902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007906:	4a1e      	ldr	r2, [pc, #120]	@ (8007980 <HAL_SD_MspInit+0x110>)
 8007908:	f043 0304 	orr.w	r3, r3, #4
 800790c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007910:	4b1b      	ldr	r3, [pc, #108]	@ (8007980 <HAL_SD_MspInit+0x110>)
 8007912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800791e:	2304      	movs	r3, #4
 8007920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007924:	2302      	movs	r3, #2
 8007926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	2300      	movs	r3, #0
 800792c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007930:	2303      	movs	r3, #3
 8007932:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8007936:	230c      	movs	r3, #12
 8007938:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800793c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007940:	4619      	mov	r1, r3
 8007942:	4810      	ldr	r0, [pc, #64]	@ (8007984 <HAL_SD_MspInit+0x114>)
 8007944:	f000 feaa 	bl	800869c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8007948:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800794c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007950:	2302      	movs	r3, #2
 8007952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007956:	2300      	movs	r3, #0
 8007958:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800795c:	2303      	movs	r3, #3
 800795e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8007962:	230c      	movs	r3, #12
 8007964:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007968:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800796c:	4619      	mov	r1, r3
 800796e:	4806      	ldr	r0, [pc, #24]	@ (8007988 <HAL_SD_MspInit+0x118>)
 8007970:	f000 fe94 	bl	800869c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8007974:	bf00      	nop
 8007976:	37e8      	adds	r7, #232	@ 0xe8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	52007000 	.word	0x52007000
 8007980:	58024400 	.word	0x58024400
 8007984:	58020c00 	.word	0x58020c00
 8007988:	58020800 	.word	0x58020800

0800798c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b0be      	sub	sp, #248	@ 0xf8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007994:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	605a      	str	r2, [r3, #4]
 800799e:	609a      	str	r2, [r3, #8]
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079a8:	22b8      	movs	r2, #184	@ 0xb8
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f00c f91d 	bl	8013bec <memset>
  if(hspi->Instance==SPI1)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a97      	ldr	r2, [pc, #604]	@ (8007c14 <HAL_SPI_MspInit+0x288>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d16a      	bne.n	8007a92 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80079bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80079ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 fdc4 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80079de:	f7ff fe1d 	bl	800761c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 80079e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079e8:	4a8b      	ldr	r2, [pc, #556]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 80079ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079f2:	4b89      	ldr	r3, [pc, #548]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 80079f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a00:	4b85      	ldr	r3, [pc, #532]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a06:	4a84      	ldr	r2, [pc, #528]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a10:	4b81      	ldr	r3, [pc, #516]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	623b      	str	r3, [r7, #32]
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1e:	4b7e      	ldr	r3, [pc, #504]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a24:	4a7c      	ldr	r2, [pc, #496]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a42:	2302      	movs	r3, #2
 8007a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a54:	2305      	movs	r3, #5
 8007a56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a5a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	486e      	ldr	r0, [pc, #440]	@ (8007c1c <HAL_SPI_MspInit+0x290>)
 8007a62:	f000 fe1b 	bl	800869c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007a66:	23a0      	movs	r3, #160	@ 0xa0
 8007a68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a7e:	2305      	movs	r3, #5
 8007a80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a84:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4865      	ldr	r0, [pc, #404]	@ (8007c20 <HAL_SPI_MspInit+0x294>)
 8007a8c:	f000 fe06 	bl	800869c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007a90:	e0bb      	b.n	8007c0a <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a63      	ldr	r2, [pc, #396]	@ (8007c24 <HAL_SPI_MspInit+0x298>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d16b      	bne.n	8007b74 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8007a9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007aae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f002 fd54 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8007abe:	f7ff fdad 	bl	800761c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ac2:	4b55      	ldr	r3, [pc, #340]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ac8:	4a53      	ldr	r2, [pc, #332]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ace:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ad2:	4b51      	ldr	r3, [pc, #324]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007ae8:	f043 0301 	orr.w	r3, r3, #1
 8007aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007af0:	4b49      	ldr	r3, [pc, #292]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afe:	4b46      	ldr	r3, [pc, #280]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b04:	4a44      	ldr	r2, [pc, #272]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007b06:	f043 0304 	orr.w	r3, r3, #4
 8007b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b0e:	4b42      	ldr	r3, [pc, #264]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b24:	2302      	movs	r3, #2
 8007b26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b36:	2305      	movs	r3, #5
 8007b38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b3c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4837      	ldr	r0, [pc, #220]	@ (8007c20 <HAL_SPI_MspInit+0x294>)
 8007b44:	f000 fdaa 	bl	800869c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8007b48:	2306      	movs	r3, #6
 8007b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b54:	2300      	movs	r3, #0
 8007b56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b60:	2305      	movs	r3, #5
 8007b62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b66:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	482e      	ldr	r0, [pc, #184]	@ (8007c28 <HAL_SPI_MspInit+0x29c>)
 8007b6e:	f000 fd95 	bl	800869c <HAL_GPIO_Init>
}
 8007b72:	e04a      	b.n	8007c0a <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a2c      	ldr	r2, [pc, #176]	@ (8007c2c <HAL_SPI_MspInit+0x2a0>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d145      	bne.n	8007c0a <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8007b7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 fce3 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8007ba0:	f7ff fd3c 	bl	800761c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007baa:	4a1b      	ldr	r2, [pc, #108]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007bac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bb4:	4b18      	ldr	r3, [pc, #96]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bc2:	4b15      	ldr	r3, [pc, #84]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bc8:	4a13      	ldr	r2, [pc, #76]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007bca:	f043 0310 	orr.w	r3, r3, #16
 8007bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007bd2:	4b11      	ldr	r3, [pc, #68]	@ (8007c18 <HAL_SPI_MspInit+0x28c>)
 8007bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	60bb      	str	r3, [r7, #8]
 8007bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8007be0:	2364      	movs	r3, #100	@ 0x64
 8007be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007be6:	2302      	movs	r3, #2
 8007be8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bec:	2300      	movs	r3, #0
 8007bee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007bf8:	2305      	movs	r3, #5
 8007bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bfe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007c02:	4619      	mov	r1, r3
 8007c04:	480a      	ldr	r0, [pc, #40]	@ (8007c30 <HAL_SPI_MspInit+0x2a4>)
 8007c06:	f000 fd49 	bl	800869c <HAL_GPIO_Init>
}
 8007c0a:	bf00      	nop
 8007c0c:	37f8      	adds	r7, #248	@ 0xf8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40013000 	.word	0x40013000
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	58020400 	.word	0x58020400
 8007c20:	58020000 	.word	0x58020000
 8007c24:	40003800 	.word	0x40003800
 8007c28:	58020800 	.word	0x58020800
 8007c2c:	40013400 	.word	0x40013400
 8007c30:	58021000 	.word	0x58021000

08007c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b0ba      	sub	sp, #232	@ 0xe8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	60da      	str	r2, [r3, #12]
 8007c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007c4c:	f107 0318 	add.w	r3, r7, #24
 8007c50:	22b8      	movs	r2, #184	@ 0xb8
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f00b ffc9 	bl	8013bec <memset>
  if(huart->Instance==UART8)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a39      	ldr	r2, [pc, #228]	@ (8007d44 <HAL_UART_MspInit+0x110>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d16a      	bne.n	8007d3a <HAL_UART_MspInit+0x106>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007c64:	f04f 0202 	mov.w	r2, #2
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c76:	f107 0318 	add.w	r3, r7, #24
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f002 fc70 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8007c86:	f7ff fcc9 	bl	800761c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8007c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c90:	4a2d      	ldr	r2, [pc, #180]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ca0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ca8:	4b27      	ldr	r3, [pc, #156]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cae:	4a26      	ldr	r2, [pc, #152]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007cb0:	f043 0310 	orr.w	r3, r3, #16
 8007cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007cb8:	4b23      	ldr	r3, [pc, #140]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	613b      	str	r3, [r7, #16]
 8007cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cc6:	4b20      	ldr	r3, [pc, #128]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007cce:	f043 0308 	orr.w	r3, r3, #8
 8007cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007d48 <HAL_UART_MspInit+0x114>)
 8007cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    PD15     ------> UART8_RTS
    PD14     ------> UART8_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cea:	2302      	movs	r3, #2
 8007cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007cfc:	2308      	movs	r3, #8
 8007cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007d06:	4619      	mov	r1, r3
 8007d08:	4810      	ldr	r0, [pc, #64]	@ (8007d4c <HAL_UART_MspInit+0x118>)
 8007d0a:	f000 fcc7 	bl	800869c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8007d0e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d16:	2302      	movs	r3, #2
 8007d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007d28:	2308      	movs	r3, #8
 8007d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007d32:	4619      	mov	r1, r3
 8007d34:	4806      	ldr	r0, [pc, #24]	@ (8007d50 <HAL_UART_MspInit+0x11c>)
 8007d36:	f000 fcb1 	bl	800869c <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 8007d3a:	bf00      	nop
 8007d3c:	37e8      	adds	r7, #232	@ 0xe8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40007c00 	.word	0x40007c00
 8007d48:	58024400 	.word	0x58024400
 8007d4c:	58021000 	.word	0x58021000
 8007d50:	58020c00 	.word	0x58020c00

08007d54 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b0b8      	sub	sp, #224	@ 0xe0
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d5c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	609a      	str	r2, [r3, #8]
 8007d68:	60da      	str	r2, [r3, #12]
 8007d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d6c:	f107 0310 	add.w	r3, r7, #16
 8007d70:	22b8      	movs	r2, #184	@ 0xb8
 8007d72:	2100      	movs	r1, #0
 8007d74:	4618      	mov	r0, r3
 8007d76:	f00b ff39 	bl	8013bec <memset>
  if(husart->Instance==USART1)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a27      	ldr	r2, [pc, #156]	@ (8007e1c <HAL_USART_MspInit+0xc8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d146      	bne.n	8007e12 <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007d84:	f04f 0201 	mov.w	r2, #1
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d96:	f107 0310 	add.w	r3, r7, #16
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 fbe0 	bl	800a560 <HAL_RCCEx_PeriphCLKConfig>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8007da6:	f7ff fc39 	bl	800761c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007daa:	4b1d      	ldr	r3, [pc, #116]	@ (8007e20 <HAL_USART_MspInit+0xcc>)
 8007dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007db0:	4a1b      	ldr	r2, [pc, #108]	@ (8007e20 <HAL_USART_MspInit+0xcc>)
 8007db2:	f043 0310 	orr.w	r3, r3, #16
 8007db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007dba:	4b19      	ldr	r3, [pc, #100]	@ (8007e20 <HAL_USART_MspInit+0xcc>)
 8007dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc8:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <HAL_USART_MspInit+0xcc>)
 8007dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dce:	4a14      	ldr	r2, [pc, #80]	@ (8007e20 <HAL_USART_MspInit+0xcc>)
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007dd8:	4b11      	ldr	r3, [pc, #68]	@ (8007e20 <HAL_USART_MspInit+0xcc>)
 8007dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	60bb      	str	r3, [r7, #8]
 8007de4:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 8007de6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8007dea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dee:	2302      	movs	r3, #2
 8007df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007e00:	2307      	movs	r3, #7
 8007e02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e06:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4805      	ldr	r0, [pc, #20]	@ (8007e24 <HAL_USART_MspInit+0xd0>)
 8007e0e:	f000 fc45 	bl	800869c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8007e12:	bf00      	nop
 8007e14:	37e0      	adds	r7, #224	@ 0xe0
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	58024400 	.word	0x58024400
 8007e24:	58020000 	.word	0x58020000

08007e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007e2c:	bf00      	nop
 8007e2e:	e7fd      	b.n	8007e2c <NMI_Handler+0x4>

08007e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <HardFault_Handler+0x4>

08007e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e3c:	bf00      	nop
 8007e3e:	e7fd      	b.n	8007e3c <MemManage_Handler+0x4>

08007e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <BusFault_Handler+0x4>

08007e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e4c:	bf00      	nop
 8007e4e:	e7fd      	b.n	8007e4c <UsageFault_Handler+0x4>

08007e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e62:	bf00      	nop
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e70:	bf00      	nop
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e7e:	f000 fa6d 	bl	800835c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e82:	bf00      	nop
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e86:	b480      	push	{r7}
 8007e88:	af00      	add	r7, sp, #0
  return 1;
 8007e8a:	2301      	movs	r3, #1
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <_kill>:

int _kill(int pid, int sig)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007ea0:	f00b fef6 	bl	8013c90 <__errno>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2216      	movs	r2, #22
 8007ea8:	601a      	str	r2, [r3, #0]
  return -1;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <_exit>:

void _exit (int status)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff ffe7 	bl	8007e96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <_exit+0x12>

08007ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	e00a      	b.n	8007ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007ede:	f3af 8000 	nop.w
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	60ba      	str	r2, [r7, #8]
 8007eea:	b2ca      	uxtb	r2, r1
 8007eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	dbf0      	blt.n	8007ede <_read+0x12>
  }

  return len;
 8007efc:	687b      	ldr	r3, [r7, #4]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007f2e:	605a      	str	r2, [r3, #4]
  return 0;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <_isatty>:

int _isatty(int file)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007f46:	2301      	movs	r3, #1
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f78:	4a14      	ldr	r2, [pc, #80]	@ (8007fcc <_sbrk+0x5c>)
 8007f7a:	4b15      	ldr	r3, [pc, #84]	@ (8007fd0 <_sbrk+0x60>)
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f84:	4b13      	ldr	r3, [pc, #76]	@ (8007fd4 <_sbrk+0x64>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f8c:	4b11      	ldr	r3, [pc, #68]	@ (8007fd4 <_sbrk+0x64>)
 8007f8e:	4a12      	ldr	r2, [pc, #72]	@ (8007fd8 <_sbrk+0x68>)
 8007f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f92:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <_sbrk+0x64>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4413      	add	r3, r2
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d207      	bcs.n	8007fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007fa0:	f00b fe76 	bl	8013c90 <__errno>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	220c      	movs	r2, #12
 8007fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007faa:	f04f 33ff 	mov.w	r3, #4294967295
 8007fae:	e009      	b.n	8007fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fb0:	4b08      	ldr	r3, [pc, #32]	@ (8007fd4 <_sbrk+0x64>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007fb6:	4b07      	ldr	r3, [pc, #28]	@ (8007fd4 <_sbrk+0x64>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	4a05      	ldr	r2, [pc, #20]	@ (8007fd4 <_sbrk+0x64>)
 8007fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	24050000 	.word	0x24050000
 8007fd0:	00000400 	.word	0x00000400
 8007fd4:	24001834 	.word	0x24001834
 8007fd8:	24001b20 	.word	0x24001b20

08007fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007fe0:	4b32      	ldr	r3, [pc, #200]	@ (80080ac <SystemInit+0xd0>)
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe6:	4a31      	ldr	r2, [pc, #196]	@ (80080ac <SystemInit+0xd0>)
 8007fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80080b0 <SystemInit+0xd4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	2b06      	cmp	r3, #6
 8007ffa:	d807      	bhi.n	800800c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80080b0 <SystemInit+0xd4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f023 030f 	bic.w	r3, r3, #15
 8008004:	4a2a      	ldr	r2, [pc, #168]	@ (80080b0 <SystemInit+0xd4>)
 8008006:	f043 0307 	orr.w	r3, r3, #7
 800800a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800800c:	4b29      	ldr	r3, [pc, #164]	@ (80080b4 <SystemInit+0xd8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a28      	ldr	r2, [pc, #160]	@ (80080b4 <SystemInit+0xd8>)
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008018:	4b26      	ldr	r3, [pc, #152]	@ (80080b4 <SystemInit+0xd8>)
 800801a:	2200      	movs	r2, #0
 800801c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800801e:	4b25      	ldr	r3, [pc, #148]	@ (80080b4 <SystemInit+0xd8>)
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4924      	ldr	r1, [pc, #144]	@ (80080b4 <SystemInit+0xd8>)
 8008024:	4b24      	ldr	r3, [pc, #144]	@ (80080b8 <SystemInit+0xdc>)
 8008026:	4013      	ands	r3, r2
 8008028:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800802a:	4b21      	ldr	r3, [pc, #132]	@ (80080b0 <SystemInit+0xd4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008036:	4b1e      	ldr	r3, [pc, #120]	@ (80080b0 <SystemInit+0xd4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f023 030f 	bic.w	r3, r3, #15
 800803e:	4a1c      	ldr	r2, [pc, #112]	@ (80080b0 <SystemInit+0xd4>)
 8008040:	f043 0307 	orr.w	r3, r3, #7
 8008044:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008046:	4b1b      	ldr	r3, [pc, #108]	@ (80080b4 <SystemInit+0xd8>)
 8008048:	2200      	movs	r2, #0
 800804a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800804c:	4b19      	ldr	r3, [pc, #100]	@ (80080b4 <SystemInit+0xd8>)
 800804e:	2200      	movs	r2, #0
 8008050:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008052:	4b18      	ldr	r3, [pc, #96]	@ (80080b4 <SystemInit+0xd8>)
 8008054:	2200      	movs	r2, #0
 8008056:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008058:	4b16      	ldr	r3, [pc, #88]	@ (80080b4 <SystemInit+0xd8>)
 800805a:	4a18      	ldr	r2, [pc, #96]	@ (80080bc <SystemInit+0xe0>)
 800805c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800805e:	4b15      	ldr	r3, [pc, #84]	@ (80080b4 <SystemInit+0xd8>)
 8008060:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <SystemInit+0xe4>)
 8008062:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008064:	4b13      	ldr	r3, [pc, #76]	@ (80080b4 <SystemInit+0xd8>)
 8008066:	4a17      	ldr	r2, [pc, #92]	@ (80080c4 <SystemInit+0xe8>)
 8008068:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800806a:	4b12      	ldr	r3, [pc, #72]	@ (80080b4 <SystemInit+0xd8>)
 800806c:	2200      	movs	r2, #0
 800806e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008070:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <SystemInit+0xd8>)
 8008072:	4a14      	ldr	r2, [pc, #80]	@ (80080c4 <SystemInit+0xe8>)
 8008074:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008076:	4b0f      	ldr	r3, [pc, #60]	@ (80080b4 <SystemInit+0xd8>)
 8008078:	2200      	movs	r2, #0
 800807a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800807c:	4b0d      	ldr	r3, [pc, #52]	@ (80080b4 <SystemInit+0xd8>)
 800807e:	4a11      	ldr	r2, [pc, #68]	@ (80080c4 <SystemInit+0xe8>)
 8008080:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <SystemInit+0xd8>)
 8008084:	2200      	movs	r2, #0
 8008086:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008088:	4b0a      	ldr	r3, [pc, #40]	@ (80080b4 <SystemInit+0xd8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a09      	ldr	r2, [pc, #36]	@ (80080b4 <SystemInit+0xd8>)
 800808e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008092:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008094:	4b07      	ldr	r3, [pc, #28]	@ (80080b4 <SystemInit+0xd8>)
 8008096:	2200      	movs	r2, #0
 8008098:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800809a:	4b0b      	ldr	r3, [pc, #44]	@ (80080c8 <SystemInit+0xec>)
 800809c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80080a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80080a2:	bf00      	nop
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	e000ed00 	.word	0xe000ed00
 80080b0:	52002000 	.word	0x52002000
 80080b4:	58024400 	.word	0x58024400
 80080b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80080bc:	02020200 	.word	0x02020200
 80080c0:	01ff0000 	.word	0x01ff0000
 80080c4:	01010280 	.word	0x01010280
 80080c8:	52004000 	.word	0x52004000

080080cc <SensorManager_Init>:
	"BNO055",
	"BME680",
	"MS5607",
};

telemetry_init_status SensorManager_Init(void) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
	printf("Sensors Initialization routine started. \n");
 80080d2:	4821      	ldr	r0, [pc, #132]	@ (8008158 <SensorManager_Init+0x8c>)
 80080d4:	f00b fc8a 	bl	80139ec <puts>

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 80080d8:	2304      	movs	r3, #4
 80080da:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 80080dc:	2301      	movs	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 80080e4:	2300      	movs	r3, #0
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	e01a      	b.n	8008120 <SensorManager_Init+0x54>
        int8_t status = init_functions[i]();
 80080ea:	4a1c      	ldr	r2, [pc, #112]	@ (800815c <SensorManager_Init+0x90>)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f2:	4798      	blx	r3
 80080f4:	4603      	mov	r3, r0
 80080f6:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 80080f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <SensorManager_Init+0x4a>
            printf("%s initialization failed.\n", sensor_names[i]);
 8008100:	4a17      	ldr	r2, [pc, #92]	@ (8008160 <SensorManager_Init+0x94>)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008108:	4619      	mov	r1, r3
 800810a:	4816      	ldr	r0, [pc, #88]	@ (8008164 <SensorManager_Init+0x98>)
 800810c:	f00b fc06 	bl	801391c <iprintf>
            all_success = false;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
 8008114:	e001      	b.n	800811a <SensorManager_Init+0x4e>
        } else {
//        	printf("Success\n");
            any_success = true;
 8008116:	2301      	movs	r3, #1
 8008118:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3301      	adds	r3, #1
 800811e:	60bb      	str	r3, [r7, #8]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d3e0      	bcc.n	80080ea <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <SensorManager_Init+0x6c>
        printf("All sensors initialized successfully.\n");
 800812e:	480e      	ldr	r0, [pc, #56]	@ (8008168 <SensorManager_Init+0x9c>)
 8008130:	f00b fc5c 	bl	80139ec <puts>
        return TELEMETRY_INIT_SUCCESS;
 8008134:	2300      	movs	r3, #0
 8008136:	e00b      	b.n	8008150 <SensorManager_Init+0x84>
    } else if (any_success) {
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <SensorManager_Init+0x7c>
        printf("Partial initialization success.\n");
 800813e:	480b      	ldr	r0, [pc, #44]	@ (800816c <SensorManager_Init+0xa0>)
 8008140:	f00b fc54 	bl	80139ec <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 8008144:	2301      	movs	r3, #1
 8008146:	e003      	b.n	8008150 <SensorManager_Init+0x84>
    } else {
        printf("All sensors initialization failed.\n");
 8008148:	4809      	ldr	r0, [pc, #36]	@ (8008170 <SensorManager_Init+0xa4>)
 800814a:	f00b fc4f 	bl	80139ec <puts>
        return TELEMETRY_INIT_FAILURE;
 800814e:	2302      	movs	r3, #2
    }
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	080172a8 	.word	0x080172a8
 800815c:	24000160 	.word	0x24000160
 8008160:	24000170 	.word	0x24000170
 8008164:	080172d4 	.word	0x080172d4
 8008168:	080172f0 	.word	0x080172f0
 800816c:	08017318 	.word	0x08017318
 8008170:	08017338 	.word	0x08017338

08008174 <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 8008174:	b5b0      	push	{r4, r5, r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	61f8      	str	r0, [r7, #28]
    // Update data from each sensor
	telemetry.bmi323_data = bmi323_data_poll();
 800817c:	4c08      	ldr	r4, [pc, #32]	@ (80081a0 <SensorManager_UpdateData+0x2c>)
 800817e:	463b      	mov	r3, r7
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe f815 	bl	80061b0 <bmi323_data_poll>
 8008186:	3428      	adds	r4, #40	@ 0x28
 8008188:	463d      	mov	r5, r7
 800818a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800818c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800818e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008192:	e884 0003 	stmia.w	r4, {r0, r1}
//    telemetry.ms5607_data = MS5607_ReadData();
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    GPS_ReadData(&data->gps_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 8008196:	bf00      	nop
 8008198:	3720      	adds	r7, #32
 800819a:	46bd      	mov	sp, r7
 800819c:	bdb0      	pop	{r4, r5, r7, pc}
 800819e:	bf00      	nop
 80081a0:	24001838 	.word	0x24001838

080081a4 <delay_us_func>:

void delay_us_func(uint32_t period)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 80081ac:	e008      	b.n	80081c0 <delay_us_func+0x1c>
	{
		for(i = 0; i < 96; i++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	e002      	b.n	80081ba <delay_us_func+0x16>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b5f      	cmp	r3, #95	@ 0x5f
 80081be:	d9f9      	bls.n	80081b4 <delay_us_func+0x10>
	while(period--)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	1e5a      	subs	r2, r3, #1
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f1      	bne.n	80081ae <delay_us_func+0xa>
		{
			;
		}
	}
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <TestTelemetry>:

void TestTelemetry(){
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1000 ; i++){
 80081de:	2300      	movs	r3, #0
 80081e0:	607b      	str	r3, [r7, #4]
 80081e2:	e00f      	b.n	8008204 <TestTelemetry+0x2c>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 80081e4:	480c      	ldr	r0, [pc, #48]	@ (8008218 <TestTelemetry+0x40>)
 80081e6:	f7ff ffc5 	bl	8008174 <SensorManager_UpdateData>

	// Sensor Data Print
	bmi323_print_sensor_data(&telemetry.bmi323_data);
 80081ea:	480c      	ldr	r0, [pc, #48]	@ (800821c <TestTelemetry+0x44>)
 80081ec:	f7fe f85a 	bl	80062a4 <bmi323_print_sensor_data>
//	bno055_print_fusion_data(&telemetry.bno055_data);
//	ms5607_print_barometer_data(&telemetry.ms5607_data);
//	bme680_print_barometer_data(&telemetry.bme680_data);

	printf("// --------------------------------------------- // \n");
 80081f0:	480b      	ldr	r0, [pc, #44]	@ (8008220 <TestTelemetry+0x48>)
 80081f2:	f00b fbfb 	bl	80139ec <puts>

//    HAL_Delay(150);
    delay_us_func(50000);
 80081f6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80081fa:	f7ff ffd3 	bl	80081a4 <delay_us_func>
	for(int i = 0; i < 1000 ; i++){
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3301      	adds	r3, #1
 8008202:	607b      	str	r3, [r7, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800820a:	dbeb      	blt.n	80081e4 <TestTelemetry+0xc>
    	}
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	24001838 	.word	0x24001838
 800821c:	24001860 	.word	0x24001860
 8008220:	0801735c 	.word	0x0801735c

08008224 <Reset_Handler>:
 8008224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800825c <LoopFillZerobss+0xe>
 8008228:	f7ff fed8 	bl	8007fdc <SystemInit>
 800822c:	480c      	ldr	r0, [pc, #48]	@ (8008260 <LoopFillZerobss+0x12>)
 800822e:	490d      	ldr	r1, [pc, #52]	@ (8008264 <LoopFillZerobss+0x16>)
 8008230:	4a0d      	ldr	r2, [pc, #52]	@ (8008268 <LoopFillZerobss+0x1a>)
 8008232:	2300      	movs	r3, #0
 8008234:	e002      	b.n	800823c <LoopCopyDataInit>

08008236 <CopyDataInit>:
 8008236:	58d4      	ldr	r4, [r2, r3]
 8008238:	50c4      	str	r4, [r0, r3]
 800823a:	3304      	adds	r3, #4

0800823c <LoopCopyDataInit>:
 800823c:	18c4      	adds	r4, r0, r3
 800823e:	428c      	cmp	r4, r1
 8008240:	d3f9      	bcc.n	8008236 <CopyDataInit>
 8008242:	4a0a      	ldr	r2, [pc, #40]	@ (800826c <LoopFillZerobss+0x1e>)
 8008244:	4c0a      	ldr	r4, [pc, #40]	@ (8008270 <LoopFillZerobss+0x22>)
 8008246:	2300      	movs	r3, #0
 8008248:	e001      	b.n	800824e <LoopFillZerobss>

0800824a <FillZerobss>:
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	3204      	adds	r2, #4

0800824e <LoopFillZerobss>:
 800824e:	42a2      	cmp	r2, r4
 8008250:	d3fb      	bcc.n	800824a <FillZerobss>
 8008252:	f00b fd23 	bl	8013c9c <__libc_init_array>
 8008256:	f7fe fd84 	bl	8006d62 <main>
 800825a:	4770      	bx	lr
 800825c:	24050000 	.word	0x24050000
 8008260:	24000000 	.word	0x24000000
 8008264:	24000350 	.word	0x24000350
 8008268:	08017830 	.word	0x08017830
 800826c:	24000350 	.word	0x24000350
 8008270:	24001b1c 	.word	0x24001b1c

08008274 <ADC3_IRQHandler>:
 8008274:	e7fe      	b.n	8008274 <ADC3_IRQHandler>
	...

08008278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800827e:	2003      	movs	r0, #3
 8008280:	f000 f962 	bl	8008548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008284:	f001 ff96 	bl	800a1b4 <HAL_RCC_GetSysClockFreq>
 8008288:	4602      	mov	r2, r0
 800828a:	4b15      	ldr	r3, [pc, #84]	@ (80082e0 <HAL_Init+0x68>)
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	f003 030f 	and.w	r3, r3, #15
 8008294:	4913      	ldr	r1, [pc, #76]	@ (80082e4 <HAL_Init+0x6c>)
 8008296:	5ccb      	ldrb	r3, [r1, r3]
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082a2:	4b0f      	ldr	r3, [pc, #60]	@ (80082e0 <HAL_Init+0x68>)
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	4a0e      	ldr	r2, [pc, #56]	@ (80082e4 <HAL_Init+0x6c>)
 80082ac:	5cd3      	ldrb	r3, [r2, r3]
 80082ae:	f003 031f 	and.w	r3, r3, #31
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	fa22 f303 	lsr.w	r3, r2, r3
 80082b8:	4a0b      	ldr	r2, [pc, #44]	@ (80082e8 <HAL_Init+0x70>)
 80082ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082bc:	4a0b      	ldr	r2, [pc, #44]	@ (80082ec <HAL_Init+0x74>)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80082c2:	2000      	movs	r0, #0
 80082c4:	f000 f814 	bl	80082f0 <HAL_InitTick>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e002      	b.n	80082d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80082d2:	f7ff f9a9 	bl	8007628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	58024400 	.word	0x58024400
 80082e4:	08017394 	.word	0x08017394
 80082e8:	2400015c 	.word	0x2400015c
 80082ec:	24000158 	.word	0x24000158

080082f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80082f8:	4b15      	ldr	r3, [pc, #84]	@ (8008350 <HAL_InitTick+0x60>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e021      	b.n	8008348 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008304:	4b13      	ldr	r3, [pc, #76]	@ (8008354 <HAL_InitTick+0x64>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	4b11      	ldr	r3, [pc, #68]	@ (8008350 <HAL_InitTick+0x60>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	4619      	mov	r1, r3
 800830e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008312:	fbb3 f3f1 	udiv	r3, r3, r1
 8008316:	fbb2 f3f3 	udiv	r3, r2, r3
 800831a:	4618      	mov	r0, r3
 800831c:	f000 f939 	bl	8008592 <HAL_SYSTICK_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e00e      	b.n	8008348 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b0f      	cmp	r3, #15
 800832e:	d80a      	bhi.n	8008346 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008330:	2200      	movs	r2, #0
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	f000 f911 	bl	800855e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800833c:	4a06      	ldr	r2, [pc, #24]	@ (8008358 <HAL_InitTick+0x68>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e000      	b.n	8008348 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	24000184 	.word	0x24000184
 8008354:	24000158 	.word	0x24000158
 8008358:	24000180 	.word	0x24000180

0800835c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008360:	4b06      	ldr	r3, [pc, #24]	@ (800837c <HAL_IncTick+0x20>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	4b06      	ldr	r3, [pc, #24]	@ (8008380 <HAL_IncTick+0x24>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4413      	add	r3, r2
 800836c:	4a04      	ldr	r2, [pc, #16]	@ (8008380 <HAL_IncTick+0x24>)
 800836e:	6013      	str	r3, [r2, #0]
}
 8008370:	bf00      	nop
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	24000184 	.word	0x24000184
 8008380:	240019b8 	.word	0x240019b8

08008384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  return uwTick;
 8008388:	4b03      	ldr	r3, [pc, #12]	@ (8008398 <HAL_GetTick+0x14>)
 800838a:	681b      	ldr	r3, [r3, #0]
}
 800838c:	4618      	mov	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	240019b8 	.word	0x240019b8

0800839c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083a4:	f7ff ffee 	bl	8008384 <HAL_GetTick>
 80083a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d005      	beq.n	80083c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083b6:	4b0a      	ldr	r3, [pc, #40]	@ (80083e0 <HAL_Delay+0x44>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80083c2:	bf00      	nop
 80083c4:	f7ff ffde 	bl	8008384 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d8f7      	bhi.n	80083c4 <HAL_Delay+0x28>
  {
  }
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	24000184 	.word	0x24000184

080083e4 <__NVIC_SetPriorityGrouping>:
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008424 <__NVIC_SetPriorityGrouping+0x40>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008400:	4013      	ands	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800840c:	4b06      	ldr	r3, [pc, #24]	@ (8008428 <__NVIC_SetPriorityGrouping+0x44>)
 800840e:	4313      	orrs	r3, r2
 8008410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008412:	4a04      	ldr	r2, [pc, #16]	@ (8008424 <__NVIC_SetPriorityGrouping+0x40>)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	60d3      	str	r3, [r2, #12]
}
 8008418:	bf00      	nop
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	e000ed00 	.word	0xe000ed00
 8008428:	05fa0000 	.word	0x05fa0000

0800842c <__NVIC_GetPriorityGrouping>:
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <__NVIC_GetPriorityGrouping+0x18>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	0a1b      	lsrs	r3, r3, #8
 8008436:	f003 0307 	and.w	r3, r3, #7
}
 800843a:	4618      	mov	r0, r3
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	e000ed00 	.word	0xe000ed00

08008448 <__NVIC_SetPriority>:
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	6039      	str	r1, [r7, #0]
 8008452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008458:	2b00      	cmp	r3, #0
 800845a:	db0a      	blt.n	8008472 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	b2da      	uxtb	r2, r3
 8008460:	490c      	ldr	r1, [pc, #48]	@ (8008494 <__NVIC_SetPriority+0x4c>)
 8008462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008466:	0112      	lsls	r2, r2, #4
 8008468:	b2d2      	uxtb	r2, r2
 800846a:	440b      	add	r3, r1
 800846c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008470:	e00a      	b.n	8008488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	b2da      	uxtb	r2, r3
 8008476:	4908      	ldr	r1, [pc, #32]	@ (8008498 <__NVIC_SetPriority+0x50>)
 8008478:	88fb      	ldrh	r3, [r7, #6]
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	3b04      	subs	r3, #4
 8008480:	0112      	lsls	r2, r2, #4
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	440b      	add	r3, r1
 8008486:	761a      	strb	r2, [r3, #24]
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	e000e100 	.word	0xe000e100
 8008498:	e000ed00 	.word	0xe000ed00

0800849c <NVIC_EncodePriority>:
{
 800849c:	b480      	push	{r7}
 800849e:	b089      	sub	sp, #36	@ 0x24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	f1c3 0307 	rsb	r3, r3, #7
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	bf28      	it	cs
 80084ba:	2304      	movcs	r3, #4
 80084bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	3304      	adds	r3, #4
 80084c2:	2b06      	cmp	r3, #6
 80084c4:	d902      	bls.n	80084cc <NVIC_EncodePriority+0x30>
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	3b03      	subs	r3, #3
 80084ca:	e000      	b.n	80084ce <NVIC_EncodePriority+0x32>
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d0:	f04f 32ff 	mov.w	r2, #4294967295
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	43da      	mvns	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	401a      	ands	r2, r3
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084e4:	f04f 31ff 	mov.w	r1, #4294967295
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	fa01 f303 	lsl.w	r3, r1, r3
 80084ee:	43d9      	mvns	r1, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084f4:	4313      	orrs	r3, r2
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3724      	adds	r7, #36	@ 0x24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <SysTick_Config>:
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3b01      	subs	r3, #1
 8008510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008514:	d301      	bcc.n	800851a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8008516:	2301      	movs	r3, #1
 8008518:	e00f      	b.n	800853a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800851a:	4a0a      	ldr	r2, [pc, #40]	@ (8008544 <SysTick_Config+0x40>)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3b01      	subs	r3, #1
 8008520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008522:	210f      	movs	r1, #15
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	f7ff ff8e 	bl	8008448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800852c:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <SysTick_Config+0x40>)
 800852e:	2200      	movs	r2, #0
 8008530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008532:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <SysTick_Config+0x40>)
 8008534:	2207      	movs	r2, #7
 8008536:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	e000e010 	.word	0xe000e010

08008548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ff47 	bl	80083e4 <__NVIC_SetPriorityGrouping>
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	4603      	mov	r3, r0
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800856c:	f7ff ff5e 	bl	800842c <__NVIC_GetPriorityGrouping>
 8008570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	6978      	ldr	r0, [r7, #20]
 8008578:	f7ff ff90 	bl	800849c <NVIC_EncodePriority>
 800857c:	4602      	mov	r2, r0
 800857e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff ff5f 	bl	8008448 <__NVIC_SetPriority>
}
 800858a:	bf00      	nop
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff ffb2 	bl	8008504 <SysTick_Config>
 80085a0:	4603      	mov	r3, r0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80085b0:	f3bf 8f5f 	dmb	sy
}
 80085b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80085b6:	4b07      	ldr	r3, [pc, #28]	@ (80085d4 <HAL_MPU_Disable+0x28>)
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	4a06      	ldr	r2, [pc, #24]	@ (80085d4 <HAL_MPU_Disable+0x28>)
 80085bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80085c2:	4b05      	ldr	r3, [pc, #20]	@ (80085d8 <HAL_MPU_Disable+0x2c>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	605a      	str	r2, [r3, #4]
}
 80085c8:	bf00      	nop
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	e000ed00 	.word	0xe000ed00
 80085d8:	e000ed90 	.word	0xe000ed90

080085dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80085e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008614 <HAL_MPU_Enable+0x38>)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80085ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008618 <HAL_MPU_Enable+0x3c>)
 80085f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f2:	4a09      	ldr	r2, [pc, #36]	@ (8008618 <HAL_MPU_Enable+0x3c>)
 80085f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80085fa:	f3bf 8f4f 	dsb	sy
}
 80085fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008600:	f3bf 8f6f 	isb	sy
}
 8008604:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	e000ed90 	.word	0xe000ed90
 8008618:	e000ed00 	.word	0xe000ed00

0800861c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	785a      	ldrb	r2, [r3, #1]
 8008628:	4b1b      	ldr	r3, [pc, #108]	@ (8008698 <HAL_MPU_ConfigRegion+0x7c>)
 800862a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800862c:	4b1a      	ldr	r3, [pc, #104]	@ (8008698 <HAL_MPU_ConfigRegion+0x7c>)
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	4a19      	ldr	r2, [pc, #100]	@ (8008698 <HAL_MPU_ConfigRegion+0x7c>)
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008638:	4a17      	ldr	r2, [pc, #92]	@ (8008698 <HAL_MPU_ConfigRegion+0x7c>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7b1b      	ldrb	r3, [r3, #12]
 8008644:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7adb      	ldrb	r3, [r3, #11]
 800864a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800864c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	7a9b      	ldrb	r3, [r3, #10]
 8008652:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7b5b      	ldrb	r3, [r3, #13]
 800865a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800865c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7b9b      	ldrb	r3, [r3, #14]
 8008662:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008664:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7bdb      	ldrb	r3, [r3, #15]
 800866a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800866c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7a5b      	ldrb	r3, [r3, #9]
 8008672:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008674:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7a1b      	ldrb	r3, [r3, #8]
 800867a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800867c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008684:	4a04      	ldr	r2, [pc, #16]	@ (8008698 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008686:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008688:	6113      	str	r3, [r2, #16]
}
 800868a:	bf00      	nop
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	e000ed90 	.word	0xe000ed90

0800869c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	@ 0x24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80086aa:	4b86      	ldr	r3, [pc, #536]	@ (80088c4 <HAL_GPIO_Init+0x228>)
 80086ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086ae:	e18c      	b.n	80089ca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	2101      	movs	r1, #1
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	fa01 f303 	lsl.w	r3, r1, r3
 80086bc:	4013      	ands	r3, r2
 80086be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 817e 	beq.w	80089c4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d005      	beq.n	80086e0 <HAL_GPIO_Init+0x44>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d130      	bne.n	8008742 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	2203      	movs	r2, #3
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	43db      	mvns	r3, r3
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	4013      	ands	r3, r2
 80086f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	4313      	orrs	r3, r2
 8008708:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008716:	2201      	movs	r2, #1
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	43db      	mvns	r3, r3
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	4013      	ands	r3, r2
 8008724:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	091b      	lsrs	r3, r3, #4
 800872c:	f003 0201 	and.w	r2, r3, #1
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	fa02 f303 	lsl.w	r3, r2, r3
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	4313      	orrs	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	2b03      	cmp	r3, #3
 800874c:	d017      	beq.n	800877e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	2203      	movs	r2, #3
 800875a:	fa02 f303 	lsl.w	r3, r2, r3
 800875e:	43db      	mvns	r3, r3
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	4013      	ands	r3, r2
 8008764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	4313      	orrs	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d123      	bne.n	80087d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	08da      	lsrs	r2, r3, #3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3208      	adds	r2, #8
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	220f      	movs	r2, #15
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	43db      	mvns	r3, r3
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	4013      	ands	r3, r2
 80087ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	691a      	ldr	r2, [r3, #16]
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	08da      	lsrs	r2, r3, #3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3208      	adds	r2, #8
 80087cc:	69b9      	ldr	r1, [r7, #24]
 80087ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	2203      	movs	r2, #3
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	43db      	mvns	r3, r3
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	4013      	ands	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f003 0203 	and.w	r2, r3, #3
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 80d8 	beq.w	80089c4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008814:	4b2c      	ldr	r3, [pc, #176]	@ (80088c8 <HAL_GPIO_Init+0x22c>)
 8008816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800881a:	4a2b      	ldr	r2, [pc, #172]	@ (80088c8 <HAL_GPIO_Init+0x22c>)
 800881c:	f043 0302 	orr.w	r3, r3, #2
 8008820:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008824:	4b28      	ldr	r3, [pc, #160]	@ (80088c8 <HAL_GPIO_Init+0x22c>)
 8008826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008832:	4a26      	ldr	r2, [pc, #152]	@ (80088cc <HAL_GPIO_Init+0x230>)
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	089b      	lsrs	r3, r3, #2
 8008838:	3302      	adds	r3, #2
 800883a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800883e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	220f      	movs	r2, #15
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	43db      	mvns	r3, r3
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	4013      	ands	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a1d      	ldr	r2, [pc, #116]	@ (80088d0 <HAL_GPIO_Init+0x234>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d04a      	beq.n	80088f4 <HAL_GPIO_Init+0x258>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a1c      	ldr	r2, [pc, #112]	@ (80088d4 <HAL_GPIO_Init+0x238>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d02b      	beq.n	80088be <HAL_GPIO_Init+0x222>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <HAL_GPIO_Init+0x23c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d025      	beq.n	80088ba <HAL_GPIO_Init+0x21e>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a1a      	ldr	r2, [pc, #104]	@ (80088dc <HAL_GPIO_Init+0x240>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d01f      	beq.n	80088b6 <HAL_GPIO_Init+0x21a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a19      	ldr	r2, [pc, #100]	@ (80088e0 <HAL_GPIO_Init+0x244>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d019      	beq.n	80088b2 <HAL_GPIO_Init+0x216>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a18      	ldr	r2, [pc, #96]	@ (80088e4 <HAL_GPIO_Init+0x248>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d013      	beq.n	80088ae <HAL_GPIO_Init+0x212>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a17      	ldr	r2, [pc, #92]	@ (80088e8 <HAL_GPIO_Init+0x24c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00d      	beq.n	80088aa <HAL_GPIO_Init+0x20e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a16      	ldr	r2, [pc, #88]	@ (80088ec <HAL_GPIO_Init+0x250>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d007      	beq.n	80088a6 <HAL_GPIO_Init+0x20a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a15      	ldr	r2, [pc, #84]	@ (80088f0 <HAL_GPIO_Init+0x254>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d101      	bne.n	80088a2 <HAL_GPIO_Init+0x206>
 800889e:	2309      	movs	r3, #9
 80088a0:	e029      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088a2:	230a      	movs	r3, #10
 80088a4:	e027      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088a6:	2307      	movs	r3, #7
 80088a8:	e025      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088aa:	2306      	movs	r3, #6
 80088ac:	e023      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088ae:	2305      	movs	r3, #5
 80088b0:	e021      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088b2:	2304      	movs	r3, #4
 80088b4:	e01f      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088b6:	2303      	movs	r3, #3
 80088b8:	e01d      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e01b      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088be:	2301      	movs	r3, #1
 80088c0:	e019      	b.n	80088f6 <HAL_GPIO_Init+0x25a>
 80088c2:	bf00      	nop
 80088c4:	58000080 	.word	0x58000080
 80088c8:	58024400 	.word	0x58024400
 80088cc:	58000400 	.word	0x58000400
 80088d0:	58020000 	.word	0x58020000
 80088d4:	58020400 	.word	0x58020400
 80088d8:	58020800 	.word	0x58020800
 80088dc:	58020c00 	.word	0x58020c00
 80088e0:	58021000 	.word	0x58021000
 80088e4:	58021400 	.word	0x58021400
 80088e8:	58021800 	.word	0x58021800
 80088ec:	58021c00 	.word	0x58021c00
 80088f0:	58022400 	.word	0x58022400
 80088f4:	2300      	movs	r3, #0
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	f002 0203 	and.w	r2, r2, #3
 80088fc:	0092      	lsls	r2, r2, #2
 80088fe:	4093      	lsls	r3, r2
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	4313      	orrs	r3, r2
 8008904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008906:	4938      	ldr	r1, [pc, #224]	@ (80089e8 <HAL_GPIO_Init+0x34c>)
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	089b      	lsrs	r3, r3, #2
 800890c:	3302      	adds	r3, #2
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	43db      	mvns	r3, r3
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	4013      	ands	r3, r2
 8008924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	4313      	orrs	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800893a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	43db      	mvns	r3, r3
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	4013      	ands	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4313      	orrs	r3, r2
 8008966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	43db      	mvns	r3, r3
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	4013      	ands	r3, r2
 800897e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	4313      	orrs	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	43db      	mvns	r3, r3
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	4013      	ands	r3, r2
 80089a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	3301      	adds	r3, #1
 80089c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f47f ae6b 	bne.w	80086b0 <HAL_GPIO_Init+0x14>
  }
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	3724      	adds	r7, #36	@ 0x24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	58000400 	.word	0x58000400

080089ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	887b      	ldrh	r3, [r7, #2]
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a04:	2301      	movs	r3, #1
 8008a06:	73fb      	strb	r3, [r7, #15]
 8008a08:	e001      	b.n	8008a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	807b      	strh	r3, [r7, #2]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a2c:	787b      	ldrb	r3, [r7, #1]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a32:	887a      	ldrh	r2, [r7, #2]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a38:	e003      	b.n	8008a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a3a:	887b      	ldrh	r3, [r7, #2]
 8008a3c:	041a      	lsls	r2, r3, #16
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	619a      	str	r2, [r3, #24]
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e08b      	b.n	8008b7a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe fdf0 	bl	800765c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	@ 0x24
 8008a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0201 	bic.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008aa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ab0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d107      	bne.n	8008aca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689a      	ldr	r2, [r3, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ac6:	609a      	str	r2, [r3, #8]
 8008ac8:	e006      	b.n	8008ad8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008ad6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d108      	bne.n	8008af2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008aee:	605a      	str	r2, [r3, #4]
 8008af0:	e007      	b.n	8008b02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6859      	ldr	r1, [r3, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008b84 <HAL_I2C_Init+0x134>)
 8008b0e:	430b      	orrs	r3, r1
 8008b10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691a      	ldr	r2, [r3, #16]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	69d9      	ldr	r1, [r3, #28]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0201 	orr.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2220      	movs	r2, #32
 8008b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	02008000 	.word	0x02008000

08008b88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	461a      	mov	r2, r3
 8008b94:	460b      	mov	r3, r1
 8008b96:	817b      	strh	r3, [r7, #10]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	f040 80fd 	bne.w	8008da4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_I2C_Master_Transmit+0x30>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e0f6      	b.n	8008da6 <HAL_I2C_Master_Transmit+0x21e>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008bc0:	f7ff fbe0 	bl	8008384 <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	2319      	movs	r3, #25
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 fa0a 	bl	8008fec <I2C_WaitOnFlagUntilTimeout>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e0e1      	b.n	8008da6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2221      	movs	r2, #33	@ 0x21
 8008be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2210      	movs	r2, #16
 8008bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	893a      	ldrh	r2, [r7, #8]
 8008c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2bff      	cmp	r3, #255	@ 0xff
 8008c12:	d906      	bls.n	8008c22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	22ff      	movs	r2, #255	@ 0xff
 8008c18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008c1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e007      	b.n	8008c32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008c2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d024      	beq.n	8008c84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3e:	781a      	ldrb	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	3301      	adds	r3, #1
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	8979      	ldrh	r1, [r7, #10]
 8008c76:	4b4e      	ldr	r3, [pc, #312]	@ (8008db0 <HAL_I2C_Master_Transmit+0x228>)
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 fc05 	bl	800948c <I2C_TransferConfig>
 8008c82:	e066      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	8979      	ldrh	r1, [r7, #10]
 8008c8c:	4b48      	ldr	r3, [pc, #288]	@ (8008db0 <HAL_I2C_Master_Transmit+0x228>)
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fbfa 	bl	800948c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008c98:	e05b      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	6a39      	ldr	r1, [r7, #32]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 f9fd 	bl	800909e <I2C_WaitOnTXISFlagUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e07b      	b.n	8008da6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	781a      	ldrb	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d034      	beq.n	8008d52 <HAL_I2C_Master_Transmit+0x1ca>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d130      	bne.n	8008d52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2180      	movs	r1, #128	@ 0x80
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f976 	bl	8008fec <I2C_WaitOnFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e04d      	b.n	8008da6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	2bff      	cmp	r3, #255	@ 0xff
 8008d12:	d90e      	bls.n	8008d32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	22ff      	movs	r2, #255	@ 0xff
 8008d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	8979      	ldrh	r1, [r7, #10]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fbae 	bl	800948c <I2C_TransferConfig>
 8008d30:	e00f      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	8979      	ldrh	r1, [r7, #10]
 8008d44:	2300      	movs	r3, #0
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fb9d 	bl	800948c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d19e      	bne.n	8008c9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	6a39      	ldr	r1, [r7, #32]
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f9e3 	bl	800912c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e01a      	b.n	8008da6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2220      	movs	r2, #32
 8008d76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <HAL_I2C_Master_Transmit+0x22c>)
 8008d84:	400b      	ands	r3, r1
 8008d86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	e000      	b.n	8008da6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008da4:	2302      	movs	r3, #2
  }
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	80002000 	.word	0x80002000
 8008db4:	fe00e800 	.word	0xfe00e800

08008db8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	817b      	strh	r3, [r7, #10]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	f040 80db 	bne.w	8008f90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_I2C_Master_Receive+0x30>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e0d4      	b.n	8008f92 <HAL_I2C_Master_Receive+0x1da>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008df0:	f7ff fac8 	bl	8008384 <HAL_GetTick>
 8008df4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2319      	movs	r3, #25
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f8f2 	bl	8008fec <I2C_WaitOnFlagUntilTimeout>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e0bf      	b.n	8008f92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2222      	movs	r2, #34	@ 0x22
 8008e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	893a      	ldrh	r2, [r7, #8]
 8008e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2bff      	cmp	r3, #255	@ 0xff
 8008e42:	d90e      	bls.n	8008e62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	22ff      	movs	r2, #255	@ 0xff
 8008e48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	8979      	ldrh	r1, [r7, #10]
 8008e52:	4b52      	ldr	r3, [pc, #328]	@ (8008f9c <HAL_I2C_Master_Receive+0x1e4>)
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fb16 	bl	800948c <I2C_TransferConfig>
 8008e60:	e06d      	b.n	8008f3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	8979      	ldrh	r1, [r7, #10]
 8008e74:	4b49      	ldr	r3, [pc, #292]	@ (8008f9c <HAL_I2C_Master_Receive+0x1e4>)
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fb05 	bl	800948c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008e82:	e05c      	b.n	8008f3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	6a39      	ldr	r1, [r7, #32]
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 f993 	bl	80091b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e07c      	b.n	8008f92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d034      	beq.n	8008f3e <HAL_I2C_Master_Receive+0x186>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d130      	bne.n	8008f3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2180      	movs	r1, #128	@ 0x80
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f880 	bl	8008fec <I2C_WaitOnFlagUntilTimeout>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e04d      	b.n	8008f92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2bff      	cmp	r3, #255	@ 0xff
 8008efe:	d90e      	bls.n	8008f1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	22ff      	movs	r2, #255	@ 0xff
 8008f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	8979      	ldrh	r1, [r7, #10]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 fab8 	bl	800948c <I2C_TransferConfig>
 8008f1c:	e00f      	b.n	8008f3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	8979      	ldrh	r1, [r7, #10]
 8008f30:	2300      	movs	r3, #0
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 faa7 	bl	800948c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d19d      	bne.n	8008e84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	6a39      	ldr	r1, [r7, #32]
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 f8ed 	bl	800912c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e01a      	b.n	8008f92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2220      	movs	r2, #32
 8008f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6859      	ldr	r1, [r3, #4]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa0 <HAL_I2C_Master_Receive+0x1e8>)
 8008f70:	400b      	ands	r3, r1
 8008f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e000      	b.n	8008f92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008f90:	2302      	movs	r3, #2
  }
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	80002400 	.word	0x80002400
 8008fa0:	fe00e800 	.word	0xfe00e800

08008fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d103      	bne.n	8008fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d007      	beq.n	8008fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	699a      	ldr	r2, [r3, #24]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	619a      	str	r2, [r3, #24]
  }
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ffc:	e03b      	b.n	8009076 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f962 	bl	80092cc <I2C_IsErrorOccurred>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e041      	b.n	8009096 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009018:	d02d      	beq.n	8009076 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800901a:	f7ff f9b3 	bl	8008384 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d302      	bcc.n	8009030 <I2C_WaitOnFlagUntilTimeout+0x44>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d122      	bne.n	8009076 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699a      	ldr	r2, [r3, #24]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4013      	ands	r3, r2
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	429a      	cmp	r2, r3
 800903e:	bf0c      	ite	eq
 8009040:	2301      	moveq	r3, #1
 8009042:	2300      	movne	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	429a      	cmp	r2, r3
 800904c:	d113      	bne.n	8009076 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009052:	f043 0220 	orr.w	r2, r3, #32
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e00f      	b.n	8009096 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699a      	ldr	r2, [r3, #24]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	4013      	ands	r3, r2
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	429a      	cmp	r2, r3
 8009084:	bf0c      	ite	eq
 8009086:	2301      	moveq	r3, #1
 8009088:	2300      	movne	r3, #0
 800908a:	b2db      	uxtb	r3, r3
 800908c:	461a      	mov	r2, r3
 800908e:	79fb      	ldrb	r3, [r7, #7]
 8009090:	429a      	cmp	r2, r3
 8009092:	d0b4      	beq.n	8008ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090aa:	e033      	b.n	8009114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f90b 	bl	80092cc <I2C_IsErrorOccurred>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e031      	b.n	8009124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c6:	d025      	beq.n	8009114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090c8:	f7ff f95c 	bl	8008384 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d302      	bcc.n	80090de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d11a      	bne.n	8009114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d013      	beq.n	8009114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f0:	f043 0220 	orr.w	r2, r3, #32
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e007      	b.n	8009124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b02      	cmp	r3, #2
 8009120:	d1c4      	bne.n	80090ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009138:	e02f      	b.n	800919a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	68b9      	ldr	r1, [r7, #8]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 f8c4 	bl	80092cc <I2C_IsErrorOccurred>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e02d      	b.n	80091aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800914e:	f7ff f919 	bl	8008384 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	429a      	cmp	r2, r3
 800915c:	d302      	bcc.n	8009164 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d11a      	bne.n	800919a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b20      	cmp	r3, #32
 8009170:	d013      	beq.n	800919a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009176:	f043 0220 	orr.w	r2, r3, #32
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2220      	movs	r2, #32
 8009182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e007      	b.n	80091aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d1c8      	bne.n	800913a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80091c4:	e071      	b.n	80092aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f87e 	bl	80092cc <I2C_IsErrorOccurred>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d13b      	bne.n	8009260 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d138      	bne.n	8009260 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d105      	bne.n	8009208 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	f003 0310 	and.w	r3, r3, #16
 8009212:	2b10      	cmp	r3, #16
 8009214:	d121      	bne.n	800925a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2210      	movs	r2, #16
 800921c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2204      	movs	r2, #4
 8009222:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2220      	movs	r2, #32
 800922a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6859      	ldr	r1, [r3, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	4b24      	ldr	r3, [pc, #144]	@ (80092c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009238:	400b      	ands	r3, r1
 800923a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	75fb      	strb	r3, [r7, #23]
 8009258:	e002      	b.n	8009260 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009260:	f7ff f890 	bl	8008384 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	429a      	cmp	r2, r3
 800926e:	d302      	bcc.n	8009276 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d119      	bne.n	80092aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d116      	bne.n	80092aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b04      	cmp	r3, #4
 8009288:	d00f      	beq.n	80092aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928e:	f043 0220 	orr.w	r2, r3, #32
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2220      	movs	r2, #32
 800929a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d002      	beq.n	80092be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d083      	beq.n	80091c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80092be:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	fe00e800 	.word	0xfe00e800

080092cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	@ 0x28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d068      	beq.n	80093ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2210      	movs	r2, #16
 80092fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009300:	e049      	b.n	8009396 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009308:	d045      	beq.n	8009396 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800930a:	f7ff f83b 	bl	8008384 <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	429a      	cmp	r2, r3
 8009318:	d302      	bcc.n	8009320 <I2C_IsErrorOccurred+0x54>
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d13a      	bne.n	8009396 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800932a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009332:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800933e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009342:	d121      	bne.n	8009388 <I2C_IsErrorOccurred+0xbc>
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800934a:	d01d      	beq.n	8009388 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800934c:	7cfb      	ldrb	r3, [r7, #19]
 800934e:	2b20      	cmp	r3, #32
 8009350:	d01a      	beq.n	8009388 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009360:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009362:	f7ff f80f 	bl	8008384 <HAL_GetTick>
 8009366:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009368:	e00e      	b.n	8009388 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800936a:	f7ff f80b 	bl	8008384 <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b19      	cmp	r3, #25
 8009376:	d907      	bls.n	8009388 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	f043 0320 	orr.w	r3, r3, #32
 800937e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009386:	e006      	b.n	8009396 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b20      	cmp	r3, #32
 8009394:	d1e9      	bne.n	800936a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f003 0320 	and.w	r3, r3, #32
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d003      	beq.n	80093ac <I2C_IsErrorOccurred+0xe0>
 80093a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0aa      	beq.n	8009302 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80093ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d103      	bne.n	80093bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2220      	movs	r2, #32
 80093ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	f043 0304 	orr.w	r3, r3, #4
 80093c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	f043 0301 	orr.w	r3, r3, #1
 80093e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	f043 0308 	orr.w	r3, r3, #8
 8009404:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800940e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	f043 0302 	orr.w	r3, r3, #2
 8009426:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009430:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01c      	beq.n	800947a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff fdaf 	bl	8008fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6859      	ldr	r1, [r3, #4]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <I2C_IsErrorOccurred+0x1bc>)
 8009452:	400b      	ands	r3, r1
 8009454:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	431a      	orrs	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800947a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800947e:	4618      	mov	r0, r3
 8009480:	3728      	adds	r7, #40	@ 0x28
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	fe00e800 	.word	0xfe00e800

0800948c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	817b      	strh	r3, [r7, #10]
 800949a:	4613      	mov	r3, r2
 800949c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800949e:	897b      	ldrh	r3, [r7, #10]
 80094a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80094a4:	7a7b      	ldrb	r3, [r7, #9]
 80094a6:	041b      	lsls	r3, r3, #16
 80094a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	0d5b      	lsrs	r3, r3, #21
 80094c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80094ca:	4b08      	ldr	r3, [pc, #32]	@ (80094ec <I2C_TransferConfig+0x60>)
 80094cc:	430b      	orrs	r3, r1
 80094ce:	43db      	mvns	r3, r3
 80094d0:	ea02 0103 	and.w	r1, r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	430a      	orrs	r2, r1
 80094dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80094de:	bf00      	nop
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	03ff63ff 	.word	0x03ff63ff

080094f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b20      	cmp	r3, #32
 8009504:	d138      	bne.n	8009578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800950c:	2b01      	cmp	r3, #1
 800950e:	d101      	bne.n	8009514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009510:	2302      	movs	r3, #2
 8009512:	e032      	b.n	800957a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2224      	movs	r2, #36	@ 0x24
 8009520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0201 	bic.w	r2, r2, #1
 8009532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6819      	ldr	r1, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e000      	b.n	800957a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009578:	2302      	movs	r3, #2
  }
}
 800957a:	4618      	mov	r0, r3
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009586:	b480      	push	{r7}
 8009588:	b085      	sub	sp, #20
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b20      	cmp	r3, #32
 800959a:	d139      	bne.n	8009610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e033      	b.n	8009612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2224      	movs	r2, #36	@ 0x24
 80095b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80095d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	021b      	lsls	r3, r3, #8
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	e000      	b.n	8009612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009610:	2302      	movs	r3, #2
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
	...

08009620 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009628:	4b19      	ldr	r3, [pc, #100]	@ (8009690 <HAL_PWREx_ConfigSupply+0x70>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b04      	cmp	r3, #4
 8009632:	d00a      	beq.n	800964a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009634:	4b16      	ldr	r3, [pc, #88]	@ (8009690 <HAL_PWREx_ConfigSupply+0x70>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	429a      	cmp	r2, r3
 8009640:	d001      	beq.n	8009646 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e01f      	b.n	8009686 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	e01d      	b.n	8009686 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800964a:	4b11      	ldr	r3, [pc, #68]	@ (8009690 <HAL_PWREx_ConfigSupply+0x70>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f023 0207 	bic.w	r2, r3, #7
 8009652:	490f      	ldr	r1, [pc, #60]	@ (8009690 <HAL_PWREx_ConfigSupply+0x70>)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4313      	orrs	r3, r2
 8009658:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800965a:	f7fe fe93 	bl	8008384 <HAL_GetTick>
 800965e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009660:	e009      	b.n	8009676 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009662:	f7fe fe8f 	bl	8008384 <HAL_GetTick>
 8009666:	4602      	mov	r2, r0
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009670:	d901      	bls.n	8009676 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e007      	b.n	8009686 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009676:	4b06      	ldr	r3, [pc, #24]	@ (8009690 <HAL_PWREx_ConfigSupply+0x70>)
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800967e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009682:	d1ee      	bne.n	8009662 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	58024800 	.word	0x58024800

08009694 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08c      	sub	sp, #48	@ 0x30
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e3c8      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8087 	beq.w	80097c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096b4:	4b88      	ldr	r3, [pc, #544]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096be:	4b86      	ldr	r3, [pc, #536]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80096c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80096c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c6:	2b10      	cmp	r3, #16
 80096c8:	d007      	beq.n	80096da <HAL_RCC_OscConfig+0x46>
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	2b18      	cmp	r3, #24
 80096ce:	d110      	bne.n	80096f2 <HAL_RCC_OscConfig+0x5e>
 80096d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d2:	f003 0303 	and.w	r3, r3, #3
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d10b      	bne.n	80096f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096da:	4b7f      	ldr	r3, [pc, #508]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d06c      	beq.n	80097c0 <HAL_RCC_OscConfig+0x12c>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d168      	bne.n	80097c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e3a2      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096fa:	d106      	bne.n	800970a <HAL_RCC_OscConfig+0x76>
 80096fc:	4b76      	ldr	r3, [pc, #472]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a75      	ldr	r2, [pc, #468]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	e02e      	b.n	8009768 <HAL_RCC_OscConfig+0xd4>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10c      	bne.n	800972c <HAL_RCC_OscConfig+0x98>
 8009712:	4b71      	ldr	r3, [pc, #452]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a70      	ldr	r2, [pc, #448]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	4b6e      	ldr	r3, [pc, #440]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a6d      	ldr	r2, [pc, #436]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	e01d      	b.n	8009768 <HAL_RCC_OscConfig+0xd4>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009734:	d10c      	bne.n	8009750 <HAL_RCC_OscConfig+0xbc>
 8009736:	4b68      	ldr	r3, [pc, #416]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a67      	ldr	r2, [pc, #412]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 800973c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	4b65      	ldr	r3, [pc, #404]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a64      	ldr	r2, [pc, #400]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	e00b      	b.n	8009768 <HAL_RCC_OscConfig+0xd4>
 8009750:	4b61      	ldr	r3, [pc, #388]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a60      	ldr	r2, [pc, #384]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	4b5e      	ldr	r3, [pc, #376]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a5d      	ldr	r2, [pc, #372]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d013      	beq.n	8009798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009770:	f7fe fe08 	bl	8008384 <HAL_GetTick>
 8009774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009776:	e008      	b.n	800978a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009778:	f7fe fe04 	bl	8008384 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	2b64      	cmp	r3, #100	@ 0x64
 8009784:	d901      	bls.n	800978a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e356      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800978a:	4b53      	ldr	r3, [pc, #332]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0f0      	beq.n	8009778 <HAL_RCC_OscConfig+0xe4>
 8009796:	e014      	b.n	80097c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009798:	f7fe fdf4 	bl	8008384 <HAL_GetTick>
 800979c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800979e:	e008      	b.n	80097b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097a0:	f7fe fdf0 	bl	8008384 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b64      	cmp	r3, #100	@ 0x64
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e342      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097b2:	4b49      	ldr	r3, [pc, #292]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1f0      	bne.n	80097a0 <HAL_RCC_OscConfig+0x10c>
 80097be:	e000      	b.n	80097c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 808c 	beq.w	80098e8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097d0:	4b41      	ldr	r3, [pc, #260]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097da:	4b3f      	ldr	r3, [pc, #252]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <HAL_RCC_OscConfig+0x162>
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	2b18      	cmp	r3, #24
 80097ea:	d137      	bne.n	800985c <HAL_RCC_OscConfig+0x1c8>
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d132      	bne.n	800985c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097f6:	4b38      	ldr	r3, [pc, #224]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <HAL_RCC_OscConfig+0x17a>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e314      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800980e:	4b32      	ldr	r3, [pc, #200]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f023 0219 	bic.w	r2, r3, #25
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	492f      	ldr	r1, [pc, #188]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 800981c:	4313      	orrs	r3, r2
 800981e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009820:	f7fe fdb0 	bl	8008384 <HAL_GetTick>
 8009824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009826:	e008      	b.n	800983a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009828:	f7fe fdac 	bl	8008384 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b02      	cmp	r3, #2
 8009834:	d901      	bls.n	800983a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e2fe      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800983a:	4b27      	ldr	r3, [pc, #156]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0f0      	beq.n	8009828 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009846:	4b24      	ldr	r3, [pc, #144]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	061b      	lsls	r3, r3, #24
 8009854:	4920      	ldr	r1, [pc, #128]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009856:	4313      	orrs	r3, r2
 8009858:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800985a:	e045      	b.n	80098e8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d026      	beq.n	80098b2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009864:	4b1c      	ldr	r3, [pc, #112]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f023 0219 	bic.w	r2, r3, #25
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	4919      	ldr	r1, [pc, #100]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009872:	4313      	orrs	r3, r2
 8009874:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009876:	f7fe fd85 	bl	8008384 <HAL_GetTick>
 800987a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800987c:	e008      	b.n	8009890 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800987e:	f7fe fd81 	bl	8008384 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e2d3      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009890:	4b11      	ldr	r3, [pc, #68]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0f0      	beq.n	800987e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800989c:	4b0e      	ldr	r3, [pc, #56]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	061b      	lsls	r3, r3, #24
 80098aa:	490b      	ldr	r1, [pc, #44]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	604b      	str	r3, [r1, #4]
 80098b0:	e01a      	b.n	80098e8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098b2:	4b09      	ldr	r3, [pc, #36]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a08      	ldr	r2, [pc, #32]	@ (80098d8 <HAL_RCC_OscConfig+0x244>)
 80098b8:	f023 0301 	bic.w	r3, r3, #1
 80098bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098be:	f7fe fd61 	bl	8008384 <HAL_GetTick>
 80098c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098c4:	e00a      	b.n	80098dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098c6:	f7fe fd5d 	bl	8008384 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d903      	bls.n	80098dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e2af      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
 80098d8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098dc:	4b96      	ldr	r3, [pc, #600]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1ee      	bne.n	80098c6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0310 	and.w	r3, r3, #16
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d06a      	beq.n	80099ca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098f4:	4b90      	ldr	r3, [pc, #576]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098fe:	4b8e      	ldr	r3, [pc, #568]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009902:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	2b08      	cmp	r3, #8
 8009908:	d007      	beq.n	800991a <HAL_RCC_OscConfig+0x286>
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b18      	cmp	r3, #24
 800990e:	d11b      	bne.n	8009948 <HAL_RCC_OscConfig+0x2b4>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	2b01      	cmp	r3, #1
 8009918:	d116      	bne.n	8009948 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800991a:	4b87      	ldr	r3, [pc, #540]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <HAL_RCC_OscConfig+0x29e>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	2b80      	cmp	r3, #128	@ 0x80
 800992c:	d001      	beq.n	8009932 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e282      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009932:	4b81      	ldr	r3, [pc, #516]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	061b      	lsls	r3, r3, #24
 8009940:	497d      	ldr	r1, [pc, #500]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009942:	4313      	orrs	r3, r2
 8009944:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009946:	e040      	b.n	80099ca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d023      	beq.n	8009998 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009950:	4b79      	ldr	r3, [pc, #484]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a78      	ldr	r2, [pc, #480]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800995a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7fe fd12 	bl	8008384 <HAL_GetTick>
 8009960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009964:	f7fe fd0e 	bl	8008384 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e260      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009976:	4b70      	ldr	r3, [pc, #448]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009982:	4b6d      	ldr	r3, [pc, #436]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	061b      	lsls	r3, r3, #24
 8009990:	4969      	ldr	r1, [pc, #420]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009992:	4313      	orrs	r3, r2
 8009994:	60cb      	str	r3, [r1, #12]
 8009996:	e018      	b.n	80099ca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009998:	4b67      	ldr	r3, [pc, #412]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a66      	ldr	r2, [pc, #408]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 800999e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a4:	f7fe fcee 	bl	8008384 <HAL_GetTick>
 80099a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80099aa:	e008      	b.n	80099be <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099ac:	f7fe fcea 	bl	8008384 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e23c      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80099be:	4b5e      	ldr	r3, [pc, #376]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f0      	bne.n	80099ac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0308 	and.w	r3, r3, #8
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d036      	beq.n	8009a44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d019      	beq.n	8009a12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099de:	4b56      	ldr	r3, [pc, #344]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 80099e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099e2:	4a55      	ldr	r2, [pc, #340]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ea:	f7fe fccb 	bl	8008384 <HAL_GetTick>
 80099ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80099f0:	e008      	b.n	8009a04 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099f2:	f7fe fcc7 	bl	8008384 <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d901      	bls.n	8009a04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e219      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a04:	4b4c      	ldr	r3, [pc, #304]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d0f0      	beq.n	80099f2 <HAL_RCC_OscConfig+0x35e>
 8009a10:	e018      	b.n	8009a44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a12:	4b49      	ldr	r3, [pc, #292]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a16:	4a48      	ldr	r2, [pc, #288]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a18:	f023 0301 	bic.w	r3, r3, #1
 8009a1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a1e:	f7fe fcb1 	bl	8008384 <HAL_GetTick>
 8009a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a24:	e008      	b.n	8009a38 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a26:	f7fe fcad 	bl	8008384 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d901      	bls.n	8009a38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e1ff      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a38:	4b3f      	ldr	r3, [pc, #252]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1f0      	bne.n	8009a26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d036      	beq.n	8009abe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d019      	beq.n	8009a8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009a58:	4b37      	ldr	r3, [pc, #220]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a36      	ldr	r2, [pc, #216]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009a62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a64:	f7fe fc8e 	bl	8008384 <HAL_GetTick>
 8009a68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a6c:	f7fe fc8a 	bl	8008384 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e1dc      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f0      	beq.n	8009a6c <HAL_RCC_OscConfig+0x3d8>
 8009a8a:	e018      	b.n	8009abe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a29      	ldr	r2, [pc, #164]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009a92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a98:	f7fe fc74 	bl	8008384 <HAL_GetTick>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009aa0:	f7fe fc70 	bl	8008384 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e1c2      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ab2:	4b21      	ldr	r3, [pc, #132]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f0      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0304 	and.w	r3, r3, #4
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 8086 	beq.w	8009bd8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009acc:	4b1b      	ldr	r3, [pc, #108]	@ (8009b3c <HAL_RCC_OscConfig+0x4a8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8009b3c <HAL_RCC_OscConfig+0x4a8>)
 8009ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ad8:	f7fe fc54 	bl	8008384 <HAL_GetTick>
 8009adc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ade:	e008      	b.n	8009af2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae0:	f7fe fc50 	bl	8008384 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b64      	cmp	r3, #100	@ 0x64
 8009aec:	d901      	bls.n	8009af2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e1a2      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009af2:	4b12      	ldr	r3, [pc, #72]	@ (8009b3c <HAL_RCC_OscConfig+0x4a8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0f0      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d106      	bne.n	8009b14 <HAL_RCC_OscConfig+0x480>
 8009b06:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009b0c:	f043 0301 	orr.w	r3, r3, #1
 8009b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b12:	e032      	b.n	8009b7a <HAL_RCC_OscConfig+0x4e6>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d111      	bne.n	8009b40 <HAL_RCC_OscConfig+0x4ac>
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b20:	4a05      	ldr	r2, [pc, #20]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009b22:	f023 0301 	bic.w	r3, r3, #1
 8009b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b28:	4b03      	ldr	r3, [pc, #12]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b2c:	4a02      	ldr	r2, [pc, #8]	@ (8009b38 <HAL_RCC_OscConfig+0x4a4>)
 8009b2e:	f023 0304 	bic.w	r3, r3, #4
 8009b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b34:	e021      	b.n	8009b7a <HAL_RCC_OscConfig+0x4e6>
 8009b36:	bf00      	nop
 8009b38:	58024400 	.word	0x58024400
 8009b3c:	58024800 	.word	0x58024800
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	2b05      	cmp	r3, #5
 8009b46:	d10c      	bne.n	8009b62 <HAL_RCC_OscConfig+0x4ce>
 8009b48:	4b83      	ldr	r3, [pc, #524]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b4c:	4a82      	ldr	r2, [pc, #520]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b4e:	f043 0304 	orr.w	r3, r3, #4
 8009b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b54:	4b80      	ldr	r3, [pc, #512]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b58:	4a7f      	ldr	r2, [pc, #508]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b60:	e00b      	b.n	8009b7a <HAL_RCC_OscConfig+0x4e6>
 8009b62:	4b7d      	ldr	r3, [pc, #500]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b66:	4a7c      	ldr	r2, [pc, #496]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b72:	4a79      	ldr	r2, [pc, #484]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009b74:	f023 0304 	bic.w	r3, r3, #4
 8009b78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d015      	beq.n	8009bae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b82:	f7fe fbff 	bl	8008384 <HAL_GetTick>
 8009b86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b88:	e00a      	b.n	8009ba0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b8a:	f7fe fbfb 	bl	8008384 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d901      	bls.n	8009ba0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e14b      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d0ee      	beq.n	8009b8a <HAL_RCC_OscConfig+0x4f6>
 8009bac:	e014      	b.n	8009bd8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bae:	f7fe fbe9 	bl	8008384 <HAL_GetTick>
 8009bb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bb4:	e00a      	b.n	8009bcc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb6:	f7fe fbe5 	bl	8008384 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d901      	bls.n	8009bcc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e135      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bcc:	4b62      	ldr	r3, [pc, #392]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1ee      	bne.n	8009bb6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 812a 	beq.w	8009e36 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009be2:	4b5d      	ldr	r3, [pc, #372]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bea:	2b18      	cmp	r3, #24
 8009bec:	f000 80ba 	beq.w	8009d64 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	f040 8095 	bne.w	8009d24 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bfa:	4b57      	ldr	r3, [pc, #348]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a56      	ldr	r2, [pc, #344]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c06:	f7fe fbbd 	bl	8008384 <HAL_GetTick>
 8009c0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c0e:	f7fe fbb9 	bl	8008384 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e10b      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c20:	4b4d      	ldr	r3, [pc, #308]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f0      	bne.n	8009c0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c30:	4b4a      	ldr	r3, [pc, #296]	@ (8009d5c <HAL_RCC_OscConfig+0x6c8>)
 8009c32:	4013      	ands	r3, r2
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009c3c:	0112      	lsls	r2, r2, #4
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	4945      	ldr	r1, [pc, #276]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c54:	3b01      	subs	r3, #1
 8009c56:	025b      	lsls	r3, r3, #9
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c60:	3b01      	subs	r3, #1
 8009c62:	041b      	lsls	r3, r3, #16
 8009c64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	061b      	lsls	r3, r3, #24
 8009c72:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c76:	4938      	ldr	r1, [pc, #224]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009c7c:	4b36      	ldr	r3, [pc, #216]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c80:	4a35      	ldr	r2, [pc, #212]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c82:	f023 0301 	bic.w	r3, r3, #1
 8009c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009c88:	4b33      	ldr	r3, [pc, #204]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c8c:	4b34      	ldr	r3, [pc, #208]	@ (8009d60 <HAL_RCC_OscConfig+0x6cc>)
 8009c8e:	4013      	ands	r3, r2
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009c94:	00d2      	lsls	r2, r2, #3
 8009c96:	4930      	ldr	r1, [pc, #192]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	f023 020c 	bic.w	r2, r3, #12
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ca8:	492b      	ldr	r1, [pc, #172]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009cae:	4b2a      	ldr	r3, [pc, #168]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb2:	f023 0202 	bic.w	r2, r3, #2
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cba:	4927      	ldr	r1, [pc, #156]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009cc0:	4b25      	ldr	r3, [pc, #148]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc4:	4a24      	ldr	r2, [pc, #144]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ccc:	4b22      	ldr	r3, [pc, #136]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd0:	4a21      	ldr	r2, [pc, #132]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cf0:	4b19      	ldr	r3, [pc, #100]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a18      	ldr	r2, [pc, #96]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cfc:	f7fe fb42 	bl	8008384 <HAL_GetTick>
 8009d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d02:	e008      	b.n	8009d16 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d04:	f7fe fb3e 	bl	8008384 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d901      	bls.n	8009d16 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e090      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d16:	4b10      	ldr	r3, [pc, #64]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0f0      	beq.n	8009d04 <HAL_RCC_OscConfig+0x670>
 8009d22:	e088      	b.n	8009e36 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d24:	4b0c      	ldr	r3, [pc, #48]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a0b      	ldr	r2, [pc, #44]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d30:	f7fe fb28 	bl	8008384 <HAL_GetTick>
 8009d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d36:	e008      	b.n	8009d4a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d38:	f7fe fb24 	bl	8008384 <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d901      	bls.n	8009d4a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e076      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d4a:	4b03      	ldr	r3, [pc, #12]	@ (8009d58 <HAL_RCC_OscConfig+0x6c4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1f0      	bne.n	8009d38 <HAL_RCC_OscConfig+0x6a4>
 8009d56:	e06e      	b.n	8009e36 <HAL_RCC_OscConfig+0x7a2>
 8009d58:	58024400 	.word	0x58024400
 8009d5c:	fffffc0c 	.word	0xfffffc0c
 8009d60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009d64:	4b36      	ldr	r3, [pc, #216]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009d6a:	4b35      	ldr	r3, [pc, #212]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d031      	beq.n	8009ddc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f003 0203 	and.w	r2, r3, #3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d12a      	bne.n	8009ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	091b      	lsrs	r3, r3, #4
 8009d8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d122      	bne.n	8009ddc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d11a      	bne.n	8009ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	0a5b      	lsrs	r3, r3, #9
 8009daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d111      	bne.n	8009ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	0c1b      	lsrs	r3, r3, #16
 8009dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d108      	bne.n	8009ddc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	0e1b      	lsrs	r3, r3, #24
 8009dce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d001      	beq.n	8009de0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e02b      	b.n	8009e38 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009de0:	4b17      	ldr	r3, [pc, #92]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de4:	08db      	lsrs	r3, r3, #3
 8009de6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d01f      	beq.n	8009e36 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009df6:	4b12      	ldr	r3, [pc, #72]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfa:	4a11      	ldr	r2, [pc, #68]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e02:	f7fe fabf 	bl	8008384 <HAL_GetTick>
 8009e06:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009e08:	bf00      	nop
 8009e0a:	f7fe fabb 	bl	8008384 <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d0f9      	beq.n	8009e0a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e16:	4b0a      	ldr	r3, [pc, #40]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <HAL_RCC_OscConfig+0x7b0>)
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009e22:	00d2      	lsls	r2, r2, #3
 8009e24:	4906      	ldr	r1, [pc, #24]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009e2a:	4b05      	ldr	r3, [pc, #20]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2e:	4a04      	ldr	r2, [pc, #16]	@ (8009e40 <HAL_RCC_OscConfig+0x7ac>)
 8009e30:	f043 0301 	orr.w	r3, r3, #1
 8009e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3730      	adds	r7, #48	@ 0x30
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	58024400 	.word	0x58024400
 8009e44:	ffff0007 	.word	0xffff0007

08009e48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e19c      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e5c:	4b8a      	ldr	r3, [pc, #552]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d910      	bls.n	8009e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e6a:	4b87      	ldr	r3, [pc, #540]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f023 020f 	bic.w	r2, r3, #15
 8009e72:	4985      	ldr	r1, [pc, #532]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e7a:	4b83      	ldr	r3, [pc, #524]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 030f 	and.w	r3, r3, #15
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d001      	beq.n	8009e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e184      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d010      	beq.n	8009eba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	4b7b      	ldr	r3, [pc, #492]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d908      	bls.n	8009eba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ea8:	4b78      	ldr	r3, [pc, #480]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	4975      	ldr	r1, [pc, #468]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d010      	beq.n	8009ee8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	695a      	ldr	r2, [r3, #20]
 8009eca:	4b70      	ldr	r3, [pc, #448]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d908      	bls.n	8009ee8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	496a      	ldr	r1, [pc, #424]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d010      	beq.n	8009f16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	4b64      	ldr	r3, [pc, #400]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d908      	bls.n	8009f16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f04:	4b61      	ldr	r3, [pc, #388]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	495e      	ldr	r1, [pc, #376]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d010      	beq.n	8009f44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69da      	ldr	r2, [r3, #28]
 8009f26:	4b59      	ldr	r3, [pc, #356]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d908      	bls.n	8009f44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f32:	4b56      	ldr	r3, [pc, #344]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	4953      	ldr	r1, [pc, #332]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d010      	beq.n	8009f72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	4b4d      	ldr	r3, [pc, #308]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d908      	bls.n	8009f72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f60:	4b4a      	ldr	r3, [pc, #296]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	f023 020f 	bic.w	r2, r3, #15
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	4947      	ldr	r1, [pc, #284]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d055      	beq.n	800a02a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009f7e:	4b43      	ldr	r3, [pc, #268]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	4940      	ldr	r1, [pc, #256]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d107      	bne.n	8009fa8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f98:	4b3c      	ldr	r3, [pc, #240]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d121      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e0f6      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d107      	bne.n	8009fc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fb0:	4b36      	ldr	r3, [pc, #216]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d115      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0ea      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d107      	bne.n	8009fd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fc8:	4b30      	ldr	r3, [pc, #192]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e0de      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e0d6      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009fe8:	4b28      	ldr	r3, [pc, #160]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f023 0207 	bic.w	r2, r3, #7
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	4925      	ldr	r1, [pc, #148]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ffa:	f7fe f9c3 	bl	8008384 <HAL_GetTick>
 8009ffe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a000:	e00a      	b.n	800a018 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a002:	f7fe f9bf 	bl	8008384 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a010:	4293      	cmp	r3, r2
 800a012:	d901      	bls.n	800a018 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e0be      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a018:	4b1c      	ldr	r3, [pc, #112]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	429a      	cmp	r2, r3
 800a028:	d1eb      	bne.n	800a002 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0302 	and.w	r3, r3, #2
 800a032:	2b00      	cmp	r3, #0
 800a034:	d010      	beq.n	800a058 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	4b14      	ldr	r3, [pc, #80]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	429a      	cmp	r2, r3
 800a044:	d208      	bcs.n	800a058 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a046:	4b11      	ldr	r3, [pc, #68]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	f023 020f 	bic.w	r2, r3, #15
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	490e      	ldr	r1, [pc, #56]	@ (800a08c <HAL_RCC_ClockConfig+0x244>)
 800a054:	4313      	orrs	r3, r2
 800a056:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a058:	4b0b      	ldr	r3, [pc, #44]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 030f 	and.w	r3, r3, #15
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d214      	bcs.n	800a090 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a066:	4b08      	ldr	r3, [pc, #32]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f023 020f 	bic.w	r2, r3, #15
 800a06e:	4906      	ldr	r1, [pc, #24]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	4313      	orrs	r3, r2
 800a074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a076:	4b04      	ldr	r3, [pc, #16]	@ (800a088 <HAL_RCC_ClockConfig+0x240>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 030f 	and.w	r3, r3, #15
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d005      	beq.n	800a090 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e086      	b.n	800a196 <HAL_RCC_ClockConfig+0x34e>
 800a088:	52002000 	.word	0x52002000
 800a08c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d010      	beq.n	800a0be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691a      	ldr	r2, [r3, #16]
 800a0a0:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d208      	bcs.n	800a0be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0ac:	4b3c      	ldr	r3, [pc, #240]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	4939      	ldr	r1, [pc, #228]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0308 	and.w	r3, r3, #8
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d010      	beq.n	800a0ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	695a      	ldr	r2, [r3, #20]
 800a0ce:	4b34      	ldr	r3, [pc, #208]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d208      	bcs.n	800a0ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0da:	4b31      	ldr	r3, [pc, #196]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	492e      	ldr	r1, [pc, #184]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d010      	beq.n	800a11a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	699a      	ldr	r2, [r3, #24]
 800a0fc:	4b28      	ldr	r3, [pc, #160]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a104:	429a      	cmp	r2, r3
 800a106:	d208      	bcs.n	800a11a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a108:	4b25      	ldr	r3, [pc, #148]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a10a:	69db      	ldr	r3, [r3, #28]
 800a10c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	4922      	ldr	r1, [pc, #136]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a116:	4313      	orrs	r3, r2
 800a118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d010      	beq.n	800a148 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	69da      	ldr	r2, [r3, #28]
 800a12a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a132:	429a      	cmp	r2, r3
 800a134:	d208      	bcs.n	800a148 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a136:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	4917      	ldr	r1, [pc, #92]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a144:	4313      	orrs	r3, r2
 800a146:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a148:	f000 f834 	bl	800a1b4 <HAL_RCC_GetSysClockFreq>
 800a14c:	4602      	mov	r2, r0
 800a14e:	4b14      	ldr	r3, [pc, #80]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	4912      	ldr	r1, [pc, #72]	@ (800a1a4 <HAL_RCC_ClockConfig+0x35c>)
 800a15a:	5ccb      	ldrb	r3, [r1, r3]
 800a15c:	f003 031f 	and.w	r3, r3, #31
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a166:	4b0e      	ldr	r3, [pc, #56]	@ (800a1a0 <HAL_RCC_ClockConfig+0x358>)
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	4a0d      	ldr	r2, [pc, #52]	@ (800a1a4 <HAL_RCC_ClockConfig+0x35c>)
 800a170:	5cd3      	ldrb	r3, [r2, r3]
 800a172:	f003 031f 	and.w	r3, r3, #31
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
 800a17c:	4a0a      	ldr	r2, [pc, #40]	@ (800a1a8 <HAL_RCC_ClockConfig+0x360>)
 800a17e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a180:	4a0a      	ldr	r2, [pc, #40]	@ (800a1ac <HAL_RCC_ClockConfig+0x364>)
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a186:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b0 <HAL_RCC_ClockConfig+0x368>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe f8b0 	bl	80082f0 <HAL_InitTick>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a194:	7bfb      	ldrb	r3, [r7, #15]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	08017394 	.word	0x08017394
 800a1a8:	2400015c 	.word	0x2400015c
 800a1ac:	24000158 	.word	0x24000158
 800a1b0:	24000180 	.word	0x24000180

0800a1b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b089      	sub	sp, #36	@ 0x24
 800a1b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1ba:	4bb3      	ldr	r3, [pc, #716]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1c2:	2b18      	cmp	r3, #24
 800a1c4:	f200 8155 	bhi.w	800a472 <HAL_RCC_GetSysClockFreq+0x2be>
 800a1c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a235 	.word	0x0800a235
 800a1d4:	0800a473 	.word	0x0800a473
 800a1d8:	0800a473 	.word	0x0800a473
 800a1dc:	0800a473 	.word	0x0800a473
 800a1e0:	0800a473 	.word	0x0800a473
 800a1e4:	0800a473 	.word	0x0800a473
 800a1e8:	0800a473 	.word	0x0800a473
 800a1ec:	0800a473 	.word	0x0800a473
 800a1f0:	0800a25b 	.word	0x0800a25b
 800a1f4:	0800a473 	.word	0x0800a473
 800a1f8:	0800a473 	.word	0x0800a473
 800a1fc:	0800a473 	.word	0x0800a473
 800a200:	0800a473 	.word	0x0800a473
 800a204:	0800a473 	.word	0x0800a473
 800a208:	0800a473 	.word	0x0800a473
 800a20c:	0800a473 	.word	0x0800a473
 800a210:	0800a261 	.word	0x0800a261
 800a214:	0800a473 	.word	0x0800a473
 800a218:	0800a473 	.word	0x0800a473
 800a21c:	0800a473 	.word	0x0800a473
 800a220:	0800a473 	.word	0x0800a473
 800a224:	0800a473 	.word	0x0800a473
 800a228:	0800a473 	.word	0x0800a473
 800a22c:	0800a473 	.word	0x0800a473
 800a230:	0800a267 	.word	0x0800a267
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a234:	4b94      	ldr	r3, [pc, #592]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d009      	beq.n	800a254 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a240:	4b91      	ldr	r3, [pc, #580]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	08db      	lsrs	r3, r3, #3
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	4a90      	ldr	r2, [pc, #576]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a24c:	fa22 f303 	lsr.w	r3, r2, r3
 800a250:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a252:	e111      	b.n	800a478 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a254:	4b8d      	ldr	r3, [pc, #564]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a256:	61bb      	str	r3, [r7, #24]
      break;
 800a258:	e10e      	b.n	800a478 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a25a:	4b8d      	ldr	r3, [pc, #564]	@ (800a490 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a25c:	61bb      	str	r3, [r7, #24]
      break;
 800a25e:	e10b      	b.n	800a478 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a260:	4b8c      	ldr	r3, [pc, #560]	@ (800a494 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a262:	61bb      	str	r3, [r7, #24]
      break;
 800a264:	e108      	b.n	800a478 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a266:	4b88      	ldr	r3, [pc, #544]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26a:	f003 0303 	and.w	r3, r3, #3
 800a26e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a270:	4b85      	ldr	r3, [pc, #532]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a274:	091b      	lsrs	r3, r3, #4
 800a276:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a27a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a27c:	4b82      	ldr	r3, [pc, #520]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a286:	4b80      	ldr	r3, [pc, #512]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a28a:	08db      	lsrs	r3, r3, #3
 800a28c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	fb02 f303 	mul.w	r3, r2, r3
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 80e1 	beq.w	800a46c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	f000 8083 	beq.w	800a3b8 <HAL_RCC_GetSysClockFreq+0x204>
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	f200 80a1 	bhi.w	800a3fc <HAL_RCC_GetSysClockFreq+0x248>
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_RCC_GetSysClockFreq+0x114>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d056      	beq.n	800a374 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a2c6:	e099      	b.n	800a3fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c8:	4b6f      	ldr	r3, [pc, #444]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d02d      	beq.n	800a330 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2d4:	4b6c      	ldr	r3, [pc, #432]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	08db      	lsrs	r3, r3, #3
 800a2da:	f003 0303 	and.w	r3, r3, #3
 800a2de:	4a6b      	ldr	r2, [pc, #428]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	ee07 3a90 	vmov	s15, r3
 800a2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	ee07 3a90 	vmov	s15, r3
 800a2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2fe:	4b62      	ldr	r3, [pc, #392]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a306:	ee07 3a90 	vmov	s15, r3
 800a30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a30e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a312:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a32a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a32e:	e087      	b.n	800a440 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a49c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a342:	4b51      	ldr	r3, [pc, #324]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a352:	ed97 6a02 	vldr	s12, [r7, #8]
 800a356:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a372:	e065      	b.n	800a440 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a4a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a386:	4b40      	ldr	r3, [pc, #256]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a396:	ed97 6a02 	vldr	s12, [r7, #8]
 800a39a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3b6:	e043      	b.n	800a440 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	ee07 3a90 	vmov	s15, r3
 800a3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a4a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d2:	ee07 3a90 	vmov	s15, r3
 800a3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3fa:	e021      	b.n	800a440 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a4a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40e:	4b1e      	ldr	r3, [pc, #120]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a416:	ee07 3a90 	vmov	s15, r3
 800a41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a422:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a498 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a43e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a440:	4b11      	ldr	r3, [pc, #68]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	0a5b      	lsrs	r3, r3, #9
 800a446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a44a:	3301      	adds	r3, #1
 800a44c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	ee07 3a90 	vmov	s15, r3
 800a454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a458:	edd7 6a07 	vldr	s13, [r7, #28]
 800a45c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a464:	ee17 3a90 	vmov	r3, s15
 800a468:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a46a:	e005      	b.n	800a478 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61bb      	str	r3, [r7, #24]
      break;
 800a470:	e002      	b.n	800a478 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a472:	4b07      	ldr	r3, [pc, #28]	@ (800a490 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a474:	61bb      	str	r3, [r7, #24]
      break;
 800a476:	bf00      	nop
  }

  return sysclockfreq;
 800a478:	69bb      	ldr	r3, [r7, #24]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3724      	adds	r7, #36	@ 0x24
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	58024400 	.word	0x58024400
 800a48c:	03d09000 	.word	0x03d09000
 800a490:	003d0900 	.word	0x003d0900
 800a494:	02dc6c00 	.word	0x02dc6c00
 800a498:	46000000 	.word	0x46000000
 800a49c:	4c742400 	.word	0x4c742400
 800a4a0:	4a742400 	.word	0x4a742400
 800a4a4:	4c371b00 	.word	0x4c371b00

0800a4a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a4ae:	f7ff fe81 	bl	800a1b4 <HAL_RCC_GetSysClockFreq>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	4b10      	ldr	r3, [pc, #64]	@ (800a4f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	0a1b      	lsrs	r3, r3, #8
 800a4ba:	f003 030f 	and.w	r3, r3, #15
 800a4be:	490f      	ldr	r1, [pc, #60]	@ (800a4fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a4c0:	5ccb      	ldrb	r3, [r1, r3]
 800a4c2:	f003 031f 	and.w	r3, r3, #31
 800a4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	4a09      	ldr	r2, [pc, #36]	@ (800a4fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a4d6:	5cd3      	ldrb	r3, [r2, r3]
 800a4d8:	f003 031f 	and.w	r3, r3, #31
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e2:	4a07      	ldr	r2, [pc, #28]	@ (800a500 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4e6:	4a07      	ldr	r2, [pc, #28]	@ (800a504 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a4ec:	4b04      	ldr	r3, [pc, #16]	@ (800a500 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	58024400 	.word	0x58024400
 800a4fc:	08017394 	.word	0x08017394
 800a500:	2400015c 	.word	0x2400015c
 800a504:	24000158 	.word	0x24000158

0800a508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a50c:	f7ff ffcc 	bl	800a4a8 <HAL_RCC_GetHCLKFreq>
 800a510:	4602      	mov	r2, r0
 800a512:	4b06      	ldr	r3, [pc, #24]	@ (800a52c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	091b      	lsrs	r3, r3, #4
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	4904      	ldr	r1, [pc, #16]	@ (800a530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a51e:	5ccb      	ldrb	r3, [r1, r3]
 800a520:	f003 031f 	and.w	r3, r3, #31
 800a524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a528:	4618      	mov	r0, r3
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	58024400 	.word	0x58024400
 800a530:	08017394 	.word	0x08017394

0800a534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a538:	f7ff ffb6 	bl	800a4a8 <HAL_RCC_GetHCLKFreq>
 800a53c:	4602      	mov	r2, r0
 800a53e:	4b06      	ldr	r3, [pc, #24]	@ (800a558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	0a1b      	lsrs	r3, r3, #8
 800a544:	f003 0307 	and.w	r3, r3, #7
 800a548:	4904      	ldr	r1, [pc, #16]	@ (800a55c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a54a:	5ccb      	ldrb	r3, [r1, r3]
 800a54c:	f003 031f 	and.w	r3, r3, #31
 800a550:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a554:	4618      	mov	r0, r3
 800a556:	bd80      	pop	{r7, pc}
 800a558:	58024400 	.word	0x58024400
 800a55c:	08017394 	.word	0x08017394

0800a560 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a564:	b0c6      	sub	sp, #280	@ 0x118
 800a566:	af00      	add	r7, sp, #0
 800a568:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a572:	2300      	movs	r3, #0
 800a574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a584:	2500      	movs	r5, #0
 800a586:	ea54 0305 	orrs.w	r3, r4, r5
 800a58a:	d049      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a592:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a596:	d02f      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a598:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a59c:	d828      	bhi.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a59e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5a2:	d01a      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a5a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5a8:	d822      	bhi.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a5ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5b2:	d007      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a5b4:	e01c      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b6:	4bab      	ldr	r3, [pc, #684]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ba:	4aaa      	ldr	r2, [pc, #680]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a5c2:	e01a      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c8:	3308      	adds	r3, #8
 800a5ca:	2102      	movs	r1, #2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f002 fa49 	bl	800ca64 <RCCEx_PLL2_Config>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a5d8:	e00f      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5de:	3328      	adds	r3, #40	@ 0x28
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f002 faf0 	bl	800cbc8 <RCCEx_PLL3_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a5ee:	e004      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5f6:	e000      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a5f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a602:	4b98      	ldr	r3, [pc, #608]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a606:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a610:	4a94      	ldr	r2, [pc, #592]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a612:	430b      	orrs	r3, r1
 800a614:	6513      	str	r3, [r2, #80]	@ 0x50
 800a616:	e003      	b.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a61c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a62c:	f04f 0900 	mov.w	r9, #0
 800a630:	ea58 0309 	orrs.w	r3, r8, r9
 800a634:	d047      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d82a      	bhi.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a640:	a201      	add	r2, pc, #4	@ (adr r2, 800a648 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a65d 	.word	0x0800a65d
 800a64c:	0800a66b 	.word	0x0800a66b
 800a650:	0800a681 	.word	0x0800a681
 800a654:	0800a69f 	.word	0x0800a69f
 800a658:	0800a69f 	.word	0x0800a69f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a65c:	4b81      	ldr	r3, [pc, #516]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a660:	4a80      	ldr	r2, [pc, #512]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a668:	e01a      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a66e:	3308      	adds	r3, #8
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f002 f9f6 	bl	800ca64 <RCCEx_PLL2_Config>
 800a678:	4603      	mov	r3, r0
 800a67a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a67e:	e00f      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a684:	3328      	adds	r3, #40	@ 0x28
 800a686:	2100      	movs	r1, #0
 800a688:	4618      	mov	r0, r3
 800a68a:	f002 fa9d 	bl	800cbc8 <RCCEx_PLL3_Config>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a694:	e004      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a69c:	e000      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a69e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6a8:	4b6e      	ldr	r3, [pc, #440]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6ac:	f023 0107 	bic.w	r1, r3, #7
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6b6:	4a6b      	ldr	r2, [pc, #428]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800a6bc:	e003      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a6d2:	f04f 0b00 	mov.w	fp, #0
 800a6d6:	ea5a 030b 	orrs.w	r3, sl, fp
 800a6da:	d05b      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a6e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a6e8:	d03b      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a6ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a6ee:	d834      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a6f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6f4:	d037      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a6f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6fa:	d82e      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a6fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a700:	d033      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a702:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a706:	d828      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a70c:	d01a      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a70e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a712:	d822      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a714:	2b00      	cmp	r3, #0
 800a716:	d003      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a71c:	d007      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a71e:	e01c      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a720:	4b50      	ldr	r3, [pc, #320]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a724:	4a4f      	ldr	r2, [pc, #316]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a72a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a72c:	e01e      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a732:	3308      	adds	r3, #8
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f002 f994 	bl	800ca64 <RCCEx_PLL2_Config>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a742:	e013      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a748:	3328      	adds	r3, #40	@ 0x28
 800a74a:	2100      	movs	r1, #0
 800a74c:	4618      	mov	r0, r3
 800a74e:	f002 fa3b 	bl	800cbc8 <RCCEx_PLL3_Config>
 800a752:	4603      	mov	r3, r0
 800a754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a758:	e008      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a760:	e004      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a762:	bf00      	nop
 800a764:	e002      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a766:	bf00      	nop
 800a768:	e000      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a76a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a76c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10b      	bne.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a774:	4b3b      	ldr	r3, [pc, #236]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a778:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a780:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a784:	4a37      	ldr	r2, [pc, #220]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a786:	430b      	orrs	r3, r1
 800a788:	6593      	str	r3, [r2, #88]	@ 0x58
 800a78a:	e003      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a7a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a7aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	d05d      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a7bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7c0:	d03b      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a7c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7c6:	d834      	bhi.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7cc:	d037      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a7ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7d2:	d82e      	bhi.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7d8:	d033      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a7da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7de:	d828      	bhi.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7e4:	d01a      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a7e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ea:	d822      	bhi.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d003      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a7f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7f4:	d007      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a7f6:	e01c      	b.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fc:	4a19      	ldr	r2, [pc, #100]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a804:	e01e      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80a:	3308      	adds	r3, #8
 800a80c:	2100      	movs	r1, #0
 800a80e:	4618      	mov	r0, r3
 800a810:	f002 f928 	bl	800ca64 <RCCEx_PLL2_Config>
 800a814:	4603      	mov	r3, r0
 800a816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a81a:	e013      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a820:	3328      	adds	r3, #40	@ 0x28
 800a822:	2100      	movs	r1, #0
 800a824:	4618      	mov	r0, r3
 800a826:	f002 f9cf 	bl	800cbc8 <RCCEx_PLL3_Config>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a830:	e008      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a838:	e004      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a83a:	bf00      	nop
 800a83c:	e002      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a83e:	bf00      	nop
 800a840:	e000      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a842:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10d      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a84c:	4b05      	ldr	r3, [pc, #20]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a84e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a850:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a858:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a85c:	4a01      	ldr	r2, [pc, #4]	@ (800a864 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a85e:	430b      	orrs	r3, r1
 800a860:	6593      	str	r3, [r2, #88]	@ 0x58
 800a862:	e005      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a86c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a87c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a880:	2300      	movs	r3, #0
 800a882:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a886:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4313      	orrs	r3, r2
 800a88e:	d03a      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a896:	2b30      	cmp	r3, #48	@ 0x30
 800a898:	d01f      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a89a:	2b30      	cmp	r3, #48	@ 0x30
 800a89c:	d819      	bhi.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a89e:	2b20      	cmp	r3, #32
 800a8a0:	d00c      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d815      	bhi.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d019      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a8aa:	2b10      	cmp	r3, #16
 800a8ac:	d111      	bne.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ae:	4baa      	ldr	r3, [pc, #680]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b2:	4aa9      	ldr	r2, [pc, #676]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a8ba:	e011      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	2102      	movs	r1, #2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f002 f8cd 	bl	800ca64 <RCCEx_PLL2_Config>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a8d0:	e006      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8d8:	e002      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a8da:	bf00      	nop
 800a8dc:	e000      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a8de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a8e8:	4b9b      	ldr	r3, [pc, #620]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8f6:	4a98      	ldr	r2, [pc, #608]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a8fc:	e003      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a902:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a912:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a916:	2300      	movs	r3, #0
 800a918:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a91c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a920:	460b      	mov	r3, r1
 800a922:	4313      	orrs	r3, r2
 800a924:	d051      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a92c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a930:	d035      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a936:	d82e      	bhi.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a938:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a93c:	d031      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a93e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a942:	d828      	bhi.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a948:	d01a      	beq.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a94a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a94e:	d822      	bhi.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d003      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a958:	d007      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a95a:	e01c      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a95c:	4b7e      	ldr	r3, [pc, #504]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a960:	4a7d      	ldr	r2, [pc, #500]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a968:	e01c      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a96e:	3308      	adds	r3, #8
 800a970:	2100      	movs	r1, #0
 800a972:	4618      	mov	r0, r3
 800a974:	f002 f876 	bl	800ca64 <RCCEx_PLL2_Config>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a97e:	e011      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a984:	3328      	adds	r3, #40	@ 0x28
 800a986:	2100      	movs	r1, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f002 f91d 	bl	800cbc8 <RCCEx_PLL3_Config>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a994:	e006      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a99c:	e002      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a99e:	bf00      	nop
 800a9a0:	e000      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a9a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a9ac:	4b6a      	ldr	r3, [pc, #424]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9ba:	4a67      	ldr	r2, [pc, #412]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9bc:	430b      	orrs	r3, r1
 800a9be:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9c0:	e003      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a9d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	d053      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9f4:	d033      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a9f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9fa:	d82c      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a9fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa00:	d02f      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800aa02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa06:	d826      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa0c:	d02b      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800aa0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa12:	d820      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa18:	d012      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800aa1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa1e:	d81a      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d022      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa28:	d115      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa2e:	3308      	adds	r3, #8
 800aa30:	2101      	movs	r1, #1
 800aa32:	4618      	mov	r0, r3
 800aa34:	f002 f816 	bl	800ca64 <RCCEx_PLL2_Config>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa3e:	e015      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa44:	3328      	adds	r3, #40	@ 0x28
 800aa46:	2101      	movs	r1, #1
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 f8bd 	bl	800cbc8 <RCCEx_PLL3_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa54:	e00a      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa5c:	e006      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa5e:	bf00      	nop
 800aa60:	e004      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa62:	bf00      	nop
 800aa64:	e002      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa66:	bf00      	nop
 800aa68:	e000      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aa74:	4b38      	ldr	r3, [pc, #224]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa82:	4a35      	ldr	r2, [pc, #212]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa84:	430b      	orrs	r3, r1
 800aa86:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa88:	e003      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aa92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800aa9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aaa8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aaac:	460b      	mov	r3, r1
 800aaae:	4313      	orrs	r3, r2
 800aab0:	d058      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aab6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aaba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aabe:	d033      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aac4:	d82c      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaca:	d02f      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800aacc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aad0:	d826      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aad2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aad6:	d02b      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aad8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aadc:	d820      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aae2:	d012      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800aae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aae8:	d81a      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d022      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aaee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaf2:	d115      	bne.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf8:	3308      	adds	r3, #8
 800aafa:	2101      	movs	r1, #1
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 ffb1 	bl	800ca64 <RCCEx_PLL2_Config>
 800ab02:	4603      	mov	r3, r0
 800ab04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab08:	e015      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab0e:	3328      	adds	r3, #40	@ 0x28
 800ab10:	2101      	movs	r1, #1
 800ab12:	4618      	mov	r0, r3
 800ab14:	f002 f858 	bl	800cbc8 <RCCEx_PLL3_Config>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab1e:	e00a      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab26:	e006      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab28:	bf00      	nop
 800ab2a:	e004      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab2c:	bf00      	nop
 800ab2e:	e002      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab30:	bf00      	nop
 800ab32:	e000      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10e      	bne.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ab3e:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ab46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ab4e:	4a02      	ldr	r2, [pc, #8]	@ (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab54:	e006      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ab56:	bf00      	nop
 800ab58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ab70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab74:	2300      	movs	r3, #0
 800ab76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ab7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4313      	orrs	r3, r2
 800ab82:	d037      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab8e:	d00e      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ab90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab94:	d816      	bhi.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d018      	beq.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ab9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab9e:	d111      	bne.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba0:	4bc4      	ldr	r3, [pc, #784]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba4:	4ac3      	ldr	r2, [pc, #780]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800abac:	e00f      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb2:	3308      	adds	r3, #8
 800abb4:	2101      	movs	r1, #1
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 ff54 	bl	800ca64 <RCCEx_PLL2_Config>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800abc2:	e004      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800abca:	e000      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800abcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10a      	bne.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800abd6:	4bb7      	ldr	r3, [pc, #732]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800abde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abe4:	4ab3      	ldr	r2, [pc, #716]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abe6:	430b      	orrs	r3, r1
 800abe8:	6513      	str	r3, [r2, #80]	@ 0x50
 800abea:	e003      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ac00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac04:	2300      	movs	r3, #0
 800ac06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ac0e:	460b      	mov	r3, r1
 800ac10:	4313      	orrs	r3, r2
 800ac12:	d039      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d81c      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ac1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac61 	.word	0x0800ac61
 800ac28:	0800ac35 	.word	0x0800ac35
 800ac2c:	0800ac43 	.word	0x0800ac43
 800ac30:	0800ac61 	.word	0x0800ac61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac34:	4b9f      	ldr	r3, [pc, #636]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac38:	4a9e      	ldr	r2, [pc, #632]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac40:	e00f      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac46:	3308      	adds	r3, #8
 800ac48:	2102      	movs	r1, #2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 ff0a 	bl	800ca64 <RCCEx_PLL2_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac56:	e004      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac5e:	e000      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ac60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10a      	bne.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac6a:	4b92      	ldr	r3, [pc, #584]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac6e:	f023 0103 	bic.w	r1, r3, #3
 800ac72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac78:	4a8e      	ldr	r2, [pc, #568]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac7a:	430b      	orrs	r3, r1
 800ac7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac7e:	e003      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ac94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4313      	orrs	r3, r2
 800aca6:	f000 8099 	beq.w	800addc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acaa:	4b83      	ldr	r3, [pc, #524]	@ (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a82      	ldr	r2, [pc, #520]	@ (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acb6:	f7fd fb65 	bl	8008384 <HAL_GetTick>
 800acba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acbe:	e00b      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acc0:	f7fd fb60 	bl	8008384 <HAL_GetTick>
 800acc4:	4602      	mov	r2, r0
 800acc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b64      	cmp	r3, #100	@ 0x64
 800acce:	d903      	bls.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800acd6:	e005      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acd8:	4b77      	ldr	r3, [pc, #476]	@ (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0ed      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ace4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d173      	bne.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800acec:	4b71      	ldr	r3, [pc, #452]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800acf8:	4053      	eors	r3, r2
 800acfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d015      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad02:	4b6c      	ldr	r3, [pc, #432]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad0e:	4b69      	ldr	r3, [pc, #420]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad12:	4a68      	ldr	r2, [pc, #416]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad1a:	4b66      	ldr	r3, [pc, #408]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad1e:	4a65      	ldr	r2, [pc, #404]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad26:	4a63      	ldr	r2, [pc, #396]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad3a:	d118      	bne.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad3c:	f7fd fb22 	bl	8008384 <HAL_GetTick>
 800ad40:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad44:	e00d      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad46:	f7fd fb1d 	bl	8008384 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ad50:	1ad2      	subs	r2, r2, r3
 800ad52:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d903      	bls.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800ad60:	e005      	b.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad62:	4b54      	ldr	r3, [pc, #336]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d0eb      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ad6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d129      	bne.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad86:	d10e      	bne.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ad88:	4b4a      	ldr	r3, [pc, #296]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ad90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad98:	091a      	lsrs	r2, r3, #4
 800ad9a:	4b48      	ldr	r3, [pc, #288]	@ (800aebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	4a45      	ldr	r2, [pc, #276]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada0:	430b      	orrs	r3, r1
 800ada2:	6113      	str	r3, [r2, #16]
 800ada4:	e005      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ada6:	4b43      	ldr	r3, [pc, #268]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	4a42      	ldr	r2, [pc, #264]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800adb0:	6113      	str	r3, [r2, #16]
 800adb2:	4b40      	ldr	r3, [pc, #256]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800adbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adc2:	4a3c      	ldr	r2, [pc, #240]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adc4:	430b      	orrs	r3, r1
 800adc6:	6713      	str	r3, [r2, #112]	@ 0x70
 800adc8:	e008      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800adca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800add2:	e003      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800add8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	f002 0301 	and.w	r3, r2, #1
 800ade8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800adec:	2300      	movs	r3, #0
 800adee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800adf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800adf6:	460b      	mov	r3, r1
 800adf8:	4313      	orrs	r3, r2
 800adfa:	f000 808f 	beq.w	800af1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800adfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae04:	2b28      	cmp	r3, #40	@ 0x28
 800ae06:	d871      	bhi.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ae08:	a201      	add	r2, pc, #4	@ (adr r2, 800ae10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ae0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0e:	bf00      	nop
 800ae10:	0800aef5 	.word	0x0800aef5
 800ae14:	0800aeed 	.word	0x0800aeed
 800ae18:	0800aeed 	.word	0x0800aeed
 800ae1c:	0800aeed 	.word	0x0800aeed
 800ae20:	0800aeed 	.word	0x0800aeed
 800ae24:	0800aeed 	.word	0x0800aeed
 800ae28:	0800aeed 	.word	0x0800aeed
 800ae2c:	0800aeed 	.word	0x0800aeed
 800ae30:	0800aec1 	.word	0x0800aec1
 800ae34:	0800aeed 	.word	0x0800aeed
 800ae38:	0800aeed 	.word	0x0800aeed
 800ae3c:	0800aeed 	.word	0x0800aeed
 800ae40:	0800aeed 	.word	0x0800aeed
 800ae44:	0800aeed 	.word	0x0800aeed
 800ae48:	0800aeed 	.word	0x0800aeed
 800ae4c:	0800aeed 	.word	0x0800aeed
 800ae50:	0800aed7 	.word	0x0800aed7
 800ae54:	0800aeed 	.word	0x0800aeed
 800ae58:	0800aeed 	.word	0x0800aeed
 800ae5c:	0800aeed 	.word	0x0800aeed
 800ae60:	0800aeed 	.word	0x0800aeed
 800ae64:	0800aeed 	.word	0x0800aeed
 800ae68:	0800aeed 	.word	0x0800aeed
 800ae6c:	0800aeed 	.word	0x0800aeed
 800ae70:	0800aef5 	.word	0x0800aef5
 800ae74:	0800aeed 	.word	0x0800aeed
 800ae78:	0800aeed 	.word	0x0800aeed
 800ae7c:	0800aeed 	.word	0x0800aeed
 800ae80:	0800aeed 	.word	0x0800aeed
 800ae84:	0800aeed 	.word	0x0800aeed
 800ae88:	0800aeed 	.word	0x0800aeed
 800ae8c:	0800aeed 	.word	0x0800aeed
 800ae90:	0800aef5 	.word	0x0800aef5
 800ae94:	0800aeed 	.word	0x0800aeed
 800ae98:	0800aeed 	.word	0x0800aeed
 800ae9c:	0800aeed 	.word	0x0800aeed
 800aea0:	0800aeed 	.word	0x0800aeed
 800aea4:	0800aeed 	.word	0x0800aeed
 800aea8:	0800aeed 	.word	0x0800aeed
 800aeac:	0800aeed 	.word	0x0800aeed
 800aeb0:	0800aef5 	.word	0x0800aef5
 800aeb4:	58024400 	.word	0x58024400
 800aeb8:	58024800 	.word	0x58024800
 800aebc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec4:	3308      	adds	r3, #8
 800aec6:	2101      	movs	r1, #1
 800aec8:	4618      	mov	r0, r3
 800aeca:	f001 fdcb 	bl	800ca64 <RCCEx_PLL2_Config>
 800aece:	4603      	mov	r3, r0
 800aed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aed4:	e00f      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeda:	3328      	adds	r3, #40	@ 0x28
 800aedc:	2101      	movs	r1, #1
 800aede:	4618      	mov	r0, r3
 800aee0:	f001 fe72 	bl	800cbc8 <RCCEx_PLL3_Config>
 800aee4:	4603      	mov	r3, r0
 800aee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aeea:	e004      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aef2:	e000      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800aef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10a      	bne.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aefe:	4bbf      	ldr	r3, [pc, #764]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800af06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af0c:	4abb      	ldr	r2, [pc, #748]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af0e:	430b      	orrs	r3, r1
 800af10:	6553      	str	r3, [r2, #84]	@ 0x54
 800af12:	e003      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800af1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f002 0302 	and.w	r3, r2, #2
 800af28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af2c:	2300      	movs	r3, #0
 800af2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800af36:	460b      	mov	r3, r1
 800af38:	4313      	orrs	r3, r2
 800af3a:	d041      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800af3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af42:	2b05      	cmp	r3, #5
 800af44:	d824      	bhi.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800af46:	a201      	add	r2, pc, #4	@ (adr r2, 800af4c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800af99 	.word	0x0800af99
 800af50:	0800af65 	.word	0x0800af65
 800af54:	0800af7b 	.word	0x0800af7b
 800af58:	0800af99 	.word	0x0800af99
 800af5c:	0800af99 	.word	0x0800af99
 800af60:	0800af99 	.word	0x0800af99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af68:	3308      	adds	r3, #8
 800af6a:	2101      	movs	r1, #1
 800af6c:	4618      	mov	r0, r3
 800af6e:	f001 fd79 	bl	800ca64 <RCCEx_PLL2_Config>
 800af72:	4603      	mov	r3, r0
 800af74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800af78:	e00f      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af7e:	3328      	adds	r3, #40	@ 0x28
 800af80:	2101      	movs	r1, #1
 800af82:	4618      	mov	r0, r3
 800af84:	f001 fe20 	bl	800cbc8 <RCCEx_PLL3_Config>
 800af88:	4603      	mov	r3, r0
 800af8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800af8e:	e004      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af96:	e000      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800af98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800afa2:	4b96      	ldr	r3, [pc, #600]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afa6:	f023 0107 	bic.w	r1, r3, #7
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afb0:	4a92      	ldr	r2, [pc, #584]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afb2:	430b      	orrs	r3, r1
 800afb4:	6553      	str	r3, [r2, #84]	@ 0x54
 800afb6:	e003      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f002 0304 	and.w	r3, r2, #4
 800afcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800afd0:	2300      	movs	r3, #0
 800afd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800afd6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800afda:	460b      	mov	r3, r1
 800afdc:	4313      	orrs	r3, r2
 800afde:	d044      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800afe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afe8:	2b05      	cmp	r3, #5
 800afea:	d825      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800afec:	a201      	add	r2, pc, #4	@ (adr r2, 800aff4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b041 	.word	0x0800b041
 800aff8:	0800b00d 	.word	0x0800b00d
 800affc:	0800b023 	.word	0x0800b023
 800b000:	0800b041 	.word	0x0800b041
 800b004:	0800b041 	.word	0x0800b041
 800b008:	0800b041 	.word	0x0800b041
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b010:	3308      	adds	r3, #8
 800b012:	2101      	movs	r1, #1
 800b014:	4618      	mov	r0, r3
 800b016:	f001 fd25 	bl	800ca64 <RCCEx_PLL2_Config>
 800b01a:	4603      	mov	r3, r0
 800b01c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b020:	e00f      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b026:	3328      	adds	r3, #40	@ 0x28
 800b028:	2101      	movs	r1, #1
 800b02a:	4618      	mov	r0, r3
 800b02c:	f001 fdcc 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b030:	4603      	mov	r3, r0
 800b032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b036:	e004      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b03e:	e000      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b040:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10b      	bne.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b04a:	4b6c      	ldr	r3, [pc, #432]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b04c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b04e:	f023 0107 	bic.w	r1, r3, #7
 800b052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b05a:	4a68      	ldr	r2, [pc, #416]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b05c:	430b      	orrs	r3, r1
 800b05e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b060:	e003      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b066:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f002 0320 	and.w	r3, r2, #32
 800b076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b07a:	2300      	movs	r3, #0
 800b07c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b080:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b084:	460b      	mov	r3, r1
 800b086:	4313      	orrs	r3, r2
 800b088:	d055      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b08e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b096:	d033      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b09c:	d82c      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0a2:	d02f      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b0a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0a8:	d826      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0ae:	d02b      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b0b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0b4:	d820      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0ba:	d012      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0c0:	d81a      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d022      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b0c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0ca:	d115      	bne.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f001 fcc5 	bl	800ca64 <RCCEx_PLL2_Config>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b0e0:	e015      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0e6:	3328      	adds	r3, #40	@ 0x28
 800b0e8:	2102      	movs	r1, #2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f001 fd6c 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b0f6:	e00a      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b0fe:	e006      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b100:	bf00      	nop
 800b102:	e004      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b104:	bf00      	nop
 800b106:	e002      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b108:	bf00      	nop
 800b10a:	e000      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b10e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10b      	bne.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b116:	4b39      	ldr	r3, [pc, #228]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b11a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b126:	4a35      	ldr	r2, [pc, #212]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b128:	430b      	orrs	r3, r1
 800b12a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b12c:	e003      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b12e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b132:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b142:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b146:	2300      	movs	r3, #0
 800b148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b14c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b150:	460b      	mov	r3, r1
 800b152:	4313      	orrs	r3, r2
 800b154:	d058      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b15a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b15e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b162:	d033      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b164:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b168:	d82c      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b16a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b16e:	d02f      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b174:	d826      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b17a:	d02b      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b17c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b180:	d820      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b186:	d012      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b18c:	d81a      	bhi.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d022      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b196:	d115      	bne.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b19c:	3308      	adds	r3, #8
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f001 fc5f 	bl	800ca64 <RCCEx_PLL2_Config>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b1ac:	e015      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b2:	3328      	adds	r3, #40	@ 0x28
 800b1b4:	2102      	movs	r1, #2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f001 fd06 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b1c2:	e00a      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b1ca:	e006      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1cc:	bf00      	nop
 800b1ce:	e004      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1d0:	bf00      	nop
 800b1d2:	e002      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1d4:	bf00      	nop
 800b1d6:	e000      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b1d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10e      	bne.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b1e2:	4b06      	ldr	r3, [pc, #24]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b1f2:	4a02      	ldr	r2, [pc, #8]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b1f8:	e006      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b1fa:	bf00      	nop
 800b1fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b204:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b214:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b218:	2300      	movs	r3, #0
 800b21a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b21e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b222:	460b      	mov	r3, r1
 800b224:	4313      	orrs	r3, r2
 800b226:	d055      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b22c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b230:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b234:	d033      	beq.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b236:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b23a:	d82c      	bhi.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b23c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b240:	d02f      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b246:	d826      	bhi.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b248:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b24c:	d02b      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b24e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b252:	d820      	bhi.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b258:	d012      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b25a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b25e:	d81a      	bhi.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b260:	2b00      	cmp	r3, #0
 800b262:	d022      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b268:	d115      	bne.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b26e:	3308      	adds	r3, #8
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f001 fbf6 	bl	800ca64 <RCCEx_PLL2_Config>
 800b278:	4603      	mov	r3, r0
 800b27a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b27e:	e015      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b284:	3328      	adds	r3, #40	@ 0x28
 800b286:	2102      	movs	r1, #2
 800b288:	4618      	mov	r0, r3
 800b28a:	f001 fc9d 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b294:	e00a      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b29c:	e006      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b29e:	bf00      	nop
 800b2a0:	e004      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2a2:	bf00      	nop
 800b2a4:	e002      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2a6:	bf00      	nop
 800b2a8:	e000      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10b      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b2b4:	4ba0      	ldr	r3, [pc, #640]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2c4:	4a9c      	ldr	r2, [pc, #624]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2c6:	430b      	orrs	r3, r1
 800b2c8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b2ca:	e003      	b.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f002 0308 	and.w	r3, r2, #8
 800b2e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b2ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	d01e      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b300:	d10c      	bne.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b306:	3328      	adds	r3, #40	@ 0x28
 800b308:	2102      	movs	r1, #2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f001 fc5c 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b31c:	4b86      	ldr	r3, [pc, #536]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b320:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b32c:	4a82      	ldr	r2, [pc, #520]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b32e:	430b      	orrs	r3, r1
 800b330:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f002 0310 	and.w	r3, r2, #16
 800b33e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b342:	2300      	movs	r3, #0
 800b344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b348:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b34c:	460b      	mov	r3, r1
 800b34e:	4313      	orrs	r3, r2
 800b350:	d01e      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b35a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b35e:	d10c      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b364:	3328      	adds	r3, #40	@ 0x28
 800b366:	2102      	movs	r1, #2
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 fc2d 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b37a:	4b6f      	ldr	r3, [pc, #444]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b37c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b37e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b38a:	4a6b      	ldr	r2, [pc, #428]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b38c:	430b      	orrs	r3, r1
 800b38e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b39c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b39e:	2300      	movs	r3, #0
 800b3a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b3a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	d03e      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3b8:	d022      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b3ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3be:	d81b      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d003      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b3c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3c8:	d00b      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b3ca:	e015      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f001 fb45 	bl	800ca64 <RCCEx_PLL2_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b3e0:	e00f      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3e6:	3328      	adds	r3, #40	@ 0x28
 800b3e8:	2102      	movs	r1, #2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f001 fbec 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b3f6:	e004      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b3fe:	e000      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b400:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10b      	bne.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b40a:	4b4b      	ldr	r3, [pc, #300]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b40c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b40e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b41a:	4a47      	ldr	r2, [pc, #284]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b41c:	430b      	orrs	r3, r1
 800b41e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b420:	e003      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b426:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b436:	673b      	str	r3, [r7, #112]	@ 0x70
 800b438:	2300      	movs	r3, #0
 800b43a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b43c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b440:	460b      	mov	r3, r1
 800b442:	4313      	orrs	r3, r2
 800b444:	d03b      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b44e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b452:	d01f      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b454:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b458:	d818      	bhi.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b45a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b45e:	d003      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b464:	d007      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b466:	e011      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b468:	4b33      	ldr	r3, [pc, #204]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46c:	4a32      	ldr	r2, [pc, #200]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b46e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b474:	e00f      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b47a:	3328      	adds	r3, #40	@ 0x28
 800b47c:	2101      	movs	r1, #1
 800b47e:	4618      	mov	r0, r3
 800b480:	f001 fba2 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b484:	4603      	mov	r3, r0
 800b486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b48a:	e004      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b492:	e000      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b494:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10b      	bne.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b49e:	4b26      	ldr	r3, [pc, #152]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4ae:	4a22      	ldr	r2, [pc, #136]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4b0:	430b      	orrs	r3, r1
 800b4b2:	6553      	str	r3, [r2, #84]	@ 0x54
 800b4b4:	e003      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b4ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b4d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	d034      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d003      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b4e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4e8:	d007      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b4ea:	e011      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ec:	4b12      	ldr	r3, [pc, #72]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f0:	4a11      	ldr	r2, [pc, #68]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b4f8:	e00e      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4fe:	3308      	adds	r3, #8
 800b500:	2102      	movs	r1, #2
 800b502:	4618      	mov	r0, r3
 800b504:	f001 faae 	bl	800ca64 <RCCEx_PLL2_Config>
 800b508:	4603      	mov	r3, r0
 800b50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b50e:	e003      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b516:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10d      	bne.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b520:	4b05      	ldr	r3, [pc, #20]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b524:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b52c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b52e:	4a02      	ldr	r2, [pc, #8]	@ (800b538 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b530:	430b      	orrs	r3, r1
 800b532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b534:	e006      	b.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b536:	bf00      	nop
 800b538:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b53c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b540:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b550:	663b      	str	r3, [r7, #96]	@ 0x60
 800b552:	2300      	movs	r3, #0
 800b554:	667b      	str	r3, [r7, #100]	@ 0x64
 800b556:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b55a:	460b      	mov	r3, r1
 800b55c:	4313      	orrs	r3, r2
 800b55e:	d00c      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b564:	3328      	adds	r3, #40	@ 0x28
 800b566:	2102      	movs	r1, #2
 800b568:	4618      	mov	r0, r3
 800b56a:	f001 fb2d 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b586:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b588:	2300      	movs	r3, #0
 800b58a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b58c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b590:	460b      	mov	r3, r1
 800b592:	4313      	orrs	r3, r2
 800b594:	d036      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b59a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b59c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5a0:	d018      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b5a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5a6:	d811      	bhi.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b5a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5ac:	d014      	beq.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b5ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5b2:	d80b      	bhi.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d011      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b5b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5bc:	d106      	bne.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5be:	4bb7      	ldr	r3, [pc, #732]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c2:	4ab6      	ldr	r2, [pc, #728]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b5ca:	e008      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b5d2:	e004      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b5d4:	bf00      	nop
 800b5d6:	e002      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b5d8:	bf00      	nop
 800b5da:	e000      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b5dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b5e6:	4bad      	ldr	r3, [pc, #692]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5f4:	4aa9      	ldr	r2, [pc, #676]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5f6:	430b      	orrs	r3, r1
 800b5f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800b5fa:	e003      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b610:	653b      	str	r3, [r7, #80]	@ 0x50
 800b612:	2300      	movs	r3, #0
 800b614:	657b      	str	r3, [r7, #84]	@ 0x54
 800b616:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b61a:	460b      	mov	r3, r1
 800b61c:	4313      	orrs	r3, r2
 800b61e:	d009      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b620:	4b9e      	ldr	r3, [pc, #632]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b624:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b62c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b62e:	4a9b      	ldr	r2, [pc, #620]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b630:	430b      	orrs	r3, r1
 800b632:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b640:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b642:	2300      	movs	r3, #0
 800b644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b646:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b64a:	460b      	mov	r3, r1
 800b64c:	4313      	orrs	r3, r2
 800b64e:	d009      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b650:	4b92      	ldr	r3, [pc, #584]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b654:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b65c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b65e:	4a8f      	ldr	r2, [pc, #572]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b660:	430b      	orrs	r3, r1
 800b662:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b670:	643b      	str	r3, [r7, #64]	@ 0x40
 800b672:	2300      	movs	r3, #0
 800b674:	647b      	str	r3, [r7, #68]	@ 0x44
 800b676:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b67a:	460b      	mov	r3, r1
 800b67c:	4313      	orrs	r3, r2
 800b67e:	d00e      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b680:	4b86      	ldr	r3, [pc, #536]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	4a85      	ldr	r2, [pc, #532]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b686:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b68a:	6113      	str	r3, [r2, #16]
 800b68c:	4b83      	ldr	r3, [pc, #524]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b68e:	6919      	ldr	r1, [r3, #16]
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b694:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b698:	4a80      	ldr	r2, [pc, #512]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b69a:	430b      	orrs	r3, r1
 800b69c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	d009      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b6ba:	4b78      	ldr	r3, [pc, #480]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6c8:	4a74      	ldr	r2, [pc, #464]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b6da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6dc:	2300      	movs	r3, #0
 800b6de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	d00a      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b6ea:	4b6c      	ldr	r3, [pc, #432]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6fa:	4a68      	ldr	r2, [pc, #416]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6fc:	430b      	orrs	r3, r1
 800b6fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	2100      	movs	r1, #0
 800b70a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b712:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b716:	460b      	mov	r3, r1
 800b718:	4313      	orrs	r3, r2
 800b71a:	d011      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b720:	3308      	adds	r3, #8
 800b722:	2100      	movs	r1, #0
 800b724:	4618      	mov	r0, r3
 800b726:	f001 f99d 	bl	800ca64 <RCCEx_PLL2_Config>
 800b72a:	4603      	mov	r3, r0
 800b72c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b734:	2b00      	cmp	r3, #0
 800b736:	d003      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b73c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	2100      	movs	r1, #0
 800b74a:	6239      	str	r1, [r7, #32]
 800b74c:	f003 0302 	and.w	r3, r3, #2
 800b750:	627b      	str	r3, [r7, #36]	@ 0x24
 800b752:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b756:	460b      	mov	r3, r1
 800b758:	4313      	orrs	r3, r2
 800b75a:	d011      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b760:	3308      	adds	r3, #8
 800b762:	2101      	movs	r1, #1
 800b764:	4618      	mov	r0, r3
 800b766:	f001 f97d 	bl	800ca64 <RCCEx_PLL2_Config>
 800b76a:	4603      	mov	r3, r0
 800b76c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b774:	2b00      	cmp	r3, #0
 800b776:	d003      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b77c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	2100      	movs	r1, #0
 800b78a:	61b9      	str	r1, [r7, #24]
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	61fb      	str	r3, [r7, #28]
 800b792:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b796:	460b      	mov	r3, r1
 800b798:	4313      	orrs	r3, r2
 800b79a:	d011      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 f95d 	bl	800ca64 <RCCEx_PLL2_Config>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b7b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	6139      	str	r1, [r7, #16]
 800b7cc:	f003 0308 	and.w	r3, r3, #8
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	d011      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e0:	3328      	adds	r3, #40	@ 0x28
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 f9ef 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	2100      	movs	r1, #0
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	f003 0310 	and.w	r3, r3, #16
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b816:	460b      	mov	r3, r1
 800b818:	4313      	orrs	r3, r2
 800b81a:	d011      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b820:	3328      	adds	r3, #40	@ 0x28
 800b822:	2101      	movs	r1, #1
 800b824:	4618      	mov	r0, r3
 800b826:	f001 f9cf 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b83c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	2100      	movs	r1, #0
 800b84a:	6039      	str	r1, [r7, #0]
 800b84c:	f003 0320 	and.w	r3, r3, #32
 800b850:	607b      	str	r3, [r7, #4]
 800b852:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b856:	460b      	mov	r3, r1
 800b858:	4313      	orrs	r3, r2
 800b85a:	d011      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b860:	3328      	adds	r3, #40	@ 0x28
 800b862:	2102      	movs	r1, #2
 800b864:	4618      	mov	r0, r3
 800b866:	f001 f9af 	bl	800cbc8 <RCCEx_PLL3_Config>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b874:	2b00      	cmp	r3, #0
 800b876:	d003      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b87c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b880:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	e000      	b.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
}
 800b88e:	4618      	mov	r0, r3
 800b890:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b894:	46bd      	mov	sp, r7
 800b896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b89a:	bf00      	nop
 800b89c:	58024400 	.word	0x58024400

0800b8a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b090      	sub	sp, #64	@ 0x40
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b8aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b8b2:	430b      	orrs	r3, r1
 800b8b4:	f040 8094 	bne.w	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b8b8:	4b9b      	ldr	r3, [pc, #620]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8bc:	f003 0307 	and.w	r3, r3, #7
 800b8c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	f200 8087 	bhi.w	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b90d 	.word	0x0800b90d
 800b8d8:	0800b935 	.word	0x0800b935
 800b8dc:	0800b9d1 	.word	0x0800b9d1
 800b8e0:	0800b95d 	.word	0x0800b95d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8e4:	4b90      	ldr	r3, [pc, #576]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8f0:	d108      	bne.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 ff62 	bl	800c7c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b900:	f000 bc93 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b908:	f000 bc8f 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b90c:	4b86      	ldr	r3, [pc, #536]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b918:	d108      	bne.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b91a:	f107 0318 	add.w	r3, r7, #24
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 fca6 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b928:	f000 bc7f 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b930:	f000 bc7b 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b934:	4b7c      	ldr	r3, [pc, #496]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b93c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b940:	d108      	bne.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b942:	f107 030c 	add.w	r3, r7, #12
 800b946:	4618      	mov	r0, r3
 800b948:	f000 fde6 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b950:	f000 bc6b 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b958:	f000 bc67 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b95c:	4b72      	ldr	r3, [pc, #456]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b964:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b966:	4b70      	ldr	r3, [pc, #448]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f003 0304 	and.w	r3, r3, #4
 800b96e:	2b04      	cmp	r3, #4
 800b970:	d10c      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b974:	2b00      	cmp	r3, #0
 800b976:	d109      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b978:	4b6b      	ldr	r3, [pc, #428]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	08db      	lsrs	r3, r3, #3
 800b97e:	f003 0303 	and.w	r3, r3, #3
 800b982:	4a6a      	ldr	r2, [pc, #424]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b984:	fa22 f303 	lsr.w	r3, r2, r3
 800b988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b98a:	e01f      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b98c:	4b66      	ldr	r3, [pc, #408]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b998:	d106      	bne.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9a0:	d102      	bne.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b9a2:	4b63      	ldr	r3, [pc, #396]	@ (800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9a6:	e011      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9a8:	4b5f      	ldr	r3, [pc, #380]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9b4:	d106      	bne.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9bc:	d102      	bne.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b9be:	4b5d      	ldr	r3, [pc, #372]	@ (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9c2:	e003      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b9c8:	f000 bc2f 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9cc:	f000 bc2d 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9d0:	4b59      	ldr	r3, [pc, #356]	@ (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9d4:	f000 bc29 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9dc:	f000 bc25 	b.w	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b9e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b9e8:	430b      	orrs	r3, r1
 800b9ea:	f040 80a7 	bne.w	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b9ee:	4b4e      	ldr	r3, [pc, #312]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b9f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9fe:	d054      	beq.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ba00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba06:	f200 808b 	bhi.w	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ba10:	f000 8083 	beq.w	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ba14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ba1a:	f200 8081 	bhi.w	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba24:	d02f      	beq.n	800ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba2c:	d878      	bhi.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d004      	beq.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ba3a:	d012      	beq.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ba3c:	e070      	b.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba3e:	4b3a      	ldr	r3, [pc, #232]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba4a:	d107      	bne.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba50:	4618      	mov	r0, r3
 800ba52:	f000 feb5 	bl	800c7c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba5a:	e3e6      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba60:	e3e3      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba62:	4b31      	ldr	r3, [pc, #196]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba6e:	d107      	bne.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba70:	f107 0318 	add.w	r3, r7, #24
 800ba74:	4618      	mov	r0, r3
 800ba76:	f000 fbfb 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7e:	e3d4      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba84:	e3d1      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba86:	4b28      	ldr	r3, [pc, #160]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba92:	d107      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba94:	f107 030c 	add.w	r3, r7, #12
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fd3d 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa2:	e3c2      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa8:	e3bf      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baaa:	4b1f      	ldr	r3, [pc, #124]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bab2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bab4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0304 	and.w	r3, r3, #4
 800babc:	2b04      	cmp	r3, #4
 800babe:	d10c      	bne.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d109      	bne.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bac6:	4b18      	ldr	r3, [pc, #96]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	08db      	lsrs	r3, r3, #3
 800bacc:	f003 0303 	and.w	r3, r3, #3
 800bad0:	4a16      	ldr	r2, [pc, #88]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bad2:	fa22 f303 	lsr.w	r3, r2, r3
 800bad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bad8:	e01e      	b.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bada:	4b13      	ldr	r3, [pc, #76]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bae6:	d106      	bne.n	800baf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baee:	d102      	bne.n	800baf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800baf0:	4b0f      	ldr	r3, [pc, #60]	@ (800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800baf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baf4:	e010      	b.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baf6:	4b0c      	ldr	r3, [pc, #48]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bafe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb02:	d106      	bne.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb0a:	d102      	bne.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb0c:	4b09      	ldr	r3, [pc, #36]	@ (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb10:	e002      	b.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb16:	e388      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb18:	e387      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb1a:	4b07      	ldr	r3, [pc, #28]	@ (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb1e:	e384      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb24:	e381      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb26:	bf00      	nop
 800bb28:	58024400 	.word	0x58024400
 800bb2c:	03d09000 	.word	0x03d09000
 800bb30:	003d0900 	.word	0x003d0900
 800bb34:	02dc6c00 	.word	0x02dc6c00
 800bb38:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bb3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb40:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bb44:	430b      	orrs	r3, r1
 800bb46:	f040 809c 	bne.w	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bb4a:	4b9e      	ldr	r3, [pc, #632]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb4e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bb52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb5a:	d054      	beq.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb62:	f200 808b 	bhi.w	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bb6c:	f000 8083 	beq.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bb76:	f200 8081 	bhi.w	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb80:	d02f      	beq.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb88:	d878      	bhi.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d004      	beq.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb96:	d012      	beq.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bb98:	e070      	b.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb9a:	4b8a      	ldr	r3, [pc, #552]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bba2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bba6:	d107      	bne.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 fe07 	bl	800c7c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb6:	e338      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbbc:	e335      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbbe:	4b81      	ldr	r3, [pc, #516]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbca:	d107      	bne.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbcc:	f107 0318 	add.w	r3, r7, #24
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 fb4d 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbda:	e326      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe0:	e323      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbe2:	4b78      	ldr	r3, [pc, #480]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbee:	d107      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbf0:	f107 030c 	add.w	r3, r7, #12
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 fc8f 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbfe:	e314      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc04:	e311      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc06:	4b6f      	ldr	r3, [pc, #444]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc10:	4b6c      	ldr	r3, [pc, #432]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d10c      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d109      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc22:	4b68      	ldr	r3, [pc, #416]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	08db      	lsrs	r3, r3, #3
 800bc28:	f003 0303 	and.w	r3, r3, #3
 800bc2c:	4a66      	ldr	r2, [pc, #408]	@ (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bc2e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc34:	e01e      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc36:	4b63      	ldr	r3, [pc, #396]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc42:	d106      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bc44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc4a:	d102      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc4c:	4b5f      	ldr	r3, [pc, #380]	@ (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc50:	e010      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc52:	4b5c      	ldr	r3, [pc, #368]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc5e:	d106      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bc60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc66:	d102      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc68:	4b59      	ldr	r3, [pc, #356]	@ (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc6c:	e002      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bc72:	e2da      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc74:	e2d9      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc76:	4b57      	ldr	r3, [pc, #348]	@ (800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bc78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7a:	e2d6      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc80:	e2d3      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bc82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc86:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	f040 80a7 	bne.w	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bc90:	4b4c      	ldr	r3, [pc, #304]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bc98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bca0:	d055      	beq.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bca8:	f200 8096 	bhi.w	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bcb2:	f000 8084 	beq.w	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bcbc:	f200 808c 	bhi.w	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcc6:	d030      	beq.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcce:	f200 8083 	bhi.w	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcde:	d012      	beq.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bce0:	e07a      	b.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bce2:	4b38      	ldr	r3, [pc, #224]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcee:	d107      	bne.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 fd63 	bl	800c7c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcfe:	e294      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd04:	e291      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd06:	4b2f      	ldr	r3, [pc, #188]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd12:	d107      	bne.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd14:	f107 0318 	add.w	r3, r7, #24
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 faa9 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd22:	e282      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd28:	e27f      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd2a:	4b26      	ldr	r3, [pc, #152]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd36:	d107      	bne.n	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd38:	f107 030c 	add.w	r3, r7, #12
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f000 fbeb 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd46:	e270      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4c:	e26d      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bd56:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd58:	4b1a      	ldr	r3, [pc, #104]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b04      	cmp	r3, #4
 800bd62:	d10c      	bne.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d109      	bne.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd6a:	4b16      	ldr	r3, [pc, #88]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	08db      	lsrs	r3, r3, #3
 800bd70:	f003 0303 	and.w	r3, r3, #3
 800bd74:	4a14      	ldr	r2, [pc, #80]	@ (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bd76:	fa22 f303 	lsr.w	r3, r2, r3
 800bd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd7c:	e01e      	b.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd7e:	4b11      	ldr	r3, [pc, #68]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd8a:	d106      	bne.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd92:	d102      	bne.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd94:	4b0d      	ldr	r3, [pc, #52]	@ (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd98:	e010      	b.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bda2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bda6:	d106      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bda8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdae:	d102      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdb0:	4b07      	ldr	r3, [pc, #28]	@ (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdb4:	e002      	b.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bdba:	e236      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdbc:	e235      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdbe:	4b05      	ldr	r3, [pc, #20]	@ (800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bdc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdc2:	e232      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdc4:	58024400 	.word	0x58024400
 800bdc8:	03d09000 	.word	0x03d09000
 800bdcc:	003d0900 	.word	0x003d0900
 800bdd0:	02dc6c00 	.word	0x02dc6c00
 800bdd4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bddc:	e225      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bde6:	430b      	orrs	r3, r1
 800bde8:	f040 8085 	bne.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bdec:	4b9c      	ldr	r3, [pc, #624]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdf0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800bdf4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdfc:	d06b      	beq.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be04:	d874      	bhi.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be0c:	d056      	beq.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800be0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be14:	d86c      	bhi.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be1c:	d03b      	beq.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800be1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be24:	d864      	bhi.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be2c:	d021      	beq.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800be2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be34:	d85c      	bhi.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800be3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be42:	d004      	beq.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800be44:	e054      	b.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800be46:	f7fe fb5f 	bl	800a508 <HAL_RCC_GetPCLK1Freq>
 800be4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be4c:	e1ed      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be4e:	4b84      	ldr	r3, [pc, #528]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be5a:	d107      	bne.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be5c:	f107 0318 	add.w	r3, r7, #24
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fa05 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be6a:	e1de      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be70:	e1db      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be72:	4b7b      	ldr	r3, [pc, #492]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be7e:	d107      	bne.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	4618      	mov	r0, r3
 800be86:	f000 fb47 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be8e:	e1cc      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be90:	2300      	movs	r3, #0
 800be92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be94:	e1c9      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be96:	4b72      	ldr	r3, [pc, #456]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b04      	cmp	r3, #4
 800bea0:	d109      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bea2:	4b6f      	ldr	r3, [pc, #444]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	08db      	lsrs	r3, r3, #3
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	4a6d      	ldr	r2, [pc, #436]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800beae:	fa22 f303 	lsr.w	r3, r2, r3
 800beb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb4:	e1b9      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beba:	e1b6      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bebc:	4b68      	ldr	r3, [pc, #416]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bec8:	d102      	bne.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800beca:	4b67      	ldr	r3, [pc, #412]	@ (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800becc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bece:	e1ac      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bed4:	e1a9      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bed6:	4b62      	ldr	r3, [pc, #392]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bee2:	d102      	bne.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bee4:	4b61      	ldr	r3, [pc, #388]	@ (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bee8:	e19f      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beee:	e19c      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bef4:	e199      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800befa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800befe:	430b      	orrs	r3, r1
 800bf00:	d173      	bne.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bf02:	4b57      	ldr	r3, [pc, #348]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bf0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf12:	d02f      	beq.n	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf1a:	d863      	bhi.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d004      	beq.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf28:	d012      	beq.n	800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bf2a:	e05b      	b.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf2c:	4b4c      	ldr	r3, [pc, #304]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf38:	d107      	bne.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3a:	f107 0318 	add.w	r3, r7, #24
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 f996 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf48:	e16f      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf4e:	e16c      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf50:	4b43      	ldr	r3, [pc, #268]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf5c:	d107      	bne.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf5e:	f107 030c 	add.w	r3, r7, #12
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fad8 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf6c:	e15d      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf72:	e15a      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf74:	4b3a      	ldr	r3, [pc, #232]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bf7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf7e:	4b38      	ldr	r3, [pc, #224]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0304 	and.w	r3, r3, #4
 800bf86:	2b04      	cmp	r3, #4
 800bf88:	d10c      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bf8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d109      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf90:	4b33      	ldr	r3, [pc, #204]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	08db      	lsrs	r3, r3, #3
 800bf96:	f003 0303 	and.w	r3, r3, #3
 800bf9a:	4a32      	ldr	r2, [pc, #200]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bf9c:	fa22 f303 	lsr.w	r3, r2, r3
 800bfa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfa2:	e01e      	b.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfa4:	4b2e      	ldr	r3, [pc, #184]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfb0:	d106      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bfb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfb8:	d102      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfba:	4b2b      	ldr	r3, [pc, #172]	@ (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfbe:	e010      	b.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfc0:	4b27      	ldr	r3, [pc, #156]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfcc:	d106      	bne.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bfce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfd4:	d102      	bne.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfd6:	4b25      	ldr	r3, [pc, #148]	@ (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bfd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfda:	e002      	b.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bfe0:	e123      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfe2:	e122      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfe8:	e11f      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bfea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800bff2:	430b      	orrs	r3, r1
 800bff4:	d13c      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bff6:	4b1a      	ldr	r3, [pc, #104]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bffe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c002:	2b00      	cmp	r3, #0
 800c004:	d004      	beq.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c00c:	d012      	beq.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c00e:	e023      	b.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c010:	4b13      	ldr	r3, [pc, #76]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c01c:	d107      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c01e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c022:	4618      	mov	r0, r3
 800c024:	f000 fbcc 	bl	800c7c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c02c:	e0fd      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c032:	e0fa      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c034:	4b0a      	ldr	r3, [pc, #40]	@ (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c03c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c040:	d107      	bne.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c042:	f107 0318 	add.w	r3, r7, #24
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f912 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c04c:	6a3b      	ldr	r3, [r7, #32]
 800c04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c050:	e0eb      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c056:	e0e8      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c05c:	e0e5      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c05e:	bf00      	nop
 800c060:	58024400 	.word	0x58024400
 800c064:	03d09000 	.word	0x03d09000
 800c068:	003d0900 	.word	0x003d0900
 800c06c:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c074:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c078:	430b      	orrs	r3, r1
 800c07a:	f040 8085 	bne.w	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c07e:	4b6d      	ldr	r3, [pc, #436]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c082:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c086:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c08e:	d06b      	beq.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c096:	d874      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c09a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c09e:	d056      	beq.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0a6:	d86c      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0ae:	d03b      	beq.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0b6:	d864      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0be:	d021      	beq.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0c6:	d85c      	bhi.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d004      	beq.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0d4:	d004      	beq.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c0d6:	e054      	b.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c0d8:	f000 f8b4 	bl	800c244 <HAL_RCCEx_GetD3PCLK1Freq>
 800c0dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c0de:	e0a4      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0e0:	4b54      	ldr	r3, [pc, #336]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0ec:	d107      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ee:	f107 0318 	add.w	r3, r7, #24
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 f8bc 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0fc:	e095      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c102:	e092      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c104:	4b4b      	ldr	r3, [pc, #300]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c10c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c110:	d107      	bne.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	4618      	mov	r0, r3
 800c118:	f000 f9fe 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c120:	e083      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c126:	e080      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c128:	4b42      	ldr	r3, [pc, #264]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b04      	cmp	r3, #4
 800c132:	d109      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c134:	4b3f      	ldr	r3, [pc, #252]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	08db      	lsrs	r3, r3, #3
 800c13a:	f003 0303 	and.w	r3, r3, #3
 800c13e:	4a3e      	ldr	r2, [pc, #248]	@ (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c140:	fa22 f303 	lsr.w	r3, r2, r3
 800c144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c146:	e070      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c148:	2300      	movs	r3, #0
 800c14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c14c:	e06d      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c14e:	4b39      	ldr	r3, [pc, #228]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c15a:	d102      	bne.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c15c:	4b37      	ldr	r3, [pc, #220]	@ (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c160:	e063      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c166:	e060      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c168:	4b32      	ldr	r3, [pc, #200]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c174:	d102      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c176:	4b32      	ldr	r3, [pc, #200]	@ (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17a:	e056      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c180:	e053      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c186:	e050      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c18c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c190:	430b      	orrs	r3, r1
 800c192:	d148      	bne.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c194:	4b27      	ldr	r3, [pc, #156]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c198:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c19c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1a4:	d02a      	beq.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1ac:	d838      	bhi.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d004      	beq.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1ba:	d00d      	beq.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c1bc:	e030      	b.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1be:	4b1d      	ldr	r3, [pc, #116]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1ca:	d102      	bne.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c1cc:	4b1c      	ldr	r3, [pc, #112]	@ (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d0:	e02b      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1d6:	e028      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1d8:	4b16      	ldr	r3, [pc, #88]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1e4:	d107      	bne.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fae8 	bl	800c7c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1f4:	e019      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1fa:	e016      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c204:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c208:	d107      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c20a:	f107 0318 	add.w	r3, r7, #24
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 f82e 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c218:	e007      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c21e:	e004      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c220:	2300      	movs	r3, #0
 800c222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c224:	e001      	b.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3740      	adds	r7, #64	@ 0x40
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	58024400 	.word	0x58024400
 800c238:	03d09000 	.word	0x03d09000
 800c23c:	003d0900 	.word	0x003d0900
 800c240:	02dc6c00 	.word	0x02dc6c00

0800c244 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c248:	f7fe f92e 	bl	800a4a8 <HAL_RCC_GetHCLKFreq>
 800c24c:	4602      	mov	r2, r0
 800c24e:	4b06      	ldr	r3, [pc, #24]	@ (800c268 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	091b      	lsrs	r3, r3, #4
 800c254:	f003 0307 	and.w	r3, r3, #7
 800c258:	4904      	ldr	r1, [pc, #16]	@ (800c26c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c25a:	5ccb      	ldrb	r3, [r1, r3]
 800c25c:	f003 031f 	and.w	r3, r3, #31
 800c260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c264:	4618      	mov	r0, r3
 800c266:	bd80      	pop	{r7, pc}
 800c268:	58024400 	.word	0x58024400
 800c26c:	08017394 	.word	0x08017394

0800c270 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c270:	b480      	push	{r7}
 800c272:	b089      	sub	sp, #36	@ 0x24
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c278:	4ba1      	ldr	r3, [pc, #644]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c27c:	f003 0303 	and.w	r3, r3, #3
 800c280:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c282:	4b9f      	ldr	r3, [pc, #636]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c286:	0b1b      	lsrs	r3, r3, #12
 800c288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c28c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c28e:	4b9c      	ldr	r3, [pc, #624]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c292:	091b      	lsrs	r3, r3, #4
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c29a:	4b99      	ldr	r3, [pc, #612]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c29c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c29e:	08db      	lsrs	r3, r3, #3
 800c2a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	fb02 f303 	mul.w	r3, r2, r3
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 8111 	beq.w	800c4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	f000 8083 	beq.w	800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	f200 80a1 	bhi.w	800c410 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d003      	beq.n	800c2dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d056      	beq.n	800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c2da:	e099      	b.n	800c410 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2dc:	4b88      	ldr	r3, [pc, #544]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 0320 	and.w	r3, r3, #32
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d02d      	beq.n	800c344 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2e8:	4b85      	ldr	r3, [pc, #532]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	08db      	lsrs	r3, r3, #3
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	4a84      	ldr	r2, [pc, #528]	@ (800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	ee07 3a90 	vmov	s15, r3
 800c300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	ee07 3a90 	vmov	s15, r3
 800c30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c312:	4b7b      	ldr	r3, [pc, #492]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31a:	ee07 3a90 	vmov	s15, r3
 800c31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c322:	ed97 6a03 	vldr	s12, [r7, #12]
 800c326:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c342:	e087      	b.n	800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	ee07 3a90 	vmov	s15, r3
 800c34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c356:	4b6a      	ldr	r3, [pc, #424]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35e:	ee07 3a90 	vmov	s15, r3
 800c362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c366:	ed97 6a03 	vldr	s12, [r7, #12]
 800c36a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c386:	e065      	b.n	800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c392:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c39a:	4b59      	ldr	r3, [pc, #356]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a2:	ee07 3a90 	vmov	s15, r3
 800c3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3ca:	e043      	b.n	800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	ee07 3a90 	vmov	s15, r3
 800c3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3de:	4b48      	ldr	r3, [pc, #288]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e6:	ee07 3a90 	vmov	s15, r3
 800c3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c40a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c40e:	e021      	b.n	800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	ee07 3a90 	vmov	s15, r3
 800c416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c41a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c41e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c422:	4b37      	ldr	r3, [pc, #220]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c42a:	ee07 3a90 	vmov	s15, r3
 800c42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c432:	ed97 6a03 	vldr	s12, [r7, #12]
 800c436:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c44e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c452:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c454:	4b2a      	ldr	r3, [pc, #168]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c458:	0a5b      	lsrs	r3, r3, #9
 800c45a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c45e:	ee07 3a90 	vmov	s15, r3
 800c462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c46a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c46e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c47a:	ee17 2a90 	vmov	r2, s15
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c482:	4b1f      	ldr	r3, [pc, #124]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c486:	0c1b      	lsrs	r3, r3, #16
 800c488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c48c:	ee07 3a90 	vmov	s15, r3
 800c490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c49c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4a8:	ee17 2a90 	vmov	r2, s15
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c4b0:	4b13      	ldr	r3, [pc, #76]	@ (800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b4:	0e1b      	lsrs	r3, r3, #24
 800c4b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4d6:	ee17 2a90 	vmov	r2, s15
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c4de:	e008      	b.n	800c4f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	609a      	str	r2, [r3, #8]
}
 800c4f2:	bf00      	nop
 800c4f4:	3724      	adds	r7, #36	@ 0x24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	58024400 	.word	0x58024400
 800c504:	03d09000 	.word	0x03d09000
 800c508:	46000000 	.word	0x46000000
 800c50c:	4c742400 	.word	0x4c742400
 800c510:	4a742400 	.word	0x4a742400
 800c514:	4c371b00 	.word	0x4c371b00

0800c518 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c518:	b480      	push	{r7}
 800c51a:	b089      	sub	sp, #36	@ 0x24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c520:	4ba1      	ldr	r3, [pc, #644]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c52a:	4b9f      	ldr	r3, [pc, #636]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52e:	0d1b      	lsrs	r3, r3, #20
 800c530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c534:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c536:	4b9c      	ldr	r3, [pc, #624]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53a:	0a1b      	lsrs	r3, r3, #8
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c542:	4b99      	ldr	r3, [pc, #612]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c546:	08db      	lsrs	r3, r3, #3
 800c548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	fb02 f303 	mul.w	r3, r2, r3
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 8111 	beq.w	800c788 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	f000 8083 	beq.w	800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b02      	cmp	r3, #2
 800c572:	f200 80a1 	bhi.w	800c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d003      	beq.n	800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d056      	beq.n	800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c582:	e099      	b.n	800c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c584:	4b88      	ldr	r3, [pc, #544]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d02d      	beq.n	800c5ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c590:	4b85      	ldr	r3, [pc, #532]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	08db      	lsrs	r3, r3, #3
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	4a84      	ldr	r2, [pc, #528]	@ (800c7ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	ee07 3a90 	vmov	s15, r3
 800c5a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ba:	4b7b      	ldr	r3, [pc, #492]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5ea:	e087      	b.n	800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fe:	4b6a      	ldr	r3, [pc, #424]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c606:	ee07 3a90 	vmov	s15, r3
 800c60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c612:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c62e:	e065      	b.n	800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c642:	4b59      	ldr	r3, [pc, #356]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64a:	ee07 3a90 	vmov	s15, r3
 800c64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c652:	ed97 6a03 	vldr	s12, [r7, #12]
 800c656:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c672:	e043      	b.n	800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	ee07 3a90 	vmov	s15, r3
 800c67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c686:	4b48      	ldr	r3, [pc, #288]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c696:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6b6:	e021      	b.n	800c6fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ca:	4b37      	ldr	r3, [pc, #220]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d2:	ee07 3a90 	vmov	s15, r3
 800c6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c6fc:	4b2a      	ldr	r3, [pc, #168]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c700:	0a5b      	lsrs	r3, r3, #9
 800c702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c712:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c716:	edd7 6a07 	vldr	s13, [r7, #28]
 800c71a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c71e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c722:	ee17 2a90 	vmov	r2, s15
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c72a:	4b1f      	ldr	r3, [pc, #124]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c72e:	0c1b      	lsrs	r3, r3, #16
 800c730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c734:	ee07 3a90 	vmov	s15, r3
 800c738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c73c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c740:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c744:	edd7 6a07 	vldr	s13, [r7, #28]
 800c748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c750:	ee17 2a90 	vmov	r2, s15
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c758:	4b13      	ldr	r3, [pc, #76]	@ (800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c75c:	0e1b      	lsrs	r3, r3, #24
 800c75e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c76e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c772:	edd7 6a07 	vldr	s13, [r7, #28]
 800c776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c77e:	ee17 2a90 	vmov	r2, s15
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c786:	e008      	b.n	800c79a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	609a      	str	r2, [r3, #8]
}
 800c79a:	bf00      	nop
 800c79c:	3724      	adds	r7, #36	@ 0x24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	58024400 	.word	0x58024400
 800c7ac:	03d09000 	.word	0x03d09000
 800c7b0:	46000000 	.word	0x46000000
 800c7b4:	4c742400 	.word	0x4c742400
 800c7b8:	4a742400 	.word	0x4a742400
 800c7bc:	4c371b00 	.word	0x4c371b00

0800c7c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b089      	sub	sp, #36	@ 0x24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7c8:	4ba0      	ldr	r3, [pc, #640]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7cc:	f003 0303 	and.w	r3, r3, #3
 800c7d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c7d2:	4b9e      	ldr	r3, [pc, #632]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d6:	091b      	lsrs	r3, r3, #4
 800c7d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c7de:	4b9b      	ldr	r3, [pc, #620]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c7e8:	4b98      	ldr	r3, [pc, #608]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ec:	08db      	lsrs	r3, r3, #3
 800c7ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	fb02 f303 	mul.w	r3, r2, r3
 800c7f8:	ee07 3a90 	vmov	s15, r3
 800c7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c800:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 8111 	beq.w	800ca2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	f000 8083 	beq.w	800c91a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	2b02      	cmp	r3, #2
 800c818:	f200 80a1 	bhi.w	800c95e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d056      	beq.n	800c8d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c828:	e099      	b.n	800c95e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c82a:	4b88      	ldr	r3, [pc, #544]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b00      	cmp	r3, #0
 800c834:	d02d      	beq.n	800c892 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c836:	4b85      	ldr	r3, [pc, #532]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	08db      	lsrs	r3, r3, #3
 800c83c:	f003 0303 	and.w	r3, r3, #3
 800c840:	4a83      	ldr	r2, [pc, #524]	@ (800ca50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c842:	fa22 f303 	lsr.w	r3, r2, r3
 800c846:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	ee07 3a90 	vmov	s15, r3
 800c858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c860:	4b7a      	ldr	r3, [pc, #488]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c868:	ee07 3a90 	vmov	s15, r3
 800c86c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c870:	ed97 6a03 	vldr	s12, [r7, #12]
 800c874:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c87c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c890:	e087      	b.n	800c9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	ee07 3a90 	vmov	s15, r3
 800c898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c8a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a4:	4b69      	ldr	r3, [pc, #420]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ac:	ee07 3a90 	vmov	s15, r3
 800c8b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8d4:	e065      	b.n	800c9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	ee07 3a90 	vmov	s15, r3
 800c8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c8e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e8:	4b58      	ldr	r3, [pc, #352]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f0:	ee07 3a90 	vmov	s15, r3
 800c8f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c90c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c910:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c914:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c918:	e043      	b.n	800c9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	ee07 3a90 	vmov	s15, r3
 800c920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c924:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c92c:	4b47      	ldr	r3, [pc, #284]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c92e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c934:	ee07 3a90 	vmov	s15, r3
 800c938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c93c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c940:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c94c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c954:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c958:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c95c:	e021      	b.n	800c9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	ee07 3a90 	vmov	s15, r3
 800c964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c968:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c96c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c970:	4b36      	ldr	r3, [pc, #216]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c978:	ee07 3a90 	vmov	s15, r3
 800c97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c980:	ed97 6a03 	vldr	s12, [r7, #12]
 800c984:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ca54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c98c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c9a2:	4b2a      	ldr	r3, [pc, #168]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9a6:	0a5b      	lsrs	r3, r3, #9
 800c9a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9ac:	ee07 3a90 	vmov	s15, r3
 800c9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9c8:	ee17 2a90 	vmov	r2, s15
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c9d0:	4b1e      	ldr	r3, [pc, #120]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9d4:	0c1b      	lsrs	r3, r3, #16
 800c9d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9da:	ee07 3a90 	vmov	s15, r3
 800c9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9f6:	ee17 2a90 	vmov	r2, s15
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c9fe:	4b13      	ldr	r3, [pc, #76]	@ (800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca02:	0e1b      	lsrs	r3, r3, #24
 800ca04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca08:	ee07 3a90 	vmov	s15, r3
 800ca0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca18:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca24:	ee17 2a90 	vmov	r2, s15
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ca2c:	e008      	b.n	800ca40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	609a      	str	r2, [r3, #8]
}
 800ca40:	bf00      	nop
 800ca42:	3724      	adds	r7, #36	@ 0x24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	58024400 	.word	0x58024400
 800ca50:	03d09000 	.word	0x03d09000
 800ca54:	46000000 	.word	0x46000000
 800ca58:	4c742400 	.word	0x4c742400
 800ca5c:	4a742400 	.word	0x4a742400
 800ca60:	4c371b00 	.word	0x4c371b00

0800ca64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca72:	4b53      	ldr	r3, [pc, #332]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800ca74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca76:	f003 0303 	and.w	r3, r3, #3
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	d101      	bne.n	800ca82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e099      	b.n	800cbb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ca82:	4b4f      	ldr	r3, [pc, #316]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a4e      	ldr	r2, [pc, #312]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800ca88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ca8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca8e:	f7fb fc79 	bl	8008384 <HAL_GetTick>
 800ca92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca94:	e008      	b.n	800caa8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca96:	f7fb fc75 	bl	8008384 <HAL_GetTick>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	d901      	bls.n	800caa8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e086      	b.n	800cbb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800caa8:	4b45      	ldr	r3, [pc, #276]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1f0      	bne.n	800ca96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cab4:	4b42      	ldr	r3, [pc, #264]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cab8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	031b      	lsls	r3, r3, #12
 800cac2:	493f      	ldr	r1, [pc, #252]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cac4:	4313      	orrs	r3, r2
 800cac6:	628b      	str	r3, [r1, #40]	@ 0x28
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	3b01      	subs	r3, #1
 800cace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	3b01      	subs	r3, #1
 800cad8:	025b      	lsls	r3, r3, #9
 800cada:	b29b      	uxth	r3, r3
 800cadc:	431a      	orrs	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	041b      	lsls	r3, r3, #16
 800cae6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800caea:	431a      	orrs	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	061b      	lsls	r3, r3, #24
 800caf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800caf8:	4931      	ldr	r1, [pc, #196]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cafa:	4313      	orrs	r3, r2
 800cafc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cafe:	4b30      	ldr	r3, [pc, #192]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	492d      	ldr	r1, [pc, #180]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cb10:	4b2b      	ldr	r3, [pc, #172]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb14:	f023 0220 	bic.w	r2, r3, #32
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	4928      	ldr	r1, [pc, #160]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cb22:	4b27      	ldr	r3, [pc, #156]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb26:	4a26      	ldr	r2, [pc, #152]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb28:	f023 0310 	bic.w	r3, r3, #16
 800cb2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cb2e:	4b24      	ldr	r3, [pc, #144]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb32:	4b24      	ldr	r3, [pc, #144]	@ (800cbc4 <RCCEx_PLL2_Config+0x160>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	69d2      	ldr	r2, [r2, #28]
 800cb3a:	00d2      	lsls	r2, r2, #3
 800cb3c:	4920      	ldr	r1, [pc, #128]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cb42:	4b1f      	ldr	r3, [pc, #124]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb46:	4a1e      	ldr	r2, [pc, #120]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb48:	f043 0310 	orr.w	r3, r3, #16
 800cb4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d106      	bne.n	800cb62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cb54:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb58:	4a19      	ldr	r2, [pc, #100]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cb5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cb60:	e00f      	b.n	800cb82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d106      	bne.n	800cb76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cb68:	4b15      	ldr	r3, [pc, #84]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb6c:	4a14      	ldr	r2, [pc, #80]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cb74:	e005      	b.n	800cb82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cb76:	4b12      	ldr	r3, [pc, #72]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7a:	4a11      	ldr	r2, [pc, #68]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cb80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cb82:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a0e      	ldr	r2, [pc, #56]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cb88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cb8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb8e:	f7fb fbf9 	bl	8008384 <HAL_GetTick>
 800cb92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb94:	e008      	b.n	800cba8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb96:	f7fb fbf5 	bl	8008384 <HAL_GetTick>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d901      	bls.n	800cba8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e006      	b.n	800cbb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cba8:	4b05      	ldr	r3, [pc, #20]	@ (800cbc0 <RCCEx_PLL2_Config+0x15c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d0f0      	beq.n	800cb96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	58024400 	.word	0x58024400
 800cbc4:	ffff0007 	.word	0xffff0007

0800cbc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cbd6:	4b53      	ldr	r3, [pc, #332]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cbd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbda:	f003 0303 	and.w	r3, r3, #3
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d101      	bne.n	800cbe6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e099      	b.n	800cd1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cbe6:	4b4f      	ldr	r3, [pc, #316]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a4e      	ldr	r2, [pc, #312]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cbec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cbf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbf2:	f7fb fbc7 	bl	8008384 <HAL_GetTick>
 800cbf6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cbf8:	e008      	b.n	800cc0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbfa:	f7fb fbc3 	bl	8008384 <HAL_GetTick>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d901      	bls.n	800cc0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	e086      	b.n	800cd1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc0c:	4b45      	ldr	r3, [pc, #276]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1f0      	bne.n	800cbfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cc18:	4b42      	ldr	r3, [pc, #264]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	051b      	lsls	r3, r3, #20
 800cc26:	493f      	ldr	r1, [pc, #252]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	628b      	str	r3, [r1, #40]	@ 0x28
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	025b      	lsls	r3, r3, #9
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	431a      	orrs	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	3b01      	subs	r3, #1
 800cc48:	041b      	lsls	r3, r3, #16
 800cc4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cc4e:	431a      	orrs	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	061b      	lsls	r3, r3, #24
 800cc58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cc5c:	4931      	ldr	r1, [pc, #196]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cc62:	4b30      	ldr	r3, [pc, #192]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	492d      	ldr	r1, [pc, #180]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc70:	4313      	orrs	r3, r2
 800cc72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cc74:	4b2b      	ldr	r3, [pc, #172]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	699b      	ldr	r3, [r3, #24]
 800cc80:	4928      	ldr	r1, [pc, #160]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc82:	4313      	orrs	r3, r2
 800cc84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cc86:	4b27      	ldr	r3, [pc, #156]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8a:	4a26      	ldr	r2, [pc, #152]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cc92:	4b24      	ldr	r3, [pc, #144]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cc94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc96:	4b24      	ldr	r3, [pc, #144]	@ (800cd28 <RCCEx_PLL3_Config+0x160>)
 800cc98:	4013      	ands	r3, r2
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	69d2      	ldr	r2, [r2, #28]
 800cc9e:	00d2      	lsls	r2, r2, #3
 800cca0:	4920      	ldr	r1, [pc, #128]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cca6:	4b1f      	ldr	r3, [pc, #124]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccaa:	4a1e      	ldr	r2, [pc, #120]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800ccac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ccb8:	4b1a      	ldr	r3, [pc, #104]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800ccba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccbc:	4a19      	ldr	r2, [pc, #100]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800ccbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ccc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ccc4:	e00f      	b.n	800cce6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d106      	bne.n	800ccda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cccc:	4b15      	ldr	r3, [pc, #84]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800ccce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd0:	4a14      	ldr	r2, [pc, #80]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800ccd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ccd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ccd8:	e005      	b.n	800cce6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ccda:	4b12      	ldr	r3, [pc, #72]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800ccdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccde:	4a11      	ldr	r2, [pc, #68]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cce0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cce4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cce6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a0e      	ldr	r2, [pc, #56]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800ccec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ccf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccf2:	f7fb fb47 	bl	8008384 <HAL_GetTick>
 800ccf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ccf8:	e008      	b.n	800cd0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccfa:	f7fb fb43 	bl	8008384 <HAL_GetTick>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d901      	bls.n	800cd0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	e006      	b.n	800cd1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd0c:	4b05      	ldr	r3, [pc, #20]	@ (800cd24 <RCCEx_PLL3_Config+0x15c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d0f0      	beq.n	800ccfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cd18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	58024400 	.word	0x58024400
 800cd28:	ffff0007 	.word	0xffff0007

0800cd2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08a      	sub	sp, #40	@ 0x28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d101      	bne.n	800cd3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e075      	b.n	800ce2a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d105      	bne.n	800cd56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7fa fd8d 	bl	8007870 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2204      	movs	r2, #4
 800cd5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f868 	bl	800ce34 <HAL_SD_InitCard>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d001      	beq.n	800cd6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e05d      	b.n	800ce2a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cd6e:	f107 0308 	add.w	r3, r7, #8
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fdb5 	bl	800d8e4 <HAL_SD_GetCardStatus>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	e052      	b.n	800ce2a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cd84:	7e3b      	ldrb	r3, [r7, #24]
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cd8a:	7e7b      	ldrb	r3, [r7, #25]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d10a      	bne.n	800cdae <HAL_SD_Init+0x82>
 800cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d102      	bne.n	800cda4 <HAL_SD_Init+0x78>
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d004      	beq.n	800cdae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdaa:	659a      	str	r2, [r3, #88]	@ 0x58
 800cdac:	e00b      	b.n	800cdc6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d104      	bne.n	800cdc0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cdbc:	659a      	str	r2, [r3, #88]	@ 0x58
 800cdbe:	e002      	b.n	800cdc6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fe73 	bl	800dab8 <HAL_SD_ConfigWideBusOperation>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e026      	b.n	800ce2a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cddc:	f7fb fad2 	bl	8008384 <HAL_GetTick>
 800cde0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cde2:	e011      	b.n	800ce08 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cde4:	f7fb face 	bl	8008384 <HAL_GetTick>
 800cde8:	4602      	mov	r2, r0
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf2:	d109      	bne.n	800ce08 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdfa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e010      	b.n	800ce2a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 ff67 	bl	800dcdc <HAL_SD_GetCardState>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b04      	cmp	r3, #4
 800ce12:	d1e7      	bne.n	800cde4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3728      	adds	r7, #40	@ 0x28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b08d      	sub	sp, #52	@ 0x34
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ce40:	2300      	movs	r3, #0
 800ce42:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ce4c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ce50:	f04f 0100 	mov.w	r1, #0
 800ce54:	f7fe fd24 	bl	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce58:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d109      	bne.n	800ce74 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ce6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e070      	b.n	800cf56 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ce74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce76:	0a1b      	lsrs	r3, r3, #8
 800ce78:	4a39      	ldr	r2, [pc, #228]	@ (800cf60 <HAL_SD_InitCard+0x12c>)
 800ce7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce7e:	091b      	lsrs	r3, r3, #4
 800ce80:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681c      	ldr	r4, [r3, #0]
 800ce86:	466a      	mov	r2, sp
 800ce88:	f107 0318 	add.w	r3, r7, #24
 800ce8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce90:	e882 0003 	stmia.w	r2, {r0, r1}
 800ce94:	f107 030c 	add.w	r3, r7, #12
 800ce98:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f004 fe76 	bl	8011b8c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f004 feb9 	bl	8011c1c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800cebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d007      	beq.n	800ced2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cec2:	4a28      	ldr	r2, [pc, #160]	@ (800cf64 <HAL_SD_InitCard+0x130>)
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceca:	3301      	adds	r3, #1
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fb fa65 	bl	800839c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 fff0 	bl	800deb8 <SD_PowerON>
 800ced8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ceda:	6a3b      	ldr	r3, [r7, #32]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	431a      	orrs	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	e02e      	b.n	800cf56 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 ff0f 	bl	800dd1c <SD_InitCard>
 800cefe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00b      	beq.n	800cf1e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	431a      	orrs	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e01b      	b.n	800cf56 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf26:	4618      	mov	r0, r3
 800cf28:	f004 ff0e 	bl	8011d48 <SDMMC_CmdBlockLength>
 800cf2c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00f      	beq.n	800cf54 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a0b      	ldr	r2, [pc, #44]	@ (800cf68 <HAL_SD_InitCard+0x134>)
 800cf3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	431a      	orrs	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e000      	b.n	800cf56 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	372c      	adds	r7, #44	@ 0x2c
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd90      	pop	{r4, r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	014f8b59 	.word	0x014f8b59
 800cf64:	00012110 	.word	0x00012110
 800cf68:	1fe00fff 	.word	0x1fe00fff

0800cf6c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b092      	sub	sp, #72	@ 0x48
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf7a:	f7fb fa03 	bl	8008384 <HAL_GetTick>
 800cf7e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d107      	bne.n	800cf9e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e167      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	f040 815a 	bne.w	800d260 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	441a      	add	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d907      	bls.n	800cfd0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfc4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e14e      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2203      	movs	r2, #3
 800cfd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d002      	beq.n	800cfee <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfea:	025b      	lsls	r3, r3, #9
 800cfec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfee:	f04f 33ff 	mov.w	r3, #4294967295
 800cff2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	025b      	lsls	r3, r3, #9
 800cff8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cffa:	2390      	movs	r3, #144	@ 0x90
 800cffc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cffe:	2302      	movs	r3, #2
 800d000:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d002:	2300      	movs	r3, #0
 800d004:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d006:	2300      	movs	r3, #0
 800d008:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f107 0214 	add.w	r2, r7, #20
 800d012:	4611      	mov	r1, r2
 800d014:	4618      	mov	r0, r3
 800d016:	f004 fe6b 	bl	8011cf0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68da      	ldr	r2, [r3, #12]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d028:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d90a      	bls.n	800d046 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2202      	movs	r2, #2
 800d034:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d03c:	4618      	mov	r0, r3
 800d03e:	f004 fec9 	bl	8011dd4 <SDMMC_CmdReadMultiBlock>
 800d042:	6478      	str	r0, [r7, #68]	@ 0x44
 800d044:	e009      	b.n	800d05a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2201      	movs	r2, #1
 800d04a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d052:	4618      	mov	r0, r3
 800d054:	f004 fe9b 	bl	8011d8e <SDMMC_CmdReadSingleBlock>
 800d058:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d05a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d012      	beq.n	800d086 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a84      	ldr	r2, [pc, #528]	@ (800d278 <HAL_SD_ReadBlocks+0x30c>)
 800d066:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d06c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d06e:	431a      	orrs	r2, r3
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2201      	movs	r2, #1
 800d078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e0f3      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d08a:	e058      	b.n	800d13e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d096:	2b00      	cmp	r3, #0
 800d098:	d033      	beq.n	800d102 <HAL_SD_ReadBlocks+0x196>
 800d09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d09c:	2b1f      	cmp	r3, #31
 800d09e:	d930      	bls.n	800d102 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0a4:	e027      	b.n	800d0f6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f004 fd98 	bl	8011be0 <SDMMC_ReadFIFO>
 800d0b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	b2da      	uxtb	r2, r3
 800d0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0bc:	3301      	adds	r3, #1
 800d0be:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d2:	0c1b      	lsrs	r3, r3, #16
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0dc:	3301      	adds	r3, #1
 800d0de:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	0e1b      	lsrs	r3, r3, #24
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800d0f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0f8:	2b07      	cmp	r3, #7
 800d0fa:	d9d4      	bls.n	800d0a6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0fe:	3b20      	subs	r3, #32
 800d100:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800d102:	f7fb f93f 	bl	8008384 <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d10e:	429a      	cmp	r2, r3
 800d110:	d902      	bls.n	800d118 <HAL_SD_ReadBlocks+0x1ac>
 800d112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d114:	2b00      	cmp	r3, #0
 800d116:	d112      	bne.n	800d13e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a56      	ldr	r2, [pc, #344]	@ (800d278 <HAL_SD_ReadBlocks+0x30c>)
 800d11e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d124:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e097      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d144:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d09f      	beq.n	800d08c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68da      	ldr	r2, [r3, #12]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d15a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d166:	2b00      	cmp	r3, #0
 800d168:	d022      	beq.n	800d1b0 <HAL_SD_ReadBlocks+0x244>
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d91f      	bls.n	800d1b0 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d174:	2b03      	cmp	r3, #3
 800d176:	d01b      	beq.n	800d1b0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f004 fe93 	bl	8011ea8 <SDMMC_CmdStopTransfer>
 800d182:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800d184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d186:	2b00      	cmp	r3, #0
 800d188:	d012      	beq.n	800d1b0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a3a      	ldr	r2, [pc, #232]	@ (800d278 <HAL_SD_ReadBlocks+0x30c>)
 800d190:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d198:	431a      	orrs	r2, r3
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e05e      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b6:	f003 0308 	and.w	r3, r3, #8
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d012      	beq.n	800d1e4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a2d      	ldr	r2, [pc, #180]	@ (800d278 <HAL_SD_ReadBlocks+0x30c>)
 800d1c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ca:	f043 0208 	orr.w	r2, r3, #8
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e044      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ea:	f003 0302 	and.w	r3, r3, #2
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d012      	beq.n	800d218 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a20      	ldr	r2, [pc, #128]	@ (800d278 <HAL_SD_ReadBlocks+0x30c>)
 800d1f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1fe:	f043 0202 	orr.w	r2, r3, #2
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d214:	2301      	movs	r3, #1
 800d216:	e02a      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d21e:	f003 0320 	and.w	r3, r3, #32
 800d222:	2b00      	cmp	r3, #0
 800d224:	d012      	beq.n	800d24c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a13      	ldr	r2, [pc, #76]	@ (800d278 <HAL_SD_ReadBlocks+0x30c>)
 800d22c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d232:	f043 0220 	orr.w	r2, r3, #32
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2201      	movs	r2, #1
 800d23e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d248:	2301      	movs	r3, #1
 800d24a:	e010      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a0a      	ldr	r2, [pc, #40]	@ (800d27c <HAL_SD_ReadBlocks+0x310>)
 800d252:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	e006      	b.n	800d26e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d264:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
  }
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3748      	adds	r7, #72	@ 0x48
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	1fe00fff 	.word	0x1fe00fff
 800d27c:	18000f3a 	.word	0x18000f3a

0800d280 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b092      	sub	sp, #72	@ 0x48
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d28e:	f7fb f879 	bl	8008384 <HAL_GetTick>
 800d292:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d107      	bne.n	800d2b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e16b      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	f040 815e 	bne.w	800d57c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	441a      	add	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d907      	bls.n	800d2e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e152      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2203      	movs	r2, #3
 800d2e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d002      	beq.n	800d302 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fe:	025b      	lsls	r3, r3, #9
 800d300:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d302:	f04f 33ff 	mov.w	r3, #4294967295
 800d306:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	025b      	lsls	r3, r3, #9
 800d30c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d30e:	2390      	movs	r3, #144	@ 0x90
 800d310:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d312:	2300      	movs	r3, #0
 800d314:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d316:	2300      	movs	r3, #0
 800d318:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d31a:	2300      	movs	r3, #0
 800d31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f107 0218 	add.w	r2, r7, #24
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f004 fce1 	bl	8011cf0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68da      	ldr	r2, [r3, #12]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d33c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d90a      	bls.n	800d35a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2220      	movs	r2, #32
 800d348:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d350:	4618      	mov	r0, r3
 800d352:	f004 fd85 	bl	8011e60 <SDMMC_CmdWriteMultiBlock>
 800d356:	6478      	str	r0, [r7, #68]	@ 0x44
 800d358:	e009      	b.n	800d36e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2210      	movs	r2, #16
 800d35e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d366:	4618      	mov	r0, r3
 800d368:	f004 fd57 	bl	8011e1a <SDMMC_CmdWriteSingleBlock>
 800d36c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d370:	2b00      	cmp	r3, #0
 800d372:	d012      	beq.n	800d39a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a86      	ldr	r2, [pc, #536]	@ (800d594 <HAL_SD_WriteBlocks+0x314>)
 800d37a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d382:	431a      	orrs	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e0f7      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800d39e:	e05c      	b.n	800d45a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d037      	beq.n	800d41e <HAL_SD_WriteBlocks+0x19e>
 800d3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b0:	2b1f      	cmp	r3, #31
 800d3b2:	d934      	bls.n	800d41e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3b8:	e02b      	b.n	800d412 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	021a      	lsls	r2, r3, #8
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	041a      	lsls	r2, r3, #16
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	061a      	lsls	r2, r3, #24
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f107 0214 	add.w	r2, r7, #20
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f004 fbf7 	bl	8011bfa <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800d40c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d40e:	3301      	adds	r3, #1
 800d410:	643b      	str	r3, [r7, #64]	@ 0x40
 800d412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d414:	2b07      	cmp	r3, #7
 800d416:	d9d0      	bls.n	800d3ba <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d41a:	3b20      	subs	r3, #32
 800d41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800d41e:	f7fa ffb1 	bl	8008384 <HAL_GetTick>
 800d422:	4602      	mov	r2, r0
 800d424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d426:	1ad3      	subs	r3, r2, r3
 800d428:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d902      	bls.n	800d434 <HAL_SD_WriteBlocks+0x1b4>
 800d42e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d430:	2b00      	cmp	r3, #0
 800d432:	d112      	bne.n	800d45a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a56      	ldr	r2, [pc, #344]	@ (800d594 <HAL_SD_WriteBlocks+0x314>)
 800d43a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d442:	431a      	orrs	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2200      	movs	r2, #0
 800d454:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800d456:	2303      	movs	r3, #3
 800d458:	e097      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d460:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800d464:	2b00      	cmp	r3, #0
 800d466:	d09b      	beq.n	800d3a0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d476:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d47e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d482:	2b00      	cmp	r3, #0
 800d484:	d022      	beq.n	800d4cc <HAL_SD_WriteBlocks+0x24c>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d91f      	bls.n	800d4cc <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d490:	2b03      	cmp	r3, #3
 800d492:	d01b      	beq.n	800d4cc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4618      	mov	r0, r3
 800d49a:	f004 fd05 	bl	8011ea8 <SDMMC_CmdStopTransfer>
 800d49e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800d4a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d012      	beq.n	800d4cc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a3a      	ldr	r2, [pc, #232]	@ (800d594 <HAL_SD_WriteBlocks+0x314>)
 800d4ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e05e      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4d2:	f003 0308 	and.w	r3, r3, #8
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d012      	beq.n	800d500 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a2d      	ldr	r2, [pc, #180]	@ (800d594 <HAL_SD_WriteBlocks+0x314>)
 800d4e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4e6:	f043 0208 	orr.w	r2, r3, #8
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e044      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d012      	beq.n	800d534 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a20      	ldr	r2, [pc, #128]	@ (800d594 <HAL_SD_WriteBlocks+0x314>)
 800d514:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d51a:	f043 0202 	orr.w	r2, r3, #2
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2200      	movs	r2, #0
 800d52e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	e02a      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d53a:	f003 0310 	and.w	r3, r3, #16
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d012      	beq.n	800d568 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a13      	ldr	r2, [pc, #76]	@ (800d594 <HAL_SD_WriteBlocks+0x314>)
 800d548:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d54e:	f043 0210 	orr.w	r2, r3, #16
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	e010      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a0a      	ldr	r2, [pc, #40]	@ (800d598 <HAL_SD_WriteBlocks+0x318>)
 800d56e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	e006      	b.n	800d58a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d580:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
  }
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3748      	adds	r7, #72	@ 0x48
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	1fe00fff 	.word	0x1fe00fff
 800d598:	18000f3a 	.word	0x18000f3a

0800d59c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5aa:	0f9b      	lsrs	r3, r3, #30
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5b6:	0e9b      	lsrs	r3, r3, #26
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	f003 030f 	and.w	r3, r3, #15
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5c8:	0e1b      	lsrs	r3, r3, #24
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	f003 0303 	and.w	r3, r3, #3
 800d5d0:	b2da      	uxtb	r2, r3
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5da:	0c1b      	lsrs	r3, r3, #16
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5e6:	0a1b      	lsrs	r3, r3, #8
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5fc:	0d1b      	lsrs	r3, r3, #20
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d608:	0c1b      	lsrs	r3, r3, #16
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	f003 030f 	and.w	r3, r3, #15
 800d610:	b2da      	uxtb	r2, r3
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d61a:	0bdb      	lsrs	r3, r3, #15
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	b2da      	uxtb	r2, r3
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d62c:	0b9b      	lsrs	r3, r3, #14
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	b2da      	uxtb	r2, r3
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d63e:	0b5b      	lsrs	r3, r3, #13
 800d640:	b2db      	uxtb	r3, r3
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	b2da      	uxtb	r2, r3
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d650:	0b1b      	lsrs	r3, r3, #12
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f003 0301 	and.w	r3, r3, #1
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	2200      	movs	r2, #0
 800d662:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d163      	bne.n	800d734 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d670:	009a      	lsls	r2, r3, #2
 800d672:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d676:	4013      	ands	r3, r2
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800d67c:	0f92      	lsrs	r2, r2, #30
 800d67e:	431a      	orrs	r2, r3
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d688:	0edb      	lsrs	r3, r3, #27
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	f003 0307 	and.w	r3, r3, #7
 800d690:	b2da      	uxtb	r2, r3
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d69a:	0e1b      	lsrs	r3, r3, #24
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	f003 0307 	and.w	r3, r3, #7
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6ac:	0d5b      	lsrs	r3, r3, #21
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	f003 0307 	and.w	r3, r3, #7
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6be:	0c9b      	lsrs	r3, r3, #18
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	b2da      	uxtb	r2, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6d0:	0bdb      	lsrs	r3, r3, #15
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f003 0307 	and.w	r3, r3, #7
 800d6d8:	b2da      	uxtb	r2, r3
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	1c5a      	adds	r2, r3, #1
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	7e1b      	ldrb	r3, [r3, #24]
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	f003 0307 	and.w	r3, r3, #7
 800d6f2:	3302      	adds	r3, #2
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d6fe:	fb03 f202 	mul.w	r2, r3, r2
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	7a1b      	ldrb	r3, [r3, #8]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	f003 030f 	and.w	r3, r3, #15
 800d710:	2201      	movs	r2, #1
 800d712:	409a      	lsls	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d720:	0a52      	lsrs	r2, r2, #9
 800d722:	fb03 f202 	mul.w	r2, r3, r2
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d730:	655a      	str	r2, [r3, #84]	@ 0x54
 800d732:	e031      	b.n	800d798 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d11d      	bne.n	800d778 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d740:	041b      	lsls	r3, r3, #16
 800d742:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d74a:	0c1b      	lsrs	r3, r3, #16
 800d74c:	431a      	orrs	r2, r3
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	3301      	adds	r3, #1
 800d758:	029a      	lsls	r2, r3, #10
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d76c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	655a      	str	r2, [r3, #84]	@ 0x54
 800d776:	e00f      	b.n	800d798 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a58      	ldr	r2, [pc, #352]	@ (800d8e0 <HAL_SD_GetCardCSD+0x344>)
 800d77e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d784:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d794:	2301      	movs	r3, #1
 800d796:	e09d      	b.n	800d8d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d79c:	0b9b      	lsrs	r3, r3, #14
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7ae:	09db      	lsrs	r3, r3, #7
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7d0:	0fdb      	lsrs	r3, r3, #31
 800d7d2:	b2da      	uxtb	r2, r3
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7dc:	0f5b      	lsrs	r3, r3, #29
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	f003 0303 	and.w	r3, r3, #3
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7ee:	0e9b      	lsrs	r3, r3, #26
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d800:	0d9b      	lsrs	r3, r3, #22
 800d802:	b2db      	uxtb	r3, r3
 800d804:	f003 030f 	and.w	r3, r3, #15
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d812:	0d5b      	lsrs	r3, r3, #21
 800d814:	b2db      	uxtb	r3, r3
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2200      	movs	r2, #0
 800d826:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d82e:	0c1b      	lsrs	r3, r3, #16
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d842:	0bdb      	lsrs	r3, r3, #15
 800d844:	b2db      	uxtb	r3, r3
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d856:	0b9b      	lsrs	r3, r3, #14
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d86a:	0b5b      	lsrs	r3, r3, #13
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	b2da      	uxtb	r2, r3
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d87e:	0b1b      	lsrs	r3, r3, #12
 800d880:	b2db      	uxtb	r3, r3
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	b2da      	uxtb	r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d892:	0a9b      	lsrs	r3, r3, #10
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 0303 	and.w	r3, r3, #3
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d8a6:	0a1b      	lsrs	r3, r3, #8
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	f003 0303 	and.w	r3, r3, #3
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d8ba:	085b      	lsrs	r3, r3, #1
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	1fe00fff 	.word	0x1fe00fff

0800d8e4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b094      	sub	sp, #80	@ 0x50
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b03      	cmp	r3, #3
 800d8fe:	d101      	bne.n	800d904 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e0a7      	b.n	800da54 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d904:	f107 0308 	add.w	r3, r7, #8
 800d908:	4619      	mov	r1, r3
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fb62 	bl	800dfd4 <SD_SendSDStatus>
 800d910:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d914:	2b00      	cmp	r3, #0
 800d916:	d011      	beq.n	800d93c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a4f      	ldr	r2, [pc, #316]	@ (800da5c <HAL_SD_GetCardStatus+0x178>)
 800d91e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d926:	431a      	orrs	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d934:	2301      	movs	r3, #1
 800d936:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d93a:	e070      	b.n	800da1e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	099b      	lsrs	r3, r3, #6
 800d940:	b2db      	uxtb	r3, r3
 800d942:	f003 0303 	and.w	r3, r3, #3
 800d946:	b2da      	uxtb	r2, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	095b      	lsrs	r3, r3, #5
 800d950:	b2db      	uxtb	r3, r3
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	b2da      	uxtb	r2, r3
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	0a1b      	lsrs	r3, r3, #8
 800d960:	b29b      	uxth	r3, r3
 800d962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d966:	b29a      	uxth	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	0e1b      	lsrs	r3, r3, #24
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	4313      	orrs	r3, r2
 800d970:	b29a      	uxth	r2, r3
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	061a      	lsls	r2, r3, #24
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	021b      	lsls	r3, r3, #8
 800d97e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d982:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	0a1b      	lsrs	r3, r3, #8
 800d988:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d98c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	0e1b      	lsrs	r3, r3, #24
 800d992:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	0a1b      	lsrs	r3, r3, #8
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	0d1b      	lsrs	r3, r3, #20
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 030f 	and.w	r3, r3, #15
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	0c1b      	lsrs	r3, r3, #16
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	0a9b      	lsrs	r3, r3, #10
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9e0:	b2da      	uxtb	r2, r3
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	0a1b      	lsrs	r3, r3, #8
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	f003 0303 	and.w	r3, r3, #3
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	091b      	lsrs	r3, r3, #4
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f003 030f 	and.w	r3, r3, #15
 800da00:	b2da      	uxtb	r2, r3
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 030f 	and.w	r3, r3, #15
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	0e1b      	lsrs	r3, r3, #24
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800da26:	4618      	mov	r0, r3
 800da28:	f004 f98e 	bl	8011d48 <SDMMC_CmdBlockLength>
 800da2c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800da2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00d      	beq.n	800da50 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a08      	ldr	r2, [pc, #32]	@ (800da5c <HAL_SD_GetCardStatus+0x178>)
 800da3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da40:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800da50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800da54:	4618      	mov	r0, r3
 800da56:	3750      	adds	r7, #80	@ 0x50
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	1fe00fff 	.word	0x1fe00fff

0800da60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dab8:	b590      	push	{r4, r7, lr}
 800daba:	b08d      	sub	sp, #52	@ 0x34
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2203      	movs	r2, #3
 800dacc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dad4:	2b03      	cmp	r3, #3
 800dad6:	d02e      	beq.n	800db36 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dade:	d106      	bne.n	800daee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dae4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	635a      	str	r2, [r3, #52]	@ 0x34
 800daec:	e029      	b.n	800db42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800daf4:	d10a      	bne.n	800db0c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 fb64 	bl	800e1c4 <SD_WideBus_Enable>
 800dafc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db02:	6a3b      	ldr	r3, [r7, #32]
 800db04:	431a      	orrs	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	635a      	str	r2, [r3, #52]	@ 0x34
 800db0a:	e01a      	b.n	800db42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d10a      	bne.n	800db28 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fba1 	bl	800e25a <SD_WideBus_Disable>
 800db18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db1e:	6a3b      	ldr	r3, [r7, #32]
 800db20:	431a      	orrs	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	635a      	str	r2, [r3, #52]	@ 0x34
 800db26:	e00c      	b.n	800db42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	635a      	str	r2, [r3, #52]	@ 0x34
 800db34:	e005      	b.n	800db42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db3a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db46:	2b00      	cmp	r3, #0
 800db48:	d007      	beq.n	800db5a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a5f      	ldr	r2, [pc, #380]	@ (800dccc <HAL_SD_ConfigWideBusOperation+0x214>)
 800db50:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800db52:	2301      	movs	r3, #1
 800db54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db58:	e096      	b.n	800dc88 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800db5a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800db5e:	f04f 0100 	mov.w	r1, #0
 800db62:	f7fd fe9d 	bl	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800db66:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 8083 	beq.w	800dc76 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	695a      	ldr	r2, [r3, #20]
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	4950      	ldr	r1, [pc, #320]	@ (800dcd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800db8e:	fba1 1303 	umull	r1, r3, r1, r3
 800db92:	0e1b      	lsrs	r3, r3, #24
 800db94:	429a      	cmp	r2, r3
 800db96:	d303      	bcc.n	800dba0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	695b      	ldr	r3, [r3, #20]
 800db9c:	61bb      	str	r3, [r7, #24]
 800db9e:	e05a      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dba8:	d103      	bne.n	800dbb2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	695b      	ldr	r3, [r3, #20]
 800dbae:	61bb      	str	r3, [r7, #24]
 800dbb0:	e051      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbba:	d126      	bne.n	800dc0a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10e      	bne.n	800dbe2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	4a43      	ldr	r2, [pc, #268]	@ (800dcd4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d906      	bls.n	800dbda <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	4a40      	ldr	r2, [pc, #256]	@ (800dcd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dbd0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbd4:	0e5b      	lsrs	r3, r3, #25
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	e03d      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	695b      	ldr	r3, [r3, #20]
 800dbde:	61bb      	str	r3, [r7, #24]
 800dbe0:	e039      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	695b      	ldr	r3, [r3, #20]
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	69fa      	ldr	r2, [r7, #28]
 800dbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbee:	4a39      	ldr	r2, [pc, #228]	@ (800dcd4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d906      	bls.n	800dc02 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	4a36      	ldr	r2, [pc, #216]	@ (800dcd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dbf8:	fba2 2303 	umull	r2, r3, r2, r3
 800dbfc:	0e5b      	lsrs	r3, r3, #25
 800dbfe:	61bb      	str	r3, [r7, #24]
 800dc00:	e029      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	695b      	ldr	r3, [r3, #20]
 800dc06:	61bb      	str	r3, [r7, #24]
 800dc08:	e025      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10e      	bne.n	800dc30 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	4a30      	ldr	r2, [pc, #192]	@ (800dcd8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d906      	bls.n	800dc28 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	4a2c      	ldr	r2, [pc, #176]	@ (800dcd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc22:	0e1b      	lsrs	r3, r3, #24
 800dc24:	61bb      	str	r3, [r7, #24]
 800dc26:	e016      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	695b      	ldr	r3, [r3, #20]
 800dc2c:	61bb      	str	r3, [r7, #24]
 800dc2e:	e012      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	695b      	ldr	r3, [r3, #20]
 800dc34:	005b      	lsls	r3, r3, #1
 800dc36:	69fa      	ldr	r2, [r7, #28]
 800dc38:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc3c:	4a26      	ldr	r2, [pc, #152]	@ (800dcd8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d906      	bls.n	800dc50 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	4a22      	ldr	r2, [pc, #136]	@ (800dcd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc46:	fba2 2303 	umull	r2, r3, r2, r3
 800dc4a:	0e1b      	lsrs	r3, r3, #24
 800dc4c:	61bb      	str	r3, [r7, #24]
 800dc4e:	e002      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	695b      	ldr	r3, [r3, #20]
 800dc54:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681c      	ldr	r4, [r3, #0]
 800dc5a:	466a      	mov	r2, sp
 800dc5c:	f107 0314 	add.w	r3, r7, #20
 800dc60:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc64:	e882 0003 	stmia.w	r2, {r0, r1}
 800dc68:	f107 0308 	add.w	r3, r7, #8
 800dc6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f003 ff8c 	bl	8011b8c <SDMMC_Init>
 800dc74:	e008      	b.n	800dc88 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800dc82:	2301      	movs	r3, #1
 800dc84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dc90:	4618      	mov	r0, r3
 800dc92:	f004 f859 	bl	8011d48 <SDMMC_CmdBlockLength>
 800dc96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00c      	beq.n	800dcb8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a0a      	ldr	r2, [pc, #40]	@ (800dccc <HAL_SD_ConfigWideBusOperation+0x214>)
 800dca4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	431a      	orrs	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800dcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	372c      	adds	r7, #44	@ 0x2c
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd90      	pop	{r4, r7, pc}
 800dccc:	1fe00fff 	.word	0x1fe00fff
 800dcd0:	55e63b89 	.word	0x55e63b89
 800dcd4:	02faf080 	.word	0x02faf080
 800dcd8:	017d7840 	.word	0x017d7840

0800dcdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dce8:	f107 030c 	add.w	r3, r7, #12
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 fa40 	bl	800e174 <SD_SendStatus>
 800dcf4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	431a      	orrs	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	0a5b      	lsrs	r3, r3, #9
 800dd0c:	f003 030f 	and.w	r3, r3, #15
 800dd10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dd12:	693b      	ldr	r3, [r7, #16]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b090      	sub	sp, #64	@ 0x40
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dd24:	2300      	movs	r3, #0
 800dd26:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dd28:	f7fa fb2c 	bl	8008384 <HAL_GetTick>
 800dd2c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f003 ff83 	bl	8011c3e <SDMMC_GetPowerState>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d102      	bne.n	800dd44 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800dd42:	e0b5      	b.n	800deb0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd48:	2b03      	cmp	r3, #3
 800dd4a:	d02e      	beq.n	800ddaa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f004 f9ce 	bl	80120f2 <SDMMC_CmdSendCID>
 800dd56:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <SD_InitCard+0x46>
    {
      return errorstate;
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd60:	e0a6      	b.n	800deb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2100      	movs	r1, #0
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f003 ffae 	bl	8011cca <SDMMC_GetResponse>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2104      	movs	r1, #4
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f003 ffa5 	bl	8011cca <SDMMC_GetResponse>
 800dd80:	4602      	mov	r2, r0
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2108      	movs	r1, #8
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f003 ff9c 	bl	8011cca <SDMMC_GetResponse>
 800dd92:	4602      	mov	r2, r0
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	210c      	movs	r1, #12
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f003 ff93 	bl	8011cca <SDMMC_GetResponse>
 800dda4:	4602      	mov	r2, r0
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d01d      	beq.n	800ddee <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ddb2:	e019      	b.n	800dde8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f107 020a 	add.w	r2, r7, #10
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f004 f9d6 	bl	8012170 <SDMMC_CmdSetRelAdd>
 800ddc4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddce:	e06f      	b.n	800deb0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ddd0:	f7fa fad8 	bl	8008384 <HAL_GetTick>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d902      	bls.n	800dde8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dde2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dde6:	e063      	b.n	800deb0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dde8:	897b      	ldrh	r3, [r7, #10]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0e2      	beq.n	800ddb4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddf2:	2b03      	cmp	r3, #3
 800ddf4:	d036      	beq.n	800de64 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ddf6:	897b      	ldrh	r3, [r7, #10]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de06:	041b      	lsls	r3, r3, #16
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	f004 f990 	bl	8012130 <SDMMC_CmdSendCSD>
 800de10:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800de12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de14:	2b00      	cmp	r3, #0
 800de16:	d001      	beq.n	800de1c <SD_InitCard+0x100>
    {
      return errorstate;
 800de18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de1a:	e049      	b.n	800deb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2100      	movs	r1, #0
 800de22:	4618      	mov	r0, r3
 800de24:	f003 ff51 	bl	8011cca <SDMMC_GetResponse>
 800de28:	4602      	mov	r2, r0
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2104      	movs	r1, #4
 800de34:	4618      	mov	r0, r3
 800de36:	f003 ff48 	bl	8011cca <SDMMC_GetResponse>
 800de3a:	4602      	mov	r2, r0
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2108      	movs	r1, #8
 800de46:	4618      	mov	r0, r3
 800de48:	f003 ff3f 	bl	8011cca <SDMMC_GetResponse>
 800de4c:	4602      	mov	r2, r0
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	210c      	movs	r1, #12
 800de58:	4618      	mov	r0, r3
 800de5a:	f003 ff36 	bl	8011cca <SDMMC_GetResponse>
 800de5e:	4602      	mov	r2, r0
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2104      	movs	r1, #4
 800de6a:	4618      	mov	r0, r3
 800de6c:	f003 ff2d 	bl	8011cca <SDMMC_GetResponse>
 800de70:	4603      	mov	r3, r0
 800de72:	0d1a      	lsrs	r2, r3, #20
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800de78:	f107 030c 	add.w	r3, r7, #12
 800de7c:	4619      	mov	r1, r3
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff fb8c 	bl	800d59c <HAL_SD_GetCardCSD>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d002      	beq.n	800de90 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800de8e:	e00f      	b.n	800deb0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de98:	041b      	lsls	r3, r3, #16
 800de9a:	4619      	mov	r1, r3
 800de9c:	4610      	mov	r0, r2
 800de9e:	f004 f83f 	bl	8011f20 <SDMMC_CmdSelDesel>
 800dea2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800dea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <SD_InitCard+0x192>
  {
    return errorstate;
 800deaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deac:	e000      	b.n	800deb0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3740      	adds	r7, #64	@ 0x40
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b086      	sub	sp, #24
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dec0:	2300      	movs	r3, #0
 800dec2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800dec4:	2300      	movs	r3, #0
 800dec6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800dec8:	2300      	movs	r3, #0
 800deca:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f004 f848 	bl	8011f66 <SDMMC_CmdGoIdleState>
 800ded6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d001      	beq.n	800dee2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	e072      	b.n	800dfc8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f004 f85b 	bl	8011fa2 <SDMMC_CmdOperCond>
 800deec:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800def4:	d10d      	bne.n	800df12 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4618      	mov	r0, r3
 800df02:	f004 f830 	bl	8011f66 <SDMMC_CmdGoIdleState>
 800df06:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d004      	beq.n	800df18 <SD_PowerON+0x60>
    {
      return errorstate;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	e05a      	b.n	800dfc8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2201      	movs	r2, #1
 800df16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d137      	bne.n	800df90 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2100      	movs	r1, #0
 800df26:	4618      	mov	r0, r3
 800df28:	f004 f85b 	bl	8011fe2 <SDMMC_CmdAppCommand>
 800df2c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d02d      	beq.n	800df90 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800df38:	e046      	b.n	800dfc8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2100      	movs	r1, #0
 800df40:	4618      	mov	r0, r3
 800df42:	f004 f84e 	bl	8011fe2 <SDMMC_CmdAppCommand>
 800df46:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d001      	beq.n	800df52 <SD_PowerON+0x9a>
    {
      return errorstate;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	e03a      	b.n	800dfc8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	491e      	ldr	r1, [pc, #120]	@ (800dfd0 <SD_PowerON+0x118>)
 800df58:	4618      	mov	r0, r3
 800df5a:	f004 f865 	bl	8012028 <SDMMC_CmdAppOperCommand>
 800df5e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d002      	beq.n	800df6c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800df6a:	e02d      	b.n	800dfc8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2100      	movs	r1, #0
 800df72:	4618      	mov	r0, r3
 800df74:	f003 fea9 	bl	8011cca <SDMMC_GetResponse>
 800df78:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	0fdb      	lsrs	r3, r3, #31
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d101      	bne.n	800df86 <SD_PowerON+0xce>
 800df82:	2301      	movs	r3, #1
 800df84:	e000      	b.n	800df88 <SD_PowerON+0xd0>
 800df86:	2300      	movs	r3, #0
 800df88:	613b      	str	r3, [r7, #16]

    count++;
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	3301      	adds	r3, #1
 800df8e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800df96:	4293      	cmp	r3, r2
 800df98:	d802      	bhi.n	800dfa0 <SD_PowerON+0xe8>
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d0cc      	beq.n	800df3a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d902      	bls.n	800dfb0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dfaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dfae:	e00b      	b.n	800dfc8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	c1100000 	.word	0xc1100000

0800dfd4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b08c      	sub	sp, #48	@ 0x30
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dfde:	f7fa f9d1 	bl	8008384 <HAL_GetTick>
 800dfe2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2100      	movs	r1, #0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f003 fe6b 	bl	8011cca <SDMMC_GetResponse>
 800dff4:	4603      	mov	r3, r0
 800dff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dffa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dffe:	d102      	bne.n	800e006 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e000:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e004:	e0b0      	b.n	800e168 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2140      	movs	r1, #64	@ 0x40
 800e00c:	4618      	mov	r0, r3
 800e00e:	f003 fe9b 	bl	8011d48 <SDMMC_CmdBlockLength>
 800e012:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d005      	beq.n	800e026 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e022:	6a3b      	ldr	r3, [r7, #32]
 800e024:	e0a0      	b.n	800e168 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e02e:	041b      	lsls	r3, r3, #16
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f003 ffd5 	bl	8011fe2 <SDMMC_CmdAppCommand>
 800e038:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e03a:	6a3b      	ldr	r3, [r7, #32]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	e08d      	b.n	800e168 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e04c:	f04f 33ff 	mov.w	r3, #4294967295
 800e050:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e052:	2340      	movs	r3, #64	@ 0x40
 800e054:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e056:	2360      	movs	r3, #96	@ 0x60
 800e058:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e05a:	2302      	movs	r3, #2
 800e05c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e05e:	2300      	movs	r3, #0
 800e060:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e062:	2301      	movs	r3, #1
 800e064:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f107 0208 	add.w	r2, r7, #8
 800e06e:	4611      	mov	r1, r2
 800e070:	4618      	mov	r0, r3
 800e072:	f003 fe3d 	bl	8011cf0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f004 f8bd 	bl	80121fa <SDMMC_CmdStatusRegister>
 800e080:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d02b      	beq.n	800e0e0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e090:	6a3b      	ldr	r3, [r7, #32]
 800e092:	e069      	b.n	800e168 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e09a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d013      	beq.n	800e0ca <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0a6:	e00d      	b.n	800e0c4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f003 fd97 	bl	8011be0 <SDMMC_ReadFIFO>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b6:	601a      	str	r2, [r3, #0]
        pData++;
 800e0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c6:	2b07      	cmp	r3, #7
 800e0c8:	d9ee      	bls.n	800e0a8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e0ca:	f7fa f95b 	bl	8008384 <HAL_GetTick>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d8:	d102      	bne.n	800e0e0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e0da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e0de:	e043      	b.n	800e168 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0e6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d0d2      	beq.n	800e094 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0f4:	f003 0308 	and.w	r3, r3, #8
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e0fc:	2308      	movs	r3, #8
 800e0fe:	e033      	b.n	800e168 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e106:	f003 0302 	and.w	r3, r3, #2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e10e:	2302      	movs	r3, #2
 800e110:	e02a      	b.n	800e168 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e118:	f003 0320 	and.w	r3, r3, #32
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d017      	beq.n	800e150 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e120:	2320      	movs	r3, #32
 800e122:	e021      	b.n	800e168 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f003 fd59 	bl	8011be0 <SDMMC_ReadFIFO>
 800e12e:	4602      	mov	r2, r0
 800e130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e132:	601a      	str	r2, [r3, #0]
    pData++;
 800e134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e136:	3304      	adds	r3, #4
 800e138:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e13a:	f7fa f923 	bl	8008384 <HAL_GetTick>
 800e13e:	4602      	mov	r2, r0
 800e140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e148:	d102      	bne.n	800e150 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e14a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e14e:	e00b      	b.n	800e168 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1e2      	bne.n	800e124 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a03      	ldr	r2, [pc, #12]	@ (800e170 <SD_SendSDStatus+0x19c>)
 800e164:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800e166:	2300      	movs	r3, #0
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3730      	adds	r7, #48	@ 0x30
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	18000f3a 	.word	0x18000f3a

0800e174 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d102      	bne.n	800e18a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e188:	e018      	b.n	800e1bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e192:	041b      	lsls	r3, r3, #16
 800e194:	4619      	mov	r1, r3
 800e196:	4610      	mov	r0, r2
 800e198:	f004 f80c 	bl	80121b4 <SDMMC_CmdSendStatus>
 800e19c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d001      	beq.n	800e1a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	e009      	b.n	800e1bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f003 fd8b 	bl	8011cca <SDMMC_GetResponse>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	60fb      	str	r3, [r7, #12]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f003 fd75 	bl	8011cca <SDMMC_GetResponse>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e1e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e1ea:	d102      	bne.n	800e1f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e1f0:	e02f      	b.n	800e252 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1f2:	f107 030c 	add.w	r3, r7, #12
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 f879 	bl	800e2f0 <SD_FindSCR>
 800e1fe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	e023      	b.n	800e252 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e210:	2b00      	cmp	r3, #0
 800e212:	d01c      	beq.n	800e24e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e21c:	041b      	lsls	r3, r3, #16
 800e21e:	4619      	mov	r1, r3
 800e220:	4610      	mov	r0, r2
 800e222:	f003 fede 	bl	8011fe2 <SDMMC_CmdAppCommand>
 800e226:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d001      	beq.n	800e232 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	e00f      	b.n	800e252 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2102      	movs	r1, #2
 800e238:	4618      	mov	r0, r3
 800e23a:	f003 ff15 	bl	8012068 <SDMMC_CmdBusWidth>
 800e23e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	e003      	b.n	800e252 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	e001      	b.n	800e252 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e24e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800e252:	4618      	mov	r0, r3
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b086      	sub	sp, #24
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e262:	2300      	movs	r3, #0
 800e264:	60fb      	str	r3, [r7, #12]
 800e266:	2300      	movs	r3, #0
 800e268:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2100      	movs	r1, #0
 800e270:	4618      	mov	r0, r3
 800e272:	f003 fd2a 	bl	8011cca <SDMMC_GetResponse>
 800e276:	4603      	mov	r3, r0
 800e278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e27c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e280:	d102      	bne.n	800e288 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e282:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e286:	e02f      	b.n	800e2e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e288:	f107 030c 	add.w	r3, r7, #12
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f82e 	bl	800e2f0 <SD_FindSCR>
 800e294:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	e023      	b.n	800e2e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d01c      	beq.n	800e2e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2b2:	041b      	lsls	r3, r3, #16
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	f003 fe93 	bl	8011fe2 <SDMMC_CmdAppCommand>
 800e2bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	e00f      	b.n	800e2e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f003 feca 	bl	8012068 <SDMMC_CmdBusWidth>
 800e2d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	e003      	b.n	800e2e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e001      	b.n	800e2e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e2e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3718      	adds	r7, #24
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b08e      	sub	sp, #56	@ 0x38
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2fa:	f7fa f843 	bl	8008384 <HAL_GetTick>
 800e2fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800e300:	2300      	movs	r3, #0
 800e302:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e304:	2300      	movs	r3, #0
 800e306:	60bb      	str	r3, [r7, #8]
 800e308:	2300      	movs	r3, #0
 800e30a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2108      	movs	r1, #8
 800e316:	4618      	mov	r0, r3
 800e318:	f003 fd16 	bl	8011d48 <SDMMC_CmdBlockLength>
 800e31c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e320:	2b00      	cmp	r3, #0
 800e322:	d001      	beq.n	800e328 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e326:	e0ad      	b.n	800e484 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e330:	041b      	lsls	r3, r3, #16
 800e332:	4619      	mov	r1, r3
 800e334:	4610      	mov	r0, r2
 800e336:	f003 fe54 	bl	8011fe2 <SDMMC_CmdAppCommand>
 800e33a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	e09e      	b.n	800e484 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e346:	f04f 33ff 	mov.w	r3, #4294967295
 800e34a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e34c:	2308      	movs	r3, #8
 800e34e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e350:	2330      	movs	r3, #48	@ 0x30
 800e352:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e354:	2302      	movs	r3, #2
 800e356:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e358:	2300      	movs	r3, #0
 800e35a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e35c:	2301      	movs	r3, #1
 800e35e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f107 0210 	add.w	r2, r7, #16
 800e368:	4611      	mov	r1, r2
 800e36a:	4618      	mov	r0, r3
 800e36c:	f003 fcc0 	bl	8011cf0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4618      	mov	r0, r3
 800e376:	f003 fe9a 	bl	80120ae <SDMMC_CmdSendSCR>
 800e37a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d027      	beq.n	800e3d2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e384:	e07e      	b.n	800e484 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e38c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e390:	2b00      	cmp	r3, #0
 800e392:	d113      	bne.n	800e3bc <SD_FindSCR+0xcc>
 800e394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e396:	2b00      	cmp	r3, #0
 800e398:	d110      	bne.n	800e3bc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f003 fc1e 	bl	8011be0 <SDMMC_ReadFIFO>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f003 fc17 	bl	8011be0 <SDMMC_ReadFIFO>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	60fb      	str	r3, [r7, #12]
      index++;
 800e3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3bc:	f7f9 ffe2 	bl	8008384 <HAL_GetTick>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ca:	d102      	bne.n	800e3d2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e3d0:	e058      	b.n	800e484 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3d8:	f240 532a 	movw	r3, #1322	@ 0x52a
 800e3dc:	4013      	ands	r3, r2
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0d1      	beq.n	800e386 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3e8:	f003 0308 	and.w	r3, r3, #8
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2208      	movs	r2, #8
 800e3f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3f8:	2308      	movs	r3, #8
 800e3fa:	e043      	b.n	800e484 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	2b00      	cmp	r3, #0
 800e408:	d005      	beq.n	800e416 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2202      	movs	r2, #2
 800e410:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e412:	2302      	movs	r3, #2
 800e414:	e036      	b.n	800e484 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e41c:	f003 0320 	and.w	r3, r3, #32
 800e420:	2b00      	cmp	r3, #0
 800e422:	d005      	beq.n	800e430 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2220      	movs	r2, #32
 800e42a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e42c:	2320      	movs	r3, #32
 800e42e:	e029      	b.n	800e484 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a15      	ldr	r2, [pc, #84]	@ (800e48c <SD_FindSCR+0x19c>)
 800e436:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	061a      	lsls	r2, r3, #24
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	021b      	lsls	r3, r3, #8
 800e440:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e444:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	0a1b      	lsrs	r3, r3, #8
 800e44a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e44e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	0e1b      	lsrs	r3, r3, #24
 800e454:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e458:	601a      	str	r2, [r3, #0]
    scr++;
 800e45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e45c:	3304      	adds	r3, #4
 800e45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	061a      	lsls	r2, r3, #24
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	021b      	lsls	r3, r3, #8
 800e468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e46c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	0a1b      	lsrs	r3, r3, #8
 800e472:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e476:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	0e1b      	lsrs	r3, r3, #24
 800e47c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e480:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3738      	adds	r7, #56	@ 0x38
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	18000f3a 	.word	0x18000f3a

0800e490 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d101      	bne.n	800e4a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e10f      	b.n	800e6c2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a87      	ldr	r2, [pc, #540]	@ (800e6cc <HAL_SPI_Init+0x23c>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d00f      	beq.n	800e4d2 <HAL_SPI_Init+0x42>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a86      	ldr	r2, [pc, #536]	@ (800e6d0 <HAL_SPI_Init+0x240>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d00a      	beq.n	800e4d2 <HAL_SPI_Init+0x42>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a84      	ldr	r2, [pc, #528]	@ (800e6d4 <HAL_SPI_Init+0x244>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d005      	beq.n	800e4d2 <HAL_SPI_Init+0x42>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	2b0f      	cmp	r3, #15
 800e4cc:	d901      	bls.n	800e4d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e0f7      	b.n	800e6c2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f001 f968 	bl	800f7a8 <SPI_GetPacketSize>
 800e4d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a7b      	ldr	r2, [pc, #492]	@ (800e6cc <HAL_SPI_Init+0x23c>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d00c      	beq.n	800e4fe <HAL_SPI_Init+0x6e>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a79      	ldr	r2, [pc, #484]	@ (800e6d0 <HAL_SPI_Init+0x240>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d007      	beq.n	800e4fe <HAL_SPI_Init+0x6e>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a78      	ldr	r2, [pc, #480]	@ (800e6d4 <HAL_SPI_Init+0x244>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d002      	beq.n	800e4fe <HAL_SPI_Init+0x6e>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2b08      	cmp	r3, #8
 800e4fc:	d811      	bhi.n	800e522 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e502:	4a72      	ldr	r2, [pc, #456]	@ (800e6cc <HAL_SPI_Init+0x23c>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d009      	beq.n	800e51c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a70      	ldr	r2, [pc, #448]	@ (800e6d0 <HAL_SPI_Init+0x240>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d004      	beq.n	800e51c <HAL_SPI_Init+0x8c>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a6f      	ldr	r2, [pc, #444]	@ (800e6d4 <HAL_SPI_Init+0x244>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d104      	bne.n	800e526 <HAL_SPI_Init+0x96>
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b10      	cmp	r3, #16
 800e520:	d901      	bls.n	800e526 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	e0cd      	b.n	800e6c2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7f9 fa26 	bl	800798c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2202      	movs	r2, #2
 800e544:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f022 0201 	bic.w	r2, r2, #1
 800e556:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e562:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	699b      	ldr	r3, [r3, #24]
 800e568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e56c:	d119      	bne.n	800e5a2 <HAL_SPI_Init+0x112>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e576:	d103      	bne.n	800e580 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d008      	beq.n	800e592 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e584:	2b00      	cmp	r3, #0
 800e586:	d10c      	bne.n	800e5a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e58c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e590:	d107      	bne.n	800e5a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e5a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00f      	beq.n	800e5ce <HAL_SPI_Init+0x13e>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	2b06      	cmp	r3, #6
 800e5b4:	d90b      	bls.n	800e5ce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	430a      	orrs	r2, r1
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	e007      	b.n	800e5de <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e5dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	69da      	ldr	r2, [r3, #28]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e6:	431a      	orrs	r2, r3
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5f0:	ea42 0103 	orr.w	r1, r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68da      	ldr	r2, [r3, #12]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	430a      	orrs	r2, r1
 800e5fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e608:	431a      	orrs	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e60e:	431a      	orrs	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	431a      	orrs	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	431a      	orrs	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	695b      	ldr	r3, [r3, #20]
 800e620:	431a      	orrs	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	431a      	orrs	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	431a      	orrs	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e632:	431a      	orrs	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	431a      	orrs	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e63e:	ea42 0103 	orr.w	r1, r2, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	430a      	orrs	r2, r1
 800e64c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d113      	bne.n	800e67e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e668:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e67c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f022 0201 	bic.w	r2, r2, #1
 800e68c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00a      	beq.n	800e6b0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	430a      	orrs	r2, r1
 800e6ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	40013000 	.word	0x40013000
 800e6d0:	40003800 	.word	0x40003800
 800e6d4:	40003c00 	.word	0x40003c00

0800e6d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af02      	add	r7, sp, #8
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	603b      	str	r3, [r7, #0]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	3320      	adds	r3, #32
 800e6ee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6f0:	f7f9 fe48 	bl	8008384 <HAL_GetTick>
 800e6f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d001      	beq.n	800e706 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800e702:	2302      	movs	r3, #2
 800e704:	e1d1      	b.n	800eaaa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <HAL_SPI_Transmit+0x3a>
 800e70c:	88fb      	ldrh	r3, [r7, #6]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d101      	bne.n	800e716 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	e1c9      	b.n	800eaaa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d101      	bne.n	800e724 <HAL_SPI_Transmit+0x4c>
 800e720:	2302      	movs	r3, #2
 800e722:	e1c2      	b.n	800eaaa <HAL_SPI_Transmit+0x3d2>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2203      	movs	r2, #3
 800e730:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	88fa      	ldrh	r2, [r7, #6]
 800e746:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	88fa      	ldrh	r2, [r7, #6]
 800e74e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e77c:	d108      	bne.n	800e790 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	e009      	b.n	800e7a4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e7a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	685a      	ldr	r2, [r3, #4]
 800e7aa:	4b96      	ldr	r3, [pc, #600]	@ (800ea04 <HAL_SPI_Transmit+0x32c>)
 800e7ac:	4013      	ands	r3, r2
 800e7ae:	88f9      	ldrh	r1, [r7, #6]
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	6812      	ldr	r2, [r2, #0]
 800e7b4:	430b      	orrs	r3, r1
 800e7b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f042 0201 	orr.w	r2, r2, #1
 800e7c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e7d0:	d107      	bne.n	800e7e2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e7e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	2b0f      	cmp	r3, #15
 800e7e8:	d947      	bls.n	800e87a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e7ea:	e03f      	b.n	800e86c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	f003 0302 	and.w	r3, r3, #2
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d114      	bne.n	800e824 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	6812      	ldr	r2, [r2, #0]
 800e804:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e80a:	1d1a      	adds	r2, r3, #4
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e816:	b29b      	uxth	r3, r3
 800e818:	3b01      	subs	r3, #1
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e822:	e023      	b.n	800e86c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e824:	f7f9 fdae 	bl	8008384 <HAL_GetTick>
 800e828:	4602      	mov	r2, r0
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	683a      	ldr	r2, [r7, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d803      	bhi.n	800e83c <HAL_SPI_Transmit+0x164>
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83a:	d102      	bne.n	800e842 <HAL_SPI_Transmit+0x16a>
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d114      	bne.n	800e86c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	f000 fee2 	bl	800f60c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e84e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e868:	2303      	movs	r3, #3
 800e86a:	e11e      	b.n	800eaaa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e872:	b29b      	uxth	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1b9      	bne.n	800e7ec <HAL_SPI_Transmit+0x114>
 800e878:	e0f1      	b.n	800ea5e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	2b07      	cmp	r3, #7
 800e880:	f240 80e6 	bls.w	800ea50 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e884:	e05d      	b.n	800e942 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	f003 0302 	and.w	r3, r3, #2
 800e890:	2b02      	cmp	r3, #2
 800e892:	d132      	bne.n	800e8fa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d918      	bls.n	800e8d2 <HAL_SPI_Transmit+0x1fa>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d014      	beq.n	800e8d2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6812      	ldr	r2, [r2, #0]
 800e8b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8b8:	1d1a      	adds	r2, r3, #4
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	3b02      	subs	r3, #2
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e8d0:	e037      	b.n	800e942 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8d6:	881a      	ldrh	r2, [r3, #0]
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8e0:	1c9a      	adds	r2, r3, #2
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e8f8:	e023      	b.n	800e942 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8fa:	f7f9 fd43 	bl	8008384 <HAL_GetTick>
 800e8fe:	4602      	mov	r2, r0
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	683a      	ldr	r2, [r7, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d803      	bhi.n	800e912 <HAL_SPI_Transmit+0x23a>
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e910:	d102      	bne.n	800e918 <HAL_SPI_Transmit+0x240>
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d114      	bne.n	800e942 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f000 fe77 	bl	800f60c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e924:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2201      	movs	r2, #1
 800e932:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2200      	movs	r2, #0
 800e93a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e93e:	2303      	movs	r3, #3
 800e940:	e0b3      	b.n	800eaaa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e948:	b29b      	uxth	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d19b      	bne.n	800e886 <HAL_SPI_Transmit+0x1ae>
 800e94e:	e086      	b.n	800ea5e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	f003 0302 	and.w	r3, r3, #2
 800e95a:	2b02      	cmp	r3, #2
 800e95c:	d154      	bne.n	800ea08 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e964:	b29b      	uxth	r3, r3
 800e966:	2b03      	cmp	r3, #3
 800e968:	d918      	bls.n	800e99c <HAL_SPI_Transmit+0x2c4>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e96e:	2b40      	cmp	r3, #64	@ 0x40
 800e970:	d914      	bls.n	800e99c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6812      	ldr	r2, [r2, #0]
 800e97c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e982:	1d1a      	adds	r2, r3, #4
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e98e:	b29b      	uxth	r3, r3
 800e990:	3b04      	subs	r3, #4
 800e992:	b29a      	uxth	r2, r3
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e99a:	e059      	b.n	800ea50 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d917      	bls.n	800e9d8 <HAL_SPI_Transmit+0x300>
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d013      	beq.n	800e9d8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e9b4:	881a      	ldrh	r2, [r3, #0]
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e9be:	1c9a      	adds	r2, r3, #2
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	3b02      	subs	r3, #2
 800e9ce:	b29a      	uxth	r2, r3
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e9d6:	e03b      	b.n	800ea50 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3320      	adds	r3, #32
 800e9e2:	7812      	ldrb	r2, [r2, #0]
 800e9e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ea02:	e025      	b.n	800ea50 <HAL_SPI_Transmit+0x378>
 800ea04:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea08:	f7f9 fcbc 	bl	8008384 <HAL_GetTick>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d803      	bhi.n	800ea20 <HAL_SPI_Transmit+0x348>
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea1e:	d102      	bne.n	800ea26 <HAL_SPI_Transmit+0x34e>
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d114      	bne.n	800ea50 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f000 fdf0 	bl	800f60c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ea4c:	2303      	movs	r3, #3
 800ea4e:	e02c      	b.n	800eaaa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f47f af79 	bne.w	800e950 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2200      	movs	r2, #0
 800ea66:	2108      	movs	r1, #8
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f000 fe6f 	bl	800f74c <SPI_WaitOnFlagUntilTimeout>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d007      	beq.n	800ea84 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea7a:	f043 0220 	orr.w	r2, r3, #32
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f000 fdc1 	bl	800f60c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d001      	beq.n	800eaa8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e000      	b.n	800eaaa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800eaa8:	2300      	movs	r3, #0
  }
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop

0800eab4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	603b      	str	r3, [r7, #0]
 800eac0:	4613      	mov	r3, r2
 800eac2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eac8:	095b      	lsrs	r3, r3, #5
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	3301      	adds	r3, #1
 800eace:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3330      	adds	r3, #48	@ 0x30
 800ead6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ead8:	f7f9 fc54 	bl	8008384 <HAL_GetTick>
 800eadc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d001      	beq.n	800eaee <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800eaea:	2302      	movs	r3, #2
 800eaec:	e250      	b.n	800ef90 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <HAL_SPI_Receive+0x46>
 800eaf4:	88fb      	ldrh	r3, [r7, #6]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e248      	b.n	800ef90 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d101      	bne.n	800eb0c <HAL_SPI_Receive+0x58>
 800eb08:	2302      	movs	r3, #2
 800eb0a:	e241      	b.n	800ef90 <HAL_SPI_Receive+0x4dc>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2204      	movs	r2, #4
 800eb18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	88fa      	ldrh	r2, [r7, #6]
 800eb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	88fa      	ldrh	r2, [r7, #6]
 800eb36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800eb64:	d108      	bne.n	800eb78 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800eb74:	601a      	str	r2, [r3, #0]
 800eb76:	e009      	b.n	800eb8c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800eb8a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	4b95      	ldr	r3, [pc, #596]	@ (800ede8 <HAL_SPI_Receive+0x334>)
 800eb94:	4013      	ands	r3, r2
 800eb96:	88f9      	ldrh	r1, [r7, #6]
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	6812      	ldr	r2, [r2, #0]
 800eb9c:	430b      	orrs	r3, r1
 800eb9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f042 0201 	orr.w	r2, r2, #1
 800ebae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ebb8:	d107      	bne.n	800ebca <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ebc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	2b0f      	cmp	r3, #15
 800ebd0:	d96c      	bls.n	800ecac <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ebd2:	e064      	b.n	800ec9e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	695b      	ldr	r3, [r3, #20]
 800ebe2:	f003 0301 	and.w	r3, r3, #1
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d114      	bne.n	800ec14 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebf2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ebf4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebfa:	1d1a      	adds	r2, r3, #4
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ec12:	e044      	b.n	800ec9e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	8bfa      	ldrh	r2, [r7, #30]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d919      	bls.n	800ec56 <HAL_SPI_Receive+0x1a2>
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d014      	beq.n	800ec56 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ec36:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec3c:	1d1a      	adds	r2, r3, #4
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ec54:	e023      	b.n	800ec9e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec56:	f7f9 fb95 	bl	8008384 <HAL_GetTick>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d803      	bhi.n	800ec6e <HAL_SPI_Receive+0x1ba>
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6c:	d102      	bne.n	800ec74 <HAL_SPI_Receive+0x1c0>
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d114      	bne.n	800ec9e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f000 fcc9 	bl	800f60c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ec9a:	2303      	movs	r3, #3
 800ec9c:	e178      	b.n	800ef90 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d194      	bne.n	800ebd4 <HAL_SPI_Receive+0x120>
 800ecaa:	e15e      	b.n	800ef6a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	2b07      	cmp	r3, #7
 800ecb2:	f240 8153 	bls.w	800ef5c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ecb6:	e08f      	b.n	800edd8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d114      	bne.n	800ecf8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecd2:	69ba      	ldr	r2, [r7, #24]
 800ecd4:	8812      	ldrh	r2, [r2, #0]
 800ecd6:	b292      	uxth	r2, r2
 800ecd8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecde:	1c9a      	adds	r2, r3, #2
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	3b01      	subs	r3, #1
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ecf6:	e06f      	b.n	800edd8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	8bfa      	ldrh	r2, [r7, #30]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d924      	bls.n	800ed50 <HAL_SPI_Receive+0x29c>
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d01f      	beq.n	800ed50 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed14:	69ba      	ldr	r2, [r7, #24]
 800ed16:	8812      	ldrh	r2, [r2, #0]
 800ed18:	b292      	uxth	r2, r2
 800ed1a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed20:	1c9a      	adds	r2, r3, #2
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed2a:	69ba      	ldr	r2, [r7, #24]
 800ed2c:	8812      	ldrh	r2, [r2, #0]
 800ed2e:	b292      	uxth	r2, r2
 800ed30:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed36:	1c9a      	adds	r2, r3, #2
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	3b02      	subs	r3, #2
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ed4e:	e043      	b.n	800edd8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d119      	bne.n	800ed90 <HAL_SPI_Receive+0x2dc>
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d014      	beq.n	800ed90 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	8812      	ldrh	r2, [r2, #0]
 800ed6e:	b292      	uxth	r2, r2
 800ed70:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed76:	1c9a      	adds	r2, r3, #2
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	3b01      	subs	r3, #1
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ed8e:	e023      	b.n	800edd8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed90:	f7f9 faf8 	bl	8008384 <HAL_GetTick>
 800ed94:	4602      	mov	r2, r0
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	683a      	ldr	r2, [r7, #0]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d803      	bhi.n	800eda8 <HAL_SPI_Receive+0x2f4>
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda6:	d102      	bne.n	800edae <HAL_SPI_Receive+0x2fa>
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d114      	bne.n	800edd8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f000 fc2c 	bl	800f60c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800edd4:	2303      	movs	r3, #3
 800edd6:	e0db      	b.n	800ef90 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800edde:	b29b      	uxth	r3, r3
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f47f af69 	bne.w	800ecb8 <HAL_SPI_Receive+0x204>
 800ede6:	e0c0      	b.n	800ef6a <HAL_SPI_Receive+0x4b6>
 800ede8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	695b      	ldr	r3, [r3, #20]
 800edf2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	695b      	ldr	r3, [r3, #20]
 800edfa:	f003 0301 	and.w	r3, r3, #1
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d117      	bne.n	800ee32 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee0e:	7812      	ldrb	r2, [r2, #0]
 800ee10:	b2d2      	uxtb	r2, r2
 800ee12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee18:	1c5a      	adds	r2, r3, #1
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	3b01      	subs	r3, #1
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ee30:	e094      	b.n	800ef5c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	8bfa      	ldrh	r2, [r7, #30]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d946      	bls.n	800eece <HAL_SPI_Receive+0x41a>
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d041      	beq.n	800eece <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee56:	7812      	ldrb	r2, [r2, #0]
 800ee58:	b2d2      	uxtb	r2, r2
 800ee5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee72:	7812      	ldrb	r2, [r2, #0]
 800ee74:	b2d2      	uxtb	r2, r2
 800ee76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee8e:	7812      	ldrb	r2, [r2, #0]
 800ee90:	b2d2      	uxtb	r2, r2
 800ee92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee98:	1c5a      	adds	r2, r3, #1
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eeaa:	7812      	ldrb	r2, [r2, #0]
 800eeac:	b2d2      	uxtb	r2, r2
 800eeae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eeb4:	1c5a      	adds	r2, r3, #1
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	3b04      	subs	r3, #4
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800eecc:	e046      	b.n	800ef5c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d81c      	bhi.n	800ef14 <HAL_SPI_Receive+0x460>
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d017      	beq.n	800ef14 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eef0:	7812      	ldrb	r2, [r2, #0]
 800eef2:	b2d2      	uxtb	r2, r2
 800eef4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eefa:	1c5a      	adds	r2, r3, #1
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ef12:	e023      	b.n	800ef5c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef14:	f7f9 fa36 	bl	8008384 <HAL_GetTick>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	683a      	ldr	r2, [r7, #0]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d803      	bhi.n	800ef2c <HAL_SPI_Receive+0x478>
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef2a:	d102      	bne.n	800ef32 <HAL_SPI_Receive+0x47e>
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d114      	bne.n	800ef5c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f000 fb6a 	bl	800f60c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ef58:	2303      	movs	r3, #3
 800ef5a:	e019      	b.n	800ef90 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f47f af41 	bne.w	800edec <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f000 fb4e 	bl	800f60c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e000      	b.n	800ef90 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800ef8e:	2300      	movs	r3, #0
  }
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3720      	adds	r7, #32
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b08e      	sub	sp, #56	@ 0x38
 800ef9c:	af02      	add	r7, sp, #8
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	607a      	str	r2, [r7, #4]
 800efa4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3320      	adds	r3, #32
 800efac:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3330      	adds	r3, #48	@ 0x30
 800efb4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efba:	095b      	lsrs	r3, r3, #5
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	3301      	adds	r3, #1
 800efc0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efc2:	f7f9 f9df 	bl	8008384 <HAL_GetTick>
 800efc6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800efc8:	887b      	ldrh	r3, [r7, #2]
 800efca:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800efcc:	887b      	ldrh	r3, [r7, #2]
 800efce:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d001      	beq.n	800efe0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800efdc:	2302      	movs	r3, #2
 800efde:	e310      	b.n	800f602 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d005      	beq.n	800eff2 <HAL_SPI_TransmitReceive+0x5a>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <HAL_SPI_TransmitReceive+0x5a>
 800efec:	887b      	ldrh	r3, [r7, #2]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e305      	b.n	800f602 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800effc:	2b01      	cmp	r3, #1
 800effe:	d101      	bne.n	800f004 <HAL_SPI_TransmitReceive+0x6c>
 800f000:	2302      	movs	r3, #2
 800f002:	e2fe      	b.n	800f602 <HAL_SPI_TransmitReceive+0x66a>
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2205      	movs	r2, #5
 800f010:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	887a      	ldrh	r2, [r7, #2]
 800f026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	887a      	ldrh	r2, [r7, #2]
 800f02e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	887a      	ldrh	r2, [r7, #2]
 800f03c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	887a      	ldrh	r2, [r7, #2]
 800f044:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2200      	movs	r2, #0
 800f04c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68da      	ldr	r2, [r3, #12]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800f062:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a70      	ldr	r2, [pc, #448]	@ (800f22c <HAL_SPI_TransmitReceive+0x294>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d009      	beq.n	800f082 <HAL_SPI_TransmitReceive+0xea>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a6f      	ldr	r2, [pc, #444]	@ (800f230 <HAL_SPI_TransmitReceive+0x298>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d004      	beq.n	800f082 <HAL_SPI_TransmitReceive+0xea>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a6d      	ldr	r2, [pc, #436]	@ (800f234 <HAL_SPI_TransmitReceive+0x29c>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d102      	bne.n	800f088 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800f082:	2310      	movs	r3, #16
 800f084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f086:	e001      	b.n	800f08c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800f088:	2308      	movs	r3, #8
 800f08a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	685a      	ldr	r2, [r3, #4]
 800f092:	4b69      	ldr	r3, [pc, #420]	@ (800f238 <HAL_SPI_TransmitReceive+0x2a0>)
 800f094:	4013      	ands	r3, r2
 800f096:	8879      	ldrh	r1, [r7, #2]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	6812      	ldr	r2, [r2, #0]
 800f09c:	430b      	orrs	r3, r1
 800f09e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f042 0201 	orr.w	r2, r2, #1
 800f0ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f0b8:	d107      	bne.n	800f0ca <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f0c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	2b0f      	cmp	r3, #15
 800f0d0:	f240 80a2 	bls.w	800f218 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800f0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d6:	089b      	lsrs	r3, r3, #2
 800f0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f0da:	e094      	b.n	800f206 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	695b      	ldr	r3, [r3, #20]
 800f0e2:	f003 0302 	and.w	r3, r3, #2
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	d120      	bne.n	800f12c <HAL_SPI_TransmitReceive+0x194>
 800f0ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d01d      	beq.n	800f12c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800f0f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f0f2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d217      	bcs.n	800f12c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	6812      	ldr	r2, [r2, #0]
 800f106:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f10c:	1d1a      	adds	r2, r3, #4
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f118:	b29b      	uxth	r3, r3
 800f11a:	3b01      	subs	r3, #1
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f12a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800f134:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f136:	2b00      	cmp	r3, #0
 800f138:	d065      	beq.n	800f206 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	695b      	ldr	r3, [r3, #20]
 800f140:	f003 0301 	and.w	r3, r3, #1
 800f144:	2b01      	cmp	r3, #1
 800f146:	d118      	bne.n	800f17a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f150:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f152:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f158:	1d1a      	adds	r2, r3, #4
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f164:	b29b      	uxth	r3, r3
 800f166:	3b01      	subs	r3, #1
 800f168:	b29a      	uxth	r2, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f176:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f178:	e045      	b.n	800f206 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f17a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f17c:	8bfb      	ldrh	r3, [r7, #30]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d21d      	bcs.n	800f1be <HAL_SPI_TransmitReceive+0x226>
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d018      	beq.n	800f1be <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f194:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f196:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f19c:	1d1a      	adds	r2, r3, #4
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f1ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f1bc:	e023      	b.n	800f206 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1be:	f7f9 f8e1 	bl	8008384 <HAL_GetTick>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d803      	bhi.n	800f1d6 <HAL_SPI_TransmitReceive+0x23e>
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d4:	d102      	bne.n	800f1dc <HAL_SPI_TransmitReceive+0x244>
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d114      	bne.n	800f206 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f000 fa15 	bl	800f60c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800f202:	2303      	movs	r3, #3
 800f204:	e1fd      	b.n	800f602 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f206:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f47f af67 	bne.w	800f0dc <HAL_SPI_TransmitReceive+0x144>
 800f20e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f210:	2b00      	cmp	r3, #0
 800f212:	f47f af63 	bne.w	800f0dc <HAL_SPI_TransmitReceive+0x144>
 800f216:	e1ce      	b.n	800f5b6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	2b07      	cmp	r3, #7
 800f21e:	f240 81c2 	bls.w	800f5a6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800f222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f224:	085b      	lsrs	r3, r3, #1
 800f226:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f228:	e0c9      	b.n	800f3be <HAL_SPI_TransmitReceive+0x426>
 800f22a:	bf00      	nop
 800f22c:	40013000 	.word	0x40013000
 800f230:	40003800 	.word	0x40003800
 800f234:	40003c00 	.word	0x40003c00
 800f238:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	f003 0302 	and.w	r3, r3, #2
 800f246:	2b02      	cmp	r3, #2
 800f248:	d11f      	bne.n	800f28a <HAL_SPI_TransmitReceive+0x2f2>
 800f24a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d01c      	beq.n	800f28a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800f250:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f252:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f256:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f258:	429a      	cmp	r2, r3
 800f25a:	d216      	bcs.n	800f28a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f260:	881a      	ldrh	r2, [r3, #0]
 800f262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f264:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f26a:	1c9a      	adds	r2, r3, #2
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f276:	b29b      	uxth	r3, r3
 800f278:	3b01      	subs	r3, #1
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f288:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	695b      	ldr	r3, [r3, #20]
 800f290:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800f292:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 8092 	beq.w	800f3be <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d118      	bne.n	800f2da <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f2ac:	6a3a      	ldr	r2, [r7, #32]
 800f2ae:	8812      	ldrh	r2, [r2, #0]
 800f2b0:	b292      	uxth	r2, r2
 800f2b2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f2b8:	1c9a      	adds	r2, r3, #2
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f2d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f2d8:	e071      	b.n	800f3be <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f2da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f2dc:	8bfb      	ldrh	r3, [r7, #30]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d228      	bcs.n	800f334 <HAL_SPI_TransmitReceive+0x39c>
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d023      	beq.n	800f334 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f2f0:	6a3a      	ldr	r2, [r7, #32]
 800f2f2:	8812      	ldrh	r2, [r2, #0]
 800f2f4:	b292      	uxth	r2, r2
 800f2f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f2fc:	1c9a      	adds	r2, r3, #2
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f306:	6a3a      	ldr	r2, [r7, #32]
 800f308:	8812      	ldrh	r2, [r2, #0]
 800f30a:	b292      	uxth	r2, r2
 800f30c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f312:	1c9a      	adds	r2, r3, #2
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f31e:	b29b      	uxth	r3, r3
 800f320:	3b02      	subs	r3, #2
 800f322:	b29a      	uxth	r2, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f330:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f332:	e044      	b.n	800f3be <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800f334:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f336:	2b01      	cmp	r3, #1
 800f338:	d11d      	bne.n	800f376 <HAL_SPI_TransmitReceive+0x3de>
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f340:	2b00      	cmp	r3, #0
 800f342:	d018      	beq.n	800f376 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f348:	6a3a      	ldr	r2, [r7, #32]
 800f34a:	8812      	ldrh	r2, [r2, #0]
 800f34c:	b292      	uxth	r2, r2
 800f34e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f354:	1c9a      	adds	r2, r3, #2
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f360:	b29b      	uxth	r3, r3
 800f362:	3b01      	subs	r3, #1
 800f364:	b29a      	uxth	r2, r3
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f372:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f374:	e023      	b.n	800f3be <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f376:	f7f9 f805 	bl	8008384 <HAL_GetTick>
 800f37a:	4602      	mov	r2, r0
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	1ad3      	subs	r3, r2, r3
 800f380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f382:	429a      	cmp	r2, r3
 800f384:	d803      	bhi.n	800f38e <HAL_SPI_TransmitReceive+0x3f6>
 800f386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f38c:	d102      	bne.n	800f394 <HAL_SPI_TransmitReceive+0x3fc>
 800f38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f390:	2b00      	cmp	r3, #0
 800f392:	d114      	bne.n	800f3be <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 f939 	bl	800f60c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	e121      	b.n	800f602 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f3be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f47f af3b 	bne.w	800f23c <HAL_SPI_TransmitReceive+0x2a4>
 800f3c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f47f af37 	bne.w	800f23c <HAL_SPI_TransmitReceive+0x2a4>
 800f3ce:	e0f2      	b.n	800f5b6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	f003 0302 	and.w	r3, r3, #2
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	d121      	bne.n	800f422 <HAL_SPI_TransmitReceive+0x48a>
 800f3de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d01e      	beq.n	800f422 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800f3e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f3e6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d218      	bcs.n	800f422 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3320      	adds	r3, #32
 800f3fa:	7812      	ldrb	r2, [r2, #0]
 800f3fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f40e:	b29b      	uxth	r3, r3
 800f410:	3b01      	subs	r3, #1
 800f412:	b29a      	uxth	r2, r3
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f420:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	695b      	ldr	r3, [r3, #20]
 800f428:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800f42a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f000 80ba 	beq.w	800f5a6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	695b      	ldr	r3, [r3, #20]
 800f438:	f003 0301 	and.w	r3, r3, #1
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d11b      	bne.n	800f478 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f44c:	7812      	ldrb	r2, [r2, #0]
 800f44e:	b2d2      	uxtb	r2, r2
 800f450:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f462:	b29b      	uxth	r3, r3
 800f464:	3b01      	subs	r3, #1
 800f466:	b29a      	uxth	r2, r3
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f474:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f476:	e096      	b.n	800f5a6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f478:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f47a:	8bfb      	ldrh	r3, [r7, #30]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d24a      	bcs.n	800f516 <HAL_SPI_TransmitReceive+0x57e>
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f486:	2b00      	cmp	r3, #0
 800f488:	d045      	beq.n	800f516 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f496:	7812      	ldrb	r2, [r2, #0]
 800f498:	b2d2      	uxtb	r2, r2
 800f49a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4a0:	1c5a      	adds	r2, r3, #1
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4b2:	7812      	ldrb	r2, [r2, #0]
 800f4b4:	b2d2      	uxtb	r2, r2
 800f4b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4bc:	1c5a      	adds	r2, r3, #1
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4ce:	7812      	ldrb	r2, [r2, #0]
 800f4d0:	b2d2      	uxtb	r2, r2
 800f4d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4d8:	1c5a      	adds	r2, r3, #1
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4ea:	7812      	ldrb	r2, [r2, #0]
 800f4ec:	b2d2      	uxtb	r2, r2
 800f4ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f500:	b29b      	uxth	r3, r3
 800f502:	3b04      	subs	r3, #4
 800f504:	b29a      	uxth	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f512:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f514:	e047      	b.n	800f5a6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800f516:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f518:	2b03      	cmp	r3, #3
 800f51a:	d820      	bhi.n	800f55e <HAL_SPI_TransmitReceive+0x5c6>
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01b      	beq.n	800f55e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f532:	7812      	ldrb	r2, [r2, #0]
 800f534:	b2d2      	uxtb	r2, r2
 800f536:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f548:	b29b      	uxth	r3, r3
 800f54a:	3b01      	subs	r3, #1
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f55a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f55c:	e023      	b.n	800f5a6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f55e:	f7f8 ff11 	bl	8008384 <HAL_GetTick>
 800f562:	4602      	mov	r2, r0
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d803      	bhi.n	800f576 <HAL_SPI_TransmitReceive+0x5de>
 800f56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f574:	d102      	bne.n	800f57c <HAL_SPI_TransmitReceive+0x5e4>
 800f576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d114      	bne.n	800f5a6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f000 f845 	bl	800f60c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2201      	movs	r2, #1
 800f596:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2200      	movs	r2, #0
 800f59e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800f5a2:	2303      	movs	r3, #3
 800f5a4:	e02d      	b.n	800f602 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f5a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f47f af11 	bne.w	800f3d0 <HAL_SPI_TransmitReceive+0x438>
 800f5ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f47f af0d 	bne.w	800f3d0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5bc:	2200      	movs	r2, #0
 800f5be:	2108      	movs	r1, #8
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f000 f8c3 	bl	800f74c <SPI_WaitOnFlagUntilTimeout>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d007      	beq.n	800f5dc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5d2:	f043 0220 	orr.w	r2, r3, #32
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f000 f815 	bl	800f60c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e000      	b.n	800f602 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800f600:	2300      	movs	r3, #0
  }
}
 800f602:	4618      	mov	r0, r3
 800f604:	3730      	adds	r7, #48	@ 0x30
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop

0800f60c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b085      	sub	sp, #20
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	695b      	ldr	r3, [r3, #20]
 800f61a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	699a      	ldr	r2, [r3, #24]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f042 0208 	orr.w	r2, r2, #8
 800f62a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	699a      	ldr	r2, [r3, #24]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f042 0210 	orr.w	r2, r2, #16
 800f63a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f022 0201 	bic.w	r2, r2, #1
 800f64a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	6919      	ldr	r1, [r3, #16]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	4b3c      	ldr	r3, [pc, #240]	@ (800f748 <SPI_CloseTransfer+0x13c>)
 800f658:	400b      	ands	r3, r1
 800f65a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	689a      	ldr	r2, [r3, #8]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f66a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b04      	cmp	r3, #4
 800f676:	d014      	beq.n	800f6a2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f003 0320 	and.w	r3, r3, #32
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d00f      	beq.n	800f6a2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f688:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	699a      	ldr	r2, [r3, #24]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f042 0220 	orr.w	r2, r2, #32
 800f6a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b03      	cmp	r3, #3
 800f6ac:	d014      	beq.n	800f6d8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00f      	beq.n	800f6d8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6be:	f043 0204 	orr.w	r2, r3, #4
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	699a      	ldr	r2, [r3, #24]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f6d6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00f      	beq.n	800f702 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6e8:	f043 0201 	orr.w	r2, r3, #1
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	699a      	ldr	r2, [r3, #24]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f700:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00f      	beq.n	800f72c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f712:	f043 0208 	orr.w	r2, r3, #8
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	699a      	ldr	r2, [r3, #24]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f72a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f73c:	bf00      	nop
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	fffffc90 	.word	0xfffffc90

0800f74c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	603b      	str	r3, [r7, #0]
 800f758:	4613      	mov	r3, r2
 800f75a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f75c:	e010      	b.n	800f780 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f75e:	f7f8 fe11 	bl	8008384 <HAL_GetTick>
 800f762:	4602      	mov	r2, r0
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d803      	bhi.n	800f776 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f774:	d102      	bne.n	800f77c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d101      	bne.n	800f780 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f77c:	2303      	movs	r3, #3
 800f77e:	e00f      	b.n	800f7a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	695a      	ldr	r2, [r3, #20]
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	4013      	ands	r3, r2
 800f78a:	68ba      	ldr	r2, [r7, #8]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	bf0c      	ite	eq
 800f790:	2301      	moveq	r3, #1
 800f792:	2300      	movne	r3, #0
 800f794:	b2db      	uxtb	r3, r3
 800f796:	461a      	mov	r2, r3
 800f798:	79fb      	ldrb	r3, [r7, #7]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d0df      	beq.n	800f75e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b085      	sub	sp, #20
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7b4:	095b      	lsrs	r3, r3, #5
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	3307      	adds	r3, #7
 800f7c6:	08db      	lsrs	r3, r3, #3
 800f7c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	fb02 f303 	mul.w	r3, r2, r3
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3714      	adds	r7, #20
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr

0800f7de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d101      	bne.n	800f7f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e042      	b.n	800f876 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d106      	bne.n	800f808 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7f8 fa16 	bl	8007c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2224      	movs	r2, #36	@ 0x24
 800f80c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f022 0201 	bic.w	r2, r2, #1
 800f81e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f824:	2b00      	cmp	r3, #0
 800f826:	d002      	beq.n	800f82e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fe95 	bl	8010558 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 f826 	bl	800f880 <UART_SetConfig>
 800f834:	4603      	mov	r3, r0
 800f836:	2b01      	cmp	r3, #1
 800f838:	d101      	bne.n	800f83e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f83a:	2301      	movs	r3, #1
 800f83c:	e01b      	b.n	800f876 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	685a      	ldr	r2, [r3, #4]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f84c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	689a      	ldr	r2, [r3, #8]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f85c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f042 0201 	orr.w	r2, r2, #1
 800f86c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 ff14 	bl	801069c <UART_CheckIdleState>
 800f874:	4603      	mov	r3, r0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
	...

0800f880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f884:	b092      	sub	sp, #72	@ 0x48
 800f886:	af00      	add	r7, sp, #0
 800f888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f88a:	2300      	movs	r3, #0
 800f88c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	689a      	ldr	r2, [r3, #8]
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	691b      	ldr	r3, [r3, #16]
 800f898:	431a      	orrs	r2, r3
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	431a      	orrs	r2, r3
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	69db      	ldr	r3, [r3, #28]
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	4bbe      	ldr	r3, [pc, #760]	@ (800fba8 <UART_SetConfig+0x328>)
 800f8b0:	4013      	ands	r3, r2
 800f8b2:	697a      	ldr	r2, [r7, #20]
 800f8b4:	6812      	ldr	r2, [r2, #0]
 800f8b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8b8:	430b      	orrs	r3, r1
 800f8ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	68da      	ldr	r2, [r3, #12]
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	430a      	orrs	r2, r1
 800f8d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	699b      	ldr	r3, [r3, #24]
 800f8d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4ab3      	ldr	r2, [pc, #716]	@ (800fbac <UART_SetConfig+0x32c>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d004      	beq.n	800f8ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	689a      	ldr	r2, [r3, #8]
 800f8f2:	4baf      	ldr	r3, [pc, #700]	@ (800fbb0 <UART_SetConfig+0x330>)
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	697a      	ldr	r2, [r7, #20]
 800f8f8:	6812      	ldr	r2, [r2, #0]
 800f8fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8fc:	430b      	orrs	r3, r1
 800f8fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f906:	f023 010f 	bic.w	r1, r3, #15
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	430a      	orrs	r2, r1
 800f914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4aa6      	ldr	r2, [pc, #664]	@ (800fbb4 <UART_SetConfig+0x334>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d177      	bne.n	800fa10 <UART_SetConfig+0x190>
 800f920:	4ba5      	ldr	r3, [pc, #660]	@ (800fbb8 <UART_SetConfig+0x338>)
 800f922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f924:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f928:	2b28      	cmp	r3, #40	@ 0x28
 800f92a:	d86d      	bhi.n	800fa08 <UART_SetConfig+0x188>
 800f92c:	a201      	add	r2, pc, #4	@ (adr r2, 800f934 <UART_SetConfig+0xb4>)
 800f92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f932:	bf00      	nop
 800f934:	0800f9d9 	.word	0x0800f9d9
 800f938:	0800fa09 	.word	0x0800fa09
 800f93c:	0800fa09 	.word	0x0800fa09
 800f940:	0800fa09 	.word	0x0800fa09
 800f944:	0800fa09 	.word	0x0800fa09
 800f948:	0800fa09 	.word	0x0800fa09
 800f94c:	0800fa09 	.word	0x0800fa09
 800f950:	0800fa09 	.word	0x0800fa09
 800f954:	0800f9e1 	.word	0x0800f9e1
 800f958:	0800fa09 	.word	0x0800fa09
 800f95c:	0800fa09 	.word	0x0800fa09
 800f960:	0800fa09 	.word	0x0800fa09
 800f964:	0800fa09 	.word	0x0800fa09
 800f968:	0800fa09 	.word	0x0800fa09
 800f96c:	0800fa09 	.word	0x0800fa09
 800f970:	0800fa09 	.word	0x0800fa09
 800f974:	0800f9e9 	.word	0x0800f9e9
 800f978:	0800fa09 	.word	0x0800fa09
 800f97c:	0800fa09 	.word	0x0800fa09
 800f980:	0800fa09 	.word	0x0800fa09
 800f984:	0800fa09 	.word	0x0800fa09
 800f988:	0800fa09 	.word	0x0800fa09
 800f98c:	0800fa09 	.word	0x0800fa09
 800f990:	0800fa09 	.word	0x0800fa09
 800f994:	0800f9f1 	.word	0x0800f9f1
 800f998:	0800fa09 	.word	0x0800fa09
 800f99c:	0800fa09 	.word	0x0800fa09
 800f9a0:	0800fa09 	.word	0x0800fa09
 800f9a4:	0800fa09 	.word	0x0800fa09
 800f9a8:	0800fa09 	.word	0x0800fa09
 800f9ac:	0800fa09 	.word	0x0800fa09
 800f9b0:	0800fa09 	.word	0x0800fa09
 800f9b4:	0800f9f9 	.word	0x0800f9f9
 800f9b8:	0800fa09 	.word	0x0800fa09
 800f9bc:	0800fa09 	.word	0x0800fa09
 800f9c0:	0800fa09 	.word	0x0800fa09
 800f9c4:	0800fa09 	.word	0x0800fa09
 800f9c8:	0800fa09 	.word	0x0800fa09
 800f9cc:	0800fa09 	.word	0x0800fa09
 800f9d0:	0800fa09 	.word	0x0800fa09
 800f9d4:	0800fa01 	.word	0x0800fa01
 800f9d8:	2301      	movs	r3, #1
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9de:	e326      	b.n	801002e <UART_SetConfig+0x7ae>
 800f9e0:	2304      	movs	r3, #4
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e6:	e322      	b.n	801002e <UART_SetConfig+0x7ae>
 800f9e8:	2308      	movs	r3, #8
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ee:	e31e      	b.n	801002e <UART_SetConfig+0x7ae>
 800f9f0:	2310      	movs	r3, #16
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f6:	e31a      	b.n	801002e <UART_SetConfig+0x7ae>
 800f9f8:	2320      	movs	r3, #32
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fe:	e316      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa00:	2340      	movs	r3, #64	@ 0x40
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa06:	e312      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa08:	2380      	movs	r3, #128	@ 0x80
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0e:	e30e      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a69      	ldr	r2, [pc, #420]	@ (800fbbc <UART_SetConfig+0x33c>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d130      	bne.n	800fa7c <UART_SetConfig+0x1fc>
 800fa1a:	4b67      	ldr	r3, [pc, #412]	@ (800fbb8 <UART_SetConfig+0x338>)
 800fa1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	2b05      	cmp	r3, #5
 800fa24:	d826      	bhi.n	800fa74 <UART_SetConfig+0x1f4>
 800fa26:	a201      	add	r2, pc, #4	@ (adr r2, 800fa2c <UART_SetConfig+0x1ac>)
 800fa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2c:	0800fa45 	.word	0x0800fa45
 800fa30:	0800fa4d 	.word	0x0800fa4d
 800fa34:	0800fa55 	.word	0x0800fa55
 800fa38:	0800fa5d 	.word	0x0800fa5d
 800fa3c:	0800fa65 	.word	0x0800fa65
 800fa40:	0800fa6d 	.word	0x0800fa6d
 800fa44:	2300      	movs	r3, #0
 800fa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4a:	e2f0      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa4c:	2304      	movs	r3, #4
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa52:	e2ec      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa54:	2308      	movs	r3, #8
 800fa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5a:	e2e8      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa5c:	2310      	movs	r3, #16
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa62:	e2e4      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa64:	2320      	movs	r3, #32
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6a:	e2e0      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa6c:	2340      	movs	r3, #64	@ 0x40
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa72:	e2dc      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa74:	2380      	movs	r3, #128	@ 0x80
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7a:	e2d8      	b.n	801002e <UART_SetConfig+0x7ae>
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a4f      	ldr	r2, [pc, #316]	@ (800fbc0 <UART_SetConfig+0x340>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d130      	bne.n	800fae8 <UART_SetConfig+0x268>
 800fa86:	4b4c      	ldr	r3, [pc, #304]	@ (800fbb8 <UART_SetConfig+0x338>)
 800fa88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa8a:	f003 0307 	and.w	r3, r3, #7
 800fa8e:	2b05      	cmp	r3, #5
 800fa90:	d826      	bhi.n	800fae0 <UART_SetConfig+0x260>
 800fa92:	a201      	add	r2, pc, #4	@ (adr r2, 800fa98 <UART_SetConfig+0x218>)
 800fa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa98:	0800fab1 	.word	0x0800fab1
 800fa9c:	0800fab9 	.word	0x0800fab9
 800faa0:	0800fac1 	.word	0x0800fac1
 800faa4:	0800fac9 	.word	0x0800fac9
 800faa8:	0800fad1 	.word	0x0800fad1
 800faac:	0800fad9 	.word	0x0800fad9
 800fab0:	2300      	movs	r3, #0
 800fab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab6:	e2ba      	b.n	801002e <UART_SetConfig+0x7ae>
 800fab8:	2304      	movs	r3, #4
 800faba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fabe:	e2b6      	b.n	801002e <UART_SetConfig+0x7ae>
 800fac0:	2308      	movs	r3, #8
 800fac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac6:	e2b2      	b.n	801002e <UART_SetConfig+0x7ae>
 800fac8:	2310      	movs	r3, #16
 800faca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800face:	e2ae      	b.n	801002e <UART_SetConfig+0x7ae>
 800fad0:	2320      	movs	r3, #32
 800fad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad6:	e2aa      	b.n	801002e <UART_SetConfig+0x7ae>
 800fad8:	2340      	movs	r3, #64	@ 0x40
 800fada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fade:	e2a6      	b.n	801002e <UART_SetConfig+0x7ae>
 800fae0:	2380      	movs	r3, #128	@ 0x80
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae6:	e2a2      	b.n	801002e <UART_SetConfig+0x7ae>
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a35      	ldr	r2, [pc, #212]	@ (800fbc4 <UART_SetConfig+0x344>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d130      	bne.n	800fb54 <UART_SetConfig+0x2d4>
 800faf2:	4b31      	ldr	r3, [pc, #196]	@ (800fbb8 <UART_SetConfig+0x338>)
 800faf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faf6:	f003 0307 	and.w	r3, r3, #7
 800fafa:	2b05      	cmp	r3, #5
 800fafc:	d826      	bhi.n	800fb4c <UART_SetConfig+0x2cc>
 800fafe:	a201      	add	r2, pc, #4	@ (adr r2, 800fb04 <UART_SetConfig+0x284>)
 800fb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb04:	0800fb1d 	.word	0x0800fb1d
 800fb08:	0800fb25 	.word	0x0800fb25
 800fb0c:	0800fb2d 	.word	0x0800fb2d
 800fb10:	0800fb35 	.word	0x0800fb35
 800fb14:	0800fb3d 	.word	0x0800fb3d
 800fb18:	0800fb45 	.word	0x0800fb45
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb22:	e284      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb24:	2304      	movs	r3, #4
 800fb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2a:	e280      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb2c:	2308      	movs	r3, #8
 800fb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb32:	e27c      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb34:	2310      	movs	r3, #16
 800fb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb3a:	e278      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb3c:	2320      	movs	r3, #32
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb42:	e274      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb44:	2340      	movs	r3, #64	@ 0x40
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb4a:	e270      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb4c:	2380      	movs	r3, #128	@ 0x80
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb52:	e26c      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a1b      	ldr	r2, [pc, #108]	@ (800fbc8 <UART_SetConfig+0x348>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d142      	bne.n	800fbe4 <UART_SetConfig+0x364>
 800fb5e:	4b16      	ldr	r3, [pc, #88]	@ (800fbb8 <UART_SetConfig+0x338>)
 800fb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb62:	f003 0307 	and.w	r3, r3, #7
 800fb66:	2b05      	cmp	r3, #5
 800fb68:	d838      	bhi.n	800fbdc <UART_SetConfig+0x35c>
 800fb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb70 <UART_SetConfig+0x2f0>)
 800fb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb70:	0800fb89 	.word	0x0800fb89
 800fb74:	0800fb91 	.word	0x0800fb91
 800fb78:	0800fb99 	.word	0x0800fb99
 800fb7c:	0800fba1 	.word	0x0800fba1
 800fb80:	0800fbcd 	.word	0x0800fbcd
 800fb84:	0800fbd5 	.word	0x0800fbd5
 800fb88:	2300      	movs	r3, #0
 800fb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8e:	e24e      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb90:	2304      	movs	r3, #4
 800fb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb96:	e24a      	b.n	801002e <UART_SetConfig+0x7ae>
 800fb98:	2308      	movs	r3, #8
 800fb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9e:	e246      	b.n	801002e <UART_SetConfig+0x7ae>
 800fba0:	2310      	movs	r3, #16
 800fba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fba6:	e242      	b.n	801002e <UART_SetConfig+0x7ae>
 800fba8:	cfff69f3 	.word	0xcfff69f3
 800fbac:	58000c00 	.word	0x58000c00
 800fbb0:	11fff4ff 	.word	0x11fff4ff
 800fbb4:	40011000 	.word	0x40011000
 800fbb8:	58024400 	.word	0x58024400
 800fbbc:	40004400 	.word	0x40004400
 800fbc0:	40004800 	.word	0x40004800
 800fbc4:	40004c00 	.word	0x40004c00
 800fbc8:	40005000 	.word	0x40005000
 800fbcc:	2320      	movs	r3, #32
 800fbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbd2:	e22c      	b.n	801002e <UART_SetConfig+0x7ae>
 800fbd4:	2340      	movs	r3, #64	@ 0x40
 800fbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbda:	e228      	b.n	801002e <UART_SetConfig+0x7ae>
 800fbdc:	2380      	movs	r3, #128	@ 0x80
 800fbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbe2:	e224      	b.n	801002e <UART_SetConfig+0x7ae>
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4ab1      	ldr	r2, [pc, #708]	@ (800feb0 <UART_SetConfig+0x630>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d176      	bne.n	800fcdc <UART_SetConfig+0x45c>
 800fbee:	4bb1      	ldr	r3, [pc, #708]	@ (800feb4 <UART_SetConfig+0x634>)
 800fbf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fbf6:	2b28      	cmp	r3, #40	@ 0x28
 800fbf8:	d86c      	bhi.n	800fcd4 <UART_SetConfig+0x454>
 800fbfa:	a201      	add	r2, pc, #4	@ (adr r2, 800fc00 <UART_SetConfig+0x380>)
 800fbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc00:	0800fca5 	.word	0x0800fca5
 800fc04:	0800fcd5 	.word	0x0800fcd5
 800fc08:	0800fcd5 	.word	0x0800fcd5
 800fc0c:	0800fcd5 	.word	0x0800fcd5
 800fc10:	0800fcd5 	.word	0x0800fcd5
 800fc14:	0800fcd5 	.word	0x0800fcd5
 800fc18:	0800fcd5 	.word	0x0800fcd5
 800fc1c:	0800fcd5 	.word	0x0800fcd5
 800fc20:	0800fcad 	.word	0x0800fcad
 800fc24:	0800fcd5 	.word	0x0800fcd5
 800fc28:	0800fcd5 	.word	0x0800fcd5
 800fc2c:	0800fcd5 	.word	0x0800fcd5
 800fc30:	0800fcd5 	.word	0x0800fcd5
 800fc34:	0800fcd5 	.word	0x0800fcd5
 800fc38:	0800fcd5 	.word	0x0800fcd5
 800fc3c:	0800fcd5 	.word	0x0800fcd5
 800fc40:	0800fcb5 	.word	0x0800fcb5
 800fc44:	0800fcd5 	.word	0x0800fcd5
 800fc48:	0800fcd5 	.word	0x0800fcd5
 800fc4c:	0800fcd5 	.word	0x0800fcd5
 800fc50:	0800fcd5 	.word	0x0800fcd5
 800fc54:	0800fcd5 	.word	0x0800fcd5
 800fc58:	0800fcd5 	.word	0x0800fcd5
 800fc5c:	0800fcd5 	.word	0x0800fcd5
 800fc60:	0800fcbd 	.word	0x0800fcbd
 800fc64:	0800fcd5 	.word	0x0800fcd5
 800fc68:	0800fcd5 	.word	0x0800fcd5
 800fc6c:	0800fcd5 	.word	0x0800fcd5
 800fc70:	0800fcd5 	.word	0x0800fcd5
 800fc74:	0800fcd5 	.word	0x0800fcd5
 800fc78:	0800fcd5 	.word	0x0800fcd5
 800fc7c:	0800fcd5 	.word	0x0800fcd5
 800fc80:	0800fcc5 	.word	0x0800fcc5
 800fc84:	0800fcd5 	.word	0x0800fcd5
 800fc88:	0800fcd5 	.word	0x0800fcd5
 800fc8c:	0800fcd5 	.word	0x0800fcd5
 800fc90:	0800fcd5 	.word	0x0800fcd5
 800fc94:	0800fcd5 	.word	0x0800fcd5
 800fc98:	0800fcd5 	.word	0x0800fcd5
 800fc9c:	0800fcd5 	.word	0x0800fcd5
 800fca0:	0800fccd 	.word	0x0800fccd
 800fca4:	2301      	movs	r3, #1
 800fca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcaa:	e1c0      	b.n	801002e <UART_SetConfig+0x7ae>
 800fcac:	2304      	movs	r3, #4
 800fcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb2:	e1bc      	b.n	801002e <UART_SetConfig+0x7ae>
 800fcb4:	2308      	movs	r3, #8
 800fcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcba:	e1b8      	b.n	801002e <UART_SetConfig+0x7ae>
 800fcbc:	2310      	movs	r3, #16
 800fcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcc2:	e1b4      	b.n	801002e <UART_SetConfig+0x7ae>
 800fcc4:	2320      	movs	r3, #32
 800fcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcca:	e1b0      	b.n	801002e <UART_SetConfig+0x7ae>
 800fccc:	2340      	movs	r3, #64	@ 0x40
 800fcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcd2:	e1ac      	b.n	801002e <UART_SetConfig+0x7ae>
 800fcd4:	2380      	movs	r3, #128	@ 0x80
 800fcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcda:	e1a8      	b.n	801002e <UART_SetConfig+0x7ae>
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a75      	ldr	r2, [pc, #468]	@ (800feb8 <UART_SetConfig+0x638>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d130      	bne.n	800fd48 <UART_SetConfig+0x4c8>
 800fce6:	4b73      	ldr	r3, [pc, #460]	@ (800feb4 <UART_SetConfig+0x634>)
 800fce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcea:	f003 0307 	and.w	r3, r3, #7
 800fcee:	2b05      	cmp	r3, #5
 800fcf0:	d826      	bhi.n	800fd40 <UART_SetConfig+0x4c0>
 800fcf2:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf8 <UART_SetConfig+0x478>)
 800fcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf8:	0800fd11 	.word	0x0800fd11
 800fcfc:	0800fd19 	.word	0x0800fd19
 800fd00:	0800fd21 	.word	0x0800fd21
 800fd04:	0800fd29 	.word	0x0800fd29
 800fd08:	0800fd31 	.word	0x0800fd31
 800fd0c:	0800fd39 	.word	0x0800fd39
 800fd10:	2300      	movs	r3, #0
 800fd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd16:	e18a      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd18:	2304      	movs	r3, #4
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1e:	e186      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd20:	2308      	movs	r3, #8
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd26:	e182      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd28:	2310      	movs	r3, #16
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2e:	e17e      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd30:	2320      	movs	r3, #32
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd36:	e17a      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd38:	2340      	movs	r3, #64	@ 0x40
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd3e:	e176      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd40:	2380      	movs	r3, #128	@ 0x80
 800fd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd46:	e172      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a5b      	ldr	r2, [pc, #364]	@ (800febc <UART_SetConfig+0x63c>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d130      	bne.n	800fdb4 <UART_SetConfig+0x534>
 800fd52:	4b58      	ldr	r3, [pc, #352]	@ (800feb4 <UART_SetConfig+0x634>)
 800fd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd56:	f003 0307 	and.w	r3, r3, #7
 800fd5a:	2b05      	cmp	r3, #5
 800fd5c:	d826      	bhi.n	800fdac <UART_SetConfig+0x52c>
 800fd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd64 <UART_SetConfig+0x4e4>)
 800fd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd64:	0800fd7d 	.word	0x0800fd7d
 800fd68:	0800fd85 	.word	0x0800fd85
 800fd6c:	0800fd8d 	.word	0x0800fd8d
 800fd70:	0800fd95 	.word	0x0800fd95
 800fd74:	0800fd9d 	.word	0x0800fd9d
 800fd78:	0800fda5 	.word	0x0800fda5
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd82:	e154      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd84:	2304      	movs	r3, #4
 800fd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8a:	e150      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd8c:	2308      	movs	r3, #8
 800fd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd92:	e14c      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd94:	2310      	movs	r3, #16
 800fd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd9a:	e148      	b.n	801002e <UART_SetConfig+0x7ae>
 800fd9c:	2320      	movs	r3, #32
 800fd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fda2:	e144      	b.n	801002e <UART_SetConfig+0x7ae>
 800fda4:	2340      	movs	r3, #64	@ 0x40
 800fda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdaa:	e140      	b.n	801002e <UART_SetConfig+0x7ae>
 800fdac:	2380      	movs	r3, #128	@ 0x80
 800fdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdb2:	e13c      	b.n	801002e <UART_SetConfig+0x7ae>
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a41      	ldr	r2, [pc, #260]	@ (800fec0 <UART_SetConfig+0x640>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	f040 8082 	bne.w	800fec4 <UART_SetConfig+0x644>
 800fdc0:	4b3c      	ldr	r3, [pc, #240]	@ (800feb4 <UART_SetConfig+0x634>)
 800fdc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fdc8:	2b28      	cmp	r3, #40	@ 0x28
 800fdca:	d86d      	bhi.n	800fea8 <UART_SetConfig+0x628>
 800fdcc:	a201      	add	r2, pc, #4	@ (adr r2, 800fdd4 <UART_SetConfig+0x554>)
 800fdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd2:	bf00      	nop
 800fdd4:	0800fe79 	.word	0x0800fe79
 800fdd8:	0800fea9 	.word	0x0800fea9
 800fddc:	0800fea9 	.word	0x0800fea9
 800fde0:	0800fea9 	.word	0x0800fea9
 800fde4:	0800fea9 	.word	0x0800fea9
 800fde8:	0800fea9 	.word	0x0800fea9
 800fdec:	0800fea9 	.word	0x0800fea9
 800fdf0:	0800fea9 	.word	0x0800fea9
 800fdf4:	0800fe81 	.word	0x0800fe81
 800fdf8:	0800fea9 	.word	0x0800fea9
 800fdfc:	0800fea9 	.word	0x0800fea9
 800fe00:	0800fea9 	.word	0x0800fea9
 800fe04:	0800fea9 	.word	0x0800fea9
 800fe08:	0800fea9 	.word	0x0800fea9
 800fe0c:	0800fea9 	.word	0x0800fea9
 800fe10:	0800fea9 	.word	0x0800fea9
 800fe14:	0800fe89 	.word	0x0800fe89
 800fe18:	0800fea9 	.word	0x0800fea9
 800fe1c:	0800fea9 	.word	0x0800fea9
 800fe20:	0800fea9 	.word	0x0800fea9
 800fe24:	0800fea9 	.word	0x0800fea9
 800fe28:	0800fea9 	.word	0x0800fea9
 800fe2c:	0800fea9 	.word	0x0800fea9
 800fe30:	0800fea9 	.word	0x0800fea9
 800fe34:	0800fe91 	.word	0x0800fe91
 800fe38:	0800fea9 	.word	0x0800fea9
 800fe3c:	0800fea9 	.word	0x0800fea9
 800fe40:	0800fea9 	.word	0x0800fea9
 800fe44:	0800fea9 	.word	0x0800fea9
 800fe48:	0800fea9 	.word	0x0800fea9
 800fe4c:	0800fea9 	.word	0x0800fea9
 800fe50:	0800fea9 	.word	0x0800fea9
 800fe54:	0800fe99 	.word	0x0800fe99
 800fe58:	0800fea9 	.word	0x0800fea9
 800fe5c:	0800fea9 	.word	0x0800fea9
 800fe60:	0800fea9 	.word	0x0800fea9
 800fe64:	0800fea9 	.word	0x0800fea9
 800fe68:	0800fea9 	.word	0x0800fea9
 800fe6c:	0800fea9 	.word	0x0800fea9
 800fe70:	0800fea9 	.word	0x0800fea9
 800fe74:	0800fea1 	.word	0x0800fea1
 800fe78:	2301      	movs	r3, #1
 800fe7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe7e:	e0d6      	b.n	801002e <UART_SetConfig+0x7ae>
 800fe80:	2304      	movs	r3, #4
 800fe82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe86:	e0d2      	b.n	801002e <UART_SetConfig+0x7ae>
 800fe88:	2308      	movs	r3, #8
 800fe8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe8e:	e0ce      	b.n	801002e <UART_SetConfig+0x7ae>
 800fe90:	2310      	movs	r3, #16
 800fe92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe96:	e0ca      	b.n	801002e <UART_SetConfig+0x7ae>
 800fe98:	2320      	movs	r3, #32
 800fe9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe9e:	e0c6      	b.n	801002e <UART_SetConfig+0x7ae>
 800fea0:	2340      	movs	r3, #64	@ 0x40
 800fea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fea6:	e0c2      	b.n	801002e <UART_SetConfig+0x7ae>
 800fea8:	2380      	movs	r3, #128	@ 0x80
 800feaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feae:	e0be      	b.n	801002e <UART_SetConfig+0x7ae>
 800feb0:	40011400 	.word	0x40011400
 800feb4:	58024400 	.word	0x58024400
 800feb8:	40007800 	.word	0x40007800
 800febc:	40007c00 	.word	0x40007c00
 800fec0:	40011800 	.word	0x40011800
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4aad      	ldr	r2, [pc, #692]	@ (8010180 <UART_SetConfig+0x900>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d176      	bne.n	800ffbc <UART_SetConfig+0x73c>
 800fece:	4bad      	ldr	r3, [pc, #692]	@ (8010184 <UART_SetConfig+0x904>)
 800fed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fed6:	2b28      	cmp	r3, #40	@ 0x28
 800fed8:	d86c      	bhi.n	800ffb4 <UART_SetConfig+0x734>
 800feda:	a201      	add	r2, pc, #4	@ (adr r2, 800fee0 <UART_SetConfig+0x660>)
 800fedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee0:	0800ff85 	.word	0x0800ff85
 800fee4:	0800ffb5 	.word	0x0800ffb5
 800fee8:	0800ffb5 	.word	0x0800ffb5
 800feec:	0800ffb5 	.word	0x0800ffb5
 800fef0:	0800ffb5 	.word	0x0800ffb5
 800fef4:	0800ffb5 	.word	0x0800ffb5
 800fef8:	0800ffb5 	.word	0x0800ffb5
 800fefc:	0800ffb5 	.word	0x0800ffb5
 800ff00:	0800ff8d 	.word	0x0800ff8d
 800ff04:	0800ffb5 	.word	0x0800ffb5
 800ff08:	0800ffb5 	.word	0x0800ffb5
 800ff0c:	0800ffb5 	.word	0x0800ffb5
 800ff10:	0800ffb5 	.word	0x0800ffb5
 800ff14:	0800ffb5 	.word	0x0800ffb5
 800ff18:	0800ffb5 	.word	0x0800ffb5
 800ff1c:	0800ffb5 	.word	0x0800ffb5
 800ff20:	0800ff95 	.word	0x0800ff95
 800ff24:	0800ffb5 	.word	0x0800ffb5
 800ff28:	0800ffb5 	.word	0x0800ffb5
 800ff2c:	0800ffb5 	.word	0x0800ffb5
 800ff30:	0800ffb5 	.word	0x0800ffb5
 800ff34:	0800ffb5 	.word	0x0800ffb5
 800ff38:	0800ffb5 	.word	0x0800ffb5
 800ff3c:	0800ffb5 	.word	0x0800ffb5
 800ff40:	0800ff9d 	.word	0x0800ff9d
 800ff44:	0800ffb5 	.word	0x0800ffb5
 800ff48:	0800ffb5 	.word	0x0800ffb5
 800ff4c:	0800ffb5 	.word	0x0800ffb5
 800ff50:	0800ffb5 	.word	0x0800ffb5
 800ff54:	0800ffb5 	.word	0x0800ffb5
 800ff58:	0800ffb5 	.word	0x0800ffb5
 800ff5c:	0800ffb5 	.word	0x0800ffb5
 800ff60:	0800ffa5 	.word	0x0800ffa5
 800ff64:	0800ffb5 	.word	0x0800ffb5
 800ff68:	0800ffb5 	.word	0x0800ffb5
 800ff6c:	0800ffb5 	.word	0x0800ffb5
 800ff70:	0800ffb5 	.word	0x0800ffb5
 800ff74:	0800ffb5 	.word	0x0800ffb5
 800ff78:	0800ffb5 	.word	0x0800ffb5
 800ff7c:	0800ffb5 	.word	0x0800ffb5
 800ff80:	0800ffad 	.word	0x0800ffad
 800ff84:	2301      	movs	r3, #1
 800ff86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8a:	e050      	b.n	801002e <UART_SetConfig+0x7ae>
 800ff8c:	2304      	movs	r3, #4
 800ff8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff92:	e04c      	b.n	801002e <UART_SetConfig+0x7ae>
 800ff94:	2308      	movs	r3, #8
 800ff96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff9a:	e048      	b.n	801002e <UART_SetConfig+0x7ae>
 800ff9c:	2310      	movs	r3, #16
 800ff9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffa2:	e044      	b.n	801002e <UART_SetConfig+0x7ae>
 800ffa4:	2320      	movs	r3, #32
 800ffa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffaa:	e040      	b.n	801002e <UART_SetConfig+0x7ae>
 800ffac:	2340      	movs	r3, #64	@ 0x40
 800ffae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffb2:	e03c      	b.n	801002e <UART_SetConfig+0x7ae>
 800ffb4:	2380      	movs	r3, #128	@ 0x80
 800ffb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffba:	e038      	b.n	801002e <UART_SetConfig+0x7ae>
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4a71      	ldr	r2, [pc, #452]	@ (8010188 <UART_SetConfig+0x908>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d130      	bne.n	8010028 <UART_SetConfig+0x7a8>
 800ffc6:	4b6f      	ldr	r3, [pc, #444]	@ (8010184 <UART_SetConfig+0x904>)
 800ffc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffca:	f003 0307 	and.w	r3, r3, #7
 800ffce:	2b05      	cmp	r3, #5
 800ffd0:	d826      	bhi.n	8010020 <UART_SetConfig+0x7a0>
 800ffd2:	a201      	add	r2, pc, #4	@ (adr r2, 800ffd8 <UART_SetConfig+0x758>)
 800ffd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd8:	0800fff1 	.word	0x0800fff1
 800ffdc:	0800fff9 	.word	0x0800fff9
 800ffe0:	08010001 	.word	0x08010001
 800ffe4:	08010009 	.word	0x08010009
 800ffe8:	08010011 	.word	0x08010011
 800ffec:	08010019 	.word	0x08010019
 800fff0:	2302      	movs	r3, #2
 800fff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fff6:	e01a      	b.n	801002e <UART_SetConfig+0x7ae>
 800fff8:	2304      	movs	r3, #4
 800fffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fffe:	e016      	b.n	801002e <UART_SetConfig+0x7ae>
 8010000:	2308      	movs	r3, #8
 8010002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010006:	e012      	b.n	801002e <UART_SetConfig+0x7ae>
 8010008:	2310      	movs	r3, #16
 801000a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801000e:	e00e      	b.n	801002e <UART_SetConfig+0x7ae>
 8010010:	2320      	movs	r3, #32
 8010012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010016:	e00a      	b.n	801002e <UART_SetConfig+0x7ae>
 8010018:	2340      	movs	r3, #64	@ 0x40
 801001a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801001e:	e006      	b.n	801002e <UART_SetConfig+0x7ae>
 8010020:	2380      	movs	r3, #128	@ 0x80
 8010022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010026:	e002      	b.n	801002e <UART_SetConfig+0x7ae>
 8010028:	2380      	movs	r3, #128	@ 0x80
 801002a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a55      	ldr	r2, [pc, #340]	@ (8010188 <UART_SetConfig+0x908>)
 8010034:	4293      	cmp	r3, r2
 8010036:	f040 80f8 	bne.w	801022a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801003a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801003e:	2b20      	cmp	r3, #32
 8010040:	dc46      	bgt.n	80100d0 <UART_SetConfig+0x850>
 8010042:	2b02      	cmp	r3, #2
 8010044:	db75      	blt.n	8010132 <UART_SetConfig+0x8b2>
 8010046:	3b02      	subs	r3, #2
 8010048:	2b1e      	cmp	r3, #30
 801004a:	d872      	bhi.n	8010132 <UART_SetConfig+0x8b2>
 801004c:	a201      	add	r2, pc, #4	@ (adr r2, 8010054 <UART_SetConfig+0x7d4>)
 801004e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010052:	bf00      	nop
 8010054:	080100d7 	.word	0x080100d7
 8010058:	08010133 	.word	0x08010133
 801005c:	080100df 	.word	0x080100df
 8010060:	08010133 	.word	0x08010133
 8010064:	08010133 	.word	0x08010133
 8010068:	08010133 	.word	0x08010133
 801006c:	080100ef 	.word	0x080100ef
 8010070:	08010133 	.word	0x08010133
 8010074:	08010133 	.word	0x08010133
 8010078:	08010133 	.word	0x08010133
 801007c:	08010133 	.word	0x08010133
 8010080:	08010133 	.word	0x08010133
 8010084:	08010133 	.word	0x08010133
 8010088:	08010133 	.word	0x08010133
 801008c:	080100ff 	.word	0x080100ff
 8010090:	08010133 	.word	0x08010133
 8010094:	08010133 	.word	0x08010133
 8010098:	08010133 	.word	0x08010133
 801009c:	08010133 	.word	0x08010133
 80100a0:	08010133 	.word	0x08010133
 80100a4:	08010133 	.word	0x08010133
 80100a8:	08010133 	.word	0x08010133
 80100ac:	08010133 	.word	0x08010133
 80100b0:	08010133 	.word	0x08010133
 80100b4:	08010133 	.word	0x08010133
 80100b8:	08010133 	.word	0x08010133
 80100bc:	08010133 	.word	0x08010133
 80100c0:	08010133 	.word	0x08010133
 80100c4:	08010133 	.word	0x08010133
 80100c8:	08010133 	.word	0x08010133
 80100cc:	08010125 	.word	0x08010125
 80100d0:	2b40      	cmp	r3, #64	@ 0x40
 80100d2:	d02a      	beq.n	801012a <UART_SetConfig+0x8aa>
 80100d4:	e02d      	b.n	8010132 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80100d6:	f7fc f8b5 	bl	800c244 <HAL_RCCEx_GetD3PCLK1Freq>
 80100da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100dc:	e02f      	b.n	801013e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fc f8c4 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100ec:	e027      	b.n	801013e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100ee:	f107 0318 	add.w	r3, r7, #24
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fc fa10 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100fc:	e01f      	b.n	801013e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100fe:	4b21      	ldr	r3, [pc, #132]	@ (8010184 <UART_SetConfig+0x904>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f003 0320 	and.w	r3, r3, #32
 8010106:	2b00      	cmp	r3, #0
 8010108:	d009      	beq.n	801011e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801010a:	4b1e      	ldr	r3, [pc, #120]	@ (8010184 <UART_SetConfig+0x904>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	08db      	lsrs	r3, r3, #3
 8010110:	f003 0303 	and.w	r3, r3, #3
 8010114:	4a1d      	ldr	r2, [pc, #116]	@ (801018c <UART_SetConfig+0x90c>)
 8010116:	fa22 f303 	lsr.w	r3, r2, r3
 801011a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801011c:	e00f      	b.n	801013e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801011e:	4b1b      	ldr	r3, [pc, #108]	@ (801018c <UART_SetConfig+0x90c>)
 8010120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010122:	e00c      	b.n	801013e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010124:	4b1a      	ldr	r3, [pc, #104]	@ (8010190 <UART_SetConfig+0x910>)
 8010126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010128:	e009      	b.n	801013e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801012a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801012e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010130:	e005      	b.n	801013e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010132:	2300      	movs	r3, #0
 8010134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010136:	2301      	movs	r3, #1
 8010138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801013c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801013e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 81ee 	beq.w	8010522 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801014a:	4a12      	ldr	r2, [pc, #72]	@ (8010194 <UART_SetConfig+0x914>)
 801014c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010150:	461a      	mov	r2, r3
 8010152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010154:	fbb3 f3f2 	udiv	r3, r3, r2
 8010158:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	4613      	mov	r3, r2
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	4413      	add	r3, r2
 8010164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010166:	429a      	cmp	r2, r3
 8010168:	d305      	bcc.n	8010176 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010172:	429a      	cmp	r2, r3
 8010174:	d910      	bls.n	8010198 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010176:	2301      	movs	r3, #1
 8010178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801017c:	e1d1      	b.n	8010522 <UART_SetConfig+0xca2>
 801017e:	bf00      	nop
 8010180:	40011c00 	.word	0x40011c00
 8010184:	58024400 	.word	0x58024400
 8010188:	58000c00 	.word	0x58000c00
 801018c:	03d09000 	.word	0x03d09000
 8010190:	003d0900 	.word	0x003d0900
 8010194:	080173a4 	.word	0x080173a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801019a:	2200      	movs	r2, #0
 801019c:	60bb      	str	r3, [r7, #8]
 801019e:	60fa      	str	r2, [r7, #12]
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101a4:	4ac0      	ldr	r2, [pc, #768]	@ (80104a8 <UART_SetConfig+0xc28>)
 80101a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101aa:	b29b      	uxth	r3, r3
 80101ac:	2200      	movs	r2, #0
 80101ae:	603b      	str	r3, [r7, #0]
 80101b0:	607a      	str	r2, [r7, #4]
 80101b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80101ba:	f7f0 fabd 	bl	8000738 <__aeabi_uldivmod>
 80101be:	4602      	mov	r2, r0
 80101c0:	460b      	mov	r3, r1
 80101c2:	4610      	mov	r0, r2
 80101c4:	4619      	mov	r1, r3
 80101c6:	f04f 0200 	mov.w	r2, #0
 80101ca:	f04f 0300 	mov.w	r3, #0
 80101ce:	020b      	lsls	r3, r1, #8
 80101d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101d4:	0202      	lsls	r2, r0, #8
 80101d6:	6979      	ldr	r1, [r7, #20]
 80101d8:	6849      	ldr	r1, [r1, #4]
 80101da:	0849      	lsrs	r1, r1, #1
 80101dc:	2000      	movs	r0, #0
 80101de:	460c      	mov	r4, r1
 80101e0:	4605      	mov	r5, r0
 80101e2:	eb12 0804 	adds.w	r8, r2, r4
 80101e6:	eb43 0905 	adc.w	r9, r3, r5
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	469a      	mov	sl, r3
 80101f2:	4693      	mov	fp, r2
 80101f4:	4652      	mov	r2, sl
 80101f6:	465b      	mov	r3, fp
 80101f8:	4640      	mov	r0, r8
 80101fa:	4649      	mov	r1, r9
 80101fc:	f7f0 fa9c 	bl	8000738 <__aeabi_uldivmod>
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	4613      	mov	r3, r2
 8010206:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801020a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801020e:	d308      	bcc.n	8010222 <UART_SetConfig+0x9a2>
 8010210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010216:	d204      	bcs.n	8010222 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801021e:	60da      	str	r2, [r3, #12]
 8010220:	e17f      	b.n	8010522 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010222:	2301      	movs	r3, #1
 8010224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010228:	e17b      	b.n	8010522 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	69db      	ldr	r3, [r3, #28]
 801022e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010232:	f040 80bd 	bne.w	80103b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010236:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801023a:	2b20      	cmp	r3, #32
 801023c:	dc48      	bgt.n	80102d0 <UART_SetConfig+0xa50>
 801023e:	2b00      	cmp	r3, #0
 8010240:	db7b      	blt.n	801033a <UART_SetConfig+0xaba>
 8010242:	2b20      	cmp	r3, #32
 8010244:	d879      	bhi.n	801033a <UART_SetConfig+0xaba>
 8010246:	a201      	add	r2, pc, #4	@ (adr r2, 801024c <UART_SetConfig+0x9cc>)
 8010248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801024c:	080102d7 	.word	0x080102d7
 8010250:	080102df 	.word	0x080102df
 8010254:	0801033b 	.word	0x0801033b
 8010258:	0801033b 	.word	0x0801033b
 801025c:	080102e7 	.word	0x080102e7
 8010260:	0801033b 	.word	0x0801033b
 8010264:	0801033b 	.word	0x0801033b
 8010268:	0801033b 	.word	0x0801033b
 801026c:	080102f7 	.word	0x080102f7
 8010270:	0801033b 	.word	0x0801033b
 8010274:	0801033b 	.word	0x0801033b
 8010278:	0801033b 	.word	0x0801033b
 801027c:	0801033b 	.word	0x0801033b
 8010280:	0801033b 	.word	0x0801033b
 8010284:	0801033b 	.word	0x0801033b
 8010288:	0801033b 	.word	0x0801033b
 801028c:	08010307 	.word	0x08010307
 8010290:	0801033b 	.word	0x0801033b
 8010294:	0801033b 	.word	0x0801033b
 8010298:	0801033b 	.word	0x0801033b
 801029c:	0801033b 	.word	0x0801033b
 80102a0:	0801033b 	.word	0x0801033b
 80102a4:	0801033b 	.word	0x0801033b
 80102a8:	0801033b 	.word	0x0801033b
 80102ac:	0801033b 	.word	0x0801033b
 80102b0:	0801033b 	.word	0x0801033b
 80102b4:	0801033b 	.word	0x0801033b
 80102b8:	0801033b 	.word	0x0801033b
 80102bc:	0801033b 	.word	0x0801033b
 80102c0:	0801033b 	.word	0x0801033b
 80102c4:	0801033b 	.word	0x0801033b
 80102c8:	0801033b 	.word	0x0801033b
 80102cc:	0801032d 	.word	0x0801032d
 80102d0:	2b40      	cmp	r3, #64	@ 0x40
 80102d2:	d02e      	beq.n	8010332 <UART_SetConfig+0xab2>
 80102d4:	e031      	b.n	801033a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102d6:	f7fa f917 	bl	800a508 <HAL_RCC_GetPCLK1Freq>
 80102da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80102dc:	e033      	b.n	8010346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102de:	f7fa f929 	bl	800a534 <HAL_RCC_GetPCLK2Freq>
 80102e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80102e4:	e02f      	b.n	8010346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fb ffc0 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80102f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f4:	e027      	b.n	8010346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102f6:	f107 0318 	add.w	r3, r7, #24
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fc f90c 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010304:	e01f      	b.n	8010346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010306:	4b69      	ldr	r3, [pc, #420]	@ (80104ac <UART_SetConfig+0xc2c>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f003 0320 	and.w	r3, r3, #32
 801030e:	2b00      	cmp	r3, #0
 8010310:	d009      	beq.n	8010326 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010312:	4b66      	ldr	r3, [pc, #408]	@ (80104ac <UART_SetConfig+0xc2c>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	08db      	lsrs	r3, r3, #3
 8010318:	f003 0303 	and.w	r3, r3, #3
 801031c:	4a64      	ldr	r2, [pc, #400]	@ (80104b0 <UART_SetConfig+0xc30>)
 801031e:	fa22 f303 	lsr.w	r3, r2, r3
 8010322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010324:	e00f      	b.n	8010346 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010326:	4b62      	ldr	r3, [pc, #392]	@ (80104b0 <UART_SetConfig+0xc30>)
 8010328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801032a:	e00c      	b.n	8010346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801032c:	4b61      	ldr	r3, [pc, #388]	@ (80104b4 <UART_SetConfig+0xc34>)
 801032e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010330:	e009      	b.n	8010346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010338:	e005      	b.n	8010346 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801033a:	2300      	movs	r3, #0
 801033c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801033e:	2301      	movs	r3, #1
 8010340:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010348:	2b00      	cmp	r3, #0
 801034a:	f000 80ea 	beq.w	8010522 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010352:	4a55      	ldr	r2, [pc, #340]	@ (80104a8 <UART_SetConfig+0xc28>)
 8010354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010358:	461a      	mov	r2, r3
 801035a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801035c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010360:	005a      	lsls	r2, r3, #1
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	085b      	lsrs	r3, r3, #1
 8010368:	441a      	add	r2, r3
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010372:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010376:	2b0f      	cmp	r3, #15
 8010378:	d916      	bls.n	80103a8 <UART_SetConfig+0xb28>
 801037a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801037c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010380:	d212      	bcs.n	80103a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010384:	b29b      	uxth	r3, r3
 8010386:	f023 030f 	bic.w	r3, r3, #15
 801038a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801038c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801038e:	085b      	lsrs	r3, r3, #1
 8010390:	b29b      	uxth	r3, r3
 8010392:	f003 0307 	and.w	r3, r3, #7
 8010396:	b29a      	uxth	r2, r3
 8010398:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801039a:	4313      	orrs	r3, r2
 801039c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80103a4:	60da      	str	r2, [r3, #12]
 80103a6:	e0bc      	b.n	8010522 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80103a8:	2301      	movs	r3, #1
 80103aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80103ae:	e0b8      	b.n	8010522 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80103b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80103b4:	2b20      	cmp	r3, #32
 80103b6:	dc4b      	bgt.n	8010450 <UART_SetConfig+0xbd0>
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f2c0 8087 	blt.w	80104cc <UART_SetConfig+0xc4c>
 80103be:	2b20      	cmp	r3, #32
 80103c0:	f200 8084 	bhi.w	80104cc <UART_SetConfig+0xc4c>
 80103c4:	a201      	add	r2, pc, #4	@ (adr r2, 80103cc <UART_SetConfig+0xb4c>)
 80103c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ca:	bf00      	nop
 80103cc:	08010457 	.word	0x08010457
 80103d0:	0801045f 	.word	0x0801045f
 80103d4:	080104cd 	.word	0x080104cd
 80103d8:	080104cd 	.word	0x080104cd
 80103dc:	08010467 	.word	0x08010467
 80103e0:	080104cd 	.word	0x080104cd
 80103e4:	080104cd 	.word	0x080104cd
 80103e8:	080104cd 	.word	0x080104cd
 80103ec:	08010477 	.word	0x08010477
 80103f0:	080104cd 	.word	0x080104cd
 80103f4:	080104cd 	.word	0x080104cd
 80103f8:	080104cd 	.word	0x080104cd
 80103fc:	080104cd 	.word	0x080104cd
 8010400:	080104cd 	.word	0x080104cd
 8010404:	080104cd 	.word	0x080104cd
 8010408:	080104cd 	.word	0x080104cd
 801040c:	08010487 	.word	0x08010487
 8010410:	080104cd 	.word	0x080104cd
 8010414:	080104cd 	.word	0x080104cd
 8010418:	080104cd 	.word	0x080104cd
 801041c:	080104cd 	.word	0x080104cd
 8010420:	080104cd 	.word	0x080104cd
 8010424:	080104cd 	.word	0x080104cd
 8010428:	080104cd 	.word	0x080104cd
 801042c:	080104cd 	.word	0x080104cd
 8010430:	080104cd 	.word	0x080104cd
 8010434:	080104cd 	.word	0x080104cd
 8010438:	080104cd 	.word	0x080104cd
 801043c:	080104cd 	.word	0x080104cd
 8010440:	080104cd 	.word	0x080104cd
 8010444:	080104cd 	.word	0x080104cd
 8010448:	080104cd 	.word	0x080104cd
 801044c:	080104bf 	.word	0x080104bf
 8010450:	2b40      	cmp	r3, #64	@ 0x40
 8010452:	d037      	beq.n	80104c4 <UART_SetConfig+0xc44>
 8010454:	e03a      	b.n	80104cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010456:	f7fa f857 	bl	800a508 <HAL_RCC_GetPCLK1Freq>
 801045a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801045c:	e03c      	b.n	80104d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801045e:	f7fa f869 	bl	800a534 <HAL_RCC_GetPCLK2Freq>
 8010462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010464:	e038      	b.n	80104d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801046a:	4618      	mov	r0, r3
 801046c:	f7fb ff00 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010474:	e030      	b.n	80104d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010476:	f107 0318 	add.w	r3, r7, #24
 801047a:	4618      	mov	r0, r3
 801047c:	f7fc f84c 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010484:	e028      	b.n	80104d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010486:	4b09      	ldr	r3, [pc, #36]	@ (80104ac <UART_SetConfig+0xc2c>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f003 0320 	and.w	r3, r3, #32
 801048e:	2b00      	cmp	r3, #0
 8010490:	d012      	beq.n	80104b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010492:	4b06      	ldr	r3, [pc, #24]	@ (80104ac <UART_SetConfig+0xc2c>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	08db      	lsrs	r3, r3, #3
 8010498:	f003 0303 	and.w	r3, r3, #3
 801049c:	4a04      	ldr	r2, [pc, #16]	@ (80104b0 <UART_SetConfig+0xc30>)
 801049e:	fa22 f303 	lsr.w	r3, r2, r3
 80104a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80104a4:	e018      	b.n	80104d8 <UART_SetConfig+0xc58>
 80104a6:	bf00      	nop
 80104a8:	080173a4 	.word	0x080173a4
 80104ac:	58024400 	.word	0x58024400
 80104b0:	03d09000 	.word	0x03d09000
 80104b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80104b8:	4b24      	ldr	r3, [pc, #144]	@ (801054c <UART_SetConfig+0xccc>)
 80104ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104bc:	e00c      	b.n	80104d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80104be:	4b24      	ldr	r3, [pc, #144]	@ (8010550 <UART_SetConfig+0xcd0>)
 80104c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104c2:	e009      	b.n	80104d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104ca:	e005      	b.n	80104d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80104cc:	2300      	movs	r3, #0
 80104ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80104d0:	2301      	movs	r3, #1
 80104d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80104d6:	bf00      	nop
    }

    if (pclk != 0U)
 80104d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d021      	beq.n	8010522 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e2:	4a1c      	ldr	r2, [pc, #112]	@ (8010554 <UART_SetConfig+0xcd4>)
 80104e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104e8:	461a      	mov	r2, r3
 80104ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	085b      	lsrs	r3, r3, #1
 80104f6:	441a      	add	r2, r3
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010500:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010504:	2b0f      	cmp	r3, #15
 8010506:	d909      	bls.n	801051c <UART_SetConfig+0xc9c>
 8010508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801050a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801050e:	d205      	bcs.n	801051c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010512:	b29a      	uxth	r2, r3
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	60da      	str	r2, [r3, #12]
 801051a:	e002      	b.n	8010522 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801051c:	2301      	movs	r3, #1
 801051e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	2201      	movs	r2, #1
 8010526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2201      	movs	r2, #1
 801052e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2200      	movs	r2, #0
 8010536:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	2200      	movs	r2, #0
 801053c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801053e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010542:	4618      	mov	r0, r3
 8010544:	3748      	adds	r7, #72	@ 0x48
 8010546:	46bd      	mov	sp, r7
 8010548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801054c:	03d09000 	.word	0x03d09000
 8010550:	003d0900 	.word	0x003d0900
 8010554:	080173a4 	.word	0x080173a4

08010558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010564:	f003 0308 	and.w	r3, r3, #8
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00a      	beq.n	8010582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	430a      	orrs	r2, r1
 8010580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010586:	f003 0301 	and.w	r3, r3, #1
 801058a:	2b00      	cmp	r3, #0
 801058c:	d00a      	beq.n	80105a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	430a      	orrs	r2, r1
 80105a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105a8:	f003 0302 	and.w	r3, r3, #2
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00a      	beq.n	80105c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	430a      	orrs	r2, r1
 80105c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ca:	f003 0304 	and.w	r3, r3, #4
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00a      	beq.n	80105e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	430a      	orrs	r2, r1
 80105e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ec:	f003 0310 	and.w	r3, r3, #16
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00a      	beq.n	801060a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	430a      	orrs	r2, r1
 8010608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801060e:	f003 0320 	and.w	r3, r3, #32
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00a      	beq.n	801062c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	430a      	orrs	r2, r1
 801062a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010634:	2b00      	cmp	r3, #0
 8010636:	d01a      	beq.n	801066e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	430a      	orrs	r2, r1
 801064c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010656:	d10a      	bne.n	801066e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	430a      	orrs	r2, r1
 801066c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00a      	beq.n	8010690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	430a      	orrs	r2, r1
 801068e:	605a      	str	r2, [r3, #4]
  }
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b098      	sub	sp, #96	@ 0x60
 80106a0:	af02      	add	r7, sp, #8
 80106a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2200      	movs	r2, #0
 80106a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106ac:	f7f7 fe6a 	bl	8008384 <HAL_GetTick>
 80106b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f003 0308 	and.w	r3, r3, #8
 80106bc:	2b08      	cmp	r3, #8
 80106be:	d12f      	bne.n	8010720 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106c8:	2200      	movs	r2, #0
 80106ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 f88e 	bl	80107f0 <UART_WaitOnFlagUntilTimeout>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d022      	beq.n	8010720 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e2:	e853 3f00 	ldrex	r3, [r3]
 80106e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80106e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	461a      	mov	r2, r3
 80106f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80106fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80106fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010700:	e841 2300 	strex	r3, r2, [r1]
 8010704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010708:	2b00      	cmp	r3, #0
 801070a:	d1e6      	bne.n	80106da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2220      	movs	r2, #32
 8010710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801071c:	2303      	movs	r3, #3
 801071e:	e063      	b.n	80107e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f003 0304 	and.w	r3, r3, #4
 801072a:	2b04      	cmp	r3, #4
 801072c:	d149      	bne.n	80107c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801072e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010732:	9300      	str	r3, [sp, #0]
 8010734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010736:	2200      	movs	r2, #0
 8010738:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 f857 	bl	80107f0 <UART_WaitOnFlagUntilTimeout>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d03c      	beq.n	80107c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010750:	e853 3f00 	ldrex	r3, [r3]
 8010754:	623b      	str	r3, [r7, #32]
   return(result);
 8010756:	6a3b      	ldr	r3, [r7, #32]
 8010758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010766:	633b      	str	r3, [r7, #48]	@ 0x30
 8010768:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801076c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801076e:	e841 2300 	strex	r3, r2, [r1]
 8010772:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1e6      	bne.n	8010748 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3308      	adds	r3, #8
 8010780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	e853 3f00 	ldrex	r3, [r3]
 8010788:	60fb      	str	r3, [r7, #12]
   return(result);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f023 0301 	bic.w	r3, r3, #1
 8010790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	3308      	adds	r3, #8
 8010798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801079a:	61fa      	str	r2, [r7, #28]
 801079c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079e:	69b9      	ldr	r1, [r7, #24]
 80107a0:	69fa      	ldr	r2, [r7, #28]
 80107a2:	e841 2300 	strex	r3, r2, [r1]
 80107a6:	617b      	str	r3, [r7, #20]
   return(result);
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1e5      	bne.n	801077a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2220      	movs	r2, #32
 80107b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107be:	2303      	movs	r3, #3
 80107c0:	e012      	b.n	80107e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2220      	movs	r2, #32
 80107c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2220      	movs	r2, #32
 80107ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2200      	movs	r2, #0
 80107dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80107e6:	2300      	movs	r3, #0
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3758      	adds	r7, #88	@ 0x58
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	60f8      	str	r0, [r7, #12]
 80107f8:	60b9      	str	r1, [r7, #8]
 80107fa:	603b      	str	r3, [r7, #0]
 80107fc:	4613      	mov	r3, r2
 80107fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010800:	e04f      	b.n	80108a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010808:	d04b      	beq.n	80108a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801080a:	f7f7 fdbb 	bl	8008384 <HAL_GetTick>
 801080e:	4602      	mov	r2, r0
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	1ad3      	subs	r3, r2, r3
 8010814:	69ba      	ldr	r2, [r7, #24]
 8010816:	429a      	cmp	r2, r3
 8010818:	d302      	bcc.n	8010820 <UART_WaitOnFlagUntilTimeout+0x30>
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d101      	bne.n	8010824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010820:	2303      	movs	r3, #3
 8010822:	e04e      	b.n	80108c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f003 0304 	and.w	r3, r3, #4
 801082e:	2b00      	cmp	r3, #0
 8010830:	d037      	beq.n	80108a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b80      	cmp	r3, #128	@ 0x80
 8010836:	d034      	beq.n	80108a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	2b40      	cmp	r3, #64	@ 0x40
 801083c:	d031      	beq.n	80108a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	69db      	ldr	r3, [r3, #28]
 8010844:	f003 0308 	and.w	r3, r3, #8
 8010848:	2b08      	cmp	r3, #8
 801084a:	d110      	bne.n	801086e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2208      	movs	r2, #8
 8010852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f000 f839 	bl	80108cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2208      	movs	r2, #8
 801085e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	e029      	b.n	80108c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	69db      	ldr	r3, [r3, #28]
 8010874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801087c:	d111      	bne.n	80108a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f000 f81f 	bl	80108cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2220      	movs	r2, #32
 8010892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2200      	movs	r2, #0
 801089a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801089e:	2303      	movs	r3, #3
 80108a0:	e00f      	b.n	80108c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	69da      	ldr	r2, [r3, #28]
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	4013      	ands	r3, r2
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	bf0c      	ite	eq
 80108b2:	2301      	moveq	r3, #1
 80108b4:	2300      	movne	r3, #0
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	461a      	mov	r2, r3
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d0a0      	beq.n	8010802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108c0:	2300      	movs	r3, #0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
	...

080108cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b095      	sub	sp, #84	@ 0x54
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108dc:	e853 3f00 	ldrex	r3, [r3]
 80108e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80108e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	461a      	mov	r2, r3
 80108f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80108f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80108f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80108fa:	e841 2300 	strex	r3, r2, [r1]
 80108fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010902:	2b00      	cmp	r3, #0
 8010904:	d1e6      	bne.n	80108d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3308      	adds	r3, #8
 801090c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801090e:	6a3b      	ldr	r3, [r7, #32]
 8010910:	e853 3f00 	ldrex	r3, [r3]
 8010914:	61fb      	str	r3, [r7, #28]
   return(result);
 8010916:	69fa      	ldr	r2, [r7, #28]
 8010918:	4b1e      	ldr	r3, [pc, #120]	@ (8010994 <UART_EndRxTransfer+0xc8>)
 801091a:	4013      	ands	r3, r2
 801091c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	3308      	adds	r3, #8
 8010924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801092a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801092c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801092e:	e841 2300 	strex	r3, r2, [r1]
 8010932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1e5      	bne.n	8010906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801093e:	2b01      	cmp	r3, #1
 8010940:	d118      	bne.n	8010974 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	e853 3f00 	ldrex	r3, [r3]
 801094e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	f023 0310 	bic.w	r3, r3, #16
 8010956:	647b      	str	r3, [r7, #68]	@ 0x44
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	461a      	mov	r2, r3
 801095e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010960:	61bb      	str	r3, [r7, #24]
 8010962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010964:	6979      	ldr	r1, [r7, #20]
 8010966:	69ba      	ldr	r2, [r7, #24]
 8010968:	e841 2300 	strex	r3, r2, [r1]
 801096c:	613b      	str	r3, [r7, #16]
   return(result);
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1e6      	bne.n	8010942 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2220      	movs	r2, #32
 8010978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2200      	movs	r2, #0
 8010986:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010988:	bf00      	nop
 801098a:	3754      	adds	r7, #84	@ 0x54
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	effffffe 	.word	0xeffffffe

08010998 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d101      	bne.n	80109ae <HAL_UARTEx_DisableFifoMode+0x16>
 80109aa:	2302      	movs	r3, #2
 80109ac:	e027      	b.n	80109fe <HAL_UARTEx_DisableFifoMode+0x66>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2224      	movs	r2, #36	@ 0x24
 80109ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f022 0201 	bic.w	r2, r2, #1
 80109d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80109dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2220      	movs	r2, #32
 80109f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b084      	sub	sp, #16
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
 8010a12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d101      	bne.n	8010a22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a1e:	2302      	movs	r3, #2
 8010a20:	e02d      	b.n	8010a7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2224      	movs	r2, #36	@ 0x24
 8010a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f022 0201 	bic.w	r2, r2, #1
 8010a48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	683a      	ldr	r2, [r7, #0]
 8010a5a:	430a      	orrs	r2, r1
 8010a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 f850 	bl	8010b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	68fa      	ldr	r2, [r7, #12]
 8010a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2220      	movs	r2, #32
 8010a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a7c:	2300      	movs	r3, #0
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b084      	sub	sp, #16
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d101      	bne.n	8010a9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	e02d      	b.n	8010afa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2224      	movs	r2, #36	@ 0x24
 8010aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f022 0201 	bic.w	r2, r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	683a      	ldr	r2, [r7, #0]
 8010ad6:	430a      	orrs	r2, r1
 8010ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f812 	bl	8010b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2220      	movs	r2, #32
 8010aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2200      	movs	r2, #0
 8010af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010af8:	2300      	movs	r3, #0
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
	...

08010b04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d108      	bne.n	8010b26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b24:	e031      	b.n	8010b8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b26:	2310      	movs	r3, #16
 8010b28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b2a:	2310      	movs	r3, #16
 8010b2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	689b      	ldr	r3, [r3, #8]
 8010b34:	0e5b      	lsrs	r3, r3, #25
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	f003 0307 	and.w	r3, r3, #7
 8010b3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	0f5b      	lsrs	r3, r3, #29
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	f003 0307 	and.w	r3, r3, #7
 8010b4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b4e:	7bbb      	ldrb	r3, [r7, #14]
 8010b50:	7b3a      	ldrb	r2, [r7, #12]
 8010b52:	4911      	ldr	r1, [pc, #68]	@ (8010b98 <UARTEx_SetNbDataToProcess+0x94>)
 8010b54:	5c8a      	ldrb	r2, [r1, r2]
 8010b56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b5a:	7b3a      	ldrb	r2, [r7, #12]
 8010b5c:	490f      	ldr	r1, [pc, #60]	@ (8010b9c <UARTEx_SetNbDataToProcess+0x98>)
 8010b5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	7b7a      	ldrb	r2, [r7, #13]
 8010b70:	4909      	ldr	r1, [pc, #36]	@ (8010b98 <UARTEx_SetNbDataToProcess+0x94>)
 8010b72:	5c8a      	ldrb	r2, [r1, r2]
 8010b74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b78:	7b7a      	ldrb	r2, [r7, #13]
 8010b7a:	4908      	ldr	r1, [pc, #32]	@ (8010b9c <UARTEx_SetNbDataToProcess+0x98>)
 8010b7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010b8a:	bf00      	nop
 8010b8c:	3714      	adds	r7, #20
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr
 8010b96:	bf00      	nop
 8010b98:	080173bc 	.word	0x080173bc
 8010b9c:	080173c4 	.word	0x080173c4

08010ba0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d101      	bne.n	8010bb2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e03c      	b.n	8010c2c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d106      	bne.n	8010bcc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7f7 f8c4 	bl	8007d54 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2202      	movs	r2, #2
 8010bd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f022 0201 	bic.w	r2, r2, #1
 8010be2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 f85b 	bl	8010ca0 <USART_SetConfig>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d101      	bne.n	8010bf4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	e01b      	b.n	8010c2c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	685a      	ldr	r2, [r3, #4]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010c02:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	689a      	ldr	r2, [r3, #8]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010c12:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f042 0201 	orr.w	r2, r2, #1
 8010c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 fddd 	bl	80117e4 <USART_CheckIdleState>
 8010c2a:	4603      	mov	r3, r0
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	603b      	str	r3, [r7, #0]
 8010c40:	4613      	mov	r3, r2
 8010c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8010c44:	e018      	b.n	8010c78 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c4c:	d014      	beq.n	8010c78 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c4e:	f7f7 fb99 	bl	8008384 <HAL_GetTick>
 8010c52:	4602      	mov	r2, r0
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	1ad3      	subs	r3, r2, r3
 8010c58:	69ba      	ldr	r2, [r7, #24]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d302      	bcc.n	8010c64 <USART_WaitOnFlagUntilTimeout+0x30>
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d109      	bne.n	8010c78 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2201      	movs	r2, #1
 8010c68:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010c74:	2303      	movs	r3, #3
 8010c76:	e00f      	b.n	8010c98 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	69da      	ldr	r2, [r3, #28]
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	4013      	ands	r3, r2
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	bf0c      	ite	eq
 8010c88:	2301      	moveq	r3, #1
 8010c8a:	2300      	movne	r3, #0
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	461a      	mov	r2, r3
 8010c90:	79fb      	ldrb	r3, [r7, #7]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d0d7      	beq.n	8010c46 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b08e      	sub	sp, #56	@ 0x38
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	689a      	ldr	r2, [r3, #8]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	431a      	orrs	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	695b      	ldr	r3, [r3, #20]
 8010cc0:	4313      	orrs	r3, r2
 8010cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	4bc9      	ldr	r3, [pc, #804]	@ (8010ff4 <USART_SetConfig+0x354>)
 8010cd0:	4013      	ands	r3, r2
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	6812      	ldr	r2, [r2, #0]
 8010cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010cd8:	430b      	orrs	r3, r1
 8010cda:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8010cdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a1b      	ldr	r3, [r3, #32]
 8010ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	699a      	ldr	r2, [r3, #24]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	69db      	ldr	r3, [r3, #28]
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d02:	4313      	orrs	r3, r2
 8010d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	685a      	ldr	r2, [r3, #4]
 8010d0c:	4bba      	ldr	r3, [pc, #744]	@ (8010ff8 <USART_SetConfig+0x358>)
 8010d0e:	4013      	ands	r3, r2
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	6812      	ldr	r2, [r2, #0]
 8010d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d16:	430b      	orrs	r3, r1
 8010d18:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d20:	f023 010f 	bic.w	r1, r3, #15
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	430a      	orrs	r2, r1
 8010d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4ab1      	ldr	r2, [pc, #708]	@ (8010ffc <USART_SetConfig+0x35c>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d176      	bne.n	8010e28 <USART_SetConfig+0x188>
 8010d3a:	4bb1      	ldr	r3, [pc, #708]	@ (8011000 <USART_SetConfig+0x360>)
 8010d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010d42:	2b28      	cmp	r3, #40	@ 0x28
 8010d44:	d86c      	bhi.n	8010e20 <USART_SetConfig+0x180>
 8010d46:	a201      	add	r2, pc, #4	@ (adr r2, 8010d4c <USART_SetConfig+0xac>)
 8010d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d4c:	08010df1 	.word	0x08010df1
 8010d50:	08010e21 	.word	0x08010e21
 8010d54:	08010e21 	.word	0x08010e21
 8010d58:	08010e21 	.word	0x08010e21
 8010d5c:	08010e21 	.word	0x08010e21
 8010d60:	08010e21 	.word	0x08010e21
 8010d64:	08010e21 	.word	0x08010e21
 8010d68:	08010e21 	.word	0x08010e21
 8010d6c:	08010df9 	.word	0x08010df9
 8010d70:	08010e21 	.word	0x08010e21
 8010d74:	08010e21 	.word	0x08010e21
 8010d78:	08010e21 	.word	0x08010e21
 8010d7c:	08010e21 	.word	0x08010e21
 8010d80:	08010e21 	.word	0x08010e21
 8010d84:	08010e21 	.word	0x08010e21
 8010d88:	08010e21 	.word	0x08010e21
 8010d8c:	08010e01 	.word	0x08010e01
 8010d90:	08010e21 	.word	0x08010e21
 8010d94:	08010e21 	.word	0x08010e21
 8010d98:	08010e21 	.word	0x08010e21
 8010d9c:	08010e21 	.word	0x08010e21
 8010da0:	08010e21 	.word	0x08010e21
 8010da4:	08010e21 	.word	0x08010e21
 8010da8:	08010e21 	.word	0x08010e21
 8010dac:	08010e09 	.word	0x08010e09
 8010db0:	08010e21 	.word	0x08010e21
 8010db4:	08010e21 	.word	0x08010e21
 8010db8:	08010e21 	.word	0x08010e21
 8010dbc:	08010e21 	.word	0x08010e21
 8010dc0:	08010e21 	.word	0x08010e21
 8010dc4:	08010e21 	.word	0x08010e21
 8010dc8:	08010e21 	.word	0x08010e21
 8010dcc:	08010e11 	.word	0x08010e11
 8010dd0:	08010e21 	.word	0x08010e21
 8010dd4:	08010e21 	.word	0x08010e21
 8010dd8:	08010e21 	.word	0x08010e21
 8010ddc:	08010e21 	.word	0x08010e21
 8010de0:	08010e21 	.word	0x08010e21
 8010de4:	08010e21 	.word	0x08010e21
 8010de8:	08010e21 	.word	0x08010e21
 8010dec:	08010e19 	.word	0x08010e19
 8010df0:	2301      	movs	r3, #1
 8010df2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010df6:	e18e      	b.n	8011116 <USART_SetConfig+0x476>
 8010df8:	2302      	movs	r3, #2
 8010dfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010dfe:	e18a      	b.n	8011116 <USART_SetConfig+0x476>
 8010e00:	2304      	movs	r3, #4
 8010e02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e06:	e186      	b.n	8011116 <USART_SetConfig+0x476>
 8010e08:	2308      	movs	r3, #8
 8010e0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e0e:	e182      	b.n	8011116 <USART_SetConfig+0x476>
 8010e10:	2310      	movs	r3, #16
 8010e12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e16:	e17e      	b.n	8011116 <USART_SetConfig+0x476>
 8010e18:	2320      	movs	r3, #32
 8010e1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e1e:	e17a      	b.n	8011116 <USART_SetConfig+0x476>
 8010e20:	2340      	movs	r3, #64	@ 0x40
 8010e22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e26:	e176      	b.n	8011116 <USART_SetConfig+0x476>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	4a75      	ldr	r2, [pc, #468]	@ (8011004 <USART_SetConfig+0x364>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d130      	bne.n	8010e94 <USART_SetConfig+0x1f4>
 8010e32:	4b73      	ldr	r3, [pc, #460]	@ (8011000 <USART_SetConfig+0x360>)
 8010e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e36:	f003 0307 	and.w	r3, r3, #7
 8010e3a:	2b05      	cmp	r3, #5
 8010e3c:	d826      	bhi.n	8010e8c <USART_SetConfig+0x1ec>
 8010e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8010e44 <USART_SetConfig+0x1a4>)
 8010e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e44:	08010e5d 	.word	0x08010e5d
 8010e48:	08010e65 	.word	0x08010e65
 8010e4c:	08010e6d 	.word	0x08010e6d
 8010e50:	08010e75 	.word	0x08010e75
 8010e54:	08010e7d 	.word	0x08010e7d
 8010e58:	08010e85 	.word	0x08010e85
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e62:	e158      	b.n	8011116 <USART_SetConfig+0x476>
 8010e64:	2302      	movs	r3, #2
 8010e66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e6a:	e154      	b.n	8011116 <USART_SetConfig+0x476>
 8010e6c:	2304      	movs	r3, #4
 8010e6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e72:	e150      	b.n	8011116 <USART_SetConfig+0x476>
 8010e74:	2308      	movs	r3, #8
 8010e76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e7a:	e14c      	b.n	8011116 <USART_SetConfig+0x476>
 8010e7c:	2310      	movs	r3, #16
 8010e7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e82:	e148      	b.n	8011116 <USART_SetConfig+0x476>
 8010e84:	2320      	movs	r3, #32
 8010e86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e8a:	e144      	b.n	8011116 <USART_SetConfig+0x476>
 8010e8c:	2340      	movs	r3, #64	@ 0x40
 8010e8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010e92:	e140      	b.n	8011116 <USART_SetConfig+0x476>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	4a5b      	ldr	r2, [pc, #364]	@ (8011008 <USART_SetConfig+0x368>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d130      	bne.n	8010f00 <USART_SetConfig+0x260>
 8010e9e:	4b58      	ldr	r3, [pc, #352]	@ (8011000 <USART_SetConfig+0x360>)
 8010ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ea2:	f003 0307 	and.w	r3, r3, #7
 8010ea6:	2b05      	cmp	r3, #5
 8010ea8:	d826      	bhi.n	8010ef8 <USART_SetConfig+0x258>
 8010eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8010eb0 <USART_SetConfig+0x210>)
 8010eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb0:	08010ec9 	.word	0x08010ec9
 8010eb4:	08010ed1 	.word	0x08010ed1
 8010eb8:	08010ed9 	.word	0x08010ed9
 8010ebc:	08010ee1 	.word	0x08010ee1
 8010ec0:	08010ee9 	.word	0x08010ee9
 8010ec4:	08010ef1 	.word	0x08010ef1
 8010ec8:	2300      	movs	r3, #0
 8010eca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010ece:	e122      	b.n	8011116 <USART_SetConfig+0x476>
 8010ed0:	2302      	movs	r3, #2
 8010ed2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010ed6:	e11e      	b.n	8011116 <USART_SetConfig+0x476>
 8010ed8:	2304      	movs	r3, #4
 8010eda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010ede:	e11a      	b.n	8011116 <USART_SetConfig+0x476>
 8010ee0:	2308      	movs	r3, #8
 8010ee2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010ee6:	e116      	b.n	8011116 <USART_SetConfig+0x476>
 8010ee8:	2310      	movs	r3, #16
 8010eea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010eee:	e112      	b.n	8011116 <USART_SetConfig+0x476>
 8010ef0:	2320      	movs	r3, #32
 8010ef2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010ef6:	e10e      	b.n	8011116 <USART_SetConfig+0x476>
 8010ef8:	2340      	movs	r3, #64	@ 0x40
 8010efa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010efe:	e10a      	b.n	8011116 <USART_SetConfig+0x476>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4a41      	ldr	r2, [pc, #260]	@ (801100c <USART_SetConfig+0x36c>)
 8010f06:	4293      	cmp	r3, r2
 8010f08:	f040 8086 	bne.w	8011018 <USART_SetConfig+0x378>
 8010f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8011000 <USART_SetConfig+0x360>)
 8010f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f14:	2b28      	cmp	r3, #40	@ 0x28
 8010f16:	d87b      	bhi.n	8011010 <USART_SetConfig+0x370>
 8010f18:	a201      	add	r2, pc, #4	@ (adr r2, 8010f20 <USART_SetConfig+0x280>)
 8010f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f1e:	bf00      	nop
 8010f20:	08010fc5 	.word	0x08010fc5
 8010f24:	08011011 	.word	0x08011011
 8010f28:	08011011 	.word	0x08011011
 8010f2c:	08011011 	.word	0x08011011
 8010f30:	08011011 	.word	0x08011011
 8010f34:	08011011 	.word	0x08011011
 8010f38:	08011011 	.word	0x08011011
 8010f3c:	08011011 	.word	0x08011011
 8010f40:	08010fcd 	.word	0x08010fcd
 8010f44:	08011011 	.word	0x08011011
 8010f48:	08011011 	.word	0x08011011
 8010f4c:	08011011 	.word	0x08011011
 8010f50:	08011011 	.word	0x08011011
 8010f54:	08011011 	.word	0x08011011
 8010f58:	08011011 	.word	0x08011011
 8010f5c:	08011011 	.word	0x08011011
 8010f60:	08010fd5 	.word	0x08010fd5
 8010f64:	08011011 	.word	0x08011011
 8010f68:	08011011 	.word	0x08011011
 8010f6c:	08011011 	.word	0x08011011
 8010f70:	08011011 	.word	0x08011011
 8010f74:	08011011 	.word	0x08011011
 8010f78:	08011011 	.word	0x08011011
 8010f7c:	08011011 	.word	0x08011011
 8010f80:	08010fdd 	.word	0x08010fdd
 8010f84:	08011011 	.word	0x08011011
 8010f88:	08011011 	.word	0x08011011
 8010f8c:	08011011 	.word	0x08011011
 8010f90:	08011011 	.word	0x08011011
 8010f94:	08011011 	.word	0x08011011
 8010f98:	08011011 	.word	0x08011011
 8010f9c:	08011011 	.word	0x08011011
 8010fa0:	08010fe5 	.word	0x08010fe5
 8010fa4:	08011011 	.word	0x08011011
 8010fa8:	08011011 	.word	0x08011011
 8010fac:	08011011 	.word	0x08011011
 8010fb0:	08011011 	.word	0x08011011
 8010fb4:	08011011 	.word	0x08011011
 8010fb8:	08011011 	.word	0x08011011
 8010fbc:	08011011 	.word	0x08011011
 8010fc0:	08010fed 	.word	0x08010fed
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010fca:	e0a4      	b.n	8011116 <USART_SetConfig+0x476>
 8010fcc:	2302      	movs	r3, #2
 8010fce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010fd2:	e0a0      	b.n	8011116 <USART_SetConfig+0x476>
 8010fd4:	2304      	movs	r3, #4
 8010fd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010fda:	e09c      	b.n	8011116 <USART_SetConfig+0x476>
 8010fdc:	2308      	movs	r3, #8
 8010fde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010fe2:	e098      	b.n	8011116 <USART_SetConfig+0x476>
 8010fe4:	2310      	movs	r3, #16
 8010fe6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010fea:	e094      	b.n	8011116 <USART_SetConfig+0x476>
 8010fec:	2320      	movs	r3, #32
 8010fee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010ff2:	e090      	b.n	8011116 <USART_SetConfig+0x476>
 8010ff4:	cfff69f3 	.word	0xcfff69f3
 8010ff8:	ffffc0f6 	.word	0xffffc0f6
 8010ffc:	40011000 	.word	0x40011000
 8011000:	58024400 	.word	0x58024400
 8011004:	40004400 	.word	0x40004400
 8011008:	40004800 	.word	0x40004800
 801100c:	40011400 	.word	0x40011400
 8011010:	2340      	movs	r3, #64	@ 0x40
 8011012:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011016:	e07e      	b.n	8011116 <USART_SetConfig+0x476>
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	4ab5      	ldr	r2, [pc, #724]	@ (80112f4 <USART_SetConfig+0x654>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d176      	bne.n	8011110 <USART_SetConfig+0x470>
 8011022:	4bb5      	ldr	r3, [pc, #724]	@ (80112f8 <USART_SetConfig+0x658>)
 8011024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801102a:	2b28      	cmp	r3, #40	@ 0x28
 801102c:	d86c      	bhi.n	8011108 <USART_SetConfig+0x468>
 801102e:	a201      	add	r2, pc, #4	@ (adr r2, 8011034 <USART_SetConfig+0x394>)
 8011030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011034:	080110d9 	.word	0x080110d9
 8011038:	08011109 	.word	0x08011109
 801103c:	08011109 	.word	0x08011109
 8011040:	08011109 	.word	0x08011109
 8011044:	08011109 	.word	0x08011109
 8011048:	08011109 	.word	0x08011109
 801104c:	08011109 	.word	0x08011109
 8011050:	08011109 	.word	0x08011109
 8011054:	080110e1 	.word	0x080110e1
 8011058:	08011109 	.word	0x08011109
 801105c:	08011109 	.word	0x08011109
 8011060:	08011109 	.word	0x08011109
 8011064:	08011109 	.word	0x08011109
 8011068:	08011109 	.word	0x08011109
 801106c:	08011109 	.word	0x08011109
 8011070:	08011109 	.word	0x08011109
 8011074:	080110e9 	.word	0x080110e9
 8011078:	08011109 	.word	0x08011109
 801107c:	08011109 	.word	0x08011109
 8011080:	08011109 	.word	0x08011109
 8011084:	08011109 	.word	0x08011109
 8011088:	08011109 	.word	0x08011109
 801108c:	08011109 	.word	0x08011109
 8011090:	08011109 	.word	0x08011109
 8011094:	080110f1 	.word	0x080110f1
 8011098:	08011109 	.word	0x08011109
 801109c:	08011109 	.word	0x08011109
 80110a0:	08011109 	.word	0x08011109
 80110a4:	08011109 	.word	0x08011109
 80110a8:	08011109 	.word	0x08011109
 80110ac:	08011109 	.word	0x08011109
 80110b0:	08011109 	.word	0x08011109
 80110b4:	080110f9 	.word	0x080110f9
 80110b8:	08011109 	.word	0x08011109
 80110bc:	08011109 	.word	0x08011109
 80110c0:	08011109 	.word	0x08011109
 80110c4:	08011109 	.word	0x08011109
 80110c8:	08011109 	.word	0x08011109
 80110cc:	08011109 	.word	0x08011109
 80110d0:	08011109 	.word	0x08011109
 80110d4:	08011101 	.word	0x08011101
 80110d8:	2301      	movs	r3, #1
 80110da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80110de:	e01a      	b.n	8011116 <USART_SetConfig+0x476>
 80110e0:	2302      	movs	r3, #2
 80110e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80110e6:	e016      	b.n	8011116 <USART_SetConfig+0x476>
 80110e8:	2304      	movs	r3, #4
 80110ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80110ee:	e012      	b.n	8011116 <USART_SetConfig+0x476>
 80110f0:	2308      	movs	r3, #8
 80110f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80110f6:	e00e      	b.n	8011116 <USART_SetConfig+0x476>
 80110f8:	2310      	movs	r3, #16
 80110fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80110fe:	e00a      	b.n	8011116 <USART_SetConfig+0x476>
 8011100:	2320      	movs	r3, #32
 8011102:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011106:	e006      	b.n	8011116 <USART_SetConfig+0x476>
 8011108:	2340      	movs	r3, #64	@ 0x40
 801110a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801110e:	e002      	b.n	8011116 <USART_SetConfig+0x476>
 8011110:	2340      	movs	r3, #64	@ 0x40
 8011112:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 8011116:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801111a:	2b20      	cmp	r3, #32
 801111c:	f200 832f 	bhi.w	801177e <USART_SetConfig+0xade>
 8011120:	a201      	add	r2, pc, #4	@ (adr r2, 8011128 <USART_SetConfig+0x488>)
 8011122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011126:	bf00      	nop
 8011128:	080111ad 	.word	0x080111ad
 801112c:	08011263 	.word	0x08011263
 8011130:	08011323 	.word	0x08011323
 8011134:	0801177f 	.word	0x0801177f
 8011138:	080113dd 	.word	0x080113dd
 801113c:	0801177f 	.word	0x0801177f
 8011140:	0801177f 	.word	0x0801177f
 8011144:	0801177f 	.word	0x0801177f
 8011148:	08011497 	.word	0x08011497
 801114c:	0801177f 	.word	0x0801177f
 8011150:	0801177f 	.word	0x0801177f
 8011154:	0801177f 	.word	0x0801177f
 8011158:	0801177f 	.word	0x0801177f
 801115c:	0801177f 	.word	0x0801177f
 8011160:	0801177f 	.word	0x0801177f
 8011164:	0801177f 	.word	0x0801177f
 8011168:	0801160f 	.word	0x0801160f
 801116c:	0801177f 	.word	0x0801177f
 8011170:	0801177f 	.word	0x0801177f
 8011174:	0801177f 	.word	0x0801177f
 8011178:	0801177f 	.word	0x0801177f
 801117c:	0801177f 	.word	0x0801177f
 8011180:	0801177f 	.word	0x0801177f
 8011184:	0801177f 	.word	0x0801177f
 8011188:	0801177f 	.word	0x0801177f
 801118c:	0801177f 	.word	0x0801177f
 8011190:	0801177f 	.word	0x0801177f
 8011194:	0801177f 	.word	0x0801177f
 8011198:	0801177f 	.word	0x0801177f
 801119c:	0801177f 	.word	0x0801177f
 80111a0:	0801177f 	.word	0x0801177f
 80111a4:	0801177f 	.word	0x0801177f
 80111a8:	080116cd 	.word	0x080116cd
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80111ac:	f7f9 f9ac 	bl	800a508 <HAL_RCC_GetPCLK1Freq>
 80111b0:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d044      	beq.n	8011244 <USART_SetConfig+0x5a4>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d03e      	beq.n	8011240 <USART_SetConfig+0x5a0>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111c6:	2b02      	cmp	r3, #2
 80111c8:	d038      	beq.n	801123c <USART_SetConfig+0x59c>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ce:	2b03      	cmp	r3, #3
 80111d0:	d032      	beq.n	8011238 <USART_SetConfig+0x598>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111d6:	2b04      	cmp	r3, #4
 80111d8:	d02c      	beq.n	8011234 <USART_SetConfig+0x594>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111de:	2b05      	cmp	r3, #5
 80111e0:	d026      	beq.n	8011230 <USART_SetConfig+0x590>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e6:	2b06      	cmp	r3, #6
 80111e8:	d020      	beq.n	801122c <USART_SetConfig+0x58c>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ee:	2b07      	cmp	r3, #7
 80111f0:	d01a      	beq.n	8011228 <USART_SetConfig+0x588>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111f6:	2b08      	cmp	r3, #8
 80111f8:	d014      	beq.n	8011224 <USART_SetConfig+0x584>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111fe:	2b09      	cmp	r3, #9
 8011200:	d00e      	beq.n	8011220 <USART_SetConfig+0x580>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011206:	2b0a      	cmp	r3, #10
 8011208:	d008      	beq.n	801121c <USART_SetConfig+0x57c>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801120e:	2b0b      	cmp	r3, #11
 8011210:	d102      	bne.n	8011218 <USART_SetConfig+0x578>
 8011212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011216:	e016      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011218:	2301      	movs	r3, #1
 801121a:	e014      	b.n	8011246 <USART_SetConfig+0x5a6>
 801121c:	2380      	movs	r3, #128	@ 0x80
 801121e:	e012      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011220:	2340      	movs	r3, #64	@ 0x40
 8011222:	e010      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011224:	2320      	movs	r3, #32
 8011226:	e00e      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011228:	2310      	movs	r3, #16
 801122a:	e00c      	b.n	8011246 <USART_SetConfig+0x5a6>
 801122c:	230c      	movs	r3, #12
 801122e:	e00a      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011230:	230a      	movs	r3, #10
 8011232:	e008      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011234:	2308      	movs	r3, #8
 8011236:	e006      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011238:	2306      	movs	r3, #6
 801123a:	e004      	b.n	8011246 <USART_SetConfig+0x5a6>
 801123c:	2304      	movs	r3, #4
 801123e:	e002      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011240:	2302      	movs	r3, #2
 8011242:	e000      	b.n	8011246 <USART_SetConfig+0x5a6>
 8011244:	2301      	movs	r3, #1
 8011246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011248:	fbb2 f3f3 	udiv	r3, r2, r3
 801124c:	005a      	lsls	r2, r3, #1
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	085b      	lsrs	r3, r3, #1
 8011254:	441a      	add	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	fbb2 f3f3 	udiv	r3, r2, r3
 801125e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011260:	e291      	b.n	8011786 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8011262:	f7f9 f967 	bl	800a534 <HAL_RCC_GetPCLK2Freq>
 8011266:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126c:	2b00      	cmp	r3, #0
 801126e:	d049      	beq.n	8011304 <USART_SetConfig+0x664>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011274:	2b01      	cmp	r3, #1
 8011276:	d043      	beq.n	8011300 <USART_SetConfig+0x660>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801127c:	2b02      	cmp	r3, #2
 801127e:	d03d      	beq.n	80112fc <USART_SetConfig+0x65c>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011284:	2b03      	cmp	r3, #3
 8011286:	d032      	beq.n	80112ee <USART_SetConfig+0x64e>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801128c:	2b04      	cmp	r3, #4
 801128e:	d02c      	beq.n	80112ea <USART_SetConfig+0x64a>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011294:	2b05      	cmp	r3, #5
 8011296:	d026      	beq.n	80112e6 <USART_SetConfig+0x646>
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801129c:	2b06      	cmp	r3, #6
 801129e:	d020      	beq.n	80112e2 <USART_SetConfig+0x642>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112a4:	2b07      	cmp	r3, #7
 80112a6:	d01a      	beq.n	80112de <USART_SetConfig+0x63e>
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ac:	2b08      	cmp	r3, #8
 80112ae:	d014      	beq.n	80112da <USART_SetConfig+0x63a>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112b4:	2b09      	cmp	r3, #9
 80112b6:	d00e      	beq.n	80112d6 <USART_SetConfig+0x636>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112bc:	2b0a      	cmp	r3, #10
 80112be:	d008      	beq.n	80112d2 <USART_SetConfig+0x632>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c4:	2b0b      	cmp	r3, #11
 80112c6:	d102      	bne.n	80112ce <USART_SetConfig+0x62e>
 80112c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80112cc:	e01b      	b.n	8011306 <USART_SetConfig+0x666>
 80112ce:	2301      	movs	r3, #1
 80112d0:	e019      	b.n	8011306 <USART_SetConfig+0x666>
 80112d2:	2380      	movs	r3, #128	@ 0x80
 80112d4:	e017      	b.n	8011306 <USART_SetConfig+0x666>
 80112d6:	2340      	movs	r3, #64	@ 0x40
 80112d8:	e015      	b.n	8011306 <USART_SetConfig+0x666>
 80112da:	2320      	movs	r3, #32
 80112dc:	e013      	b.n	8011306 <USART_SetConfig+0x666>
 80112de:	2310      	movs	r3, #16
 80112e0:	e011      	b.n	8011306 <USART_SetConfig+0x666>
 80112e2:	230c      	movs	r3, #12
 80112e4:	e00f      	b.n	8011306 <USART_SetConfig+0x666>
 80112e6:	230a      	movs	r3, #10
 80112e8:	e00d      	b.n	8011306 <USART_SetConfig+0x666>
 80112ea:	2308      	movs	r3, #8
 80112ec:	e00b      	b.n	8011306 <USART_SetConfig+0x666>
 80112ee:	2306      	movs	r3, #6
 80112f0:	e009      	b.n	8011306 <USART_SetConfig+0x666>
 80112f2:	bf00      	nop
 80112f4:	40011c00 	.word	0x40011c00
 80112f8:	58024400 	.word	0x58024400
 80112fc:	2304      	movs	r3, #4
 80112fe:	e002      	b.n	8011306 <USART_SetConfig+0x666>
 8011300:	2302      	movs	r3, #2
 8011302:	e000      	b.n	8011306 <USART_SetConfig+0x666>
 8011304:	2301      	movs	r3, #1
 8011306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011308:	fbb2 f3f3 	udiv	r3, r2, r3
 801130c:	005a      	lsls	r2, r3, #1
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	085b      	lsrs	r3, r3, #1
 8011314:	441a      	add	r2, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	fbb2 f3f3 	udiv	r3, r2, r3
 801131e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8011320:	e231      	b.n	8011786 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011322:	f107 0318 	add.w	r3, r7, #24
 8011326:	4618      	mov	r0, r3
 8011328:	f7fa ffa2 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 801132c:	69fa      	ldr	r2, [r7, #28]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011332:	2b00      	cmp	r3, #0
 8011334:	d044      	beq.n	80113c0 <USART_SetConfig+0x720>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801133a:	2b01      	cmp	r3, #1
 801133c:	d03e      	beq.n	80113bc <USART_SetConfig+0x71c>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011342:	2b02      	cmp	r3, #2
 8011344:	d038      	beq.n	80113b8 <USART_SetConfig+0x718>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801134a:	2b03      	cmp	r3, #3
 801134c:	d032      	beq.n	80113b4 <USART_SetConfig+0x714>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011352:	2b04      	cmp	r3, #4
 8011354:	d02c      	beq.n	80113b0 <USART_SetConfig+0x710>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801135a:	2b05      	cmp	r3, #5
 801135c:	d026      	beq.n	80113ac <USART_SetConfig+0x70c>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011362:	2b06      	cmp	r3, #6
 8011364:	d020      	beq.n	80113a8 <USART_SetConfig+0x708>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801136a:	2b07      	cmp	r3, #7
 801136c:	d01a      	beq.n	80113a4 <USART_SetConfig+0x704>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011372:	2b08      	cmp	r3, #8
 8011374:	d014      	beq.n	80113a0 <USART_SetConfig+0x700>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801137a:	2b09      	cmp	r3, #9
 801137c:	d00e      	beq.n	801139c <USART_SetConfig+0x6fc>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011382:	2b0a      	cmp	r3, #10
 8011384:	d008      	beq.n	8011398 <USART_SetConfig+0x6f8>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801138a:	2b0b      	cmp	r3, #11
 801138c:	d102      	bne.n	8011394 <USART_SetConfig+0x6f4>
 801138e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011392:	e016      	b.n	80113c2 <USART_SetConfig+0x722>
 8011394:	2301      	movs	r3, #1
 8011396:	e014      	b.n	80113c2 <USART_SetConfig+0x722>
 8011398:	2380      	movs	r3, #128	@ 0x80
 801139a:	e012      	b.n	80113c2 <USART_SetConfig+0x722>
 801139c:	2340      	movs	r3, #64	@ 0x40
 801139e:	e010      	b.n	80113c2 <USART_SetConfig+0x722>
 80113a0:	2320      	movs	r3, #32
 80113a2:	e00e      	b.n	80113c2 <USART_SetConfig+0x722>
 80113a4:	2310      	movs	r3, #16
 80113a6:	e00c      	b.n	80113c2 <USART_SetConfig+0x722>
 80113a8:	230c      	movs	r3, #12
 80113aa:	e00a      	b.n	80113c2 <USART_SetConfig+0x722>
 80113ac:	230a      	movs	r3, #10
 80113ae:	e008      	b.n	80113c2 <USART_SetConfig+0x722>
 80113b0:	2308      	movs	r3, #8
 80113b2:	e006      	b.n	80113c2 <USART_SetConfig+0x722>
 80113b4:	2306      	movs	r3, #6
 80113b6:	e004      	b.n	80113c2 <USART_SetConfig+0x722>
 80113b8:	2304      	movs	r3, #4
 80113ba:	e002      	b.n	80113c2 <USART_SetConfig+0x722>
 80113bc:	2302      	movs	r3, #2
 80113be:	e000      	b.n	80113c2 <USART_SetConfig+0x722>
 80113c0:	2301      	movs	r3, #1
 80113c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80113c6:	005a      	lsls	r2, r3, #1
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	085b      	lsrs	r3, r3, #1
 80113ce:	441a      	add	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80113d8:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80113da:	e1d4      	b.n	8011786 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113dc:	f107 030c 	add.w	r3, r7, #12
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fb f899 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 80113e6:	693a      	ldr	r2, [r7, #16]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d044      	beq.n	801147a <USART_SetConfig+0x7da>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d03e      	beq.n	8011476 <USART_SetConfig+0x7d6>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113fc:	2b02      	cmp	r3, #2
 80113fe:	d038      	beq.n	8011472 <USART_SetConfig+0x7d2>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011404:	2b03      	cmp	r3, #3
 8011406:	d032      	beq.n	801146e <USART_SetConfig+0x7ce>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140c:	2b04      	cmp	r3, #4
 801140e:	d02c      	beq.n	801146a <USART_SetConfig+0x7ca>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011414:	2b05      	cmp	r3, #5
 8011416:	d026      	beq.n	8011466 <USART_SetConfig+0x7c6>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801141c:	2b06      	cmp	r3, #6
 801141e:	d020      	beq.n	8011462 <USART_SetConfig+0x7c2>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011424:	2b07      	cmp	r3, #7
 8011426:	d01a      	beq.n	801145e <USART_SetConfig+0x7be>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801142c:	2b08      	cmp	r3, #8
 801142e:	d014      	beq.n	801145a <USART_SetConfig+0x7ba>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011434:	2b09      	cmp	r3, #9
 8011436:	d00e      	beq.n	8011456 <USART_SetConfig+0x7b6>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801143c:	2b0a      	cmp	r3, #10
 801143e:	d008      	beq.n	8011452 <USART_SetConfig+0x7b2>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011444:	2b0b      	cmp	r3, #11
 8011446:	d102      	bne.n	801144e <USART_SetConfig+0x7ae>
 8011448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801144c:	e016      	b.n	801147c <USART_SetConfig+0x7dc>
 801144e:	2301      	movs	r3, #1
 8011450:	e014      	b.n	801147c <USART_SetConfig+0x7dc>
 8011452:	2380      	movs	r3, #128	@ 0x80
 8011454:	e012      	b.n	801147c <USART_SetConfig+0x7dc>
 8011456:	2340      	movs	r3, #64	@ 0x40
 8011458:	e010      	b.n	801147c <USART_SetConfig+0x7dc>
 801145a:	2320      	movs	r3, #32
 801145c:	e00e      	b.n	801147c <USART_SetConfig+0x7dc>
 801145e:	2310      	movs	r3, #16
 8011460:	e00c      	b.n	801147c <USART_SetConfig+0x7dc>
 8011462:	230c      	movs	r3, #12
 8011464:	e00a      	b.n	801147c <USART_SetConfig+0x7dc>
 8011466:	230a      	movs	r3, #10
 8011468:	e008      	b.n	801147c <USART_SetConfig+0x7dc>
 801146a:	2308      	movs	r3, #8
 801146c:	e006      	b.n	801147c <USART_SetConfig+0x7dc>
 801146e:	2306      	movs	r3, #6
 8011470:	e004      	b.n	801147c <USART_SetConfig+0x7dc>
 8011472:	2304      	movs	r3, #4
 8011474:	e002      	b.n	801147c <USART_SetConfig+0x7dc>
 8011476:	2302      	movs	r3, #2
 8011478:	e000      	b.n	801147c <USART_SetConfig+0x7dc>
 801147a:	2301      	movs	r3, #1
 801147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011480:	005a      	lsls	r2, r3, #1
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	085b      	lsrs	r3, r3, #1
 8011488:	441a      	add	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011492:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8011494:	e177      	b.n	8011786 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011496:	4b8a      	ldr	r3, [pc, #552]	@ (80116c0 <USART_SetConfig+0xa20>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f003 0320 	and.w	r3, r3, #32
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d05d      	beq.n	801155e <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 80114a2:	4b87      	ldr	r3, [pc, #540]	@ (80116c0 <USART_SetConfig+0xa20>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	08db      	lsrs	r3, r3, #3
 80114a8:	f003 0303 	and.w	r3, r3, #3
 80114ac:	4a85      	ldr	r2, [pc, #532]	@ (80116c4 <USART_SetConfig+0xa24>)
 80114ae:	40da      	lsrs	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d044      	beq.n	8011542 <USART_SetConfig+0x8a2>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d03e      	beq.n	801153e <USART_SetConfig+0x89e>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114c4:	2b02      	cmp	r3, #2
 80114c6:	d038      	beq.n	801153a <USART_SetConfig+0x89a>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114cc:	2b03      	cmp	r3, #3
 80114ce:	d032      	beq.n	8011536 <USART_SetConfig+0x896>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114d4:	2b04      	cmp	r3, #4
 80114d6:	d02c      	beq.n	8011532 <USART_SetConfig+0x892>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114dc:	2b05      	cmp	r3, #5
 80114de:	d026      	beq.n	801152e <USART_SetConfig+0x88e>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114e4:	2b06      	cmp	r3, #6
 80114e6:	d020      	beq.n	801152a <USART_SetConfig+0x88a>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114ec:	2b07      	cmp	r3, #7
 80114ee:	d01a      	beq.n	8011526 <USART_SetConfig+0x886>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114f4:	2b08      	cmp	r3, #8
 80114f6:	d014      	beq.n	8011522 <USART_SetConfig+0x882>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114fc:	2b09      	cmp	r3, #9
 80114fe:	d00e      	beq.n	801151e <USART_SetConfig+0x87e>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011504:	2b0a      	cmp	r3, #10
 8011506:	d008      	beq.n	801151a <USART_SetConfig+0x87a>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801150c:	2b0b      	cmp	r3, #11
 801150e:	d102      	bne.n	8011516 <USART_SetConfig+0x876>
 8011510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011514:	e016      	b.n	8011544 <USART_SetConfig+0x8a4>
 8011516:	2301      	movs	r3, #1
 8011518:	e014      	b.n	8011544 <USART_SetConfig+0x8a4>
 801151a:	2380      	movs	r3, #128	@ 0x80
 801151c:	e012      	b.n	8011544 <USART_SetConfig+0x8a4>
 801151e:	2340      	movs	r3, #64	@ 0x40
 8011520:	e010      	b.n	8011544 <USART_SetConfig+0x8a4>
 8011522:	2320      	movs	r3, #32
 8011524:	e00e      	b.n	8011544 <USART_SetConfig+0x8a4>
 8011526:	2310      	movs	r3, #16
 8011528:	e00c      	b.n	8011544 <USART_SetConfig+0x8a4>
 801152a:	230c      	movs	r3, #12
 801152c:	e00a      	b.n	8011544 <USART_SetConfig+0x8a4>
 801152e:	230a      	movs	r3, #10
 8011530:	e008      	b.n	8011544 <USART_SetConfig+0x8a4>
 8011532:	2308      	movs	r3, #8
 8011534:	e006      	b.n	8011544 <USART_SetConfig+0x8a4>
 8011536:	2306      	movs	r3, #6
 8011538:	e004      	b.n	8011544 <USART_SetConfig+0x8a4>
 801153a:	2304      	movs	r3, #4
 801153c:	e002      	b.n	8011544 <USART_SetConfig+0x8a4>
 801153e:	2302      	movs	r3, #2
 8011540:	e000      	b.n	8011544 <USART_SetConfig+0x8a4>
 8011542:	2301      	movs	r3, #1
 8011544:	fbb2 f3f3 	udiv	r3, r2, r3
 8011548:	005a      	lsls	r2, r3, #1
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	085b      	lsrs	r3, r3, #1
 8011550:	441a      	add	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	fbb2 f3f3 	udiv	r3, r2, r3
 801155a:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 801155c:	e113      	b.n	8011786 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011562:	2b00      	cmp	r3, #0
 8011564:	d044      	beq.n	80115f0 <USART_SetConfig+0x950>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801156a:	2b01      	cmp	r3, #1
 801156c:	d03e      	beq.n	80115ec <USART_SetConfig+0x94c>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011572:	2b02      	cmp	r3, #2
 8011574:	d038      	beq.n	80115e8 <USART_SetConfig+0x948>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801157a:	2b03      	cmp	r3, #3
 801157c:	d032      	beq.n	80115e4 <USART_SetConfig+0x944>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011582:	2b04      	cmp	r3, #4
 8011584:	d02c      	beq.n	80115e0 <USART_SetConfig+0x940>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801158a:	2b05      	cmp	r3, #5
 801158c:	d026      	beq.n	80115dc <USART_SetConfig+0x93c>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011592:	2b06      	cmp	r3, #6
 8011594:	d020      	beq.n	80115d8 <USART_SetConfig+0x938>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801159a:	2b07      	cmp	r3, #7
 801159c:	d01a      	beq.n	80115d4 <USART_SetConfig+0x934>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115a2:	2b08      	cmp	r3, #8
 80115a4:	d014      	beq.n	80115d0 <USART_SetConfig+0x930>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115aa:	2b09      	cmp	r3, #9
 80115ac:	d00e      	beq.n	80115cc <USART_SetConfig+0x92c>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115b2:	2b0a      	cmp	r3, #10
 80115b4:	d008      	beq.n	80115c8 <USART_SetConfig+0x928>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115ba:	2b0b      	cmp	r3, #11
 80115bc:	d102      	bne.n	80115c4 <USART_SetConfig+0x924>
 80115be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80115c2:	e016      	b.n	80115f2 <USART_SetConfig+0x952>
 80115c4:	2301      	movs	r3, #1
 80115c6:	e014      	b.n	80115f2 <USART_SetConfig+0x952>
 80115c8:	2380      	movs	r3, #128	@ 0x80
 80115ca:	e012      	b.n	80115f2 <USART_SetConfig+0x952>
 80115cc:	2340      	movs	r3, #64	@ 0x40
 80115ce:	e010      	b.n	80115f2 <USART_SetConfig+0x952>
 80115d0:	2320      	movs	r3, #32
 80115d2:	e00e      	b.n	80115f2 <USART_SetConfig+0x952>
 80115d4:	2310      	movs	r3, #16
 80115d6:	e00c      	b.n	80115f2 <USART_SetConfig+0x952>
 80115d8:	230c      	movs	r3, #12
 80115da:	e00a      	b.n	80115f2 <USART_SetConfig+0x952>
 80115dc:	230a      	movs	r3, #10
 80115de:	e008      	b.n	80115f2 <USART_SetConfig+0x952>
 80115e0:	2308      	movs	r3, #8
 80115e2:	e006      	b.n	80115f2 <USART_SetConfig+0x952>
 80115e4:	2306      	movs	r3, #6
 80115e6:	e004      	b.n	80115f2 <USART_SetConfig+0x952>
 80115e8:	2304      	movs	r3, #4
 80115ea:	e002      	b.n	80115f2 <USART_SetConfig+0x952>
 80115ec:	2302      	movs	r3, #2
 80115ee:	e000      	b.n	80115f2 <USART_SetConfig+0x952>
 80115f0:	2301      	movs	r3, #1
 80115f2:	4a34      	ldr	r2, [pc, #208]	@ (80116c4 <USART_SetConfig+0xa24>)
 80115f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80115f8:	005a      	lsls	r2, r3, #1
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	085b      	lsrs	r3, r3, #1
 8011600:	441a      	add	r2, r3
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	fbb2 f3f3 	udiv	r3, r2, r3
 801160a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801160c:	e0bb      	b.n	8011786 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011612:	2b00      	cmp	r3, #0
 8011614:	d044      	beq.n	80116a0 <USART_SetConfig+0xa00>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801161a:	2b01      	cmp	r3, #1
 801161c:	d03e      	beq.n	801169c <USART_SetConfig+0x9fc>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011622:	2b02      	cmp	r3, #2
 8011624:	d038      	beq.n	8011698 <USART_SetConfig+0x9f8>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801162a:	2b03      	cmp	r3, #3
 801162c:	d032      	beq.n	8011694 <USART_SetConfig+0x9f4>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011632:	2b04      	cmp	r3, #4
 8011634:	d02c      	beq.n	8011690 <USART_SetConfig+0x9f0>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801163a:	2b05      	cmp	r3, #5
 801163c:	d026      	beq.n	801168c <USART_SetConfig+0x9ec>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011642:	2b06      	cmp	r3, #6
 8011644:	d020      	beq.n	8011688 <USART_SetConfig+0x9e8>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164a:	2b07      	cmp	r3, #7
 801164c:	d01a      	beq.n	8011684 <USART_SetConfig+0x9e4>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011652:	2b08      	cmp	r3, #8
 8011654:	d014      	beq.n	8011680 <USART_SetConfig+0x9e0>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801165a:	2b09      	cmp	r3, #9
 801165c:	d00e      	beq.n	801167c <USART_SetConfig+0x9dc>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011662:	2b0a      	cmp	r3, #10
 8011664:	d008      	beq.n	8011678 <USART_SetConfig+0x9d8>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166a:	2b0b      	cmp	r3, #11
 801166c:	d102      	bne.n	8011674 <USART_SetConfig+0x9d4>
 801166e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011672:	e016      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011674:	2301      	movs	r3, #1
 8011676:	e014      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011678:	2380      	movs	r3, #128	@ 0x80
 801167a:	e012      	b.n	80116a2 <USART_SetConfig+0xa02>
 801167c:	2340      	movs	r3, #64	@ 0x40
 801167e:	e010      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011680:	2320      	movs	r3, #32
 8011682:	e00e      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011684:	2310      	movs	r3, #16
 8011686:	e00c      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011688:	230c      	movs	r3, #12
 801168a:	e00a      	b.n	80116a2 <USART_SetConfig+0xa02>
 801168c:	230a      	movs	r3, #10
 801168e:	e008      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011690:	2308      	movs	r3, #8
 8011692:	e006      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011694:	2306      	movs	r3, #6
 8011696:	e004      	b.n	80116a2 <USART_SetConfig+0xa02>
 8011698:	2304      	movs	r3, #4
 801169a:	e002      	b.n	80116a2 <USART_SetConfig+0xa02>
 801169c:	2302      	movs	r3, #2
 801169e:	e000      	b.n	80116a2 <USART_SetConfig+0xa02>
 80116a0:	2301      	movs	r3, #1
 80116a2:	4a09      	ldr	r2, [pc, #36]	@ (80116c8 <USART_SetConfig+0xa28>)
 80116a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80116a8:	005a      	lsls	r2, r3, #1
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	085b      	lsrs	r3, r3, #1
 80116b0:	441a      	add	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80116ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80116bc:	e063      	b.n	8011786 <USART_SetConfig+0xae6>
 80116be:	bf00      	nop
 80116c0:	58024400 	.word	0x58024400
 80116c4:	03d09000 	.word	0x03d09000
 80116c8:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d044      	beq.n	801175e <USART_SetConfig+0xabe>
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d03e      	beq.n	801175a <USART_SetConfig+0xaba>
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	d038      	beq.n	8011756 <USART_SetConfig+0xab6>
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	d032      	beq.n	8011752 <USART_SetConfig+0xab2>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116f0:	2b04      	cmp	r3, #4
 80116f2:	d02c      	beq.n	801174e <USART_SetConfig+0xaae>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116f8:	2b05      	cmp	r3, #5
 80116fa:	d026      	beq.n	801174a <USART_SetConfig+0xaaa>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011700:	2b06      	cmp	r3, #6
 8011702:	d020      	beq.n	8011746 <USART_SetConfig+0xaa6>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011708:	2b07      	cmp	r3, #7
 801170a:	d01a      	beq.n	8011742 <USART_SetConfig+0xaa2>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011710:	2b08      	cmp	r3, #8
 8011712:	d014      	beq.n	801173e <USART_SetConfig+0xa9e>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011718:	2b09      	cmp	r3, #9
 801171a:	d00e      	beq.n	801173a <USART_SetConfig+0xa9a>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011720:	2b0a      	cmp	r3, #10
 8011722:	d008      	beq.n	8011736 <USART_SetConfig+0xa96>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011728:	2b0b      	cmp	r3, #11
 801172a:	d102      	bne.n	8011732 <USART_SetConfig+0xa92>
 801172c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011730:	e016      	b.n	8011760 <USART_SetConfig+0xac0>
 8011732:	2301      	movs	r3, #1
 8011734:	e014      	b.n	8011760 <USART_SetConfig+0xac0>
 8011736:	2380      	movs	r3, #128	@ 0x80
 8011738:	e012      	b.n	8011760 <USART_SetConfig+0xac0>
 801173a:	2340      	movs	r3, #64	@ 0x40
 801173c:	e010      	b.n	8011760 <USART_SetConfig+0xac0>
 801173e:	2320      	movs	r3, #32
 8011740:	e00e      	b.n	8011760 <USART_SetConfig+0xac0>
 8011742:	2310      	movs	r3, #16
 8011744:	e00c      	b.n	8011760 <USART_SetConfig+0xac0>
 8011746:	230c      	movs	r3, #12
 8011748:	e00a      	b.n	8011760 <USART_SetConfig+0xac0>
 801174a:	230a      	movs	r3, #10
 801174c:	e008      	b.n	8011760 <USART_SetConfig+0xac0>
 801174e:	2308      	movs	r3, #8
 8011750:	e006      	b.n	8011760 <USART_SetConfig+0xac0>
 8011752:	2306      	movs	r3, #6
 8011754:	e004      	b.n	8011760 <USART_SetConfig+0xac0>
 8011756:	2304      	movs	r3, #4
 8011758:	e002      	b.n	8011760 <USART_SetConfig+0xac0>
 801175a:	2302      	movs	r3, #2
 801175c:	e000      	b.n	8011760 <USART_SetConfig+0xac0>
 801175e:	2301      	movs	r3, #1
 8011760:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011764:	fbb2 f3f3 	udiv	r3, r2, r3
 8011768:	005a      	lsls	r2, r3, #1
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	085b      	lsrs	r3, r3, #1
 8011770:	441a      	add	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	fbb2 f3f3 	udiv	r3, r2, r3
 801177a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801177c:	e003      	b.n	8011786 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 801177e:	2301      	movs	r3, #1
 8011780:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 8011784:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	2b0f      	cmp	r3, #15
 801178a:	d916      	bls.n	80117ba <USART_SetConfig+0xb1a>
 801178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801178e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011792:	d212      	bcs.n	80117ba <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011796:	b29b      	uxth	r3, r3
 8011798:	f023 030f 	bic.w	r3, r3, #15
 801179c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801179e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a0:	085b      	lsrs	r3, r3, #1
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	f003 0307 	and.w	r3, r3, #7
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80117ac:	4313      	orrs	r3, r2
 80117ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80117b6:	60da      	str	r2, [r3, #12]
 80117b8:	e002      	b.n	80117c0 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 80117ba:	2301      	movs	r3, #1
 80117bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2201      	movs	r2, #1
 80117c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2201      	movs	r2, #1
 80117ca:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2200      	movs	r2, #0
 80117d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 80117d8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3738      	adds	r7, #56	@ 0x38
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af02      	add	r7, sp, #8
 80117ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80117f2:	f7f6 fdc7 	bl	8008384 <HAL_GetTick>
 80117f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f003 0308 	and.w	r3, r3, #8
 8011802:	2b08      	cmp	r3, #8
 8011804:	d10e      	bne.n	8011824 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2200      	movs	r2, #0
 8011810:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f7ff fa0d 	bl	8010c34 <USART_WaitOnFlagUntilTimeout>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d001      	beq.n	8011824 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011820:	2303      	movs	r3, #3
 8011822:	e01e      	b.n	8011862 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f003 0304 	and.w	r3, r3, #4
 801182e:	2b04      	cmp	r3, #4
 8011830:	d10e      	bne.n	8011850 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2200      	movs	r2, #0
 801183c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7ff f9f7 	bl	8010c34 <USART_WaitOnFlagUntilTimeout>
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d001      	beq.n	8011850 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801184c:	2303      	movs	r3, #3
 801184e:	e008      	b.n	8011862 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2201      	movs	r2, #1
 8011854:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 801186a:	b480      	push	{r7}
 801186c:	b085      	sub	sp, #20
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011878:	2b01      	cmp	r3, #1
 801187a:	d101      	bne.n	8011880 <HAL_USARTEx_EnableSlaveMode+0x16>
 801187c:	2302      	movs	r3, #2
 801187e:	e043      	b.n	8011908 <HAL_USARTEx_EnableSlaveMode+0x9e>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2201      	movs	r2, #1
 8011884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2202      	movs	r2, #2
 801188c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f022 0201 	bic.w	r2, r2, #1
 80118a6:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	685a      	ldr	r2, [r3, #4]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80118b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	689a      	ldr	r2, [r3, #8]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80118c6:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	685a      	ldr	r2, [r3, #4]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f042 0201 	orr.w	r2, r2, #1
 80118d6:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2201      	movs	r2, #1
 80118e4:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2201      	movs	r2, #1
 80118ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f042 0201 	orr.w	r2, r2, #1
 80118fc:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3714      	adds	r7, #20
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 8011914:	b480      	push	{r7}
 8011916:	b085      	sub	sp, #20
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011924:	2b01      	cmp	r3, #1
 8011926:	d101      	bne.n	801192c <HAL_USARTEx_ConfigNSS+0x18>
 8011928:	2302      	movs	r3, #2
 801192a:	e02a      	b.n	8011982 <HAL_USARTEx_ConfigNSS+0x6e>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2201      	movs	r2, #1
 8011930:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2202      	movs	r2, #2
 8011938:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f022 0201 	bic.w	r2, r2, #1
 8011952:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	f023 0108 	bic.w	r1, r3, #8
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	683a      	ldr	r2, [r7, #0]
 8011964:	430a      	orrs	r2, r1
 8011966:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2201      	movs	r2, #1
 8011974:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2200      	movs	r2, #0
 801197c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011980:	2300      	movs	r3, #0
}
 8011982:	4618      	mov	r0, r3
 8011984:	3714      	adds	r7, #20
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr

0801198e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 801198e:	b480      	push	{r7}
 8011990:	b085      	sub	sp, #20
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801199c:	2b01      	cmp	r3, #1
 801199e:	d101      	bne.n	80119a4 <HAL_USARTEx_DisableFifoMode+0x16>
 80119a0:	2302      	movs	r3, #2
 80119a2:	e027      	b.n	80119f4 <HAL_USARTEx_DisableFifoMode+0x66>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2201      	movs	r2, #1
 80119a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2202      	movs	r2, #2
 80119b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f022 0201 	bic.w	r2, r2, #1
 80119ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80119d2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2200      	movs	r2, #0
 80119d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2201      	movs	r2, #1
 80119e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d101      	bne.n	8011a18 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8011a14:	2302      	movs	r3, #2
 8011a16:	e02d      	b.n	8011a74 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2202      	movs	r2, #2
 8011a24:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f022 0201 	bic.w	r2, r2, #1
 8011a3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	689b      	ldr	r3, [r3, #8]
 8011a46:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	683a      	ldr	r2, [r7, #0]
 8011a50:	430a      	orrs	r2, r1
 8011a52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 f84f 	bl	8011af8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	68fa      	ldr	r2, [r7, #12]
 8011a60:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2201      	movs	r2, #1
 8011a66:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d101      	bne.n	8011a94 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8011a90:	2302      	movs	r3, #2
 8011a92:	e02d      	b.n	8011af0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2201      	movs	r2, #1
 8011a98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2202      	movs	r2, #2
 8011aa0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f022 0201 	bic.w	r2, r2, #1
 8011aba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	689b      	ldr	r3, [r3, #8]
 8011ac2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	683a      	ldr	r2, [r7, #0]
 8011acc:	430a      	orrs	r2, r1
 8011ace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 f811 	bl	8011af8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011aee:	2300      	movs	r3, #0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d106      	bne.n	8011b16 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011b14:	e02f      	b.n	8011b76 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011b16:	2310      	movs	r3, #16
 8011b18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011b1a:	2310      	movs	r3, #16
 8011b1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8011b24:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	f003 0307 	and.w	r3, r3, #7
 8011b2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8011b34:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	f003 0307 	and.w	r3, r3, #7
 8011b3c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	7b3a      	ldrb	r2, [r7, #12]
 8011b42:	4910      	ldr	r1, [pc, #64]	@ (8011b84 <USARTEx_SetNbDataToProcess+0x8c>)
 8011b44:	5c8a      	ldrb	r2, [r1, r2]
 8011b46:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8011b4a:	7b3a      	ldrb	r2, [r7, #12]
 8011b4c:	490e      	ldr	r1, [pc, #56]	@ (8011b88 <USARTEx_SetNbDataToProcess+0x90>)
 8011b4e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b5a:	7bfb      	ldrb	r3, [r7, #15]
 8011b5c:	7b7a      	ldrb	r2, [r7, #13]
 8011b5e:	4909      	ldr	r1, [pc, #36]	@ (8011b84 <USARTEx_SetNbDataToProcess+0x8c>)
 8011b60:	5c8a      	ldrb	r2, [r1, r2]
 8011b62:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8011b66:	7b7a      	ldrb	r2, [r7, #13]
 8011b68:	4907      	ldr	r1, [pc, #28]	@ (8011b88 <USARTEx_SetNbDataToProcess+0x90>)
 8011b6a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8011b76:	bf00      	nop
 8011b78:	3714      	adds	r7, #20
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop
 8011b84:	080173cc 	.word	0x080173cc
 8011b88:	080173d4 	.word	0x080173d4

08011b8c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011b8c:	b084      	sub	sp, #16
 8011b8e:	b480      	push	{r7}
 8011b90:	b085      	sub	sp, #20
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	f107 001c 	add.w	r0, r7, #28
 8011b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011ba2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011ba4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011ba6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8011baa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8011bae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8011bb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	685a      	ldr	r2, [r3, #4]
 8011bbe:	4b07      	ldr	r3, [pc, #28]	@ (8011bdc <SDMMC_Init+0x50>)
 8011bc0:	4013      	ands	r3, r2
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	431a      	orrs	r2, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3714      	adds	r7, #20
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	b004      	add	sp, #16
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	ffc02c00 	.word	0xffc02c00

08011be0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	370c      	adds	r7, #12
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011bfa:	b480      	push	{r7}
 8011bfc:	b083      	sub	sp, #12
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8011c0e:	2300      	movs	r3, #0
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f043 0203 	orr.w	r2, r3, #3
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	370c      	adds	r7, #12
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr

08011c3e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011c3e:	b480      	push	{r7}
 8011c40:	b083      	sub	sp, #12
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f003 0303 	and.w	r3, r3, #3
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	370c      	adds	r7, #12
 8011c52:	46bd      	mov	sp, r7
 8011c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c58:	4770      	bx	lr
	...

08011c5c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b085      	sub	sp, #20
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c7a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011c80:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011c86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c88:	68fa      	ldr	r2, [r7, #12]
 8011c8a:	4313      	orrs	r3, r2
 8011c8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	68da      	ldr	r2, [r3, #12]
 8011c92:	4b06      	ldr	r3, [pc, #24]	@ (8011cac <SDMMC_SendCommand+0x50>)
 8011c94:	4013      	ands	r3, r2
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	431a      	orrs	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011c9e:	2300      	movs	r3, #0
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3714      	adds	r7, #20
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr
 8011cac:	fffee0c0 	.word	0xfffee0c0

08011cb0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b083      	sub	sp, #12
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	691b      	ldr	r3, [r3, #16]
 8011cbc:	b2db      	uxtb	r3, r3
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	370c      	adds	r7, #12
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc8:	4770      	bx	lr

08011cca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011cca:	b480      	push	{r7}
 8011ccc:	b085      	sub	sp, #20
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
 8011cd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	3314      	adds	r3, #20
 8011cd8:	461a      	mov	r2, r3
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	4413      	add	r3, r2
 8011cde:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3714      	adds	r7, #20
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b085      	sub	sp, #20
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	685a      	ldr	r2, [r3, #4]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d16:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011d1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011d22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	4313      	orrs	r3, r2
 8011d28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	431a      	orrs	r2, r3
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8011d3a:	2300      	movs	r3, #0

}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3714      	adds	r7, #20
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b088      	sub	sp, #32
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011d56:	2310      	movs	r3, #16
 8011d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d60:	2300      	movs	r3, #0
 8011d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011d68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d6a:	f107 0308 	add.w	r3, r7, #8
 8011d6e:	4619      	mov	r1, r3
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7ff ff73 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011d7a:	2110      	movs	r1, #16
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f000 fa5f 	bl	8012240 <SDMMC_GetCmdResp1>
 8011d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d84:	69fb      	ldr	r3, [r7, #28]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3720      	adds	r7, #32
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b088      	sub	sp, #32
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
 8011d96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011d9c:	2311      	movs	r3, #17
 8011d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011da6:	2300      	movs	r3, #0
 8011da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011dae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011db0:	f107 0308 	add.w	r3, r7, #8
 8011db4:	4619      	mov	r1, r3
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7ff ff50 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011dc0:	2111      	movs	r1, #17
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f000 fa3c 	bl	8012240 <SDMMC_GetCmdResp1>
 8011dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dca:	69fb      	ldr	r3, [r7, #28]
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3720      	adds	r7, #32
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b088      	sub	sp, #32
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011de2:	2312      	movs	r3, #18
 8011de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dec:	2300      	movs	r3, #0
 8011dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011df4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011df6:	f107 0308 	add.w	r3, r7, #8
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f7ff ff2d 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011e06:	2112      	movs	r1, #18
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f000 fa19 	bl	8012240 <SDMMC_GetCmdResp1>
 8011e0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e10:	69fb      	ldr	r3, [r7, #28]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3720      	adds	r7, #32
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}

08011e1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011e1a:	b580      	push	{r7, lr}
 8011e1c:	b088      	sub	sp, #32
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
 8011e22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011e28:	2318      	movs	r3, #24
 8011e2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e32:	2300      	movs	r3, #0
 8011e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011e3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e3c:	f107 0308 	add.w	r3, r7, #8
 8011e40:	4619      	mov	r1, r3
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f7ff ff0a 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011e4c:	2118      	movs	r1, #24
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 f9f6 	bl	8012240 <SDMMC_GetCmdResp1>
 8011e54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e56:	69fb      	ldr	r3, [r7, #28]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3720      	adds	r7, #32
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b088      	sub	sp, #32
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011e6e:	2319      	movs	r3, #25
 8011e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011e80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e82:	f107 0308 	add.w	r3, r7, #8
 8011e86:	4619      	mov	r1, r3
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7ff fee7 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011e92:	2119      	movs	r1, #25
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f000 f9d3 	bl	8012240 <SDMMC_GetCmdResp1>
 8011e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e9c:	69fb      	ldr	r3, [r7, #28]
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3720      	adds	r7, #32
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
	...

08011ea8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b088      	sub	sp, #32
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011eb4:	230c      	movs	r3, #12
 8011eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011ec6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ee0:	f107 0308 	add.w	r3, r7, #8
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7ff feb8 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011eec:	4a0b      	ldr	r2, [pc, #44]	@ (8011f1c <SDMMC_CmdStopTransfer+0x74>)
 8011eee:	210c      	movs	r1, #12
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f9a5 	bl	8012240 <SDMMC_GetCmdResp1>
 8011ef6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011f0a:	d101      	bne.n	8011f10 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011f10:	69fb      	ldr	r3, [r7, #28]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3720      	adds	r7, #32
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	05f5e100 	.word	0x05f5e100

08011f20 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b088      	sub	sp, #32
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011f2e:	2307      	movs	r3, #7
 8011f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011f40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f42:	f107 0308 	add.w	r3, r7, #8
 8011f46:	4619      	mov	r1, r3
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7ff fe87 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011f52:	2107      	movs	r1, #7
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 f973 	bl	8012240 <SDMMC_GetCmdResp1>
 8011f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f5c:	69fb      	ldr	r3, [r7, #28]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3720      	adds	r7, #32
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}

08011f66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011f66:	b580      	push	{r7, lr}
 8011f68:	b088      	sub	sp, #32
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011f72:	2300      	movs	r3, #0
 8011f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011f76:	2300      	movs	r3, #0
 8011f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f84:	f107 0308 	add.w	r3, r7, #8
 8011f88:	4619      	mov	r1, r3
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7ff fe66 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f000 fb97 	bl	80126c4 <SDMMC_GetCmdError>
 8011f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f98:	69fb      	ldr	r3, [r7, #28]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3720      	adds	r7, #32
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b088      	sub	sp, #32
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011faa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8011fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011fb0:	2308      	movs	r3, #8
 8011fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011fb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011fc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fc4:	f107 0308 	add.w	r3, r7, #8
 8011fc8:	4619      	mov	r1, r3
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7ff fe46 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 fb29 	bl	8012628 <SDMMC_GetCmdResp7>
 8011fd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fd8:	69fb      	ldr	r3, [r7, #28]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3720      	adds	r7, #32
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}

08011fe2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011fe2:	b580      	push	{r7, lr}
 8011fe4:	b088      	sub	sp, #32
 8011fe6:	af00      	add	r7, sp, #0
 8011fe8:	6078      	str	r0, [r7, #4]
 8011fea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011ff0:	2337      	movs	r3, #55	@ 0x37
 8011ff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012004:	f107 0308 	add.w	r3, r7, #8
 8012008:	4619      	mov	r1, r3
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7ff fe26 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012014:	2137      	movs	r1, #55	@ 0x37
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 f912 	bl	8012240 <SDMMC_GetCmdResp1>
 801201c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801201e:	69fb      	ldr	r3, [r7, #28]
}
 8012020:	4618      	mov	r0, r3
 8012022:	3720      	adds	r7, #32
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b088      	sub	sp, #32
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012036:	2329      	movs	r3, #41	@ 0x29
 8012038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801203a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801203e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012040:	2300      	movs	r3, #0
 8012042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801204a:	f107 0308 	add.w	r3, r7, #8
 801204e:	4619      	mov	r1, r3
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f7ff fe03 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 fa2e 	bl	80124b8 <SDMMC_GetCmdResp3>
 801205c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801205e:	69fb      	ldr	r3, [r7, #28]
}
 8012060:	4618      	mov	r0, r3
 8012062:	3720      	adds	r7, #32
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b088      	sub	sp, #32
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012076:	2306      	movs	r3, #6
 8012078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801207a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801207e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012080:	2300      	movs	r3, #0
 8012082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801208a:	f107 0308 	add.w	r3, r7, #8
 801208e:	4619      	mov	r1, r3
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7ff fde3 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012096:	f241 3288 	movw	r2, #5000	@ 0x1388
 801209a:	2106      	movs	r1, #6
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f000 f8cf 	bl	8012240 <SDMMC_GetCmdResp1>
 80120a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120a4:	69fb      	ldr	r3, [r7, #28]
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3720      	adds	r7, #32
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b088      	sub	sp, #32
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80120b6:	2300      	movs	r3, #0
 80120b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80120ba:	2333      	movs	r3, #51	@ 0x33
 80120bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80120c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120c4:	2300      	movs	r3, #0
 80120c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80120cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120ce:	f107 0308 	add.w	r3, r7, #8
 80120d2:	4619      	mov	r1, r3
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7ff fdc1 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80120da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80120de:	2133      	movs	r1, #51	@ 0x33
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 f8ad 	bl	8012240 <SDMMC_GetCmdResp1>
 80120e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120e8:	69fb      	ldr	r3, [r7, #28]
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3720      	adds	r7, #32
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b088      	sub	sp, #32
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80120fa:	2300      	movs	r3, #0
 80120fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80120fe:	2302      	movs	r3, #2
 8012100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012102:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801210c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012110:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012112:	f107 0308 	add.w	r3, r7, #8
 8012116:	4619      	mov	r1, r3
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff fd9f 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 f980 	bl	8012424 <SDMMC_GetCmdResp2>
 8012124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012126:	69fb      	ldr	r3, [r7, #28]
}
 8012128:	4618      	mov	r0, r3
 801212a:	3720      	adds	r7, #32
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b088      	sub	sp, #32
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801213e:	2309      	movs	r3, #9
 8012140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012142:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012148:	2300      	movs	r3, #0
 801214a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801214c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012152:	f107 0308 	add.w	r3, r7, #8
 8012156:	4619      	mov	r1, r3
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff fd7f 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f000 f960 	bl	8012424 <SDMMC_GetCmdResp2>
 8012164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012166:	69fb      	ldr	r3, [r7, #28]
}
 8012168:	4618      	mov	r0, r3
 801216a:	3720      	adds	r7, #32
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b088      	sub	sp, #32
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801217a:	2300      	movs	r3, #0
 801217c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801217e:	2303      	movs	r3, #3
 8012180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012182:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012188:	2300      	movs	r3, #0
 801218a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801218c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012190:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012192:	f107 0308 	add.w	r3, r7, #8
 8012196:	4619      	mov	r1, r3
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f7ff fd5f 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	2103      	movs	r1, #3
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 f9c8 	bl	8012538 <SDMMC_GetCmdResp6>
 80121a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121aa:	69fb      	ldr	r3, [r7, #28]
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3720      	adds	r7, #32
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b088      	sub	sp, #32
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80121c2:	230d      	movs	r3, #13
 80121c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80121ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121cc:	2300      	movs	r3, #0
 80121ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80121d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121d6:	f107 0308 	add.w	r3, r7, #8
 80121da:	4619      	mov	r1, r3
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff fd3d 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80121e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80121e6:	210d      	movs	r1, #13
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f000 f829 	bl	8012240 <SDMMC_GetCmdResp1>
 80121ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121f0:	69fb      	ldr	r3, [r7, #28]
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3720      	adds	r7, #32
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}

080121fa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80121fa:	b580      	push	{r7, lr}
 80121fc:	b088      	sub	sp, #32
 80121fe:	af00      	add	r7, sp, #0
 8012200:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012202:	2300      	movs	r3, #0
 8012204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012206:	230d      	movs	r3, #13
 8012208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801220a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801220e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012210:	2300      	movs	r3, #0
 8012212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012218:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801221a:	f107 0308 	add.w	r3, r7, #8
 801221e:	4619      	mov	r1, r3
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff fd1b 	bl	8011c5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012226:	f241 3288 	movw	r2, #5000	@ 0x1388
 801222a:	210d      	movs	r1, #13
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 f807 	bl	8012240 <SDMMC_GetCmdResp1>
 8012232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012234:	69fb      	ldr	r3, [r7, #28]
}
 8012236:	4618      	mov	r0, r3
 8012238:	3720      	adds	r7, #32
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
	...

08012240 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b088      	sub	sp, #32
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	460b      	mov	r3, r1
 801224a:	607a      	str	r2, [r7, #4]
 801224c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801224e:	4b70      	ldr	r3, [pc, #448]	@ (8012410 <SDMMC_GetCmdResp1+0x1d0>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	4a70      	ldr	r2, [pc, #448]	@ (8012414 <SDMMC_GetCmdResp1+0x1d4>)
 8012254:	fba2 2303 	umull	r2, r3, r2, r3
 8012258:	0a5a      	lsrs	r2, r3, #9
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	fb02 f303 	mul.w	r3, r2, r3
 8012260:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	1e5a      	subs	r2, r3, #1
 8012266:	61fa      	str	r2, [r7, #28]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d102      	bne.n	8012272 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801226c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012270:	e0c9      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012276:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012278:	69ba      	ldr	r2, [r7, #24]
 801227a:	4b67      	ldr	r3, [pc, #412]	@ (8012418 <SDMMC_GetCmdResp1+0x1d8>)
 801227c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801227e:	2b00      	cmp	r3, #0
 8012280:	d0ef      	beq.n	8012262 <SDMMC_GetCmdResp1+0x22>
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1ea      	bne.n	8012262 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012290:	f003 0304 	and.w	r3, r3, #4
 8012294:	2b00      	cmp	r3, #0
 8012296:	d004      	beq.n	80122a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2204      	movs	r2, #4
 801229c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801229e:	2304      	movs	r3, #4
 80122a0:	e0b1      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d004      	beq.n	80122b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2201      	movs	r2, #1
 80122b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122b4:	2301      	movs	r3, #1
 80122b6:	e0a6      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	4a58      	ldr	r2, [pc, #352]	@ (801241c <SDMMC_GetCmdResp1+0x1dc>)
 80122bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f7ff fcf6 	bl	8011cb0 <SDMMC_GetCommandResponse>
 80122c4:	4603      	mov	r3, r0
 80122c6:	461a      	mov	r2, r3
 80122c8:	7afb      	ldrb	r3, [r7, #11]
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d001      	beq.n	80122d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122ce:	2301      	movs	r3, #1
 80122d0:	e099      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80122d2:	2100      	movs	r1, #0
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f7ff fcf8 	bl	8011cca <SDMMC_GetResponse>
 80122da:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80122dc:	697a      	ldr	r2, [r7, #20]
 80122de:	4b50      	ldr	r3, [pc, #320]	@ (8012420 <SDMMC_GetCmdResp1+0x1e0>)
 80122e0:	4013      	ands	r3, r2
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d101      	bne.n	80122ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80122e6:	2300      	movs	r3, #0
 80122e8:	e08d      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	da02      	bge.n	80122f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80122f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80122f4:	e087      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012300:	2340      	movs	r3, #64	@ 0x40
 8012302:	e080      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801230e:	2380      	movs	r3, #128	@ 0x80
 8012310:	e079      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801231c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012320:	e071      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801232c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012330:	e069      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012338:	2b00      	cmp	r3, #0
 801233a:	d002      	beq.n	8012342 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801233c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012340:	e061      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012348:	2b00      	cmp	r3, #0
 801234a:	d002      	beq.n	8012352 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801234c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012350:	e059      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801235c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012360:	e051      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012368:	2b00      	cmp	r3, #0
 801236a:	d002      	beq.n	8012372 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801236c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012370:	e049      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012378:	2b00      	cmp	r3, #0
 801237a:	d002      	beq.n	8012382 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801237c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012380:	e041      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801238c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012390:	e039      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012398:	2b00      	cmp	r3, #0
 801239a:	d002      	beq.n	80123a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801239c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80123a0:	e031      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80123ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80123b0:	e029      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d002      	beq.n	80123c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80123bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80123c0:	e021      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80123cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80123d0:	e019      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d002      	beq.n	80123e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80123dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80123e0:	e011      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d002      	beq.n	80123f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80123ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80123f0:	e009      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	f003 0308 	and.w	r3, r3, #8
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80123fc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8012400:	e001      	b.n	8012406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012402:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8012406:	4618      	mov	r0, r3
 8012408:	3720      	adds	r7, #32
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	24000158 	.word	0x24000158
 8012414:	10624dd3 	.word	0x10624dd3
 8012418:	00200045 	.word	0x00200045
 801241c:	002000c5 	.word	0x002000c5
 8012420:	fdffe008 	.word	0xfdffe008

08012424 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801242c:	4b1f      	ldr	r3, [pc, #124]	@ (80124ac <SDMMC_GetCmdResp2+0x88>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4a1f      	ldr	r2, [pc, #124]	@ (80124b0 <SDMMC_GetCmdResp2+0x8c>)
 8012432:	fba2 2303 	umull	r2, r3, r2, r3
 8012436:	0a5b      	lsrs	r3, r3, #9
 8012438:	f241 3288 	movw	r2, #5000	@ 0x1388
 801243c:	fb02 f303 	mul.w	r3, r2, r3
 8012440:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	1e5a      	subs	r2, r3, #1
 8012446:	60fa      	str	r2, [r7, #12]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d102      	bne.n	8012452 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801244c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012450:	e026      	b.n	80124a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012456:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801245e:	2b00      	cmp	r3, #0
 8012460:	d0ef      	beq.n	8012442 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012468:	2b00      	cmp	r3, #0
 801246a:	d1ea      	bne.n	8012442 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012470:	f003 0304 	and.w	r3, r3, #4
 8012474:	2b00      	cmp	r3, #0
 8012476:	d004      	beq.n	8012482 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2204      	movs	r2, #4
 801247c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801247e:	2304      	movs	r3, #4
 8012480:	e00e      	b.n	80124a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012486:	f003 0301 	and.w	r3, r3, #1
 801248a:	2b00      	cmp	r3, #0
 801248c:	d004      	beq.n	8012498 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2201      	movs	r2, #1
 8012492:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012494:	2301      	movs	r3, #1
 8012496:	e003      	b.n	80124a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	4a06      	ldr	r2, [pc, #24]	@ (80124b4 <SDMMC_GetCmdResp2+0x90>)
 801249c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801249e:	2300      	movs	r3, #0
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr
 80124ac:	24000158 	.word	0x24000158
 80124b0:	10624dd3 	.word	0x10624dd3
 80124b4:	002000c5 	.word	0x002000c5

080124b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80124c0:	4b1a      	ldr	r3, [pc, #104]	@ (801252c <SDMMC_GetCmdResp3+0x74>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	4a1a      	ldr	r2, [pc, #104]	@ (8012530 <SDMMC_GetCmdResp3+0x78>)
 80124c6:	fba2 2303 	umull	r2, r3, r2, r3
 80124ca:	0a5b      	lsrs	r3, r3, #9
 80124cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80124d0:	fb02 f303 	mul.w	r3, r2, r3
 80124d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	1e5a      	subs	r2, r3, #1
 80124da:	60fa      	str	r2, [r7, #12]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d102      	bne.n	80124e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80124e4:	e01b      	b.n	801251e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80124ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d0ef      	beq.n	80124d6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1ea      	bne.n	80124d6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012504:	f003 0304 	and.w	r3, r3, #4
 8012508:	2b00      	cmp	r3, #0
 801250a:	d004      	beq.n	8012516 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2204      	movs	r2, #4
 8012510:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012512:	2304      	movs	r3, #4
 8012514:	e003      	b.n	801251e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4a06      	ldr	r2, [pc, #24]	@ (8012534 <SDMMC_GetCmdResp3+0x7c>)
 801251a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801251c:	2300      	movs	r3, #0
}
 801251e:	4618      	mov	r0, r3
 8012520:	3714      	adds	r7, #20
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop
 801252c:	24000158 	.word	0x24000158
 8012530:	10624dd3 	.word	0x10624dd3
 8012534:	002000c5 	.word	0x002000c5

08012538 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b088      	sub	sp, #32
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	460b      	mov	r3, r1
 8012542:	607a      	str	r2, [r7, #4]
 8012544:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012546:	4b35      	ldr	r3, [pc, #212]	@ (801261c <SDMMC_GetCmdResp6+0xe4>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4a35      	ldr	r2, [pc, #212]	@ (8012620 <SDMMC_GetCmdResp6+0xe8>)
 801254c:	fba2 2303 	umull	r2, r3, r2, r3
 8012550:	0a5b      	lsrs	r3, r3, #9
 8012552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012556:	fb02 f303 	mul.w	r3, r2, r3
 801255a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	1e5a      	subs	r2, r3, #1
 8012560:	61fa      	str	r2, [r7, #28]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d102      	bne.n	801256c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012566:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801256a:	e052      	b.n	8012612 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012570:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012572:	69bb      	ldr	r3, [r7, #24]
 8012574:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012578:	2b00      	cmp	r3, #0
 801257a:	d0ef      	beq.n	801255c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012582:	2b00      	cmp	r3, #0
 8012584:	d1ea      	bne.n	801255c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801258a:	f003 0304 	and.w	r3, r3, #4
 801258e:	2b00      	cmp	r3, #0
 8012590:	d004      	beq.n	801259c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	2204      	movs	r2, #4
 8012596:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012598:	2304      	movs	r3, #4
 801259a:	e03a      	b.n	8012612 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125a0:	f003 0301 	and.w	r3, r3, #1
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d004      	beq.n	80125b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2201      	movs	r2, #1
 80125ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125ae:	2301      	movs	r3, #1
 80125b0:	e02f      	b.n	8012612 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f7ff fb7c 	bl	8011cb0 <SDMMC_GetCommandResponse>
 80125b8:	4603      	mov	r3, r0
 80125ba:	461a      	mov	r2, r3
 80125bc:	7afb      	ldrb	r3, [r7, #11]
 80125be:	4293      	cmp	r3, r2
 80125c0:	d001      	beq.n	80125c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125c2:	2301      	movs	r3, #1
 80125c4:	e025      	b.n	8012612 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	4a16      	ldr	r2, [pc, #88]	@ (8012624 <SDMMC_GetCmdResp6+0xec>)
 80125ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80125cc:	2100      	movs	r1, #0
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	f7ff fb7b 	bl	8011cca <SDMMC_GetResponse>
 80125d4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d106      	bne.n	80125ee <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	0c1b      	lsrs	r3, r3, #16
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80125ea:	2300      	movs	r3, #0
 80125ec:	e011      	b.n	8012612 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d002      	beq.n	80125fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80125f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80125fc:	e009      	b.n	8012612 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012604:	2b00      	cmp	r3, #0
 8012606:	d002      	beq.n	801260e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801260c:	e001      	b.n	8012612 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801260e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8012612:	4618      	mov	r0, r3
 8012614:	3720      	adds	r7, #32
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	24000158 	.word	0x24000158
 8012620:	10624dd3 	.word	0x10624dd3
 8012624:	002000c5 	.word	0x002000c5

08012628 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012628:	b480      	push	{r7}
 801262a:	b085      	sub	sp, #20
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012630:	4b22      	ldr	r3, [pc, #136]	@ (80126bc <SDMMC_GetCmdResp7+0x94>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4a22      	ldr	r2, [pc, #136]	@ (80126c0 <SDMMC_GetCmdResp7+0x98>)
 8012636:	fba2 2303 	umull	r2, r3, r2, r3
 801263a:	0a5b      	lsrs	r3, r3, #9
 801263c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012640:	fb02 f303 	mul.w	r3, r2, r3
 8012644:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	1e5a      	subs	r2, r3, #1
 801264a:	60fa      	str	r2, [r7, #12]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d102      	bne.n	8012656 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012650:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012654:	e02c      	b.n	80126b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801265a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8012662:	2b00      	cmp	r3, #0
 8012664:	d0ef      	beq.n	8012646 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801266c:	2b00      	cmp	r3, #0
 801266e:	d1ea      	bne.n	8012646 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012674:	f003 0304 	and.w	r3, r3, #4
 8012678:	2b00      	cmp	r3, #0
 801267a:	d004      	beq.n	8012686 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2204      	movs	r2, #4
 8012680:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012682:	2304      	movs	r3, #4
 8012684:	e014      	b.n	80126b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801268a:	f003 0301 	and.w	r3, r3, #1
 801268e:	2b00      	cmp	r3, #0
 8012690:	d004      	beq.n	801269c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2201      	movs	r2, #1
 8012696:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012698:	2301      	movs	r3, #1
 801269a:	e009      	b.n	80126b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d002      	beq.n	80126ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2240      	movs	r2, #64	@ 0x40
 80126ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80126ae:	2300      	movs	r3, #0

}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3714      	adds	r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr
 80126bc:	24000158 	.word	0x24000158
 80126c0:	10624dd3 	.word	0x10624dd3

080126c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126cc:	4b11      	ldr	r3, [pc, #68]	@ (8012714 <SDMMC_GetCmdError+0x50>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a11      	ldr	r2, [pc, #68]	@ (8012718 <SDMMC_GetCmdError+0x54>)
 80126d2:	fba2 2303 	umull	r2, r3, r2, r3
 80126d6:	0a5b      	lsrs	r3, r3, #9
 80126d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80126dc:	fb02 f303 	mul.w	r3, r2, r3
 80126e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	1e5a      	subs	r2, r3, #1
 80126e6:	60fa      	str	r2, [r7, #12]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d102      	bne.n	80126f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80126f0:	e009      	b.n	8012706 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d0f1      	beq.n	80126e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4a06      	ldr	r2, [pc, #24]	@ (801271c <SDMMC_GetCmdError+0x58>)
 8012702:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3714      	adds	r7, #20
 801270a:	46bd      	mov	sp, r7
 801270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop
 8012714:	24000158 	.word	0x24000158
 8012718:	10624dd3 	.word	0x10624dd3
 801271c:	002000c5 	.word	0x002000c5

08012720 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012724:	4904      	ldr	r1, [pc, #16]	@ (8012738 <MX_FATFS_Init+0x18>)
 8012726:	4805      	ldr	r0, [pc, #20]	@ (801273c <MX_FATFS_Init+0x1c>)
 8012728:	f000 f9e4 	bl	8012af4 <FATFS_LinkDriver>
 801272c:	4603      	mov	r3, r0
 801272e:	461a      	mov	r2, r3
 8012730:	4b03      	ldr	r3, [pc, #12]	@ (8012740 <MX_FATFS_Init+0x20>)
 8012732:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012734:	bf00      	nop
 8012736:	bd80      	pop	{r7, pc}
 8012738:	240019c0 	.word	0x240019c0
 801273c:	080173dc 	.word	0x080173dc
 8012740:	240019bc 	.word	0x240019bc

08012744 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801274a:	2300      	movs	r3, #0
 801274c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801274e:	f000 f879 	bl	8012844 <BSP_SD_IsDetected>
 8012752:	4603      	mov	r3, r0
 8012754:	2b01      	cmp	r3, #1
 8012756:	d001      	beq.n	801275c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012758:	2302      	movs	r3, #2
 801275a:	e012      	b.n	8012782 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801275c:	480b      	ldr	r0, [pc, #44]	@ (801278c <BSP_SD_Init+0x48>)
 801275e:	f7fa fae5 	bl	800cd2c <HAL_SD_Init>
 8012762:	4603      	mov	r3, r0
 8012764:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012766:	79fb      	ldrb	r3, [r7, #7]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d109      	bne.n	8012780 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801276c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8012770:	4806      	ldr	r0, [pc, #24]	@ (801278c <BSP_SD_Init+0x48>)
 8012772:	f7fb f9a1 	bl	800dab8 <HAL_SD_ConfigWideBusOperation>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d001      	beq.n	8012780 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801277c:	2301      	movs	r3, #1
 801277e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012780:	79fb      	ldrb	r3, [r7, #7]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3708      	adds	r7, #8
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	2400152c 	.word	0x2400152c

08012790 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b088      	sub	sp, #32
 8012794:	af02      	add	r7, sp, #8
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801279e:	2300      	movs	r3, #0
 80127a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	9300      	str	r3, [sp, #0]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	68ba      	ldr	r2, [r7, #8]
 80127aa:	68f9      	ldr	r1, [r7, #12]
 80127ac:	4806      	ldr	r0, [pc, #24]	@ (80127c8 <BSP_SD_ReadBlocks+0x38>)
 80127ae:	f7fa fbdd 	bl	800cf6c <HAL_SD_ReadBlocks>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d001      	beq.n	80127bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80127b8:	2301      	movs	r3, #1
 80127ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80127bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3718      	adds	r7, #24
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	2400152c 	.word	0x2400152c

080127cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b088      	sub	sp, #32
 80127d0:	af02      	add	r7, sp, #8
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	60b9      	str	r1, [r7, #8]
 80127d6:	607a      	str	r2, [r7, #4]
 80127d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80127da:	2300      	movs	r3, #0
 80127dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	9300      	str	r3, [sp, #0]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	68ba      	ldr	r2, [r7, #8]
 80127e6:	68f9      	ldr	r1, [r7, #12]
 80127e8:	4806      	ldr	r0, [pc, #24]	@ (8012804 <BSP_SD_WriteBlocks+0x38>)
 80127ea:	f7fa fd49 	bl	800d280 <HAL_SD_WriteBlocks>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d001      	beq.n	80127f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80127f4:	2301      	movs	r3, #1
 80127f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80127f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3718      	adds	r7, #24
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	2400152c 	.word	0x2400152c

08012808 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801280c:	4805      	ldr	r0, [pc, #20]	@ (8012824 <BSP_SD_GetCardState+0x1c>)
 801280e:	f7fb fa65 	bl	800dcdc <HAL_SD_GetCardState>
 8012812:	4603      	mov	r3, r0
 8012814:	2b04      	cmp	r3, #4
 8012816:	bf14      	ite	ne
 8012818:	2301      	movne	r3, #1
 801281a:	2300      	moveq	r3, #0
 801281c:	b2db      	uxtb	r3, r3
}
 801281e:	4618      	mov	r0, r3
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	2400152c 	.word	0x2400152c

08012828 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012830:	6879      	ldr	r1, [r7, #4]
 8012832:	4803      	ldr	r0, [pc, #12]	@ (8012840 <BSP_SD_GetCardInfo+0x18>)
 8012834:	f7fb f914 	bl	800da60 <HAL_SD_GetCardInfo>
}
 8012838:	bf00      	nop
 801283a:	3708      	adds	r7, #8
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	2400152c 	.word	0x2400152c

08012844 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801284a:	2301      	movs	r3, #1
 801284c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801284e:	f000 f80b 	bl	8012868 <BSP_PlatformIsDetected>
 8012852:	4603      	mov	r3, r0
 8012854:	2b00      	cmp	r3, #0
 8012856:	d101      	bne.n	801285c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012858:	2300      	movs	r3, #0
 801285a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801285c:	79fb      	ldrb	r3, [r7, #7]
 801285e:	b2db      	uxtb	r3, r3
}
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801286e:	2301      	movs	r3, #1
 8012870:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012872:	2180      	movs	r1, #128	@ 0x80
 8012874:	4806      	ldr	r0, [pc, #24]	@ (8012890 <BSP_PlatformIsDetected+0x28>)
 8012876:	f7f6 f8b9 	bl	80089ec <HAL_GPIO_ReadPin>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d001      	beq.n	8012884 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8012880:	2300      	movs	r3, #0
 8012882:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012884:	79fb      	ldrb	r3, [r7, #7]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3708      	adds	r7, #8
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	58020800 	.word	0x58020800

08012894 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	4603      	mov	r3, r0
 801289c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801289e:	4b0b      	ldr	r3, [pc, #44]	@ (80128cc <SD_CheckStatus+0x38>)
 80128a0:	2201      	movs	r2, #1
 80128a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80128a4:	f7ff ffb0 	bl	8012808 <BSP_SD_GetCardState>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d107      	bne.n	80128be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80128ae:	4b07      	ldr	r3, [pc, #28]	@ (80128cc <SD_CheckStatus+0x38>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	f023 0301 	bic.w	r3, r3, #1
 80128b8:	b2da      	uxtb	r2, r3
 80128ba:	4b04      	ldr	r3, [pc, #16]	@ (80128cc <SD_CheckStatus+0x38>)
 80128bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80128be:	4b03      	ldr	r3, [pc, #12]	@ (80128cc <SD_CheckStatus+0x38>)
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	b2db      	uxtb	r3, r3
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	24000185 	.word	0x24000185

080128d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	4603      	mov	r3, r0
 80128d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80128da:	4b0b      	ldr	r3, [pc, #44]	@ (8012908 <SD_initialize+0x38>)
 80128dc:	2201      	movs	r2, #1
 80128de:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80128e0:	f7ff ff30 	bl	8012744 <BSP_SD_Init>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d107      	bne.n	80128fa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80128ea:	79fb      	ldrb	r3, [r7, #7]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7ff ffd1 	bl	8012894 <SD_CheckStatus>
 80128f2:	4603      	mov	r3, r0
 80128f4:	461a      	mov	r2, r3
 80128f6:	4b04      	ldr	r3, [pc, #16]	@ (8012908 <SD_initialize+0x38>)
 80128f8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80128fa:	4b03      	ldr	r3, [pc, #12]	@ (8012908 <SD_initialize+0x38>)
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	b2db      	uxtb	r3, r3
}
 8012900:	4618      	mov	r0, r3
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	24000185 	.word	0x24000185

0801290c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	4603      	mov	r3, r0
 8012914:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012916:	79fb      	ldrb	r3, [r7, #7]
 8012918:	4618      	mov	r0, r3
 801291a:	f7ff ffbb 	bl	8012894 <SD_CheckStatus>
 801291e:	4603      	mov	r3, r0
}
 8012920:	4618      	mov	r0, r3
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b086      	sub	sp, #24
 801292c:	af00      	add	r7, sp, #0
 801292e:	60b9      	str	r1, [r7, #8]
 8012930:	607a      	str	r2, [r7, #4]
 8012932:	603b      	str	r3, [r7, #0]
 8012934:	4603      	mov	r3, r0
 8012936:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012938:	2301      	movs	r3, #1
 801293a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801293c:	f04f 33ff 	mov.w	r3, #4294967295
 8012940:	683a      	ldr	r2, [r7, #0]
 8012942:	6879      	ldr	r1, [r7, #4]
 8012944:	68b8      	ldr	r0, [r7, #8]
 8012946:	f7ff ff23 	bl	8012790 <BSP_SD_ReadBlocks>
 801294a:	4603      	mov	r3, r0
 801294c:	2b00      	cmp	r3, #0
 801294e:	d107      	bne.n	8012960 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012950:	bf00      	nop
 8012952:	f7ff ff59 	bl	8012808 <BSP_SD_GetCardState>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d1fa      	bne.n	8012952 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801295c:	2300      	movs	r3, #0
 801295e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012960:	7dfb      	ldrb	r3, [r7, #23]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3718      	adds	r7, #24
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}

0801296a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801296a:	b580      	push	{r7, lr}
 801296c:	b086      	sub	sp, #24
 801296e:	af00      	add	r7, sp, #0
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
 8012974:	603b      	str	r3, [r7, #0]
 8012976:	4603      	mov	r3, r0
 8012978:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801297a:	2301      	movs	r3, #1
 801297c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801297e:	f04f 33ff 	mov.w	r3, #4294967295
 8012982:	683a      	ldr	r2, [r7, #0]
 8012984:	6879      	ldr	r1, [r7, #4]
 8012986:	68b8      	ldr	r0, [r7, #8]
 8012988:	f7ff ff20 	bl	80127cc <BSP_SD_WriteBlocks>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d107      	bne.n	80129a2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8012992:	bf00      	nop
 8012994:	f7ff ff38 	bl	8012808 <BSP_SD_GetCardState>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d1fa      	bne.n	8012994 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801299e:	2300      	movs	r3, #0
 80129a0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80129a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3718      	adds	r7, #24
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b08c      	sub	sp, #48	@ 0x30
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	4603      	mov	r3, r0
 80129b4:	603a      	str	r2, [r7, #0]
 80129b6:	71fb      	strb	r3, [r7, #7]
 80129b8:	460b      	mov	r3, r1
 80129ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80129bc:	2301      	movs	r3, #1
 80129be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80129c2:	4b25      	ldr	r3, [pc, #148]	@ (8012a58 <SD_ioctl+0xac>)
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	b2db      	uxtb	r3, r3
 80129c8:	f003 0301 	and.w	r3, r3, #1
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d001      	beq.n	80129d4 <SD_ioctl+0x28>
 80129d0:	2303      	movs	r3, #3
 80129d2:	e03c      	b.n	8012a4e <SD_ioctl+0xa2>

  switch (cmd)
 80129d4:	79bb      	ldrb	r3, [r7, #6]
 80129d6:	2b03      	cmp	r3, #3
 80129d8:	d834      	bhi.n	8012a44 <SD_ioctl+0x98>
 80129da:	a201      	add	r2, pc, #4	@ (adr r2, 80129e0 <SD_ioctl+0x34>)
 80129dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e0:	080129f1 	.word	0x080129f1
 80129e4:	080129f9 	.word	0x080129f9
 80129e8:	08012a11 	.word	0x08012a11
 80129ec:	08012a2b 	.word	0x08012a2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80129f0:	2300      	movs	r3, #0
 80129f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80129f6:	e028      	b.n	8012a4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80129f8:	f107 0308 	add.w	r3, r7, #8
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7ff ff13 	bl	8012828 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012a02:	6a3a      	ldr	r2, [r7, #32]
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012a0e:	e01c      	b.n	8012a4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012a10:	f107 0308 	add.w	r3, r7, #8
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7ff ff07 	bl	8012828 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012a28:	e00f      	b.n	8012a4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012a2a:	f107 0308 	add.w	r3, r7, #8
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7ff fefa 	bl	8012828 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a36:	0a5a      	lsrs	r2, r3, #9
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012a42:	e002      	b.n	8012a4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012a44:	2304      	movs	r3, #4
 8012a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3730      	adds	r7, #48	@ 0x30
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	24000185 	.word	0x24000185

08012a5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	b087      	sub	sp, #28
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	60b9      	str	r1, [r7, #8]
 8012a66:	4613      	mov	r3, r2
 8012a68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012a72:	4b1f      	ldr	r3, [pc, #124]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012a74:	7a5b      	ldrb	r3, [r3, #9]
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d131      	bne.n	8012ae0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012a7e:	7a5b      	ldrb	r3, [r3, #9]
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	461a      	mov	r2, r3
 8012a84:	4b1a      	ldr	r3, [pc, #104]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012a86:	2100      	movs	r1, #0
 8012a88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012a8a:	4b19      	ldr	r3, [pc, #100]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012a8c:	7a5b      	ldrb	r3, [r3, #9]
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	4a17      	ldr	r2, [pc, #92]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	4413      	add	r3, r2
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012a9a:	4b15      	ldr	r3, [pc, #84]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012a9c:	7a5b      	ldrb	r3, [r3, #9]
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	4b13      	ldr	r3, [pc, #76]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012aa4:	4413      	add	r3, r2
 8012aa6:	79fa      	ldrb	r2, [r7, #7]
 8012aa8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012aaa:	4b11      	ldr	r3, [pc, #68]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012aac:	7a5b      	ldrb	r3, [r3, #9]
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	1c5a      	adds	r2, r3, #1
 8012ab2:	b2d1      	uxtb	r1, r2
 8012ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8012af0 <FATFS_LinkDriverEx+0x94>)
 8012ab6:	7251      	strb	r1, [r2, #9]
 8012ab8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012aba:	7dbb      	ldrb	r3, [r7, #22]
 8012abc:	3330      	adds	r3, #48	@ 0x30
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	223a      	movs	r2, #58	@ 0x3a
 8012aca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	3302      	adds	r3, #2
 8012ad0:	222f      	movs	r2, #47	@ 0x2f
 8012ad2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	3303      	adds	r3, #3
 8012ad8:	2200      	movs	r2, #0
 8012ada:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012adc:	2300      	movs	r3, #0
 8012ade:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	371c      	adds	r7, #28
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	240019c4 	.word	0x240019c4

08012af4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012afe:	2200      	movs	r2, #0
 8012b00:	6839      	ldr	r1, [r7, #0]
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7ff ffaa 	bl	8012a5c <FATFS_LinkDriverEx>
 8012b08:	4603      	mov	r3, r0
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <__cvt>:
 8012b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b14:	ed2d 8b02 	vpush	{d8}
 8012b18:	eeb0 8b40 	vmov.f64	d8, d0
 8012b1c:	b085      	sub	sp, #20
 8012b1e:	4617      	mov	r7, r2
 8012b20:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012b24:	ee18 2a90 	vmov	r2, s17
 8012b28:	f025 0520 	bic.w	r5, r5, #32
 8012b2c:	2a00      	cmp	r2, #0
 8012b2e:	bfb6      	itet	lt
 8012b30:	222d      	movlt	r2, #45	@ 0x2d
 8012b32:	2200      	movge	r2, #0
 8012b34:	eeb1 8b40 	vneglt.f64	d8, d0
 8012b38:	2d46      	cmp	r5, #70	@ 0x46
 8012b3a:	460c      	mov	r4, r1
 8012b3c:	701a      	strb	r2, [r3, #0]
 8012b3e:	d004      	beq.n	8012b4a <__cvt+0x38>
 8012b40:	2d45      	cmp	r5, #69	@ 0x45
 8012b42:	d100      	bne.n	8012b46 <__cvt+0x34>
 8012b44:	3401      	adds	r4, #1
 8012b46:	2102      	movs	r1, #2
 8012b48:	e000      	b.n	8012b4c <__cvt+0x3a>
 8012b4a:	2103      	movs	r1, #3
 8012b4c:	ab03      	add	r3, sp, #12
 8012b4e:	9301      	str	r3, [sp, #4]
 8012b50:	ab02      	add	r3, sp, #8
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	4622      	mov	r2, r4
 8012b56:	4633      	mov	r3, r6
 8012b58:	eeb0 0b48 	vmov.f64	d0, d8
 8012b5c:	f001 f964 	bl	8013e28 <_dtoa_r>
 8012b60:	2d47      	cmp	r5, #71	@ 0x47
 8012b62:	d114      	bne.n	8012b8e <__cvt+0x7c>
 8012b64:	07fb      	lsls	r3, r7, #31
 8012b66:	d50a      	bpl.n	8012b7e <__cvt+0x6c>
 8012b68:	1902      	adds	r2, r0, r4
 8012b6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b72:	bf08      	it	eq
 8012b74:	9203      	streq	r2, [sp, #12]
 8012b76:	2130      	movs	r1, #48	@ 0x30
 8012b78:	9b03      	ldr	r3, [sp, #12]
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d319      	bcc.n	8012bb2 <__cvt+0xa0>
 8012b7e:	9b03      	ldr	r3, [sp, #12]
 8012b80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b82:	1a1b      	subs	r3, r3, r0
 8012b84:	6013      	str	r3, [r2, #0]
 8012b86:	b005      	add	sp, #20
 8012b88:	ecbd 8b02 	vpop	{d8}
 8012b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b8e:	2d46      	cmp	r5, #70	@ 0x46
 8012b90:	eb00 0204 	add.w	r2, r0, r4
 8012b94:	d1e9      	bne.n	8012b6a <__cvt+0x58>
 8012b96:	7803      	ldrb	r3, [r0, #0]
 8012b98:	2b30      	cmp	r3, #48	@ 0x30
 8012b9a:	d107      	bne.n	8012bac <__cvt+0x9a>
 8012b9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba4:	bf1c      	itt	ne
 8012ba6:	f1c4 0401 	rsbne	r4, r4, #1
 8012baa:	6034      	strne	r4, [r6, #0]
 8012bac:	6833      	ldr	r3, [r6, #0]
 8012bae:	441a      	add	r2, r3
 8012bb0:	e7db      	b.n	8012b6a <__cvt+0x58>
 8012bb2:	1c5c      	adds	r4, r3, #1
 8012bb4:	9403      	str	r4, [sp, #12]
 8012bb6:	7019      	strb	r1, [r3, #0]
 8012bb8:	e7de      	b.n	8012b78 <__cvt+0x66>

08012bba <__exponent>:
 8012bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bbc:	2900      	cmp	r1, #0
 8012bbe:	bfba      	itte	lt
 8012bc0:	4249      	neglt	r1, r1
 8012bc2:	232d      	movlt	r3, #45	@ 0x2d
 8012bc4:	232b      	movge	r3, #43	@ 0x2b
 8012bc6:	2909      	cmp	r1, #9
 8012bc8:	7002      	strb	r2, [r0, #0]
 8012bca:	7043      	strb	r3, [r0, #1]
 8012bcc:	dd29      	ble.n	8012c22 <__exponent+0x68>
 8012bce:	f10d 0307 	add.w	r3, sp, #7
 8012bd2:	461d      	mov	r5, r3
 8012bd4:	270a      	movs	r7, #10
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8012bdc:	fb07 1416 	mls	r4, r7, r6, r1
 8012be0:	3430      	adds	r4, #48	@ 0x30
 8012be2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012be6:	460c      	mov	r4, r1
 8012be8:	2c63      	cmp	r4, #99	@ 0x63
 8012bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8012bee:	4631      	mov	r1, r6
 8012bf0:	dcf1      	bgt.n	8012bd6 <__exponent+0x1c>
 8012bf2:	3130      	adds	r1, #48	@ 0x30
 8012bf4:	1e94      	subs	r4, r2, #2
 8012bf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012bfa:	1c41      	adds	r1, r0, #1
 8012bfc:	4623      	mov	r3, r4
 8012bfe:	42ab      	cmp	r3, r5
 8012c00:	d30a      	bcc.n	8012c18 <__exponent+0x5e>
 8012c02:	f10d 0309 	add.w	r3, sp, #9
 8012c06:	1a9b      	subs	r3, r3, r2
 8012c08:	42ac      	cmp	r4, r5
 8012c0a:	bf88      	it	hi
 8012c0c:	2300      	movhi	r3, #0
 8012c0e:	3302      	adds	r3, #2
 8012c10:	4403      	add	r3, r0
 8012c12:	1a18      	subs	r0, r3, r0
 8012c14:	b003      	add	sp, #12
 8012c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012c1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012c20:	e7ed      	b.n	8012bfe <__exponent+0x44>
 8012c22:	2330      	movs	r3, #48	@ 0x30
 8012c24:	3130      	adds	r1, #48	@ 0x30
 8012c26:	7083      	strb	r3, [r0, #2]
 8012c28:	70c1      	strb	r1, [r0, #3]
 8012c2a:	1d03      	adds	r3, r0, #4
 8012c2c:	e7f1      	b.n	8012c12 <__exponent+0x58>
	...

08012c30 <_printf_float>:
 8012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	b08d      	sub	sp, #52	@ 0x34
 8012c36:	460c      	mov	r4, r1
 8012c38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012c3c:	4616      	mov	r6, r2
 8012c3e:	461f      	mov	r7, r3
 8012c40:	4605      	mov	r5, r0
 8012c42:	f000 ffdb 	bl	8013bfc <_localeconv_r>
 8012c46:	f8d0 b000 	ldr.w	fp, [r0]
 8012c4a:	4658      	mov	r0, fp
 8012c4c:	f7ed fbb0 	bl	80003b0 <strlen>
 8012c50:	2300      	movs	r3, #0
 8012c52:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c54:	f8d8 3000 	ldr.w	r3, [r8]
 8012c58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012c5c:	6822      	ldr	r2, [r4, #0]
 8012c5e:	9005      	str	r0, [sp, #20]
 8012c60:	3307      	adds	r3, #7
 8012c62:	f023 0307 	bic.w	r3, r3, #7
 8012c66:	f103 0108 	add.w	r1, r3, #8
 8012c6a:	f8c8 1000 	str.w	r1, [r8]
 8012c6e:	ed93 0b00 	vldr	d0, [r3]
 8012c72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012ed0 <_printf_float+0x2a0>
 8012c76:	eeb0 7bc0 	vabs.f64	d7, d0
 8012c7a:	eeb4 7b46 	vcmp.f64	d7, d6
 8012c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012c86:	dd24      	ble.n	8012cd2 <_printf_float+0xa2>
 8012c88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c90:	d502      	bpl.n	8012c98 <_printf_float+0x68>
 8012c92:	232d      	movs	r3, #45	@ 0x2d
 8012c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c98:	498f      	ldr	r1, [pc, #572]	@ (8012ed8 <_printf_float+0x2a8>)
 8012c9a:	4b90      	ldr	r3, [pc, #576]	@ (8012edc <_printf_float+0x2ac>)
 8012c9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012ca0:	bf94      	ite	ls
 8012ca2:	4688      	movls	r8, r1
 8012ca4:	4698      	movhi	r8, r3
 8012ca6:	f022 0204 	bic.w	r2, r2, #4
 8012caa:	2303      	movs	r3, #3
 8012cac:	6123      	str	r3, [r4, #16]
 8012cae:	6022      	str	r2, [r4, #0]
 8012cb0:	f04f 0a00 	mov.w	sl, #0
 8012cb4:	9700      	str	r7, [sp, #0]
 8012cb6:	4633      	mov	r3, r6
 8012cb8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012cba:	4621      	mov	r1, r4
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	f000 f9d1 	bl	8013064 <_printf_common>
 8012cc2:	3001      	adds	r0, #1
 8012cc4:	f040 8089 	bne.w	8012dda <_printf_float+0x1aa>
 8012cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ccc:	b00d      	add	sp, #52	@ 0x34
 8012cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd2:	eeb4 0b40 	vcmp.f64	d0, d0
 8012cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cda:	d709      	bvc.n	8012cf0 <_printf_float+0xc0>
 8012cdc:	ee10 3a90 	vmov	r3, s1
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	bfbc      	itt	lt
 8012ce4:	232d      	movlt	r3, #45	@ 0x2d
 8012ce6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012cea:	497d      	ldr	r1, [pc, #500]	@ (8012ee0 <_printf_float+0x2b0>)
 8012cec:	4b7d      	ldr	r3, [pc, #500]	@ (8012ee4 <_printf_float+0x2b4>)
 8012cee:	e7d5      	b.n	8012c9c <_printf_float+0x6c>
 8012cf0:	6863      	ldr	r3, [r4, #4]
 8012cf2:	1c59      	adds	r1, r3, #1
 8012cf4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012cf8:	d139      	bne.n	8012d6e <_printf_float+0x13e>
 8012cfa:	2306      	movs	r3, #6
 8012cfc:	6063      	str	r3, [r4, #4]
 8012cfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012d02:	2300      	movs	r3, #0
 8012d04:	6022      	str	r2, [r4, #0]
 8012d06:	9303      	str	r3, [sp, #12]
 8012d08:	ab0a      	add	r3, sp, #40	@ 0x28
 8012d0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012d0e:	ab09      	add	r3, sp, #36	@ 0x24
 8012d10:	9300      	str	r3, [sp, #0]
 8012d12:	6861      	ldr	r1, [r4, #4]
 8012d14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012d18:	4628      	mov	r0, r5
 8012d1a:	f7ff fefa 	bl	8012b12 <__cvt>
 8012d1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012d22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d24:	4680      	mov	r8, r0
 8012d26:	d129      	bne.n	8012d7c <_printf_float+0x14c>
 8012d28:	1cc8      	adds	r0, r1, #3
 8012d2a:	db02      	blt.n	8012d32 <_printf_float+0x102>
 8012d2c:	6863      	ldr	r3, [r4, #4]
 8012d2e:	4299      	cmp	r1, r3
 8012d30:	dd41      	ble.n	8012db6 <_printf_float+0x186>
 8012d32:	f1a9 0902 	sub.w	r9, r9, #2
 8012d36:	fa5f f989 	uxtb.w	r9, r9
 8012d3a:	3901      	subs	r1, #1
 8012d3c:	464a      	mov	r2, r9
 8012d3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d44:	f7ff ff39 	bl	8012bba <__exponent>
 8012d48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d4a:	1813      	adds	r3, r2, r0
 8012d4c:	2a01      	cmp	r2, #1
 8012d4e:	4682      	mov	sl, r0
 8012d50:	6123      	str	r3, [r4, #16]
 8012d52:	dc02      	bgt.n	8012d5a <_printf_float+0x12a>
 8012d54:	6822      	ldr	r2, [r4, #0]
 8012d56:	07d2      	lsls	r2, r2, #31
 8012d58:	d501      	bpl.n	8012d5e <_printf_float+0x12e>
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	6123      	str	r3, [r4, #16]
 8012d5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d0a6      	beq.n	8012cb4 <_printf_float+0x84>
 8012d66:	232d      	movs	r3, #45	@ 0x2d
 8012d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d6c:	e7a2      	b.n	8012cb4 <_printf_float+0x84>
 8012d6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012d72:	d1c4      	bne.n	8012cfe <_printf_float+0xce>
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d1c2      	bne.n	8012cfe <_printf_float+0xce>
 8012d78:	2301      	movs	r3, #1
 8012d7a:	e7bf      	b.n	8012cfc <_printf_float+0xcc>
 8012d7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012d80:	d9db      	bls.n	8012d3a <_printf_float+0x10a>
 8012d82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012d86:	d118      	bne.n	8012dba <_printf_float+0x18a>
 8012d88:	2900      	cmp	r1, #0
 8012d8a:	6863      	ldr	r3, [r4, #4]
 8012d8c:	dd0b      	ble.n	8012da6 <_printf_float+0x176>
 8012d8e:	6121      	str	r1, [r4, #16]
 8012d90:	b913      	cbnz	r3, 8012d98 <_printf_float+0x168>
 8012d92:	6822      	ldr	r2, [r4, #0]
 8012d94:	07d0      	lsls	r0, r2, #31
 8012d96:	d502      	bpl.n	8012d9e <_printf_float+0x16e>
 8012d98:	3301      	adds	r3, #1
 8012d9a:	440b      	add	r3, r1
 8012d9c:	6123      	str	r3, [r4, #16]
 8012d9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012da0:	f04f 0a00 	mov.w	sl, #0
 8012da4:	e7db      	b.n	8012d5e <_printf_float+0x12e>
 8012da6:	b913      	cbnz	r3, 8012dae <_printf_float+0x17e>
 8012da8:	6822      	ldr	r2, [r4, #0]
 8012daa:	07d2      	lsls	r2, r2, #31
 8012dac:	d501      	bpl.n	8012db2 <_printf_float+0x182>
 8012dae:	3302      	adds	r3, #2
 8012db0:	e7f4      	b.n	8012d9c <_printf_float+0x16c>
 8012db2:	2301      	movs	r3, #1
 8012db4:	e7f2      	b.n	8012d9c <_printf_float+0x16c>
 8012db6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012dba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012dbc:	4299      	cmp	r1, r3
 8012dbe:	db05      	blt.n	8012dcc <_printf_float+0x19c>
 8012dc0:	6823      	ldr	r3, [r4, #0]
 8012dc2:	6121      	str	r1, [r4, #16]
 8012dc4:	07d8      	lsls	r0, r3, #31
 8012dc6:	d5ea      	bpl.n	8012d9e <_printf_float+0x16e>
 8012dc8:	1c4b      	adds	r3, r1, #1
 8012dca:	e7e7      	b.n	8012d9c <_printf_float+0x16c>
 8012dcc:	2900      	cmp	r1, #0
 8012dce:	bfd4      	ite	le
 8012dd0:	f1c1 0202 	rsble	r2, r1, #2
 8012dd4:	2201      	movgt	r2, #1
 8012dd6:	4413      	add	r3, r2
 8012dd8:	e7e0      	b.n	8012d9c <_printf_float+0x16c>
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	055a      	lsls	r2, r3, #21
 8012dde:	d407      	bmi.n	8012df0 <_printf_float+0x1c0>
 8012de0:	6923      	ldr	r3, [r4, #16]
 8012de2:	4642      	mov	r2, r8
 8012de4:	4631      	mov	r1, r6
 8012de6:	4628      	mov	r0, r5
 8012de8:	47b8      	blx	r7
 8012dea:	3001      	adds	r0, #1
 8012dec:	d12a      	bne.n	8012e44 <_printf_float+0x214>
 8012dee:	e76b      	b.n	8012cc8 <_printf_float+0x98>
 8012df0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012df4:	f240 80e0 	bls.w	8012fb8 <_printf_float+0x388>
 8012df8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012dfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e04:	d133      	bne.n	8012e6e <_printf_float+0x23e>
 8012e06:	4a38      	ldr	r2, [pc, #224]	@ (8012ee8 <_printf_float+0x2b8>)
 8012e08:	2301      	movs	r3, #1
 8012e0a:	4631      	mov	r1, r6
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	47b8      	blx	r7
 8012e10:	3001      	adds	r0, #1
 8012e12:	f43f af59 	beq.w	8012cc8 <_printf_float+0x98>
 8012e16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012e1a:	4543      	cmp	r3, r8
 8012e1c:	db02      	blt.n	8012e24 <_printf_float+0x1f4>
 8012e1e:	6823      	ldr	r3, [r4, #0]
 8012e20:	07d8      	lsls	r0, r3, #31
 8012e22:	d50f      	bpl.n	8012e44 <_printf_float+0x214>
 8012e24:	9b05      	ldr	r3, [sp, #20]
 8012e26:	465a      	mov	r2, fp
 8012e28:	4631      	mov	r1, r6
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	47b8      	blx	r7
 8012e2e:	3001      	adds	r0, #1
 8012e30:	f43f af4a 	beq.w	8012cc8 <_printf_float+0x98>
 8012e34:	f04f 0900 	mov.w	r9, #0
 8012e38:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e3c:	f104 0a1a 	add.w	sl, r4, #26
 8012e40:	45c8      	cmp	r8, r9
 8012e42:	dc09      	bgt.n	8012e58 <_printf_float+0x228>
 8012e44:	6823      	ldr	r3, [r4, #0]
 8012e46:	079b      	lsls	r3, r3, #30
 8012e48:	f100 8107 	bmi.w	801305a <_printf_float+0x42a>
 8012e4c:	68e0      	ldr	r0, [r4, #12]
 8012e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e50:	4298      	cmp	r0, r3
 8012e52:	bfb8      	it	lt
 8012e54:	4618      	movlt	r0, r3
 8012e56:	e739      	b.n	8012ccc <_printf_float+0x9c>
 8012e58:	2301      	movs	r3, #1
 8012e5a:	4652      	mov	r2, sl
 8012e5c:	4631      	mov	r1, r6
 8012e5e:	4628      	mov	r0, r5
 8012e60:	47b8      	blx	r7
 8012e62:	3001      	adds	r0, #1
 8012e64:	f43f af30 	beq.w	8012cc8 <_printf_float+0x98>
 8012e68:	f109 0901 	add.w	r9, r9, #1
 8012e6c:	e7e8      	b.n	8012e40 <_printf_float+0x210>
 8012e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	dc3b      	bgt.n	8012eec <_printf_float+0x2bc>
 8012e74:	4a1c      	ldr	r2, [pc, #112]	@ (8012ee8 <_printf_float+0x2b8>)
 8012e76:	2301      	movs	r3, #1
 8012e78:	4631      	mov	r1, r6
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	47b8      	blx	r7
 8012e7e:	3001      	adds	r0, #1
 8012e80:	f43f af22 	beq.w	8012cc8 <_printf_float+0x98>
 8012e84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012e88:	ea59 0303 	orrs.w	r3, r9, r3
 8012e8c:	d102      	bne.n	8012e94 <_printf_float+0x264>
 8012e8e:	6823      	ldr	r3, [r4, #0]
 8012e90:	07d9      	lsls	r1, r3, #31
 8012e92:	d5d7      	bpl.n	8012e44 <_printf_float+0x214>
 8012e94:	9b05      	ldr	r3, [sp, #20]
 8012e96:	465a      	mov	r2, fp
 8012e98:	4631      	mov	r1, r6
 8012e9a:	4628      	mov	r0, r5
 8012e9c:	47b8      	blx	r7
 8012e9e:	3001      	adds	r0, #1
 8012ea0:	f43f af12 	beq.w	8012cc8 <_printf_float+0x98>
 8012ea4:	f04f 0a00 	mov.w	sl, #0
 8012ea8:	f104 0b1a 	add.w	fp, r4, #26
 8012eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eae:	425b      	negs	r3, r3
 8012eb0:	4553      	cmp	r3, sl
 8012eb2:	dc01      	bgt.n	8012eb8 <_printf_float+0x288>
 8012eb4:	464b      	mov	r3, r9
 8012eb6:	e794      	b.n	8012de2 <_printf_float+0x1b2>
 8012eb8:	2301      	movs	r3, #1
 8012eba:	465a      	mov	r2, fp
 8012ebc:	4631      	mov	r1, r6
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	47b8      	blx	r7
 8012ec2:	3001      	adds	r0, #1
 8012ec4:	f43f af00 	beq.w	8012cc8 <_printf_float+0x98>
 8012ec8:	f10a 0a01 	add.w	sl, sl, #1
 8012ecc:	e7ee      	b.n	8012eac <_printf_float+0x27c>
 8012ece:	bf00      	nop
 8012ed0:	ffffffff 	.word	0xffffffff
 8012ed4:	7fefffff 	.word	0x7fefffff
 8012ed8:	080173f0 	.word	0x080173f0
 8012edc:	080173f4 	.word	0x080173f4
 8012ee0:	080173f8 	.word	0x080173f8
 8012ee4:	080173fc 	.word	0x080173fc
 8012ee8:	08017400 	.word	0x08017400
 8012eec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012eee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012ef2:	4553      	cmp	r3, sl
 8012ef4:	bfa8      	it	ge
 8012ef6:	4653      	movge	r3, sl
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	4699      	mov	r9, r3
 8012efc:	dc37      	bgt.n	8012f6e <_printf_float+0x33e>
 8012efe:	2300      	movs	r3, #0
 8012f00:	9307      	str	r3, [sp, #28]
 8012f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f06:	f104 021a 	add.w	r2, r4, #26
 8012f0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012f0c:	9907      	ldr	r1, [sp, #28]
 8012f0e:	9306      	str	r3, [sp, #24]
 8012f10:	eba3 0309 	sub.w	r3, r3, r9
 8012f14:	428b      	cmp	r3, r1
 8012f16:	dc31      	bgt.n	8012f7c <_printf_float+0x34c>
 8012f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f1a:	459a      	cmp	sl, r3
 8012f1c:	dc3b      	bgt.n	8012f96 <_printf_float+0x366>
 8012f1e:	6823      	ldr	r3, [r4, #0]
 8012f20:	07da      	lsls	r2, r3, #31
 8012f22:	d438      	bmi.n	8012f96 <_printf_float+0x366>
 8012f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f26:	ebaa 0903 	sub.w	r9, sl, r3
 8012f2a:	9b06      	ldr	r3, [sp, #24]
 8012f2c:	ebaa 0303 	sub.w	r3, sl, r3
 8012f30:	4599      	cmp	r9, r3
 8012f32:	bfa8      	it	ge
 8012f34:	4699      	movge	r9, r3
 8012f36:	f1b9 0f00 	cmp.w	r9, #0
 8012f3a:	dc34      	bgt.n	8012fa6 <_printf_float+0x376>
 8012f3c:	f04f 0800 	mov.w	r8, #0
 8012f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f44:	f104 0b1a 	add.w	fp, r4, #26
 8012f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f4a:	ebaa 0303 	sub.w	r3, sl, r3
 8012f4e:	eba3 0309 	sub.w	r3, r3, r9
 8012f52:	4543      	cmp	r3, r8
 8012f54:	f77f af76 	ble.w	8012e44 <_printf_float+0x214>
 8012f58:	2301      	movs	r3, #1
 8012f5a:	465a      	mov	r2, fp
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4628      	mov	r0, r5
 8012f60:	47b8      	blx	r7
 8012f62:	3001      	adds	r0, #1
 8012f64:	f43f aeb0 	beq.w	8012cc8 <_printf_float+0x98>
 8012f68:	f108 0801 	add.w	r8, r8, #1
 8012f6c:	e7ec      	b.n	8012f48 <_printf_float+0x318>
 8012f6e:	4642      	mov	r2, r8
 8012f70:	4631      	mov	r1, r6
 8012f72:	4628      	mov	r0, r5
 8012f74:	47b8      	blx	r7
 8012f76:	3001      	adds	r0, #1
 8012f78:	d1c1      	bne.n	8012efe <_printf_float+0x2ce>
 8012f7a:	e6a5      	b.n	8012cc8 <_printf_float+0x98>
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	4631      	mov	r1, r6
 8012f80:	4628      	mov	r0, r5
 8012f82:	9206      	str	r2, [sp, #24]
 8012f84:	47b8      	blx	r7
 8012f86:	3001      	adds	r0, #1
 8012f88:	f43f ae9e 	beq.w	8012cc8 <_printf_float+0x98>
 8012f8c:	9b07      	ldr	r3, [sp, #28]
 8012f8e:	9a06      	ldr	r2, [sp, #24]
 8012f90:	3301      	adds	r3, #1
 8012f92:	9307      	str	r3, [sp, #28]
 8012f94:	e7b9      	b.n	8012f0a <_printf_float+0x2da>
 8012f96:	9b05      	ldr	r3, [sp, #20]
 8012f98:	465a      	mov	r2, fp
 8012f9a:	4631      	mov	r1, r6
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	47b8      	blx	r7
 8012fa0:	3001      	adds	r0, #1
 8012fa2:	d1bf      	bne.n	8012f24 <_printf_float+0x2f4>
 8012fa4:	e690      	b.n	8012cc8 <_printf_float+0x98>
 8012fa6:	9a06      	ldr	r2, [sp, #24]
 8012fa8:	464b      	mov	r3, r9
 8012faa:	4442      	add	r2, r8
 8012fac:	4631      	mov	r1, r6
 8012fae:	4628      	mov	r0, r5
 8012fb0:	47b8      	blx	r7
 8012fb2:	3001      	adds	r0, #1
 8012fb4:	d1c2      	bne.n	8012f3c <_printf_float+0x30c>
 8012fb6:	e687      	b.n	8012cc8 <_printf_float+0x98>
 8012fb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012fbc:	f1b9 0f01 	cmp.w	r9, #1
 8012fc0:	dc01      	bgt.n	8012fc6 <_printf_float+0x396>
 8012fc2:	07db      	lsls	r3, r3, #31
 8012fc4:	d536      	bpl.n	8013034 <_printf_float+0x404>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	4642      	mov	r2, r8
 8012fca:	4631      	mov	r1, r6
 8012fcc:	4628      	mov	r0, r5
 8012fce:	47b8      	blx	r7
 8012fd0:	3001      	adds	r0, #1
 8012fd2:	f43f ae79 	beq.w	8012cc8 <_printf_float+0x98>
 8012fd6:	9b05      	ldr	r3, [sp, #20]
 8012fd8:	465a      	mov	r2, fp
 8012fda:	4631      	mov	r1, r6
 8012fdc:	4628      	mov	r0, r5
 8012fde:	47b8      	blx	r7
 8012fe0:	3001      	adds	r0, #1
 8012fe2:	f43f ae71 	beq.w	8012cc8 <_printf_float+0x98>
 8012fe6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012fea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff2:	f109 39ff 	add.w	r9, r9, #4294967295
 8012ff6:	d018      	beq.n	801302a <_printf_float+0x3fa>
 8012ff8:	464b      	mov	r3, r9
 8012ffa:	f108 0201 	add.w	r2, r8, #1
 8012ffe:	4631      	mov	r1, r6
 8013000:	4628      	mov	r0, r5
 8013002:	47b8      	blx	r7
 8013004:	3001      	adds	r0, #1
 8013006:	d10c      	bne.n	8013022 <_printf_float+0x3f2>
 8013008:	e65e      	b.n	8012cc8 <_printf_float+0x98>
 801300a:	2301      	movs	r3, #1
 801300c:	465a      	mov	r2, fp
 801300e:	4631      	mov	r1, r6
 8013010:	4628      	mov	r0, r5
 8013012:	47b8      	blx	r7
 8013014:	3001      	adds	r0, #1
 8013016:	f43f ae57 	beq.w	8012cc8 <_printf_float+0x98>
 801301a:	f108 0801 	add.w	r8, r8, #1
 801301e:	45c8      	cmp	r8, r9
 8013020:	dbf3      	blt.n	801300a <_printf_float+0x3da>
 8013022:	4653      	mov	r3, sl
 8013024:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013028:	e6dc      	b.n	8012de4 <_printf_float+0x1b4>
 801302a:	f04f 0800 	mov.w	r8, #0
 801302e:	f104 0b1a 	add.w	fp, r4, #26
 8013032:	e7f4      	b.n	801301e <_printf_float+0x3ee>
 8013034:	2301      	movs	r3, #1
 8013036:	4642      	mov	r2, r8
 8013038:	e7e1      	b.n	8012ffe <_printf_float+0x3ce>
 801303a:	2301      	movs	r3, #1
 801303c:	464a      	mov	r2, r9
 801303e:	4631      	mov	r1, r6
 8013040:	4628      	mov	r0, r5
 8013042:	47b8      	blx	r7
 8013044:	3001      	adds	r0, #1
 8013046:	f43f ae3f 	beq.w	8012cc8 <_printf_float+0x98>
 801304a:	f108 0801 	add.w	r8, r8, #1
 801304e:	68e3      	ldr	r3, [r4, #12]
 8013050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013052:	1a5b      	subs	r3, r3, r1
 8013054:	4543      	cmp	r3, r8
 8013056:	dcf0      	bgt.n	801303a <_printf_float+0x40a>
 8013058:	e6f8      	b.n	8012e4c <_printf_float+0x21c>
 801305a:	f04f 0800 	mov.w	r8, #0
 801305e:	f104 0919 	add.w	r9, r4, #25
 8013062:	e7f4      	b.n	801304e <_printf_float+0x41e>

08013064 <_printf_common>:
 8013064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013068:	4616      	mov	r6, r2
 801306a:	4698      	mov	r8, r3
 801306c:	688a      	ldr	r2, [r1, #8]
 801306e:	690b      	ldr	r3, [r1, #16]
 8013070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013074:	4293      	cmp	r3, r2
 8013076:	bfb8      	it	lt
 8013078:	4613      	movlt	r3, r2
 801307a:	6033      	str	r3, [r6, #0]
 801307c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013080:	4607      	mov	r7, r0
 8013082:	460c      	mov	r4, r1
 8013084:	b10a      	cbz	r2, 801308a <_printf_common+0x26>
 8013086:	3301      	adds	r3, #1
 8013088:	6033      	str	r3, [r6, #0]
 801308a:	6823      	ldr	r3, [r4, #0]
 801308c:	0699      	lsls	r1, r3, #26
 801308e:	bf42      	ittt	mi
 8013090:	6833      	ldrmi	r3, [r6, #0]
 8013092:	3302      	addmi	r3, #2
 8013094:	6033      	strmi	r3, [r6, #0]
 8013096:	6825      	ldr	r5, [r4, #0]
 8013098:	f015 0506 	ands.w	r5, r5, #6
 801309c:	d106      	bne.n	80130ac <_printf_common+0x48>
 801309e:	f104 0a19 	add.w	sl, r4, #25
 80130a2:	68e3      	ldr	r3, [r4, #12]
 80130a4:	6832      	ldr	r2, [r6, #0]
 80130a6:	1a9b      	subs	r3, r3, r2
 80130a8:	42ab      	cmp	r3, r5
 80130aa:	dc26      	bgt.n	80130fa <_printf_common+0x96>
 80130ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80130b0:	6822      	ldr	r2, [r4, #0]
 80130b2:	3b00      	subs	r3, #0
 80130b4:	bf18      	it	ne
 80130b6:	2301      	movne	r3, #1
 80130b8:	0692      	lsls	r2, r2, #26
 80130ba:	d42b      	bmi.n	8013114 <_printf_common+0xb0>
 80130bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80130c0:	4641      	mov	r1, r8
 80130c2:	4638      	mov	r0, r7
 80130c4:	47c8      	blx	r9
 80130c6:	3001      	adds	r0, #1
 80130c8:	d01e      	beq.n	8013108 <_printf_common+0xa4>
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	6922      	ldr	r2, [r4, #16]
 80130ce:	f003 0306 	and.w	r3, r3, #6
 80130d2:	2b04      	cmp	r3, #4
 80130d4:	bf02      	ittt	eq
 80130d6:	68e5      	ldreq	r5, [r4, #12]
 80130d8:	6833      	ldreq	r3, [r6, #0]
 80130da:	1aed      	subeq	r5, r5, r3
 80130dc:	68a3      	ldr	r3, [r4, #8]
 80130de:	bf0c      	ite	eq
 80130e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80130e4:	2500      	movne	r5, #0
 80130e6:	4293      	cmp	r3, r2
 80130e8:	bfc4      	itt	gt
 80130ea:	1a9b      	subgt	r3, r3, r2
 80130ec:	18ed      	addgt	r5, r5, r3
 80130ee:	2600      	movs	r6, #0
 80130f0:	341a      	adds	r4, #26
 80130f2:	42b5      	cmp	r5, r6
 80130f4:	d11a      	bne.n	801312c <_printf_common+0xc8>
 80130f6:	2000      	movs	r0, #0
 80130f8:	e008      	b.n	801310c <_printf_common+0xa8>
 80130fa:	2301      	movs	r3, #1
 80130fc:	4652      	mov	r2, sl
 80130fe:	4641      	mov	r1, r8
 8013100:	4638      	mov	r0, r7
 8013102:	47c8      	blx	r9
 8013104:	3001      	adds	r0, #1
 8013106:	d103      	bne.n	8013110 <_printf_common+0xac>
 8013108:	f04f 30ff 	mov.w	r0, #4294967295
 801310c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013110:	3501      	adds	r5, #1
 8013112:	e7c6      	b.n	80130a2 <_printf_common+0x3e>
 8013114:	18e1      	adds	r1, r4, r3
 8013116:	1c5a      	adds	r2, r3, #1
 8013118:	2030      	movs	r0, #48	@ 0x30
 801311a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801311e:	4422      	add	r2, r4
 8013120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013128:	3302      	adds	r3, #2
 801312a:	e7c7      	b.n	80130bc <_printf_common+0x58>
 801312c:	2301      	movs	r3, #1
 801312e:	4622      	mov	r2, r4
 8013130:	4641      	mov	r1, r8
 8013132:	4638      	mov	r0, r7
 8013134:	47c8      	blx	r9
 8013136:	3001      	adds	r0, #1
 8013138:	d0e6      	beq.n	8013108 <_printf_common+0xa4>
 801313a:	3601      	adds	r6, #1
 801313c:	e7d9      	b.n	80130f2 <_printf_common+0x8e>
	...

08013140 <_printf_i>:
 8013140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013144:	7e0f      	ldrb	r7, [r1, #24]
 8013146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013148:	2f78      	cmp	r7, #120	@ 0x78
 801314a:	4691      	mov	r9, r2
 801314c:	4680      	mov	r8, r0
 801314e:	460c      	mov	r4, r1
 8013150:	469a      	mov	sl, r3
 8013152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013156:	d807      	bhi.n	8013168 <_printf_i+0x28>
 8013158:	2f62      	cmp	r7, #98	@ 0x62
 801315a:	d80a      	bhi.n	8013172 <_printf_i+0x32>
 801315c:	2f00      	cmp	r7, #0
 801315e:	f000 80d2 	beq.w	8013306 <_printf_i+0x1c6>
 8013162:	2f58      	cmp	r7, #88	@ 0x58
 8013164:	f000 80b9 	beq.w	80132da <_printf_i+0x19a>
 8013168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801316c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013170:	e03a      	b.n	80131e8 <_printf_i+0xa8>
 8013172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013176:	2b15      	cmp	r3, #21
 8013178:	d8f6      	bhi.n	8013168 <_printf_i+0x28>
 801317a:	a101      	add	r1, pc, #4	@ (adr r1, 8013180 <_printf_i+0x40>)
 801317c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013180:	080131d9 	.word	0x080131d9
 8013184:	080131ed 	.word	0x080131ed
 8013188:	08013169 	.word	0x08013169
 801318c:	08013169 	.word	0x08013169
 8013190:	08013169 	.word	0x08013169
 8013194:	08013169 	.word	0x08013169
 8013198:	080131ed 	.word	0x080131ed
 801319c:	08013169 	.word	0x08013169
 80131a0:	08013169 	.word	0x08013169
 80131a4:	08013169 	.word	0x08013169
 80131a8:	08013169 	.word	0x08013169
 80131ac:	080132ed 	.word	0x080132ed
 80131b0:	08013217 	.word	0x08013217
 80131b4:	080132a7 	.word	0x080132a7
 80131b8:	08013169 	.word	0x08013169
 80131bc:	08013169 	.word	0x08013169
 80131c0:	0801330f 	.word	0x0801330f
 80131c4:	08013169 	.word	0x08013169
 80131c8:	08013217 	.word	0x08013217
 80131cc:	08013169 	.word	0x08013169
 80131d0:	08013169 	.word	0x08013169
 80131d4:	080132af 	.word	0x080132af
 80131d8:	6833      	ldr	r3, [r6, #0]
 80131da:	1d1a      	adds	r2, r3, #4
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	6032      	str	r2, [r6, #0]
 80131e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80131e8:	2301      	movs	r3, #1
 80131ea:	e09d      	b.n	8013328 <_printf_i+0x1e8>
 80131ec:	6833      	ldr	r3, [r6, #0]
 80131ee:	6820      	ldr	r0, [r4, #0]
 80131f0:	1d19      	adds	r1, r3, #4
 80131f2:	6031      	str	r1, [r6, #0]
 80131f4:	0606      	lsls	r6, r0, #24
 80131f6:	d501      	bpl.n	80131fc <_printf_i+0xbc>
 80131f8:	681d      	ldr	r5, [r3, #0]
 80131fa:	e003      	b.n	8013204 <_printf_i+0xc4>
 80131fc:	0645      	lsls	r5, r0, #25
 80131fe:	d5fb      	bpl.n	80131f8 <_printf_i+0xb8>
 8013200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013204:	2d00      	cmp	r5, #0
 8013206:	da03      	bge.n	8013210 <_printf_i+0xd0>
 8013208:	232d      	movs	r3, #45	@ 0x2d
 801320a:	426d      	negs	r5, r5
 801320c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013210:	4859      	ldr	r0, [pc, #356]	@ (8013378 <_printf_i+0x238>)
 8013212:	230a      	movs	r3, #10
 8013214:	e011      	b.n	801323a <_printf_i+0xfa>
 8013216:	6821      	ldr	r1, [r4, #0]
 8013218:	6833      	ldr	r3, [r6, #0]
 801321a:	0608      	lsls	r0, r1, #24
 801321c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013220:	d402      	bmi.n	8013228 <_printf_i+0xe8>
 8013222:	0649      	lsls	r1, r1, #25
 8013224:	bf48      	it	mi
 8013226:	b2ad      	uxthmi	r5, r5
 8013228:	2f6f      	cmp	r7, #111	@ 0x6f
 801322a:	4853      	ldr	r0, [pc, #332]	@ (8013378 <_printf_i+0x238>)
 801322c:	6033      	str	r3, [r6, #0]
 801322e:	bf14      	ite	ne
 8013230:	230a      	movne	r3, #10
 8013232:	2308      	moveq	r3, #8
 8013234:	2100      	movs	r1, #0
 8013236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801323a:	6866      	ldr	r6, [r4, #4]
 801323c:	60a6      	str	r6, [r4, #8]
 801323e:	2e00      	cmp	r6, #0
 8013240:	bfa2      	ittt	ge
 8013242:	6821      	ldrge	r1, [r4, #0]
 8013244:	f021 0104 	bicge.w	r1, r1, #4
 8013248:	6021      	strge	r1, [r4, #0]
 801324a:	b90d      	cbnz	r5, 8013250 <_printf_i+0x110>
 801324c:	2e00      	cmp	r6, #0
 801324e:	d04b      	beq.n	80132e8 <_printf_i+0x1a8>
 8013250:	4616      	mov	r6, r2
 8013252:	fbb5 f1f3 	udiv	r1, r5, r3
 8013256:	fb03 5711 	mls	r7, r3, r1, r5
 801325a:	5dc7      	ldrb	r7, [r0, r7]
 801325c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013260:	462f      	mov	r7, r5
 8013262:	42bb      	cmp	r3, r7
 8013264:	460d      	mov	r5, r1
 8013266:	d9f4      	bls.n	8013252 <_printf_i+0x112>
 8013268:	2b08      	cmp	r3, #8
 801326a:	d10b      	bne.n	8013284 <_printf_i+0x144>
 801326c:	6823      	ldr	r3, [r4, #0]
 801326e:	07df      	lsls	r7, r3, #31
 8013270:	d508      	bpl.n	8013284 <_printf_i+0x144>
 8013272:	6923      	ldr	r3, [r4, #16]
 8013274:	6861      	ldr	r1, [r4, #4]
 8013276:	4299      	cmp	r1, r3
 8013278:	bfde      	ittt	le
 801327a:	2330      	movle	r3, #48	@ 0x30
 801327c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013280:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013284:	1b92      	subs	r2, r2, r6
 8013286:	6122      	str	r2, [r4, #16]
 8013288:	f8cd a000 	str.w	sl, [sp]
 801328c:	464b      	mov	r3, r9
 801328e:	aa03      	add	r2, sp, #12
 8013290:	4621      	mov	r1, r4
 8013292:	4640      	mov	r0, r8
 8013294:	f7ff fee6 	bl	8013064 <_printf_common>
 8013298:	3001      	adds	r0, #1
 801329a:	d14a      	bne.n	8013332 <_printf_i+0x1f2>
 801329c:	f04f 30ff 	mov.w	r0, #4294967295
 80132a0:	b004      	add	sp, #16
 80132a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132a6:	6823      	ldr	r3, [r4, #0]
 80132a8:	f043 0320 	orr.w	r3, r3, #32
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	4833      	ldr	r0, [pc, #204]	@ (801337c <_printf_i+0x23c>)
 80132b0:	2778      	movs	r7, #120	@ 0x78
 80132b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	6831      	ldr	r1, [r6, #0]
 80132ba:	061f      	lsls	r7, r3, #24
 80132bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80132c0:	d402      	bmi.n	80132c8 <_printf_i+0x188>
 80132c2:	065f      	lsls	r7, r3, #25
 80132c4:	bf48      	it	mi
 80132c6:	b2ad      	uxthmi	r5, r5
 80132c8:	6031      	str	r1, [r6, #0]
 80132ca:	07d9      	lsls	r1, r3, #31
 80132cc:	bf44      	itt	mi
 80132ce:	f043 0320 	orrmi.w	r3, r3, #32
 80132d2:	6023      	strmi	r3, [r4, #0]
 80132d4:	b11d      	cbz	r5, 80132de <_printf_i+0x19e>
 80132d6:	2310      	movs	r3, #16
 80132d8:	e7ac      	b.n	8013234 <_printf_i+0xf4>
 80132da:	4827      	ldr	r0, [pc, #156]	@ (8013378 <_printf_i+0x238>)
 80132dc:	e7e9      	b.n	80132b2 <_printf_i+0x172>
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	f023 0320 	bic.w	r3, r3, #32
 80132e4:	6023      	str	r3, [r4, #0]
 80132e6:	e7f6      	b.n	80132d6 <_printf_i+0x196>
 80132e8:	4616      	mov	r6, r2
 80132ea:	e7bd      	b.n	8013268 <_printf_i+0x128>
 80132ec:	6833      	ldr	r3, [r6, #0]
 80132ee:	6825      	ldr	r5, [r4, #0]
 80132f0:	6961      	ldr	r1, [r4, #20]
 80132f2:	1d18      	adds	r0, r3, #4
 80132f4:	6030      	str	r0, [r6, #0]
 80132f6:	062e      	lsls	r6, r5, #24
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	d501      	bpl.n	8013300 <_printf_i+0x1c0>
 80132fc:	6019      	str	r1, [r3, #0]
 80132fe:	e002      	b.n	8013306 <_printf_i+0x1c6>
 8013300:	0668      	lsls	r0, r5, #25
 8013302:	d5fb      	bpl.n	80132fc <_printf_i+0x1bc>
 8013304:	8019      	strh	r1, [r3, #0]
 8013306:	2300      	movs	r3, #0
 8013308:	6123      	str	r3, [r4, #16]
 801330a:	4616      	mov	r6, r2
 801330c:	e7bc      	b.n	8013288 <_printf_i+0x148>
 801330e:	6833      	ldr	r3, [r6, #0]
 8013310:	1d1a      	adds	r2, r3, #4
 8013312:	6032      	str	r2, [r6, #0]
 8013314:	681e      	ldr	r6, [r3, #0]
 8013316:	6862      	ldr	r2, [r4, #4]
 8013318:	2100      	movs	r1, #0
 801331a:	4630      	mov	r0, r6
 801331c:	f7ec fff8 	bl	8000310 <memchr>
 8013320:	b108      	cbz	r0, 8013326 <_printf_i+0x1e6>
 8013322:	1b80      	subs	r0, r0, r6
 8013324:	6060      	str	r0, [r4, #4]
 8013326:	6863      	ldr	r3, [r4, #4]
 8013328:	6123      	str	r3, [r4, #16]
 801332a:	2300      	movs	r3, #0
 801332c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013330:	e7aa      	b.n	8013288 <_printf_i+0x148>
 8013332:	6923      	ldr	r3, [r4, #16]
 8013334:	4632      	mov	r2, r6
 8013336:	4649      	mov	r1, r9
 8013338:	4640      	mov	r0, r8
 801333a:	47d0      	blx	sl
 801333c:	3001      	adds	r0, #1
 801333e:	d0ad      	beq.n	801329c <_printf_i+0x15c>
 8013340:	6823      	ldr	r3, [r4, #0]
 8013342:	079b      	lsls	r3, r3, #30
 8013344:	d413      	bmi.n	801336e <_printf_i+0x22e>
 8013346:	68e0      	ldr	r0, [r4, #12]
 8013348:	9b03      	ldr	r3, [sp, #12]
 801334a:	4298      	cmp	r0, r3
 801334c:	bfb8      	it	lt
 801334e:	4618      	movlt	r0, r3
 8013350:	e7a6      	b.n	80132a0 <_printf_i+0x160>
 8013352:	2301      	movs	r3, #1
 8013354:	4632      	mov	r2, r6
 8013356:	4649      	mov	r1, r9
 8013358:	4640      	mov	r0, r8
 801335a:	47d0      	blx	sl
 801335c:	3001      	adds	r0, #1
 801335e:	d09d      	beq.n	801329c <_printf_i+0x15c>
 8013360:	3501      	adds	r5, #1
 8013362:	68e3      	ldr	r3, [r4, #12]
 8013364:	9903      	ldr	r1, [sp, #12]
 8013366:	1a5b      	subs	r3, r3, r1
 8013368:	42ab      	cmp	r3, r5
 801336a:	dcf2      	bgt.n	8013352 <_printf_i+0x212>
 801336c:	e7eb      	b.n	8013346 <_printf_i+0x206>
 801336e:	2500      	movs	r5, #0
 8013370:	f104 0619 	add.w	r6, r4, #25
 8013374:	e7f5      	b.n	8013362 <_printf_i+0x222>
 8013376:	bf00      	nop
 8013378:	08017402 	.word	0x08017402
 801337c:	08017413 	.word	0x08017413

08013380 <_scanf_float>:
 8013380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013384:	b087      	sub	sp, #28
 8013386:	4617      	mov	r7, r2
 8013388:	9303      	str	r3, [sp, #12]
 801338a:	688b      	ldr	r3, [r1, #8]
 801338c:	1e5a      	subs	r2, r3, #1
 801338e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013392:	bf81      	itttt	hi
 8013394:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013398:	eb03 0b05 	addhi.w	fp, r3, r5
 801339c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80133a0:	608b      	strhi	r3, [r1, #8]
 80133a2:	680b      	ldr	r3, [r1, #0]
 80133a4:	460a      	mov	r2, r1
 80133a6:	f04f 0500 	mov.w	r5, #0
 80133aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80133ae:	f842 3b1c 	str.w	r3, [r2], #28
 80133b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80133b6:	4680      	mov	r8, r0
 80133b8:	460c      	mov	r4, r1
 80133ba:	bf98      	it	ls
 80133bc:	f04f 0b00 	movls.w	fp, #0
 80133c0:	9201      	str	r2, [sp, #4]
 80133c2:	4616      	mov	r6, r2
 80133c4:	46aa      	mov	sl, r5
 80133c6:	46a9      	mov	r9, r5
 80133c8:	9502      	str	r5, [sp, #8]
 80133ca:	68a2      	ldr	r2, [r4, #8]
 80133cc:	b152      	cbz	r2, 80133e4 <_scanf_float+0x64>
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80133d4:	d864      	bhi.n	80134a0 <_scanf_float+0x120>
 80133d6:	2b40      	cmp	r3, #64	@ 0x40
 80133d8:	d83c      	bhi.n	8013454 <_scanf_float+0xd4>
 80133da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80133de:	b2c8      	uxtb	r0, r1
 80133e0:	280e      	cmp	r0, #14
 80133e2:	d93a      	bls.n	801345a <_scanf_float+0xda>
 80133e4:	f1b9 0f00 	cmp.w	r9, #0
 80133e8:	d003      	beq.n	80133f2 <_scanf_float+0x72>
 80133ea:	6823      	ldr	r3, [r4, #0]
 80133ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80133f0:	6023      	str	r3, [r4, #0]
 80133f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80133f6:	f1ba 0f01 	cmp.w	sl, #1
 80133fa:	f200 8117 	bhi.w	801362c <_scanf_float+0x2ac>
 80133fe:	9b01      	ldr	r3, [sp, #4]
 8013400:	429e      	cmp	r6, r3
 8013402:	f200 8108 	bhi.w	8013616 <_scanf_float+0x296>
 8013406:	2001      	movs	r0, #1
 8013408:	b007      	add	sp, #28
 801340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801340e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013412:	2a0d      	cmp	r2, #13
 8013414:	d8e6      	bhi.n	80133e4 <_scanf_float+0x64>
 8013416:	a101      	add	r1, pc, #4	@ (adr r1, 801341c <_scanf_float+0x9c>)
 8013418:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801341c:	08013563 	.word	0x08013563
 8013420:	080133e5 	.word	0x080133e5
 8013424:	080133e5 	.word	0x080133e5
 8013428:	080133e5 	.word	0x080133e5
 801342c:	080135c3 	.word	0x080135c3
 8013430:	0801359b 	.word	0x0801359b
 8013434:	080133e5 	.word	0x080133e5
 8013438:	080133e5 	.word	0x080133e5
 801343c:	08013571 	.word	0x08013571
 8013440:	080133e5 	.word	0x080133e5
 8013444:	080133e5 	.word	0x080133e5
 8013448:	080133e5 	.word	0x080133e5
 801344c:	080133e5 	.word	0x080133e5
 8013450:	08013529 	.word	0x08013529
 8013454:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013458:	e7db      	b.n	8013412 <_scanf_float+0x92>
 801345a:	290e      	cmp	r1, #14
 801345c:	d8c2      	bhi.n	80133e4 <_scanf_float+0x64>
 801345e:	a001      	add	r0, pc, #4	@ (adr r0, 8013464 <_scanf_float+0xe4>)
 8013460:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013464:	08013519 	.word	0x08013519
 8013468:	080133e5 	.word	0x080133e5
 801346c:	08013519 	.word	0x08013519
 8013470:	080135af 	.word	0x080135af
 8013474:	080133e5 	.word	0x080133e5
 8013478:	080134c1 	.word	0x080134c1
 801347c:	080134ff 	.word	0x080134ff
 8013480:	080134ff 	.word	0x080134ff
 8013484:	080134ff 	.word	0x080134ff
 8013488:	080134ff 	.word	0x080134ff
 801348c:	080134ff 	.word	0x080134ff
 8013490:	080134ff 	.word	0x080134ff
 8013494:	080134ff 	.word	0x080134ff
 8013498:	080134ff 	.word	0x080134ff
 801349c:	080134ff 	.word	0x080134ff
 80134a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80134a2:	d809      	bhi.n	80134b8 <_scanf_float+0x138>
 80134a4:	2b60      	cmp	r3, #96	@ 0x60
 80134a6:	d8b2      	bhi.n	801340e <_scanf_float+0x8e>
 80134a8:	2b54      	cmp	r3, #84	@ 0x54
 80134aa:	d07b      	beq.n	80135a4 <_scanf_float+0x224>
 80134ac:	2b59      	cmp	r3, #89	@ 0x59
 80134ae:	d199      	bne.n	80133e4 <_scanf_float+0x64>
 80134b0:	2d07      	cmp	r5, #7
 80134b2:	d197      	bne.n	80133e4 <_scanf_float+0x64>
 80134b4:	2508      	movs	r5, #8
 80134b6:	e02c      	b.n	8013512 <_scanf_float+0x192>
 80134b8:	2b74      	cmp	r3, #116	@ 0x74
 80134ba:	d073      	beq.n	80135a4 <_scanf_float+0x224>
 80134bc:	2b79      	cmp	r3, #121	@ 0x79
 80134be:	e7f6      	b.n	80134ae <_scanf_float+0x12e>
 80134c0:	6821      	ldr	r1, [r4, #0]
 80134c2:	05c8      	lsls	r0, r1, #23
 80134c4:	d51b      	bpl.n	80134fe <_scanf_float+0x17e>
 80134c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80134ca:	6021      	str	r1, [r4, #0]
 80134cc:	f109 0901 	add.w	r9, r9, #1
 80134d0:	f1bb 0f00 	cmp.w	fp, #0
 80134d4:	d003      	beq.n	80134de <_scanf_float+0x15e>
 80134d6:	3201      	adds	r2, #1
 80134d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80134dc:	60a2      	str	r2, [r4, #8]
 80134de:	68a3      	ldr	r3, [r4, #8]
 80134e0:	3b01      	subs	r3, #1
 80134e2:	60a3      	str	r3, [r4, #8]
 80134e4:	6923      	ldr	r3, [r4, #16]
 80134e6:	3301      	adds	r3, #1
 80134e8:	6123      	str	r3, [r4, #16]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	3b01      	subs	r3, #1
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	607b      	str	r3, [r7, #4]
 80134f2:	f340 8087 	ble.w	8013604 <_scanf_float+0x284>
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	3301      	adds	r3, #1
 80134fa:	603b      	str	r3, [r7, #0]
 80134fc:	e765      	b.n	80133ca <_scanf_float+0x4a>
 80134fe:	eb1a 0105 	adds.w	r1, sl, r5
 8013502:	f47f af6f 	bne.w	80133e4 <_scanf_float+0x64>
 8013506:	6822      	ldr	r2, [r4, #0]
 8013508:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801350c:	6022      	str	r2, [r4, #0]
 801350e:	460d      	mov	r5, r1
 8013510:	468a      	mov	sl, r1
 8013512:	f806 3b01 	strb.w	r3, [r6], #1
 8013516:	e7e2      	b.n	80134de <_scanf_float+0x15e>
 8013518:	6822      	ldr	r2, [r4, #0]
 801351a:	0610      	lsls	r0, r2, #24
 801351c:	f57f af62 	bpl.w	80133e4 <_scanf_float+0x64>
 8013520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013524:	6022      	str	r2, [r4, #0]
 8013526:	e7f4      	b.n	8013512 <_scanf_float+0x192>
 8013528:	f1ba 0f00 	cmp.w	sl, #0
 801352c:	d10e      	bne.n	801354c <_scanf_float+0x1cc>
 801352e:	f1b9 0f00 	cmp.w	r9, #0
 8013532:	d10e      	bne.n	8013552 <_scanf_float+0x1d2>
 8013534:	6822      	ldr	r2, [r4, #0]
 8013536:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801353a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801353e:	d108      	bne.n	8013552 <_scanf_float+0x1d2>
 8013540:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013544:	6022      	str	r2, [r4, #0]
 8013546:	f04f 0a01 	mov.w	sl, #1
 801354a:	e7e2      	b.n	8013512 <_scanf_float+0x192>
 801354c:	f1ba 0f02 	cmp.w	sl, #2
 8013550:	d055      	beq.n	80135fe <_scanf_float+0x27e>
 8013552:	2d01      	cmp	r5, #1
 8013554:	d002      	beq.n	801355c <_scanf_float+0x1dc>
 8013556:	2d04      	cmp	r5, #4
 8013558:	f47f af44 	bne.w	80133e4 <_scanf_float+0x64>
 801355c:	3501      	adds	r5, #1
 801355e:	b2ed      	uxtb	r5, r5
 8013560:	e7d7      	b.n	8013512 <_scanf_float+0x192>
 8013562:	f1ba 0f01 	cmp.w	sl, #1
 8013566:	f47f af3d 	bne.w	80133e4 <_scanf_float+0x64>
 801356a:	f04f 0a02 	mov.w	sl, #2
 801356e:	e7d0      	b.n	8013512 <_scanf_float+0x192>
 8013570:	b97d      	cbnz	r5, 8013592 <_scanf_float+0x212>
 8013572:	f1b9 0f00 	cmp.w	r9, #0
 8013576:	f47f af38 	bne.w	80133ea <_scanf_float+0x6a>
 801357a:	6822      	ldr	r2, [r4, #0]
 801357c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013580:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013584:	f040 8101 	bne.w	801378a <_scanf_float+0x40a>
 8013588:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801358c:	6022      	str	r2, [r4, #0]
 801358e:	2501      	movs	r5, #1
 8013590:	e7bf      	b.n	8013512 <_scanf_float+0x192>
 8013592:	2d03      	cmp	r5, #3
 8013594:	d0e2      	beq.n	801355c <_scanf_float+0x1dc>
 8013596:	2d05      	cmp	r5, #5
 8013598:	e7de      	b.n	8013558 <_scanf_float+0x1d8>
 801359a:	2d02      	cmp	r5, #2
 801359c:	f47f af22 	bne.w	80133e4 <_scanf_float+0x64>
 80135a0:	2503      	movs	r5, #3
 80135a2:	e7b6      	b.n	8013512 <_scanf_float+0x192>
 80135a4:	2d06      	cmp	r5, #6
 80135a6:	f47f af1d 	bne.w	80133e4 <_scanf_float+0x64>
 80135aa:	2507      	movs	r5, #7
 80135ac:	e7b1      	b.n	8013512 <_scanf_float+0x192>
 80135ae:	6822      	ldr	r2, [r4, #0]
 80135b0:	0591      	lsls	r1, r2, #22
 80135b2:	f57f af17 	bpl.w	80133e4 <_scanf_float+0x64>
 80135b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80135ba:	6022      	str	r2, [r4, #0]
 80135bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80135c0:	e7a7      	b.n	8013512 <_scanf_float+0x192>
 80135c2:	6822      	ldr	r2, [r4, #0]
 80135c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80135c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80135cc:	d006      	beq.n	80135dc <_scanf_float+0x25c>
 80135ce:	0550      	lsls	r0, r2, #21
 80135d0:	f57f af08 	bpl.w	80133e4 <_scanf_float+0x64>
 80135d4:	f1b9 0f00 	cmp.w	r9, #0
 80135d8:	f000 80d7 	beq.w	801378a <_scanf_float+0x40a>
 80135dc:	0591      	lsls	r1, r2, #22
 80135de:	bf58      	it	pl
 80135e0:	9902      	ldrpl	r1, [sp, #8]
 80135e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80135e6:	bf58      	it	pl
 80135e8:	eba9 0101 	subpl.w	r1, r9, r1
 80135ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80135f0:	bf58      	it	pl
 80135f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80135f6:	6022      	str	r2, [r4, #0]
 80135f8:	f04f 0900 	mov.w	r9, #0
 80135fc:	e789      	b.n	8013512 <_scanf_float+0x192>
 80135fe:	f04f 0a03 	mov.w	sl, #3
 8013602:	e786      	b.n	8013512 <_scanf_float+0x192>
 8013604:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013608:	4639      	mov	r1, r7
 801360a:	4640      	mov	r0, r8
 801360c:	4798      	blx	r3
 801360e:	2800      	cmp	r0, #0
 8013610:	f43f aedb 	beq.w	80133ca <_scanf_float+0x4a>
 8013614:	e6e6      	b.n	80133e4 <_scanf_float+0x64>
 8013616:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801361a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801361e:	463a      	mov	r2, r7
 8013620:	4640      	mov	r0, r8
 8013622:	4798      	blx	r3
 8013624:	6923      	ldr	r3, [r4, #16]
 8013626:	3b01      	subs	r3, #1
 8013628:	6123      	str	r3, [r4, #16]
 801362a:	e6e8      	b.n	80133fe <_scanf_float+0x7e>
 801362c:	1e6b      	subs	r3, r5, #1
 801362e:	2b06      	cmp	r3, #6
 8013630:	d824      	bhi.n	801367c <_scanf_float+0x2fc>
 8013632:	2d02      	cmp	r5, #2
 8013634:	d836      	bhi.n	80136a4 <_scanf_float+0x324>
 8013636:	9b01      	ldr	r3, [sp, #4]
 8013638:	429e      	cmp	r6, r3
 801363a:	f67f aee4 	bls.w	8013406 <_scanf_float+0x86>
 801363e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013646:	463a      	mov	r2, r7
 8013648:	4640      	mov	r0, r8
 801364a:	4798      	blx	r3
 801364c:	6923      	ldr	r3, [r4, #16]
 801364e:	3b01      	subs	r3, #1
 8013650:	6123      	str	r3, [r4, #16]
 8013652:	e7f0      	b.n	8013636 <_scanf_float+0x2b6>
 8013654:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013658:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801365c:	463a      	mov	r2, r7
 801365e:	4640      	mov	r0, r8
 8013660:	4798      	blx	r3
 8013662:	6923      	ldr	r3, [r4, #16]
 8013664:	3b01      	subs	r3, #1
 8013666:	6123      	str	r3, [r4, #16]
 8013668:	f10a 3aff 	add.w	sl, sl, #4294967295
 801366c:	fa5f fa8a 	uxtb.w	sl, sl
 8013670:	f1ba 0f02 	cmp.w	sl, #2
 8013674:	d1ee      	bne.n	8013654 <_scanf_float+0x2d4>
 8013676:	3d03      	subs	r5, #3
 8013678:	b2ed      	uxtb	r5, r5
 801367a:	1b76      	subs	r6, r6, r5
 801367c:	6823      	ldr	r3, [r4, #0]
 801367e:	05da      	lsls	r2, r3, #23
 8013680:	d530      	bpl.n	80136e4 <_scanf_float+0x364>
 8013682:	055b      	lsls	r3, r3, #21
 8013684:	d511      	bpl.n	80136aa <_scanf_float+0x32a>
 8013686:	9b01      	ldr	r3, [sp, #4]
 8013688:	429e      	cmp	r6, r3
 801368a:	f67f aebc 	bls.w	8013406 <_scanf_float+0x86>
 801368e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013696:	463a      	mov	r2, r7
 8013698:	4640      	mov	r0, r8
 801369a:	4798      	blx	r3
 801369c:	6923      	ldr	r3, [r4, #16]
 801369e:	3b01      	subs	r3, #1
 80136a0:	6123      	str	r3, [r4, #16]
 80136a2:	e7f0      	b.n	8013686 <_scanf_float+0x306>
 80136a4:	46aa      	mov	sl, r5
 80136a6:	46b3      	mov	fp, r6
 80136a8:	e7de      	b.n	8013668 <_scanf_float+0x2e8>
 80136aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80136ae:	6923      	ldr	r3, [r4, #16]
 80136b0:	2965      	cmp	r1, #101	@ 0x65
 80136b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80136b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80136ba:	6123      	str	r3, [r4, #16]
 80136bc:	d00c      	beq.n	80136d8 <_scanf_float+0x358>
 80136be:	2945      	cmp	r1, #69	@ 0x45
 80136c0:	d00a      	beq.n	80136d8 <_scanf_float+0x358>
 80136c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80136c6:	463a      	mov	r2, r7
 80136c8:	4640      	mov	r0, r8
 80136ca:	4798      	blx	r3
 80136cc:	6923      	ldr	r3, [r4, #16]
 80136ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80136d2:	3b01      	subs	r3, #1
 80136d4:	1eb5      	subs	r5, r6, #2
 80136d6:	6123      	str	r3, [r4, #16]
 80136d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80136dc:	463a      	mov	r2, r7
 80136de:	4640      	mov	r0, r8
 80136e0:	4798      	blx	r3
 80136e2:	462e      	mov	r6, r5
 80136e4:	6822      	ldr	r2, [r4, #0]
 80136e6:	f012 0210 	ands.w	r2, r2, #16
 80136ea:	d001      	beq.n	80136f0 <_scanf_float+0x370>
 80136ec:	2000      	movs	r0, #0
 80136ee:	e68b      	b.n	8013408 <_scanf_float+0x88>
 80136f0:	7032      	strb	r2, [r6, #0]
 80136f2:	6823      	ldr	r3, [r4, #0]
 80136f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80136f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80136fc:	d11a      	bne.n	8013734 <_scanf_float+0x3b4>
 80136fe:	9b02      	ldr	r3, [sp, #8]
 8013700:	454b      	cmp	r3, r9
 8013702:	eba3 0209 	sub.w	r2, r3, r9
 8013706:	d121      	bne.n	801374c <_scanf_float+0x3cc>
 8013708:	9901      	ldr	r1, [sp, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	4640      	mov	r0, r8
 801370e:	f002 fc41 	bl	8015f94 <_strtod_r>
 8013712:	9b03      	ldr	r3, [sp, #12]
 8013714:	6821      	ldr	r1, [r4, #0]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	f011 0f02 	tst.w	r1, #2
 801371c:	f103 0204 	add.w	r2, r3, #4
 8013720:	d01f      	beq.n	8013762 <_scanf_float+0x3e2>
 8013722:	9903      	ldr	r1, [sp, #12]
 8013724:	600a      	str	r2, [r1, #0]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	ed83 0b00 	vstr	d0, [r3]
 801372c:	68e3      	ldr	r3, [r4, #12]
 801372e:	3301      	adds	r3, #1
 8013730:	60e3      	str	r3, [r4, #12]
 8013732:	e7db      	b.n	80136ec <_scanf_float+0x36c>
 8013734:	9b04      	ldr	r3, [sp, #16]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d0e6      	beq.n	8013708 <_scanf_float+0x388>
 801373a:	9905      	ldr	r1, [sp, #20]
 801373c:	230a      	movs	r3, #10
 801373e:	3101      	adds	r1, #1
 8013740:	4640      	mov	r0, r8
 8013742:	f002 fca7 	bl	8016094 <_strtol_r>
 8013746:	9b04      	ldr	r3, [sp, #16]
 8013748:	9e05      	ldr	r6, [sp, #20]
 801374a:	1ac2      	subs	r2, r0, r3
 801374c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013750:	429e      	cmp	r6, r3
 8013752:	bf28      	it	cs
 8013754:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013758:	490d      	ldr	r1, [pc, #52]	@ (8013790 <_scanf_float+0x410>)
 801375a:	4630      	mov	r0, r6
 801375c:	f000 f94e 	bl	80139fc <siprintf>
 8013760:	e7d2      	b.n	8013708 <_scanf_float+0x388>
 8013762:	f011 0f04 	tst.w	r1, #4
 8013766:	9903      	ldr	r1, [sp, #12]
 8013768:	600a      	str	r2, [r1, #0]
 801376a:	d1dc      	bne.n	8013726 <_scanf_float+0x3a6>
 801376c:	eeb4 0b40 	vcmp.f64	d0, d0
 8013770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013774:	681d      	ldr	r5, [r3, #0]
 8013776:	d705      	bvc.n	8013784 <_scanf_float+0x404>
 8013778:	4806      	ldr	r0, [pc, #24]	@ (8013794 <_scanf_float+0x414>)
 801377a:	f000 fac5 	bl	8013d08 <nanf>
 801377e:	ed85 0a00 	vstr	s0, [r5]
 8013782:	e7d3      	b.n	801372c <_scanf_float+0x3ac>
 8013784:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013788:	e7f9      	b.n	801377e <_scanf_float+0x3fe>
 801378a:	f04f 0900 	mov.w	r9, #0
 801378e:	e630      	b.n	80133f2 <_scanf_float+0x72>
 8013790:	08017424 	.word	0x08017424
 8013794:	080177bd 	.word	0x080177bd

08013798 <std>:
 8013798:	2300      	movs	r3, #0
 801379a:	b510      	push	{r4, lr}
 801379c:	4604      	mov	r4, r0
 801379e:	e9c0 3300 	strd	r3, r3, [r0]
 80137a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137a6:	6083      	str	r3, [r0, #8]
 80137a8:	8181      	strh	r1, [r0, #12]
 80137aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80137ac:	81c2      	strh	r2, [r0, #14]
 80137ae:	6183      	str	r3, [r0, #24]
 80137b0:	4619      	mov	r1, r3
 80137b2:	2208      	movs	r2, #8
 80137b4:	305c      	adds	r0, #92	@ 0x5c
 80137b6:	f000 fa19 	bl	8013bec <memset>
 80137ba:	4b0d      	ldr	r3, [pc, #52]	@ (80137f0 <std+0x58>)
 80137bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80137be:	4b0d      	ldr	r3, [pc, #52]	@ (80137f4 <std+0x5c>)
 80137c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80137c2:	4b0d      	ldr	r3, [pc, #52]	@ (80137f8 <std+0x60>)
 80137c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80137c6:	4b0d      	ldr	r3, [pc, #52]	@ (80137fc <std+0x64>)
 80137c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80137ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013800 <std+0x68>)
 80137cc:	6224      	str	r4, [r4, #32]
 80137ce:	429c      	cmp	r4, r3
 80137d0:	d006      	beq.n	80137e0 <std+0x48>
 80137d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80137d6:	4294      	cmp	r4, r2
 80137d8:	d002      	beq.n	80137e0 <std+0x48>
 80137da:	33d0      	adds	r3, #208	@ 0xd0
 80137dc:	429c      	cmp	r4, r3
 80137de:	d105      	bne.n	80137ec <std+0x54>
 80137e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80137e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137e8:	f000 ba7c 	b.w	8013ce4 <__retarget_lock_init_recursive>
 80137ec:	bd10      	pop	{r4, pc}
 80137ee:	bf00      	nop
 80137f0:	08013a3d 	.word	0x08013a3d
 80137f4:	08013a5f 	.word	0x08013a5f
 80137f8:	08013a97 	.word	0x08013a97
 80137fc:	08013abb 	.word	0x08013abb
 8013800:	240019d0 	.word	0x240019d0

08013804 <stdio_exit_handler>:
 8013804:	4a02      	ldr	r2, [pc, #8]	@ (8013810 <stdio_exit_handler+0xc>)
 8013806:	4903      	ldr	r1, [pc, #12]	@ (8013814 <stdio_exit_handler+0x10>)
 8013808:	4803      	ldr	r0, [pc, #12]	@ (8013818 <stdio_exit_handler+0x14>)
 801380a:	f000 b869 	b.w	80138e0 <_fwalk_sglue>
 801380e:	bf00      	nop
 8013810:	24000188 	.word	0x24000188
 8013814:	080166d5 	.word	0x080166d5
 8013818:	24000198 	.word	0x24000198

0801381c <cleanup_stdio>:
 801381c:	6841      	ldr	r1, [r0, #4]
 801381e:	4b0c      	ldr	r3, [pc, #48]	@ (8013850 <cleanup_stdio+0x34>)
 8013820:	4299      	cmp	r1, r3
 8013822:	b510      	push	{r4, lr}
 8013824:	4604      	mov	r4, r0
 8013826:	d001      	beq.n	801382c <cleanup_stdio+0x10>
 8013828:	f002 ff54 	bl	80166d4 <_fflush_r>
 801382c:	68a1      	ldr	r1, [r4, #8]
 801382e:	4b09      	ldr	r3, [pc, #36]	@ (8013854 <cleanup_stdio+0x38>)
 8013830:	4299      	cmp	r1, r3
 8013832:	d002      	beq.n	801383a <cleanup_stdio+0x1e>
 8013834:	4620      	mov	r0, r4
 8013836:	f002 ff4d 	bl	80166d4 <_fflush_r>
 801383a:	68e1      	ldr	r1, [r4, #12]
 801383c:	4b06      	ldr	r3, [pc, #24]	@ (8013858 <cleanup_stdio+0x3c>)
 801383e:	4299      	cmp	r1, r3
 8013840:	d004      	beq.n	801384c <cleanup_stdio+0x30>
 8013842:	4620      	mov	r0, r4
 8013844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013848:	f002 bf44 	b.w	80166d4 <_fflush_r>
 801384c:	bd10      	pop	{r4, pc}
 801384e:	bf00      	nop
 8013850:	240019d0 	.word	0x240019d0
 8013854:	24001a38 	.word	0x24001a38
 8013858:	24001aa0 	.word	0x24001aa0

0801385c <global_stdio_init.part.0>:
 801385c:	b510      	push	{r4, lr}
 801385e:	4b0b      	ldr	r3, [pc, #44]	@ (801388c <global_stdio_init.part.0+0x30>)
 8013860:	4c0b      	ldr	r4, [pc, #44]	@ (8013890 <global_stdio_init.part.0+0x34>)
 8013862:	4a0c      	ldr	r2, [pc, #48]	@ (8013894 <global_stdio_init.part.0+0x38>)
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	4620      	mov	r0, r4
 8013868:	2200      	movs	r2, #0
 801386a:	2104      	movs	r1, #4
 801386c:	f7ff ff94 	bl	8013798 <std>
 8013870:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013874:	2201      	movs	r2, #1
 8013876:	2109      	movs	r1, #9
 8013878:	f7ff ff8e 	bl	8013798 <std>
 801387c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013880:	2202      	movs	r2, #2
 8013882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013886:	2112      	movs	r1, #18
 8013888:	f7ff bf86 	b.w	8013798 <std>
 801388c:	24001b08 	.word	0x24001b08
 8013890:	240019d0 	.word	0x240019d0
 8013894:	08013805 	.word	0x08013805

08013898 <__sfp_lock_acquire>:
 8013898:	4801      	ldr	r0, [pc, #4]	@ (80138a0 <__sfp_lock_acquire+0x8>)
 801389a:	f000 ba24 	b.w	8013ce6 <__retarget_lock_acquire_recursive>
 801389e:	bf00      	nop
 80138a0:	24001b11 	.word	0x24001b11

080138a4 <__sfp_lock_release>:
 80138a4:	4801      	ldr	r0, [pc, #4]	@ (80138ac <__sfp_lock_release+0x8>)
 80138a6:	f000 ba1f 	b.w	8013ce8 <__retarget_lock_release_recursive>
 80138aa:	bf00      	nop
 80138ac:	24001b11 	.word	0x24001b11

080138b0 <__sinit>:
 80138b0:	b510      	push	{r4, lr}
 80138b2:	4604      	mov	r4, r0
 80138b4:	f7ff fff0 	bl	8013898 <__sfp_lock_acquire>
 80138b8:	6a23      	ldr	r3, [r4, #32]
 80138ba:	b11b      	cbz	r3, 80138c4 <__sinit+0x14>
 80138bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138c0:	f7ff bff0 	b.w	80138a4 <__sfp_lock_release>
 80138c4:	4b04      	ldr	r3, [pc, #16]	@ (80138d8 <__sinit+0x28>)
 80138c6:	6223      	str	r3, [r4, #32]
 80138c8:	4b04      	ldr	r3, [pc, #16]	@ (80138dc <__sinit+0x2c>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d1f5      	bne.n	80138bc <__sinit+0xc>
 80138d0:	f7ff ffc4 	bl	801385c <global_stdio_init.part.0>
 80138d4:	e7f2      	b.n	80138bc <__sinit+0xc>
 80138d6:	bf00      	nop
 80138d8:	0801381d 	.word	0x0801381d
 80138dc:	24001b08 	.word	0x24001b08

080138e0 <_fwalk_sglue>:
 80138e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138e4:	4607      	mov	r7, r0
 80138e6:	4688      	mov	r8, r1
 80138e8:	4614      	mov	r4, r2
 80138ea:	2600      	movs	r6, #0
 80138ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138f0:	f1b9 0901 	subs.w	r9, r9, #1
 80138f4:	d505      	bpl.n	8013902 <_fwalk_sglue+0x22>
 80138f6:	6824      	ldr	r4, [r4, #0]
 80138f8:	2c00      	cmp	r4, #0
 80138fa:	d1f7      	bne.n	80138ec <_fwalk_sglue+0xc>
 80138fc:	4630      	mov	r0, r6
 80138fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013902:	89ab      	ldrh	r3, [r5, #12]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d907      	bls.n	8013918 <_fwalk_sglue+0x38>
 8013908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801390c:	3301      	adds	r3, #1
 801390e:	d003      	beq.n	8013918 <_fwalk_sglue+0x38>
 8013910:	4629      	mov	r1, r5
 8013912:	4638      	mov	r0, r7
 8013914:	47c0      	blx	r8
 8013916:	4306      	orrs	r6, r0
 8013918:	3568      	adds	r5, #104	@ 0x68
 801391a:	e7e9      	b.n	80138f0 <_fwalk_sglue+0x10>

0801391c <iprintf>:
 801391c:	b40f      	push	{r0, r1, r2, r3}
 801391e:	b507      	push	{r0, r1, r2, lr}
 8013920:	4906      	ldr	r1, [pc, #24]	@ (801393c <iprintf+0x20>)
 8013922:	ab04      	add	r3, sp, #16
 8013924:	6808      	ldr	r0, [r1, #0]
 8013926:	f853 2b04 	ldr.w	r2, [r3], #4
 801392a:	6881      	ldr	r1, [r0, #8]
 801392c:	9301      	str	r3, [sp, #4]
 801392e:	f002 fd35 	bl	801639c <_vfiprintf_r>
 8013932:	b003      	add	sp, #12
 8013934:	f85d eb04 	ldr.w	lr, [sp], #4
 8013938:	b004      	add	sp, #16
 801393a:	4770      	bx	lr
 801393c:	24000194 	.word	0x24000194

08013940 <_puts_r>:
 8013940:	6a03      	ldr	r3, [r0, #32]
 8013942:	b570      	push	{r4, r5, r6, lr}
 8013944:	6884      	ldr	r4, [r0, #8]
 8013946:	4605      	mov	r5, r0
 8013948:	460e      	mov	r6, r1
 801394a:	b90b      	cbnz	r3, 8013950 <_puts_r+0x10>
 801394c:	f7ff ffb0 	bl	80138b0 <__sinit>
 8013950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013952:	07db      	lsls	r3, r3, #31
 8013954:	d405      	bmi.n	8013962 <_puts_r+0x22>
 8013956:	89a3      	ldrh	r3, [r4, #12]
 8013958:	0598      	lsls	r0, r3, #22
 801395a:	d402      	bmi.n	8013962 <_puts_r+0x22>
 801395c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801395e:	f000 f9c2 	bl	8013ce6 <__retarget_lock_acquire_recursive>
 8013962:	89a3      	ldrh	r3, [r4, #12]
 8013964:	0719      	lsls	r1, r3, #28
 8013966:	d502      	bpl.n	801396e <_puts_r+0x2e>
 8013968:	6923      	ldr	r3, [r4, #16]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d135      	bne.n	80139da <_puts_r+0x9a>
 801396e:	4621      	mov	r1, r4
 8013970:	4628      	mov	r0, r5
 8013972:	f000 f8e5 	bl	8013b40 <__swsetup_r>
 8013976:	b380      	cbz	r0, 80139da <_puts_r+0x9a>
 8013978:	f04f 35ff 	mov.w	r5, #4294967295
 801397c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801397e:	07da      	lsls	r2, r3, #31
 8013980:	d405      	bmi.n	801398e <_puts_r+0x4e>
 8013982:	89a3      	ldrh	r3, [r4, #12]
 8013984:	059b      	lsls	r3, r3, #22
 8013986:	d402      	bmi.n	801398e <_puts_r+0x4e>
 8013988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801398a:	f000 f9ad 	bl	8013ce8 <__retarget_lock_release_recursive>
 801398e:	4628      	mov	r0, r5
 8013990:	bd70      	pop	{r4, r5, r6, pc}
 8013992:	2b00      	cmp	r3, #0
 8013994:	da04      	bge.n	80139a0 <_puts_r+0x60>
 8013996:	69a2      	ldr	r2, [r4, #24]
 8013998:	429a      	cmp	r2, r3
 801399a:	dc17      	bgt.n	80139cc <_puts_r+0x8c>
 801399c:	290a      	cmp	r1, #10
 801399e:	d015      	beq.n	80139cc <_puts_r+0x8c>
 80139a0:	6823      	ldr	r3, [r4, #0]
 80139a2:	1c5a      	adds	r2, r3, #1
 80139a4:	6022      	str	r2, [r4, #0]
 80139a6:	7019      	strb	r1, [r3, #0]
 80139a8:	68a3      	ldr	r3, [r4, #8]
 80139aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80139ae:	3b01      	subs	r3, #1
 80139b0:	60a3      	str	r3, [r4, #8]
 80139b2:	2900      	cmp	r1, #0
 80139b4:	d1ed      	bne.n	8013992 <_puts_r+0x52>
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	da11      	bge.n	80139de <_puts_r+0x9e>
 80139ba:	4622      	mov	r2, r4
 80139bc:	210a      	movs	r1, #10
 80139be:	4628      	mov	r0, r5
 80139c0:	f000 f87f 	bl	8013ac2 <__swbuf_r>
 80139c4:	3001      	adds	r0, #1
 80139c6:	d0d7      	beq.n	8013978 <_puts_r+0x38>
 80139c8:	250a      	movs	r5, #10
 80139ca:	e7d7      	b.n	801397c <_puts_r+0x3c>
 80139cc:	4622      	mov	r2, r4
 80139ce:	4628      	mov	r0, r5
 80139d0:	f000 f877 	bl	8013ac2 <__swbuf_r>
 80139d4:	3001      	adds	r0, #1
 80139d6:	d1e7      	bne.n	80139a8 <_puts_r+0x68>
 80139d8:	e7ce      	b.n	8013978 <_puts_r+0x38>
 80139da:	3e01      	subs	r6, #1
 80139dc:	e7e4      	b.n	80139a8 <_puts_r+0x68>
 80139de:	6823      	ldr	r3, [r4, #0]
 80139e0:	1c5a      	adds	r2, r3, #1
 80139e2:	6022      	str	r2, [r4, #0]
 80139e4:	220a      	movs	r2, #10
 80139e6:	701a      	strb	r2, [r3, #0]
 80139e8:	e7ee      	b.n	80139c8 <_puts_r+0x88>
	...

080139ec <puts>:
 80139ec:	4b02      	ldr	r3, [pc, #8]	@ (80139f8 <puts+0xc>)
 80139ee:	4601      	mov	r1, r0
 80139f0:	6818      	ldr	r0, [r3, #0]
 80139f2:	f7ff bfa5 	b.w	8013940 <_puts_r>
 80139f6:	bf00      	nop
 80139f8:	24000194 	.word	0x24000194

080139fc <siprintf>:
 80139fc:	b40e      	push	{r1, r2, r3}
 80139fe:	b500      	push	{lr}
 8013a00:	b09c      	sub	sp, #112	@ 0x70
 8013a02:	ab1d      	add	r3, sp, #116	@ 0x74
 8013a04:	9002      	str	r0, [sp, #8]
 8013a06:	9006      	str	r0, [sp, #24]
 8013a08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013a0c:	4809      	ldr	r0, [pc, #36]	@ (8013a34 <siprintf+0x38>)
 8013a0e:	9107      	str	r1, [sp, #28]
 8013a10:	9104      	str	r1, [sp, #16]
 8013a12:	4909      	ldr	r1, [pc, #36]	@ (8013a38 <siprintf+0x3c>)
 8013a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a18:	9105      	str	r1, [sp, #20]
 8013a1a:	6800      	ldr	r0, [r0, #0]
 8013a1c:	9301      	str	r3, [sp, #4]
 8013a1e:	a902      	add	r1, sp, #8
 8013a20:	f002 fb96 	bl	8016150 <_svfiprintf_r>
 8013a24:	9b02      	ldr	r3, [sp, #8]
 8013a26:	2200      	movs	r2, #0
 8013a28:	701a      	strb	r2, [r3, #0]
 8013a2a:	b01c      	add	sp, #112	@ 0x70
 8013a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a30:	b003      	add	sp, #12
 8013a32:	4770      	bx	lr
 8013a34:	24000194 	.word	0x24000194
 8013a38:	ffff0208 	.word	0xffff0208

08013a3c <__sread>:
 8013a3c:	b510      	push	{r4, lr}
 8013a3e:	460c      	mov	r4, r1
 8013a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a44:	f000 f900 	bl	8013c48 <_read_r>
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	bfab      	itete	ge
 8013a4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8013a50:	181b      	addge	r3, r3, r0
 8013a52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013a56:	bfac      	ite	ge
 8013a58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013a5a:	81a3      	strhlt	r3, [r4, #12]
 8013a5c:	bd10      	pop	{r4, pc}

08013a5e <__swrite>:
 8013a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a62:	461f      	mov	r7, r3
 8013a64:	898b      	ldrh	r3, [r1, #12]
 8013a66:	05db      	lsls	r3, r3, #23
 8013a68:	4605      	mov	r5, r0
 8013a6a:	460c      	mov	r4, r1
 8013a6c:	4616      	mov	r6, r2
 8013a6e:	d505      	bpl.n	8013a7c <__swrite+0x1e>
 8013a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a74:	2302      	movs	r3, #2
 8013a76:	2200      	movs	r2, #0
 8013a78:	f000 f8d4 	bl	8013c24 <_lseek_r>
 8013a7c:	89a3      	ldrh	r3, [r4, #12]
 8013a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013a86:	81a3      	strh	r3, [r4, #12]
 8013a88:	4632      	mov	r2, r6
 8013a8a:	463b      	mov	r3, r7
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a92:	f000 b8eb 	b.w	8013c6c <_write_r>

08013a96 <__sseek>:
 8013a96:	b510      	push	{r4, lr}
 8013a98:	460c      	mov	r4, r1
 8013a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a9e:	f000 f8c1 	bl	8013c24 <_lseek_r>
 8013aa2:	1c43      	adds	r3, r0, #1
 8013aa4:	89a3      	ldrh	r3, [r4, #12]
 8013aa6:	bf15      	itete	ne
 8013aa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013aaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013aae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013ab2:	81a3      	strheq	r3, [r4, #12]
 8013ab4:	bf18      	it	ne
 8013ab6:	81a3      	strhne	r3, [r4, #12]
 8013ab8:	bd10      	pop	{r4, pc}

08013aba <__sclose>:
 8013aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013abe:	f000 b8a1 	b.w	8013c04 <_close_r>

08013ac2 <__swbuf_r>:
 8013ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac4:	460e      	mov	r6, r1
 8013ac6:	4614      	mov	r4, r2
 8013ac8:	4605      	mov	r5, r0
 8013aca:	b118      	cbz	r0, 8013ad4 <__swbuf_r+0x12>
 8013acc:	6a03      	ldr	r3, [r0, #32]
 8013ace:	b90b      	cbnz	r3, 8013ad4 <__swbuf_r+0x12>
 8013ad0:	f7ff feee 	bl	80138b0 <__sinit>
 8013ad4:	69a3      	ldr	r3, [r4, #24]
 8013ad6:	60a3      	str	r3, [r4, #8]
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	071a      	lsls	r2, r3, #28
 8013adc:	d501      	bpl.n	8013ae2 <__swbuf_r+0x20>
 8013ade:	6923      	ldr	r3, [r4, #16]
 8013ae0:	b943      	cbnz	r3, 8013af4 <__swbuf_r+0x32>
 8013ae2:	4621      	mov	r1, r4
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	f000 f82b 	bl	8013b40 <__swsetup_r>
 8013aea:	b118      	cbz	r0, 8013af4 <__swbuf_r+0x32>
 8013aec:	f04f 37ff 	mov.w	r7, #4294967295
 8013af0:	4638      	mov	r0, r7
 8013af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013af4:	6823      	ldr	r3, [r4, #0]
 8013af6:	6922      	ldr	r2, [r4, #16]
 8013af8:	1a98      	subs	r0, r3, r2
 8013afa:	6963      	ldr	r3, [r4, #20]
 8013afc:	b2f6      	uxtb	r6, r6
 8013afe:	4283      	cmp	r3, r0
 8013b00:	4637      	mov	r7, r6
 8013b02:	dc05      	bgt.n	8013b10 <__swbuf_r+0x4e>
 8013b04:	4621      	mov	r1, r4
 8013b06:	4628      	mov	r0, r5
 8013b08:	f002 fde4 	bl	80166d4 <_fflush_r>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d1ed      	bne.n	8013aec <__swbuf_r+0x2a>
 8013b10:	68a3      	ldr	r3, [r4, #8]
 8013b12:	3b01      	subs	r3, #1
 8013b14:	60a3      	str	r3, [r4, #8]
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	1c5a      	adds	r2, r3, #1
 8013b1a:	6022      	str	r2, [r4, #0]
 8013b1c:	701e      	strb	r6, [r3, #0]
 8013b1e:	6962      	ldr	r2, [r4, #20]
 8013b20:	1c43      	adds	r3, r0, #1
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d004      	beq.n	8013b30 <__swbuf_r+0x6e>
 8013b26:	89a3      	ldrh	r3, [r4, #12]
 8013b28:	07db      	lsls	r3, r3, #31
 8013b2a:	d5e1      	bpl.n	8013af0 <__swbuf_r+0x2e>
 8013b2c:	2e0a      	cmp	r6, #10
 8013b2e:	d1df      	bne.n	8013af0 <__swbuf_r+0x2e>
 8013b30:	4621      	mov	r1, r4
 8013b32:	4628      	mov	r0, r5
 8013b34:	f002 fdce 	bl	80166d4 <_fflush_r>
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	d0d9      	beq.n	8013af0 <__swbuf_r+0x2e>
 8013b3c:	e7d6      	b.n	8013aec <__swbuf_r+0x2a>
	...

08013b40 <__swsetup_r>:
 8013b40:	b538      	push	{r3, r4, r5, lr}
 8013b42:	4b29      	ldr	r3, [pc, #164]	@ (8013be8 <__swsetup_r+0xa8>)
 8013b44:	4605      	mov	r5, r0
 8013b46:	6818      	ldr	r0, [r3, #0]
 8013b48:	460c      	mov	r4, r1
 8013b4a:	b118      	cbz	r0, 8013b54 <__swsetup_r+0x14>
 8013b4c:	6a03      	ldr	r3, [r0, #32]
 8013b4e:	b90b      	cbnz	r3, 8013b54 <__swsetup_r+0x14>
 8013b50:	f7ff feae 	bl	80138b0 <__sinit>
 8013b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b58:	0719      	lsls	r1, r3, #28
 8013b5a:	d422      	bmi.n	8013ba2 <__swsetup_r+0x62>
 8013b5c:	06da      	lsls	r2, r3, #27
 8013b5e:	d407      	bmi.n	8013b70 <__swsetup_r+0x30>
 8013b60:	2209      	movs	r2, #9
 8013b62:	602a      	str	r2, [r5, #0]
 8013b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b68:	81a3      	strh	r3, [r4, #12]
 8013b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b6e:	e033      	b.n	8013bd8 <__swsetup_r+0x98>
 8013b70:	0758      	lsls	r0, r3, #29
 8013b72:	d512      	bpl.n	8013b9a <__swsetup_r+0x5a>
 8013b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b76:	b141      	cbz	r1, 8013b8a <__swsetup_r+0x4a>
 8013b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b7c:	4299      	cmp	r1, r3
 8013b7e:	d002      	beq.n	8013b86 <__swsetup_r+0x46>
 8013b80:	4628      	mov	r0, r5
 8013b82:	f000 fea7 	bl	80148d4 <_free_r>
 8013b86:	2300      	movs	r3, #0
 8013b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b8a:	89a3      	ldrh	r3, [r4, #12]
 8013b8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b90:	81a3      	strh	r3, [r4, #12]
 8013b92:	2300      	movs	r3, #0
 8013b94:	6063      	str	r3, [r4, #4]
 8013b96:	6923      	ldr	r3, [r4, #16]
 8013b98:	6023      	str	r3, [r4, #0]
 8013b9a:	89a3      	ldrh	r3, [r4, #12]
 8013b9c:	f043 0308 	orr.w	r3, r3, #8
 8013ba0:	81a3      	strh	r3, [r4, #12]
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	b94b      	cbnz	r3, 8013bba <__swsetup_r+0x7a>
 8013ba6:	89a3      	ldrh	r3, [r4, #12]
 8013ba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013bb0:	d003      	beq.n	8013bba <__swsetup_r+0x7a>
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	f002 fddb 	bl	8016770 <__smakebuf_r>
 8013bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bbe:	f013 0201 	ands.w	r2, r3, #1
 8013bc2:	d00a      	beq.n	8013bda <__swsetup_r+0x9a>
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	60a2      	str	r2, [r4, #8]
 8013bc8:	6962      	ldr	r2, [r4, #20]
 8013bca:	4252      	negs	r2, r2
 8013bcc:	61a2      	str	r2, [r4, #24]
 8013bce:	6922      	ldr	r2, [r4, #16]
 8013bd0:	b942      	cbnz	r2, 8013be4 <__swsetup_r+0xa4>
 8013bd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013bd6:	d1c5      	bne.n	8013b64 <__swsetup_r+0x24>
 8013bd8:	bd38      	pop	{r3, r4, r5, pc}
 8013bda:	0799      	lsls	r1, r3, #30
 8013bdc:	bf58      	it	pl
 8013bde:	6962      	ldrpl	r2, [r4, #20]
 8013be0:	60a2      	str	r2, [r4, #8]
 8013be2:	e7f4      	b.n	8013bce <__swsetup_r+0x8e>
 8013be4:	2000      	movs	r0, #0
 8013be6:	e7f7      	b.n	8013bd8 <__swsetup_r+0x98>
 8013be8:	24000194 	.word	0x24000194

08013bec <memset>:
 8013bec:	4402      	add	r2, r0
 8013bee:	4603      	mov	r3, r0
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d100      	bne.n	8013bf6 <memset+0xa>
 8013bf4:	4770      	bx	lr
 8013bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8013bfa:	e7f9      	b.n	8013bf0 <memset+0x4>

08013bfc <_localeconv_r>:
 8013bfc:	4800      	ldr	r0, [pc, #0]	@ (8013c00 <_localeconv_r+0x4>)
 8013bfe:	4770      	bx	lr
 8013c00:	240002d4 	.word	0x240002d4

08013c04 <_close_r>:
 8013c04:	b538      	push	{r3, r4, r5, lr}
 8013c06:	4d06      	ldr	r5, [pc, #24]	@ (8013c20 <_close_r+0x1c>)
 8013c08:	2300      	movs	r3, #0
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	4608      	mov	r0, r1
 8013c0e:	602b      	str	r3, [r5, #0]
 8013c10:	f7f4 f979 	bl	8007f06 <_close>
 8013c14:	1c43      	adds	r3, r0, #1
 8013c16:	d102      	bne.n	8013c1e <_close_r+0x1a>
 8013c18:	682b      	ldr	r3, [r5, #0]
 8013c1a:	b103      	cbz	r3, 8013c1e <_close_r+0x1a>
 8013c1c:	6023      	str	r3, [r4, #0]
 8013c1e:	bd38      	pop	{r3, r4, r5, pc}
 8013c20:	24001b0c 	.word	0x24001b0c

08013c24 <_lseek_r>:
 8013c24:	b538      	push	{r3, r4, r5, lr}
 8013c26:	4d07      	ldr	r5, [pc, #28]	@ (8013c44 <_lseek_r+0x20>)
 8013c28:	4604      	mov	r4, r0
 8013c2a:	4608      	mov	r0, r1
 8013c2c:	4611      	mov	r1, r2
 8013c2e:	2200      	movs	r2, #0
 8013c30:	602a      	str	r2, [r5, #0]
 8013c32:	461a      	mov	r2, r3
 8013c34:	f7f4 f98e 	bl	8007f54 <_lseek>
 8013c38:	1c43      	adds	r3, r0, #1
 8013c3a:	d102      	bne.n	8013c42 <_lseek_r+0x1e>
 8013c3c:	682b      	ldr	r3, [r5, #0]
 8013c3e:	b103      	cbz	r3, 8013c42 <_lseek_r+0x1e>
 8013c40:	6023      	str	r3, [r4, #0]
 8013c42:	bd38      	pop	{r3, r4, r5, pc}
 8013c44:	24001b0c 	.word	0x24001b0c

08013c48 <_read_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4d07      	ldr	r5, [pc, #28]	@ (8013c68 <_read_r+0x20>)
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	4608      	mov	r0, r1
 8013c50:	4611      	mov	r1, r2
 8013c52:	2200      	movs	r2, #0
 8013c54:	602a      	str	r2, [r5, #0]
 8013c56:	461a      	mov	r2, r3
 8013c58:	f7f4 f938 	bl	8007ecc <_read>
 8013c5c:	1c43      	adds	r3, r0, #1
 8013c5e:	d102      	bne.n	8013c66 <_read_r+0x1e>
 8013c60:	682b      	ldr	r3, [r5, #0]
 8013c62:	b103      	cbz	r3, 8013c66 <_read_r+0x1e>
 8013c64:	6023      	str	r3, [r4, #0]
 8013c66:	bd38      	pop	{r3, r4, r5, pc}
 8013c68:	24001b0c 	.word	0x24001b0c

08013c6c <_write_r>:
 8013c6c:	b538      	push	{r3, r4, r5, lr}
 8013c6e:	4d07      	ldr	r5, [pc, #28]	@ (8013c8c <_write_r+0x20>)
 8013c70:	4604      	mov	r4, r0
 8013c72:	4608      	mov	r0, r1
 8013c74:	4611      	mov	r1, r2
 8013c76:	2200      	movs	r2, #0
 8013c78:	602a      	str	r2, [r5, #0]
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	f7f3 f853 	bl	8006d26 <_write>
 8013c80:	1c43      	adds	r3, r0, #1
 8013c82:	d102      	bne.n	8013c8a <_write_r+0x1e>
 8013c84:	682b      	ldr	r3, [r5, #0]
 8013c86:	b103      	cbz	r3, 8013c8a <_write_r+0x1e>
 8013c88:	6023      	str	r3, [r4, #0]
 8013c8a:	bd38      	pop	{r3, r4, r5, pc}
 8013c8c:	24001b0c 	.word	0x24001b0c

08013c90 <__errno>:
 8013c90:	4b01      	ldr	r3, [pc, #4]	@ (8013c98 <__errno+0x8>)
 8013c92:	6818      	ldr	r0, [r3, #0]
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	24000194 	.word	0x24000194

08013c9c <__libc_init_array>:
 8013c9c:	b570      	push	{r4, r5, r6, lr}
 8013c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8013cd4 <__libc_init_array+0x38>)
 8013ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8013cd8 <__libc_init_array+0x3c>)
 8013ca2:	1b64      	subs	r4, r4, r5
 8013ca4:	10a4      	asrs	r4, r4, #2
 8013ca6:	2600      	movs	r6, #0
 8013ca8:	42a6      	cmp	r6, r4
 8013caa:	d109      	bne.n	8013cc0 <__libc_init_array+0x24>
 8013cac:	4d0b      	ldr	r5, [pc, #44]	@ (8013cdc <__libc_init_array+0x40>)
 8013cae:	4c0c      	ldr	r4, [pc, #48]	@ (8013ce0 <__libc_init_array+0x44>)
 8013cb0:	f003 fa20 	bl	80170f4 <_init>
 8013cb4:	1b64      	subs	r4, r4, r5
 8013cb6:	10a4      	asrs	r4, r4, #2
 8013cb8:	2600      	movs	r6, #0
 8013cba:	42a6      	cmp	r6, r4
 8013cbc:	d105      	bne.n	8013cca <__libc_init_array+0x2e>
 8013cbe:	bd70      	pop	{r4, r5, r6, pc}
 8013cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cc4:	4798      	blx	r3
 8013cc6:	3601      	adds	r6, #1
 8013cc8:	e7ee      	b.n	8013ca8 <__libc_init_array+0xc>
 8013cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cce:	4798      	blx	r3
 8013cd0:	3601      	adds	r6, #1
 8013cd2:	e7f2      	b.n	8013cba <__libc_init_array+0x1e>
 8013cd4:	08017828 	.word	0x08017828
 8013cd8:	08017828 	.word	0x08017828
 8013cdc:	08017828 	.word	0x08017828
 8013ce0:	0801782c 	.word	0x0801782c

08013ce4 <__retarget_lock_init_recursive>:
 8013ce4:	4770      	bx	lr

08013ce6 <__retarget_lock_acquire_recursive>:
 8013ce6:	4770      	bx	lr

08013ce8 <__retarget_lock_release_recursive>:
 8013ce8:	4770      	bx	lr

08013cea <memcpy>:
 8013cea:	440a      	add	r2, r1
 8013cec:	4291      	cmp	r1, r2
 8013cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8013cf2:	d100      	bne.n	8013cf6 <memcpy+0xc>
 8013cf4:	4770      	bx	lr
 8013cf6:	b510      	push	{r4, lr}
 8013cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d00:	4291      	cmp	r1, r2
 8013d02:	d1f9      	bne.n	8013cf8 <memcpy+0xe>
 8013d04:	bd10      	pop	{r4, pc}
	...

08013d08 <nanf>:
 8013d08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013d10 <nanf+0x8>
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	7fc00000 	.word	0x7fc00000

08013d14 <quorem>:
 8013d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d18:	6903      	ldr	r3, [r0, #16]
 8013d1a:	690c      	ldr	r4, [r1, #16]
 8013d1c:	42a3      	cmp	r3, r4
 8013d1e:	4607      	mov	r7, r0
 8013d20:	db7e      	blt.n	8013e20 <quorem+0x10c>
 8013d22:	3c01      	subs	r4, #1
 8013d24:	f101 0814 	add.w	r8, r1, #20
 8013d28:	00a3      	lsls	r3, r4, #2
 8013d2a:	f100 0514 	add.w	r5, r0, #20
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d34:	9301      	str	r3, [sp, #4]
 8013d36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d3e:	3301      	adds	r3, #1
 8013d40:	429a      	cmp	r2, r3
 8013d42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013d46:	fbb2 f6f3 	udiv	r6, r2, r3
 8013d4a:	d32e      	bcc.n	8013daa <quorem+0x96>
 8013d4c:	f04f 0a00 	mov.w	sl, #0
 8013d50:	46c4      	mov	ip, r8
 8013d52:	46ae      	mov	lr, r5
 8013d54:	46d3      	mov	fp, sl
 8013d56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013d5a:	b298      	uxth	r0, r3
 8013d5c:	fb06 a000 	mla	r0, r6, r0, sl
 8013d60:	0c02      	lsrs	r2, r0, #16
 8013d62:	0c1b      	lsrs	r3, r3, #16
 8013d64:	fb06 2303 	mla	r3, r6, r3, r2
 8013d68:	f8de 2000 	ldr.w	r2, [lr]
 8013d6c:	b280      	uxth	r0, r0
 8013d6e:	b292      	uxth	r2, r2
 8013d70:	1a12      	subs	r2, r2, r0
 8013d72:	445a      	add	r2, fp
 8013d74:	f8de 0000 	ldr.w	r0, [lr]
 8013d78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013d82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013d86:	b292      	uxth	r2, r2
 8013d88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013d8c:	45e1      	cmp	r9, ip
 8013d8e:	f84e 2b04 	str.w	r2, [lr], #4
 8013d92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013d96:	d2de      	bcs.n	8013d56 <quorem+0x42>
 8013d98:	9b00      	ldr	r3, [sp, #0]
 8013d9a:	58eb      	ldr	r3, [r5, r3]
 8013d9c:	b92b      	cbnz	r3, 8013daa <quorem+0x96>
 8013d9e:	9b01      	ldr	r3, [sp, #4]
 8013da0:	3b04      	subs	r3, #4
 8013da2:	429d      	cmp	r5, r3
 8013da4:	461a      	mov	r2, r3
 8013da6:	d32f      	bcc.n	8013e08 <quorem+0xf4>
 8013da8:	613c      	str	r4, [r7, #16]
 8013daa:	4638      	mov	r0, r7
 8013dac:	f001 f956 	bl	801505c <__mcmp>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	db25      	blt.n	8013e00 <quorem+0xec>
 8013db4:	4629      	mov	r1, r5
 8013db6:	2000      	movs	r0, #0
 8013db8:	f858 2b04 	ldr.w	r2, [r8], #4
 8013dbc:	f8d1 c000 	ldr.w	ip, [r1]
 8013dc0:	fa1f fe82 	uxth.w	lr, r2
 8013dc4:	fa1f f38c 	uxth.w	r3, ip
 8013dc8:	eba3 030e 	sub.w	r3, r3, lr
 8013dcc:	4403      	add	r3, r0
 8013dce:	0c12      	lsrs	r2, r2, #16
 8013dd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013dd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013dde:	45c1      	cmp	r9, r8
 8013de0:	f841 3b04 	str.w	r3, [r1], #4
 8013de4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013de8:	d2e6      	bcs.n	8013db8 <quorem+0xa4>
 8013dea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013df2:	b922      	cbnz	r2, 8013dfe <quorem+0xea>
 8013df4:	3b04      	subs	r3, #4
 8013df6:	429d      	cmp	r5, r3
 8013df8:	461a      	mov	r2, r3
 8013dfa:	d30b      	bcc.n	8013e14 <quorem+0x100>
 8013dfc:	613c      	str	r4, [r7, #16]
 8013dfe:	3601      	adds	r6, #1
 8013e00:	4630      	mov	r0, r6
 8013e02:	b003      	add	sp, #12
 8013e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e08:	6812      	ldr	r2, [r2, #0]
 8013e0a:	3b04      	subs	r3, #4
 8013e0c:	2a00      	cmp	r2, #0
 8013e0e:	d1cb      	bne.n	8013da8 <quorem+0x94>
 8013e10:	3c01      	subs	r4, #1
 8013e12:	e7c6      	b.n	8013da2 <quorem+0x8e>
 8013e14:	6812      	ldr	r2, [r2, #0]
 8013e16:	3b04      	subs	r3, #4
 8013e18:	2a00      	cmp	r2, #0
 8013e1a:	d1ef      	bne.n	8013dfc <quorem+0xe8>
 8013e1c:	3c01      	subs	r4, #1
 8013e1e:	e7ea      	b.n	8013df6 <quorem+0xe2>
 8013e20:	2000      	movs	r0, #0
 8013e22:	e7ee      	b.n	8013e02 <quorem+0xee>
 8013e24:	0000      	movs	r0, r0
	...

08013e28 <_dtoa_r>:
 8013e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2c:	ed2d 8b02 	vpush	{d8}
 8013e30:	69c7      	ldr	r7, [r0, #28]
 8013e32:	b091      	sub	sp, #68	@ 0x44
 8013e34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013e38:	ec55 4b10 	vmov	r4, r5, d0
 8013e3c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013e3e:	9107      	str	r1, [sp, #28]
 8013e40:	4681      	mov	r9, r0
 8013e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e44:	930d      	str	r3, [sp, #52]	@ 0x34
 8013e46:	b97f      	cbnz	r7, 8013e68 <_dtoa_r+0x40>
 8013e48:	2010      	movs	r0, #16
 8013e4a:	f000 fd8d 	bl	8014968 <malloc>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	f8c9 001c 	str.w	r0, [r9, #28]
 8013e54:	b920      	cbnz	r0, 8013e60 <_dtoa_r+0x38>
 8013e56:	4ba0      	ldr	r3, [pc, #640]	@ (80140d8 <_dtoa_r+0x2b0>)
 8013e58:	21ef      	movs	r1, #239	@ 0xef
 8013e5a:	48a0      	ldr	r0, [pc, #640]	@ (80140dc <_dtoa_r+0x2b4>)
 8013e5c:	f002 fd2c 	bl	80168b8 <__assert_func>
 8013e60:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013e64:	6007      	str	r7, [r0, #0]
 8013e66:	60c7      	str	r7, [r0, #12]
 8013e68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013e6c:	6819      	ldr	r1, [r3, #0]
 8013e6e:	b159      	cbz	r1, 8013e88 <_dtoa_r+0x60>
 8013e70:	685a      	ldr	r2, [r3, #4]
 8013e72:	604a      	str	r2, [r1, #4]
 8013e74:	2301      	movs	r3, #1
 8013e76:	4093      	lsls	r3, r2
 8013e78:	608b      	str	r3, [r1, #8]
 8013e7a:	4648      	mov	r0, r9
 8013e7c:	f000 fe6a 	bl	8014b54 <_Bfree>
 8013e80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013e84:	2200      	movs	r2, #0
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	1e2b      	subs	r3, r5, #0
 8013e8a:	bfbb      	ittet	lt
 8013e8c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013e90:	9303      	strlt	r3, [sp, #12]
 8013e92:	2300      	movge	r3, #0
 8013e94:	2201      	movlt	r2, #1
 8013e96:	bfac      	ite	ge
 8013e98:	6033      	strge	r3, [r6, #0]
 8013e9a:	6032      	strlt	r2, [r6, #0]
 8013e9c:	4b90      	ldr	r3, [pc, #576]	@ (80140e0 <_dtoa_r+0x2b8>)
 8013e9e:	9e03      	ldr	r6, [sp, #12]
 8013ea0:	43b3      	bics	r3, r6
 8013ea2:	d110      	bne.n	8013ec6 <_dtoa_r+0x9e>
 8013ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ea6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013eaa:	6013      	str	r3, [r2, #0]
 8013eac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013eb0:	4323      	orrs	r3, r4
 8013eb2:	f000 84de 	beq.w	8014872 <_dtoa_r+0xa4a>
 8013eb6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013eb8:	4f8a      	ldr	r7, [pc, #552]	@ (80140e4 <_dtoa_r+0x2bc>)
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	f000 84e0 	beq.w	8014880 <_dtoa_r+0xa58>
 8013ec0:	1cfb      	adds	r3, r7, #3
 8013ec2:	f000 bcdb 	b.w	801487c <_dtoa_r+0xa54>
 8013ec6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013eca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed2:	d10a      	bne.n	8013eea <_dtoa_r+0xc2>
 8013ed4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	6013      	str	r3, [r2, #0]
 8013eda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013edc:	b113      	cbz	r3, 8013ee4 <_dtoa_r+0xbc>
 8013ede:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013ee0:	4b81      	ldr	r3, [pc, #516]	@ (80140e8 <_dtoa_r+0x2c0>)
 8013ee2:	6013      	str	r3, [r2, #0]
 8013ee4:	4f81      	ldr	r7, [pc, #516]	@ (80140ec <_dtoa_r+0x2c4>)
 8013ee6:	f000 bccb 	b.w	8014880 <_dtoa_r+0xa58>
 8013eea:	aa0e      	add	r2, sp, #56	@ 0x38
 8013eec:	a90f      	add	r1, sp, #60	@ 0x3c
 8013eee:	4648      	mov	r0, r9
 8013ef0:	eeb0 0b48 	vmov.f64	d0, d8
 8013ef4:	f001 f9d2 	bl	801529c <__d2b>
 8013ef8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013efe:	9001      	str	r0, [sp, #4]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d045      	beq.n	8013f90 <_dtoa_r+0x168>
 8013f04:	eeb0 7b48 	vmov.f64	d7, d8
 8013f08:	ee18 1a90 	vmov	r1, s17
 8013f0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013f10:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013f14:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013f18:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013f1c:	2500      	movs	r5, #0
 8013f1e:	ee07 1a90 	vmov	s15, r1
 8013f22:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013f26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80140c0 <_dtoa_r+0x298>
 8013f2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013f2e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80140c8 <_dtoa_r+0x2a0>
 8013f32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013f36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80140d0 <_dtoa_r+0x2a8>
 8013f3a:	ee07 3a90 	vmov	s15, r3
 8013f3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013f42:	eeb0 7b46 	vmov.f64	d7, d6
 8013f46:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013f4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013f4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f56:	ee16 8a90 	vmov	r8, s13
 8013f5a:	d508      	bpl.n	8013f6e <_dtoa_r+0x146>
 8013f5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013f60:	eeb4 6b47 	vcmp.f64	d6, d7
 8013f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f68:	bf18      	it	ne
 8013f6a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013f6e:	f1b8 0f16 	cmp.w	r8, #22
 8013f72:	d82b      	bhi.n	8013fcc <_dtoa_r+0x1a4>
 8013f74:	495e      	ldr	r1, [pc, #376]	@ (80140f0 <_dtoa_r+0x2c8>)
 8013f76:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013f7a:	ed91 7b00 	vldr	d7, [r1]
 8013f7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f86:	d501      	bpl.n	8013f8c <_dtoa_r+0x164>
 8013f88:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	e01e      	b.n	8013fce <_dtoa_r+0x1a6>
 8013f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f92:	4413      	add	r3, r2
 8013f94:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013f98:	2920      	cmp	r1, #32
 8013f9a:	bfc1      	itttt	gt
 8013f9c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013fa0:	408e      	lslgt	r6, r1
 8013fa2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8013fa6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013faa:	bfd6      	itet	le
 8013fac:	f1c1 0120 	rsble	r1, r1, #32
 8013fb0:	4331      	orrgt	r1, r6
 8013fb2:	fa04 f101 	lslle.w	r1, r4, r1
 8013fb6:	ee07 1a90 	vmov	s15, r1
 8013fba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013fbe:	3b01      	subs	r3, #1
 8013fc0:	ee17 1a90 	vmov	r1, s15
 8013fc4:	2501      	movs	r5, #1
 8013fc6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013fca:	e7a8      	b.n	8013f1e <_dtoa_r+0xf6>
 8013fcc:	2101      	movs	r1, #1
 8013fce:	1ad2      	subs	r2, r2, r3
 8013fd0:	1e53      	subs	r3, r2, #1
 8013fd2:	9306      	str	r3, [sp, #24]
 8013fd4:	bf45      	ittet	mi
 8013fd6:	f1c2 0301 	rsbmi	r3, r2, #1
 8013fda:	9305      	strmi	r3, [sp, #20]
 8013fdc:	2300      	movpl	r3, #0
 8013fde:	2300      	movmi	r3, #0
 8013fe0:	bf4c      	ite	mi
 8013fe2:	9306      	strmi	r3, [sp, #24]
 8013fe4:	9305      	strpl	r3, [sp, #20]
 8013fe6:	f1b8 0f00 	cmp.w	r8, #0
 8013fea:	910c      	str	r1, [sp, #48]	@ 0x30
 8013fec:	db18      	blt.n	8014020 <_dtoa_r+0x1f8>
 8013fee:	9b06      	ldr	r3, [sp, #24]
 8013ff0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013ff4:	4443      	add	r3, r8
 8013ff6:	9306      	str	r3, [sp, #24]
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	9a07      	ldr	r2, [sp, #28]
 8013ffc:	2a09      	cmp	r2, #9
 8013ffe:	d849      	bhi.n	8014094 <_dtoa_r+0x26c>
 8014000:	2a05      	cmp	r2, #5
 8014002:	bfc4      	itt	gt
 8014004:	3a04      	subgt	r2, #4
 8014006:	9207      	strgt	r2, [sp, #28]
 8014008:	9a07      	ldr	r2, [sp, #28]
 801400a:	f1a2 0202 	sub.w	r2, r2, #2
 801400e:	bfcc      	ite	gt
 8014010:	2400      	movgt	r4, #0
 8014012:	2401      	movle	r4, #1
 8014014:	2a03      	cmp	r2, #3
 8014016:	d848      	bhi.n	80140aa <_dtoa_r+0x282>
 8014018:	e8df f002 	tbb	[pc, r2]
 801401c:	3a2c2e0b 	.word	0x3a2c2e0b
 8014020:	9b05      	ldr	r3, [sp, #20]
 8014022:	2200      	movs	r2, #0
 8014024:	eba3 0308 	sub.w	r3, r3, r8
 8014028:	9305      	str	r3, [sp, #20]
 801402a:	920a      	str	r2, [sp, #40]	@ 0x28
 801402c:	f1c8 0300 	rsb	r3, r8, #0
 8014030:	e7e3      	b.n	8013ffa <_dtoa_r+0x1d2>
 8014032:	2200      	movs	r2, #0
 8014034:	9208      	str	r2, [sp, #32]
 8014036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014038:	2a00      	cmp	r2, #0
 801403a:	dc39      	bgt.n	80140b0 <_dtoa_r+0x288>
 801403c:	f04f 0b01 	mov.w	fp, #1
 8014040:	46da      	mov	sl, fp
 8014042:	465a      	mov	r2, fp
 8014044:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014048:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801404c:	2100      	movs	r1, #0
 801404e:	2004      	movs	r0, #4
 8014050:	f100 0614 	add.w	r6, r0, #20
 8014054:	4296      	cmp	r6, r2
 8014056:	d930      	bls.n	80140ba <_dtoa_r+0x292>
 8014058:	6079      	str	r1, [r7, #4]
 801405a:	4648      	mov	r0, r9
 801405c:	9304      	str	r3, [sp, #16]
 801405e:	f000 fd39 	bl	8014ad4 <_Balloc>
 8014062:	9b04      	ldr	r3, [sp, #16]
 8014064:	4607      	mov	r7, r0
 8014066:	2800      	cmp	r0, #0
 8014068:	d146      	bne.n	80140f8 <_dtoa_r+0x2d0>
 801406a:	4b22      	ldr	r3, [pc, #136]	@ (80140f4 <_dtoa_r+0x2cc>)
 801406c:	4602      	mov	r2, r0
 801406e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014072:	e6f2      	b.n	8013e5a <_dtoa_r+0x32>
 8014074:	2201      	movs	r2, #1
 8014076:	e7dd      	b.n	8014034 <_dtoa_r+0x20c>
 8014078:	2200      	movs	r2, #0
 801407a:	9208      	str	r2, [sp, #32]
 801407c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801407e:	eb08 0b02 	add.w	fp, r8, r2
 8014082:	f10b 0a01 	add.w	sl, fp, #1
 8014086:	4652      	mov	r2, sl
 8014088:	2a01      	cmp	r2, #1
 801408a:	bfb8      	it	lt
 801408c:	2201      	movlt	r2, #1
 801408e:	e7db      	b.n	8014048 <_dtoa_r+0x220>
 8014090:	2201      	movs	r2, #1
 8014092:	e7f2      	b.n	801407a <_dtoa_r+0x252>
 8014094:	2401      	movs	r4, #1
 8014096:	2200      	movs	r2, #0
 8014098:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801409c:	f04f 3bff 	mov.w	fp, #4294967295
 80140a0:	2100      	movs	r1, #0
 80140a2:	46da      	mov	sl, fp
 80140a4:	2212      	movs	r2, #18
 80140a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80140a8:	e7ce      	b.n	8014048 <_dtoa_r+0x220>
 80140aa:	2201      	movs	r2, #1
 80140ac:	9208      	str	r2, [sp, #32]
 80140ae:	e7f5      	b.n	801409c <_dtoa_r+0x274>
 80140b0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80140b4:	46da      	mov	sl, fp
 80140b6:	465a      	mov	r2, fp
 80140b8:	e7c6      	b.n	8014048 <_dtoa_r+0x220>
 80140ba:	3101      	adds	r1, #1
 80140bc:	0040      	lsls	r0, r0, #1
 80140be:	e7c7      	b.n	8014050 <_dtoa_r+0x228>
 80140c0:	636f4361 	.word	0x636f4361
 80140c4:	3fd287a7 	.word	0x3fd287a7
 80140c8:	8b60c8b3 	.word	0x8b60c8b3
 80140cc:	3fc68a28 	.word	0x3fc68a28
 80140d0:	509f79fb 	.word	0x509f79fb
 80140d4:	3fd34413 	.word	0x3fd34413
 80140d8:	08017436 	.word	0x08017436
 80140dc:	0801744d 	.word	0x0801744d
 80140e0:	7ff00000 	.word	0x7ff00000
 80140e4:	08017432 	.word	0x08017432
 80140e8:	08017401 	.word	0x08017401
 80140ec:	08017400 	.word	0x08017400
 80140f0:	08017548 	.word	0x08017548
 80140f4:	080174a5 	.word	0x080174a5
 80140f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80140fc:	f1ba 0f0e 	cmp.w	sl, #14
 8014100:	6010      	str	r0, [r2, #0]
 8014102:	d86f      	bhi.n	80141e4 <_dtoa_r+0x3bc>
 8014104:	2c00      	cmp	r4, #0
 8014106:	d06d      	beq.n	80141e4 <_dtoa_r+0x3bc>
 8014108:	f1b8 0f00 	cmp.w	r8, #0
 801410c:	f340 80c2 	ble.w	8014294 <_dtoa_r+0x46c>
 8014110:	4aca      	ldr	r2, [pc, #808]	@ (801443c <_dtoa_r+0x614>)
 8014112:	f008 010f 	and.w	r1, r8, #15
 8014116:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801411a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801411e:	ed92 7b00 	vldr	d7, [r2]
 8014122:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014126:	f000 80a9 	beq.w	801427c <_dtoa_r+0x454>
 801412a:	4ac5      	ldr	r2, [pc, #788]	@ (8014440 <_dtoa_r+0x618>)
 801412c:	ed92 6b08 	vldr	d6, [r2, #32]
 8014130:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014134:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014138:	f001 010f 	and.w	r1, r1, #15
 801413c:	2203      	movs	r2, #3
 801413e:	48c0      	ldr	r0, [pc, #768]	@ (8014440 <_dtoa_r+0x618>)
 8014140:	2900      	cmp	r1, #0
 8014142:	f040 809d 	bne.w	8014280 <_dtoa_r+0x458>
 8014146:	ed9d 6b02 	vldr	d6, [sp, #8]
 801414a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801414e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014152:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014154:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014158:	2900      	cmp	r1, #0
 801415a:	f000 80c1 	beq.w	80142e0 <_dtoa_r+0x4b8>
 801415e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014162:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416a:	f140 80b9 	bpl.w	80142e0 <_dtoa_r+0x4b8>
 801416e:	f1ba 0f00 	cmp.w	sl, #0
 8014172:	f000 80b5 	beq.w	80142e0 <_dtoa_r+0x4b8>
 8014176:	f1bb 0f00 	cmp.w	fp, #0
 801417a:	dd31      	ble.n	80141e0 <_dtoa_r+0x3b8>
 801417c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014180:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014184:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014188:	f108 31ff 	add.w	r1, r8, #4294967295
 801418c:	9104      	str	r1, [sp, #16]
 801418e:	3201      	adds	r2, #1
 8014190:	465c      	mov	r4, fp
 8014192:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014196:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801419a:	ee07 2a90 	vmov	s15, r2
 801419e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80141a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80141a6:	ee15 2a90 	vmov	r2, s11
 80141aa:	ec51 0b15 	vmov	r0, r1, d5
 80141ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80141b2:	2c00      	cmp	r4, #0
 80141b4:	f040 8098 	bne.w	80142e8 <_dtoa_r+0x4c0>
 80141b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80141bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80141c0:	ec41 0b17 	vmov	d7, r0, r1
 80141c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80141c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141cc:	f300 8261 	bgt.w	8014692 <_dtoa_r+0x86a>
 80141d0:	eeb1 7b47 	vneg.f64	d7, d7
 80141d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80141d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141dc:	f100 80f5 	bmi.w	80143ca <_dtoa_r+0x5a2>
 80141e0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80141e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80141e6:	2a00      	cmp	r2, #0
 80141e8:	f2c0 812c 	blt.w	8014444 <_dtoa_r+0x61c>
 80141ec:	f1b8 0f0e 	cmp.w	r8, #14
 80141f0:	f300 8128 	bgt.w	8014444 <_dtoa_r+0x61c>
 80141f4:	4b91      	ldr	r3, [pc, #580]	@ (801443c <_dtoa_r+0x614>)
 80141f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80141fa:	ed93 6b00 	vldr	d6, [r3]
 80141fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014200:	2b00      	cmp	r3, #0
 8014202:	da03      	bge.n	801420c <_dtoa_r+0x3e4>
 8014204:	f1ba 0f00 	cmp.w	sl, #0
 8014208:	f340 80d2 	ble.w	80143b0 <_dtoa_r+0x588>
 801420c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014214:	463e      	mov	r6, r7
 8014216:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801421a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801421e:	ee15 3a10 	vmov	r3, s10
 8014222:	3330      	adds	r3, #48	@ 0x30
 8014224:	f806 3b01 	strb.w	r3, [r6], #1
 8014228:	1bf3      	subs	r3, r6, r7
 801422a:	459a      	cmp	sl, r3
 801422c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014230:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014234:	f040 80f8 	bne.w	8014428 <_dtoa_r+0x600>
 8014238:	ee37 7b07 	vadd.f64	d7, d7, d7
 801423c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014244:	f300 80dd 	bgt.w	8014402 <_dtoa_r+0x5da>
 8014248:	eeb4 7b46 	vcmp.f64	d7, d6
 801424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014250:	d104      	bne.n	801425c <_dtoa_r+0x434>
 8014252:	ee15 3a10 	vmov	r3, s10
 8014256:	07db      	lsls	r3, r3, #31
 8014258:	f100 80d3 	bmi.w	8014402 <_dtoa_r+0x5da>
 801425c:	9901      	ldr	r1, [sp, #4]
 801425e:	4648      	mov	r0, r9
 8014260:	f000 fc78 	bl	8014b54 <_Bfree>
 8014264:	2300      	movs	r3, #0
 8014266:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014268:	7033      	strb	r3, [r6, #0]
 801426a:	f108 0301 	add.w	r3, r8, #1
 801426e:	6013      	str	r3, [r2, #0]
 8014270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014272:	2b00      	cmp	r3, #0
 8014274:	f000 8304 	beq.w	8014880 <_dtoa_r+0xa58>
 8014278:	601e      	str	r6, [r3, #0]
 801427a:	e301      	b.n	8014880 <_dtoa_r+0xa58>
 801427c:	2202      	movs	r2, #2
 801427e:	e75e      	b.n	801413e <_dtoa_r+0x316>
 8014280:	07cc      	lsls	r4, r1, #31
 8014282:	d504      	bpl.n	801428e <_dtoa_r+0x466>
 8014284:	ed90 6b00 	vldr	d6, [r0]
 8014288:	3201      	adds	r2, #1
 801428a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801428e:	1049      	asrs	r1, r1, #1
 8014290:	3008      	adds	r0, #8
 8014292:	e755      	b.n	8014140 <_dtoa_r+0x318>
 8014294:	d022      	beq.n	80142dc <_dtoa_r+0x4b4>
 8014296:	f1c8 0100 	rsb	r1, r8, #0
 801429a:	4a68      	ldr	r2, [pc, #416]	@ (801443c <_dtoa_r+0x614>)
 801429c:	f001 000f 	and.w	r0, r1, #15
 80142a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80142a4:	ed92 7b00 	vldr	d7, [r2]
 80142a8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80142ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80142b0:	4863      	ldr	r0, [pc, #396]	@ (8014440 <_dtoa_r+0x618>)
 80142b2:	1109      	asrs	r1, r1, #4
 80142b4:	2400      	movs	r4, #0
 80142b6:	2202      	movs	r2, #2
 80142b8:	b929      	cbnz	r1, 80142c6 <_dtoa_r+0x49e>
 80142ba:	2c00      	cmp	r4, #0
 80142bc:	f43f af49 	beq.w	8014152 <_dtoa_r+0x32a>
 80142c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80142c4:	e745      	b.n	8014152 <_dtoa_r+0x32a>
 80142c6:	07ce      	lsls	r6, r1, #31
 80142c8:	d505      	bpl.n	80142d6 <_dtoa_r+0x4ae>
 80142ca:	ed90 6b00 	vldr	d6, [r0]
 80142ce:	3201      	adds	r2, #1
 80142d0:	2401      	movs	r4, #1
 80142d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80142d6:	1049      	asrs	r1, r1, #1
 80142d8:	3008      	adds	r0, #8
 80142da:	e7ed      	b.n	80142b8 <_dtoa_r+0x490>
 80142dc:	2202      	movs	r2, #2
 80142de:	e738      	b.n	8014152 <_dtoa_r+0x32a>
 80142e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80142e4:	4654      	mov	r4, sl
 80142e6:	e754      	b.n	8014192 <_dtoa_r+0x36a>
 80142e8:	4a54      	ldr	r2, [pc, #336]	@ (801443c <_dtoa_r+0x614>)
 80142ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80142ee:	ed12 4b02 	vldr	d4, [r2, #-8]
 80142f2:	9a08      	ldr	r2, [sp, #32]
 80142f4:	ec41 0b17 	vmov	d7, r0, r1
 80142f8:	443c      	add	r4, r7
 80142fa:	b34a      	cbz	r2, 8014350 <_dtoa_r+0x528>
 80142fc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8014300:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014304:	463e      	mov	r6, r7
 8014306:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801430a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801430e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014312:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014316:	ee14 2a90 	vmov	r2, s9
 801431a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801431e:	3230      	adds	r2, #48	@ 0x30
 8014320:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432c:	f806 2b01 	strb.w	r2, [r6], #1
 8014330:	d438      	bmi.n	80143a4 <_dtoa_r+0x57c>
 8014332:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014336:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433e:	d462      	bmi.n	8014406 <_dtoa_r+0x5de>
 8014340:	42a6      	cmp	r6, r4
 8014342:	f43f af4d 	beq.w	80141e0 <_dtoa_r+0x3b8>
 8014346:	ee27 7b03 	vmul.f64	d7, d7, d3
 801434a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801434e:	e7e0      	b.n	8014312 <_dtoa_r+0x4ea>
 8014350:	4621      	mov	r1, r4
 8014352:	463e      	mov	r6, r7
 8014354:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014358:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801435c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014360:	ee14 2a90 	vmov	r2, s9
 8014364:	3230      	adds	r2, #48	@ 0x30
 8014366:	f806 2b01 	strb.w	r2, [r6], #1
 801436a:	42a6      	cmp	r6, r4
 801436c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014370:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014374:	d119      	bne.n	80143aa <_dtoa_r+0x582>
 8014376:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801437a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801437e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014386:	dc3e      	bgt.n	8014406 <_dtoa_r+0x5de>
 8014388:	ee35 5b47 	vsub.f64	d5, d5, d7
 801438c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014394:	f57f af24 	bpl.w	80141e0 <_dtoa_r+0x3b8>
 8014398:	460e      	mov	r6, r1
 801439a:	3901      	subs	r1, #1
 801439c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80143a0:	2b30      	cmp	r3, #48	@ 0x30
 80143a2:	d0f9      	beq.n	8014398 <_dtoa_r+0x570>
 80143a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80143a8:	e758      	b.n	801425c <_dtoa_r+0x434>
 80143aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80143ae:	e7d5      	b.n	801435c <_dtoa_r+0x534>
 80143b0:	d10b      	bne.n	80143ca <_dtoa_r+0x5a2>
 80143b2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80143b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80143ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80143be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80143c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c6:	f2c0 8161 	blt.w	801468c <_dtoa_r+0x864>
 80143ca:	2400      	movs	r4, #0
 80143cc:	4625      	mov	r5, r4
 80143ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143d0:	43db      	mvns	r3, r3
 80143d2:	9304      	str	r3, [sp, #16]
 80143d4:	463e      	mov	r6, r7
 80143d6:	f04f 0800 	mov.w	r8, #0
 80143da:	4621      	mov	r1, r4
 80143dc:	4648      	mov	r0, r9
 80143de:	f000 fbb9 	bl	8014b54 <_Bfree>
 80143e2:	2d00      	cmp	r5, #0
 80143e4:	d0de      	beq.n	80143a4 <_dtoa_r+0x57c>
 80143e6:	f1b8 0f00 	cmp.w	r8, #0
 80143ea:	d005      	beq.n	80143f8 <_dtoa_r+0x5d0>
 80143ec:	45a8      	cmp	r8, r5
 80143ee:	d003      	beq.n	80143f8 <_dtoa_r+0x5d0>
 80143f0:	4641      	mov	r1, r8
 80143f2:	4648      	mov	r0, r9
 80143f4:	f000 fbae 	bl	8014b54 <_Bfree>
 80143f8:	4629      	mov	r1, r5
 80143fa:	4648      	mov	r0, r9
 80143fc:	f000 fbaa 	bl	8014b54 <_Bfree>
 8014400:	e7d0      	b.n	80143a4 <_dtoa_r+0x57c>
 8014402:	f8cd 8010 	str.w	r8, [sp, #16]
 8014406:	4633      	mov	r3, r6
 8014408:	461e      	mov	r6, r3
 801440a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801440e:	2a39      	cmp	r2, #57	@ 0x39
 8014410:	d106      	bne.n	8014420 <_dtoa_r+0x5f8>
 8014412:	429f      	cmp	r7, r3
 8014414:	d1f8      	bne.n	8014408 <_dtoa_r+0x5e0>
 8014416:	9a04      	ldr	r2, [sp, #16]
 8014418:	3201      	adds	r2, #1
 801441a:	9204      	str	r2, [sp, #16]
 801441c:	2230      	movs	r2, #48	@ 0x30
 801441e:	703a      	strb	r2, [r7, #0]
 8014420:	781a      	ldrb	r2, [r3, #0]
 8014422:	3201      	adds	r2, #1
 8014424:	701a      	strb	r2, [r3, #0]
 8014426:	e7bd      	b.n	80143a4 <_dtoa_r+0x57c>
 8014428:	ee27 7b04 	vmul.f64	d7, d7, d4
 801442c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014434:	f47f aeef 	bne.w	8014216 <_dtoa_r+0x3ee>
 8014438:	e710      	b.n	801425c <_dtoa_r+0x434>
 801443a:	bf00      	nop
 801443c:	08017548 	.word	0x08017548
 8014440:	08017520 	.word	0x08017520
 8014444:	9908      	ldr	r1, [sp, #32]
 8014446:	2900      	cmp	r1, #0
 8014448:	f000 80e3 	beq.w	8014612 <_dtoa_r+0x7ea>
 801444c:	9907      	ldr	r1, [sp, #28]
 801444e:	2901      	cmp	r1, #1
 8014450:	f300 80c8 	bgt.w	80145e4 <_dtoa_r+0x7bc>
 8014454:	2d00      	cmp	r5, #0
 8014456:	f000 80c1 	beq.w	80145dc <_dtoa_r+0x7b4>
 801445a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801445e:	9e05      	ldr	r6, [sp, #20]
 8014460:	461c      	mov	r4, r3
 8014462:	9304      	str	r3, [sp, #16]
 8014464:	9b05      	ldr	r3, [sp, #20]
 8014466:	4413      	add	r3, r2
 8014468:	9305      	str	r3, [sp, #20]
 801446a:	9b06      	ldr	r3, [sp, #24]
 801446c:	2101      	movs	r1, #1
 801446e:	4413      	add	r3, r2
 8014470:	4648      	mov	r0, r9
 8014472:	9306      	str	r3, [sp, #24]
 8014474:	f000 fc6c 	bl	8014d50 <__i2b>
 8014478:	9b04      	ldr	r3, [sp, #16]
 801447a:	4605      	mov	r5, r0
 801447c:	b166      	cbz	r6, 8014498 <_dtoa_r+0x670>
 801447e:	9a06      	ldr	r2, [sp, #24]
 8014480:	2a00      	cmp	r2, #0
 8014482:	dd09      	ble.n	8014498 <_dtoa_r+0x670>
 8014484:	42b2      	cmp	r2, r6
 8014486:	9905      	ldr	r1, [sp, #20]
 8014488:	bfa8      	it	ge
 801448a:	4632      	movge	r2, r6
 801448c:	1a89      	subs	r1, r1, r2
 801448e:	9105      	str	r1, [sp, #20]
 8014490:	9906      	ldr	r1, [sp, #24]
 8014492:	1ab6      	subs	r6, r6, r2
 8014494:	1a8a      	subs	r2, r1, r2
 8014496:	9206      	str	r2, [sp, #24]
 8014498:	b1fb      	cbz	r3, 80144da <_dtoa_r+0x6b2>
 801449a:	9a08      	ldr	r2, [sp, #32]
 801449c:	2a00      	cmp	r2, #0
 801449e:	f000 80bc 	beq.w	801461a <_dtoa_r+0x7f2>
 80144a2:	b19c      	cbz	r4, 80144cc <_dtoa_r+0x6a4>
 80144a4:	4629      	mov	r1, r5
 80144a6:	4622      	mov	r2, r4
 80144a8:	4648      	mov	r0, r9
 80144aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80144ac:	f000 fd10 	bl	8014ed0 <__pow5mult>
 80144b0:	9a01      	ldr	r2, [sp, #4]
 80144b2:	4601      	mov	r1, r0
 80144b4:	4605      	mov	r5, r0
 80144b6:	4648      	mov	r0, r9
 80144b8:	f000 fc60 	bl	8014d7c <__multiply>
 80144bc:	9901      	ldr	r1, [sp, #4]
 80144be:	9004      	str	r0, [sp, #16]
 80144c0:	4648      	mov	r0, r9
 80144c2:	f000 fb47 	bl	8014b54 <_Bfree>
 80144c6:	9a04      	ldr	r2, [sp, #16]
 80144c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80144ca:	9201      	str	r2, [sp, #4]
 80144cc:	1b1a      	subs	r2, r3, r4
 80144ce:	d004      	beq.n	80144da <_dtoa_r+0x6b2>
 80144d0:	9901      	ldr	r1, [sp, #4]
 80144d2:	4648      	mov	r0, r9
 80144d4:	f000 fcfc 	bl	8014ed0 <__pow5mult>
 80144d8:	9001      	str	r0, [sp, #4]
 80144da:	2101      	movs	r1, #1
 80144dc:	4648      	mov	r0, r9
 80144de:	f000 fc37 	bl	8014d50 <__i2b>
 80144e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144e4:	4604      	mov	r4, r0
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f000 81d0 	beq.w	801488c <_dtoa_r+0xa64>
 80144ec:	461a      	mov	r2, r3
 80144ee:	4601      	mov	r1, r0
 80144f0:	4648      	mov	r0, r9
 80144f2:	f000 fced 	bl	8014ed0 <__pow5mult>
 80144f6:	9b07      	ldr	r3, [sp, #28]
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	4604      	mov	r4, r0
 80144fc:	f300 8095 	bgt.w	801462a <_dtoa_r+0x802>
 8014500:	9b02      	ldr	r3, [sp, #8]
 8014502:	2b00      	cmp	r3, #0
 8014504:	f040 808b 	bne.w	801461e <_dtoa_r+0x7f6>
 8014508:	9b03      	ldr	r3, [sp, #12]
 801450a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801450e:	2a00      	cmp	r2, #0
 8014510:	f040 8087 	bne.w	8014622 <_dtoa_r+0x7fa>
 8014514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014518:	0d12      	lsrs	r2, r2, #20
 801451a:	0512      	lsls	r2, r2, #20
 801451c:	2a00      	cmp	r2, #0
 801451e:	f000 8082 	beq.w	8014626 <_dtoa_r+0x7fe>
 8014522:	9b05      	ldr	r3, [sp, #20]
 8014524:	3301      	adds	r3, #1
 8014526:	9305      	str	r3, [sp, #20]
 8014528:	9b06      	ldr	r3, [sp, #24]
 801452a:	3301      	adds	r3, #1
 801452c:	9306      	str	r3, [sp, #24]
 801452e:	2301      	movs	r3, #1
 8014530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014534:	2b00      	cmp	r3, #0
 8014536:	f000 81af 	beq.w	8014898 <_dtoa_r+0xa70>
 801453a:	6922      	ldr	r2, [r4, #16]
 801453c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014540:	6910      	ldr	r0, [r2, #16]
 8014542:	f000 fbb9 	bl	8014cb8 <__hi0bits>
 8014546:	f1c0 0020 	rsb	r0, r0, #32
 801454a:	9b06      	ldr	r3, [sp, #24]
 801454c:	4418      	add	r0, r3
 801454e:	f010 001f 	ands.w	r0, r0, #31
 8014552:	d076      	beq.n	8014642 <_dtoa_r+0x81a>
 8014554:	f1c0 0220 	rsb	r2, r0, #32
 8014558:	2a04      	cmp	r2, #4
 801455a:	dd69      	ble.n	8014630 <_dtoa_r+0x808>
 801455c:	9b05      	ldr	r3, [sp, #20]
 801455e:	f1c0 001c 	rsb	r0, r0, #28
 8014562:	4403      	add	r3, r0
 8014564:	9305      	str	r3, [sp, #20]
 8014566:	9b06      	ldr	r3, [sp, #24]
 8014568:	4406      	add	r6, r0
 801456a:	4403      	add	r3, r0
 801456c:	9306      	str	r3, [sp, #24]
 801456e:	9b05      	ldr	r3, [sp, #20]
 8014570:	2b00      	cmp	r3, #0
 8014572:	dd05      	ble.n	8014580 <_dtoa_r+0x758>
 8014574:	9901      	ldr	r1, [sp, #4]
 8014576:	461a      	mov	r2, r3
 8014578:	4648      	mov	r0, r9
 801457a:	f000 fd03 	bl	8014f84 <__lshift>
 801457e:	9001      	str	r0, [sp, #4]
 8014580:	9b06      	ldr	r3, [sp, #24]
 8014582:	2b00      	cmp	r3, #0
 8014584:	dd05      	ble.n	8014592 <_dtoa_r+0x76a>
 8014586:	4621      	mov	r1, r4
 8014588:	461a      	mov	r2, r3
 801458a:	4648      	mov	r0, r9
 801458c:	f000 fcfa 	bl	8014f84 <__lshift>
 8014590:	4604      	mov	r4, r0
 8014592:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014594:	2b00      	cmp	r3, #0
 8014596:	d056      	beq.n	8014646 <_dtoa_r+0x81e>
 8014598:	9801      	ldr	r0, [sp, #4]
 801459a:	4621      	mov	r1, r4
 801459c:	f000 fd5e 	bl	801505c <__mcmp>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	da50      	bge.n	8014646 <_dtoa_r+0x81e>
 80145a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80145a8:	9304      	str	r3, [sp, #16]
 80145aa:	9901      	ldr	r1, [sp, #4]
 80145ac:	2300      	movs	r3, #0
 80145ae:	220a      	movs	r2, #10
 80145b0:	4648      	mov	r0, r9
 80145b2:	f000 faf1 	bl	8014b98 <__multadd>
 80145b6:	9b08      	ldr	r3, [sp, #32]
 80145b8:	9001      	str	r0, [sp, #4]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	f000 816e 	beq.w	801489c <_dtoa_r+0xa74>
 80145c0:	4629      	mov	r1, r5
 80145c2:	2300      	movs	r3, #0
 80145c4:	220a      	movs	r2, #10
 80145c6:	4648      	mov	r0, r9
 80145c8:	f000 fae6 	bl	8014b98 <__multadd>
 80145cc:	f1bb 0f00 	cmp.w	fp, #0
 80145d0:	4605      	mov	r5, r0
 80145d2:	dc64      	bgt.n	801469e <_dtoa_r+0x876>
 80145d4:	9b07      	ldr	r3, [sp, #28]
 80145d6:	2b02      	cmp	r3, #2
 80145d8:	dc3e      	bgt.n	8014658 <_dtoa_r+0x830>
 80145da:	e060      	b.n	801469e <_dtoa_r+0x876>
 80145dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80145de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80145e2:	e73c      	b.n	801445e <_dtoa_r+0x636>
 80145e4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80145e8:	42a3      	cmp	r3, r4
 80145ea:	bfbf      	itttt	lt
 80145ec:	1ae2      	sublt	r2, r4, r3
 80145ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80145f0:	189b      	addlt	r3, r3, r2
 80145f2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80145f4:	bfae      	itee	ge
 80145f6:	1b1c      	subge	r4, r3, r4
 80145f8:	4623      	movlt	r3, r4
 80145fa:	2400      	movlt	r4, #0
 80145fc:	f1ba 0f00 	cmp.w	sl, #0
 8014600:	bfb5      	itete	lt
 8014602:	9a05      	ldrlt	r2, [sp, #20]
 8014604:	9e05      	ldrge	r6, [sp, #20]
 8014606:	eba2 060a 	sublt.w	r6, r2, sl
 801460a:	4652      	movge	r2, sl
 801460c:	bfb8      	it	lt
 801460e:	2200      	movlt	r2, #0
 8014610:	e727      	b.n	8014462 <_dtoa_r+0x63a>
 8014612:	9e05      	ldr	r6, [sp, #20]
 8014614:	9d08      	ldr	r5, [sp, #32]
 8014616:	461c      	mov	r4, r3
 8014618:	e730      	b.n	801447c <_dtoa_r+0x654>
 801461a:	461a      	mov	r2, r3
 801461c:	e758      	b.n	80144d0 <_dtoa_r+0x6a8>
 801461e:	2300      	movs	r3, #0
 8014620:	e786      	b.n	8014530 <_dtoa_r+0x708>
 8014622:	9b02      	ldr	r3, [sp, #8]
 8014624:	e784      	b.n	8014530 <_dtoa_r+0x708>
 8014626:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014628:	e783      	b.n	8014532 <_dtoa_r+0x70a>
 801462a:	2300      	movs	r3, #0
 801462c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801462e:	e784      	b.n	801453a <_dtoa_r+0x712>
 8014630:	d09d      	beq.n	801456e <_dtoa_r+0x746>
 8014632:	9b05      	ldr	r3, [sp, #20]
 8014634:	321c      	adds	r2, #28
 8014636:	4413      	add	r3, r2
 8014638:	9305      	str	r3, [sp, #20]
 801463a:	9b06      	ldr	r3, [sp, #24]
 801463c:	4416      	add	r6, r2
 801463e:	4413      	add	r3, r2
 8014640:	e794      	b.n	801456c <_dtoa_r+0x744>
 8014642:	4602      	mov	r2, r0
 8014644:	e7f5      	b.n	8014632 <_dtoa_r+0x80a>
 8014646:	f1ba 0f00 	cmp.w	sl, #0
 801464a:	f8cd 8010 	str.w	r8, [sp, #16]
 801464e:	46d3      	mov	fp, sl
 8014650:	dc21      	bgt.n	8014696 <_dtoa_r+0x86e>
 8014652:	9b07      	ldr	r3, [sp, #28]
 8014654:	2b02      	cmp	r3, #2
 8014656:	dd1e      	ble.n	8014696 <_dtoa_r+0x86e>
 8014658:	f1bb 0f00 	cmp.w	fp, #0
 801465c:	f47f aeb7 	bne.w	80143ce <_dtoa_r+0x5a6>
 8014660:	4621      	mov	r1, r4
 8014662:	465b      	mov	r3, fp
 8014664:	2205      	movs	r2, #5
 8014666:	4648      	mov	r0, r9
 8014668:	f000 fa96 	bl	8014b98 <__multadd>
 801466c:	4601      	mov	r1, r0
 801466e:	4604      	mov	r4, r0
 8014670:	9801      	ldr	r0, [sp, #4]
 8014672:	f000 fcf3 	bl	801505c <__mcmp>
 8014676:	2800      	cmp	r0, #0
 8014678:	f77f aea9 	ble.w	80143ce <_dtoa_r+0x5a6>
 801467c:	463e      	mov	r6, r7
 801467e:	2331      	movs	r3, #49	@ 0x31
 8014680:	f806 3b01 	strb.w	r3, [r6], #1
 8014684:	9b04      	ldr	r3, [sp, #16]
 8014686:	3301      	adds	r3, #1
 8014688:	9304      	str	r3, [sp, #16]
 801468a:	e6a4      	b.n	80143d6 <_dtoa_r+0x5ae>
 801468c:	f8cd 8010 	str.w	r8, [sp, #16]
 8014690:	4654      	mov	r4, sl
 8014692:	4625      	mov	r5, r4
 8014694:	e7f2      	b.n	801467c <_dtoa_r+0x854>
 8014696:	9b08      	ldr	r3, [sp, #32]
 8014698:	2b00      	cmp	r3, #0
 801469a:	f000 8103 	beq.w	80148a4 <_dtoa_r+0xa7c>
 801469e:	2e00      	cmp	r6, #0
 80146a0:	dd05      	ble.n	80146ae <_dtoa_r+0x886>
 80146a2:	4629      	mov	r1, r5
 80146a4:	4632      	mov	r2, r6
 80146a6:	4648      	mov	r0, r9
 80146a8:	f000 fc6c 	bl	8014f84 <__lshift>
 80146ac:	4605      	mov	r5, r0
 80146ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d058      	beq.n	8014766 <_dtoa_r+0x93e>
 80146b4:	6869      	ldr	r1, [r5, #4]
 80146b6:	4648      	mov	r0, r9
 80146b8:	f000 fa0c 	bl	8014ad4 <_Balloc>
 80146bc:	4606      	mov	r6, r0
 80146be:	b928      	cbnz	r0, 80146cc <_dtoa_r+0x8a4>
 80146c0:	4b82      	ldr	r3, [pc, #520]	@ (80148cc <_dtoa_r+0xaa4>)
 80146c2:	4602      	mov	r2, r0
 80146c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80146c8:	f7ff bbc7 	b.w	8013e5a <_dtoa_r+0x32>
 80146cc:	692a      	ldr	r2, [r5, #16]
 80146ce:	3202      	adds	r2, #2
 80146d0:	0092      	lsls	r2, r2, #2
 80146d2:	f105 010c 	add.w	r1, r5, #12
 80146d6:	300c      	adds	r0, #12
 80146d8:	f7ff fb07 	bl	8013cea <memcpy>
 80146dc:	2201      	movs	r2, #1
 80146de:	4631      	mov	r1, r6
 80146e0:	4648      	mov	r0, r9
 80146e2:	f000 fc4f 	bl	8014f84 <__lshift>
 80146e6:	1c7b      	adds	r3, r7, #1
 80146e8:	9305      	str	r3, [sp, #20]
 80146ea:	eb07 030b 	add.w	r3, r7, fp
 80146ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80146f0:	9b02      	ldr	r3, [sp, #8]
 80146f2:	f003 0301 	and.w	r3, r3, #1
 80146f6:	46a8      	mov	r8, r5
 80146f8:	9308      	str	r3, [sp, #32]
 80146fa:	4605      	mov	r5, r0
 80146fc:	9b05      	ldr	r3, [sp, #20]
 80146fe:	9801      	ldr	r0, [sp, #4]
 8014700:	4621      	mov	r1, r4
 8014702:	f103 3bff 	add.w	fp, r3, #4294967295
 8014706:	f7ff fb05 	bl	8013d14 <quorem>
 801470a:	4641      	mov	r1, r8
 801470c:	9002      	str	r0, [sp, #8]
 801470e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014712:	9801      	ldr	r0, [sp, #4]
 8014714:	f000 fca2 	bl	801505c <__mcmp>
 8014718:	462a      	mov	r2, r5
 801471a:	9006      	str	r0, [sp, #24]
 801471c:	4621      	mov	r1, r4
 801471e:	4648      	mov	r0, r9
 8014720:	f000 fcb8 	bl	8015094 <__mdiff>
 8014724:	68c2      	ldr	r2, [r0, #12]
 8014726:	4606      	mov	r6, r0
 8014728:	b9fa      	cbnz	r2, 801476a <_dtoa_r+0x942>
 801472a:	4601      	mov	r1, r0
 801472c:	9801      	ldr	r0, [sp, #4]
 801472e:	f000 fc95 	bl	801505c <__mcmp>
 8014732:	4602      	mov	r2, r0
 8014734:	4631      	mov	r1, r6
 8014736:	4648      	mov	r0, r9
 8014738:	920a      	str	r2, [sp, #40]	@ 0x28
 801473a:	f000 fa0b 	bl	8014b54 <_Bfree>
 801473e:	9b07      	ldr	r3, [sp, #28]
 8014740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014742:	9e05      	ldr	r6, [sp, #20]
 8014744:	ea43 0102 	orr.w	r1, r3, r2
 8014748:	9b08      	ldr	r3, [sp, #32]
 801474a:	4319      	orrs	r1, r3
 801474c:	d10f      	bne.n	801476e <_dtoa_r+0x946>
 801474e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014752:	d028      	beq.n	80147a6 <_dtoa_r+0x97e>
 8014754:	9b06      	ldr	r3, [sp, #24]
 8014756:	2b00      	cmp	r3, #0
 8014758:	dd02      	ble.n	8014760 <_dtoa_r+0x938>
 801475a:	9b02      	ldr	r3, [sp, #8]
 801475c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014760:	f88b a000 	strb.w	sl, [fp]
 8014764:	e639      	b.n	80143da <_dtoa_r+0x5b2>
 8014766:	4628      	mov	r0, r5
 8014768:	e7bd      	b.n	80146e6 <_dtoa_r+0x8be>
 801476a:	2201      	movs	r2, #1
 801476c:	e7e2      	b.n	8014734 <_dtoa_r+0x90c>
 801476e:	9b06      	ldr	r3, [sp, #24]
 8014770:	2b00      	cmp	r3, #0
 8014772:	db04      	blt.n	801477e <_dtoa_r+0x956>
 8014774:	9907      	ldr	r1, [sp, #28]
 8014776:	430b      	orrs	r3, r1
 8014778:	9908      	ldr	r1, [sp, #32]
 801477a:	430b      	orrs	r3, r1
 801477c:	d120      	bne.n	80147c0 <_dtoa_r+0x998>
 801477e:	2a00      	cmp	r2, #0
 8014780:	ddee      	ble.n	8014760 <_dtoa_r+0x938>
 8014782:	9901      	ldr	r1, [sp, #4]
 8014784:	2201      	movs	r2, #1
 8014786:	4648      	mov	r0, r9
 8014788:	f000 fbfc 	bl	8014f84 <__lshift>
 801478c:	4621      	mov	r1, r4
 801478e:	9001      	str	r0, [sp, #4]
 8014790:	f000 fc64 	bl	801505c <__mcmp>
 8014794:	2800      	cmp	r0, #0
 8014796:	dc03      	bgt.n	80147a0 <_dtoa_r+0x978>
 8014798:	d1e2      	bne.n	8014760 <_dtoa_r+0x938>
 801479a:	f01a 0f01 	tst.w	sl, #1
 801479e:	d0df      	beq.n	8014760 <_dtoa_r+0x938>
 80147a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80147a4:	d1d9      	bne.n	801475a <_dtoa_r+0x932>
 80147a6:	2339      	movs	r3, #57	@ 0x39
 80147a8:	f88b 3000 	strb.w	r3, [fp]
 80147ac:	4633      	mov	r3, r6
 80147ae:	461e      	mov	r6, r3
 80147b0:	3b01      	subs	r3, #1
 80147b2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80147b6:	2a39      	cmp	r2, #57	@ 0x39
 80147b8:	d053      	beq.n	8014862 <_dtoa_r+0xa3a>
 80147ba:	3201      	adds	r2, #1
 80147bc:	701a      	strb	r2, [r3, #0]
 80147be:	e60c      	b.n	80143da <_dtoa_r+0x5b2>
 80147c0:	2a00      	cmp	r2, #0
 80147c2:	dd07      	ble.n	80147d4 <_dtoa_r+0x9ac>
 80147c4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80147c8:	d0ed      	beq.n	80147a6 <_dtoa_r+0x97e>
 80147ca:	f10a 0301 	add.w	r3, sl, #1
 80147ce:	f88b 3000 	strb.w	r3, [fp]
 80147d2:	e602      	b.n	80143da <_dtoa_r+0x5b2>
 80147d4:	9b05      	ldr	r3, [sp, #20]
 80147d6:	9a05      	ldr	r2, [sp, #20]
 80147d8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80147dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147de:	4293      	cmp	r3, r2
 80147e0:	d029      	beq.n	8014836 <_dtoa_r+0xa0e>
 80147e2:	9901      	ldr	r1, [sp, #4]
 80147e4:	2300      	movs	r3, #0
 80147e6:	220a      	movs	r2, #10
 80147e8:	4648      	mov	r0, r9
 80147ea:	f000 f9d5 	bl	8014b98 <__multadd>
 80147ee:	45a8      	cmp	r8, r5
 80147f0:	9001      	str	r0, [sp, #4]
 80147f2:	f04f 0300 	mov.w	r3, #0
 80147f6:	f04f 020a 	mov.w	r2, #10
 80147fa:	4641      	mov	r1, r8
 80147fc:	4648      	mov	r0, r9
 80147fe:	d107      	bne.n	8014810 <_dtoa_r+0x9e8>
 8014800:	f000 f9ca 	bl	8014b98 <__multadd>
 8014804:	4680      	mov	r8, r0
 8014806:	4605      	mov	r5, r0
 8014808:	9b05      	ldr	r3, [sp, #20]
 801480a:	3301      	adds	r3, #1
 801480c:	9305      	str	r3, [sp, #20]
 801480e:	e775      	b.n	80146fc <_dtoa_r+0x8d4>
 8014810:	f000 f9c2 	bl	8014b98 <__multadd>
 8014814:	4629      	mov	r1, r5
 8014816:	4680      	mov	r8, r0
 8014818:	2300      	movs	r3, #0
 801481a:	220a      	movs	r2, #10
 801481c:	4648      	mov	r0, r9
 801481e:	f000 f9bb 	bl	8014b98 <__multadd>
 8014822:	4605      	mov	r5, r0
 8014824:	e7f0      	b.n	8014808 <_dtoa_r+0x9e0>
 8014826:	f1bb 0f00 	cmp.w	fp, #0
 801482a:	bfcc      	ite	gt
 801482c:	465e      	movgt	r6, fp
 801482e:	2601      	movle	r6, #1
 8014830:	443e      	add	r6, r7
 8014832:	f04f 0800 	mov.w	r8, #0
 8014836:	9901      	ldr	r1, [sp, #4]
 8014838:	2201      	movs	r2, #1
 801483a:	4648      	mov	r0, r9
 801483c:	f000 fba2 	bl	8014f84 <__lshift>
 8014840:	4621      	mov	r1, r4
 8014842:	9001      	str	r0, [sp, #4]
 8014844:	f000 fc0a 	bl	801505c <__mcmp>
 8014848:	2800      	cmp	r0, #0
 801484a:	dcaf      	bgt.n	80147ac <_dtoa_r+0x984>
 801484c:	d102      	bne.n	8014854 <_dtoa_r+0xa2c>
 801484e:	f01a 0f01 	tst.w	sl, #1
 8014852:	d1ab      	bne.n	80147ac <_dtoa_r+0x984>
 8014854:	4633      	mov	r3, r6
 8014856:	461e      	mov	r6, r3
 8014858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801485c:	2a30      	cmp	r2, #48	@ 0x30
 801485e:	d0fa      	beq.n	8014856 <_dtoa_r+0xa2e>
 8014860:	e5bb      	b.n	80143da <_dtoa_r+0x5b2>
 8014862:	429f      	cmp	r7, r3
 8014864:	d1a3      	bne.n	80147ae <_dtoa_r+0x986>
 8014866:	9b04      	ldr	r3, [sp, #16]
 8014868:	3301      	adds	r3, #1
 801486a:	9304      	str	r3, [sp, #16]
 801486c:	2331      	movs	r3, #49	@ 0x31
 801486e:	703b      	strb	r3, [r7, #0]
 8014870:	e5b3      	b.n	80143da <_dtoa_r+0x5b2>
 8014872:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014874:	4f16      	ldr	r7, [pc, #88]	@ (80148d0 <_dtoa_r+0xaa8>)
 8014876:	b11b      	cbz	r3, 8014880 <_dtoa_r+0xa58>
 8014878:	f107 0308 	add.w	r3, r7, #8
 801487c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801487e:	6013      	str	r3, [r2, #0]
 8014880:	4638      	mov	r0, r7
 8014882:	b011      	add	sp, #68	@ 0x44
 8014884:	ecbd 8b02 	vpop	{d8}
 8014888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801488c:	9b07      	ldr	r3, [sp, #28]
 801488e:	2b01      	cmp	r3, #1
 8014890:	f77f ae36 	ble.w	8014500 <_dtoa_r+0x6d8>
 8014894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014896:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014898:	2001      	movs	r0, #1
 801489a:	e656      	b.n	801454a <_dtoa_r+0x722>
 801489c:	f1bb 0f00 	cmp.w	fp, #0
 80148a0:	f77f aed7 	ble.w	8014652 <_dtoa_r+0x82a>
 80148a4:	463e      	mov	r6, r7
 80148a6:	9801      	ldr	r0, [sp, #4]
 80148a8:	4621      	mov	r1, r4
 80148aa:	f7ff fa33 	bl	8013d14 <quorem>
 80148ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80148b2:	f806 ab01 	strb.w	sl, [r6], #1
 80148b6:	1bf2      	subs	r2, r6, r7
 80148b8:	4593      	cmp	fp, r2
 80148ba:	ddb4      	ble.n	8014826 <_dtoa_r+0x9fe>
 80148bc:	9901      	ldr	r1, [sp, #4]
 80148be:	2300      	movs	r3, #0
 80148c0:	220a      	movs	r2, #10
 80148c2:	4648      	mov	r0, r9
 80148c4:	f000 f968 	bl	8014b98 <__multadd>
 80148c8:	9001      	str	r0, [sp, #4]
 80148ca:	e7ec      	b.n	80148a6 <_dtoa_r+0xa7e>
 80148cc:	080174a5 	.word	0x080174a5
 80148d0:	08017429 	.word	0x08017429

080148d4 <_free_r>:
 80148d4:	b538      	push	{r3, r4, r5, lr}
 80148d6:	4605      	mov	r5, r0
 80148d8:	2900      	cmp	r1, #0
 80148da:	d041      	beq.n	8014960 <_free_r+0x8c>
 80148dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148e0:	1f0c      	subs	r4, r1, #4
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	bfb8      	it	lt
 80148e6:	18e4      	addlt	r4, r4, r3
 80148e8:	f000 f8e8 	bl	8014abc <__malloc_lock>
 80148ec:	4a1d      	ldr	r2, [pc, #116]	@ (8014964 <_free_r+0x90>)
 80148ee:	6813      	ldr	r3, [r2, #0]
 80148f0:	b933      	cbnz	r3, 8014900 <_free_r+0x2c>
 80148f2:	6063      	str	r3, [r4, #4]
 80148f4:	6014      	str	r4, [r2, #0]
 80148f6:	4628      	mov	r0, r5
 80148f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148fc:	f000 b8e4 	b.w	8014ac8 <__malloc_unlock>
 8014900:	42a3      	cmp	r3, r4
 8014902:	d908      	bls.n	8014916 <_free_r+0x42>
 8014904:	6820      	ldr	r0, [r4, #0]
 8014906:	1821      	adds	r1, r4, r0
 8014908:	428b      	cmp	r3, r1
 801490a:	bf01      	itttt	eq
 801490c:	6819      	ldreq	r1, [r3, #0]
 801490e:	685b      	ldreq	r3, [r3, #4]
 8014910:	1809      	addeq	r1, r1, r0
 8014912:	6021      	streq	r1, [r4, #0]
 8014914:	e7ed      	b.n	80148f2 <_free_r+0x1e>
 8014916:	461a      	mov	r2, r3
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	b10b      	cbz	r3, 8014920 <_free_r+0x4c>
 801491c:	42a3      	cmp	r3, r4
 801491e:	d9fa      	bls.n	8014916 <_free_r+0x42>
 8014920:	6811      	ldr	r1, [r2, #0]
 8014922:	1850      	adds	r0, r2, r1
 8014924:	42a0      	cmp	r0, r4
 8014926:	d10b      	bne.n	8014940 <_free_r+0x6c>
 8014928:	6820      	ldr	r0, [r4, #0]
 801492a:	4401      	add	r1, r0
 801492c:	1850      	adds	r0, r2, r1
 801492e:	4283      	cmp	r3, r0
 8014930:	6011      	str	r1, [r2, #0]
 8014932:	d1e0      	bne.n	80148f6 <_free_r+0x22>
 8014934:	6818      	ldr	r0, [r3, #0]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	6053      	str	r3, [r2, #4]
 801493a:	4408      	add	r0, r1
 801493c:	6010      	str	r0, [r2, #0]
 801493e:	e7da      	b.n	80148f6 <_free_r+0x22>
 8014940:	d902      	bls.n	8014948 <_free_r+0x74>
 8014942:	230c      	movs	r3, #12
 8014944:	602b      	str	r3, [r5, #0]
 8014946:	e7d6      	b.n	80148f6 <_free_r+0x22>
 8014948:	6820      	ldr	r0, [r4, #0]
 801494a:	1821      	adds	r1, r4, r0
 801494c:	428b      	cmp	r3, r1
 801494e:	bf04      	itt	eq
 8014950:	6819      	ldreq	r1, [r3, #0]
 8014952:	685b      	ldreq	r3, [r3, #4]
 8014954:	6063      	str	r3, [r4, #4]
 8014956:	bf04      	itt	eq
 8014958:	1809      	addeq	r1, r1, r0
 801495a:	6021      	streq	r1, [r4, #0]
 801495c:	6054      	str	r4, [r2, #4]
 801495e:	e7ca      	b.n	80148f6 <_free_r+0x22>
 8014960:	bd38      	pop	{r3, r4, r5, pc}
 8014962:	bf00      	nop
 8014964:	24001b18 	.word	0x24001b18

08014968 <malloc>:
 8014968:	4b02      	ldr	r3, [pc, #8]	@ (8014974 <malloc+0xc>)
 801496a:	4601      	mov	r1, r0
 801496c:	6818      	ldr	r0, [r3, #0]
 801496e:	f000 b825 	b.w	80149bc <_malloc_r>
 8014972:	bf00      	nop
 8014974:	24000194 	.word	0x24000194

08014978 <sbrk_aligned>:
 8014978:	b570      	push	{r4, r5, r6, lr}
 801497a:	4e0f      	ldr	r6, [pc, #60]	@ (80149b8 <sbrk_aligned+0x40>)
 801497c:	460c      	mov	r4, r1
 801497e:	6831      	ldr	r1, [r6, #0]
 8014980:	4605      	mov	r5, r0
 8014982:	b911      	cbnz	r1, 801498a <sbrk_aligned+0x12>
 8014984:	f001 ff7e 	bl	8016884 <_sbrk_r>
 8014988:	6030      	str	r0, [r6, #0]
 801498a:	4621      	mov	r1, r4
 801498c:	4628      	mov	r0, r5
 801498e:	f001 ff79 	bl	8016884 <_sbrk_r>
 8014992:	1c43      	adds	r3, r0, #1
 8014994:	d103      	bne.n	801499e <sbrk_aligned+0x26>
 8014996:	f04f 34ff 	mov.w	r4, #4294967295
 801499a:	4620      	mov	r0, r4
 801499c:	bd70      	pop	{r4, r5, r6, pc}
 801499e:	1cc4      	adds	r4, r0, #3
 80149a0:	f024 0403 	bic.w	r4, r4, #3
 80149a4:	42a0      	cmp	r0, r4
 80149a6:	d0f8      	beq.n	801499a <sbrk_aligned+0x22>
 80149a8:	1a21      	subs	r1, r4, r0
 80149aa:	4628      	mov	r0, r5
 80149ac:	f001 ff6a 	bl	8016884 <_sbrk_r>
 80149b0:	3001      	adds	r0, #1
 80149b2:	d1f2      	bne.n	801499a <sbrk_aligned+0x22>
 80149b4:	e7ef      	b.n	8014996 <sbrk_aligned+0x1e>
 80149b6:	bf00      	nop
 80149b8:	24001b14 	.word	0x24001b14

080149bc <_malloc_r>:
 80149bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149c0:	1ccd      	adds	r5, r1, #3
 80149c2:	f025 0503 	bic.w	r5, r5, #3
 80149c6:	3508      	adds	r5, #8
 80149c8:	2d0c      	cmp	r5, #12
 80149ca:	bf38      	it	cc
 80149cc:	250c      	movcc	r5, #12
 80149ce:	2d00      	cmp	r5, #0
 80149d0:	4606      	mov	r6, r0
 80149d2:	db01      	blt.n	80149d8 <_malloc_r+0x1c>
 80149d4:	42a9      	cmp	r1, r5
 80149d6:	d904      	bls.n	80149e2 <_malloc_r+0x26>
 80149d8:	230c      	movs	r3, #12
 80149da:	6033      	str	r3, [r6, #0]
 80149dc:	2000      	movs	r0, #0
 80149de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014ab8 <_malloc_r+0xfc>
 80149e6:	f000 f869 	bl	8014abc <__malloc_lock>
 80149ea:	f8d8 3000 	ldr.w	r3, [r8]
 80149ee:	461c      	mov	r4, r3
 80149f0:	bb44      	cbnz	r4, 8014a44 <_malloc_r+0x88>
 80149f2:	4629      	mov	r1, r5
 80149f4:	4630      	mov	r0, r6
 80149f6:	f7ff ffbf 	bl	8014978 <sbrk_aligned>
 80149fa:	1c43      	adds	r3, r0, #1
 80149fc:	4604      	mov	r4, r0
 80149fe:	d158      	bne.n	8014ab2 <_malloc_r+0xf6>
 8014a00:	f8d8 4000 	ldr.w	r4, [r8]
 8014a04:	4627      	mov	r7, r4
 8014a06:	2f00      	cmp	r7, #0
 8014a08:	d143      	bne.n	8014a92 <_malloc_r+0xd6>
 8014a0a:	2c00      	cmp	r4, #0
 8014a0c:	d04b      	beq.n	8014aa6 <_malloc_r+0xea>
 8014a0e:	6823      	ldr	r3, [r4, #0]
 8014a10:	4639      	mov	r1, r7
 8014a12:	4630      	mov	r0, r6
 8014a14:	eb04 0903 	add.w	r9, r4, r3
 8014a18:	f001 ff34 	bl	8016884 <_sbrk_r>
 8014a1c:	4581      	cmp	r9, r0
 8014a1e:	d142      	bne.n	8014aa6 <_malloc_r+0xea>
 8014a20:	6821      	ldr	r1, [r4, #0]
 8014a22:	1a6d      	subs	r5, r5, r1
 8014a24:	4629      	mov	r1, r5
 8014a26:	4630      	mov	r0, r6
 8014a28:	f7ff ffa6 	bl	8014978 <sbrk_aligned>
 8014a2c:	3001      	adds	r0, #1
 8014a2e:	d03a      	beq.n	8014aa6 <_malloc_r+0xea>
 8014a30:	6823      	ldr	r3, [r4, #0]
 8014a32:	442b      	add	r3, r5
 8014a34:	6023      	str	r3, [r4, #0]
 8014a36:	f8d8 3000 	ldr.w	r3, [r8]
 8014a3a:	685a      	ldr	r2, [r3, #4]
 8014a3c:	bb62      	cbnz	r2, 8014a98 <_malloc_r+0xdc>
 8014a3e:	f8c8 7000 	str.w	r7, [r8]
 8014a42:	e00f      	b.n	8014a64 <_malloc_r+0xa8>
 8014a44:	6822      	ldr	r2, [r4, #0]
 8014a46:	1b52      	subs	r2, r2, r5
 8014a48:	d420      	bmi.n	8014a8c <_malloc_r+0xd0>
 8014a4a:	2a0b      	cmp	r2, #11
 8014a4c:	d917      	bls.n	8014a7e <_malloc_r+0xc2>
 8014a4e:	1961      	adds	r1, r4, r5
 8014a50:	42a3      	cmp	r3, r4
 8014a52:	6025      	str	r5, [r4, #0]
 8014a54:	bf18      	it	ne
 8014a56:	6059      	strne	r1, [r3, #4]
 8014a58:	6863      	ldr	r3, [r4, #4]
 8014a5a:	bf08      	it	eq
 8014a5c:	f8c8 1000 	streq.w	r1, [r8]
 8014a60:	5162      	str	r2, [r4, r5]
 8014a62:	604b      	str	r3, [r1, #4]
 8014a64:	4630      	mov	r0, r6
 8014a66:	f000 f82f 	bl	8014ac8 <__malloc_unlock>
 8014a6a:	f104 000b 	add.w	r0, r4, #11
 8014a6e:	1d23      	adds	r3, r4, #4
 8014a70:	f020 0007 	bic.w	r0, r0, #7
 8014a74:	1ac2      	subs	r2, r0, r3
 8014a76:	bf1c      	itt	ne
 8014a78:	1a1b      	subne	r3, r3, r0
 8014a7a:	50a3      	strne	r3, [r4, r2]
 8014a7c:	e7af      	b.n	80149de <_malloc_r+0x22>
 8014a7e:	6862      	ldr	r2, [r4, #4]
 8014a80:	42a3      	cmp	r3, r4
 8014a82:	bf0c      	ite	eq
 8014a84:	f8c8 2000 	streq.w	r2, [r8]
 8014a88:	605a      	strne	r2, [r3, #4]
 8014a8a:	e7eb      	b.n	8014a64 <_malloc_r+0xa8>
 8014a8c:	4623      	mov	r3, r4
 8014a8e:	6864      	ldr	r4, [r4, #4]
 8014a90:	e7ae      	b.n	80149f0 <_malloc_r+0x34>
 8014a92:	463c      	mov	r4, r7
 8014a94:	687f      	ldr	r7, [r7, #4]
 8014a96:	e7b6      	b.n	8014a06 <_malloc_r+0x4a>
 8014a98:	461a      	mov	r2, r3
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	42a3      	cmp	r3, r4
 8014a9e:	d1fb      	bne.n	8014a98 <_malloc_r+0xdc>
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	6053      	str	r3, [r2, #4]
 8014aa4:	e7de      	b.n	8014a64 <_malloc_r+0xa8>
 8014aa6:	230c      	movs	r3, #12
 8014aa8:	6033      	str	r3, [r6, #0]
 8014aaa:	4630      	mov	r0, r6
 8014aac:	f000 f80c 	bl	8014ac8 <__malloc_unlock>
 8014ab0:	e794      	b.n	80149dc <_malloc_r+0x20>
 8014ab2:	6005      	str	r5, [r0, #0]
 8014ab4:	e7d6      	b.n	8014a64 <_malloc_r+0xa8>
 8014ab6:	bf00      	nop
 8014ab8:	24001b18 	.word	0x24001b18

08014abc <__malloc_lock>:
 8014abc:	4801      	ldr	r0, [pc, #4]	@ (8014ac4 <__malloc_lock+0x8>)
 8014abe:	f7ff b912 	b.w	8013ce6 <__retarget_lock_acquire_recursive>
 8014ac2:	bf00      	nop
 8014ac4:	24001b10 	.word	0x24001b10

08014ac8 <__malloc_unlock>:
 8014ac8:	4801      	ldr	r0, [pc, #4]	@ (8014ad0 <__malloc_unlock+0x8>)
 8014aca:	f7ff b90d 	b.w	8013ce8 <__retarget_lock_release_recursive>
 8014ace:	bf00      	nop
 8014ad0:	24001b10 	.word	0x24001b10

08014ad4 <_Balloc>:
 8014ad4:	b570      	push	{r4, r5, r6, lr}
 8014ad6:	69c6      	ldr	r6, [r0, #28]
 8014ad8:	4604      	mov	r4, r0
 8014ada:	460d      	mov	r5, r1
 8014adc:	b976      	cbnz	r6, 8014afc <_Balloc+0x28>
 8014ade:	2010      	movs	r0, #16
 8014ae0:	f7ff ff42 	bl	8014968 <malloc>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	61e0      	str	r0, [r4, #28]
 8014ae8:	b920      	cbnz	r0, 8014af4 <_Balloc+0x20>
 8014aea:	4b18      	ldr	r3, [pc, #96]	@ (8014b4c <_Balloc+0x78>)
 8014aec:	4818      	ldr	r0, [pc, #96]	@ (8014b50 <_Balloc+0x7c>)
 8014aee:	216b      	movs	r1, #107	@ 0x6b
 8014af0:	f001 fee2 	bl	80168b8 <__assert_func>
 8014af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014af8:	6006      	str	r6, [r0, #0]
 8014afa:	60c6      	str	r6, [r0, #12]
 8014afc:	69e6      	ldr	r6, [r4, #28]
 8014afe:	68f3      	ldr	r3, [r6, #12]
 8014b00:	b183      	cbz	r3, 8014b24 <_Balloc+0x50>
 8014b02:	69e3      	ldr	r3, [r4, #28]
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014b0a:	b9b8      	cbnz	r0, 8014b3c <_Balloc+0x68>
 8014b0c:	2101      	movs	r1, #1
 8014b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8014b12:	1d72      	adds	r2, r6, #5
 8014b14:	0092      	lsls	r2, r2, #2
 8014b16:	4620      	mov	r0, r4
 8014b18:	f001 feec 	bl	80168f4 <_calloc_r>
 8014b1c:	b160      	cbz	r0, 8014b38 <_Balloc+0x64>
 8014b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014b22:	e00e      	b.n	8014b42 <_Balloc+0x6e>
 8014b24:	2221      	movs	r2, #33	@ 0x21
 8014b26:	2104      	movs	r1, #4
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f001 fee3 	bl	80168f4 <_calloc_r>
 8014b2e:	69e3      	ldr	r3, [r4, #28]
 8014b30:	60f0      	str	r0, [r6, #12]
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1e4      	bne.n	8014b02 <_Balloc+0x2e>
 8014b38:	2000      	movs	r0, #0
 8014b3a:	bd70      	pop	{r4, r5, r6, pc}
 8014b3c:	6802      	ldr	r2, [r0, #0]
 8014b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b42:	2300      	movs	r3, #0
 8014b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014b48:	e7f7      	b.n	8014b3a <_Balloc+0x66>
 8014b4a:	bf00      	nop
 8014b4c:	08017436 	.word	0x08017436
 8014b50:	080174b6 	.word	0x080174b6

08014b54 <_Bfree>:
 8014b54:	b570      	push	{r4, r5, r6, lr}
 8014b56:	69c6      	ldr	r6, [r0, #28]
 8014b58:	4605      	mov	r5, r0
 8014b5a:	460c      	mov	r4, r1
 8014b5c:	b976      	cbnz	r6, 8014b7c <_Bfree+0x28>
 8014b5e:	2010      	movs	r0, #16
 8014b60:	f7ff ff02 	bl	8014968 <malloc>
 8014b64:	4602      	mov	r2, r0
 8014b66:	61e8      	str	r0, [r5, #28]
 8014b68:	b920      	cbnz	r0, 8014b74 <_Bfree+0x20>
 8014b6a:	4b09      	ldr	r3, [pc, #36]	@ (8014b90 <_Bfree+0x3c>)
 8014b6c:	4809      	ldr	r0, [pc, #36]	@ (8014b94 <_Bfree+0x40>)
 8014b6e:	218f      	movs	r1, #143	@ 0x8f
 8014b70:	f001 fea2 	bl	80168b8 <__assert_func>
 8014b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b78:	6006      	str	r6, [r0, #0]
 8014b7a:	60c6      	str	r6, [r0, #12]
 8014b7c:	b13c      	cbz	r4, 8014b8e <_Bfree+0x3a>
 8014b7e:	69eb      	ldr	r3, [r5, #28]
 8014b80:	6862      	ldr	r2, [r4, #4]
 8014b82:	68db      	ldr	r3, [r3, #12]
 8014b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b88:	6021      	str	r1, [r4, #0]
 8014b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}
 8014b90:	08017436 	.word	0x08017436
 8014b94:	080174b6 	.word	0x080174b6

08014b98 <__multadd>:
 8014b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9c:	690d      	ldr	r5, [r1, #16]
 8014b9e:	4607      	mov	r7, r0
 8014ba0:	460c      	mov	r4, r1
 8014ba2:	461e      	mov	r6, r3
 8014ba4:	f101 0c14 	add.w	ip, r1, #20
 8014ba8:	2000      	movs	r0, #0
 8014baa:	f8dc 3000 	ldr.w	r3, [ip]
 8014bae:	b299      	uxth	r1, r3
 8014bb0:	fb02 6101 	mla	r1, r2, r1, r6
 8014bb4:	0c1e      	lsrs	r6, r3, #16
 8014bb6:	0c0b      	lsrs	r3, r1, #16
 8014bb8:	fb02 3306 	mla	r3, r2, r6, r3
 8014bbc:	b289      	uxth	r1, r1
 8014bbe:	3001      	adds	r0, #1
 8014bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014bc4:	4285      	cmp	r5, r0
 8014bc6:	f84c 1b04 	str.w	r1, [ip], #4
 8014bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014bce:	dcec      	bgt.n	8014baa <__multadd+0x12>
 8014bd0:	b30e      	cbz	r6, 8014c16 <__multadd+0x7e>
 8014bd2:	68a3      	ldr	r3, [r4, #8]
 8014bd4:	42ab      	cmp	r3, r5
 8014bd6:	dc19      	bgt.n	8014c0c <__multadd+0x74>
 8014bd8:	6861      	ldr	r1, [r4, #4]
 8014bda:	4638      	mov	r0, r7
 8014bdc:	3101      	adds	r1, #1
 8014bde:	f7ff ff79 	bl	8014ad4 <_Balloc>
 8014be2:	4680      	mov	r8, r0
 8014be4:	b928      	cbnz	r0, 8014bf2 <__multadd+0x5a>
 8014be6:	4602      	mov	r2, r0
 8014be8:	4b0c      	ldr	r3, [pc, #48]	@ (8014c1c <__multadd+0x84>)
 8014bea:	480d      	ldr	r0, [pc, #52]	@ (8014c20 <__multadd+0x88>)
 8014bec:	21ba      	movs	r1, #186	@ 0xba
 8014bee:	f001 fe63 	bl	80168b8 <__assert_func>
 8014bf2:	6922      	ldr	r2, [r4, #16]
 8014bf4:	3202      	adds	r2, #2
 8014bf6:	f104 010c 	add.w	r1, r4, #12
 8014bfa:	0092      	lsls	r2, r2, #2
 8014bfc:	300c      	adds	r0, #12
 8014bfe:	f7ff f874 	bl	8013cea <memcpy>
 8014c02:	4621      	mov	r1, r4
 8014c04:	4638      	mov	r0, r7
 8014c06:	f7ff ffa5 	bl	8014b54 <_Bfree>
 8014c0a:	4644      	mov	r4, r8
 8014c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014c10:	3501      	adds	r5, #1
 8014c12:	615e      	str	r6, [r3, #20]
 8014c14:	6125      	str	r5, [r4, #16]
 8014c16:	4620      	mov	r0, r4
 8014c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c1c:	080174a5 	.word	0x080174a5
 8014c20:	080174b6 	.word	0x080174b6

08014c24 <__s2b>:
 8014c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c28:	460c      	mov	r4, r1
 8014c2a:	4615      	mov	r5, r2
 8014c2c:	461f      	mov	r7, r3
 8014c2e:	2209      	movs	r2, #9
 8014c30:	3308      	adds	r3, #8
 8014c32:	4606      	mov	r6, r0
 8014c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c38:	2100      	movs	r1, #0
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	db09      	blt.n	8014c54 <__s2b+0x30>
 8014c40:	4630      	mov	r0, r6
 8014c42:	f7ff ff47 	bl	8014ad4 <_Balloc>
 8014c46:	b940      	cbnz	r0, 8014c5a <__s2b+0x36>
 8014c48:	4602      	mov	r2, r0
 8014c4a:	4b19      	ldr	r3, [pc, #100]	@ (8014cb0 <__s2b+0x8c>)
 8014c4c:	4819      	ldr	r0, [pc, #100]	@ (8014cb4 <__s2b+0x90>)
 8014c4e:	21d3      	movs	r1, #211	@ 0xd3
 8014c50:	f001 fe32 	bl	80168b8 <__assert_func>
 8014c54:	0052      	lsls	r2, r2, #1
 8014c56:	3101      	adds	r1, #1
 8014c58:	e7f0      	b.n	8014c3c <__s2b+0x18>
 8014c5a:	9b08      	ldr	r3, [sp, #32]
 8014c5c:	6143      	str	r3, [r0, #20]
 8014c5e:	2d09      	cmp	r5, #9
 8014c60:	f04f 0301 	mov.w	r3, #1
 8014c64:	6103      	str	r3, [r0, #16]
 8014c66:	dd16      	ble.n	8014c96 <__s2b+0x72>
 8014c68:	f104 0909 	add.w	r9, r4, #9
 8014c6c:	46c8      	mov	r8, r9
 8014c6e:	442c      	add	r4, r5
 8014c70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014c74:	4601      	mov	r1, r0
 8014c76:	3b30      	subs	r3, #48	@ 0x30
 8014c78:	220a      	movs	r2, #10
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	f7ff ff8c 	bl	8014b98 <__multadd>
 8014c80:	45a0      	cmp	r8, r4
 8014c82:	d1f5      	bne.n	8014c70 <__s2b+0x4c>
 8014c84:	f1a5 0408 	sub.w	r4, r5, #8
 8014c88:	444c      	add	r4, r9
 8014c8a:	1b2d      	subs	r5, r5, r4
 8014c8c:	1963      	adds	r3, r4, r5
 8014c8e:	42bb      	cmp	r3, r7
 8014c90:	db04      	blt.n	8014c9c <__s2b+0x78>
 8014c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c96:	340a      	adds	r4, #10
 8014c98:	2509      	movs	r5, #9
 8014c9a:	e7f6      	b.n	8014c8a <__s2b+0x66>
 8014c9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014ca0:	4601      	mov	r1, r0
 8014ca2:	3b30      	subs	r3, #48	@ 0x30
 8014ca4:	220a      	movs	r2, #10
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	f7ff ff76 	bl	8014b98 <__multadd>
 8014cac:	e7ee      	b.n	8014c8c <__s2b+0x68>
 8014cae:	bf00      	nop
 8014cb0:	080174a5 	.word	0x080174a5
 8014cb4:	080174b6 	.word	0x080174b6

08014cb8 <__hi0bits>:
 8014cb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	bf36      	itet	cc
 8014cc0:	0403      	lslcc	r3, r0, #16
 8014cc2:	2000      	movcs	r0, #0
 8014cc4:	2010      	movcc	r0, #16
 8014cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014cca:	bf3c      	itt	cc
 8014ccc:	021b      	lslcc	r3, r3, #8
 8014cce:	3008      	addcc	r0, #8
 8014cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014cd4:	bf3c      	itt	cc
 8014cd6:	011b      	lslcc	r3, r3, #4
 8014cd8:	3004      	addcc	r0, #4
 8014cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014cde:	bf3c      	itt	cc
 8014ce0:	009b      	lslcc	r3, r3, #2
 8014ce2:	3002      	addcc	r0, #2
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	db05      	blt.n	8014cf4 <__hi0bits+0x3c>
 8014ce8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014cec:	f100 0001 	add.w	r0, r0, #1
 8014cf0:	bf08      	it	eq
 8014cf2:	2020      	moveq	r0, #32
 8014cf4:	4770      	bx	lr

08014cf6 <__lo0bits>:
 8014cf6:	6803      	ldr	r3, [r0, #0]
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	f013 0007 	ands.w	r0, r3, #7
 8014cfe:	d00b      	beq.n	8014d18 <__lo0bits+0x22>
 8014d00:	07d9      	lsls	r1, r3, #31
 8014d02:	d421      	bmi.n	8014d48 <__lo0bits+0x52>
 8014d04:	0798      	lsls	r0, r3, #30
 8014d06:	bf49      	itett	mi
 8014d08:	085b      	lsrmi	r3, r3, #1
 8014d0a:	089b      	lsrpl	r3, r3, #2
 8014d0c:	2001      	movmi	r0, #1
 8014d0e:	6013      	strmi	r3, [r2, #0]
 8014d10:	bf5c      	itt	pl
 8014d12:	6013      	strpl	r3, [r2, #0]
 8014d14:	2002      	movpl	r0, #2
 8014d16:	4770      	bx	lr
 8014d18:	b299      	uxth	r1, r3
 8014d1a:	b909      	cbnz	r1, 8014d20 <__lo0bits+0x2a>
 8014d1c:	0c1b      	lsrs	r3, r3, #16
 8014d1e:	2010      	movs	r0, #16
 8014d20:	b2d9      	uxtb	r1, r3
 8014d22:	b909      	cbnz	r1, 8014d28 <__lo0bits+0x32>
 8014d24:	3008      	adds	r0, #8
 8014d26:	0a1b      	lsrs	r3, r3, #8
 8014d28:	0719      	lsls	r1, r3, #28
 8014d2a:	bf04      	itt	eq
 8014d2c:	091b      	lsreq	r3, r3, #4
 8014d2e:	3004      	addeq	r0, #4
 8014d30:	0799      	lsls	r1, r3, #30
 8014d32:	bf04      	itt	eq
 8014d34:	089b      	lsreq	r3, r3, #2
 8014d36:	3002      	addeq	r0, #2
 8014d38:	07d9      	lsls	r1, r3, #31
 8014d3a:	d403      	bmi.n	8014d44 <__lo0bits+0x4e>
 8014d3c:	085b      	lsrs	r3, r3, #1
 8014d3e:	f100 0001 	add.w	r0, r0, #1
 8014d42:	d003      	beq.n	8014d4c <__lo0bits+0x56>
 8014d44:	6013      	str	r3, [r2, #0]
 8014d46:	4770      	bx	lr
 8014d48:	2000      	movs	r0, #0
 8014d4a:	4770      	bx	lr
 8014d4c:	2020      	movs	r0, #32
 8014d4e:	4770      	bx	lr

08014d50 <__i2b>:
 8014d50:	b510      	push	{r4, lr}
 8014d52:	460c      	mov	r4, r1
 8014d54:	2101      	movs	r1, #1
 8014d56:	f7ff febd 	bl	8014ad4 <_Balloc>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	b928      	cbnz	r0, 8014d6a <__i2b+0x1a>
 8014d5e:	4b05      	ldr	r3, [pc, #20]	@ (8014d74 <__i2b+0x24>)
 8014d60:	4805      	ldr	r0, [pc, #20]	@ (8014d78 <__i2b+0x28>)
 8014d62:	f240 1145 	movw	r1, #325	@ 0x145
 8014d66:	f001 fda7 	bl	80168b8 <__assert_func>
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	6144      	str	r4, [r0, #20]
 8014d6e:	6103      	str	r3, [r0, #16]
 8014d70:	bd10      	pop	{r4, pc}
 8014d72:	bf00      	nop
 8014d74:	080174a5 	.word	0x080174a5
 8014d78:	080174b6 	.word	0x080174b6

08014d7c <__multiply>:
 8014d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d80:	4614      	mov	r4, r2
 8014d82:	690a      	ldr	r2, [r1, #16]
 8014d84:	6923      	ldr	r3, [r4, #16]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	bfa8      	it	ge
 8014d8a:	4623      	movge	r3, r4
 8014d8c:	460f      	mov	r7, r1
 8014d8e:	bfa4      	itt	ge
 8014d90:	460c      	movge	r4, r1
 8014d92:	461f      	movge	r7, r3
 8014d94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014d98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014d9c:	68a3      	ldr	r3, [r4, #8]
 8014d9e:	6861      	ldr	r1, [r4, #4]
 8014da0:	eb0a 0609 	add.w	r6, sl, r9
 8014da4:	42b3      	cmp	r3, r6
 8014da6:	b085      	sub	sp, #20
 8014da8:	bfb8      	it	lt
 8014daa:	3101      	addlt	r1, #1
 8014dac:	f7ff fe92 	bl	8014ad4 <_Balloc>
 8014db0:	b930      	cbnz	r0, 8014dc0 <__multiply+0x44>
 8014db2:	4602      	mov	r2, r0
 8014db4:	4b44      	ldr	r3, [pc, #272]	@ (8014ec8 <__multiply+0x14c>)
 8014db6:	4845      	ldr	r0, [pc, #276]	@ (8014ecc <__multiply+0x150>)
 8014db8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014dbc:	f001 fd7c 	bl	80168b8 <__assert_func>
 8014dc0:	f100 0514 	add.w	r5, r0, #20
 8014dc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014dc8:	462b      	mov	r3, r5
 8014dca:	2200      	movs	r2, #0
 8014dcc:	4543      	cmp	r3, r8
 8014dce:	d321      	bcc.n	8014e14 <__multiply+0x98>
 8014dd0:	f107 0114 	add.w	r1, r7, #20
 8014dd4:	f104 0214 	add.w	r2, r4, #20
 8014dd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014ddc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014de0:	9302      	str	r3, [sp, #8]
 8014de2:	1b13      	subs	r3, r2, r4
 8014de4:	3b15      	subs	r3, #21
 8014de6:	f023 0303 	bic.w	r3, r3, #3
 8014dea:	3304      	adds	r3, #4
 8014dec:	f104 0715 	add.w	r7, r4, #21
 8014df0:	42ba      	cmp	r2, r7
 8014df2:	bf38      	it	cc
 8014df4:	2304      	movcc	r3, #4
 8014df6:	9301      	str	r3, [sp, #4]
 8014df8:	9b02      	ldr	r3, [sp, #8]
 8014dfa:	9103      	str	r1, [sp, #12]
 8014dfc:	428b      	cmp	r3, r1
 8014dfe:	d80c      	bhi.n	8014e1a <__multiply+0x9e>
 8014e00:	2e00      	cmp	r6, #0
 8014e02:	dd03      	ble.n	8014e0c <__multiply+0x90>
 8014e04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d05b      	beq.n	8014ec4 <__multiply+0x148>
 8014e0c:	6106      	str	r6, [r0, #16]
 8014e0e:	b005      	add	sp, #20
 8014e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e14:	f843 2b04 	str.w	r2, [r3], #4
 8014e18:	e7d8      	b.n	8014dcc <__multiply+0x50>
 8014e1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8014e1e:	f1ba 0f00 	cmp.w	sl, #0
 8014e22:	d024      	beq.n	8014e6e <__multiply+0xf2>
 8014e24:	f104 0e14 	add.w	lr, r4, #20
 8014e28:	46a9      	mov	r9, r5
 8014e2a:	f04f 0c00 	mov.w	ip, #0
 8014e2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014e32:	f8d9 3000 	ldr.w	r3, [r9]
 8014e36:	fa1f fb87 	uxth.w	fp, r7
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014e40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014e44:	f8d9 7000 	ldr.w	r7, [r9]
 8014e48:	4463      	add	r3, ip
 8014e4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014e4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8014e52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014e5c:	4572      	cmp	r2, lr
 8014e5e:	f849 3b04 	str.w	r3, [r9], #4
 8014e62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014e66:	d8e2      	bhi.n	8014e2e <__multiply+0xb2>
 8014e68:	9b01      	ldr	r3, [sp, #4]
 8014e6a:	f845 c003 	str.w	ip, [r5, r3]
 8014e6e:	9b03      	ldr	r3, [sp, #12]
 8014e70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014e74:	3104      	adds	r1, #4
 8014e76:	f1b9 0f00 	cmp.w	r9, #0
 8014e7a:	d021      	beq.n	8014ec0 <__multiply+0x144>
 8014e7c:	682b      	ldr	r3, [r5, #0]
 8014e7e:	f104 0c14 	add.w	ip, r4, #20
 8014e82:	46ae      	mov	lr, r5
 8014e84:	f04f 0a00 	mov.w	sl, #0
 8014e88:	f8bc b000 	ldrh.w	fp, [ip]
 8014e8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014e90:	fb09 770b 	mla	r7, r9, fp, r7
 8014e94:	4457      	add	r7, sl
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014e9c:	f84e 3b04 	str.w	r3, [lr], #4
 8014ea0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014ea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014ea8:	f8be 3000 	ldrh.w	r3, [lr]
 8014eac:	fb09 330a 	mla	r3, r9, sl, r3
 8014eb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014eb4:	4562      	cmp	r2, ip
 8014eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014eba:	d8e5      	bhi.n	8014e88 <__multiply+0x10c>
 8014ebc:	9f01      	ldr	r7, [sp, #4]
 8014ebe:	51eb      	str	r3, [r5, r7]
 8014ec0:	3504      	adds	r5, #4
 8014ec2:	e799      	b.n	8014df8 <__multiply+0x7c>
 8014ec4:	3e01      	subs	r6, #1
 8014ec6:	e79b      	b.n	8014e00 <__multiply+0x84>
 8014ec8:	080174a5 	.word	0x080174a5
 8014ecc:	080174b6 	.word	0x080174b6

08014ed0 <__pow5mult>:
 8014ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ed4:	4615      	mov	r5, r2
 8014ed6:	f012 0203 	ands.w	r2, r2, #3
 8014eda:	4607      	mov	r7, r0
 8014edc:	460e      	mov	r6, r1
 8014ede:	d007      	beq.n	8014ef0 <__pow5mult+0x20>
 8014ee0:	4c25      	ldr	r4, [pc, #148]	@ (8014f78 <__pow5mult+0xa8>)
 8014ee2:	3a01      	subs	r2, #1
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014eea:	f7ff fe55 	bl	8014b98 <__multadd>
 8014eee:	4606      	mov	r6, r0
 8014ef0:	10ad      	asrs	r5, r5, #2
 8014ef2:	d03d      	beq.n	8014f70 <__pow5mult+0xa0>
 8014ef4:	69fc      	ldr	r4, [r7, #28]
 8014ef6:	b97c      	cbnz	r4, 8014f18 <__pow5mult+0x48>
 8014ef8:	2010      	movs	r0, #16
 8014efa:	f7ff fd35 	bl	8014968 <malloc>
 8014efe:	4602      	mov	r2, r0
 8014f00:	61f8      	str	r0, [r7, #28]
 8014f02:	b928      	cbnz	r0, 8014f10 <__pow5mult+0x40>
 8014f04:	4b1d      	ldr	r3, [pc, #116]	@ (8014f7c <__pow5mult+0xac>)
 8014f06:	481e      	ldr	r0, [pc, #120]	@ (8014f80 <__pow5mult+0xb0>)
 8014f08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014f0c:	f001 fcd4 	bl	80168b8 <__assert_func>
 8014f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014f14:	6004      	str	r4, [r0, #0]
 8014f16:	60c4      	str	r4, [r0, #12]
 8014f18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014f20:	b94c      	cbnz	r4, 8014f36 <__pow5mult+0x66>
 8014f22:	f240 2171 	movw	r1, #625	@ 0x271
 8014f26:	4638      	mov	r0, r7
 8014f28:	f7ff ff12 	bl	8014d50 <__i2b>
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f32:	4604      	mov	r4, r0
 8014f34:	6003      	str	r3, [r0, #0]
 8014f36:	f04f 0900 	mov.w	r9, #0
 8014f3a:	07eb      	lsls	r3, r5, #31
 8014f3c:	d50a      	bpl.n	8014f54 <__pow5mult+0x84>
 8014f3e:	4631      	mov	r1, r6
 8014f40:	4622      	mov	r2, r4
 8014f42:	4638      	mov	r0, r7
 8014f44:	f7ff ff1a 	bl	8014d7c <__multiply>
 8014f48:	4631      	mov	r1, r6
 8014f4a:	4680      	mov	r8, r0
 8014f4c:	4638      	mov	r0, r7
 8014f4e:	f7ff fe01 	bl	8014b54 <_Bfree>
 8014f52:	4646      	mov	r6, r8
 8014f54:	106d      	asrs	r5, r5, #1
 8014f56:	d00b      	beq.n	8014f70 <__pow5mult+0xa0>
 8014f58:	6820      	ldr	r0, [r4, #0]
 8014f5a:	b938      	cbnz	r0, 8014f6c <__pow5mult+0x9c>
 8014f5c:	4622      	mov	r2, r4
 8014f5e:	4621      	mov	r1, r4
 8014f60:	4638      	mov	r0, r7
 8014f62:	f7ff ff0b 	bl	8014d7c <__multiply>
 8014f66:	6020      	str	r0, [r4, #0]
 8014f68:	f8c0 9000 	str.w	r9, [r0]
 8014f6c:	4604      	mov	r4, r0
 8014f6e:	e7e4      	b.n	8014f3a <__pow5mult+0x6a>
 8014f70:	4630      	mov	r0, r6
 8014f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f76:	bf00      	nop
 8014f78:	08017510 	.word	0x08017510
 8014f7c:	08017436 	.word	0x08017436
 8014f80:	080174b6 	.word	0x080174b6

08014f84 <__lshift>:
 8014f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f88:	460c      	mov	r4, r1
 8014f8a:	6849      	ldr	r1, [r1, #4]
 8014f8c:	6923      	ldr	r3, [r4, #16]
 8014f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f92:	68a3      	ldr	r3, [r4, #8]
 8014f94:	4607      	mov	r7, r0
 8014f96:	4691      	mov	r9, r2
 8014f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f9c:	f108 0601 	add.w	r6, r8, #1
 8014fa0:	42b3      	cmp	r3, r6
 8014fa2:	db0b      	blt.n	8014fbc <__lshift+0x38>
 8014fa4:	4638      	mov	r0, r7
 8014fa6:	f7ff fd95 	bl	8014ad4 <_Balloc>
 8014faa:	4605      	mov	r5, r0
 8014fac:	b948      	cbnz	r0, 8014fc2 <__lshift+0x3e>
 8014fae:	4602      	mov	r2, r0
 8014fb0:	4b28      	ldr	r3, [pc, #160]	@ (8015054 <__lshift+0xd0>)
 8014fb2:	4829      	ldr	r0, [pc, #164]	@ (8015058 <__lshift+0xd4>)
 8014fb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014fb8:	f001 fc7e 	bl	80168b8 <__assert_func>
 8014fbc:	3101      	adds	r1, #1
 8014fbe:	005b      	lsls	r3, r3, #1
 8014fc0:	e7ee      	b.n	8014fa0 <__lshift+0x1c>
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	f100 0114 	add.w	r1, r0, #20
 8014fc8:	f100 0210 	add.w	r2, r0, #16
 8014fcc:	4618      	mov	r0, r3
 8014fce:	4553      	cmp	r3, sl
 8014fd0:	db33      	blt.n	801503a <__lshift+0xb6>
 8014fd2:	6920      	ldr	r0, [r4, #16]
 8014fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014fd8:	f104 0314 	add.w	r3, r4, #20
 8014fdc:	f019 091f 	ands.w	r9, r9, #31
 8014fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014fe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014fe8:	d02b      	beq.n	8015042 <__lshift+0xbe>
 8014fea:	f1c9 0e20 	rsb	lr, r9, #32
 8014fee:	468a      	mov	sl, r1
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	6818      	ldr	r0, [r3, #0]
 8014ff4:	fa00 f009 	lsl.w	r0, r0, r9
 8014ff8:	4310      	orrs	r0, r2
 8014ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8014ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015002:	459c      	cmp	ip, r3
 8015004:	fa22 f20e 	lsr.w	r2, r2, lr
 8015008:	d8f3      	bhi.n	8014ff2 <__lshift+0x6e>
 801500a:	ebac 0304 	sub.w	r3, ip, r4
 801500e:	3b15      	subs	r3, #21
 8015010:	f023 0303 	bic.w	r3, r3, #3
 8015014:	3304      	adds	r3, #4
 8015016:	f104 0015 	add.w	r0, r4, #21
 801501a:	4584      	cmp	ip, r0
 801501c:	bf38      	it	cc
 801501e:	2304      	movcc	r3, #4
 8015020:	50ca      	str	r2, [r1, r3]
 8015022:	b10a      	cbz	r2, 8015028 <__lshift+0xa4>
 8015024:	f108 0602 	add.w	r6, r8, #2
 8015028:	3e01      	subs	r6, #1
 801502a:	4638      	mov	r0, r7
 801502c:	612e      	str	r6, [r5, #16]
 801502e:	4621      	mov	r1, r4
 8015030:	f7ff fd90 	bl	8014b54 <_Bfree>
 8015034:	4628      	mov	r0, r5
 8015036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801503a:	f842 0f04 	str.w	r0, [r2, #4]!
 801503e:	3301      	adds	r3, #1
 8015040:	e7c5      	b.n	8014fce <__lshift+0x4a>
 8015042:	3904      	subs	r1, #4
 8015044:	f853 2b04 	ldr.w	r2, [r3], #4
 8015048:	f841 2f04 	str.w	r2, [r1, #4]!
 801504c:	459c      	cmp	ip, r3
 801504e:	d8f9      	bhi.n	8015044 <__lshift+0xc0>
 8015050:	e7ea      	b.n	8015028 <__lshift+0xa4>
 8015052:	bf00      	nop
 8015054:	080174a5 	.word	0x080174a5
 8015058:	080174b6 	.word	0x080174b6

0801505c <__mcmp>:
 801505c:	690a      	ldr	r2, [r1, #16]
 801505e:	4603      	mov	r3, r0
 8015060:	6900      	ldr	r0, [r0, #16]
 8015062:	1a80      	subs	r0, r0, r2
 8015064:	b530      	push	{r4, r5, lr}
 8015066:	d10e      	bne.n	8015086 <__mcmp+0x2a>
 8015068:	3314      	adds	r3, #20
 801506a:	3114      	adds	r1, #20
 801506c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801507c:	4295      	cmp	r5, r2
 801507e:	d003      	beq.n	8015088 <__mcmp+0x2c>
 8015080:	d205      	bcs.n	801508e <__mcmp+0x32>
 8015082:	f04f 30ff 	mov.w	r0, #4294967295
 8015086:	bd30      	pop	{r4, r5, pc}
 8015088:	42a3      	cmp	r3, r4
 801508a:	d3f3      	bcc.n	8015074 <__mcmp+0x18>
 801508c:	e7fb      	b.n	8015086 <__mcmp+0x2a>
 801508e:	2001      	movs	r0, #1
 8015090:	e7f9      	b.n	8015086 <__mcmp+0x2a>
	...

08015094 <__mdiff>:
 8015094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015098:	4689      	mov	r9, r1
 801509a:	4606      	mov	r6, r0
 801509c:	4611      	mov	r1, r2
 801509e:	4648      	mov	r0, r9
 80150a0:	4614      	mov	r4, r2
 80150a2:	f7ff ffdb 	bl	801505c <__mcmp>
 80150a6:	1e05      	subs	r5, r0, #0
 80150a8:	d112      	bne.n	80150d0 <__mdiff+0x3c>
 80150aa:	4629      	mov	r1, r5
 80150ac:	4630      	mov	r0, r6
 80150ae:	f7ff fd11 	bl	8014ad4 <_Balloc>
 80150b2:	4602      	mov	r2, r0
 80150b4:	b928      	cbnz	r0, 80150c2 <__mdiff+0x2e>
 80150b6:	4b3f      	ldr	r3, [pc, #252]	@ (80151b4 <__mdiff+0x120>)
 80150b8:	f240 2137 	movw	r1, #567	@ 0x237
 80150bc:	483e      	ldr	r0, [pc, #248]	@ (80151b8 <__mdiff+0x124>)
 80150be:	f001 fbfb 	bl	80168b8 <__assert_func>
 80150c2:	2301      	movs	r3, #1
 80150c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80150c8:	4610      	mov	r0, r2
 80150ca:	b003      	add	sp, #12
 80150cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d0:	bfbc      	itt	lt
 80150d2:	464b      	movlt	r3, r9
 80150d4:	46a1      	movlt	r9, r4
 80150d6:	4630      	mov	r0, r6
 80150d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80150dc:	bfba      	itte	lt
 80150de:	461c      	movlt	r4, r3
 80150e0:	2501      	movlt	r5, #1
 80150e2:	2500      	movge	r5, #0
 80150e4:	f7ff fcf6 	bl	8014ad4 <_Balloc>
 80150e8:	4602      	mov	r2, r0
 80150ea:	b918      	cbnz	r0, 80150f4 <__mdiff+0x60>
 80150ec:	4b31      	ldr	r3, [pc, #196]	@ (80151b4 <__mdiff+0x120>)
 80150ee:	f240 2145 	movw	r1, #581	@ 0x245
 80150f2:	e7e3      	b.n	80150bc <__mdiff+0x28>
 80150f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80150f8:	6926      	ldr	r6, [r4, #16]
 80150fa:	60c5      	str	r5, [r0, #12]
 80150fc:	f109 0310 	add.w	r3, r9, #16
 8015100:	f109 0514 	add.w	r5, r9, #20
 8015104:	f104 0e14 	add.w	lr, r4, #20
 8015108:	f100 0b14 	add.w	fp, r0, #20
 801510c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015110:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015114:	9301      	str	r3, [sp, #4]
 8015116:	46d9      	mov	r9, fp
 8015118:	f04f 0c00 	mov.w	ip, #0
 801511c:	9b01      	ldr	r3, [sp, #4]
 801511e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015122:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015126:	9301      	str	r3, [sp, #4]
 8015128:	fa1f f38a 	uxth.w	r3, sl
 801512c:	4619      	mov	r1, r3
 801512e:	b283      	uxth	r3, r0
 8015130:	1acb      	subs	r3, r1, r3
 8015132:	0c00      	lsrs	r0, r0, #16
 8015134:	4463      	add	r3, ip
 8015136:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801513a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801513e:	b29b      	uxth	r3, r3
 8015140:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015144:	4576      	cmp	r6, lr
 8015146:	f849 3b04 	str.w	r3, [r9], #4
 801514a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801514e:	d8e5      	bhi.n	801511c <__mdiff+0x88>
 8015150:	1b33      	subs	r3, r6, r4
 8015152:	3b15      	subs	r3, #21
 8015154:	f023 0303 	bic.w	r3, r3, #3
 8015158:	3415      	adds	r4, #21
 801515a:	3304      	adds	r3, #4
 801515c:	42a6      	cmp	r6, r4
 801515e:	bf38      	it	cc
 8015160:	2304      	movcc	r3, #4
 8015162:	441d      	add	r5, r3
 8015164:	445b      	add	r3, fp
 8015166:	461e      	mov	r6, r3
 8015168:	462c      	mov	r4, r5
 801516a:	4544      	cmp	r4, r8
 801516c:	d30e      	bcc.n	801518c <__mdiff+0xf8>
 801516e:	f108 0103 	add.w	r1, r8, #3
 8015172:	1b49      	subs	r1, r1, r5
 8015174:	f021 0103 	bic.w	r1, r1, #3
 8015178:	3d03      	subs	r5, #3
 801517a:	45a8      	cmp	r8, r5
 801517c:	bf38      	it	cc
 801517e:	2100      	movcc	r1, #0
 8015180:	440b      	add	r3, r1
 8015182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015186:	b191      	cbz	r1, 80151ae <__mdiff+0x11a>
 8015188:	6117      	str	r7, [r2, #16]
 801518a:	e79d      	b.n	80150c8 <__mdiff+0x34>
 801518c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015190:	46e6      	mov	lr, ip
 8015192:	0c08      	lsrs	r0, r1, #16
 8015194:	fa1c fc81 	uxtah	ip, ip, r1
 8015198:	4471      	add	r1, lr
 801519a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801519e:	b289      	uxth	r1, r1
 80151a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80151a4:	f846 1b04 	str.w	r1, [r6], #4
 80151a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80151ac:	e7dd      	b.n	801516a <__mdiff+0xd6>
 80151ae:	3f01      	subs	r7, #1
 80151b0:	e7e7      	b.n	8015182 <__mdiff+0xee>
 80151b2:	bf00      	nop
 80151b4:	080174a5 	.word	0x080174a5
 80151b8:	080174b6 	.word	0x080174b6

080151bc <__ulp>:
 80151bc:	b082      	sub	sp, #8
 80151be:	ed8d 0b00 	vstr	d0, [sp]
 80151c2:	9a01      	ldr	r2, [sp, #4]
 80151c4:	4b0f      	ldr	r3, [pc, #60]	@ (8015204 <__ulp+0x48>)
 80151c6:	4013      	ands	r3, r2
 80151c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	dc08      	bgt.n	80151e2 <__ulp+0x26>
 80151d0:	425b      	negs	r3, r3
 80151d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80151d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80151da:	da04      	bge.n	80151e6 <__ulp+0x2a>
 80151dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80151e0:	4113      	asrs	r3, r2
 80151e2:	2200      	movs	r2, #0
 80151e4:	e008      	b.n	80151f8 <__ulp+0x3c>
 80151e6:	f1a2 0314 	sub.w	r3, r2, #20
 80151ea:	2b1e      	cmp	r3, #30
 80151ec:	bfda      	itte	le
 80151ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80151f2:	40da      	lsrle	r2, r3
 80151f4:	2201      	movgt	r2, #1
 80151f6:	2300      	movs	r3, #0
 80151f8:	4619      	mov	r1, r3
 80151fa:	4610      	mov	r0, r2
 80151fc:	ec41 0b10 	vmov	d0, r0, r1
 8015200:	b002      	add	sp, #8
 8015202:	4770      	bx	lr
 8015204:	7ff00000 	.word	0x7ff00000

08015208 <__b2d>:
 8015208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801520c:	6906      	ldr	r6, [r0, #16]
 801520e:	f100 0814 	add.w	r8, r0, #20
 8015212:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015216:	1f37      	subs	r7, r6, #4
 8015218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801521c:	4610      	mov	r0, r2
 801521e:	f7ff fd4b 	bl	8014cb8 <__hi0bits>
 8015222:	f1c0 0320 	rsb	r3, r0, #32
 8015226:	280a      	cmp	r0, #10
 8015228:	600b      	str	r3, [r1, #0]
 801522a:	491b      	ldr	r1, [pc, #108]	@ (8015298 <__b2d+0x90>)
 801522c:	dc15      	bgt.n	801525a <__b2d+0x52>
 801522e:	f1c0 0c0b 	rsb	ip, r0, #11
 8015232:	fa22 f30c 	lsr.w	r3, r2, ip
 8015236:	45b8      	cmp	r8, r7
 8015238:	ea43 0501 	orr.w	r5, r3, r1
 801523c:	bf34      	ite	cc
 801523e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015242:	2300      	movcs	r3, #0
 8015244:	3015      	adds	r0, #21
 8015246:	fa02 f000 	lsl.w	r0, r2, r0
 801524a:	fa23 f30c 	lsr.w	r3, r3, ip
 801524e:	4303      	orrs	r3, r0
 8015250:	461c      	mov	r4, r3
 8015252:	ec45 4b10 	vmov	d0, r4, r5
 8015256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801525a:	45b8      	cmp	r8, r7
 801525c:	bf3a      	itte	cc
 801525e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015262:	f1a6 0708 	subcc.w	r7, r6, #8
 8015266:	2300      	movcs	r3, #0
 8015268:	380b      	subs	r0, #11
 801526a:	d012      	beq.n	8015292 <__b2d+0x8a>
 801526c:	f1c0 0120 	rsb	r1, r0, #32
 8015270:	fa23 f401 	lsr.w	r4, r3, r1
 8015274:	4082      	lsls	r2, r0
 8015276:	4322      	orrs	r2, r4
 8015278:	4547      	cmp	r7, r8
 801527a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801527e:	bf8c      	ite	hi
 8015280:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015284:	2200      	movls	r2, #0
 8015286:	4083      	lsls	r3, r0
 8015288:	40ca      	lsrs	r2, r1
 801528a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801528e:	4313      	orrs	r3, r2
 8015290:	e7de      	b.n	8015250 <__b2d+0x48>
 8015292:	ea42 0501 	orr.w	r5, r2, r1
 8015296:	e7db      	b.n	8015250 <__b2d+0x48>
 8015298:	3ff00000 	.word	0x3ff00000

0801529c <__d2b>:
 801529c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80152a0:	460f      	mov	r7, r1
 80152a2:	2101      	movs	r1, #1
 80152a4:	ec59 8b10 	vmov	r8, r9, d0
 80152a8:	4616      	mov	r6, r2
 80152aa:	f7ff fc13 	bl	8014ad4 <_Balloc>
 80152ae:	4604      	mov	r4, r0
 80152b0:	b930      	cbnz	r0, 80152c0 <__d2b+0x24>
 80152b2:	4602      	mov	r2, r0
 80152b4:	4b23      	ldr	r3, [pc, #140]	@ (8015344 <__d2b+0xa8>)
 80152b6:	4824      	ldr	r0, [pc, #144]	@ (8015348 <__d2b+0xac>)
 80152b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80152bc:	f001 fafc 	bl	80168b8 <__assert_func>
 80152c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80152c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80152c8:	b10d      	cbz	r5, 80152ce <__d2b+0x32>
 80152ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80152ce:	9301      	str	r3, [sp, #4]
 80152d0:	f1b8 0300 	subs.w	r3, r8, #0
 80152d4:	d023      	beq.n	801531e <__d2b+0x82>
 80152d6:	4668      	mov	r0, sp
 80152d8:	9300      	str	r3, [sp, #0]
 80152da:	f7ff fd0c 	bl	8014cf6 <__lo0bits>
 80152de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80152e2:	b1d0      	cbz	r0, 801531a <__d2b+0x7e>
 80152e4:	f1c0 0320 	rsb	r3, r0, #32
 80152e8:	fa02 f303 	lsl.w	r3, r2, r3
 80152ec:	430b      	orrs	r3, r1
 80152ee:	40c2      	lsrs	r2, r0
 80152f0:	6163      	str	r3, [r4, #20]
 80152f2:	9201      	str	r2, [sp, #4]
 80152f4:	9b01      	ldr	r3, [sp, #4]
 80152f6:	61a3      	str	r3, [r4, #24]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	bf0c      	ite	eq
 80152fc:	2201      	moveq	r2, #1
 80152fe:	2202      	movne	r2, #2
 8015300:	6122      	str	r2, [r4, #16]
 8015302:	b1a5      	cbz	r5, 801532e <__d2b+0x92>
 8015304:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015308:	4405      	add	r5, r0
 801530a:	603d      	str	r5, [r7, #0]
 801530c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015310:	6030      	str	r0, [r6, #0]
 8015312:	4620      	mov	r0, r4
 8015314:	b003      	add	sp, #12
 8015316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801531a:	6161      	str	r1, [r4, #20]
 801531c:	e7ea      	b.n	80152f4 <__d2b+0x58>
 801531e:	a801      	add	r0, sp, #4
 8015320:	f7ff fce9 	bl	8014cf6 <__lo0bits>
 8015324:	9b01      	ldr	r3, [sp, #4]
 8015326:	6163      	str	r3, [r4, #20]
 8015328:	3020      	adds	r0, #32
 801532a:	2201      	movs	r2, #1
 801532c:	e7e8      	b.n	8015300 <__d2b+0x64>
 801532e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015332:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015336:	6038      	str	r0, [r7, #0]
 8015338:	6918      	ldr	r0, [r3, #16]
 801533a:	f7ff fcbd 	bl	8014cb8 <__hi0bits>
 801533e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015342:	e7e5      	b.n	8015310 <__d2b+0x74>
 8015344:	080174a5 	.word	0x080174a5
 8015348:	080174b6 	.word	0x080174b6

0801534c <__ratio>:
 801534c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015350:	4688      	mov	r8, r1
 8015352:	4669      	mov	r1, sp
 8015354:	4681      	mov	r9, r0
 8015356:	f7ff ff57 	bl	8015208 <__b2d>
 801535a:	a901      	add	r1, sp, #4
 801535c:	4640      	mov	r0, r8
 801535e:	ec55 4b10 	vmov	r4, r5, d0
 8015362:	f7ff ff51 	bl	8015208 <__b2d>
 8015366:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801536a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801536e:	1ad2      	subs	r2, r2, r3
 8015370:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015374:	1a5b      	subs	r3, r3, r1
 8015376:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801537a:	ec57 6b10 	vmov	r6, r7, d0
 801537e:	2b00      	cmp	r3, #0
 8015380:	bfd6      	itet	le
 8015382:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015386:	462a      	movgt	r2, r5
 8015388:	463a      	movle	r2, r7
 801538a:	46ab      	mov	fp, r5
 801538c:	46a2      	mov	sl, r4
 801538e:	bfce      	itee	gt
 8015390:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015394:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015398:	ee00 3a90 	vmovle	s1, r3
 801539c:	ec4b ab17 	vmov	d7, sl, fp
 80153a0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80153a4:	b003      	add	sp, #12
 80153a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080153aa <__copybits>:
 80153aa:	3901      	subs	r1, #1
 80153ac:	b570      	push	{r4, r5, r6, lr}
 80153ae:	1149      	asrs	r1, r1, #5
 80153b0:	6914      	ldr	r4, [r2, #16]
 80153b2:	3101      	adds	r1, #1
 80153b4:	f102 0314 	add.w	r3, r2, #20
 80153b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80153bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80153c0:	1f05      	subs	r5, r0, #4
 80153c2:	42a3      	cmp	r3, r4
 80153c4:	d30c      	bcc.n	80153e0 <__copybits+0x36>
 80153c6:	1aa3      	subs	r3, r4, r2
 80153c8:	3b11      	subs	r3, #17
 80153ca:	f023 0303 	bic.w	r3, r3, #3
 80153ce:	3211      	adds	r2, #17
 80153d0:	42a2      	cmp	r2, r4
 80153d2:	bf88      	it	hi
 80153d4:	2300      	movhi	r3, #0
 80153d6:	4418      	add	r0, r3
 80153d8:	2300      	movs	r3, #0
 80153da:	4288      	cmp	r0, r1
 80153dc:	d305      	bcc.n	80153ea <__copybits+0x40>
 80153de:	bd70      	pop	{r4, r5, r6, pc}
 80153e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80153e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80153e8:	e7eb      	b.n	80153c2 <__copybits+0x18>
 80153ea:	f840 3b04 	str.w	r3, [r0], #4
 80153ee:	e7f4      	b.n	80153da <__copybits+0x30>

080153f0 <__any_on>:
 80153f0:	f100 0214 	add.w	r2, r0, #20
 80153f4:	6900      	ldr	r0, [r0, #16]
 80153f6:	114b      	asrs	r3, r1, #5
 80153f8:	4298      	cmp	r0, r3
 80153fa:	b510      	push	{r4, lr}
 80153fc:	db11      	blt.n	8015422 <__any_on+0x32>
 80153fe:	dd0a      	ble.n	8015416 <__any_on+0x26>
 8015400:	f011 011f 	ands.w	r1, r1, #31
 8015404:	d007      	beq.n	8015416 <__any_on+0x26>
 8015406:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801540a:	fa24 f001 	lsr.w	r0, r4, r1
 801540e:	fa00 f101 	lsl.w	r1, r0, r1
 8015412:	428c      	cmp	r4, r1
 8015414:	d10b      	bne.n	801542e <__any_on+0x3e>
 8015416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801541a:	4293      	cmp	r3, r2
 801541c:	d803      	bhi.n	8015426 <__any_on+0x36>
 801541e:	2000      	movs	r0, #0
 8015420:	bd10      	pop	{r4, pc}
 8015422:	4603      	mov	r3, r0
 8015424:	e7f7      	b.n	8015416 <__any_on+0x26>
 8015426:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801542a:	2900      	cmp	r1, #0
 801542c:	d0f5      	beq.n	801541a <__any_on+0x2a>
 801542e:	2001      	movs	r0, #1
 8015430:	e7f6      	b.n	8015420 <__any_on+0x30>

08015432 <sulp>:
 8015432:	b570      	push	{r4, r5, r6, lr}
 8015434:	4604      	mov	r4, r0
 8015436:	460d      	mov	r5, r1
 8015438:	4616      	mov	r6, r2
 801543a:	ec45 4b10 	vmov	d0, r4, r5
 801543e:	f7ff febd 	bl	80151bc <__ulp>
 8015442:	b17e      	cbz	r6, 8015464 <sulp+0x32>
 8015444:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015448:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801544c:	2b00      	cmp	r3, #0
 801544e:	dd09      	ble.n	8015464 <sulp+0x32>
 8015450:	051b      	lsls	r3, r3, #20
 8015452:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015456:	2000      	movs	r0, #0
 8015458:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801545c:	ec41 0b17 	vmov	d7, r0, r1
 8015460:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015464:	bd70      	pop	{r4, r5, r6, pc}
	...

08015468 <_strtod_l>:
 8015468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	ed2d 8b0a 	vpush	{d8-d12}
 8015470:	b097      	sub	sp, #92	@ 0x5c
 8015472:	4688      	mov	r8, r1
 8015474:	920e      	str	r2, [sp, #56]	@ 0x38
 8015476:	2200      	movs	r2, #0
 8015478:	9212      	str	r2, [sp, #72]	@ 0x48
 801547a:	9005      	str	r0, [sp, #20]
 801547c:	f04f 0a00 	mov.w	sl, #0
 8015480:	f04f 0b00 	mov.w	fp, #0
 8015484:	460a      	mov	r2, r1
 8015486:	9211      	str	r2, [sp, #68]	@ 0x44
 8015488:	7811      	ldrb	r1, [r2, #0]
 801548a:	292b      	cmp	r1, #43	@ 0x2b
 801548c:	d04c      	beq.n	8015528 <_strtod_l+0xc0>
 801548e:	d839      	bhi.n	8015504 <_strtod_l+0x9c>
 8015490:	290d      	cmp	r1, #13
 8015492:	d833      	bhi.n	80154fc <_strtod_l+0x94>
 8015494:	2908      	cmp	r1, #8
 8015496:	d833      	bhi.n	8015500 <_strtod_l+0x98>
 8015498:	2900      	cmp	r1, #0
 801549a:	d03c      	beq.n	8015516 <_strtod_l+0xae>
 801549c:	2200      	movs	r2, #0
 801549e:	9208      	str	r2, [sp, #32]
 80154a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80154a2:	782a      	ldrb	r2, [r5, #0]
 80154a4:	2a30      	cmp	r2, #48	@ 0x30
 80154a6:	f040 80b5 	bne.w	8015614 <_strtod_l+0x1ac>
 80154aa:	786a      	ldrb	r2, [r5, #1]
 80154ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80154b0:	2a58      	cmp	r2, #88	@ 0x58
 80154b2:	d170      	bne.n	8015596 <_strtod_l+0x12e>
 80154b4:	9302      	str	r3, [sp, #8]
 80154b6:	9b08      	ldr	r3, [sp, #32]
 80154b8:	9301      	str	r3, [sp, #4]
 80154ba:	ab12      	add	r3, sp, #72	@ 0x48
 80154bc:	9300      	str	r3, [sp, #0]
 80154be:	4a8b      	ldr	r2, [pc, #556]	@ (80156ec <_strtod_l+0x284>)
 80154c0:	9805      	ldr	r0, [sp, #20]
 80154c2:	ab13      	add	r3, sp, #76	@ 0x4c
 80154c4:	a911      	add	r1, sp, #68	@ 0x44
 80154c6:	f001 fa91 	bl	80169ec <__gethex>
 80154ca:	f010 060f 	ands.w	r6, r0, #15
 80154ce:	4604      	mov	r4, r0
 80154d0:	d005      	beq.n	80154de <_strtod_l+0x76>
 80154d2:	2e06      	cmp	r6, #6
 80154d4:	d12a      	bne.n	801552c <_strtod_l+0xc4>
 80154d6:	3501      	adds	r5, #1
 80154d8:	2300      	movs	r3, #0
 80154da:	9511      	str	r5, [sp, #68]	@ 0x44
 80154dc:	9308      	str	r3, [sp, #32]
 80154de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	f040 852f 	bne.w	8015f44 <_strtod_l+0xadc>
 80154e6:	9b08      	ldr	r3, [sp, #32]
 80154e8:	ec4b ab10 	vmov	d0, sl, fp
 80154ec:	b1cb      	cbz	r3, 8015522 <_strtod_l+0xba>
 80154ee:	eeb1 0b40 	vneg.f64	d0, d0
 80154f2:	b017      	add	sp, #92	@ 0x5c
 80154f4:	ecbd 8b0a 	vpop	{d8-d12}
 80154f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154fc:	2920      	cmp	r1, #32
 80154fe:	d1cd      	bne.n	801549c <_strtod_l+0x34>
 8015500:	3201      	adds	r2, #1
 8015502:	e7c0      	b.n	8015486 <_strtod_l+0x1e>
 8015504:	292d      	cmp	r1, #45	@ 0x2d
 8015506:	d1c9      	bne.n	801549c <_strtod_l+0x34>
 8015508:	2101      	movs	r1, #1
 801550a:	9108      	str	r1, [sp, #32]
 801550c:	1c51      	adds	r1, r2, #1
 801550e:	9111      	str	r1, [sp, #68]	@ 0x44
 8015510:	7852      	ldrb	r2, [r2, #1]
 8015512:	2a00      	cmp	r2, #0
 8015514:	d1c4      	bne.n	80154a0 <_strtod_l+0x38>
 8015516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015518:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801551c:	2b00      	cmp	r3, #0
 801551e:	f040 850f 	bne.w	8015f40 <_strtod_l+0xad8>
 8015522:	ec4b ab10 	vmov	d0, sl, fp
 8015526:	e7e4      	b.n	80154f2 <_strtod_l+0x8a>
 8015528:	2100      	movs	r1, #0
 801552a:	e7ee      	b.n	801550a <_strtod_l+0xa2>
 801552c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801552e:	b13a      	cbz	r2, 8015540 <_strtod_l+0xd8>
 8015530:	2135      	movs	r1, #53	@ 0x35
 8015532:	a814      	add	r0, sp, #80	@ 0x50
 8015534:	f7ff ff39 	bl	80153aa <__copybits>
 8015538:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801553a:	9805      	ldr	r0, [sp, #20]
 801553c:	f7ff fb0a 	bl	8014b54 <_Bfree>
 8015540:	1e73      	subs	r3, r6, #1
 8015542:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015544:	2b04      	cmp	r3, #4
 8015546:	d806      	bhi.n	8015556 <_strtod_l+0xee>
 8015548:	e8df f003 	tbb	[pc, r3]
 801554c:	201d0314 	.word	0x201d0314
 8015550:	14          	.byte	0x14
 8015551:	00          	.byte	0x00
 8015552:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015556:	05e3      	lsls	r3, r4, #23
 8015558:	bf48      	it	mi
 801555a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801555e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015562:	0d1b      	lsrs	r3, r3, #20
 8015564:	051b      	lsls	r3, r3, #20
 8015566:	2b00      	cmp	r3, #0
 8015568:	d1b9      	bne.n	80154de <_strtod_l+0x76>
 801556a:	f7fe fb91 	bl	8013c90 <__errno>
 801556e:	2322      	movs	r3, #34	@ 0x22
 8015570:	6003      	str	r3, [r0, #0]
 8015572:	e7b4      	b.n	80154de <_strtod_l+0x76>
 8015574:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015578:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801557c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015580:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015584:	e7e7      	b.n	8015556 <_strtod_l+0xee>
 8015586:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80156f4 <_strtod_l+0x28c>
 801558a:	e7e4      	b.n	8015556 <_strtod_l+0xee>
 801558c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015590:	f04f 3aff 	mov.w	sl, #4294967295
 8015594:	e7df      	b.n	8015556 <_strtod_l+0xee>
 8015596:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015598:	1c5a      	adds	r2, r3, #1
 801559a:	9211      	str	r2, [sp, #68]	@ 0x44
 801559c:	785b      	ldrb	r3, [r3, #1]
 801559e:	2b30      	cmp	r3, #48	@ 0x30
 80155a0:	d0f9      	beq.n	8015596 <_strtod_l+0x12e>
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d09b      	beq.n	80154de <_strtod_l+0x76>
 80155a6:	2301      	movs	r3, #1
 80155a8:	2600      	movs	r6, #0
 80155aa:	9307      	str	r3, [sp, #28]
 80155ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80155ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80155b0:	46b1      	mov	r9, r6
 80155b2:	4635      	mov	r5, r6
 80155b4:	220a      	movs	r2, #10
 80155b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80155b8:	7804      	ldrb	r4, [r0, #0]
 80155ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80155be:	b2d9      	uxtb	r1, r3
 80155c0:	2909      	cmp	r1, #9
 80155c2:	d929      	bls.n	8015618 <_strtod_l+0x1b0>
 80155c4:	494a      	ldr	r1, [pc, #296]	@ (80156f0 <_strtod_l+0x288>)
 80155c6:	2201      	movs	r2, #1
 80155c8:	f001 f928 	bl	801681c <strncmp>
 80155cc:	b378      	cbz	r0, 801562e <_strtod_l+0x1c6>
 80155ce:	2000      	movs	r0, #0
 80155d0:	4622      	mov	r2, r4
 80155d2:	462b      	mov	r3, r5
 80155d4:	4607      	mov	r7, r0
 80155d6:	9006      	str	r0, [sp, #24]
 80155d8:	2a65      	cmp	r2, #101	@ 0x65
 80155da:	d001      	beq.n	80155e0 <_strtod_l+0x178>
 80155dc:	2a45      	cmp	r2, #69	@ 0x45
 80155de:	d117      	bne.n	8015610 <_strtod_l+0x1a8>
 80155e0:	b91b      	cbnz	r3, 80155ea <_strtod_l+0x182>
 80155e2:	9b07      	ldr	r3, [sp, #28]
 80155e4:	4303      	orrs	r3, r0
 80155e6:	d096      	beq.n	8015516 <_strtod_l+0xae>
 80155e8:	2300      	movs	r3, #0
 80155ea:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80155ee:	f108 0201 	add.w	r2, r8, #1
 80155f2:	9211      	str	r2, [sp, #68]	@ 0x44
 80155f4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80155f8:	2a2b      	cmp	r2, #43	@ 0x2b
 80155fa:	d06b      	beq.n	80156d4 <_strtod_l+0x26c>
 80155fc:	2a2d      	cmp	r2, #45	@ 0x2d
 80155fe:	d071      	beq.n	80156e4 <_strtod_l+0x27c>
 8015600:	f04f 0e00 	mov.w	lr, #0
 8015604:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015608:	2c09      	cmp	r4, #9
 801560a:	d979      	bls.n	8015700 <_strtod_l+0x298>
 801560c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015610:	2400      	movs	r4, #0
 8015612:	e094      	b.n	801573e <_strtod_l+0x2d6>
 8015614:	2300      	movs	r3, #0
 8015616:	e7c7      	b.n	80155a8 <_strtod_l+0x140>
 8015618:	2d08      	cmp	r5, #8
 801561a:	f100 0001 	add.w	r0, r0, #1
 801561e:	bfd4      	ite	le
 8015620:	fb02 3909 	mlale	r9, r2, r9, r3
 8015624:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015628:	3501      	adds	r5, #1
 801562a:	9011      	str	r0, [sp, #68]	@ 0x44
 801562c:	e7c3      	b.n	80155b6 <_strtod_l+0x14e>
 801562e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015630:	1c5a      	adds	r2, r3, #1
 8015632:	9211      	str	r2, [sp, #68]	@ 0x44
 8015634:	785a      	ldrb	r2, [r3, #1]
 8015636:	b375      	cbz	r5, 8015696 <_strtod_l+0x22e>
 8015638:	4607      	mov	r7, r0
 801563a:	462b      	mov	r3, r5
 801563c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015640:	2909      	cmp	r1, #9
 8015642:	d913      	bls.n	801566c <_strtod_l+0x204>
 8015644:	2101      	movs	r1, #1
 8015646:	9106      	str	r1, [sp, #24]
 8015648:	e7c6      	b.n	80155d8 <_strtod_l+0x170>
 801564a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801564c:	1c5a      	adds	r2, r3, #1
 801564e:	9211      	str	r2, [sp, #68]	@ 0x44
 8015650:	785a      	ldrb	r2, [r3, #1]
 8015652:	3001      	adds	r0, #1
 8015654:	2a30      	cmp	r2, #48	@ 0x30
 8015656:	d0f8      	beq.n	801564a <_strtod_l+0x1e2>
 8015658:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801565c:	2b08      	cmp	r3, #8
 801565e:	f200 8476 	bhi.w	8015f4e <_strtod_l+0xae6>
 8015662:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015664:	930a      	str	r3, [sp, #40]	@ 0x28
 8015666:	4607      	mov	r7, r0
 8015668:	2000      	movs	r0, #0
 801566a:	4603      	mov	r3, r0
 801566c:	3a30      	subs	r2, #48	@ 0x30
 801566e:	f100 0101 	add.w	r1, r0, #1
 8015672:	d023      	beq.n	80156bc <_strtod_l+0x254>
 8015674:	440f      	add	r7, r1
 8015676:	eb00 0c03 	add.w	ip, r0, r3
 801567a:	4619      	mov	r1, r3
 801567c:	240a      	movs	r4, #10
 801567e:	4561      	cmp	r1, ip
 8015680:	d10b      	bne.n	801569a <_strtod_l+0x232>
 8015682:	1c5c      	adds	r4, r3, #1
 8015684:	4403      	add	r3, r0
 8015686:	2b08      	cmp	r3, #8
 8015688:	4404      	add	r4, r0
 801568a:	dc11      	bgt.n	80156b0 <_strtod_l+0x248>
 801568c:	230a      	movs	r3, #10
 801568e:	fb03 2909 	mla	r9, r3, r9, r2
 8015692:	2100      	movs	r1, #0
 8015694:	e013      	b.n	80156be <_strtod_l+0x256>
 8015696:	4628      	mov	r0, r5
 8015698:	e7dc      	b.n	8015654 <_strtod_l+0x1ec>
 801569a:	2908      	cmp	r1, #8
 801569c:	f101 0101 	add.w	r1, r1, #1
 80156a0:	dc02      	bgt.n	80156a8 <_strtod_l+0x240>
 80156a2:	fb04 f909 	mul.w	r9, r4, r9
 80156a6:	e7ea      	b.n	801567e <_strtod_l+0x216>
 80156a8:	2910      	cmp	r1, #16
 80156aa:	bfd8      	it	le
 80156ac:	4366      	mulle	r6, r4
 80156ae:	e7e6      	b.n	801567e <_strtod_l+0x216>
 80156b0:	2b0f      	cmp	r3, #15
 80156b2:	dcee      	bgt.n	8015692 <_strtod_l+0x22a>
 80156b4:	230a      	movs	r3, #10
 80156b6:	fb03 2606 	mla	r6, r3, r6, r2
 80156ba:	e7ea      	b.n	8015692 <_strtod_l+0x22a>
 80156bc:	461c      	mov	r4, r3
 80156be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80156c0:	1c5a      	adds	r2, r3, #1
 80156c2:	9211      	str	r2, [sp, #68]	@ 0x44
 80156c4:	785a      	ldrb	r2, [r3, #1]
 80156c6:	4608      	mov	r0, r1
 80156c8:	4623      	mov	r3, r4
 80156ca:	e7b7      	b.n	801563c <_strtod_l+0x1d4>
 80156cc:	2301      	movs	r3, #1
 80156ce:	2700      	movs	r7, #0
 80156d0:	9306      	str	r3, [sp, #24]
 80156d2:	e786      	b.n	80155e2 <_strtod_l+0x17a>
 80156d4:	f04f 0e00 	mov.w	lr, #0
 80156d8:	f108 0202 	add.w	r2, r8, #2
 80156dc:	9211      	str	r2, [sp, #68]	@ 0x44
 80156de:	f898 2002 	ldrb.w	r2, [r8, #2]
 80156e2:	e78f      	b.n	8015604 <_strtod_l+0x19c>
 80156e4:	f04f 0e01 	mov.w	lr, #1
 80156e8:	e7f6      	b.n	80156d8 <_strtod_l+0x270>
 80156ea:	bf00      	nop
 80156ec:	08017628 	.word	0x08017628
 80156f0:	08017610 	.word	0x08017610
 80156f4:	7ff00000 	.word	0x7ff00000
 80156f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80156fa:	1c54      	adds	r4, r2, #1
 80156fc:	9411      	str	r4, [sp, #68]	@ 0x44
 80156fe:	7852      	ldrb	r2, [r2, #1]
 8015700:	2a30      	cmp	r2, #48	@ 0x30
 8015702:	d0f9      	beq.n	80156f8 <_strtod_l+0x290>
 8015704:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015708:	2c08      	cmp	r4, #8
 801570a:	d881      	bhi.n	8015610 <_strtod_l+0x1a8>
 801570c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015710:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015712:	9209      	str	r2, [sp, #36]	@ 0x24
 8015714:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015716:	1c51      	adds	r1, r2, #1
 8015718:	9111      	str	r1, [sp, #68]	@ 0x44
 801571a:	7852      	ldrb	r2, [r2, #1]
 801571c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015720:	2c09      	cmp	r4, #9
 8015722:	d938      	bls.n	8015796 <_strtod_l+0x32e>
 8015724:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015726:	1b0c      	subs	r4, r1, r4
 8015728:	2c08      	cmp	r4, #8
 801572a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801572e:	dc02      	bgt.n	8015736 <_strtod_l+0x2ce>
 8015730:	4564      	cmp	r4, ip
 8015732:	bfa8      	it	ge
 8015734:	4664      	movge	r4, ip
 8015736:	f1be 0f00 	cmp.w	lr, #0
 801573a:	d000      	beq.n	801573e <_strtod_l+0x2d6>
 801573c:	4264      	negs	r4, r4
 801573e:	2b00      	cmp	r3, #0
 8015740:	d14e      	bne.n	80157e0 <_strtod_l+0x378>
 8015742:	9b07      	ldr	r3, [sp, #28]
 8015744:	4318      	orrs	r0, r3
 8015746:	f47f aeca 	bne.w	80154de <_strtod_l+0x76>
 801574a:	9b06      	ldr	r3, [sp, #24]
 801574c:	2b00      	cmp	r3, #0
 801574e:	f47f aee2 	bne.w	8015516 <_strtod_l+0xae>
 8015752:	2a69      	cmp	r2, #105	@ 0x69
 8015754:	d027      	beq.n	80157a6 <_strtod_l+0x33e>
 8015756:	dc24      	bgt.n	80157a2 <_strtod_l+0x33a>
 8015758:	2a49      	cmp	r2, #73	@ 0x49
 801575a:	d024      	beq.n	80157a6 <_strtod_l+0x33e>
 801575c:	2a4e      	cmp	r2, #78	@ 0x4e
 801575e:	f47f aeda 	bne.w	8015516 <_strtod_l+0xae>
 8015762:	4997      	ldr	r1, [pc, #604]	@ (80159c0 <_strtod_l+0x558>)
 8015764:	a811      	add	r0, sp, #68	@ 0x44
 8015766:	f001 fb63 	bl	8016e30 <__match>
 801576a:	2800      	cmp	r0, #0
 801576c:	f43f aed3 	beq.w	8015516 <_strtod_l+0xae>
 8015770:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015772:	781b      	ldrb	r3, [r3, #0]
 8015774:	2b28      	cmp	r3, #40	@ 0x28
 8015776:	d12d      	bne.n	80157d4 <_strtod_l+0x36c>
 8015778:	4992      	ldr	r1, [pc, #584]	@ (80159c4 <_strtod_l+0x55c>)
 801577a:	aa14      	add	r2, sp, #80	@ 0x50
 801577c:	a811      	add	r0, sp, #68	@ 0x44
 801577e:	f001 fb6b 	bl	8016e58 <__hexnan>
 8015782:	2805      	cmp	r0, #5
 8015784:	d126      	bne.n	80157d4 <_strtod_l+0x36c>
 8015786:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015788:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801578c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015790:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015794:	e6a3      	b.n	80154de <_strtod_l+0x76>
 8015796:	240a      	movs	r4, #10
 8015798:	fb04 2c0c 	mla	ip, r4, ip, r2
 801579c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80157a0:	e7b8      	b.n	8015714 <_strtod_l+0x2ac>
 80157a2:	2a6e      	cmp	r2, #110	@ 0x6e
 80157a4:	e7db      	b.n	801575e <_strtod_l+0x2f6>
 80157a6:	4988      	ldr	r1, [pc, #544]	@ (80159c8 <_strtod_l+0x560>)
 80157a8:	a811      	add	r0, sp, #68	@ 0x44
 80157aa:	f001 fb41 	bl	8016e30 <__match>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	f43f aeb1 	beq.w	8015516 <_strtod_l+0xae>
 80157b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80157b6:	4985      	ldr	r1, [pc, #532]	@ (80159cc <_strtod_l+0x564>)
 80157b8:	3b01      	subs	r3, #1
 80157ba:	a811      	add	r0, sp, #68	@ 0x44
 80157bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80157be:	f001 fb37 	bl	8016e30 <__match>
 80157c2:	b910      	cbnz	r0, 80157ca <_strtod_l+0x362>
 80157c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80157c6:	3301      	adds	r3, #1
 80157c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80157ca:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80159e0 <_strtod_l+0x578>
 80157ce:	f04f 0a00 	mov.w	sl, #0
 80157d2:	e684      	b.n	80154de <_strtod_l+0x76>
 80157d4:	487e      	ldr	r0, [pc, #504]	@ (80159d0 <_strtod_l+0x568>)
 80157d6:	f001 f867 	bl	80168a8 <nan>
 80157da:	ec5b ab10 	vmov	sl, fp, d0
 80157de:	e67e      	b.n	80154de <_strtod_l+0x76>
 80157e0:	ee07 9a90 	vmov	s15, r9
 80157e4:	1be2      	subs	r2, r4, r7
 80157e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80157ea:	2d00      	cmp	r5, #0
 80157ec:	bf08      	it	eq
 80157ee:	461d      	moveq	r5, r3
 80157f0:	2b10      	cmp	r3, #16
 80157f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80157f4:	461a      	mov	r2, r3
 80157f6:	bfa8      	it	ge
 80157f8:	2210      	movge	r2, #16
 80157fa:	2b09      	cmp	r3, #9
 80157fc:	ec5b ab17 	vmov	sl, fp, d7
 8015800:	dc15      	bgt.n	801582e <_strtod_l+0x3c6>
 8015802:	1be1      	subs	r1, r4, r7
 8015804:	2900      	cmp	r1, #0
 8015806:	f43f ae6a 	beq.w	80154de <_strtod_l+0x76>
 801580a:	eba4 0107 	sub.w	r1, r4, r7
 801580e:	dd72      	ble.n	80158f6 <_strtod_l+0x48e>
 8015810:	2916      	cmp	r1, #22
 8015812:	dc59      	bgt.n	80158c8 <_strtod_l+0x460>
 8015814:	4b6f      	ldr	r3, [pc, #444]	@ (80159d4 <_strtod_l+0x56c>)
 8015816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801581c:	ed93 7b00 	vldr	d7, [r3]
 8015820:	ec4b ab16 	vmov	d6, sl, fp
 8015824:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015828:	ec5b ab17 	vmov	sl, fp, d7
 801582c:	e657      	b.n	80154de <_strtod_l+0x76>
 801582e:	4969      	ldr	r1, [pc, #420]	@ (80159d4 <_strtod_l+0x56c>)
 8015830:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015834:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015838:	ee06 6a90 	vmov	s13, r6
 801583c:	2b0f      	cmp	r3, #15
 801583e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015842:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015846:	ec5b ab16 	vmov	sl, fp, d6
 801584a:	ddda      	ble.n	8015802 <_strtod_l+0x39a>
 801584c:	1a9a      	subs	r2, r3, r2
 801584e:	1be1      	subs	r1, r4, r7
 8015850:	440a      	add	r2, r1
 8015852:	2a00      	cmp	r2, #0
 8015854:	f340 8094 	ble.w	8015980 <_strtod_l+0x518>
 8015858:	f012 000f 	ands.w	r0, r2, #15
 801585c:	d00a      	beq.n	8015874 <_strtod_l+0x40c>
 801585e:	495d      	ldr	r1, [pc, #372]	@ (80159d4 <_strtod_l+0x56c>)
 8015860:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015864:	ed91 7b00 	vldr	d7, [r1]
 8015868:	ec4b ab16 	vmov	d6, sl, fp
 801586c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015870:	ec5b ab17 	vmov	sl, fp, d7
 8015874:	f032 020f 	bics.w	r2, r2, #15
 8015878:	d073      	beq.n	8015962 <_strtod_l+0x4fa>
 801587a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801587e:	dd47      	ble.n	8015910 <_strtod_l+0x4a8>
 8015880:	2400      	movs	r4, #0
 8015882:	4625      	mov	r5, r4
 8015884:	9407      	str	r4, [sp, #28]
 8015886:	4626      	mov	r6, r4
 8015888:	9a05      	ldr	r2, [sp, #20]
 801588a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80159e0 <_strtod_l+0x578>
 801588e:	2322      	movs	r3, #34	@ 0x22
 8015890:	6013      	str	r3, [r2, #0]
 8015892:	f04f 0a00 	mov.w	sl, #0
 8015896:	9b07      	ldr	r3, [sp, #28]
 8015898:	2b00      	cmp	r3, #0
 801589a:	f43f ae20 	beq.w	80154de <_strtod_l+0x76>
 801589e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80158a0:	9805      	ldr	r0, [sp, #20]
 80158a2:	f7ff f957 	bl	8014b54 <_Bfree>
 80158a6:	9805      	ldr	r0, [sp, #20]
 80158a8:	4631      	mov	r1, r6
 80158aa:	f7ff f953 	bl	8014b54 <_Bfree>
 80158ae:	9805      	ldr	r0, [sp, #20]
 80158b0:	4629      	mov	r1, r5
 80158b2:	f7ff f94f 	bl	8014b54 <_Bfree>
 80158b6:	9907      	ldr	r1, [sp, #28]
 80158b8:	9805      	ldr	r0, [sp, #20]
 80158ba:	f7ff f94b 	bl	8014b54 <_Bfree>
 80158be:	9805      	ldr	r0, [sp, #20]
 80158c0:	4621      	mov	r1, r4
 80158c2:	f7ff f947 	bl	8014b54 <_Bfree>
 80158c6:	e60a      	b.n	80154de <_strtod_l+0x76>
 80158c8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80158cc:	1be0      	subs	r0, r4, r7
 80158ce:	4281      	cmp	r1, r0
 80158d0:	dbbc      	blt.n	801584c <_strtod_l+0x3e4>
 80158d2:	4a40      	ldr	r2, [pc, #256]	@ (80159d4 <_strtod_l+0x56c>)
 80158d4:	f1c3 030f 	rsb	r3, r3, #15
 80158d8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80158dc:	ed91 7b00 	vldr	d7, [r1]
 80158e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80158e2:	ec4b ab16 	vmov	d6, sl, fp
 80158e6:	1acb      	subs	r3, r1, r3
 80158e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80158ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80158f0:	ed92 6b00 	vldr	d6, [r2]
 80158f4:	e796      	b.n	8015824 <_strtod_l+0x3bc>
 80158f6:	3116      	adds	r1, #22
 80158f8:	dba8      	blt.n	801584c <_strtod_l+0x3e4>
 80158fa:	4b36      	ldr	r3, [pc, #216]	@ (80159d4 <_strtod_l+0x56c>)
 80158fc:	1b3c      	subs	r4, r7, r4
 80158fe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015902:	ed94 7b00 	vldr	d7, [r4]
 8015906:	ec4b ab16 	vmov	d6, sl, fp
 801590a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801590e:	e78b      	b.n	8015828 <_strtod_l+0x3c0>
 8015910:	2000      	movs	r0, #0
 8015912:	ec4b ab17 	vmov	d7, sl, fp
 8015916:	4e30      	ldr	r6, [pc, #192]	@ (80159d8 <_strtod_l+0x570>)
 8015918:	1112      	asrs	r2, r2, #4
 801591a:	4601      	mov	r1, r0
 801591c:	2a01      	cmp	r2, #1
 801591e:	dc23      	bgt.n	8015968 <_strtod_l+0x500>
 8015920:	b108      	cbz	r0, 8015926 <_strtod_l+0x4be>
 8015922:	ec5b ab17 	vmov	sl, fp, d7
 8015926:	4a2c      	ldr	r2, [pc, #176]	@ (80159d8 <_strtod_l+0x570>)
 8015928:	482c      	ldr	r0, [pc, #176]	@ (80159dc <_strtod_l+0x574>)
 801592a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801592e:	ed92 7b00 	vldr	d7, [r2]
 8015932:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015936:	ec4b ab16 	vmov	d6, sl, fp
 801593a:	4a29      	ldr	r2, [pc, #164]	@ (80159e0 <_strtod_l+0x578>)
 801593c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015940:	ee17 1a90 	vmov	r1, s15
 8015944:	400a      	ands	r2, r1
 8015946:	4282      	cmp	r2, r0
 8015948:	ec5b ab17 	vmov	sl, fp, d7
 801594c:	d898      	bhi.n	8015880 <_strtod_l+0x418>
 801594e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015952:	4282      	cmp	r2, r0
 8015954:	bf86      	itte	hi
 8015956:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80159e4 <_strtod_l+0x57c>
 801595a:	f04f 3aff 	movhi.w	sl, #4294967295
 801595e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015962:	2200      	movs	r2, #0
 8015964:	9206      	str	r2, [sp, #24]
 8015966:	e076      	b.n	8015a56 <_strtod_l+0x5ee>
 8015968:	f012 0f01 	tst.w	r2, #1
 801596c:	d004      	beq.n	8015978 <_strtod_l+0x510>
 801596e:	ed96 6b00 	vldr	d6, [r6]
 8015972:	2001      	movs	r0, #1
 8015974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015978:	3101      	adds	r1, #1
 801597a:	1052      	asrs	r2, r2, #1
 801597c:	3608      	adds	r6, #8
 801597e:	e7cd      	b.n	801591c <_strtod_l+0x4b4>
 8015980:	d0ef      	beq.n	8015962 <_strtod_l+0x4fa>
 8015982:	4252      	negs	r2, r2
 8015984:	f012 000f 	ands.w	r0, r2, #15
 8015988:	d00a      	beq.n	80159a0 <_strtod_l+0x538>
 801598a:	4912      	ldr	r1, [pc, #72]	@ (80159d4 <_strtod_l+0x56c>)
 801598c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015990:	ed91 7b00 	vldr	d7, [r1]
 8015994:	ec4b ab16 	vmov	d6, sl, fp
 8015998:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801599c:	ec5b ab17 	vmov	sl, fp, d7
 80159a0:	1112      	asrs	r2, r2, #4
 80159a2:	d0de      	beq.n	8015962 <_strtod_l+0x4fa>
 80159a4:	2a1f      	cmp	r2, #31
 80159a6:	dd1f      	ble.n	80159e8 <_strtod_l+0x580>
 80159a8:	2400      	movs	r4, #0
 80159aa:	4625      	mov	r5, r4
 80159ac:	9407      	str	r4, [sp, #28]
 80159ae:	4626      	mov	r6, r4
 80159b0:	9a05      	ldr	r2, [sp, #20]
 80159b2:	2322      	movs	r3, #34	@ 0x22
 80159b4:	f04f 0a00 	mov.w	sl, #0
 80159b8:	f04f 0b00 	mov.w	fp, #0
 80159bc:	6013      	str	r3, [r2, #0]
 80159be:	e76a      	b.n	8015896 <_strtod_l+0x42e>
 80159c0:	080173fd 	.word	0x080173fd
 80159c4:	08017614 	.word	0x08017614
 80159c8:	080173f5 	.word	0x080173f5
 80159cc:	0801742c 	.word	0x0801742c
 80159d0:	080177bd 	.word	0x080177bd
 80159d4:	08017548 	.word	0x08017548
 80159d8:	08017520 	.word	0x08017520
 80159dc:	7ca00000 	.word	0x7ca00000
 80159e0:	7ff00000 	.word	0x7ff00000
 80159e4:	7fefffff 	.word	0x7fefffff
 80159e8:	f012 0110 	ands.w	r1, r2, #16
 80159ec:	bf18      	it	ne
 80159ee:	216a      	movne	r1, #106	@ 0x6a
 80159f0:	9106      	str	r1, [sp, #24]
 80159f2:	ec4b ab17 	vmov	d7, sl, fp
 80159f6:	49b0      	ldr	r1, [pc, #704]	@ (8015cb8 <_strtod_l+0x850>)
 80159f8:	2000      	movs	r0, #0
 80159fa:	07d6      	lsls	r6, r2, #31
 80159fc:	d504      	bpl.n	8015a08 <_strtod_l+0x5a0>
 80159fe:	ed91 6b00 	vldr	d6, [r1]
 8015a02:	2001      	movs	r0, #1
 8015a04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015a08:	1052      	asrs	r2, r2, #1
 8015a0a:	f101 0108 	add.w	r1, r1, #8
 8015a0e:	d1f4      	bne.n	80159fa <_strtod_l+0x592>
 8015a10:	b108      	cbz	r0, 8015a16 <_strtod_l+0x5ae>
 8015a12:	ec5b ab17 	vmov	sl, fp, d7
 8015a16:	9a06      	ldr	r2, [sp, #24]
 8015a18:	b1b2      	cbz	r2, 8015a48 <_strtod_l+0x5e0>
 8015a1a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015a1e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015a22:	2a00      	cmp	r2, #0
 8015a24:	4658      	mov	r0, fp
 8015a26:	dd0f      	ble.n	8015a48 <_strtod_l+0x5e0>
 8015a28:	2a1f      	cmp	r2, #31
 8015a2a:	dd55      	ble.n	8015ad8 <_strtod_l+0x670>
 8015a2c:	2a34      	cmp	r2, #52	@ 0x34
 8015a2e:	bfde      	ittt	le
 8015a30:	f04f 32ff 	movle.w	r2, #4294967295
 8015a34:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015a38:	408a      	lslle	r2, r1
 8015a3a:	f04f 0a00 	mov.w	sl, #0
 8015a3e:	bfcc      	ite	gt
 8015a40:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015a44:	ea02 0b00 	andle.w	fp, r2, r0
 8015a48:	ec4b ab17 	vmov	d7, sl, fp
 8015a4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a54:	d0a8      	beq.n	80159a8 <_strtod_l+0x540>
 8015a56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015a58:	9805      	ldr	r0, [sp, #20]
 8015a5a:	f8cd 9000 	str.w	r9, [sp]
 8015a5e:	462a      	mov	r2, r5
 8015a60:	f7ff f8e0 	bl	8014c24 <__s2b>
 8015a64:	9007      	str	r0, [sp, #28]
 8015a66:	2800      	cmp	r0, #0
 8015a68:	f43f af0a 	beq.w	8015880 <_strtod_l+0x418>
 8015a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a6e:	1b3f      	subs	r7, r7, r4
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	bfb4      	ite	lt
 8015a74:	463b      	movlt	r3, r7
 8015a76:	2300      	movge	r3, #0
 8015a78:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a7c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8015ca8 <_strtod_l+0x840>
 8015a80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a84:	2400      	movs	r4, #0
 8015a86:	930d      	str	r3, [sp, #52]	@ 0x34
 8015a88:	4625      	mov	r5, r4
 8015a8a:	9b07      	ldr	r3, [sp, #28]
 8015a8c:	9805      	ldr	r0, [sp, #20]
 8015a8e:	6859      	ldr	r1, [r3, #4]
 8015a90:	f7ff f820 	bl	8014ad4 <_Balloc>
 8015a94:	4606      	mov	r6, r0
 8015a96:	2800      	cmp	r0, #0
 8015a98:	f43f aef6 	beq.w	8015888 <_strtod_l+0x420>
 8015a9c:	9b07      	ldr	r3, [sp, #28]
 8015a9e:	691a      	ldr	r2, [r3, #16]
 8015aa0:	ec4b ab19 	vmov	d9, sl, fp
 8015aa4:	3202      	adds	r2, #2
 8015aa6:	f103 010c 	add.w	r1, r3, #12
 8015aaa:	0092      	lsls	r2, r2, #2
 8015aac:	300c      	adds	r0, #12
 8015aae:	f7fe f91c 	bl	8013cea <memcpy>
 8015ab2:	eeb0 0b49 	vmov.f64	d0, d9
 8015ab6:	9805      	ldr	r0, [sp, #20]
 8015ab8:	aa14      	add	r2, sp, #80	@ 0x50
 8015aba:	a913      	add	r1, sp, #76	@ 0x4c
 8015abc:	f7ff fbee 	bl	801529c <__d2b>
 8015ac0:	9012      	str	r0, [sp, #72]	@ 0x48
 8015ac2:	2800      	cmp	r0, #0
 8015ac4:	f43f aee0 	beq.w	8015888 <_strtod_l+0x420>
 8015ac8:	9805      	ldr	r0, [sp, #20]
 8015aca:	2101      	movs	r1, #1
 8015acc:	f7ff f940 	bl	8014d50 <__i2b>
 8015ad0:	4605      	mov	r5, r0
 8015ad2:	b940      	cbnz	r0, 8015ae6 <_strtod_l+0x67e>
 8015ad4:	2500      	movs	r5, #0
 8015ad6:	e6d7      	b.n	8015888 <_strtod_l+0x420>
 8015ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8015adc:	fa01 f202 	lsl.w	r2, r1, r2
 8015ae0:	ea02 0a0a 	and.w	sl, r2, sl
 8015ae4:	e7b0      	b.n	8015a48 <_strtod_l+0x5e0>
 8015ae6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015ae8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015aea:	2f00      	cmp	r7, #0
 8015aec:	bfab      	itete	ge
 8015aee:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015af0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015af2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015af6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015afa:	bfac      	ite	ge
 8015afc:	eb07 0903 	addge.w	r9, r7, r3
 8015b00:	eba3 0807 	sublt.w	r8, r3, r7
 8015b04:	9b06      	ldr	r3, [sp, #24]
 8015b06:	1aff      	subs	r7, r7, r3
 8015b08:	4417      	add	r7, r2
 8015b0a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015b0e:	4a6b      	ldr	r2, [pc, #428]	@ (8015cbc <_strtod_l+0x854>)
 8015b10:	3f01      	subs	r7, #1
 8015b12:	4297      	cmp	r7, r2
 8015b14:	da51      	bge.n	8015bba <_strtod_l+0x752>
 8015b16:	1bd1      	subs	r1, r2, r7
 8015b18:	291f      	cmp	r1, #31
 8015b1a:	eba3 0301 	sub.w	r3, r3, r1
 8015b1e:	f04f 0201 	mov.w	r2, #1
 8015b22:	dc3e      	bgt.n	8015ba2 <_strtod_l+0x73a>
 8015b24:	408a      	lsls	r2, r1
 8015b26:	920c      	str	r2, [sp, #48]	@ 0x30
 8015b28:	2200      	movs	r2, #0
 8015b2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015b2c:	eb09 0703 	add.w	r7, r9, r3
 8015b30:	4498      	add	r8, r3
 8015b32:	9b06      	ldr	r3, [sp, #24]
 8015b34:	45b9      	cmp	r9, r7
 8015b36:	4498      	add	r8, r3
 8015b38:	464b      	mov	r3, r9
 8015b3a:	bfa8      	it	ge
 8015b3c:	463b      	movge	r3, r7
 8015b3e:	4543      	cmp	r3, r8
 8015b40:	bfa8      	it	ge
 8015b42:	4643      	movge	r3, r8
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	bfc2      	ittt	gt
 8015b48:	1aff      	subgt	r7, r7, r3
 8015b4a:	eba8 0803 	subgt.w	r8, r8, r3
 8015b4e:	eba9 0903 	subgt.w	r9, r9, r3
 8015b52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	dd16      	ble.n	8015b86 <_strtod_l+0x71e>
 8015b58:	4629      	mov	r1, r5
 8015b5a:	9805      	ldr	r0, [sp, #20]
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	f7ff f9b7 	bl	8014ed0 <__pow5mult>
 8015b62:	4605      	mov	r5, r0
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d0b5      	beq.n	8015ad4 <_strtod_l+0x66c>
 8015b68:	4601      	mov	r1, r0
 8015b6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015b6c:	9805      	ldr	r0, [sp, #20]
 8015b6e:	f7ff f905 	bl	8014d7c <__multiply>
 8015b72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015b74:	2800      	cmp	r0, #0
 8015b76:	f43f ae87 	beq.w	8015888 <_strtod_l+0x420>
 8015b7a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015b7c:	9805      	ldr	r0, [sp, #20]
 8015b7e:	f7fe ffe9 	bl	8014b54 <_Bfree>
 8015b82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b84:	9312      	str	r3, [sp, #72]	@ 0x48
 8015b86:	2f00      	cmp	r7, #0
 8015b88:	dc1b      	bgt.n	8015bc2 <_strtod_l+0x75a>
 8015b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	dd21      	ble.n	8015bd4 <_strtod_l+0x76c>
 8015b90:	4631      	mov	r1, r6
 8015b92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015b94:	9805      	ldr	r0, [sp, #20]
 8015b96:	f7ff f99b 	bl	8014ed0 <__pow5mult>
 8015b9a:	4606      	mov	r6, r0
 8015b9c:	b9d0      	cbnz	r0, 8015bd4 <_strtod_l+0x76c>
 8015b9e:	2600      	movs	r6, #0
 8015ba0:	e672      	b.n	8015888 <_strtod_l+0x420>
 8015ba2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8015ba6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8015baa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8015bae:	37e2      	adds	r7, #226	@ 0xe2
 8015bb0:	fa02 f107 	lsl.w	r1, r2, r7
 8015bb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015bb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8015bb8:	e7b8      	b.n	8015b2c <_strtod_l+0x6c4>
 8015bba:	2200      	movs	r2, #0
 8015bbc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	e7f9      	b.n	8015bb6 <_strtod_l+0x74e>
 8015bc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015bc4:	9805      	ldr	r0, [sp, #20]
 8015bc6:	463a      	mov	r2, r7
 8015bc8:	f7ff f9dc 	bl	8014f84 <__lshift>
 8015bcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d1db      	bne.n	8015b8a <_strtod_l+0x722>
 8015bd2:	e659      	b.n	8015888 <_strtod_l+0x420>
 8015bd4:	f1b8 0f00 	cmp.w	r8, #0
 8015bd8:	dd07      	ble.n	8015bea <_strtod_l+0x782>
 8015bda:	4631      	mov	r1, r6
 8015bdc:	9805      	ldr	r0, [sp, #20]
 8015bde:	4642      	mov	r2, r8
 8015be0:	f7ff f9d0 	bl	8014f84 <__lshift>
 8015be4:	4606      	mov	r6, r0
 8015be6:	2800      	cmp	r0, #0
 8015be8:	d0d9      	beq.n	8015b9e <_strtod_l+0x736>
 8015bea:	f1b9 0f00 	cmp.w	r9, #0
 8015bee:	dd08      	ble.n	8015c02 <_strtod_l+0x79a>
 8015bf0:	4629      	mov	r1, r5
 8015bf2:	9805      	ldr	r0, [sp, #20]
 8015bf4:	464a      	mov	r2, r9
 8015bf6:	f7ff f9c5 	bl	8014f84 <__lshift>
 8015bfa:	4605      	mov	r5, r0
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	f43f ae43 	beq.w	8015888 <_strtod_l+0x420>
 8015c02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015c04:	9805      	ldr	r0, [sp, #20]
 8015c06:	4632      	mov	r2, r6
 8015c08:	f7ff fa44 	bl	8015094 <__mdiff>
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	2800      	cmp	r0, #0
 8015c10:	f43f ae3a 	beq.w	8015888 <_strtod_l+0x420>
 8015c14:	2300      	movs	r3, #0
 8015c16:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015c1a:	60c3      	str	r3, [r0, #12]
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	f7ff fa1d 	bl	801505c <__mcmp>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	da4e      	bge.n	8015cc4 <_strtod_l+0x85c>
 8015c26:	ea58 080a 	orrs.w	r8, r8, sl
 8015c2a:	d174      	bne.n	8015d16 <_strtod_l+0x8ae>
 8015c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d170      	bne.n	8015d16 <_strtod_l+0x8ae>
 8015c34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015c38:	0d1b      	lsrs	r3, r3, #20
 8015c3a:	051b      	lsls	r3, r3, #20
 8015c3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015c40:	d969      	bls.n	8015d16 <_strtod_l+0x8ae>
 8015c42:	6963      	ldr	r3, [r4, #20]
 8015c44:	b913      	cbnz	r3, 8015c4c <_strtod_l+0x7e4>
 8015c46:	6923      	ldr	r3, [r4, #16]
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	dd64      	ble.n	8015d16 <_strtod_l+0x8ae>
 8015c4c:	4621      	mov	r1, r4
 8015c4e:	2201      	movs	r2, #1
 8015c50:	9805      	ldr	r0, [sp, #20]
 8015c52:	f7ff f997 	bl	8014f84 <__lshift>
 8015c56:	4629      	mov	r1, r5
 8015c58:	4604      	mov	r4, r0
 8015c5a:	f7ff f9ff 	bl	801505c <__mcmp>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	dd59      	ble.n	8015d16 <_strtod_l+0x8ae>
 8015c62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015c66:	9a06      	ldr	r2, [sp, #24]
 8015c68:	0d1b      	lsrs	r3, r3, #20
 8015c6a:	051b      	lsls	r3, r3, #20
 8015c6c:	2a00      	cmp	r2, #0
 8015c6e:	d070      	beq.n	8015d52 <_strtod_l+0x8ea>
 8015c70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015c74:	d86d      	bhi.n	8015d52 <_strtod_l+0x8ea>
 8015c76:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015c7a:	f67f ae99 	bls.w	80159b0 <_strtod_l+0x548>
 8015c7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8015cb0 <_strtod_l+0x848>
 8015c82:	ec4b ab16 	vmov	d6, sl, fp
 8015c86:	4b0e      	ldr	r3, [pc, #56]	@ (8015cc0 <_strtod_l+0x858>)
 8015c88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015c8c:	ee17 2a90 	vmov	r2, s15
 8015c90:	4013      	ands	r3, r2
 8015c92:	ec5b ab17 	vmov	sl, fp, d7
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	f47f ae01 	bne.w	801589e <_strtod_l+0x436>
 8015c9c:	9a05      	ldr	r2, [sp, #20]
 8015c9e:	2322      	movs	r3, #34	@ 0x22
 8015ca0:	6013      	str	r3, [r2, #0]
 8015ca2:	e5fc      	b.n	801589e <_strtod_l+0x436>
 8015ca4:	f3af 8000 	nop.w
 8015ca8:	ffc00000 	.word	0xffc00000
 8015cac:	41dfffff 	.word	0x41dfffff
 8015cb0:	00000000 	.word	0x00000000
 8015cb4:	39500000 	.word	0x39500000
 8015cb8:	08017640 	.word	0x08017640
 8015cbc:	fffffc02 	.word	0xfffffc02
 8015cc0:	7ff00000 	.word	0x7ff00000
 8015cc4:	46d9      	mov	r9, fp
 8015cc6:	d15d      	bne.n	8015d84 <_strtod_l+0x91c>
 8015cc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ccc:	f1b8 0f00 	cmp.w	r8, #0
 8015cd0:	d02a      	beq.n	8015d28 <_strtod_l+0x8c0>
 8015cd2:	4aab      	ldr	r2, [pc, #684]	@ (8015f80 <_strtod_l+0xb18>)
 8015cd4:	4293      	cmp	r3, r2
 8015cd6:	d12a      	bne.n	8015d2e <_strtod_l+0x8c6>
 8015cd8:	9b06      	ldr	r3, [sp, #24]
 8015cda:	4652      	mov	r2, sl
 8015cdc:	b1fb      	cbz	r3, 8015d1e <_strtod_l+0x8b6>
 8015cde:	4ba9      	ldr	r3, [pc, #676]	@ (8015f84 <_strtod_l+0xb1c>)
 8015ce0:	ea0b 0303 	and.w	r3, fp, r3
 8015ce4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8015cec:	d81a      	bhi.n	8015d24 <_strtod_l+0x8bc>
 8015cee:	0d1b      	lsrs	r3, r3, #20
 8015cf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d118      	bne.n	8015d2e <_strtod_l+0x8c6>
 8015cfc:	4ba2      	ldr	r3, [pc, #648]	@ (8015f88 <_strtod_l+0xb20>)
 8015cfe:	4599      	cmp	r9, r3
 8015d00:	d102      	bne.n	8015d08 <_strtod_l+0x8a0>
 8015d02:	3201      	adds	r2, #1
 8015d04:	f43f adc0 	beq.w	8015888 <_strtod_l+0x420>
 8015d08:	4b9e      	ldr	r3, [pc, #632]	@ (8015f84 <_strtod_l+0xb1c>)
 8015d0a:	ea09 0303 	and.w	r3, r9, r3
 8015d0e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8015d12:	f04f 0a00 	mov.w	sl, #0
 8015d16:	9b06      	ldr	r3, [sp, #24]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d1b0      	bne.n	8015c7e <_strtod_l+0x816>
 8015d1c:	e5bf      	b.n	801589e <_strtod_l+0x436>
 8015d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d22:	e7e9      	b.n	8015cf8 <_strtod_l+0x890>
 8015d24:	460b      	mov	r3, r1
 8015d26:	e7e7      	b.n	8015cf8 <_strtod_l+0x890>
 8015d28:	ea53 030a 	orrs.w	r3, r3, sl
 8015d2c:	d099      	beq.n	8015c62 <_strtod_l+0x7fa>
 8015d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015d30:	b1c3      	cbz	r3, 8015d64 <_strtod_l+0x8fc>
 8015d32:	ea13 0f09 	tst.w	r3, r9
 8015d36:	d0ee      	beq.n	8015d16 <_strtod_l+0x8ae>
 8015d38:	9a06      	ldr	r2, [sp, #24]
 8015d3a:	4650      	mov	r0, sl
 8015d3c:	4659      	mov	r1, fp
 8015d3e:	f1b8 0f00 	cmp.w	r8, #0
 8015d42:	d013      	beq.n	8015d6c <_strtod_l+0x904>
 8015d44:	f7ff fb75 	bl	8015432 <sulp>
 8015d48:	ee39 7b00 	vadd.f64	d7, d9, d0
 8015d4c:	ec5b ab17 	vmov	sl, fp, d7
 8015d50:	e7e1      	b.n	8015d16 <_strtod_l+0x8ae>
 8015d52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015d56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015d5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015d5e:	f04f 3aff 	mov.w	sl, #4294967295
 8015d62:	e7d8      	b.n	8015d16 <_strtod_l+0x8ae>
 8015d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d66:	ea13 0f0a 	tst.w	r3, sl
 8015d6a:	e7e4      	b.n	8015d36 <_strtod_l+0x8ce>
 8015d6c:	f7ff fb61 	bl	8015432 <sulp>
 8015d70:	ee39 0b40 	vsub.f64	d0, d9, d0
 8015d74:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d7c:	ec5b ab10 	vmov	sl, fp, d0
 8015d80:	d1c9      	bne.n	8015d16 <_strtod_l+0x8ae>
 8015d82:	e615      	b.n	80159b0 <_strtod_l+0x548>
 8015d84:	4629      	mov	r1, r5
 8015d86:	4620      	mov	r0, r4
 8015d88:	f7ff fae0 	bl	801534c <__ratio>
 8015d8c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8015d90:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d98:	d85d      	bhi.n	8015e56 <_strtod_l+0x9ee>
 8015d9a:	f1b8 0f00 	cmp.w	r8, #0
 8015d9e:	d164      	bne.n	8015e6a <_strtod_l+0xa02>
 8015da0:	f1ba 0f00 	cmp.w	sl, #0
 8015da4:	d14b      	bne.n	8015e3e <_strtod_l+0x9d6>
 8015da6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015daa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d160      	bne.n	8015e74 <_strtod_l+0xa0c>
 8015db2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8015db6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8015dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dbe:	d401      	bmi.n	8015dc4 <_strtod_l+0x95c>
 8015dc0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8015dc4:	eeb1 ab48 	vneg.f64	d10, d8
 8015dc8:	486e      	ldr	r0, [pc, #440]	@ (8015f84 <_strtod_l+0xb1c>)
 8015dca:	4970      	ldr	r1, [pc, #448]	@ (8015f8c <_strtod_l+0xb24>)
 8015dcc:	ea09 0700 	and.w	r7, r9, r0
 8015dd0:	428f      	cmp	r7, r1
 8015dd2:	ec53 2b1a 	vmov	r2, r3, d10
 8015dd6:	d17d      	bne.n	8015ed4 <_strtod_l+0xa6c>
 8015dd8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8015ddc:	ec4b ab1c 	vmov	d12, sl, fp
 8015de0:	eeb0 0b4c 	vmov.f64	d0, d12
 8015de4:	f7ff f9ea 	bl	80151bc <__ulp>
 8015de8:	4866      	ldr	r0, [pc, #408]	@ (8015f84 <_strtod_l+0xb1c>)
 8015dea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8015dee:	ee1c 3a90 	vmov	r3, s25
 8015df2:	4a67      	ldr	r2, [pc, #412]	@ (8015f90 <_strtod_l+0xb28>)
 8015df4:	ea03 0100 	and.w	r1, r3, r0
 8015df8:	4291      	cmp	r1, r2
 8015dfa:	ec5b ab1c 	vmov	sl, fp, d12
 8015dfe:	d93c      	bls.n	8015e7a <_strtod_l+0xa12>
 8015e00:	ee19 2a90 	vmov	r2, s19
 8015e04:	4b60      	ldr	r3, [pc, #384]	@ (8015f88 <_strtod_l+0xb20>)
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d104      	bne.n	8015e14 <_strtod_l+0x9ac>
 8015e0a:	ee19 3a10 	vmov	r3, s18
 8015e0e:	3301      	adds	r3, #1
 8015e10:	f43f ad3a 	beq.w	8015888 <_strtod_l+0x420>
 8015e14:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8015f88 <_strtod_l+0xb20>
 8015e18:	f04f 3aff 	mov.w	sl, #4294967295
 8015e1c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015e1e:	9805      	ldr	r0, [sp, #20]
 8015e20:	f7fe fe98 	bl	8014b54 <_Bfree>
 8015e24:	9805      	ldr	r0, [sp, #20]
 8015e26:	4631      	mov	r1, r6
 8015e28:	f7fe fe94 	bl	8014b54 <_Bfree>
 8015e2c:	9805      	ldr	r0, [sp, #20]
 8015e2e:	4629      	mov	r1, r5
 8015e30:	f7fe fe90 	bl	8014b54 <_Bfree>
 8015e34:	9805      	ldr	r0, [sp, #20]
 8015e36:	4621      	mov	r1, r4
 8015e38:	f7fe fe8c 	bl	8014b54 <_Bfree>
 8015e3c:	e625      	b.n	8015a8a <_strtod_l+0x622>
 8015e3e:	f1ba 0f01 	cmp.w	sl, #1
 8015e42:	d103      	bne.n	8015e4c <_strtod_l+0x9e4>
 8015e44:	f1bb 0f00 	cmp.w	fp, #0
 8015e48:	f43f adb2 	beq.w	80159b0 <_strtod_l+0x548>
 8015e4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015e50:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015e54:	e7b8      	b.n	8015dc8 <_strtod_l+0x960>
 8015e56:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8015e5a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8015e5e:	f1b8 0f00 	cmp.w	r8, #0
 8015e62:	d0af      	beq.n	8015dc4 <_strtod_l+0x95c>
 8015e64:	eeb0 ab48 	vmov.f64	d10, d8
 8015e68:	e7ae      	b.n	8015dc8 <_strtod_l+0x960>
 8015e6a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8015e6e:	eeb0 8b4a 	vmov.f64	d8, d10
 8015e72:	e7a9      	b.n	8015dc8 <_strtod_l+0x960>
 8015e74:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015e78:	e7a6      	b.n	8015dc8 <_strtod_l+0x960>
 8015e7a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015e7e:	9b06      	ldr	r3, [sp, #24]
 8015e80:	46d9      	mov	r9, fp
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1ca      	bne.n	8015e1c <_strtod_l+0x9b4>
 8015e86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015e8a:	0d1b      	lsrs	r3, r3, #20
 8015e8c:	051b      	lsls	r3, r3, #20
 8015e8e:	429f      	cmp	r7, r3
 8015e90:	d1c4      	bne.n	8015e1c <_strtod_l+0x9b4>
 8015e92:	ec51 0b18 	vmov	r0, r1, d8
 8015e96:	f7ea fc67 	bl	8000768 <__aeabi_d2lz>
 8015e9a:	f7ea fc1f 	bl	80006dc <__aeabi_l2d>
 8015e9e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8015ea2:	ec41 0b17 	vmov	d7, r0, r1
 8015ea6:	ea49 090a 	orr.w	r9, r9, sl
 8015eaa:	ea59 0908 	orrs.w	r9, r9, r8
 8015eae:	ee38 8b47 	vsub.f64	d8, d8, d7
 8015eb2:	d03c      	beq.n	8015f2e <_strtod_l+0xac6>
 8015eb4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015f68 <_strtod_l+0xb00>
 8015eb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec0:	f53f aced 	bmi.w	801589e <_strtod_l+0x436>
 8015ec4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015f70 <_strtod_l+0xb08>
 8015ec8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed0:	dda4      	ble.n	8015e1c <_strtod_l+0x9b4>
 8015ed2:	e4e4      	b.n	801589e <_strtod_l+0x436>
 8015ed4:	9906      	ldr	r1, [sp, #24]
 8015ed6:	b1e1      	cbz	r1, 8015f12 <_strtod_l+0xaaa>
 8015ed8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8015edc:	d819      	bhi.n	8015f12 <_strtod_l+0xaaa>
 8015ede:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8015ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee6:	d811      	bhi.n	8015f0c <_strtod_l+0xaa4>
 8015ee8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8015eec:	ee18 3a10 	vmov	r3, s16
 8015ef0:	2b01      	cmp	r3, #1
 8015ef2:	bf38      	it	cc
 8015ef4:	2301      	movcc	r3, #1
 8015ef6:	ee08 3a10 	vmov	s16, r3
 8015efa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8015efe:	f1b8 0f00 	cmp.w	r8, #0
 8015f02:	d111      	bne.n	8015f28 <_strtod_l+0xac0>
 8015f04:	eeb1 7b48 	vneg.f64	d7, d8
 8015f08:	ec53 2b17 	vmov	r2, r3, d7
 8015f0c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8015f10:	1bcb      	subs	r3, r1, r7
 8015f12:	eeb0 0b49 	vmov.f64	d0, d9
 8015f16:	ec43 2b1a 	vmov	d10, r2, r3
 8015f1a:	f7ff f94f 	bl	80151bc <__ulp>
 8015f1e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8015f22:	ec5b ab19 	vmov	sl, fp, d9
 8015f26:	e7aa      	b.n	8015e7e <_strtod_l+0xa16>
 8015f28:	eeb0 7b48 	vmov.f64	d7, d8
 8015f2c:	e7ec      	b.n	8015f08 <_strtod_l+0xaa0>
 8015f2e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015f78 <_strtod_l+0xb10>
 8015f32:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f3a:	f57f af6f 	bpl.w	8015e1c <_strtod_l+0x9b4>
 8015f3e:	e4ae      	b.n	801589e <_strtod_l+0x436>
 8015f40:	2300      	movs	r3, #0
 8015f42:	9308      	str	r3, [sp, #32]
 8015f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f48:	6013      	str	r3, [r2, #0]
 8015f4a:	f7ff bacc 	b.w	80154e6 <_strtod_l+0x7e>
 8015f4e:	2a65      	cmp	r2, #101	@ 0x65
 8015f50:	f43f abbc 	beq.w	80156cc <_strtod_l+0x264>
 8015f54:	2a45      	cmp	r2, #69	@ 0x45
 8015f56:	f43f abb9 	beq.w	80156cc <_strtod_l+0x264>
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	9306      	str	r3, [sp, #24]
 8015f5e:	f7ff bbf0 	b.w	8015742 <_strtod_l+0x2da>
 8015f62:	bf00      	nop
 8015f64:	f3af 8000 	nop.w
 8015f68:	94a03595 	.word	0x94a03595
 8015f6c:	3fdfffff 	.word	0x3fdfffff
 8015f70:	35afe535 	.word	0x35afe535
 8015f74:	3fe00000 	.word	0x3fe00000
 8015f78:	94a03595 	.word	0x94a03595
 8015f7c:	3fcfffff 	.word	0x3fcfffff
 8015f80:	000fffff 	.word	0x000fffff
 8015f84:	7ff00000 	.word	0x7ff00000
 8015f88:	7fefffff 	.word	0x7fefffff
 8015f8c:	7fe00000 	.word	0x7fe00000
 8015f90:	7c9fffff 	.word	0x7c9fffff

08015f94 <_strtod_r>:
 8015f94:	4b01      	ldr	r3, [pc, #4]	@ (8015f9c <_strtod_r+0x8>)
 8015f96:	f7ff ba67 	b.w	8015468 <_strtod_l>
 8015f9a:	bf00      	nop
 8015f9c:	240001e4 	.word	0x240001e4

08015fa0 <_strtol_l.constprop.0>:
 8015fa0:	2b24      	cmp	r3, #36	@ 0x24
 8015fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fa6:	4686      	mov	lr, r0
 8015fa8:	4690      	mov	r8, r2
 8015faa:	d801      	bhi.n	8015fb0 <_strtol_l.constprop.0+0x10>
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d106      	bne.n	8015fbe <_strtol_l.constprop.0+0x1e>
 8015fb0:	f7fd fe6e 	bl	8013c90 <__errno>
 8015fb4:	2316      	movs	r3, #22
 8015fb6:	6003      	str	r3, [r0, #0]
 8015fb8:	2000      	movs	r0, #0
 8015fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fbe:	4834      	ldr	r0, [pc, #208]	@ (8016090 <_strtol_l.constprop.0+0xf0>)
 8015fc0:	460d      	mov	r5, r1
 8015fc2:	462a      	mov	r2, r5
 8015fc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fc8:	5d06      	ldrb	r6, [r0, r4]
 8015fca:	f016 0608 	ands.w	r6, r6, #8
 8015fce:	d1f8      	bne.n	8015fc2 <_strtol_l.constprop.0+0x22>
 8015fd0:	2c2d      	cmp	r4, #45	@ 0x2d
 8015fd2:	d12d      	bne.n	8016030 <_strtol_l.constprop.0+0x90>
 8015fd4:	782c      	ldrb	r4, [r5, #0]
 8015fd6:	2601      	movs	r6, #1
 8015fd8:	1c95      	adds	r5, r2, #2
 8015fda:	f033 0210 	bics.w	r2, r3, #16
 8015fde:	d109      	bne.n	8015ff4 <_strtol_l.constprop.0+0x54>
 8015fe0:	2c30      	cmp	r4, #48	@ 0x30
 8015fe2:	d12a      	bne.n	801603a <_strtol_l.constprop.0+0x9a>
 8015fe4:	782a      	ldrb	r2, [r5, #0]
 8015fe6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015fea:	2a58      	cmp	r2, #88	@ 0x58
 8015fec:	d125      	bne.n	801603a <_strtol_l.constprop.0+0x9a>
 8015fee:	786c      	ldrb	r4, [r5, #1]
 8015ff0:	2310      	movs	r3, #16
 8015ff2:	3502      	adds	r5, #2
 8015ff4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015ff8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	fbbc f9f3 	udiv	r9, ip, r3
 8016002:	4610      	mov	r0, r2
 8016004:	fb03 ca19 	mls	sl, r3, r9, ip
 8016008:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801600c:	2f09      	cmp	r7, #9
 801600e:	d81b      	bhi.n	8016048 <_strtol_l.constprop.0+0xa8>
 8016010:	463c      	mov	r4, r7
 8016012:	42a3      	cmp	r3, r4
 8016014:	dd27      	ble.n	8016066 <_strtol_l.constprop.0+0xc6>
 8016016:	1c57      	adds	r7, r2, #1
 8016018:	d007      	beq.n	801602a <_strtol_l.constprop.0+0x8a>
 801601a:	4581      	cmp	r9, r0
 801601c:	d320      	bcc.n	8016060 <_strtol_l.constprop.0+0xc0>
 801601e:	d101      	bne.n	8016024 <_strtol_l.constprop.0+0x84>
 8016020:	45a2      	cmp	sl, r4
 8016022:	db1d      	blt.n	8016060 <_strtol_l.constprop.0+0xc0>
 8016024:	fb00 4003 	mla	r0, r0, r3, r4
 8016028:	2201      	movs	r2, #1
 801602a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801602e:	e7eb      	b.n	8016008 <_strtol_l.constprop.0+0x68>
 8016030:	2c2b      	cmp	r4, #43	@ 0x2b
 8016032:	bf04      	itt	eq
 8016034:	782c      	ldrbeq	r4, [r5, #0]
 8016036:	1c95      	addeq	r5, r2, #2
 8016038:	e7cf      	b.n	8015fda <_strtol_l.constprop.0+0x3a>
 801603a:	2b00      	cmp	r3, #0
 801603c:	d1da      	bne.n	8015ff4 <_strtol_l.constprop.0+0x54>
 801603e:	2c30      	cmp	r4, #48	@ 0x30
 8016040:	bf0c      	ite	eq
 8016042:	2308      	moveq	r3, #8
 8016044:	230a      	movne	r3, #10
 8016046:	e7d5      	b.n	8015ff4 <_strtol_l.constprop.0+0x54>
 8016048:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801604c:	2f19      	cmp	r7, #25
 801604e:	d801      	bhi.n	8016054 <_strtol_l.constprop.0+0xb4>
 8016050:	3c37      	subs	r4, #55	@ 0x37
 8016052:	e7de      	b.n	8016012 <_strtol_l.constprop.0+0x72>
 8016054:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016058:	2f19      	cmp	r7, #25
 801605a:	d804      	bhi.n	8016066 <_strtol_l.constprop.0+0xc6>
 801605c:	3c57      	subs	r4, #87	@ 0x57
 801605e:	e7d8      	b.n	8016012 <_strtol_l.constprop.0+0x72>
 8016060:	f04f 32ff 	mov.w	r2, #4294967295
 8016064:	e7e1      	b.n	801602a <_strtol_l.constprop.0+0x8a>
 8016066:	1c53      	adds	r3, r2, #1
 8016068:	d108      	bne.n	801607c <_strtol_l.constprop.0+0xdc>
 801606a:	2322      	movs	r3, #34	@ 0x22
 801606c:	f8ce 3000 	str.w	r3, [lr]
 8016070:	4660      	mov	r0, ip
 8016072:	f1b8 0f00 	cmp.w	r8, #0
 8016076:	d0a0      	beq.n	8015fba <_strtol_l.constprop.0+0x1a>
 8016078:	1e69      	subs	r1, r5, #1
 801607a:	e006      	b.n	801608a <_strtol_l.constprop.0+0xea>
 801607c:	b106      	cbz	r6, 8016080 <_strtol_l.constprop.0+0xe0>
 801607e:	4240      	negs	r0, r0
 8016080:	f1b8 0f00 	cmp.w	r8, #0
 8016084:	d099      	beq.n	8015fba <_strtol_l.constprop.0+0x1a>
 8016086:	2a00      	cmp	r2, #0
 8016088:	d1f6      	bne.n	8016078 <_strtol_l.constprop.0+0xd8>
 801608a:	f8c8 1000 	str.w	r1, [r8]
 801608e:	e794      	b.n	8015fba <_strtol_l.constprop.0+0x1a>
 8016090:	08017669 	.word	0x08017669

08016094 <_strtol_r>:
 8016094:	f7ff bf84 	b.w	8015fa0 <_strtol_l.constprop.0>

08016098 <__ssputs_r>:
 8016098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801609c:	688e      	ldr	r6, [r1, #8]
 801609e:	461f      	mov	r7, r3
 80160a0:	42be      	cmp	r6, r7
 80160a2:	680b      	ldr	r3, [r1, #0]
 80160a4:	4682      	mov	sl, r0
 80160a6:	460c      	mov	r4, r1
 80160a8:	4690      	mov	r8, r2
 80160aa:	d82d      	bhi.n	8016108 <__ssputs_r+0x70>
 80160ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80160b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80160b4:	d026      	beq.n	8016104 <__ssputs_r+0x6c>
 80160b6:	6965      	ldr	r5, [r4, #20]
 80160b8:	6909      	ldr	r1, [r1, #16]
 80160ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80160be:	eba3 0901 	sub.w	r9, r3, r1
 80160c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80160c6:	1c7b      	adds	r3, r7, #1
 80160c8:	444b      	add	r3, r9
 80160ca:	106d      	asrs	r5, r5, #1
 80160cc:	429d      	cmp	r5, r3
 80160ce:	bf38      	it	cc
 80160d0:	461d      	movcc	r5, r3
 80160d2:	0553      	lsls	r3, r2, #21
 80160d4:	d527      	bpl.n	8016126 <__ssputs_r+0x8e>
 80160d6:	4629      	mov	r1, r5
 80160d8:	f7fe fc70 	bl	80149bc <_malloc_r>
 80160dc:	4606      	mov	r6, r0
 80160de:	b360      	cbz	r0, 801613a <__ssputs_r+0xa2>
 80160e0:	6921      	ldr	r1, [r4, #16]
 80160e2:	464a      	mov	r2, r9
 80160e4:	f7fd fe01 	bl	8013cea <memcpy>
 80160e8:	89a3      	ldrh	r3, [r4, #12]
 80160ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80160ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80160f2:	81a3      	strh	r3, [r4, #12]
 80160f4:	6126      	str	r6, [r4, #16]
 80160f6:	6165      	str	r5, [r4, #20]
 80160f8:	444e      	add	r6, r9
 80160fa:	eba5 0509 	sub.w	r5, r5, r9
 80160fe:	6026      	str	r6, [r4, #0]
 8016100:	60a5      	str	r5, [r4, #8]
 8016102:	463e      	mov	r6, r7
 8016104:	42be      	cmp	r6, r7
 8016106:	d900      	bls.n	801610a <__ssputs_r+0x72>
 8016108:	463e      	mov	r6, r7
 801610a:	6820      	ldr	r0, [r4, #0]
 801610c:	4632      	mov	r2, r6
 801610e:	4641      	mov	r1, r8
 8016110:	f000 fb6a 	bl	80167e8 <memmove>
 8016114:	68a3      	ldr	r3, [r4, #8]
 8016116:	1b9b      	subs	r3, r3, r6
 8016118:	60a3      	str	r3, [r4, #8]
 801611a:	6823      	ldr	r3, [r4, #0]
 801611c:	4433      	add	r3, r6
 801611e:	6023      	str	r3, [r4, #0]
 8016120:	2000      	movs	r0, #0
 8016122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016126:	462a      	mov	r2, r5
 8016128:	f000 ff43 	bl	8016fb2 <_realloc_r>
 801612c:	4606      	mov	r6, r0
 801612e:	2800      	cmp	r0, #0
 8016130:	d1e0      	bne.n	80160f4 <__ssputs_r+0x5c>
 8016132:	6921      	ldr	r1, [r4, #16]
 8016134:	4650      	mov	r0, sl
 8016136:	f7fe fbcd 	bl	80148d4 <_free_r>
 801613a:	230c      	movs	r3, #12
 801613c:	f8ca 3000 	str.w	r3, [sl]
 8016140:	89a3      	ldrh	r3, [r4, #12]
 8016142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016146:	81a3      	strh	r3, [r4, #12]
 8016148:	f04f 30ff 	mov.w	r0, #4294967295
 801614c:	e7e9      	b.n	8016122 <__ssputs_r+0x8a>
	...

08016150 <_svfiprintf_r>:
 8016150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016154:	4698      	mov	r8, r3
 8016156:	898b      	ldrh	r3, [r1, #12]
 8016158:	061b      	lsls	r3, r3, #24
 801615a:	b09d      	sub	sp, #116	@ 0x74
 801615c:	4607      	mov	r7, r0
 801615e:	460d      	mov	r5, r1
 8016160:	4614      	mov	r4, r2
 8016162:	d510      	bpl.n	8016186 <_svfiprintf_r+0x36>
 8016164:	690b      	ldr	r3, [r1, #16]
 8016166:	b973      	cbnz	r3, 8016186 <_svfiprintf_r+0x36>
 8016168:	2140      	movs	r1, #64	@ 0x40
 801616a:	f7fe fc27 	bl	80149bc <_malloc_r>
 801616e:	6028      	str	r0, [r5, #0]
 8016170:	6128      	str	r0, [r5, #16]
 8016172:	b930      	cbnz	r0, 8016182 <_svfiprintf_r+0x32>
 8016174:	230c      	movs	r3, #12
 8016176:	603b      	str	r3, [r7, #0]
 8016178:	f04f 30ff 	mov.w	r0, #4294967295
 801617c:	b01d      	add	sp, #116	@ 0x74
 801617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016182:	2340      	movs	r3, #64	@ 0x40
 8016184:	616b      	str	r3, [r5, #20]
 8016186:	2300      	movs	r3, #0
 8016188:	9309      	str	r3, [sp, #36]	@ 0x24
 801618a:	2320      	movs	r3, #32
 801618c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016190:	f8cd 800c 	str.w	r8, [sp, #12]
 8016194:	2330      	movs	r3, #48	@ 0x30
 8016196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016334 <_svfiprintf_r+0x1e4>
 801619a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801619e:	f04f 0901 	mov.w	r9, #1
 80161a2:	4623      	mov	r3, r4
 80161a4:	469a      	mov	sl, r3
 80161a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161aa:	b10a      	cbz	r2, 80161b0 <_svfiprintf_r+0x60>
 80161ac:	2a25      	cmp	r2, #37	@ 0x25
 80161ae:	d1f9      	bne.n	80161a4 <_svfiprintf_r+0x54>
 80161b0:	ebba 0b04 	subs.w	fp, sl, r4
 80161b4:	d00b      	beq.n	80161ce <_svfiprintf_r+0x7e>
 80161b6:	465b      	mov	r3, fp
 80161b8:	4622      	mov	r2, r4
 80161ba:	4629      	mov	r1, r5
 80161bc:	4638      	mov	r0, r7
 80161be:	f7ff ff6b 	bl	8016098 <__ssputs_r>
 80161c2:	3001      	adds	r0, #1
 80161c4:	f000 80a7 	beq.w	8016316 <_svfiprintf_r+0x1c6>
 80161c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80161ca:	445a      	add	r2, fp
 80161cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80161ce:	f89a 3000 	ldrb.w	r3, [sl]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	f000 809f 	beq.w	8016316 <_svfiprintf_r+0x1c6>
 80161d8:	2300      	movs	r3, #0
 80161da:	f04f 32ff 	mov.w	r2, #4294967295
 80161de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161e2:	f10a 0a01 	add.w	sl, sl, #1
 80161e6:	9304      	str	r3, [sp, #16]
 80161e8:	9307      	str	r3, [sp, #28]
 80161ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80161ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80161f0:	4654      	mov	r4, sl
 80161f2:	2205      	movs	r2, #5
 80161f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161f8:	484e      	ldr	r0, [pc, #312]	@ (8016334 <_svfiprintf_r+0x1e4>)
 80161fa:	f7ea f889 	bl	8000310 <memchr>
 80161fe:	9a04      	ldr	r2, [sp, #16]
 8016200:	b9d8      	cbnz	r0, 801623a <_svfiprintf_r+0xea>
 8016202:	06d0      	lsls	r0, r2, #27
 8016204:	bf44      	itt	mi
 8016206:	2320      	movmi	r3, #32
 8016208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801620c:	0711      	lsls	r1, r2, #28
 801620e:	bf44      	itt	mi
 8016210:	232b      	movmi	r3, #43	@ 0x2b
 8016212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016216:	f89a 3000 	ldrb.w	r3, [sl]
 801621a:	2b2a      	cmp	r3, #42	@ 0x2a
 801621c:	d015      	beq.n	801624a <_svfiprintf_r+0xfa>
 801621e:	9a07      	ldr	r2, [sp, #28]
 8016220:	4654      	mov	r4, sl
 8016222:	2000      	movs	r0, #0
 8016224:	f04f 0c0a 	mov.w	ip, #10
 8016228:	4621      	mov	r1, r4
 801622a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801622e:	3b30      	subs	r3, #48	@ 0x30
 8016230:	2b09      	cmp	r3, #9
 8016232:	d94b      	bls.n	80162cc <_svfiprintf_r+0x17c>
 8016234:	b1b0      	cbz	r0, 8016264 <_svfiprintf_r+0x114>
 8016236:	9207      	str	r2, [sp, #28]
 8016238:	e014      	b.n	8016264 <_svfiprintf_r+0x114>
 801623a:	eba0 0308 	sub.w	r3, r0, r8
 801623e:	fa09 f303 	lsl.w	r3, r9, r3
 8016242:	4313      	orrs	r3, r2
 8016244:	9304      	str	r3, [sp, #16]
 8016246:	46a2      	mov	sl, r4
 8016248:	e7d2      	b.n	80161f0 <_svfiprintf_r+0xa0>
 801624a:	9b03      	ldr	r3, [sp, #12]
 801624c:	1d19      	adds	r1, r3, #4
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	9103      	str	r1, [sp, #12]
 8016252:	2b00      	cmp	r3, #0
 8016254:	bfbb      	ittet	lt
 8016256:	425b      	neglt	r3, r3
 8016258:	f042 0202 	orrlt.w	r2, r2, #2
 801625c:	9307      	strge	r3, [sp, #28]
 801625e:	9307      	strlt	r3, [sp, #28]
 8016260:	bfb8      	it	lt
 8016262:	9204      	strlt	r2, [sp, #16]
 8016264:	7823      	ldrb	r3, [r4, #0]
 8016266:	2b2e      	cmp	r3, #46	@ 0x2e
 8016268:	d10a      	bne.n	8016280 <_svfiprintf_r+0x130>
 801626a:	7863      	ldrb	r3, [r4, #1]
 801626c:	2b2a      	cmp	r3, #42	@ 0x2a
 801626e:	d132      	bne.n	80162d6 <_svfiprintf_r+0x186>
 8016270:	9b03      	ldr	r3, [sp, #12]
 8016272:	1d1a      	adds	r2, r3, #4
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	9203      	str	r2, [sp, #12]
 8016278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801627c:	3402      	adds	r4, #2
 801627e:	9305      	str	r3, [sp, #20]
 8016280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016344 <_svfiprintf_r+0x1f4>
 8016284:	7821      	ldrb	r1, [r4, #0]
 8016286:	2203      	movs	r2, #3
 8016288:	4650      	mov	r0, sl
 801628a:	f7ea f841 	bl	8000310 <memchr>
 801628e:	b138      	cbz	r0, 80162a0 <_svfiprintf_r+0x150>
 8016290:	9b04      	ldr	r3, [sp, #16]
 8016292:	eba0 000a 	sub.w	r0, r0, sl
 8016296:	2240      	movs	r2, #64	@ 0x40
 8016298:	4082      	lsls	r2, r0
 801629a:	4313      	orrs	r3, r2
 801629c:	3401      	adds	r4, #1
 801629e:	9304      	str	r3, [sp, #16]
 80162a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162a4:	4824      	ldr	r0, [pc, #144]	@ (8016338 <_svfiprintf_r+0x1e8>)
 80162a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80162aa:	2206      	movs	r2, #6
 80162ac:	f7ea f830 	bl	8000310 <memchr>
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d036      	beq.n	8016322 <_svfiprintf_r+0x1d2>
 80162b4:	4b21      	ldr	r3, [pc, #132]	@ (801633c <_svfiprintf_r+0x1ec>)
 80162b6:	bb1b      	cbnz	r3, 8016300 <_svfiprintf_r+0x1b0>
 80162b8:	9b03      	ldr	r3, [sp, #12]
 80162ba:	3307      	adds	r3, #7
 80162bc:	f023 0307 	bic.w	r3, r3, #7
 80162c0:	3308      	adds	r3, #8
 80162c2:	9303      	str	r3, [sp, #12]
 80162c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162c6:	4433      	add	r3, r6
 80162c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80162ca:	e76a      	b.n	80161a2 <_svfiprintf_r+0x52>
 80162cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80162d0:	460c      	mov	r4, r1
 80162d2:	2001      	movs	r0, #1
 80162d4:	e7a8      	b.n	8016228 <_svfiprintf_r+0xd8>
 80162d6:	2300      	movs	r3, #0
 80162d8:	3401      	adds	r4, #1
 80162da:	9305      	str	r3, [sp, #20]
 80162dc:	4619      	mov	r1, r3
 80162de:	f04f 0c0a 	mov.w	ip, #10
 80162e2:	4620      	mov	r0, r4
 80162e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162e8:	3a30      	subs	r2, #48	@ 0x30
 80162ea:	2a09      	cmp	r2, #9
 80162ec:	d903      	bls.n	80162f6 <_svfiprintf_r+0x1a6>
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d0c6      	beq.n	8016280 <_svfiprintf_r+0x130>
 80162f2:	9105      	str	r1, [sp, #20]
 80162f4:	e7c4      	b.n	8016280 <_svfiprintf_r+0x130>
 80162f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80162fa:	4604      	mov	r4, r0
 80162fc:	2301      	movs	r3, #1
 80162fe:	e7f0      	b.n	80162e2 <_svfiprintf_r+0x192>
 8016300:	ab03      	add	r3, sp, #12
 8016302:	9300      	str	r3, [sp, #0]
 8016304:	462a      	mov	r2, r5
 8016306:	4b0e      	ldr	r3, [pc, #56]	@ (8016340 <_svfiprintf_r+0x1f0>)
 8016308:	a904      	add	r1, sp, #16
 801630a:	4638      	mov	r0, r7
 801630c:	f7fc fc90 	bl	8012c30 <_printf_float>
 8016310:	1c42      	adds	r2, r0, #1
 8016312:	4606      	mov	r6, r0
 8016314:	d1d6      	bne.n	80162c4 <_svfiprintf_r+0x174>
 8016316:	89ab      	ldrh	r3, [r5, #12]
 8016318:	065b      	lsls	r3, r3, #25
 801631a:	f53f af2d 	bmi.w	8016178 <_svfiprintf_r+0x28>
 801631e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016320:	e72c      	b.n	801617c <_svfiprintf_r+0x2c>
 8016322:	ab03      	add	r3, sp, #12
 8016324:	9300      	str	r3, [sp, #0]
 8016326:	462a      	mov	r2, r5
 8016328:	4b05      	ldr	r3, [pc, #20]	@ (8016340 <_svfiprintf_r+0x1f0>)
 801632a:	a904      	add	r1, sp, #16
 801632c:	4638      	mov	r0, r7
 801632e:	f7fc ff07 	bl	8013140 <_printf_i>
 8016332:	e7ed      	b.n	8016310 <_svfiprintf_r+0x1c0>
 8016334:	08017769 	.word	0x08017769
 8016338:	08017773 	.word	0x08017773
 801633c:	08012c31 	.word	0x08012c31
 8016340:	08016099 	.word	0x08016099
 8016344:	0801776f 	.word	0x0801776f

08016348 <__sfputc_r>:
 8016348:	6893      	ldr	r3, [r2, #8]
 801634a:	3b01      	subs	r3, #1
 801634c:	2b00      	cmp	r3, #0
 801634e:	b410      	push	{r4}
 8016350:	6093      	str	r3, [r2, #8]
 8016352:	da08      	bge.n	8016366 <__sfputc_r+0x1e>
 8016354:	6994      	ldr	r4, [r2, #24]
 8016356:	42a3      	cmp	r3, r4
 8016358:	db01      	blt.n	801635e <__sfputc_r+0x16>
 801635a:	290a      	cmp	r1, #10
 801635c:	d103      	bne.n	8016366 <__sfputc_r+0x1e>
 801635e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016362:	f7fd bbae 	b.w	8013ac2 <__swbuf_r>
 8016366:	6813      	ldr	r3, [r2, #0]
 8016368:	1c58      	adds	r0, r3, #1
 801636a:	6010      	str	r0, [r2, #0]
 801636c:	7019      	strb	r1, [r3, #0]
 801636e:	4608      	mov	r0, r1
 8016370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016374:	4770      	bx	lr

08016376 <__sfputs_r>:
 8016376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016378:	4606      	mov	r6, r0
 801637a:	460f      	mov	r7, r1
 801637c:	4614      	mov	r4, r2
 801637e:	18d5      	adds	r5, r2, r3
 8016380:	42ac      	cmp	r4, r5
 8016382:	d101      	bne.n	8016388 <__sfputs_r+0x12>
 8016384:	2000      	movs	r0, #0
 8016386:	e007      	b.n	8016398 <__sfputs_r+0x22>
 8016388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801638c:	463a      	mov	r2, r7
 801638e:	4630      	mov	r0, r6
 8016390:	f7ff ffda 	bl	8016348 <__sfputc_r>
 8016394:	1c43      	adds	r3, r0, #1
 8016396:	d1f3      	bne.n	8016380 <__sfputs_r+0xa>
 8016398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801639c <_vfiprintf_r>:
 801639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a0:	460d      	mov	r5, r1
 80163a2:	b09d      	sub	sp, #116	@ 0x74
 80163a4:	4614      	mov	r4, r2
 80163a6:	4698      	mov	r8, r3
 80163a8:	4606      	mov	r6, r0
 80163aa:	b118      	cbz	r0, 80163b4 <_vfiprintf_r+0x18>
 80163ac:	6a03      	ldr	r3, [r0, #32]
 80163ae:	b90b      	cbnz	r3, 80163b4 <_vfiprintf_r+0x18>
 80163b0:	f7fd fa7e 	bl	80138b0 <__sinit>
 80163b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80163b6:	07d9      	lsls	r1, r3, #31
 80163b8:	d405      	bmi.n	80163c6 <_vfiprintf_r+0x2a>
 80163ba:	89ab      	ldrh	r3, [r5, #12]
 80163bc:	059a      	lsls	r2, r3, #22
 80163be:	d402      	bmi.n	80163c6 <_vfiprintf_r+0x2a>
 80163c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80163c2:	f7fd fc90 	bl	8013ce6 <__retarget_lock_acquire_recursive>
 80163c6:	89ab      	ldrh	r3, [r5, #12]
 80163c8:	071b      	lsls	r3, r3, #28
 80163ca:	d501      	bpl.n	80163d0 <_vfiprintf_r+0x34>
 80163cc:	692b      	ldr	r3, [r5, #16]
 80163ce:	b99b      	cbnz	r3, 80163f8 <_vfiprintf_r+0x5c>
 80163d0:	4629      	mov	r1, r5
 80163d2:	4630      	mov	r0, r6
 80163d4:	f7fd fbb4 	bl	8013b40 <__swsetup_r>
 80163d8:	b170      	cbz	r0, 80163f8 <_vfiprintf_r+0x5c>
 80163da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80163dc:	07dc      	lsls	r4, r3, #31
 80163de:	d504      	bpl.n	80163ea <_vfiprintf_r+0x4e>
 80163e0:	f04f 30ff 	mov.w	r0, #4294967295
 80163e4:	b01d      	add	sp, #116	@ 0x74
 80163e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ea:	89ab      	ldrh	r3, [r5, #12]
 80163ec:	0598      	lsls	r0, r3, #22
 80163ee:	d4f7      	bmi.n	80163e0 <_vfiprintf_r+0x44>
 80163f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80163f2:	f7fd fc79 	bl	8013ce8 <__retarget_lock_release_recursive>
 80163f6:	e7f3      	b.n	80163e0 <_vfiprintf_r+0x44>
 80163f8:	2300      	movs	r3, #0
 80163fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80163fc:	2320      	movs	r3, #32
 80163fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016402:	f8cd 800c 	str.w	r8, [sp, #12]
 8016406:	2330      	movs	r3, #48	@ 0x30
 8016408:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80165b8 <_vfiprintf_r+0x21c>
 801640c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016410:	f04f 0901 	mov.w	r9, #1
 8016414:	4623      	mov	r3, r4
 8016416:	469a      	mov	sl, r3
 8016418:	f813 2b01 	ldrb.w	r2, [r3], #1
 801641c:	b10a      	cbz	r2, 8016422 <_vfiprintf_r+0x86>
 801641e:	2a25      	cmp	r2, #37	@ 0x25
 8016420:	d1f9      	bne.n	8016416 <_vfiprintf_r+0x7a>
 8016422:	ebba 0b04 	subs.w	fp, sl, r4
 8016426:	d00b      	beq.n	8016440 <_vfiprintf_r+0xa4>
 8016428:	465b      	mov	r3, fp
 801642a:	4622      	mov	r2, r4
 801642c:	4629      	mov	r1, r5
 801642e:	4630      	mov	r0, r6
 8016430:	f7ff ffa1 	bl	8016376 <__sfputs_r>
 8016434:	3001      	adds	r0, #1
 8016436:	f000 80a7 	beq.w	8016588 <_vfiprintf_r+0x1ec>
 801643a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801643c:	445a      	add	r2, fp
 801643e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016440:	f89a 3000 	ldrb.w	r3, [sl]
 8016444:	2b00      	cmp	r3, #0
 8016446:	f000 809f 	beq.w	8016588 <_vfiprintf_r+0x1ec>
 801644a:	2300      	movs	r3, #0
 801644c:	f04f 32ff 	mov.w	r2, #4294967295
 8016450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016454:	f10a 0a01 	add.w	sl, sl, #1
 8016458:	9304      	str	r3, [sp, #16]
 801645a:	9307      	str	r3, [sp, #28]
 801645c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016460:	931a      	str	r3, [sp, #104]	@ 0x68
 8016462:	4654      	mov	r4, sl
 8016464:	2205      	movs	r2, #5
 8016466:	f814 1b01 	ldrb.w	r1, [r4], #1
 801646a:	4853      	ldr	r0, [pc, #332]	@ (80165b8 <_vfiprintf_r+0x21c>)
 801646c:	f7e9 ff50 	bl	8000310 <memchr>
 8016470:	9a04      	ldr	r2, [sp, #16]
 8016472:	b9d8      	cbnz	r0, 80164ac <_vfiprintf_r+0x110>
 8016474:	06d1      	lsls	r1, r2, #27
 8016476:	bf44      	itt	mi
 8016478:	2320      	movmi	r3, #32
 801647a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801647e:	0713      	lsls	r3, r2, #28
 8016480:	bf44      	itt	mi
 8016482:	232b      	movmi	r3, #43	@ 0x2b
 8016484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016488:	f89a 3000 	ldrb.w	r3, [sl]
 801648c:	2b2a      	cmp	r3, #42	@ 0x2a
 801648e:	d015      	beq.n	80164bc <_vfiprintf_r+0x120>
 8016490:	9a07      	ldr	r2, [sp, #28]
 8016492:	4654      	mov	r4, sl
 8016494:	2000      	movs	r0, #0
 8016496:	f04f 0c0a 	mov.w	ip, #10
 801649a:	4621      	mov	r1, r4
 801649c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164a0:	3b30      	subs	r3, #48	@ 0x30
 80164a2:	2b09      	cmp	r3, #9
 80164a4:	d94b      	bls.n	801653e <_vfiprintf_r+0x1a2>
 80164a6:	b1b0      	cbz	r0, 80164d6 <_vfiprintf_r+0x13a>
 80164a8:	9207      	str	r2, [sp, #28]
 80164aa:	e014      	b.n	80164d6 <_vfiprintf_r+0x13a>
 80164ac:	eba0 0308 	sub.w	r3, r0, r8
 80164b0:	fa09 f303 	lsl.w	r3, r9, r3
 80164b4:	4313      	orrs	r3, r2
 80164b6:	9304      	str	r3, [sp, #16]
 80164b8:	46a2      	mov	sl, r4
 80164ba:	e7d2      	b.n	8016462 <_vfiprintf_r+0xc6>
 80164bc:	9b03      	ldr	r3, [sp, #12]
 80164be:	1d19      	adds	r1, r3, #4
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	9103      	str	r1, [sp, #12]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	bfbb      	ittet	lt
 80164c8:	425b      	neglt	r3, r3
 80164ca:	f042 0202 	orrlt.w	r2, r2, #2
 80164ce:	9307      	strge	r3, [sp, #28]
 80164d0:	9307      	strlt	r3, [sp, #28]
 80164d2:	bfb8      	it	lt
 80164d4:	9204      	strlt	r2, [sp, #16]
 80164d6:	7823      	ldrb	r3, [r4, #0]
 80164d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80164da:	d10a      	bne.n	80164f2 <_vfiprintf_r+0x156>
 80164dc:	7863      	ldrb	r3, [r4, #1]
 80164de:	2b2a      	cmp	r3, #42	@ 0x2a
 80164e0:	d132      	bne.n	8016548 <_vfiprintf_r+0x1ac>
 80164e2:	9b03      	ldr	r3, [sp, #12]
 80164e4:	1d1a      	adds	r2, r3, #4
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	9203      	str	r2, [sp, #12]
 80164ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80164ee:	3402      	adds	r4, #2
 80164f0:	9305      	str	r3, [sp, #20]
 80164f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80165c8 <_vfiprintf_r+0x22c>
 80164f6:	7821      	ldrb	r1, [r4, #0]
 80164f8:	2203      	movs	r2, #3
 80164fa:	4650      	mov	r0, sl
 80164fc:	f7e9 ff08 	bl	8000310 <memchr>
 8016500:	b138      	cbz	r0, 8016512 <_vfiprintf_r+0x176>
 8016502:	9b04      	ldr	r3, [sp, #16]
 8016504:	eba0 000a 	sub.w	r0, r0, sl
 8016508:	2240      	movs	r2, #64	@ 0x40
 801650a:	4082      	lsls	r2, r0
 801650c:	4313      	orrs	r3, r2
 801650e:	3401      	adds	r4, #1
 8016510:	9304      	str	r3, [sp, #16]
 8016512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016516:	4829      	ldr	r0, [pc, #164]	@ (80165bc <_vfiprintf_r+0x220>)
 8016518:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801651c:	2206      	movs	r2, #6
 801651e:	f7e9 fef7 	bl	8000310 <memchr>
 8016522:	2800      	cmp	r0, #0
 8016524:	d03f      	beq.n	80165a6 <_vfiprintf_r+0x20a>
 8016526:	4b26      	ldr	r3, [pc, #152]	@ (80165c0 <_vfiprintf_r+0x224>)
 8016528:	bb1b      	cbnz	r3, 8016572 <_vfiprintf_r+0x1d6>
 801652a:	9b03      	ldr	r3, [sp, #12]
 801652c:	3307      	adds	r3, #7
 801652e:	f023 0307 	bic.w	r3, r3, #7
 8016532:	3308      	adds	r3, #8
 8016534:	9303      	str	r3, [sp, #12]
 8016536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016538:	443b      	add	r3, r7
 801653a:	9309      	str	r3, [sp, #36]	@ 0x24
 801653c:	e76a      	b.n	8016414 <_vfiprintf_r+0x78>
 801653e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016542:	460c      	mov	r4, r1
 8016544:	2001      	movs	r0, #1
 8016546:	e7a8      	b.n	801649a <_vfiprintf_r+0xfe>
 8016548:	2300      	movs	r3, #0
 801654a:	3401      	adds	r4, #1
 801654c:	9305      	str	r3, [sp, #20]
 801654e:	4619      	mov	r1, r3
 8016550:	f04f 0c0a 	mov.w	ip, #10
 8016554:	4620      	mov	r0, r4
 8016556:	f810 2b01 	ldrb.w	r2, [r0], #1
 801655a:	3a30      	subs	r2, #48	@ 0x30
 801655c:	2a09      	cmp	r2, #9
 801655e:	d903      	bls.n	8016568 <_vfiprintf_r+0x1cc>
 8016560:	2b00      	cmp	r3, #0
 8016562:	d0c6      	beq.n	80164f2 <_vfiprintf_r+0x156>
 8016564:	9105      	str	r1, [sp, #20]
 8016566:	e7c4      	b.n	80164f2 <_vfiprintf_r+0x156>
 8016568:	fb0c 2101 	mla	r1, ip, r1, r2
 801656c:	4604      	mov	r4, r0
 801656e:	2301      	movs	r3, #1
 8016570:	e7f0      	b.n	8016554 <_vfiprintf_r+0x1b8>
 8016572:	ab03      	add	r3, sp, #12
 8016574:	9300      	str	r3, [sp, #0]
 8016576:	462a      	mov	r2, r5
 8016578:	4b12      	ldr	r3, [pc, #72]	@ (80165c4 <_vfiprintf_r+0x228>)
 801657a:	a904      	add	r1, sp, #16
 801657c:	4630      	mov	r0, r6
 801657e:	f7fc fb57 	bl	8012c30 <_printf_float>
 8016582:	4607      	mov	r7, r0
 8016584:	1c78      	adds	r0, r7, #1
 8016586:	d1d6      	bne.n	8016536 <_vfiprintf_r+0x19a>
 8016588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801658a:	07d9      	lsls	r1, r3, #31
 801658c:	d405      	bmi.n	801659a <_vfiprintf_r+0x1fe>
 801658e:	89ab      	ldrh	r3, [r5, #12]
 8016590:	059a      	lsls	r2, r3, #22
 8016592:	d402      	bmi.n	801659a <_vfiprintf_r+0x1fe>
 8016594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016596:	f7fd fba7 	bl	8013ce8 <__retarget_lock_release_recursive>
 801659a:	89ab      	ldrh	r3, [r5, #12]
 801659c:	065b      	lsls	r3, r3, #25
 801659e:	f53f af1f 	bmi.w	80163e0 <_vfiprintf_r+0x44>
 80165a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80165a4:	e71e      	b.n	80163e4 <_vfiprintf_r+0x48>
 80165a6:	ab03      	add	r3, sp, #12
 80165a8:	9300      	str	r3, [sp, #0]
 80165aa:	462a      	mov	r2, r5
 80165ac:	4b05      	ldr	r3, [pc, #20]	@ (80165c4 <_vfiprintf_r+0x228>)
 80165ae:	a904      	add	r1, sp, #16
 80165b0:	4630      	mov	r0, r6
 80165b2:	f7fc fdc5 	bl	8013140 <_printf_i>
 80165b6:	e7e4      	b.n	8016582 <_vfiprintf_r+0x1e6>
 80165b8:	08017769 	.word	0x08017769
 80165bc:	08017773 	.word	0x08017773
 80165c0:	08012c31 	.word	0x08012c31
 80165c4:	08016377 	.word	0x08016377
 80165c8:	0801776f 	.word	0x0801776f

080165cc <__sflush_r>:
 80165cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80165d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d4:	0716      	lsls	r6, r2, #28
 80165d6:	4605      	mov	r5, r0
 80165d8:	460c      	mov	r4, r1
 80165da:	d454      	bmi.n	8016686 <__sflush_r+0xba>
 80165dc:	684b      	ldr	r3, [r1, #4]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	dc02      	bgt.n	80165e8 <__sflush_r+0x1c>
 80165e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	dd48      	ble.n	801667a <__sflush_r+0xae>
 80165e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80165ea:	2e00      	cmp	r6, #0
 80165ec:	d045      	beq.n	801667a <__sflush_r+0xae>
 80165ee:	2300      	movs	r3, #0
 80165f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80165f4:	682f      	ldr	r7, [r5, #0]
 80165f6:	6a21      	ldr	r1, [r4, #32]
 80165f8:	602b      	str	r3, [r5, #0]
 80165fa:	d030      	beq.n	801665e <__sflush_r+0x92>
 80165fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80165fe:	89a3      	ldrh	r3, [r4, #12]
 8016600:	0759      	lsls	r1, r3, #29
 8016602:	d505      	bpl.n	8016610 <__sflush_r+0x44>
 8016604:	6863      	ldr	r3, [r4, #4]
 8016606:	1ad2      	subs	r2, r2, r3
 8016608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801660a:	b10b      	cbz	r3, 8016610 <__sflush_r+0x44>
 801660c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801660e:	1ad2      	subs	r2, r2, r3
 8016610:	2300      	movs	r3, #0
 8016612:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016614:	6a21      	ldr	r1, [r4, #32]
 8016616:	4628      	mov	r0, r5
 8016618:	47b0      	blx	r6
 801661a:	1c43      	adds	r3, r0, #1
 801661c:	89a3      	ldrh	r3, [r4, #12]
 801661e:	d106      	bne.n	801662e <__sflush_r+0x62>
 8016620:	6829      	ldr	r1, [r5, #0]
 8016622:	291d      	cmp	r1, #29
 8016624:	d82b      	bhi.n	801667e <__sflush_r+0xb2>
 8016626:	4a2a      	ldr	r2, [pc, #168]	@ (80166d0 <__sflush_r+0x104>)
 8016628:	410a      	asrs	r2, r1
 801662a:	07d6      	lsls	r6, r2, #31
 801662c:	d427      	bmi.n	801667e <__sflush_r+0xb2>
 801662e:	2200      	movs	r2, #0
 8016630:	6062      	str	r2, [r4, #4]
 8016632:	04d9      	lsls	r1, r3, #19
 8016634:	6922      	ldr	r2, [r4, #16]
 8016636:	6022      	str	r2, [r4, #0]
 8016638:	d504      	bpl.n	8016644 <__sflush_r+0x78>
 801663a:	1c42      	adds	r2, r0, #1
 801663c:	d101      	bne.n	8016642 <__sflush_r+0x76>
 801663e:	682b      	ldr	r3, [r5, #0]
 8016640:	b903      	cbnz	r3, 8016644 <__sflush_r+0x78>
 8016642:	6560      	str	r0, [r4, #84]	@ 0x54
 8016644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016646:	602f      	str	r7, [r5, #0]
 8016648:	b1b9      	cbz	r1, 801667a <__sflush_r+0xae>
 801664a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801664e:	4299      	cmp	r1, r3
 8016650:	d002      	beq.n	8016658 <__sflush_r+0x8c>
 8016652:	4628      	mov	r0, r5
 8016654:	f7fe f93e 	bl	80148d4 <_free_r>
 8016658:	2300      	movs	r3, #0
 801665a:	6363      	str	r3, [r4, #52]	@ 0x34
 801665c:	e00d      	b.n	801667a <__sflush_r+0xae>
 801665e:	2301      	movs	r3, #1
 8016660:	4628      	mov	r0, r5
 8016662:	47b0      	blx	r6
 8016664:	4602      	mov	r2, r0
 8016666:	1c50      	adds	r0, r2, #1
 8016668:	d1c9      	bne.n	80165fe <__sflush_r+0x32>
 801666a:	682b      	ldr	r3, [r5, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d0c6      	beq.n	80165fe <__sflush_r+0x32>
 8016670:	2b1d      	cmp	r3, #29
 8016672:	d001      	beq.n	8016678 <__sflush_r+0xac>
 8016674:	2b16      	cmp	r3, #22
 8016676:	d11e      	bne.n	80166b6 <__sflush_r+0xea>
 8016678:	602f      	str	r7, [r5, #0]
 801667a:	2000      	movs	r0, #0
 801667c:	e022      	b.n	80166c4 <__sflush_r+0xf8>
 801667e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016682:	b21b      	sxth	r3, r3
 8016684:	e01b      	b.n	80166be <__sflush_r+0xf2>
 8016686:	690f      	ldr	r7, [r1, #16]
 8016688:	2f00      	cmp	r7, #0
 801668a:	d0f6      	beq.n	801667a <__sflush_r+0xae>
 801668c:	0793      	lsls	r3, r2, #30
 801668e:	680e      	ldr	r6, [r1, #0]
 8016690:	bf08      	it	eq
 8016692:	694b      	ldreq	r3, [r1, #20]
 8016694:	600f      	str	r7, [r1, #0]
 8016696:	bf18      	it	ne
 8016698:	2300      	movne	r3, #0
 801669a:	eba6 0807 	sub.w	r8, r6, r7
 801669e:	608b      	str	r3, [r1, #8]
 80166a0:	f1b8 0f00 	cmp.w	r8, #0
 80166a4:	dde9      	ble.n	801667a <__sflush_r+0xae>
 80166a6:	6a21      	ldr	r1, [r4, #32]
 80166a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80166aa:	4643      	mov	r3, r8
 80166ac:	463a      	mov	r2, r7
 80166ae:	4628      	mov	r0, r5
 80166b0:	47b0      	blx	r6
 80166b2:	2800      	cmp	r0, #0
 80166b4:	dc08      	bgt.n	80166c8 <__sflush_r+0xfc>
 80166b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166be:	81a3      	strh	r3, [r4, #12]
 80166c0:	f04f 30ff 	mov.w	r0, #4294967295
 80166c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c8:	4407      	add	r7, r0
 80166ca:	eba8 0800 	sub.w	r8, r8, r0
 80166ce:	e7e7      	b.n	80166a0 <__sflush_r+0xd4>
 80166d0:	dfbffffe 	.word	0xdfbffffe

080166d4 <_fflush_r>:
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	690b      	ldr	r3, [r1, #16]
 80166d8:	4605      	mov	r5, r0
 80166da:	460c      	mov	r4, r1
 80166dc:	b913      	cbnz	r3, 80166e4 <_fflush_r+0x10>
 80166de:	2500      	movs	r5, #0
 80166e0:	4628      	mov	r0, r5
 80166e2:	bd38      	pop	{r3, r4, r5, pc}
 80166e4:	b118      	cbz	r0, 80166ee <_fflush_r+0x1a>
 80166e6:	6a03      	ldr	r3, [r0, #32]
 80166e8:	b90b      	cbnz	r3, 80166ee <_fflush_r+0x1a>
 80166ea:	f7fd f8e1 	bl	80138b0 <__sinit>
 80166ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d0f3      	beq.n	80166de <_fflush_r+0xa>
 80166f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80166f8:	07d0      	lsls	r0, r2, #31
 80166fa:	d404      	bmi.n	8016706 <_fflush_r+0x32>
 80166fc:	0599      	lsls	r1, r3, #22
 80166fe:	d402      	bmi.n	8016706 <_fflush_r+0x32>
 8016700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016702:	f7fd faf0 	bl	8013ce6 <__retarget_lock_acquire_recursive>
 8016706:	4628      	mov	r0, r5
 8016708:	4621      	mov	r1, r4
 801670a:	f7ff ff5f 	bl	80165cc <__sflush_r>
 801670e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016710:	07da      	lsls	r2, r3, #31
 8016712:	4605      	mov	r5, r0
 8016714:	d4e4      	bmi.n	80166e0 <_fflush_r+0xc>
 8016716:	89a3      	ldrh	r3, [r4, #12]
 8016718:	059b      	lsls	r3, r3, #22
 801671a:	d4e1      	bmi.n	80166e0 <_fflush_r+0xc>
 801671c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801671e:	f7fd fae3 	bl	8013ce8 <__retarget_lock_release_recursive>
 8016722:	e7dd      	b.n	80166e0 <_fflush_r+0xc>

08016724 <__swhatbuf_r>:
 8016724:	b570      	push	{r4, r5, r6, lr}
 8016726:	460c      	mov	r4, r1
 8016728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801672c:	2900      	cmp	r1, #0
 801672e:	b096      	sub	sp, #88	@ 0x58
 8016730:	4615      	mov	r5, r2
 8016732:	461e      	mov	r6, r3
 8016734:	da0d      	bge.n	8016752 <__swhatbuf_r+0x2e>
 8016736:	89a3      	ldrh	r3, [r4, #12]
 8016738:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801673c:	f04f 0100 	mov.w	r1, #0
 8016740:	bf14      	ite	ne
 8016742:	2340      	movne	r3, #64	@ 0x40
 8016744:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016748:	2000      	movs	r0, #0
 801674a:	6031      	str	r1, [r6, #0]
 801674c:	602b      	str	r3, [r5, #0]
 801674e:	b016      	add	sp, #88	@ 0x58
 8016750:	bd70      	pop	{r4, r5, r6, pc}
 8016752:	466a      	mov	r2, sp
 8016754:	f000 f874 	bl	8016840 <_fstat_r>
 8016758:	2800      	cmp	r0, #0
 801675a:	dbec      	blt.n	8016736 <__swhatbuf_r+0x12>
 801675c:	9901      	ldr	r1, [sp, #4]
 801675e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016762:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016766:	4259      	negs	r1, r3
 8016768:	4159      	adcs	r1, r3
 801676a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801676e:	e7eb      	b.n	8016748 <__swhatbuf_r+0x24>

08016770 <__smakebuf_r>:
 8016770:	898b      	ldrh	r3, [r1, #12]
 8016772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016774:	079d      	lsls	r5, r3, #30
 8016776:	4606      	mov	r6, r0
 8016778:	460c      	mov	r4, r1
 801677a:	d507      	bpl.n	801678c <__smakebuf_r+0x1c>
 801677c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016780:	6023      	str	r3, [r4, #0]
 8016782:	6123      	str	r3, [r4, #16]
 8016784:	2301      	movs	r3, #1
 8016786:	6163      	str	r3, [r4, #20]
 8016788:	b003      	add	sp, #12
 801678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801678c:	ab01      	add	r3, sp, #4
 801678e:	466a      	mov	r2, sp
 8016790:	f7ff ffc8 	bl	8016724 <__swhatbuf_r>
 8016794:	9f00      	ldr	r7, [sp, #0]
 8016796:	4605      	mov	r5, r0
 8016798:	4639      	mov	r1, r7
 801679a:	4630      	mov	r0, r6
 801679c:	f7fe f90e 	bl	80149bc <_malloc_r>
 80167a0:	b948      	cbnz	r0, 80167b6 <__smakebuf_r+0x46>
 80167a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167a6:	059a      	lsls	r2, r3, #22
 80167a8:	d4ee      	bmi.n	8016788 <__smakebuf_r+0x18>
 80167aa:	f023 0303 	bic.w	r3, r3, #3
 80167ae:	f043 0302 	orr.w	r3, r3, #2
 80167b2:	81a3      	strh	r3, [r4, #12]
 80167b4:	e7e2      	b.n	801677c <__smakebuf_r+0xc>
 80167b6:	89a3      	ldrh	r3, [r4, #12]
 80167b8:	6020      	str	r0, [r4, #0]
 80167ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80167be:	81a3      	strh	r3, [r4, #12]
 80167c0:	9b01      	ldr	r3, [sp, #4]
 80167c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80167c6:	b15b      	cbz	r3, 80167e0 <__smakebuf_r+0x70>
 80167c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167cc:	4630      	mov	r0, r6
 80167ce:	f000 f849 	bl	8016864 <_isatty_r>
 80167d2:	b128      	cbz	r0, 80167e0 <__smakebuf_r+0x70>
 80167d4:	89a3      	ldrh	r3, [r4, #12]
 80167d6:	f023 0303 	bic.w	r3, r3, #3
 80167da:	f043 0301 	orr.w	r3, r3, #1
 80167de:	81a3      	strh	r3, [r4, #12]
 80167e0:	89a3      	ldrh	r3, [r4, #12]
 80167e2:	431d      	orrs	r5, r3
 80167e4:	81a5      	strh	r5, [r4, #12]
 80167e6:	e7cf      	b.n	8016788 <__smakebuf_r+0x18>

080167e8 <memmove>:
 80167e8:	4288      	cmp	r0, r1
 80167ea:	b510      	push	{r4, lr}
 80167ec:	eb01 0402 	add.w	r4, r1, r2
 80167f0:	d902      	bls.n	80167f8 <memmove+0x10>
 80167f2:	4284      	cmp	r4, r0
 80167f4:	4623      	mov	r3, r4
 80167f6:	d807      	bhi.n	8016808 <memmove+0x20>
 80167f8:	1e43      	subs	r3, r0, #1
 80167fa:	42a1      	cmp	r1, r4
 80167fc:	d008      	beq.n	8016810 <memmove+0x28>
 80167fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016806:	e7f8      	b.n	80167fa <memmove+0x12>
 8016808:	4402      	add	r2, r0
 801680a:	4601      	mov	r1, r0
 801680c:	428a      	cmp	r2, r1
 801680e:	d100      	bne.n	8016812 <memmove+0x2a>
 8016810:	bd10      	pop	{r4, pc}
 8016812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801681a:	e7f7      	b.n	801680c <memmove+0x24>

0801681c <strncmp>:
 801681c:	b510      	push	{r4, lr}
 801681e:	b16a      	cbz	r2, 801683c <strncmp+0x20>
 8016820:	3901      	subs	r1, #1
 8016822:	1884      	adds	r4, r0, r2
 8016824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016828:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801682c:	429a      	cmp	r2, r3
 801682e:	d103      	bne.n	8016838 <strncmp+0x1c>
 8016830:	42a0      	cmp	r0, r4
 8016832:	d001      	beq.n	8016838 <strncmp+0x1c>
 8016834:	2a00      	cmp	r2, #0
 8016836:	d1f5      	bne.n	8016824 <strncmp+0x8>
 8016838:	1ad0      	subs	r0, r2, r3
 801683a:	bd10      	pop	{r4, pc}
 801683c:	4610      	mov	r0, r2
 801683e:	e7fc      	b.n	801683a <strncmp+0x1e>

08016840 <_fstat_r>:
 8016840:	b538      	push	{r3, r4, r5, lr}
 8016842:	4d07      	ldr	r5, [pc, #28]	@ (8016860 <_fstat_r+0x20>)
 8016844:	2300      	movs	r3, #0
 8016846:	4604      	mov	r4, r0
 8016848:	4608      	mov	r0, r1
 801684a:	4611      	mov	r1, r2
 801684c:	602b      	str	r3, [r5, #0]
 801684e:	f7f1 fb66 	bl	8007f1e <_fstat>
 8016852:	1c43      	adds	r3, r0, #1
 8016854:	d102      	bne.n	801685c <_fstat_r+0x1c>
 8016856:	682b      	ldr	r3, [r5, #0]
 8016858:	b103      	cbz	r3, 801685c <_fstat_r+0x1c>
 801685a:	6023      	str	r3, [r4, #0]
 801685c:	bd38      	pop	{r3, r4, r5, pc}
 801685e:	bf00      	nop
 8016860:	24001b0c 	.word	0x24001b0c

08016864 <_isatty_r>:
 8016864:	b538      	push	{r3, r4, r5, lr}
 8016866:	4d06      	ldr	r5, [pc, #24]	@ (8016880 <_isatty_r+0x1c>)
 8016868:	2300      	movs	r3, #0
 801686a:	4604      	mov	r4, r0
 801686c:	4608      	mov	r0, r1
 801686e:	602b      	str	r3, [r5, #0]
 8016870:	f7f1 fb65 	bl	8007f3e <_isatty>
 8016874:	1c43      	adds	r3, r0, #1
 8016876:	d102      	bne.n	801687e <_isatty_r+0x1a>
 8016878:	682b      	ldr	r3, [r5, #0]
 801687a:	b103      	cbz	r3, 801687e <_isatty_r+0x1a>
 801687c:	6023      	str	r3, [r4, #0]
 801687e:	bd38      	pop	{r3, r4, r5, pc}
 8016880:	24001b0c 	.word	0x24001b0c

08016884 <_sbrk_r>:
 8016884:	b538      	push	{r3, r4, r5, lr}
 8016886:	4d06      	ldr	r5, [pc, #24]	@ (80168a0 <_sbrk_r+0x1c>)
 8016888:	2300      	movs	r3, #0
 801688a:	4604      	mov	r4, r0
 801688c:	4608      	mov	r0, r1
 801688e:	602b      	str	r3, [r5, #0]
 8016890:	f7f1 fb6e 	bl	8007f70 <_sbrk>
 8016894:	1c43      	adds	r3, r0, #1
 8016896:	d102      	bne.n	801689e <_sbrk_r+0x1a>
 8016898:	682b      	ldr	r3, [r5, #0]
 801689a:	b103      	cbz	r3, 801689e <_sbrk_r+0x1a>
 801689c:	6023      	str	r3, [r4, #0]
 801689e:	bd38      	pop	{r3, r4, r5, pc}
 80168a0:	24001b0c 	.word	0x24001b0c
 80168a4:	00000000 	.word	0x00000000

080168a8 <nan>:
 80168a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80168b0 <nan+0x8>
 80168ac:	4770      	bx	lr
 80168ae:	bf00      	nop
 80168b0:	00000000 	.word	0x00000000
 80168b4:	7ff80000 	.word	0x7ff80000

080168b8 <__assert_func>:
 80168b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80168ba:	4614      	mov	r4, r2
 80168bc:	461a      	mov	r2, r3
 80168be:	4b09      	ldr	r3, [pc, #36]	@ (80168e4 <__assert_func+0x2c>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	4605      	mov	r5, r0
 80168c4:	68d8      	ldr	r0, [r3, #12]
 80168c6:	b954      	cbnz	r4, 80168de <__assert_func+0x26>
 80168c8:	4b07      	ldr	r3, [pc, #28]	@ (80168e8 <__assert_func+0x30>)
 80168ca:	461c      	mov	r4, r3
 80168cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80168d0:	9100      	str	r1, [sp, #0]
 80168d2:	462b      	mov	r3, r5
 80168d4:	4905      	ldr	r1, [pc, #20]	@ (80168ec <__assert_func+0x34>)
 80168d6:	f000 fba7 	bl	8017028 <fiprintf>
 80168da:	f000 fbb7 	bl	801704c <abort>
 80168de:	4b04      	ldr	r3, [pc, #16]	@ (80168f0 <__assert_func+0x38>)
 80168e0:	e7f4      	b.n	80168cc <__assert_func+0x14>
 80168e2:	bf00      	nop
 80168e4:	24000194 	.word	0x24000194
 80168e8:	080177bd 	.word	0x080177bd
 80168ec:	0801778f 	.word	0x0801778f
 80168f0:	08017782 	.word	0x08017782

080168f4 <_calloc_r>:
 80168f4:	b570      	push	{r4, r5, r6, lr}
 80168f6:	fba1 5402 	umull	r5, r4, r1, r2
 80168fa:	b93c      	cbnz	r4, 801690c <_calloc_r+0x18>
 80168fc:	4629      	mov	r1, r5
 80168fe:	f7fe f85d 	bl	80149bc <_malloc_r>
 8016902:	4606      	mov	r6, r0
 8016904:	b928      	cbnz	r0, 8016912 <_calloc_r+0x1e>
 8016906:	2600      	movs	r6, #0
 8016908:	4630      	mov	r0, r6
 801690a:	bd70      	pop	{r4, r5, r6, pc}
 801690c:	220c      	movs	r2, #12
 801690e:	6002      	str	r2, [r0, #0]
 8016910:	e7f9      	b.n	8016906 <_calloc_r+0x12>
 8016912:	462a      	mov	r2, r5
 8016914:	4621      	mov	r1, r4
 8016916:	f7fd f969 	bl	8013bec <memset>
 801691a:	e7f5      	b.n	8016908 <_calloc_r+0x14>

0801691c <rshift>:
 801691c:	6903      	ldr	r3, [r0, #16]
 801691e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016926:	ea4f 1261 	mov.w	r2, r1, asr #5
 801692a:	f100 0414 	add.w	r4, r0, #20
 801692e:	dd45      	ble.n	80169bc <rshift+0xa0>
 8016930:	f011 011f 	ands.w	r1, r1, #31
 8016934:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016938:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801693c:	d10c      	bne.n	8016958 <rshift+0x3c>
 801693e:	f100 0710 	add.w	r7, r0, #16
 8016942:	4629      	mov	r1, r5
 8016944:	42b1      	cmp	r1, r6
 8016946:	d334      	bcc.n	80169b2 <rshift+0x96>
 8016948:	1a9b      	subs	r3, r3, r2
 801694a:	009b      	lsls	r3, r3, #2
 801694c:	1eea      	subs	r2, r5, #3
 801694e:	4296      	cmp	r6, r2
 8016950:	bf38      	it	cc
 8016952:	2300      	movcc	r3, #0
 8016954:	4423      	add	r3, r4
 8016956:	e015      	b.n	8016984 <rshift+0x68>
 8016958:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801695c:	f1c1 0820 	rsb	r8, r1, #32
 8016960:	40cf      	lsrs	r7, r1
 8016962:	f105 0e04 	add.w	lr, r5, #4
 8016966:	46a1      	mov	r9, r4
 8016968:	4576      	cmp	r6, lr
 801696a:	46f4      	mov	ip, lr
 801696c:	d815      	bhi.n	801699a <rshift+0x7e>
 801696e:	1a9a      	subs	r2, r3, r2
 8016970:	0092      	lsls	r2, r2, #2
 8016972:	3a04      	subs	r2, #4
 8016974:	3501      	adds	r5, #1
 8016976:	42ae      	cmp	r6, r5
 8016978:	bf38      	it	cc
 801697a:	2200      	movcc	r2, #0
 801697c:	18a3      	adds	r3, r4, r2
 801697e:	50a7      	str	r7, [r4, r2]
 8016980:	b107      	cbz	r7, 8016984 <rshift+0x68>
 8016982:	3304      	adds	r3, #4
 8016984:	1b1a      	subs	r2, r3, r4
 8016986:	42a3      	cmp	r3, r4
 8016988:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801698c:	bf08      	it	eq
 801698e:	2300      	moveq	r3, #0
 8016990:	6102      	str	r2, [r0, #16]
 8016992:	bf08      	it	eq
 8016994:	6143      	streq	r3, [r0, #20]
 8016996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801699a:	f8dc c000 	ldr.w	ip, [ip]
 801699e:	fa0c fc08 	lsl.w	ip, ip, r8
 80169a2:	ea4c 0707 	orr.w	r7, ip, r7
 80169a6:	f849 7b04 	str.w	r7, [r9], #4
 80169aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80169ae:	40cf      	lsrs	r7, r1
 80169b0:	e7da      	b.n	8016968 <rshift+0x4c>
 80169b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80169b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80169ba:	e7c3      	b.n	8016944 <rshift+0x28>
 80169bc:	4623      	mov	r3, r4
 80169be:	e7e1      	b.n	8016984 <rshift+0x68>

080169c0 <__hexdig_fun>:
 80169c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80169c4:	2b09      	cmp	r3, #9
 80169c6:	d802      	bhi.n	80169ce <__hexdig_fun+0xe>
 80169c8:	3820      	subs	r0, #32
 80169ca:	b2c0      	uxtb	r0, r0
 80169cc:	4770      	bx	lr
 80169ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80169d2:	2b05      	cmp	r3, #5
 80169d4:	d801      	bhi.n	80169da <__hexdig_fun+0x1a>
 80169d6:	3847      	subs	r0, #71	@ 0x47
 80169d8:	e7f7      	b.n	80169ca <__hexdig_fun+0xa>
 80169da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80169de:	2b05      	cmp	r3, #5
 80169e0:	d801      	bhi.n	80169e6 <__hexdig_fun+0x26>
 80169e2:	3827      	subs	r0, #39	@ 0x27
 80169e4:	e7f1      	b.n	80169ca <__hexdig_fun+0xa>
 80169e6:	2000      	movs	r0, #0
 80169e8:	4770      	bx	lr
	...

080169ec <__gethex>:
 80169ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169f0:	b085      	sub	sp, #20
 80169f2:	468a      	mov	sl, r1
 80169f4:	9302      	str	r3, [sp, #8]
 80169f6:	680b      	ldr	r3, [r1, #0]
 80169f8:	9001      	str	r0, [sp, #4]
 80169fa:	4690      	mov	r8, r2
 80169fc:	1c9c      	adds	r4, r3, #2
 80169fe:	46a1      	mov	r9, r4
 8016a00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016a04:	2830      	cmp	r0, #48	@ 0x30
 8016a06:	d0fa      	beq.n	80169fe <__gethex+0x12>
 8016a08:	eba9 0303 	sub.w	r3, r9, r3
 8016a0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016a10:	f7ff ffd6 	bl	80169c0 <__hexdig_fun>
 8016a14:	4605      	mov	r5, r0
 8016a16:	2800      	cmp	r0, #0
 8016a18:	d168      	bne.n	8016aec <__gethex+0x100>
 8016a1a:	49a0      	ldr	r1, [pc, #640]	@ (8016c9c <__gethex+0x2b0>)
 8016a1c:	2201      	movs	r2, #1
 8016a1e:	4648      	mov	r0, r9
 8016a20:	f7ff fefc 	bl	801681c <strncmp>
 8016a24:	4607      	mov	r7, r0
 8016a26:	2800      	cmp	r0, #0
 8016a28:	d167      	bne.n	8016afa <__gethex+0x10e>
 8016a2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016a2e:	4626      	mov	r6, r4
 8016a30:	f7ff ffc6 	bl	80169c0 <__hexdig_fun>
 8016a34:	2800      	cmp	r0, #0
 8016a36:	d062      	beq.n	8016afe <__gethex+0x112>
 8016a38:	4623      	mov	r3, r4
 8016a3a:	7818      	ldrb	r0, [r3, #0]
 8016a3c:	2830      	cmp	r0, #48	@ 0x30
 8016a3e:	4699      	mov	r9, r3
 8016a40:	f103 0301 	add.w	r3, r3, #1
 8016a44:	d0f9      	beq.n	8016a3a <__gethex+0x4e>
 8016a46:	f7ff ffbb 	bl	80169c0 <__hexdig_fun>
 8016a4a:	fab0 f580 	clz	r5, r0
 8016a4e:	096d      	lsrs	r5, r5, #5
 8016a50:	f04f 0b01 	mov.w	fp, #1
 8016a54:	464a      	mov	r2, r9
 8016a56:	4616      	mov	r6, r2
 8016a58:	3201      	adds	r2, #1
 8016a5a:	7830      	ldrb	r0, [r6, #0]
 8016a5c:	f7ff ffb0 	bl	80169c0 <__hexdig_fun>
 8016a60:	2800      	cmp	r0, #0
 8016a62:	d1f8      	bne.n	8016a56 <__gethex+0x6a>
 8016a64:	498d      	ldr	r1, [pc, #564]	@ (8016c9c <__gethex+0x2b0>)
 8016a66:	2201      	movs	r2, #1
 8016a68:	4630      	mov	r0, r6
 8016a6a:	f7ff fed7 	bl	801681c <strncmp>
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	d13f      	bne.n	8016af2 <__gethex+0x106>
 8016a72:	b944      	cbnz	r4, 8016a86 <__gethex+0x9a>
 8016a74:	1c74      	adds	r4, r6, #1
 8016a76:	4622      	mov	r2, r4
 8016a78:	4616      	mov	r6, r2
 8016a7a:	3201      	adds	r2, #1
 8016a7c:	7830      	ldrb	r0, [r6, #0]
 8016a7e:	f7ff ff9f 	bl	80169c0 <__hexdig_fun>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	d1f8      	bne.n	8016a78 <__gethex+0x8c>
 8016a86:	1ba4      	subs	r4, r4, r6
 8016a88:	00a7      	lsls	r7, r4, #2
 8016a8a:	7833      	ldrb	r3, [r6, #0]
 8016a8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016a90:	2b50      	cmp	r3, #80	@ 0x50
 8016a92:	d13e      	bne.n	8016b12 <__gethex+0x126>
 8016a94:	7873      	ldrb	r3, [r6, #1]
 8016a96:	2b2b      	cmp	r3, #43	@ 0x2b
 8016a98:	d033      	beq.n	8016b02 <__gethex+0x116>
 8016a9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8016a9c:	d034      	beq.n	8016b08 <__gethex+0x11c>
 8016a9e:	1c71      	adds	r1, r6, #1
 8016aa0:	2400      	movs	r4, #0
 8016aa2:	7808      	ldrb	r0, [r1, #0]
 8016aa4:	f7ff ff8c 	bl	80169c0 <__hexdig_fun>
 8016aa8:	1e43      	subs	r3, r0, #1
 8016aaa:	b2db      	uxtb	r3, r3
 8016aac:	2b18      	cmp	r3, #24
 8016aae:	d830      	bhi.n	8016b12 <__gethex+0x126>
 8016ab0:	f1a0 0210 	sub.w	r2, r0, #16
 8016ab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016ab8:	f7ff ff82 	bl	80169c0 <__hexdig_fun>
 8016abc:	f100 3cff 	add.w	ip, r0, #4294967295
 8016ac0:	fa5f fc8c 	uxtb.w	ip, ip
 8016ac4:	f1bc 0f18 	cmp.w	ip, #24
 8016ac8:	f04f 030a 	mov.w	r3, #10
 8016acc:	d91e      	bls.n	8016b0c <__gethex+0x120>
 8016ace:	b104      	cbz	r4, 8016ad2 <__gethex+0xe6>
 8016ad0:	4252      	negs	r2, r2
 8016ad2:	4417      	add	r7, r2
 8016ad4:	f8ca 1000 	str.w	r1, [sl]
 8016ad8:	b1ed      	cbz	r5, 8016b16 <__gethex+0x12a>
 8016ada:	f1bb 0f00 	cmp.w	fp, #0
 8016ade:	bf0c      	ite	eq
 8016ae0:	2506      	moveq	r5, #6
 8016ae2:	2500      	movne	r5, #0
 8016ae4:	4628      	mov	r0, r5
 8016ae6:	b005      	add	sp, #20
 8016ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aec:	2500      	movs	r5, #0
 8016aee:	462c      	mov	r4, r5
 8016af0:	e7b0      	b.n	8016a54 <__gethex+0x68>
 8016af2:	2c00      	cmp	r4, #0
 8016af4:	d1c7      	bne.n	8016a86 <__gethex+0x9a>
 8016af6:	4627      	mov	r7, r4
 8016af8:	e7c7      	b.n	8016a8a <__gethex+0x9e>
 8016afa:	464e      	mov	r6, r9
 8016afc:	462f      	mov	r7, r5
 8016afe:	2501      	movs	r5, #1
 8016b00:	e7c3      	b.n	8016a8a <__gethex+0x9e>
 8016b02:	2400      	movs	r4, #0
 8016b04:	1cb1      	adds	r1, r6, #2
 8016b06:	e7cc      	b.n	8016aa2 <__gethex+0xb6>
 8016b08:	2401      	movs	r4, #1
 8016b0a:	e7fb      	b.n	8016b04 <__gethex+0x118>
 8016b0c:	fb03 0002 	mla	r0, r3, r2, r0
 8016b10:	e7ce      	b.n	8016ab0 <__gethex+0xc4>
 8016b12:	4631      	mov	r1, r6
 8016b14:	e7de      	b.n	8016ad4 <__gethex+0xe8>
 8016b16:	eba6 0309 	sub.w	r3, r6, r9
 8016b1a:	3b01      	subs	r3, #1
 8016b1c:	4629      	mov	r1, r5
 8016b1e:	2b07      	cmp	r3, #7
 8016b20:	dc0a      	bgt.n	8016b38 <__gethex+0x14c>
 8016b22:	9801      	ldr	r0, [sp, #4]
 8016b24:	f7fd ffd6 	bl	8014ad4 <_Balloc>
 8016b28:	4604      	mov	r4, r0
 8016b2a:	b940      	cbnz	r0, 8016b3e <__gethex+0x152>
 8016b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8016ca0 <__gethex+0x2b4>)
 8016b2e:	4602      	mov	r2, r0
 8016b30:	21e4      	movs	r1, #228	@ 0xe4
 8016b32:	485c      	ldr	r0, [pc, #368]	@ (8016ca4 <__gethex+0x2b8>)
 8016b34:	f7ff fec0 	bl	80168b8 <__assert_func>
 8016b38:	3101      	adds	r1, #1
 8016b3a:	105b      	asrs	r3, r3, #1
 8016b3c:	e7ef      	b.n	8016b1e <__gethex+0x132>
 8016b3e:	f100 0a14 	add.w	sl, r0, #20
 8016b42:	2300      	movs	r3, #0
 8016b44:	4655      	mov	r5, sl
 8016b46:	469b      	mov	fp, r3
 8016b48:	45b1      	cmp	r9, r6
 8016b4a:	d337      	bcc.n	8016bbc <__gethex+0x1d0>
 8016b4c:	f845 bb04 	str.w	fp, [r5], #4
 8016b50:	eba5 050a 	sub.w	r5, r5, sl
 8016b54:	10ad      	asrs	r5, r5, #2
 8016b56:	6125      	str	r5, [r4, #16]
 8016b58:	4658      	mov	r0, fp
 8016b5a:	f7fe f8ad 	bl	8014cb8 <__hi0bits>
 8016b5e:	016d      	lsls	r5, r5, #5
 8016b60:	f8d8 6000 	ldr.w	r6, [r8]
 8016b64:	1a2d      	subs	r5, r5, r0
 8016b66:	42b5      	cmp	r5, r6
 8016b68:	dd54      	ble.n	8016c14 <__gethex+0x228>
 8016b6a:	1bad      	subs	r5, r5, r6
 8016b6c:	4629      	mov	r1, r5
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f7fe fc3e 	bl	80153f0 <__any_on>
 8016b74:	4681      	mov	r9, r0
 8016b76:	b178      	cbz	r0, 8016b98 <__gethex+0x1ac>
 8016b78:	1e6b      	subs	r3, r5, #1
 8016b7a:	1159      	asrs	r1, r3, #5
 8016b7c:	f003 021f 	and.w	r2, r3, #31
 8016b80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016b84:	f04f 0901 	mov.w	r9, #1
 8016b88:	fa09 f202 	lsl.w	r2, r9, r2
 8016b8c:	420a      	tst	r2, r1
 8016b8e:	d003      	beq.n	8016b98 <__gethex+0x1ac>
 8016b90:	454b      	cmp	r3, r9
 8016b92:	dc36      	bgt.n	8016c02 <__gethex+0x216>
 8016b94:	f04f 0902 	mov.w	r9, #2
 8016b98:	4629      	mov	r1, r5
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	f7ff febe 	bl	801691c <rshift>
 8016ba0:	442f      	add	r7, r5
 8016ba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016ba6:	42bb      	cmp	r3, r7
 8016ba8:	da42      	bge.n	8016c30 <__gethex+0x244>
 8016baa:	9801      	ldr	r0, [sp, #4]
 8016bac:	4621      	mov	r1, r4
 8016bae:	f7fd ffd1 	bl	8014b54 <_Bfree>
 8016bb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	6013      	str	r3, [r2, #0]
 8016bb8:	25a3      	movs	r5, #163	@ 0xa3
 8016bba:	e793      	b.n	8016ae4 <__gethex+0xf8>
 8016bbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016bc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8016bc2:	d012      	beq.n	8016bea <__gethex+0x1fe>
 8016bc4:	2b20      	cmp	r3, #32
 8016bc6:	d104      	bne.n	8016bd2 <__gethex+0x1e6>
 8016bc8:	f845 bb04 	str.w	fp, [r5], #4
 8016bcc:	f04f 0b00 	mov.w	fp, #0
 8016bd0:	465b      	mov	r3, fp
 8016bd2:	7830      	ldrb	r0, [r6, #0]
 8016bd4:	9303      	str	r3, [sp, #12]
 8016bd6:	f7ff fef3 	bl	80169c0 <__hexdig_fun>
 8016bda:	9b03      	ldr	r3, [sp, #12]
 8016bdc:	f000 000f 	and.w	r0, r0, #15
 8016be0:	4098      	lsls	r0, r3
 8016be2:	ea4b 0b00 	orr.w	fp, fp, r0
 8016be6:	3304      	adds	r3, #4
 8016be8:	e7ae      	b.n	8016b48 <__gethex+0x15c>
 8016bea:	45b1      	cmp	r9, r6
 8016bec:	d8ea      	bhi.n	8016bc4 <__gethex+0x1d8>
 8016bee:	492b      	ldr	r1, [pc, #172]	@ (8016c9c <__gethex+0x2b0>)
 8016bf0:	9303      	str	r3, [sp, #12]
 8016bf2:	2201      	movs	r2, #1
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	f7ff fe11 	bl	801681c <strncmp>
 8016bfa:	9b03      	ldr	r3, [sp, #12]
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	d1e1      	bne.n	8016bc4 <__gethex+0x1d8>
 8016c00:	e7a2      	b.n	8016b48 <__gethex+0x15c>
 8016c02:	1ea9      	subs	r1, r5, #2
 8016c04:	4620      	mov	r0, r4
 8016c06:	f7fe fbf3 	bl	80153f0 <__any_on>
 8016c0a:	2800      	cmp	r0, #0
 8016c0c:	d0c2      	beq.n	8016b94 <__gethex+0x1a8>
 8016c0e:	f04f 0903 	mov.w	r9, #3
 8016c12:	e7c1      	b.n	8016b98 <__gethex+0x1ac>
 8016c14:	da09      	bge.n	8016c2a <__gethex+0x23e>
 8016c16:	1b75      	subs	r5, r6, r5
 8016c18:	4621      	mov	r1, r4
 8016c1a:	9801      	ldr	r0, [sp, #4]
 8016c1c:	462a      	mov	r2, r5
 8016c1e:	f7fe f9b1 	bl	8014f84 <__lshift>
 8016c22:	1b7f      	subs	r7, r7, r5
 8016c24:	4604      	mov	r4, r0
 8016c26:	f100 0a14 	add.w	sl, r0, #20
 8016c2a:	f04f 0900 	mov.w	r9, #0
 8016c2e:	e7b8      	b.n	8016ba2 <__gethex+0x1b6>
 8016c30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016c34:	42bd      	cmp	r5, r7
 8016c36:	dd6f      	ble.n	8016d18 <__gethex+0x32c>
 8016c38:	1bed      	subs	r5, r5, r7
 8016c3a:	42ae      	cmp	r6, r5
 8016c3c:	dc34      	bgt.n	8016ca8 <__gethex+0x2bc>
 8016c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c42:	2b02      	cmp	r3, #2
 8016c44:	d022      	beq.n	8016c8c <__gethex+0x2a0>
 8016c46:	2b03      	cmp	r3, #3
 8016c48:	d024      	beq.n	8016c94 <__gethex+0x2a8>
 8016c4a:	2b01      	cmp	r3, #1
 8016c4c:	d115      	bne.n	8016c7a <__gethex+0x28e>
 8016c4e:	42ae      	cmp	r6, r5
 8016c50:	d113      	bne.n	8016c7a <__gethex+0x28e>
 8016c52:	2e01      	cmp	r6, #1
 8016c54:	d10b      	bne.n	8016c6e <__gethex+0x282>
 8016c56:	9a02      	ldr	r2, [sp, #8]
 8016c58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c5c:	6013      	str	r3, [r2, #0]
 8016c5e:	2301      	movs	r3, #1
 8016c60:	6123      	str	r3, [r4, #16]
 8016c62:	f8ca 3000 	str.w	r3, [sl]
 8016c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c68:	2562      	movs	r5, #98	@ 0x62
 8016c6a:	601c      	str	r4, [r3, #0]
 8016c6c:	e73a      	b.n	8016ae4 <__gethex+0xf8>
 8016c6e:	1e71      	subs	r1, r6, #1
 8016c70:	4620      	mov	r0, r4
 8016c72:	f7fe fbbd 	bl	80153f0 <__any_on>
 8016c76:	2800      	cmp	r0, #0
 8016c78:	d1ed      	bne.n	8016c56 <__gethex+0x26a>
 8016c7a:	9801      	ldr	r0, [sp, #4]
 8016c7c:	4621      	mov	r1, r4
 8016c7e:	f7fd ff69 	bl	8014b54 <_Bfree>
 8016c82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c84:	2300      	movs	r3, #0
 8016c86:	6013      	str	r3, [r2, #0]
 8016c88:	2550      	movs	r5, #80	@ 0x50
 8016c8a:	e72b      	b.n	8016ae4 <__gethex+0xf8>
 8016c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d1f3      	bne.n	8016c7a <__gethex+0x28e>
 8016c92:	e7e0      	b.n	8016c56 <__gethex+0x26a>
 8016c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d1dd      	bne.n	8016c56 <__gethex+0x26a>
 8016c9a:	e7ee      	b.n	8016c7a <__gethex+0x28e>
 8016c9c:	08017610 	.word	0x08017610
 8016ca0:	080174a5 	.word	0x080174a5
 8016ca4:	080177be 	.word	0x080177be
 8016ca8:	1e6f      	subs	r7, r5, #1
 8016caa:	f1b9 0f00 	cmp.w	r9, #0
 8016cae:	d130      	bne.n	8016d12 <__gethex+0x326>
 8016cb0:	b127      	cbz	r7, 8016cbc <__gethex+0x2d0>
 8016cb2:	4639      	mov	r1, r7
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	f7fe fb9b 	bl	80153f0 <__any_on>
 8016cba:	4681      	mov	r9, r0
 8016cbc:	117a      	asrs	r2, r7, #5
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016cc4:	f007 071f 	and.w	r7, r7, #31
 8016cc8:	40bb      	lsls	r3, r7
 8016cca:	4213      	tst	r3, r2
 8016ccc:	4629      	mov	r1, r5
 8016cce:	4620      	mov	r0, r4
 8016cd0:	bf18      	it	ne
 8016cd2:	f049 0902 	orrne.w	r9, r9, #2
 8016cd6:	f7ff fe21 	bl	801691c <rshift>
 8016cda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016cde:	1b76      	subs	r6, r6, r5
 8016ce0:	2502      	movs	r5, #2
 8016ce2:	f1b9 0f00 	cmp.w	r9, #0
 8016ce6:	d047      	beq.n	8016d78 <__gethex+0x38c>
 8016ce8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016cec:	2b02      	cmp	r3, #2
 8016cee:	d015      	beq.n	8016d1c <__gethex+0x330>
 8016cf0:	2b03      	cmp	r3, #3
 8016cf2:	d017      	beq.n	8016d24 <__gethex+0x338>
 8016cf4:	2b01      	cmp	r3, #1
 8016cf6:	d109      	bne.n	8016d0c <__gethex+0x320>
 8016cf8:	f019 0f02 	tst.w	r9, #2
 8016cfc:	d006      	beq.n	8016d0c <__gethex+0x320>
 8016cfe:	f8da 3000 	ldr.w	r3, [sl]
 8016d02:	ea49 0903 	orr.w	r9, r9, r3
 8016d06:	f019 0f01 	tst.w	r9, #1
 8016d0a:	d10e      	bne.n	8016d2a <__gethex+0x33e>
 8016d0c:	f045 0510 	orr.w	r5, r5, #16
 8016d10:	e032      	b.n	8016d78 <__gethex+0x38c>
 8016d12:	f04f 0901 	mov.w	r9, #1
 8016d16:	e7d1      	b.n	8016cbc <__gethex+0x2d0>
 8016d18:	2501      	movs	r5, #1
 8016d1a:	e7e2      	b.n	8016ce2 <__gethex+0x2f6>
 8016d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d1e:	f1c3 0301 	rsb	r3, r3, #1
 8016d22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d0f0      	beq.n	8016d0c <__gethex+0x320>
 8016d2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016d2e:	f104 0314 	add.w	r3, r4, #20
 8016d32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016d36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016d3a:	f04f 0c00 	mov.w	ip, #0
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016d48:	d01b      	beq.n	8016d82 <__gethex+0x396>
 8016d4a:	3201      	adds	r2, #1
 8016d4c:	6002      	str	r2, [r0, #0]
 8016d4e:	2d02      	cmp	r5, #2
 8016d50:	f104 0314 	add.w	r3, r4, #20
 8016d54:	d13c      	bne.n	8016dd0 <__gethex+0x3e4>
 8016d56:	f8d8 2000 	ldr.w	r2, [r8]
 8016d5a:	3a01      	subs	r2, #1
 8016d5c:	42b2      	cmp	r2, r6
 8016d5e:	d109      	bne.n	8016d74 <__gethex+0x388>
 8016d60:	1171      	asrs	r1, r6, #5
 8016d62:	2201      	movs	r2, #1
 8016d64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d68:	f006 061f 	and.w	r6, r6, #31
 8016d6c:	fa02 f606 	lsl.w	r6, r2, r6
 8016d70:	421e      	tst	r6, r3
 8016d72:	d13a      	bne.n	8016dea <__gethex+0x3fe>
 8016d74:	f045 0520 	orr.w	r5, r5, #32
 8016d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d7a:	601c      	str	r4, [r3, #0]
 8016d7c:	9b02      	ldr	r3, [sp, #8]
 8016d7e:	601f      	str	r7, [r3, #0]
 8016d80:	e6b0      	b.n	8016ae4 <__gethex+0xf8>
 8016d82:	4299      	cmp	r1, r3
 8016d84:	f843 cc04 	str.w	ip, [r3, #-4]
 8016d88:	d8d9      	bhi.n	8016d3e <__gethex+0x352>
 8016d8a:	68a3      	ldr	r3, [r4, #8]
 8016d8c:	459b      	cmp	fp, r3
 8016d8e:	db17      	blt.n	8016dc0 <__gethex+0x3d4>
 8016d90:	6861      	ldr	r1, [r4, #4]
 8016d92:	9801      	ldr	r0, [sp, #4]
 8016d94:	3101      	adds	r1, #1
 8016d96:	f7fd fe9d 	bl	8014ad4 <_Balloc>
 8016d9a:	4681      	mov	r9, r0
 8016d9c:	b918      	cbnz	r0, 8016da6 <__gethex+0x3ba>
 8016d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8016e08 <__gethex+0x41c>)
 8016da0:	4602      	mov	r2, r0
 8016da2:	2184      	movs	r1, #132	@ 0x84
 8016da4:	e6c5      	b.n	8016b32 <__gethex+0x146>
 8016da6:	6922      	ldr	r2, [r4, #16]
 8016da8:	3202      	adds	r2, #2
 8016daa:	f104 010c 	add.w	r1, r4, #12
 8016dae:	0092      	lsls	r2, r2, #2
 8016db0:	300c      	adds	r0, #12
 8016db2:	f7fc ff9a 	bl	8013cea <memcpy>
 8016db6:	4621      	mov	r1, r4
 8016db8:	9801      	ldr	r0, [sp, #4]
 8016dba:	f7fd fecb 	bl	8014b54 <_Bfree>
 8016dbe:	464c      	mov	r4, r9
 8016dc0:	6923      	ldr	r3, [r4, #16]
 8016dc2:	1c5a      	adds	r2, r3, #1
 8016dc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016dc8:	6122      	str	r2, [r4, #16]
 8016dca:	2201      	movs	r2, #1
 8016dcc:	615a      	str	r2, [r3, #20]
 8016dce:	e7be      	b.n	8016d4e <__gethex+0x362>
 8016dd0:	6922      	ldr	r2, [r4, #16]
 8016dd2:	455a      	cmp	r2, fp
 8016dd4:	dd0b      	ble.n	8016dee <__gethex+0x402>
 8016dd6:	2101      	movs	r1, #1
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f7ff fd9f 	bl	801691c <rshift>
 8016dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016de2:	3701      	adds	r7, #1
 8016de4:	42bb      	cmp	r3, r7
 8016de6:	f6ff aee0 	blt.w	8016baa <__gethex+0x1be>
 8016dea:	2501      	movs	r5, #1
 8016dec:	e7c2      	b.n	8016d74 <__gethex+0x388>
 8016dee:	f016 061f 	ands.w	r6, r6, #31
 8016df2:	d0fa      	beq.n	8016dea <__gethex+0x3fe>
 8016df4:	4453      	add	r3, sl
 8016df6:	f1c6 0620 	rsb	r6, r6, #32
 8016dfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016dfe:	f7fd ff5b 	bl	8014cb8 <__hi0bits>
 8016e02:	42b0      	cmp	r0, r6
 8016e04:	dbe7      	blt.n	8016dd6 <__gethex+0x3ea>
 8016e06:	e7f0      	b.n	8016dea <__gethex+0x3fe>
 8016e08:	080174a5 	.word	0x080174a5

08016e0c <L_shift>:
 8016e0c:	f1c2 0208 	rsb	r2, r2, #8
 8016e10:	0092      	lsls	r2, r2, #2
 8016e12:	b570      	push	{r4, r5, r6, lr}
 8016e14:	f1c2 0620 	rsb	r6, r2, #32
 8016e18:	6843      	ldr	r3, [r0, #4]
 8016e1a:	6804      	ldr	r4, [r0, #0]
 8016e1c:	fa03 f506 	lsl.w	r5, r3, r6
 8016e20:	432c      	orrs	r4, r5
 8016e22:	40d3      	lsrs	r3, r2
 8016e24:	6004      	str	r4, [r0, #0]
 8016e26:	f840 3f04 	str.w	r3, [r0, #4]!
 8016e2a:	4288      	cmp	r0, r1
 8016e2c:	d3f4      	bcc.n	8016e18 <L_shift+0xc>
 8016e2e:	bd70      	pop	{r4, r5, r6, pc}

08016e30 <__match>:
 8016e30:	b530      	push	{r4, r5, lr}
 8016e32:	6803      	ldr	r3, [r0, #0]
 8016e34:	3301      	adds	r3, #1
 8016e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e3a:	b914      	cbnz	r4, 8016e42 <__match+0x12>
 8016e3c:	6003      	str	r3, [r0, #0]
 8016e3e:	2001      	movs	r0, #1
 8016e40:	bd30      	pop	{r4, r5, pc}
 8016e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016e4a:	2d19      	cmp	r5, #25
 8016e4c:	bf98      	it	ls
 8016e4e:	3220      	addls	r2, #32
 8016e50:	42a2      	cmp	r2, r4
 8016e52:	d0f0      	beq.n	8016e36 <__match+0x6>
 8016e54:	2000      	movs	r0, #0
 8016e56:	e7f3      	b.n	8016e40 <__match+0x10>

08016e58 <__hexnan>:
 8016e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e5c:	680b      	ldr	r3, [r1, #0]
 8016e5e:	6801      	ldr	r1, [r0, #0]
 8016e60:	115e      	asrs	r6, r3, #5
 8016e62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016e66:	f013 031f 	ands.w	r3, r3, #31
 8016e6a:	b087      	sub	sp, #28
 8016e6c:	bf18      	it	ne
 8016e6e:	3604      	addne	r6, #4
 8016e70:	2500      	movs	r5, #0
 8016e72:	1f37      	subs	r7, r6, #4
 8016e74:	4682      	mov	sl, r0
 8016e76:	4690      	mov	r8, r2
 8016e78:	9301      	str	r3, [sp, #4]
 8016e7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8016e7e:	46b9      	mov	r9, r7
 8016e80:	463c      	mov	r4, r7
 8016e82:	9502      	str	r5, [sp, #8]
 8016e84:	46ab      	mov	fp, r5
 8016e86:	784a      	ldrb	r2, [r1, #1]
 8016e88:	1c4b      	adds	r3, r1, #1
 8016e8a:	9303      	str	r3, [sp, #12]
 8016e8c:	b342      	cbz	r2, 8016ee0 <__hexnan+0x88>
 8016e8e:	4610      	mov	r0, r2
 8016e90:	9105      	str	r1, [sp, #20]
 8016e92:	9204      	str	r2, [sp, #16]
 8016e94:	f7ff fd94 	bl	80169c0 <__hexdig_fun>
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	d151      	bne.n	8016f40 <__hexnan+0xe8>
 8016e9c:	9a04      	ldr	r2, [sp, #16]
 8016e9e:	9905      	ldr	r1, [sp, #20]
 8016ea0:	2a20      	cmp	r2, #32
 8016ea2:	d818      	bhi.n	8016ed6 <__hexnan+0x7e>
 8016ea4:	9b02      	ldr	r3, [sp, #8]
 8016ea6:	459b      	cmp	fp, r3
 8016ea8:	dd13      	ble.n	8016ed2 <__hexnan+0x7a>
 8016eaa:	454c      	cmp	r4, r9
 8016eac:	d206      	bcs.n	8016ebc <__hexnan+0x64>
 8016eae:	2d07      	cmp	r5, #7
 8016eb0:	dc04      	bgt.n	8016ebc <__hexnan+0x64>
 8016eb2:	462a      	mov	r2, r5
 8016eb4:	4649      	mov	r1, r9
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	f7ff ffa8 	bl	8016e0c <L_shift>
 8016ebc:	4544      	cmp	r4, r8
 8016ebe:	d952      	bls.n	8016f66 <__hexnan+0x10e>
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	f1a4 0904 	sub.w	r9, r4, #4
 8016ec6:	f844 3c04 	str.w	r3, [r4, #-4]
 8016eca:	f8cd b008 	str.w	fp, [sp, #8]
 8016ece:	464c      	mov	r4, r9
 8016ed0:	461d      	mov	r5, r3
 8016ed2:	9903      	ldr	r1, [sp, #12]
 8016ed4:	e7d7      	b.n	8016e86 <__hexnan+0x2e>
 8016ed6:	2a29      	cmp	r2, #41	@ 0x29
 8016ed8:	d157      	bne.n	8016f8a <__hexnan+0x132>
 8016eda:	3102      	adds	r1, #2
 8016edc:	f8ca 1000 	str.w	r1, [sl]
 8016ee0:	f1bb 0f00 	cmp.w	fp, #0
 8016ee4:	d051      	beq.n	8016f8a <__hexnan+0x132>
 8016ee6:	454c      	cmp	r4, r9
 8016ee8:	d206      	bcs.n	8016ef8 <__hexnan+0xa0>
 8016eea:	2d07      	cmp	r5, #7
 8016eec:	dc04      	bgt.n	8016ef8 <__hexnan+0xa0>
 8016eee:	462a      	mov	r2, r5
 8016ef0:	4649      	mov	r1, r9
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f7ff ff8a 	bl	8016e0c <L_shift>
 8016ef8:	4544      	cmp	r4, r8
 8016efa:	d936      	bls.n	8016f6a <__hexnan+0x112>
 8016efc:	f1a8 0204 	sub.w	r2, r8, #4
 8016f00:	4623      	mov	r3, r4
 8016f02:	f853 1b04 	ldr.w	r1, [r3], #4
 8016f06:	f842 1f04 	str.w	r1, [r2, #4]!
 8016f0a:	429f      	cmp	r7, r3
 8016f0c:	d2f9      	bcs.n	8016f02 <__hexnan+0xaa>
 8016f0e:	1b3b      	subs	r3, r7, r4
 8016f10:	f023 0303 	bic.w	r3, r3, #3
 8016f14:	3304      	adds	r3, #4
 8016f16:	3401      	adds	r4, #1
 8016f18:	3e03      	subs	r6, #3
 8016f1a:	42b4      	cmp	r4, r6
 8016f1c:	bf88      	it	hi
 8016f1e:	2304      	movhi	r3, #4
 8016f20:	4443      	add	r3, r8
 8016f22:	2200      	movs	r2, #0
 8016f24:	f843 2b04 	str.w	r2, [r3], #4
 8016f28:	429f      	cmp	r7, r3
 8016f2a:	d2fb      	bcs.n	8016f24 <__hexnan+0xcc>
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	b91b      	cbnz	r3, 8016f38 <__hexnan+0xe0>
 8016f30:	4547      	cmp	r7, r8
 8016f32:	d128      	bne.n	8016f86 <__hexnan+0x12e>
 8016f34:	2301      	movs	r3, #1
 8016f36:	603b      	str	r3, [r7, #0]
 8016f38:	2005      	movs	r0, #5
 8016f3a:	b007      	add	sp, #28
 8016f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f40:	3501      	adds	r5, #1
 8016f42:	2d08      	cmp	r5, #8
 8016f44:	f10b 0b01 	add.w	fp, fp, #1
 8016f48:	dd06      	ble.n	8016f58 <__hexnan+0x100>
 8016f4a:	4544      	cmp	r4, r8
 8016f4c:	d9c1      	bls.n	8016ed2 <__hexnan+0x7a>
 8016f4e:	2300      	movs	r3, #0
 8016f50:	f844 3c04 	str.w	r3, [r4, #-4]
 8016f54:	2501      	movs	r5, #1
 8016f56:	3c04      	subs	r4, #4
 8016f58:	6822      	ldr	r2, [r4, #0]
 8016f5a:	f000 000f 	and.w	r0, r0, #15
 8016f5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016f62:	6020      	str	r0, [r4, #0]
 8016f64:	e7b5      	b.n	8016ed2 <__hexnan+0x7a>
 8016f66:	2508      	movs	r5, #8
 8016f68:	e7b3      	b.n	8016ed2 <__hexnan+0x7a>
 8016f6a:	9b01      	ldr	r3, [sp, #4]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d0dd      	beq.n	8016f2c <__hexnan+0xd4>
 8016f70:	f1c3 0320 	rsb	r3, r3, #32
 8016f74:	f04f 32ff 	mov.w	r2, #4294967295
 8016f78:	40da      	lsrs	r2, r3
 8016f7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016f7e:	4013      	ands	r3, r2
 8016f80:	f846 3c04 	str.w	r3, [r6, #-4]
 8016f84:	e7d2      	b.n	8016f2c <__hexnan+0xd4>
 8016f86:	3f04      	subs	r7, #4
 8016f88:	e7d0      	b.n	8016f2c <__hexnan+0xd4>
 8016f8a:	2004      	movs	r0, #4
 8016f8c:	e7d5      	b.n	8016f3a <__hexnan+0xe2>

08016f8e <__ascii_mbtowc>:
 8016f8e:	b082      	sub	sp, #8
 8016f90:	b901      	cbnz	r1, 8016f94 <__ascii_mbtowc+0x6>
 8016f92:	a901      	add	r1, sp, #4
 8016f94:	b142      	cbz	r2, 8016fa8 <__ascii_mbtowc+0x1a>
 8016f96:	b14b      	cbz	r3, 8016fac <__ascii_mbtowc+0x1e>
 8016f98:	7813      	ldrb	r3, [r2, #0]
 8016f9a:	600b      	str	r3, [r1, #0]
 8016f9c:	7812      	ldrb	r2, [r2, #0]
 8016f9e:	1e10      	subs	r0, r2, #0
 8016fa0:	bf18      	it	ne
 8016fa2:	2001      	movne	r0, #1
 8016fa4:	b002      	add	sp, #8
 8016fa6:	4770      	bx	lr
 8016fa8:	4610      	mov	r0, r2
 8016faa:	e7fb      	b.n	8016fa4 <__ascii_mbtowc+0x16>
 8016fac:	f06f 0001 	mvn.w	r0, #1
 8016fb0:	e7f8      	b.n	8016fa4 <__ascii_mbtowc+0x16>

08016fb2 <_realloc_r>:
 8016fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb6:	4680      	mov	r8, r0
 8016fb8:	4615      	mov	r5, r2
 8016fba:	460c      	mov	r4, r1
 8016fbc:	b921      	cbnz	r1, 8016fc8 <_realloc_r+0x16>
 8016fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc2:	4611      	mov	r1, r2
 8016fc4:	f7fd bcfa 	b.w	80149bc <_malloc_r>
 8016fc8:	b92a      	cbnz	r2, 8016fd6 <_realloc_r+0x24>
 8016fca:	f7fd fc83 	bl	80148d4 <_free_r>
 8016fce:	2400      	movs	r4, #0
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fd6:	f000 f840 	bl	801705a <_malloc_usable_size_r>
 8016fda:	4285      	cmp	r5, r0
 8016fdc:	4606      	mov	r6, r0
 8016fde:	d802      	bhi.n	8016fe6 <_realloc_r+0x34>
 8016fe0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016fe4:	d8f4      	bhi.n	8016fd0 <_realloc_r+0x1e>
 8016fe6:	4629      	mov	r1, r5
 8016fe8:	4640      	mov	r0, r8
 8016fea:	f7fd fce7 	bl	80149bc <_malloc_r>
 8016fee:	4607      	mov	r7, r0
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	d0ec      	beq.n	8016fce <_realloc_r+0x1c>
 8016ff4:	42b5      	cmp	r5, r6
 8016ff6:	462a      	mov	r2, r5
 8016ff8:	4621      	mov	r1, r4
 8016ffa:	bf28      	it	cs
 8016ffc:	4632      	movcs	r2, r6
 8016ffe:	f7fc fe74 	bl	8013cea <memcpy>
 8017002:	4621      	mov	r1, r4
 8017004:	4640      	mov	r0, r8
 8017006:	f7fd fc65 	bl	80148d4 <_free_r>
 801700a:	463c      	mov	r4, r7
 801700c:	e7e0      	b.n	8016fd0 <_realloc_r+0x1e>

0801700e <__ascii_wctomb>:
 801700e:	4603      	mov	r3, r0
 8017010:	4608      	mov	r0, r1
 8017012:	b141      	cbz	r1, 8017026 <__ascii_wctomb+0x18>
 8017014:	2aff      	cmp	r2, #255	@ 0xff
 8017016:	d904      	bls.n	8017022 <__ascii_wctomb+0x14>
 8017018:	228a      	movs	r2, #138	@ 0x8a
 801701a:	601a      	str	r2, [r3, #0]
 801701c:	f04f 30ff 	mov.w	r0, #4294967295
 8017020:	4770      	bx	lr
 8017022:	700a      	strb	r2, [r1, #0]
 8017024:	2001      	movs	r0, #1
 8017026:	4770      	bx	lr

08017028 <fiprintf>:
 8017028:	b40e      	push	{r1, r2, r3}
 801702a:	b503      	push	{r0, r1, lr}
 801702c:	4601      	mov	r1, r0
 801702e:	ab03      	add	r3, sp, #12
 8017030:	4805      	ldr	r0, [pc, #20]	@ (8017048 <fiprintf+0x20>)
 8017032:	f853 2b04 	ldr.w	r2, [r3], #4
 8017036:	6800      	ldr	r0, [r0, #0]
 8017038:	9301      	str	r3, [sp, #4]
 801703a:	f7ff f9af 	bl	801639c <_vfiprintf_r>
 801703e:	b002      	add	sp, #8
 8017040:	f85d eb04 	ldr.w	lr, [sp], #4
 8017044:	b003      	add	sp, #12
 8017046:	4770      	bx	lr
 8017048:	24000194 	.word	0x24000194

0801704c <abort>:
 801704c:	b508      	push	{r3, lr}
 801704e:	2006      	movs	r0, #6
 8017050:	f000 f834 	bl	80170bc <raise>
 8017054:	2001      	movs	r0, #1
 8017056:	f7f0 ff2e 	bl	8007eb6 <_exit>

0801705a <_malloc_usable_size_r>:
 801705a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801705e:	1f18      	subs	r0, r3, #4
 8017060:	2b00      	cmp	r3, #0
 8017062:	bfbc      	itt	lt
 8017064:	580b      	ldrlt	r3, [r1, r0]
 8017066:	18c0      	addlt	r0, r0, r3
 8017068:	4770      	bx	lr

0801706a <_raise_r>:
 801706a:	291f      	cmp	r1, #31
 801706c:	b538      	push	{r3, r4, r5, lr}
 801706e:	4605      	mov	r5, r0
 8017070:	460c      	mov	r4, r1
 8017072:	d904      	bls.n	801707e <_raise_r+0x14>
 8017074:	2316      	movs	r3, #22
 8017076:	6003      	str	r3, [r0, #0]
 8017078:	f04f 30ff 	mov.w	r0, #4294967295
 801707c:	bd38      	pop	{r3, r4, r5, pc}
 801707e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017080:	b112      	cbz	r2, 8017088 <_raise_r+0x1e>
 8017082:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017086:	b94b      	cbnz	r3, 801709c <_raise_r+0x32>
 8017088:	4628      	mov	r0, r5
 801708a:	f000 f831 	bl	80170f0 <_getpid_r>
 801708e:	4622      	mov	r2, r4
 8017090:	4601      	mov	r1, r0
 8017092:	4628      	mov	r0, r5
 8017094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017098:	f000 b818 	b.w	80170cc <_kill_r>
 801709c:	2b01      	cmp	r3, #1
 801709e:	d00a      	beq.n	80170b6 <_raise_r+0x4c>
 80170a0:	1c59      	adds	r1, r3, #1
 80170a2:	d103      	bne.n	80170ac <_raise_r+0x42>
 80170a4:	2316      	movs	r3, #22
 80170a6:	6003      	str	r3, [r0, #0]
 80170a8:	2001      	movs	r0, #1
 80170aa:	e7e7      	b.n	801707c <_raise_r+0x12>
 80170ac:	2100      	movs	r1, #0
 80170ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80170b2:	4620      	mov	r0, r4
 80170b4:	4798      	blx	r3
 80170b6:	2000      	movs	r0, #0
 80170b8:	e7e0      	b.n	801707c <_raise_r+0x12>
	...

080170bc <raise>:
 80170bc:	4b02      	ldr	r3, [pc, #8]	@ (80170c8 <raise+0xc>)
 80170be:	4601      	mov	r1, r0
 80170c0:	6818      	ldr	r0, [r3, #0]
 80170c2:	f7ff bfd2 	b.w	801706a <_raise_r>
 80170c6:	bf00      	nop
 80170c8:	24000194 	.word	0x24000194

080170cc <_kill_r>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	4d07      	ldr	r5, [pc, #28]	@ (80170ec <_kill_r+0x20>)
 80170d0:	2300      	movs	r3, #0
 80170d2:	4604      	mov	r4, r0
 80170d4:	4608      	mov	r0, r1
 80170d6:	4611      	mov	r1, r2
 80170d8:	602b      	str	r3, [r5, #0]
 80170da:	f7f0 fedc 	bl	8007e96 <_kill>
 80170de:	1c43      	adds	r3, r0, #1
 80170e0:	d102      	bne.n	80170e8 <_kill_r+0x1c>
 80170e2:	682b      	ldr	r3, [r5, #0]
 80170e4:	b103      	cbz	r3, 80170e8 <_kill_r+0x1c>
 80170e6:	6023      	str	r3, [r4, #0]
 80170e8:	bd38      	pop	{r3, r4, r5, pc}
 80170ea:	bf00      	nop
 80170ec:	24001b0c 	.word	0x24001b0c

080170f0 <_getpid_r>:
 80170f0:	f7f0 bec9 	b.w	8007e86 <_getpid>

080170f4 <_init>:
 80170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f6:	bf00      	nop
 80170f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170fa:	bc08      	pop	{r3}
 80170fc:	469e      	mov	lr, r3
 80170fe:	4770      	bx	lr

08017100 <_fini>:
 8017100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017102:	bf00      	nop
 8017104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017106:	bc08      	pop	{r3}
 8017108:	469e      	mov	lr, r3
 801710a:	4770      	bx	lr
