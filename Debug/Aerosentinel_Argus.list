
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f9c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08015270  08015270  00016270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080157c0  080157c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080157c8  080157c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080157cc  080157cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080157d0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b50  240001d8  080159a8  000171d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d28  080159a8  00017d28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000171d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a76a  00000000  00000000  00017206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004a31  00000000  00000000  00041970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022c8  00000000  00000000  000463a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b29  00000000  00000000  00048670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007586  00000000  00000000  0004a199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030901  00000000  00000000  0005171f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174b07  00000000  00000000  00082020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f6b27  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aa68  00000000  00000000  001f6b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  002015d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015254 	.word	0x08015254

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08015254 	.word	0x08015254

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <HAL_GPIO_EXTI_Callback>:
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000aa8:	d106      	bne.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x20>
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	4810      	ldr	r0, [pc, #64]	@ (8000af4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ab2:	f000 f829 	bl	8000b08 <PDEBUG>
 8000ab6:	e017      	b.n	8000ae8 <HAL_GPIO_EXTI_Callback+0x50>
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000abe:	d106      	bne.n	8000ace <HAL_GPIO_EXTI_Callback+0x36>
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <HAL_GPIO_EXTI_Callback+0x64>)
 8000ac8:	f000 f81e 	bl	8000b08 <PDEBUG>
 8000acc:	e00c      	b.n	8000ae8 <HAL_GPIO_EXTI_Callback+0x50>
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d103      	bne.n	8000adc <HAL_GPIO_EXTI_Callback+0x44>
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e005      	b.n	8000ae8 <HAL_GPIO_EXTI_Callback+0x50>
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	2b20      	cmp	r3, #32
 8000ae0:	d102      	bne.n	8000ae8 <HAL_GPIO_EXTI_Callback+0x50>
 8000ae2:	4808      	ldr	r0, [pc, #32]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ae4:	f000 f810 	bl	8000b08 <PDEBUG>
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	240001f6 	.word	0x240001f6
 8000af4:	08015270 	.word	0x08015270
 8000af8:	240001f5 	.word	0x240001f5
 8000afc:	08015284 	.word	0x08015284
 8000b00:	240001f4 	.word	0x240001f4
 8000b04:	08015298 	.word	0x08015298

08000b08 <PDEBUG>:
 8000b08:	b40f      	push	{r0, r1, r2, r3}
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	b004      	add	sp, #16
 8000b18:	4770      	bx	lr

08000b1a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b22:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b26:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d013      	beq.n	8000b5a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b32:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b36:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b3a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00b      	beq.n	8000b5a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b42:	e000      	b.n	8000b46 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b44:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b46:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f9      	beq.n	8000b44 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b5a:	687b      	ldr	r3, [r7, #4]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
	int i=0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e009      	b.n	8000b92 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	60ba      	str	r2, [r7, #8]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffc7 	bl	8000b1a <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dbf1      	blt.n	8000b7e <_write+0x16>
	}
	return len;
 8000b9a:	687b      	ldr	r3, [r7, #4]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ba8:	f001 fae8 	bl	800217c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f002 fd36 	bl	800361c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f84a 	bl	8000c48 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bb4:	f000 f8b8 	bl	8000d28 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f001 f994 	bl	8001ee4 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000bbc:	f000 fa8a 	bl	80010d4 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8000bc0:	f000 f8e2 	bl	8000d88 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bc4:	f000 f9c6 	bl	8000f54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bc8:	f000 fa04 	bl	8000fd4 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000bcc:	f000 fa42 	bl	8001054 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000bd0:	f000 fa9e 	bl	8001110 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bd4:	f000 faf2 	bl	80011bc <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bd8:	f000 fb9c 	bl	8001314 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bdc:	f000 fc5e 	bl	800149c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be0:	f000 fcb6 	bl	8001550 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000be4:	f000 fd0e 	bl	8001604 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000be8:	f000 fd66 	bl	80016b8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bec:	f000 fdbe 	bl	800176c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000bf0:	f000 fe4c 	bl	800188c <MX_TIM12_Init>
  MX_TIM15_Init();
 8000bf4:	f000 fea4 	bl	8001940 <MX_TIM15_Init>
  MX_UART4_Init();
 8000bf8:	f000 ff28 	bl	8001a4c <MX_UART4_Init>
  MX_UART5_Init();
 8000bfc:	f000 ff72 	bl	8001ae4 <MX_UART5_Init>
  MX_UART7_Init();
 8000c00:	f000 ffbc 	bl	8001b7c <MX_UART7_Init>
  MX_UART8_Init();
 8000c04:	f001 f806 	bl	8001c14 <MX_UART8_Init>
  MX_USART1_Init();
 8000c08:	f001 f852 	bl	8001cb0 <MX_USART1_Init>
  MX_USART2_Init();
 8000c0c:	f001 f8ae 	bl	8001d6c <MX_USART2_Init>
  MX_USART3_Init();
 8000c10:	f001 f90a 	bl	8001e28 <MX_USART3_Init>
  MX_ADC2_Init();
 8000c14:	f000 f934 	bl	8000e80 <MX_ADC2_Init>
  MX_SPI4_Init();
 8000c18:	f000 fb26 	bl	8001268 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000c1c:	f00f fe8e 	bl	801093c <MX_FATFS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++; //Increment count variable
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <main+0x9c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <main+0x9c>)
 8000c28:	6013      	str	r3, [r2, #0]
	  printf("Hello World from Aerosentinel Argus Navigation Module! Count =%lu \n", count); // Hello World Test
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <main+0x9c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <main+0xa0>)
 8000c32:	f010 ff83 	bl	8011b3c <iprintf>
	  HAL_Delay(250);
 8000c36:	20fa      	movs	r0, #250	@ 0xfa
 8000c38:	f002 fd82 	bl	8003740 <HAL_Delay>
	  count++; //Increment count variable
 8000c3c:	bf00      	nop
 8000c3e:	e7ef      	b.n	8000c20 <main+0x7c>
 8000c40:	24000bb8 	.word	0x24000bb8
 8000c44:	080152f0 	.word	0x080152f0

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09c      	sub	sp, #112	@ 0x70
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	224c      	movs	r2, #76	@ 0x4c
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f011 f87a 	bl	8011d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2220      	movs	r2, #32
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f011 f874 	bl	8011d50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f006 fa0f 	bl	800708c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <SystemClock_Config+0xdc>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000d24 <SystemClock_Config+0xdc>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	4b28      	ldr	r3, [pc, #160]	@ (8000d24 <SystemClock_Config+0xdc>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c8e:	bf00      	nop
 8000c90:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <SystemClock_Config+0xdc>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c9c:	d1f8      	bne.n	8000c90 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cac:	2302      	movs	r3, #2
 8000cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fa13 	bl	8007100 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ce0:	f001 fa78 	bl	80021d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	233f      	movs	r3, #63	@ 0x3f
 8000ce6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf8:	2340      	movs	r3, #64	@ 0x40
 8000cfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d02:	2340      	movs	r3, #64	@ 0x40
 8000d04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f006 fdd2 	bl	80078b4 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d16:	f001 fa5d 	bl	80021d4 <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3770      	adds	r7, #112	@ 0x70
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	58024800 	.word	0x58024800

08000d28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ae      	sub	sp, #184	@ 0xb8
 8000d2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	22b8      	movs	r2, #184	@ 0xb8
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f011 f80b 	bl	8011d50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d5a:	23c0      	movs	r3, #192	@ 0xc0
 8000d5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f007 f92c 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000d7a:	f001 fa2b 	bl	80021d4 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	37b8      	adds	r7, #184	@ 0xb8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2224      	movs	r2, #36	@ 0x24
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f010 ffd5 	bl	8011d50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000da6:	4b32      	ldr	r3, [pc, #200]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000da8:	4a32      	ldr	r2, [pc, #200]	@ (8000e74 <MX_ADC1_Init+0xec>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000dac:	4b30      	ldr	r3, [pc, #192]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000db2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000db4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de6:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dec:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0c:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000e0e:	f002 ff01 	bl	8003c14 <HAL_ADC_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e18:	f001 f9dc 	bl	80021d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4812      	ldr	r0, [pc, #72]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000e28:	f003 ff40 	bl	8004cac <HAL_ADCEx_MultiModeConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e32:	f001 f9cf 	bl	80021d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <MX_ADC1_Init+0xf0>)
 8000e38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <MX_ADC1_Init+0xf4>)
 8000e44:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e46:	2304      	movs	r3, #4
 8000e48:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_ADC1_Init+0xe8>)
 8000e5a:	f003 f8e3 	bl	8004024 <HAL_ADC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000e64:	f001 f9b6 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	240001f8 	.word	0x240001f8
 8000e74:	40022000 	.word	0x40022000
 8000e78:	10c00010 	.word	0x10c00010
 8000e7c:	47ff0000 	.word	0x47ff0000

08000e80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2224      	movs	r2, #36	@ 0x24
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f010 ff5f 	bl	8011d50 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000e94:	4a2c      	ldr	r2, [pc, #176]	@ (8000f48 <MX_ADC2_Init+0xc8>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000e9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eac:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ef8:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000efa:	f002 fe8b 	bl	8003c14 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000f04:	f001 f966 	bl	80021d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <MX_ADC2_Init+0xcc>)
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_ADC2_Init+0xd0>)
 8000f16:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MX_ADC2_Init+0xc4>)
 8000f2c:	f003 f87a 	bl	8004024 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000f36:	f001 f94d 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	@ 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	24000268 	.word	0x24000268
 8000f48:	40022100 	.word	0x40022100
 8000f4c:	14f00020 	.word	0x14f00020
 8000f50:	47ff0000 	.word	0x47ff0000

08000f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <MX_I2C1_Init+0x78>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <MX_I2C1_Init+0x7c>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000f90:	f005 f85c 	bl	800604c <HAL_I2C_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f9a:	f001 f91b 	bl	80021d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000fa2:	f005 ffdc 	bl	8006f5e <HAL_I2CEx_ConfigAnalogFilter>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fac:	f001 f912 	bl	80021d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_I2C1_Init+0x74>)
 8000fb4:	f006 f81e 	bl	8006ff4 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fbe:	f001 f909 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	240002d8 	.word	0x240002d8
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	00506682 	.word	0x00506682

08000fd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_I2C2_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	@ (800104c <MX_I2C2_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00506682;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_I2C2_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <MX_I2C2_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_I2C2_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_I2C2_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_I2C2_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_I2C2_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_I2C2_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_I2C2_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_I2C2_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <MX_I2C2_Init+0x74>)
 8001010:	f005 f81c 	bl	800604c <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800101a:	f001 f8db 	bl	80021d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <MX_I2C2_Init+0x74>)
 8001022:	f005 ff9c 	bl	8006f5e <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800102c:	f001 f8d2 	bl	80021d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_I2C2_Init+0x74>)
 8001034:	f005 ffde 	bl	8006ff4 <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800103e:	f001 f8c9 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2400032c 	.word	0x2400032c
 800104c:	40005800 	.word	0x40005800
 8001050:	00506682 	.word	0x00506682

08001054 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <MX_I2C4_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <MX_I2C4_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00505D8D;
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MX_I2C4_Init+0x74>)
 8001060:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <MX_I2C4_Init+0x7c>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <MX_I2C4_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_I2C4_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <MX_I2C4_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_I2C4_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_I2C4_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_I2C4_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_I2C4_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <MX_I2C4_Init+0x74>)
 8001090:	f004 ffdc 	bl	800604c <HAL_I2C_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800109a:	f001 f89b 	bl	80021d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800109e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010a2:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <MX_I2C4_Init+0x74>)
 80010a4:	f005 ff5b 	bl	8006f5e <HAL_I2CEx_ConfigAnalogFilter>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80010ae:	f001 f891 	bl	80021d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_I2C4_Init+0x74>)
 80010b6:	f005 ff9d 	bl	8006ff4 <HAL_I2CEx_ConfigDigitalFilter>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80010c0:	f001 f888 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24000380 	.word	0x24000380
 80010cc:	58001c00 	.word	0x58001c00
 80010d0:	00505d8d 	.word	0x00505d8d

080010d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <MX_SDMMC1_SD_Init+0x34>)
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <MX_SDMMC1_SD_Init+0x38>)
 80010dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <MX_SDMMC1_SD_Init+0x34>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <MX_SDMMC1_SD_Init+0x34>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <MX_SDMMC1_SD_Init+0x34>)
 80010ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <MX_SDMMC1_SD_Init+0x34>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <MX_SDMMC1_SD_Init+0x34>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	240003d4 	.word	0x240003d4
 800110c:	52007000 	.word	0x52007000

08001110 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001116:	4a28      	ldr	r2, [pc, #160]	@ (80011b8 <MX_SPI1_Init+0xa8>)
 8001118:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800111c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001120:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800112a:	2207      	movs	r2, #7
 800112c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800113c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001140:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_SPI1_Init+0xa4>)
 80011a0:	f00a feac 	bl	800befc <HAL_SPI_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80011aa:	f001 f813 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000450 	.word	0x24000450
 80011b8:	40013000 	.word	0x40013000

080011bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011c2:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <MX_SPI2_Init+0xa8>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_7BIT;
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011d6:	2206      	movs	r2, #6
 80011d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800120e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800124c:	f00a fe56 	bl	800befc <HAL_SPI_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001256:	f000 ffbd 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	240004d8 	.word	0x240004d8
 8001264:	40003800 	.word	0x40003800

08001268 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <MX_SPI4_Init+0xa4>)
 800126e:	4a28      	ldr	r2, [pc, #160]	@ (8001310 <MX_SPI4_Init+0xa8>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <MX_SPI4_Init+0xa4>)
 8001274:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001278:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <MX_SPI4_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <MX_SPI4_Init+0xa4>)
 8001282:	2203      	movs	r2, #3
 8001284:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_SPI4_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <MX_SPI4_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <MX_SPI4_Init+0xa4>)
 8001294:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001298:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_SPI4_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012be:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_SPI4_Init+0xa4>)
 80012f8:	f00a fe00 	bl	800befc <HAL_SPI_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001302:	f000 ff67 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24000560 	.word	0x24000560
 8001310:	40013400 	.word	0x40013400

08001314 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b09c      	sub	sp, #112	@ 0x70
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001334:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2234      	movs	r2, #52	@ 0x34
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f010 fcfe 	bl	8011d50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001354:	4b4f      	ldr	r3, [pc, #316]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001356:	4a50      	ldr	r2, [pc, #320]	@ (8001498 <MX_TIM1_Init+0x184>)
 8001358:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800135a:	4b4e      	ldr	r3, [pc, #312]	@ (8001494 <MX_TIM1_Init+0x180>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001366:	4b4b      	ldr	r3, [pc, #300]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800136c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b49      	ldr	r3, [pc, #292]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001374:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b46      	ldr	r3, [pc, #280]	@ (8001494 <MX_TIM1_Init+0x180>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001380:	4844      	ldr	r0, [pc, #272]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001382:	f00a fefa 	bl	800c17a <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800138c:	f000 ff22 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001394:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800139a:	4619      	mov	r1, r3
 800139c:	483d      	ldr	r0, [pc, #244]	@ (8001494 <MX_TIM1_Init+0x180>)
 800139e:	f00b f8af 	bl	800c500 <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013a8:	f000 ff14 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ac:	4839      	ldr	r0, [pc, #228]	@ (8001494 <MX_TIM1_Init+0x180>)
 80013ae:	f00a ff3b 	bl	800c228 <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013b8:	f000 ff0c 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013cc:	4619      	mov	r1, r3
 80013ce:	4831      	ldr	r0, [pc, #196]	@ (8001494 <MX_TIM1_Init+0x180>)
 80013d0:	f00b fdb4 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013da:	f000 fefb 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	@ 0x60
 80013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4824      	ldr	r0, [pc, #144]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001404:	f00a ff68 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800140e:	f000 fee1 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001412:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001416:	2204      	movs	r2, #4
 8001418:	4619      	mov	r1, r3
 800141a:	481e      	ldr	r0, [pc, #120]	@ (8001494 <MX_TIM1_Init+0x180>)
 800141c:	f00a ff5c 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001426:	f000 fed5 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800142e:	2208      	movs	r2, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4818      	ldr	r0, [pc, #96]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001434:	f00a ff50 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800143e:	f000 fec9 	bl	80021d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001456:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001464:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4807      	ldr	r0, [pc, #28]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001478:	f00b fdfc 	bl	800d074 <HAL_TIMEx_ConfigBreakDeadTime>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001482:	f000 fea7 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001486:	4803      	ldr	r0, [pc, #12]	@ (8001494 <MX_TIM1_Init+0x180>)
 8001488:	f001 fb1a 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 800148c:	bf00      	nop
 800148e:	3770      	adds	r7, #112	@ 0x70
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	240005e8 	.word	0x240005e8
 8001498:	40010000 	.word	0x40010000

0800149c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <MX_TIM2_Init+0xb0>)
 80014c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <MX_TIM2_Init+0xb0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <MX_TIM2_Init+0xb0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <MX_TIM2_Init+0xb0>)
 80014d6:	f04f 32ff 	mov.w	r2, #4294967295
 80014da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_TIM2_Init+0xb0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_TIM2_Init+0xb0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014e8:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_TIM2_Init+0xb0>)
 80014ea:	f00a fe9d 	bl	800c228 <HAL_TIM_PWM_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80014f4:	f000 fe6e 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4811      	ldr	r0, [pc, #68]	@ (800154c <MX_TIM2_Init+0xb0>)
 8001508:	f00b fd18 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001512:	f000 fe5f 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001516:	2360      	movs	r3, #96	@ 0x60
 8001518:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <MX_TIM2_Init+0xb0>)
 800152e:	f00a fed3 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001538:	f000 fe4c 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <MX_TIM2_Init+0xb0>)
 800153e:	f001 fabf 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	@ 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24000634 	.word	0x24000634

08001550 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001574:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <MX_TIM3_Init+0xac>)
 8001576:	4a22      	ldr	r2, [pc, #136]	@ (8001600 <MX_TIM3_Init+0xb0>)
 8001578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <MX_TIM3_Init+0xac>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <MX_TIM3_Init+0xac>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001586:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <MX_TIM3_Init+0xac>)
 8001588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800158c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_TIM3_Init+0xac>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <MX_TIM3_Init+0xac>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <MX_TIM3_Init+0xac>)
 800159c:	f00a fe44 	bl	800c228 <HAL_TIM_PWM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80015a6:	f000 fe15 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4810      	ldr	r0, [pc, #64]	@ (80015fc <MX_TIM3_Init+0xac>)
 80015ba:	f00b fcbf 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80015c4:	f000 fe06 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c8:	2360      	movs	r3, #96	@ 0x60
 80015ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4807      	ldr	r0, [pc, #28]	@ (80015fc <MX_TIM3_Init+0xac>)
 80015e0:	f00a fe7a 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80015ea:	f000 fdf3 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ee:	4803      	ldr	r0, [pc, #12]	@ (80015fc <MX_TIM3_Init+0xac>)
 80015f0:	f001 fa66 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	24000680 	.word	0x24000680
 8001600:	40000400 	.word	0x40000400

08001604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <MX_TIM4_Init+0xac>)
 800162a:	4a22      	ldr	r2, [pc, #136]	@ (80016b4 <MX_TIM4_Init+0xb0>)
 800162c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <MX_TIM4_Init+0xac>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <MX_TIM4_Init+0xac>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <MX_TIM4_Init+0xac>)
 800163c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001640:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <MX_TIM4_Init+0xac>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_TIM4_Init+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800164e:	4818      	ldr	r0, [pc, #96]	@ (80016b0 <MX_TIM4_Init+0xac>)
 8001650:	f00a fdea 	bl	800c228 <HAL_TIM_PWM_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800165a:	f000 fdbb 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4810      	ldr	r0, [pc, #64]	@ (80016b0 <MX_TIM4_Init+0xac>)
 800166e:	f00b fc65 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001678:	f000 fdac 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167c:	2360      	movs	r3, #96	@ 0x60
 800167e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <MX_TIM4_Init+0xac>)
 8001694:	f00a fe20 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800169e:	f000 fd99 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <MX_TIM4_Init+0xac>)
 80016a4:	f001 fa0c 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	@ 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	240006cc 	.word	0x240006cc
 80016b4:	40000800 	.word	0x40000800

080016b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ca:	463b      	mov	r3, r7
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016dc:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <MX_TIM5_Init+0xac>)
 80016de:	4a22      	ldr	r2, [pc, #136]	@ (8001768 <MX_TIM5_Init+0xb0>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <MX_TIM5_Init+0xac>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <MX_TIM5_Init+0xac>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_TIM5_Init+0xac>)
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <MX_TIM5_Init+0xac>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_TIM5_Init+0xac>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001702:	4818      	ldr	r0, [pc, #96]	@ (8001764 <MX_TIM5_Init+0xac>)
 8001704:	f00a fd90 	bl	800c228 <HAL_TIM_PWM_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800170e:	f000 fd61 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	4810      	ldr	r0, [pc, #64]	@ (8001764 <MX_TIM5_Init+0xac>)
 8001722:	f00b fc0b 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800172c:	f000 fd52 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001730:	2360      	movs	r3, #96	@ 0x60
 8001732:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	4807      	ldr	r0, [pc, #28]	@ (8001764 <MX_TIM5_Init+0xac>)
 8001748:	f00a fdc6 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001752:	f000 fd3f 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001756:	4803      	ldr	r0, [pc, #12]	@ (8001764 <MX_TIM5_Init+0xac>)
 8001758:	f001 f9b2 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	24000718 	.word	0x24000718
 8001768:	40000c00 	.word	0x40000c00

0800176c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b098      	sub	sp, #96	@ 0x60
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001772:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2234      	movs	r2, #52	@ 0x34
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f010 fad9 	bl	8011d50 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800179e:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017a0:	4a39      	ldr	r2, [pc, #228]	@ (8001888 <MX_TIM8_Init+0x11c>)
 80017a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017a4:	4b37      	ldr	r3, [pc, #220]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b36      	ldr	r3, [pc, #216]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017b0:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017be:	4b31      	ldr	r3, [pc, #196]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017ca:	482e      	ldr	r0, [pc, #184]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017cc:	f00a fd2c 	bl	800c228 <HAL_TIM_PWM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 fcfd 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017ea:	4619      	mov	r1, r3
 80017ec:	4825      	ldr	r0, [pc, #148]	@ (8001884 <MX_TIM8_Init+0x118>)
 80017ee:	f00b fba5 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80017f8:	f000 fcec 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fc:	2360      	movs	r3, #96	@ 0x60
 80017fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001804:	2300      	movs	r3, #0
 8001806:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	4818      	ldr	r0, [pc, #96]	@ (8001884 <MX_TIM8_Init+0x118>)
 8001822:	f00a fd59 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800182c:	f000 fcd2 	bl	80021d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001852:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	@ (8001884 <MX_TIM8_Init+0x118>)
 8001866:	f00b fc05 	bl	800d074 <HAL_TIMEx_ConfigBreakDeadTime>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001870:	f000 fcb0 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <MX_TIM8_Init+0x118>)
 8001876:	f001 f923 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 800187a:	bf00      	nop
 800187c:	3760      	adds	r7, #96	@ 0x60
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	24000764 	.word	0x24000764
 8001888:	40010400 	.word	0x40010400

0800188c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	615a      	str	r2, [r3, #20]
 80018ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018b2:	4a22      	ldr	r2, [pc, #136]	@ (800193c <MX_TIM12_Init+0xb0>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80018d6:	4818      	ldr	r0, [pc, #96]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018d8:	f00a fca6 	bl	800c228 <HAL_TIM_PWM_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80018e2:	f000 fc77 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4810      	ldr	r0, [pc, #64]	@ (8001938 <MX_TIM12_Init+0xac>)
 80018f6:	f00b fb21 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001900:	f000 fc68 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001904:	2360      	movs	r3, #96	@ 0x60
 8001906:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	@ (8001938 <MX_TIM12_Init+0xac>)
 800191c:	f00a fcdc 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8001926:	f000 fc55 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800192a:	4803      	ldr	r0, [pc, #12]	@ (8001938 <MX_TIM12_Init+0xac>)
 800192c:	f001 f8c8 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	@ 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	240007b0 	.word	0x240007b0
 800193c:	40001800 	.word	0x40001800

08001940 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b098      	sub	sp, #96	@ 0x60
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001952:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2234      	movs	r2, #52	@ 0x34
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f010 f9ef 	bl	8011d50 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <MX_TIM15_Init+0x104>)
 8001974:	4a34      	ldr	r2, [pc, #208]	@ (8001a48 <MX_TIM15_Init+0x108>)
 8001976:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001978:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <MX_TIM15_Init+0x104>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <MX_TIM15_Init+0x104>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001984:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <MX_TIM15_Init+0x104>)
 8001986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800198a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <MX_TIM15_Init+0x104>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001992:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <MX_TIM15_Init+0x104>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <MX_TIM15_Init+0x104>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800199e:	4829      	ldr	r0, [pc, #164]	@ (8001a44 <MX_TIM15_Init+0x104>)
 80019a0:	f00a fc42 	bl	800c228 <HAL_TIM_PWM_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80019aa:	f000 fc13 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019ba:	4619      	mov	r1, r3
 80019bc:	4821      	ldr	r0, [pc, #132]	@ (8001a44 <MX_TIM15_Init+0x104>)
 80019be:	f00b fabd 	bl	800cf3c <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80019c8:	f000 fc04 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	2360      	movs	r3, #96	@ 0x60
 80019ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4814      	ldr	r0, [pc, #80]	@ (8001a44 <MX_TIM15_Init+0x104>)
 80019f2:	f00a fc71 	bl	800c2d8 <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80019fc:	f000 fbea 	bl	80021d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <MX_TIM15_Init+0x104>)
 8001a28:	f00b fb24 	bl	800d074 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001a32:	f000 fbcf 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a36:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <MX_TIM15_Init+0x104>)
 8001a38:	f001 f842 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 8001a3c:	bf00      	nop
 8001a3e:	3760      	adds	r7, #96	@ 0x60
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	240007fc 	.word	0x240007fc
 8001a48:	40014000 	.word	0x40014000

08001a4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a50:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a52:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <MX_UART4_Init+0x94>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a56:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a88:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a94:	4811      	ldr	r0, [pc, #68]	@ (8001adc <MX_UART4_Init+0x90>)
 8001a96:	f00b fb79 	bl	800d18c <HAL_UART_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001aa0:	f000 fb98 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	480d      	ldr	r0, [pc, #52]	@ (8001adc <MX_UART4_Init+0x90>)
 8001aa8:	f00d f8be 	bl	800ec28 <HAL_UARTEx_SetTxFifoThreshold>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001ab2:	f000 fb8f 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <MX_UART4_Init+0x90>)
 8001aba:	f00d f8f3 	bl	800eca4 <HAL_UARTEx_SetRxFifoThreshold>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001ac4:	f000 fb86 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ac8:	4804      	ldr	r0, [pc, #16]	@ (8001adc <MX_UART4_Init+0x90>)
 8001aca:	f00d f874 	bl	800ebb6 <HAL_UARTEx_DisableFifoMode>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ad4:	f000 fb7e 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	24000848 	.word	0x24000848
 8001ae0:	40004c00 	.word	0x40004c00

08001ae4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001aea:	4a23      	ldr	r2, [pc, #140]	@ (8001b78 <MX_UART5_Init+0x94>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b26:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b2c:	4811      	ldr	r0, [pc, #68]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b2e:	f00b fb2d 	bl	800d18c <HAL_UART_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001b38:	f000 fb4c 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b40:	f00d f872 	bl	800ec28 <HAL_UARTEx_SetTxFifoThreshold>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001b4a:	f000 fb43 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b52:	f00d f8a7 	bl	800eca4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001b5c:	f000 fb3a 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001b60:	4804      	ldr	r0, [pc, #16]	@ (8001b74 <MX_UART5_Init+0x90>)
 8001b62:	f00d f828 	bl	800ebb6 <HAL_UARTEx_DisableFifoMode>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001b6c:	f000 fb32 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	240008dc 	.word	0x240008dc
 8001b78:	40005000 	.word	0x40005000

08001b7c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b80:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001b82:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <MX_UART7_Init+0x94>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b86:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001bc4:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bc6:	f00b fae1 	bl	800d18c <HAL_UART_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f000 fb00 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bd8:	f00d f826 	bl	800ec28 <HAL_UARTEx_SetTxFifoThreshold>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001be2:	f000 faf7 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4808      	ldr	r0, [pc, #32]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bea:	f00d f85b 	bl	800eca4 <HAL_UARTEx_SetRxFifoThreshold>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001bf4:	f000 faee 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_UART7_Init+0x90>)
 8001bfa:	f00c ffdc 	bl	800ebb6 <HAL_UARTEx_DisableFifoMode>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001c04:	f000 fae6 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	24000970 	.word	0x24000970
 8001c10:	40007800 	.word	0x40007800

08001c14 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001c18:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c1a:	4a24      	ldr	r2, [pc, #144]	@ (8001cac <MX_UART8_Init+0x98>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001c1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c40:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c44:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001c5e:	4812      	ldr	r0, [pc, #72]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c60:	f00b fa94 	bl	800d18c <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8001c6a:	f000 fab3 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	480d      	ldr	r0, [pc, #52]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c72:	f00c ffd9 	bl	800ec28 <HAL_UARTEx_SetTxFifoThreshold>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8001c7c:	f000 faaa 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c80:	2100      	movs	r1, #0
 8001c82:	4809      	ldr	r0, [pc, #36]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c84:	f00d f80e 	bl	800eca4 <HAL_UARTEx_SetRxFifoThreshold>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8001c8e:	f000 faa1 	bl	80021d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <MX_UART8_Init+0x94>)
 8001c94:	f00c ff8f 	bl	800ebb6 <HAL_UARTEx_DisableFifoMode>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8001c9e:	f000 fa99 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	24000a04 	.word	0x24000a04
 8001cac:	40007c00 	.word	0x40007c00

08001cb0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d68 <MX_USART1_Init+0xb8>)
 8001cb8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001cba:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001cc2:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001cc8:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001cce:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001cd4:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001cda:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001ce0:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001cf8:	481a      	ldr	r0, [pc, #104]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001cfa:	f00d f85f 	bl	800edbc <HAL_USART_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001d04:	f000 fa66 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4816      	ldr	r0, [pc, #88]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001d0c:	f00d ff86 	bl	800fc1c <HAL_USARTEx_SetTxFifoThreshold>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001d16:	f000 fa5d 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001d1e:	f00d ffbb 	bl	800fc98 <HAL_USARTEx_SetRxFifoThreshold>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001d28:	f000 fa54 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001d30:	f00d fefe 	bl	800fb30 <HAL_USARTEx_ConfigNSS>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8001d3a:	f000 fa4b 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8001d3e:	4809      	ldr	r0, [pc, #36]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001d40:	f00d ff33 	bl	800fbaa <HAL_USARTEx_DisableFifoMode>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8001d4a:	f000 fa43 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <MX_USART1_Init+0xb4>)
 8001d50:	f00d fe99 	bl	800fa86 <HAL_USARTEx_EnableSlaveMode>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8001d5a:	f000 fa3b 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	24000a98 	.word	0x24000a98
 8001d68:	40011000 	.word	0x40011000

08001d6c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d72:	4a2c      	ldr	r2, [pc, #176]	@ (8001e24 <MX_USART2_Init+0xb8>)
 8001d74:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001d7e:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001d84:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001d90:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001d96:	4b22      	ldr	r3, [pc, #136]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001d9c:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001da2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001db4:	481a      	ldr	r0, [pc, #104]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001db6:	f00d f801 	bl	800edbc <HAL_USART_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8001dc0:	f000 fa08 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4816      	ldr	r0, [pc, #88]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001dc8:	f00d ff28 	bl	800fc1c <HAL_USARTEx_SetTxFifoThreshold>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8001dd2:	f000 f9ff 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4811      	ldr	r0, [pc, #68]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001dda:	f00d ff5d 	bl	800fc98 <HAL_USARTEx_SetRxFifoThreshold>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8001de4:	f000 f9f6 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8001de8:	2100      	movs	r1, #0
 8001dea:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001dec:	f00d fea0 	bl	800fb30 <HAL_USARTEx_ConfigNSS>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 8001df6:	f000 f9ed 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8001dfa:	4809      	ldr	r0, [pc, #36]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001dfc:	f00d fed5 	bl	800fbaa <HAL_USARTEx_DisableFifoMode>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 8001e06:	f000 f9e5 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_USART2_Init+0xb4>)
 8001e0c:	f00d fe3b 	bl	800fa86 <HAL_USARTEx_EnableSlaveMode>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART2_Init+0xae>
  {
    Error_Handler();
 8001e16:	f000 f9dd 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	24000af8 	.word	0x24000af8
 8001e24:	40004400 	.word	0x40004400

08001e28 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee0 <MX_USART3_Init+0xb8>)
 8001e30:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001e32:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e38:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001e3a:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001e40:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001e46:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001e52:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001e58:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001e70:	481a      	ldr	r0, [pc, #104]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e72:	f00c ffa3 	bl	800edbc <HAL_USART_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8001e7c:	f000 f9aa 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e80:	2100      	movs	r1, #0
 8001e82:	4816      	ldr	r0, [pc, #88]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e84:	f00d feca 	bl	800fc1c <HAL_USARTEx_SetTxFifoThreshold>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8001e8e:	f000 f9a1 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4811      	ldr	r0, [pc, #68]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001e96:	f00d feff 	bl	800fc98 <HAL_USARTEx_SetRxFifoThreshold>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001ea0:	f000 f998 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	480d      	ldr	r0, [pc, #52]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001ea8:	f00d fe42 	bl	800fb30 <HAL_USARTEx_ConfigNSS>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8001eb2:	f000 f98f 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001eb6:	4809      	ldr	r0, [pc, #36]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001eb8:	f00d fe77 	bl	800fbaa <HAL_USARTEx_DisableFifoMode>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8001ec2:	f000 f987 	bl	80021d4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_USART3_Init+0xb4>)
 8001ec8:	f00d fddd 	bl	800fa86 <HAL_USARTEx_EnableSlaveMode>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8001ed2:	f000 f97f 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	24000b58 	.word	0x24000b58
 8001ee0:	40004800 	.word	0x40004800

08001ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	4b9a      	ldr	r3, [pc, #616]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f00:	4a98      	ldr	r2, [pc, #608]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f0a:	4b96      	ldr	r3, [pc, #600]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f18:	4b92      	ldr	r3, [pc, #584]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1e:	4a91      	ldr	r2, [pc, #580]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f28:	4b8e      	ldr	r3, [pc, #568]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4b8b      	ldr	r3, [pc, #556]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3c:	4a89      	ldr	r2, [pc, #548]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f46:	4b87      	ldr	r3, [pc, #540]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b83      	ldr	r3, [pc, #524]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5a:	4a82      	ldr	r2, [pc, #520]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f64:	4b7f      	ldr	r3, [pc, #508]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	4b7c      	ldr	r3, [pc, #496]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f78:	4a7a      	ldr	r2, [pc, #488]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f82:	4b78      	ldr	r3, [pc, #480]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f90:	4b74      	ldr	r3, [pc, #464]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f96:	4a73      	ldr	r2, [pc, #460]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fa0:	4b70      	ldr	r3, [pc, #448]	@ (8002164 <MX_GPIO_Init+0x280>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	486d      	ldr	r0, [pc, #436]	@ (8002168 <MX_GPIO_Init+0x284>)
 8001fb4:	f004 f816 	bl	8005fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2110      	movs	r1, #16
 8001fbc:	486b      	ldr	r0, [pc, #428]	@ (800216c <MX_GPIO_Init+0x288>)
 8001fbe:	f004 f811 	bl	8005fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001fc8:	4869      	ldr	r0, [pc, #420]	@ (8002170 <MX_GPIO_Init+0x28c>)
 8001fca:	f004 f80b 	bl	8005fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001fce:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4864      	ldr	r0, [pc, #400]	@ (8002174 <MX_GPIO_Init+0x290>)
 8001fe4:	f003 fe3e 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	485a      	ldr	r0, [pc, #360]	@ (8002168 <MX_GPIO_Init+0x284>)
 8001ffe:	f003 fe31 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8002002:	2310      	movs	r3, #16
 8002004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	4853      	ldr	r0, [pc, #332]	@ (8002168 <MX_GPIO_Init+0x284>)
 800201a:	f003 fe23 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin;
 800201e:	2310      	movs	r3, #16
 8002020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002022:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	4851      	ldr	r0, [pc, #324]	@ (8002178 <MX_GPIO_Init+0x294>)
 8002034:	f003 fe16 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002038:	2302      	movs	r3, #2
 800203a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	484b      	ldr	r0, [pc, #300]	@ (8002178 <MX_GPIO_Init+0x294>)
 800204c:	f003 fe0a 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002050:	2308      	movs	r3, #8
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002054:	2303      	movs	r3, #3
 8002056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	4844      	ldr	r0, [pc, #272]	@ (8002174 <MX_GPIO_Init+0x290>)
 8002064:	f003 fdfe 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8002068:	2310      	movs	r3, #16
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	483b      	ldr	r0, [pc, #236]	@ (800216c <MX_GPIO_Init+0x288>)
 8002080:	f003 fdf0 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002084:	2304      	movs	r3, #4
 8002086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	4836      	ldr	r0, [pc, #216]	@ (8002170 <MX_GPIO_Init+0x28c>)
 8002098:	f003 fde4 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 800209c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	482d      	ldr	r0, [pc, #180]	@ (8002168 <MX_GPIO_Init+0x284>)
 80020b2:	f003 fdd7 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4619      	mov	r1, r3
 80020ce:	4828      	ldr	r0, [pc, #160]	@ (8002170 <MX_GPIO_Init+0x28c>)
 80020d0:	f003 fdc8 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020da:	2303      	movs	r3, #3
 80020dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	481f      	ldr	r0, [pc, #124]	@ (8002168 <MX_GPIO_Init+0x284>)
 80020ea:	f003 fdbb 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ee:	2308      	movs	r3, #8
 80020f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f2:	2303      	movs	r3, #3
 80020f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	481a      	ldr	r0, [pc, #104]	@ (800216c <MX_GPIO_Init+0x288>)
 8002102:	f003 fdaf 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin;
 8002106:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800210a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002114:	2302      	movs	r3, #2
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CSB_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	4814      	ldr	r0, [pc, #80]	@ (8002170 <MX_GPIO_Init+0x28c>)
 8002120:	f003 fda0 	bl	8005c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2009      	movs	r0, #9
 800212a:	f002 ff7c 	bl	8005026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800212e:	2009      	movs	r0, #9
 8002130:	f002 ff93 	bl	800505a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	200a      	movs	r0, #10
 800213a:	f002 ff74 	bl	8005026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800213e:	200a      	movs	r0, #10
 8002140:	f002 ff8b 	bl	800505a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800214a:	4809      	ldr	r0, [pc, #36]	@ (8002170 <MX_GPIO_Init+0x28c>)
 800214c:	f003 ff4a 	bl	8005fe4 <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	2110      	movs	r1, #16
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_GPIO_Init+0x288>)
 8002156:	f003 ff45 	bl	8005fe4 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	@ 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	58024400 	.word	0x58024400
 8002168:	58021000 	.word	0x58021000
 800216c:	58020000 	.word	0x58020000
 8002170:	58020400 	.word	0x58020400
 8002174:	58020800 	.word	0x58020800
 8002178:	58020c00 	.word	0x58020c00

0800217c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800218e:	f002 ff7f 	bl	8005090 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002196:	2300      	movs	r3, #0
 8002198:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800219e:	231f      	movs	r3, #31
 80021a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80021a2:	2387      	movs	r3, #135	@ 0x87
 80021a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80021aa:	2300      	movs	r3, #0
 80021ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021be:	463b      	mov	r3, r7
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 ff9d 	bl	8005100 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021c6:	2004      	movs	r0, #4
 80021c8:	f002 ff7a 	bl	80050c0 <HAL_MPU_Enable>

}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <Error_Handler+0x8>

080021e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_MspInit+0x30>)
 80021e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ec:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <HAL_MspInit+0x30>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_MspInit+0x30>)
 80021f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	58024400 	.word	0x58024400

08002214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a39      	ldr	r2, [pc, #228]	@ (8002318 <HAL_ADC_MspInit+0x104>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d133      	bne.n	800229e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002236:	4b39      	ldr	r3, [pc, #228]	@ (800231c <HAL_ADC_MspInit+0x108>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	4a37      	ldr	r2, [pc, #220]	@ (800231c <HAL_ADC_MspInit+0x108>)
 800223e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <HAL_ADC_MspInit+0x108>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10e      	bne.n	8002266 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002248:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 800224a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800224e:	4a34      	ldr	r2, [pc, #208]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 8002250:	f043 0320 	orr.w	r3, r3, #32
 8002254:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002258:	4b31      	ldr	r3, [pc, #196]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 800225a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002266:	4b2e      	ldr	r3, [pc, #184]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 8002268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226c:	4a2c      	ldr	r2, [pc, #176]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002276:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 8002278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002284:	2330      	movs	r3, #48	@ 0x30
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002288:	2303      	movs	r3, #3
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	4823      	ldr	r0, [pc, #140]	@ (8002324 <HAL_ADC_MspInit+0x110>)
 8002298:	f003 fce4 	bl	8005c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800229c:	e037      	b.n	800230e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a21      	ldr	r2, [pc, #132]	@ (8002328 <HAL_ADC_MspInit+0x114>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d132      	bne.n	800230e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_ADC_MspInit+0x108>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_ADC_MspInit+0x108>)
 80022b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022b2:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <HAL_ADC_MspInit+0x108>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d10e      	bne.n	80022d8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022c0:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022c2:	f043 0320 	orr.w	r3, r3, #32
 80022c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022f6:	2303      	movs	r3, #3
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	4808      	ldr	r0, [pc, #32]	@ (800232c <HAL_ADC_MspInit+0x118>)
 800230a:	f003 fcab 	bl	8005c64 <HAL_GPIO_Init>
}
 800230e:	bf00      	nop
 8002310:	3730      	adds	r7, #48	@ 0x30
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40022000 	.word	0x40022000
 800231c:	24000bbc 	.word	0x24000bbc
 8002320:	58024400 	.word	0x58024400
 8002324:	58020800 	.word	0x58020800
 8002328:	40022100 	.word	0x40022100
 800232c:	58020400 	.word	0x58020400

08002330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0bc      	sub	sp, #240	@ 0xf0
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	22b8      	movs	r2, #184	@ 0xb8
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f00f fcfd 	bl	8011d50 <memset>
  if(hi2c->Instance==I2C1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7c      	ldr	r2, [pc, #496]	@ (800254c <HAL_I2C_MspInit+0x21c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d147      	bne.n	80023f0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002360:	f04f 0208 	mov.w	r2, #8
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002372:	f107 0320 	add.w	r3, r7, #32
 8002376:	4618      	mov	r0, r3
 8002378:	f005 fe28 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002382:	f7ff ff27 	bl	80021d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b72      	ldr	r3, [pc, #456]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238c:	4a70      	ldr	r2, [pc, #448]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002396:	4b6e      	ldr	r3, [pc, #440]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80023a4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80023a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ac:	2312      	movs	r3, #18
 80023ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023be:	2304      	movs	r3, #4
 80023c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023c8:	4619      	mov	r1, r3
 80023ca:	4862      	ldr	r0, [pc, #392]	@ (8002554 <HAL_I2C_MspInit+0x224>)
 80023cc:	f003 fc4a 	bl	8005c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 80023d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 80023d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 80023e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80023ee:	e0a8      	b.n	8002542 <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <HAL_I2C_MspInit+0x228>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d147      	bne.n	800248a <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80023fa:	f04f 0208 	mov.w	r2, #8
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240c:	f107 0320 	add.w	r3, r7, #32
 8002410:	4618      	mov	r0, r3
 8002412:	f005 fddb 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800241c:	f7ff feda 	bl	80021d4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b4b      	ldr	r3, [pc, #300]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	4a4a      	ldr	r2, [pc, #296]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002430:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800243e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002446:	2312      	movs	r3, #18
 8002448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002458:	2304      	movs	r3, #4
 800245a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002462:	4619      	mov	r1, r3
 8002464:	483b      	ldr	r0, [pc, #236]	@ (8002554 <HAL_I2C_MspInit+0x224>)
 8002466:	f003 fbfd 	bl	8005c64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800246a:	4b39      	ldr	r3, [pc, #228]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 800246c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002470:	4a37      	ldr	r2, [pc, #220]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002476:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800247a:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 800247c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
}
 8002488:	e05b      	b.n	8002542 <HAL_I2C_MspInit+0x212>
  else if(hi2c->Instance==I2C4)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a33      	ldr	r2, [pc, #204]	@ (800255c <HAL_I2C_MspInit+0x22c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d156      	bne.n	8002542 <HAL_I2C_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002494:	f04f 0210 	mov.w	r2, #16
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a6:	f107 0320 	add.w	r3, r7, #32
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 fd8e 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80024b6:	f7ff fe8d 	bl	80021d4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c0:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ca:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80024d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e0:	2312      	movs	r3, #18
 80024e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80024f2:	2304      	movs	r3, #4
 80024f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024fc:	4619      	mov	r1, r3
 80024fe:	4818      	ldr	r0, [pc, #96]	@ (8002560 <HAL_I2C_MspInit+0x230>)
 8002500:	f003 fbb0 	bl	8005c64 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800250a:	4a11      	ldr	r2, [pc, #68]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002510:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_I2C_MspInit+0x220>)
 8002516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	205f      	movs	r0, #95	@ 0x5f
 8002528:	f002 fd7d 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800252c:	205f      	movs	r0, #95	@ 0x5f
 800252e:	f002 fd94 	bl	800505a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	2060      	movs	r0, #96	@ 0x60
 8002538:	f002 fd75 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800253c:	2060      	movs	r0, #96	@ 0x60
 800253e:	f002 fd8c 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	37f0      	adds	r7, #240	@ 0xf0
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40005400 	.word	0x40005400
 8002550:	58024400 	.word	0x58024400
 8002554:	58020400 	.word	0x58020400
 8002558:	40005800 	.word	0x40005800
 800255c:	58001c00 	.word	0x58001c00
 8002560:	58020c00 	.word	0x58020c00

08002564 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b0ba      	sub	sp, #232	@ 0xe8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800257c:	f107 0318 	add.w	r3, r7, #24
 8002580:	22b8      	movs	r2, #184	@ 0xb8
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f00f fbe3 	bl	8011d50 <memset>
  if(hsd->Instance==SDMMC1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a38      	ldr	r2, [pc, #224]	@ (8002670 <HAL_SD_MspInit+0x10c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d169      	bne.n	8002668 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002594:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a4:	f107 0318 	add.w	r3, r7, #24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f005 fd0f 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80025b4:	f7ff fe0e 	bl	80021d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80025b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025be:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80025c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d6:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025dc:	4a25      	ldr	r2, [pc, #148]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025e6:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <HAL_SD_MspInit+0x110>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002604:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_SD_MspInit+0x110>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002612:	2304      	movs	r3, #4
 8002614:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800262a:	230c      	movs	r3, #12
 800262c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002630:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002634:	4619      	mov	r1, r3
 8002636:	4810      	ldr	r0, [pc, #64]	@ (8002678 <HAL_SD_MspInit+0x114>)
 8002638:	f003 fb14 	bl	8005c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 800263c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002656:	230c      	movs	r3, #12
 8002658:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002660:	4619      	mov	r1, r3
 8002662:	4806      	ldr	r0, [pc, #24]	@ (800267c <HAL_SD_MspInit+0x118>)
 8002664:	f003 fafe 	bl	8005c64 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002668:	bf00      	nop
 800266a:	37e8      	adds	r7, #232	@ 0xe8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	52007000 	.word	0x52007000
 8002674:	58024400 	.word	0x58024400
 8002678:	58020c00 	.word	0x58020c00
 800267c:	58020800 	.word	0x58020800

08002680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b0be      	sub	sp, #248	@ 0xf8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002698:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800269c:	22b8      	movs	r2, #184	@ 0xb8
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00f fb55 	bl	8011d50 <memset>
  if(hspi->Instance==SPI1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a97      	ldr	r2, [pc, #604]	@ (8002908 <HAL_SPI_MspInit+0x288>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d16a      	bne.n	8002786 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80026b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026c6:	4618      	mov	r0, r3
 80026c8:	f005 fc80 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80026d2:	f7ff fd7f 	bl	80021d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026d6:	4b8d      	ldr	r3, [pc, #564]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80026d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026dc:	4a8b      	ldr	r2, [pc, #556]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80026de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026e6:	4b89      	ldr	r3, [pc, #548]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80026e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f4:	4b85      	ldr	r3, [pc, #532]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80026f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026fa:	4a84      	ldr	r2, [pc, #528]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002704:	4b81      	ldr	r3, [pc, #516]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	4b7e      	ldr	r3, [pc, #504]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002718:	4a7c      	ldr	r2, [pc, #496]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002722:	4b7a      	ldr	r3, [pc, #488]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002730:	2310      	movs	r3, #16
 8002732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002748:	2305      	movs	r3, #5
 800274a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002752:	4619      	mov	r1, r3
 8002754:	486e      	ldr	r0, [pc, #440]	@ (8002910 <HAL_SPI_MspInit+0x290>)
 8002756:	f003 fa85 	bl	8005c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800275a:	23a0      	movs	r3, #160	@ 0xa0
 800275c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002772:	2305      	movs	r3, #5
 8002774:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800277c:	4619      	mov	r1, r3
 800277e:	4865      	ldr	r0, [pc, #404]	@ (8002914 <HAL_SPI_MspInit+0x294>)
 8002780:	f003 fa70 	bl	8005c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002784:	e0bb      	b.n	80028fe <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a63      	ldr	r2, [pc, #396]	@ (8002918 <HAL_SPI_MspInit+0x298>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d16b      	bne.n	8002868 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002790:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027a6:	4618      	mov	r0, r3
 80027a8:	f005 fc10 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80027b2:	f7ff fd0f 	bl	80021d4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027b6:	4b55      	ldr	r3, [pc, #340]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027bc:	4a53      	ldr	r2, [pc, #332]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027c6:	4b51      	ldr	r3, [pc, #324]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027da:	4a4c      	ldr	r2, [pc, #304]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e4:	4b49      	ldr	r3, [pc, #292]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	4b46      	ldr	r3, [pc, #280]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f8:	4a44      	ldr	r2, [pc, #272]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002802:	4b42      	ldr	r3, [pc, #264]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 8002804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002814:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800282a:	2305      	movs	r3, #5
 800282c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002834:	4619      	mov	r1, r3
 8002836:	4837      	ldr	r0, [pc, #220]	@ (8002914 <HAL_SPI_MspInit+0x294>)
 8002838:	f003 fa14 	bl	8005c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 800283c:	2306      	movs	r3, #6
 800283e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002854:	2305      	movs	r3, #5
 8002856:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800285e:	4619      	mov	r1, r3
 8002860:	482e      	ldr	r0, [pc, #184]	@ (800291c <HAL_SPI_MspInit+0x29c>)
 8002862:	f003 f9ff 	bl	8005c64 <HAL_GPIO_Init>
}
 8002866:	e04a      	b.n	80028fe <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2c      	ldr	r2, [pc, #176]	@ (8002920 <HAL_SPI_MspInit+0x2a0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d145      	bne.n	80028fe <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002872:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002884:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002888:	4618      	mov	r0, r3
 800288a:	f005 fb9f 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_SPI_MspInit+0x218>
      Error_Handler();
 8002894:	f7ff fc9e 	bl	80021d4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002898:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 800289a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800289e:	4a1b      	ldr	r2, [pc, #108]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80028a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028a8:	4b18      	ldr	r3, [pc, #96]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80028aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028bc:	4a13      	ldr	r2, [pc, #76]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_SPI_MspInit+0x28c>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80028d4:	2364      	movs	r3, #100	@ 0x64
 80028d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80028ec:	2305      	movs	r3, #5
 80028ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80028f6:	4619      	mov	r1, r3
 80028f8:	480a      	ldr	r0, [pc, #40]	@ (8002924 <HAL_SPI_MspInit+0x2a4>)
 80028fa:	f003 f9b3 	bl	8005c64 <HAL_GPIO_Init>
}
 80028fe:	bf00      	nop
 8002900:	37f8      	adds	r7, #248	@ 0xf8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40013000 	.word	0x40013000
 800290c:	58024400 	.word	0x58024400
 8002910:	58020400 	.word	0x58020400
 8002914:	58020000 	.word	0x58020000
 8002918:	40003800 	.word	0x40003800
 800291c:	58020800 	.word	0x58020800
 8002920:	40013400 	.word	0x40013400
 8002924:	58021000 	.word	0x58021000

08002928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0b      	ldr	r2, [pc, #44]	@ (8002964 <HAL_TIM_Base_MspInit+0x3c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800293a:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_TIM_Base_MspInit+0x40>)
 800293c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002940:	4a09      	ldr	r2, [pc, #36]	@ (8002968 <HAL_TIM_Base_MspInit+0x40>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800294a:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <HAL_TIM_Base_MspInit+0x40>)
 800294c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40010000 	.word	0x40010000
 8002968:	58024400 	.word	0x58024400

0800296c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800296c:	b480      	push	{r7}
 800296e:	b08b      	sub	sp, #44	@ 0x2c
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297c:	d10f      	bne.n	800299e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800297e:	4b49      	ldr	r3, [pc, #292]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002984:	4a47      	ldr	r2, [pc, #284]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800298e:	4b45      	ldr	r3, [pc, #276]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800299c:	e07c      	b.n	8002a98 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a41      	ldr	r2, [pc, #260]	@ (8002aa8 <HAL_TIM_PWM_MspInit+0x13c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10f      	bne.n	80029c8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029a8:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 80029aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ae:	4a3d      	ldr	r2, [pc, #244]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029b8:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 80029ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	6a3b      	ldr	r3, [r7, #32]
}
 80029c6:	e067      	b.n	8002a98 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a37      	ldr	r2, [pc, #220]	@ (8002aac <HAL_TIM_PWM_MspInit+0x140>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10f      	bne.n	80029f2 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029d2:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 80029d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029d8:	4a32      	ldr	r2, [pc, #200]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029e2:	4b30      	ldr	r3, [pc, #192]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 80029e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	69fb      	ldr	r3, [r7, #28]
}
 80029f0:	e052      	b.n	8002a98 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab0 <HAL_TIM_PWM_MspInit+0x144>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d10f      	bne.n	8002a1c <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029fc:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 80029fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a02:	4a28      	ldr	r2, [pc, #160]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a0c:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]
}
 8002a1a:	e03d      	b.n	8002a98 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a24      	ldr	r2, [pc, #144]	@ (8002ab4 <HAL_TIM_PWM_MspInit+0x148>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10f      	bne.n	8002a46 <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a26:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a36:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	697b      	ldr	r3, [r7, #20]
}
 8002a44:	e028      	b.n	8002a98 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <HAL_TIM_PWM_MspInit+0x14c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10f      	bne.n	8002a70 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a56:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
}
 8002a6e:	e013      	b.n	8002a98 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <HAL_TIM_PWM_MspInit+0x150>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a80:	4a08      	ldr	r2, [pc, #32]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_TIM_PWM_MspInit+0x138>)
 8002a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	372c      	adds	r7, #44	@ 0x2c
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40000c00 	.word	0x40000c00
 8002ab4:	40010400 	.word	0x40010400
 8002ab8:	40001800 	.word	0x40001800
 8002abc:	40014000 	.word	0x40014000

08002ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b090      	sub	sp, #64	@ 0x40
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a95      	ldr	r2, [pc, #596]	@ (8002d34 <HAL_TIM_MspPostInit+0x274>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d120      	bne.n	8002b24 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae2:	4b95      	ldr	r3, [pc, #596]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae8:	4a93      	ldr	r2, [pc, #588]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002aea:	f043 0310 	orr.w	r3, r3, #16
 8002aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002af2:	4b91      	ldr	r3, [pc, #580]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8002b00:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4887      	ldr	r0, [pc, #540]	@ (8002d3c <HAL_TIM_MspPostInit+0x27c>)
 8002b1e:	f003 f8a1 	bl	8005c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002b22:	e103      	b.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b2c:	d120      	bne.n	8002b70 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	4b82      	ldr	r3, [pc, #520]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b34:	4a80      	ldr	r2, [pc, #512]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	4875      	ldr	r0, [pc, #468]	@ (8002d40 <HAL_TIM_MspPostInit+0x280>)
 8002b6a:	f003 f87b 	bl	8005c64 <HAL_GPIO_Init>
}
 8002b6e:	e0dd      	b.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a73      	ldr	r2, [pc, #460]	@ (8002d44 <HAL_TIM_MspPostInit+0x284>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d11f      	bne.n	8002bba <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b80:	4a6d      	ldr	r2, [pc, #436]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	623b      	str	r3, [r7, #32]
 8002b96:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b98:	2340      	movs	r3, #64	@ 0x40
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4863      	ldr	r0, [pc, #396]	@ (8002d40 <HAL_TIM_MspPostInit+0x280>)
 8002bb4:	f003 f856 	bl	8005c64 <HAL_GPIO_Init>
}
 8002bb8:	e0b8      	b.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a62      	ldr	r2, [pc, #392]	@ (8002d48 <HAL_TIM_MspPostInit+0x288>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d11f      	bne.n	8002c04 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bca:	4a5b      	ldr	r2, [pc, #364]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bd4:	4b58      	ldr	r3, [pc, #352]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002be2:	2340      	movs	r3, #64	@ 0x40
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4853      	ldr	r0, [pc, #332]	@ (8002d4c <HAL_TIM_MspPostInit+0x28c>)
 8002bfe:	f003 f831 	bl	8005c64 <HAL_GPIO_Init>
}
 8002c02:	e093      	b.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a51      	ldr	r2, [pc, #324]	@ (8002d50 <HAL_TIM_MspPostInit+0x290>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d11f      	bne.n	8002c4e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c14:	4a48      	ldr	r2, [pc, #288]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c1e:	4b46      	ldr	r3, [pc, #280]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c44:	4619      	mov	r1, r3
 8002c46:	483e      	ldr	r0, [pc, #248]	@ (8002d40 <HAL_TIM_MspPostInit+0x280>)
 8002c48:	f003 f80c 	bl	8005c64 <HAL_GPIO_Init>
}
 8002c4c:	e06e      	b.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a40      	ldr	r2, [pc, #256]	@ (8002d54 <HAL_TIM_MspPostInit+0x294>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d11f      	bne.n	8002c98 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c58:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c5e:	4a36      	ldr	r2, [pc, #216]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c68:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c76:	2340      	movs	r3, #64	@ 0x40
 8002c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c86:	2303      	movs	r3, #3
 8002c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4831      	ldr	r0, [pc, #196]	@ (8002d58 <HAL_TIM_MspPostInit+0x298>)
 8002c92:	f002 ffe7 	bl	8005c64 <HAL_GPIO_Init>
}
 8002c96:	e049      	b.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002d5c <HAL_TIM_MspPostInit+0x29c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d120      	bne.n	8002ce4 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	4b25      	ldr	r3, [pc, #148]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ca8:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cb2:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cda:	4619      	mov	r1, r3
 8002cdc:	481b      	ldr	r0, [pc, #108]	@ (8002d4c <HAL_TIM_MspPostInit+0x28c>)
 8002cde:	f002 ffc1 	bl	8005c64 <HAL_GPIO_Init>
}
 8002ce2:	e023      	b.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d60 <HAL_TIM_MspPostInit+0x2a0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d11e      	bne.n	8002d2c <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cf4:	4a10      	ldr	r2, [pc, #64]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <HAL_TIM_MspPostInit+0x278>)
 8002d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	4806      	ldr	r0, [pc, #24]	@ (8002d40 <HAL_TIM_MspPostInit+0x280>)
 8002d28:	f002 ff9c 	bl	8005c64 <HAL_GPIO_Init>
}
 8002d2c:	bf00      	nop
 8002d2e:	3740      	adds	r7, #64	@ 0x40
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40010000 	.word	0x40010000
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	58021000 	.word	0x58021000
 8002d40:	58020000 	.word	0x58020000
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	58020400 	.word	0x58020400
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40010400 	.word	0x40010400
 8002d58:	58020800 	.word	0x58020800
 8002d5c:	40001800 	.word	0x40001800
 8002d60:	40014000 	.word	0x40014000

08002d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0c0      	sub	sp, #256	@ 0x100
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d80:	22b8      	movs	r2, #184	@ 0xb8
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f00e ffe3 	bl	8011d50 <memset>
  if(huart->Instance==UART4)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4ac3      	ldr	r2, [pc, #780]	@ (800309c <HAL_UART_MspInit+0x338>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d16b      	bne.n	8002e6c <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002d94:	f04f 0202 	mov.w	r2, #2
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002da6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 f90e 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002db6:	f7ff fa0d 	bl	80021d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002dba:	4bb9      	ldr	r3, [pc, #740]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dc0:	4ab7      	ldr	r2, [pc, #732]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002dc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dca:	4bb5      	ldr	r3, [pc, #724]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd8:	4bb1      	ldr	r3, [pc, #708]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dde:	4ab0      	ldr	r2, [pc, #704]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002de8:	4bad      	ldr	r3, [pc, #692]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df6:	4baa      	ldr	r3, [pc, #680]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfc:	4aa8      	ldr	r2, [pc, #672]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e06:	4ba6      	ldr	r3, [pc, #664]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e2e:	2308      	movs	r3, #8
 8002e30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e38:	4619      	mov	r1, r3
 8002e3a:	489a      	ldr	r0, [pc, #616]	@ (80030a4 <HAL_UART_MspInit+0x340>)
 8002e3c:	f002 ff12 	bl	8005c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e58:	2308      	movs	r3, #8
 8002e5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e62:	4619      	mov	r1, r3
 8002e64:	4890      	ldr	r0, [pc, #576]	@ (80030a8 <HAL_UART_MspInit+0x344>)
 8002e66:	f002 fefd 	bl	8005c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8002e6a:	e111      	b.n	8003090 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART5)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a8e      	ldr	r2, [pc, #568]	@ (80030ac <HAL_UART_MspInit+0x348>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d147      	bne.n	8002f06 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002e76:	f04f 0202 	mov.w	r2, #2
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f005 f89d 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002e98:	f7ff f99c 	bl	80021d4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002e9c:	4b80      	ldr	r3, [pc, #512]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ea2:	4a7f      	ldr	r2, [pc, #508]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002ea4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002eac:	4b7c      	ldr	r3, [pc, #496]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	4b79      	ldr	r3, [pc, #484]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ec0:	4a77      	ldr	r2, [pc, #476]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eca:	4b75      	ldr	r3, [pc, #468]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8002ed8:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002edc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002ef2:	230e      	movs	r3, #14
 8002ef4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002efc:	4619      	mov	r1, r3
 8002efe:	4869      	ldr	r0, [pc, #420]	@ (80030a4 <HAL_UART_MspInit+0x340>)
 8002f00:	f002 feb0 	bl	8005c64 <HAL_GPIO_Init>
}
 8002f04:	e0c4      	b.n	8003090 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART7)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a69      	ldr	r2, [pc, #420]	@ (80030b0 <HAL_UART_MspInit+0x34c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d147      	bne.n	8002fa0 <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002f10:	f04f 0202 	mov.w	r2, #2
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 f850 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8002f32:	f7ff f94f 	bl	80021d4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002f36:	4b5a      	ldr	r3, [pc, #360]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f3c:	4a58      	ldr	r2, [pc, #352]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f46:	4b56      	ldr	r3, [pc, #344]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f54:	4b52      	ldr	r3, [pc, #328]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f5a:	4a51      	ldr	r2, [pc, #324]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002f5c:	f043 0310 	orr.w	r3, r3, #16
 8002f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f64:	4b4e      	ldr	r3, [pc, #312]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002f72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002f76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f92:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002f96:	4619      	mov	r1, r3
 8002f98:	4846      	ldr	r0, [pc, #280]	@ (80030b4 <HAL_UART_MspInit+0x350>)
 8002f9a:	f002 fe63 	bl	8005c64 <HAL_GPIO_Init>
}
 8002f9e:	e077      	b.n	8003090 <HAL_UART_MspInit+0x32c>
  else if(huart->Instance==UART8)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a44      	ldr	r2, [pc, #272]	@ (80030b8 <HAL_UART_MspInit+0x354>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d172      	bne.n	8003090 <HAL_UART_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002faa:	f04f 0202 	mov.w	r2, #2
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 f803 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8002fcc:	f7ff f902 	bl	80021d4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002fd0:	4b33      	ldr	r3, [pc, #204]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fd6:	4a32      	ldr	r2, [pc, #200]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002fd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fee:	4b2c      	ldr	r3, [pc, #176]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8002ff6:	f043 0310 	orr.w	r3, r3, #16
 8002ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ffe:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8003000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800300c:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003012:	4a23      	ldr	r2, [pc, #140]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800301c:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_UART_MspInit+0x33c>)
 800301e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800302a:	2303      	movs	r3, #3
 800302c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003042:	2308      	movs	r3, #8
 8003044:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003048:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800304c:	4619      	mov	r1, r3
 800304e:	4819      	ldr	r0, [pc, #100]	@ (80030b4 <HAL_UART_MspInit+0x350>)
 8003050:	f002 fe08 	bl	8005c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8003054:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003058:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800306e:	2308      	movs	r3, #8
 8003070:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003074:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003078:	4619      	mov	r1, r3
 800307a:	480b      	ldr	r0, [pc, #44]	@ (80030a8 <HAL_UART_MspInit+0x344>)
 800307c:	f002 fdf2 	bl	8005c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	2053      	movs	r0, #83	@ 0x53
 8003086:	f001 ffce 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800308a:	2053      	movs	r0, #83	@ 0x53
 800308c:	f001 ffe5 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8003090:	bf00      	nop
 8003092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	58024400 	.word	0x58024400
 80030a4:	58020400 	.word	0x58020400
 80030a8:	58020c00 	.word	0x58020c00
 80030ac:	40005000 	.word	0x40005000
 80030b0:	40007800 	.word	0x40007800
 80030b4:	58021000 	.word	0x58021000
 80030b8:	40007c00 	.word	0x40007c00

080030bc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b0bc      	sub	sp, #240	@ 0xf0
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d4:	f107 0320 	add.w	r3, r7, #32
 80030d8:	22b8      	movs	r2, #184	@ 0xb8
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f00e fe37 	bl	8011d50 <memset>
  if(husart->Instance==USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a73      	ldr	r2, [pc, #460]	@ (80032b4 <HAL_USART_MspInit+0x1f8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d147      	bne.n	800317c <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030ec:	f04f 0201 	mov.w	r2, #1
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030fe:	f107 0320 	add.w	r3, r7, #32
 8003102:	4618      	mov	r0, r3
 8003104:	f004 ff62 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800310e:	f7ff f861 	bl	80021d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003112:	4b69      	ldr	r3, [pc, #420]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003118:	4a67      	ldr	r2, [pc, #412]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003122:	4b65      	ldr	r3, [pc, #404]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003130:	4b61      	ldr	r3, [pc, #388]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003136:	4a60      	ldr	r2, [pc, #384]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003140:	4b5d      	ldr	r3, [pc, #372]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 800314e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003168:	2307      	movs	r3, #7
 800316a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003172:	4619      	mov	r1, r3
 8003174:	4851      	ldr	r0, [pc, #324]	@ (80032bc <HAL_USART_MspInit+0x200>)
 8003176:	f002 fd75 	bl	8005c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800317a:	e097      	b.n	80032ac <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4f      	ldr	r2, [pc, #316]	@ (80032c0 <HAL_USART_MspInit+0x204>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d146      	bne.n	8003214 <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003186:	f04f 0202 	mov.w	r2, #2
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003192:	2300      	movs	r3, #0
 8003194:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003198:	f107 0320 	add.w	r3, r7, #32
 800319c:	4618      	mov	r0, r3
 800319e:	f004 ff15 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_USART_MspInit+0xf0>
      Error_Handler();
 80031a8:	f7ff f814 	bl	80021d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ac:	4b42      	ldr	r3, [pc, #264]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 80031ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b2:	4a41      	ldr	r2, [pc, #260]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031bc:	4b3e      	ldr	r3, [pc, #248]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 80031be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ca:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d0:	4a39      	ldr	r2, [pc, #228]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 80031d2:	f043 0308 	orr.w	r3, r3, #8
 80031d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031da:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 80031dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 80031e8:	23e8      	movs	r3, #232	@ 0xe8
 80031ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003200:	2307      	movs	r3, #7
 8003202:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003206:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800320a:	4619      	mov	r1, r3
 800320c:	482d      	ldr	r0, [pc, #180]	@ (80032c4 <HAL_USART_MspInit+0x208>)
 800320e:	f002 fd29 	bl	8005c64 <HAL_GPIO_Init>
}
 8003212:	e04b      	b.n	80032ac <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2b      	ldr	r2, [pc, #172]	@ (80032c8 <HAL_USART_MspInit+0x20c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d146      	bne.n	80032ac <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800321e:	f04f 0202 	mov.w	r2, #2
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003230:	f107 0320 	add.w	r3, r7, #32
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fec9 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_USART_MspInit+0x188>
      Error_Handler();
 8003240:	f7fe ffc8 	bl	80021d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003244:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800324a:	4a1b      	ldr	r2, [pc, #108]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003250:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003254:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800325a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003262:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003268:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 800326a:	f043 0308 	orr.w	r3, r3, #8
 800326e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003272:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <HAL_USART_MspInit+0x1fc>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003280:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003284:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800329a:	2307      	movs	r3, #7
 800329c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80032a4:	4619      	mov	r1, r3
 80032a6:	4807      	ldr	r0, [pc, #28]	@ (80032c4 <HAL_USART_MspInit+0x208>)
 80032a8:	f002 fcdc 	bl	8005c64 <HAL_GPIO_Init>
}
 80032ac:	bf00      	nop
 80032ae:	37f0      	adds	r7, #240	@ 0xf0
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40011000 	.word	0x40011000
 80032b8:	58024400 	.word	0x58024400
 80032bc:	58020000 	.word	0x58020000
 80032c0:	40004400 	.word	0x40004400
 80032c4:	58020c00 	.word	0x58020c00
 80032c8:	40004800 	.word	0x40004800

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <NMI_Handler+0x4>

080032d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <HardFault_Handler+0x4>

080032dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <MemManage_Handler+0x4>

080032e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <BusFault_Handler+0x4>

080032ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <UsageFault_Handler+0x4>

080032f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003322:	f000 f9ed 	bl	8003700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}

0800332a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 800332e:	2008      	movs	r0, #8
 8003330:	f002 fe71 	bl	8006016 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 800333c:	2010      	movs	r0, #16
 800333e:	f002 fe6a 	bl	8006016 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800334c:	4802      	ldr	r0, [pc, #8]	@ (8003358 <UART8_IRQHandler+0x10>)
 800334e:	f009 ff6d 	bl	800d22c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	24000a04 	.word	0x24000a04

0800335c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <I2C4_EV_IRQHandler+0x10>)
 8003362:	f002 ff0f 	bl	8006184 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	24000380 	.word	0x24000380

08003370 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8003374:	4802      	ldr	r0, [pc, #8]	@ (8003380 <I2C4_ER_IRQHandler+0x10>)
 8003376:	f002 ff1f 	bl	80061b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	24000380 	.word	0x24000380

08003384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return 1;
 8003388:	2301      	movs	r3, #1
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_kill>:

int _kill(int pid, int sig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800339e:	f00e fd29 	bl	8011df4 <__errno>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2216      	movs	r2, #22
 80033a6:	601a      	str	r2, [r3, #0]
  return -1;
 80033a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_exit>:

void _exit (int status)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffe7 	bl	8003394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <_exit+0x12>

080033ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e00a      	b.n	80033f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033dc:	f3af 8000 	nop.w
 80033e0:	4601      	mov	r1, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	b2ca      	uxtb	r2, r1
 80033ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	dbf0      	blt.n	80033dc <_read+0x12>
  }

  return len;
 80033fa:	687b      	ldr	r3, [r7, #4]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800342c:	605a      	str	r2, [r3, #4]
  return 0;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_isatty>:

int _isatty(int file)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003444:	2301      	movs	r3, #1
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003474:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <_sbrk+0x5c>)
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <_sbrk+0x60>)
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <_sbrk+0x64>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <_sbrk+0x64>)
 800348a:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <_sbrk+0x68>)
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <_sbrk+0x64>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800349c:	f00e fcaa 	bl	8011df4 <__errno>
 80034a0:	4603      	mov	r3, r0
 80034a2:	220c      	movs	r2, #12
 80034a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e009      	b.n	80034c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ac:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b2:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <_sbrk+0x64>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <_sbrk+0x64>)
 80034bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	24050000 	.word	0x24050000
 80034cc:	00000400 	.word	0x00000400
 80034d0:	24000bc0 	.word	0x24000bc0
 80034d4:	24000d28 	.word	0x24000d28

080034d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034dc:	4b32      	ldr	r3, [pc, #200]	@ (80035a8 <SystemInit+0xd0>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	4a31      	ldr	r2, [pc, #196]	@ (80035a8 <SystemInit+0xd0>)
 80034e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034ec:	4b2f      	ldr	r3, [pc, #188]	@ (80035ac <SystemInit+0xd4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	2b06      	cmp	r3, #6
 80034f6:	d807      	bhi.n	8003508 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034f8:	4b2c      	ldr	r3, [pc, #176]	@ (80035ac <SystemInit+0xd4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 030f 	bic.w	r3, r3, #15
 8003500:	4a2a      	ldr	r2, [pc, #168]	@ (80035ac <SystemInit+0xd4>)
 8003502:	f043 0307 	orr.w	r3, r3, #7
 8003506:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003508:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <SystemInit+0xd8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a28      	ldr	r2, [pc, #160]	@ (80035b0 <SystemInit+0xd8>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003514:	4b26      	ldr	r3, [pc, #152]	@ (80035b0 <SystemInit+0xd8>)
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800351a:	4b25      	ldr	r3, [pc, #148]	@ (80035b0 <SystemInit+0xd8>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4924      	ldr	r1, [pc, #144]	@ (80035b0 <SystemInit+0xd8>)
 8003520:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <SystemInit+0xdc>)
 8003522:	4013      	ands	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003526:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <SystemInit+0xd4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <SystemInit+0xd4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 030f 	bic.w	r3, r3, #15
 800353a:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <SystemInit+0xd4>)
 800353c:	f043 0307 	orr.w	r3, r3, #7
 8003540:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003542:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <SystemInit+0xd8>)
 8003544:	2200      	movs	r2, #0
 8003546:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003548:	4b19      	ldr	r3, [pc, #100]	@ (80035b0 <SystemInit+0xd8>)
 800354a:	2200      	movs	r2, #0
 800354c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800354e:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <SystemInit+0xd8>)
 8003550:	2200      	movs	r2, #0
 8003552:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003554:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <SystemInit+0xd8>)
 8003556:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <SystemInit+0xe0>)
 8003558:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <SystemInit+0xd8>)
 800355c:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <SystemInit+0xe4>)
 800355e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003560:	4b13      	ldr	r3, [pc, #76]	@ (80035b0 <SystemInit+0xd8>)
 8003562:	4a17      	ldr	r2, [pc, #92]	@ (80035c0 <SystemInit+0xe8>)
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003566:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <SystemInit+0xd8>)
 8003568:	2200      	movs	r2, #0
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800356c:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <SystemInit+0xd8>)
 800356e:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <SystemInit+0xe8>)
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003572:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <SystemInit+0xd8>)
 8003574:	2200      	movs	r2, #0
 8003576:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003578:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <SystemInit+0xd8>)
 800357a:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <SystemInit+0xe8>)
 800357c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800357e:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <SystemInit+0xd8>)
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003584:	4b0a      	ldr	r3, [pc, #40]	@ (80035b0 <SystemInit+0xd8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a09      	ldr	r2, [pc, #36]	@ (80035b0 <SystemInit+0xd8>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003590:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <SystemInit+0xd8>)
 8003592:	2200      	movs	r2, #0
 8003594:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003596:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <SystemInit+0xec>)
 8003598:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800359c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00
 80035ac:	52002000 	.word	0x52002000
 80035b0:	58024400 	.word	0x58024400
 80035b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80035b8:	02020200 	.word	0x02020200
 80035bc:	01ff0000 	.word	0x01ff0000
 80035c0:	01010280 	.word	0x01010280
 80035c4:	52004000 	.word	0x52004000

080035c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80035c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003600 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035cc:	f7ff ff84 	bl	80034d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035d0:	480c      	ldr	r0, [pc, #48]	@ (8003604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035d2:	490d      	ldr	r1, [pc, #52]	@ (8003608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035d4:	4a0d      	ldr	r2, [pc, #52]	@ (800360c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d8:	e002      	b.n	80035e0 <LoopCopyDataInit>

080035da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035de:	3304      	adds	r3, #4

080035e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e4:	d3f9      	bcc.n	80035da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035ec:	e001      	b.n	80035f2 <LoopFillZerobss>

080035ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f0:	3204      	adds	r2, #4

080035f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f4:	d3fb      	bcc.n	80035ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035f6:	f00e fc03 	bl	8011e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035fa:	f7fd fad3 	bl	8000ba4 <main>
  bx  lr
 80035fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003600:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003604:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003608:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800360c:	080157d0 	.word	0x080157d0
  ldr r2, =_sbss
 8003610:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8003614:	24000d28 	.word	0x24000d28

08003618 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003618:	e7fe      	b.n	8003618 <ADC3_IRQHandler>
	...

0800361c <HAL_Init>:
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	2003      	movs	r0, #3
 8003624:	f001 fcf4 	bl	8005010 <HAL_NVIC_SetPriorityGrouping>
 8003628:	f004 fafa 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <HAL_Init+0x68>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	4913      	ldr	r1, [pc, #76]	@ (8003688 <HAL_Init+0x6c>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <HAL_Init+0x68>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	4a0e      	ldr	r2, [pc, #56]	@ (8003688 <HAL_Init+0x6c>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	4a0b      	ldr	r2, [pc, #44]	@ (800368c <HAL_Init+0x70>)
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4a0b      	ldr	r2, [pc, #44]	@ (8003690 <HAL_Init+0x74>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	200f      	movs	r0, #15
 8003668:	f000 f814 	bl	8003694 <HAL_InitTick>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_Init+0x5a>
 8003672:	2301      	movs	r3, #1
 8003674:	e002      	b.n	800367c <HAL_Init+0x60>
 8003676:	f7fe fdb3 	bl	80021e0 <HAL_MspInit>
 800367a:	2300      	movs	r3, #0
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	08015334 	.word	0x08015334
 800368c:	24000004 	.word	0x24000004
 8003690:	24000000 	.word	0x24000000

08003694 <HAL_InitTick>:
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <HAL_InitTick+0x60>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_InitTick+0x14>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e021      	b.n	80036ec <HAL_InitTick+0x58>
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <HAL_InitTick+0x64>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <HAL_InitTick+0x60>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	4619      	mov	r1, r3
 80036b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fcd9 	bl	8005076 <HAL_SYSTICK_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_InitTick+0x3a>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00e      	b.n	80036ec <HAL_InitTick+0x58>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0f      	cmp	r3, #15
 80036d2:	d80a      	bhi.n	80036ea <HAL_InitTick+0x56>
 80036d4:	2200      	movs	r2, #0
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	f001 fca3 	bl	8005026 <HAL_NVIC_SetPriority>
 80036e0:	4a06      	ldr	r2, [pc, #24]	@ (80036fc <HAL_InitTick+0x68>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <HAL_InitTick+0x58>
 80036ea:	2301      	movs	r3, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	2400000c 	.word	0x2400000c
 80036f8:	24000000 	.word	0x24000000
 80036fc:	24000008 	.word	0x24000008

08003700 <HAL_IncTick>:
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
 8003704:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_IncTick+0x20>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_IncTick+0x24>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4413      	add	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <HAL_IncTick+0x24>)
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2400000c 	.word	0x2400000c
 8003724:	24000bc4 	.word	0x24000bc4

08003728 <HAL_GetTick>:
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_GetTick+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	24000bc4 	.word	0x24000bc4

08003740 <HAL_Delay>:
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	f7ff ffee 	bl	8003728 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d005      	beq.n	8003766 <HAL_Delay+0x26>
 800375a:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <HAL_Delay+0x44>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	bf00      	nop
 8003768:	f7ff ffde 	bl	8003728 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	429a      	cmp	r2, r3
 8003776:	d8f7      	bhi.n	8003768 <HAL_Delay+0x28>
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2400000c 	.word	0x2400000c

08003788 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3360      	adds	r3, #96	@ 0x60
 8003802:	461a      	mov	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a10      	ldr	r2, [pc, #64]	@ (8003850 <LL_ADC_SetOffset+0x60>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10b      	bne.n	800382c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800382a:	e00b      	b.n	8003844 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	430b      	orrs	r3, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	58026000 	.word	0x58026000

08003854 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3360      	adds	r3, #96	@ 0x60
 8003862:	461a      	mov	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	611a      	str	r2, [r3, #16]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a0c      	ldr	r2, [pc, #48]	@ (80038f4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3360      	adds	r3, #96	@ 0x60
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	601a      	str	r2, [r3, #0]
  }
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	58026000 	.word	0x58026000

080038f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <LL_ADC_SetOffsetSaturation+0x40>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10e      	bne.n	800392a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3360      	adds	r3, #96	@ 0x60
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	431a      	orrs	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	58026000 	.word	0x58026000

0800393c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a0c      	ldr	r2, [pc, #48]	@ (800397c <LL_ADC_SetOffsetSign+0x40>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d10e      	bne.n	800396e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3360      	adds	r3, #96	@ 0x60
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	431a      	orrs	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	58026000 	.word	0x58026000

08003980 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3360      	adds	r3, #96	@ 0x60
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a0c      	ldr	r2, [pc, #48]	@ (80039d0 <LL_ADC_SetOffsetState+0x50>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80039b2:	e007      	b.n	80039c4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	431a      	orrs	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	58026000 	.word	0x58026000

080039d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3330      	adds	r3, #48	@ 0x30
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0a1b      	lsrs	r3, r3, #8
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	4413      	add	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	211f      	movs	r1, #31
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	0e9b      	lsrs	r3, r3, #26
 8003a0c:	f003 011f 	and.w	r1, r3, #31
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	0e5b      	lsrs	r3, r3, #25
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	4413      	add	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	0d1b      	lsrs	r3, r3, #20
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2107      	movs	r1, #7
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	401a      	ands	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	0d1b      	lsrs	r3, r3, #20
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	431a      	orrs	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d115      	bne.n	8003ac4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0318 	and.w	r3, r3, #24
 8003aae:	4914      	ldr	r1, [pc, #80]	@ (8003b00 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ab0:	40d9      	lsrs	r1, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003ac2:	e014      	b.n	8003aee <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 0318 	and.w	r3, r3, #24
 8003ada:	4909      	ldr	r1, [pc, #36]	@ (8003b00 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003adc:	40d9      	lsrs	r1, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	400b      	ands	r3, r1
 8003ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	58026000 	.word	0x58026000
 8003b00:	000fffff 	.word	0x000fffff

08003b04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b04      	ldr	r3, [pc, #16]	@ (8003b24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6093      	str	r3, [r2, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	5fffffc0 	.word	0x5fffffc0

08003b28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b3c:	d101      	bne.n	8003b42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <LL_ADC_EnableInternalRegulator+0x24>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	6fffffc0 	.word	0x6fffffc0

08003b78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b8c:	d101      	bne.n	8003b92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <LL_ADC_IsEnabled+0x18>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <LL_ADC_IsEnabled+0x1a>
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d101      	bne.n	8003bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d101      	bne.n	8003c04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e1ee      	b.n	800400c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fe fae9 	bl	8002214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff67 	bl	8003b28 <LL_ADC_IsDeepPowerDownEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff4d 	bl	8003b04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff82 	bl	8003b78 <LL_ADC_IsInternalRegulatorEnabled>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff66 	bl	8003b50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c84:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec0 <HAL_ADC_Init+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	4a8e      	ldr	r2, [pc, #568]	@ (8003ec4 <HAL_ADC_Init+0x2b0>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	3301      	adds	r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c96:	e002      	b.n	8003c9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f9      	bne.n	8003c98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff65 	bl	8003b78 <LL_ADC_IsInternalRegulatorEnabled>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb8:	f043 0210 	orr.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff76 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8003cda:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 8188 	bne.w	8003ffa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 8184 	bne.w	8003ffa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff4a 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d136      	bne.n	8003d80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec8 <HAL_ADC_Init+0x2b4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_ADC_Init+0x112>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6a      	ldr	r2, [pc, #424]	@ (8003ecc <HAL_ADC_Init+0x2b8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10e      	bne.n	8003d44 <HAL_ADC_Init+0x130>
 8003d26:	4868      	ldr	r0, [pc, #416]	@ (8003ec8 <HAL_ADC_Init+0x2b4>)
 8003d28:	f7ff ff3a 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	4867      	ldr	r0, [pc, #412]	@ (8003ecc <HAL_ADC_Init+0x2b8>)
 8003d30:	f7ff ff36 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4323      	orrs	r3, r4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e008      	b.n	8003d56 <HAL_ADC_Init+0x142>
 8003d44:	4862      	ldr	r0, [pc, #392]	@ (8003ed0 <HAL_ADC_Init+0x2bc>)
 8003d46:	f7ff ff2b 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ec8 <HAL_ADC_Init+0x2b4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_ADC_Init+0x15a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a58      	ldr	r2, [pc, #352]	@ (8003ecc <HAL_ADC_Init+0x2b8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_Init+0x15e>
 8003d6e:	4a59      	ldr	r2, [pc, #356]	@ (8003ed4 <HAL_ADC_Init+0x2c0>)
 8003d70:	e000      	b.n	8003d74 <HAL_ADC_Init+0x160>
 8003d72:	4a59      	ldr	r2, [pc, #356]	@ (8003ed8 <HAL_ADC_Init+0x2c4>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7ff fd04 	bl	8003788 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a52      	ldr	r2, [pc, #328]	@ (8003ed0 <HAL_ADC_Init+0x2bc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d129      	bne.n	8003dde <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7e5b      	ldrb	r3, [r3, #25]
 8003d8e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003d94:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003d9a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d013      	beq.n	8003dcc <HAL_ADC_Init+0x1b8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	d00d      	beq.n	8003dc8 <HAL_ADC_Init+0x1b4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b1c      	cmp	r3, #28
 8003db2:	d007      	beq.n	8003dc4 <HAL_ADC_Init+0x1b0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b18      	cmp	r3, #24
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADC_Init+0x1ac>
 8003dbc:	2318      	movs	r3, #24
 8003dbe:	e006      	b.n	8003dce <HAL_ADC_Init+0x1ba>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e004      	b.n	8003dce <HAL_ADC_Init+0x1ba>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	e002      	b.n	8003dce <HAL_ADC_Init+0x1ba>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	e000      	b.n	8003dce <HAL_ADC_Init+0x1ba>
 8003dcc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003dce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e00e      	b.n	8003dfc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7e5b      	ldrb	r3, [r3, #25]
 8003de2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003de8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003dee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d106      	bne.n	8003e14 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	045b      	lsls	r3, r3, #17
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a26      	ldr	r2, [pc, #152]	@ (8003ed0 <HAL_ADC_Init+0x2bc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d115      	bne.n	8003e66 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <HAL_ADC_Init+0x2c8>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	69b9      	ldr	r1, [r7, #24]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	611a      	str	r2, [r3, #16]
 8003e64:	e009      	b.n	8003e7a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee0 <HAL_ADC_Init+0x2cc>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fea1 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8003e84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff feae 	bl	8003bec <LL_ADC_INJ_IsConversionOngoing>
 8003e90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f040 808e 	bne.w	8003fb6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 808a 	bne.w	8003fb6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed0 <HAL_ADC_Init+0x2bc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7e1b      	ldrb	r3, [r3, #24]
 8003eb0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003eb8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e018      	b.n	8003ef2 <HAL_ADC_Init+0x2de>
 8003ec0:	24000000 	.word	0x24000000
 8003ec4:	053e2d63 	.word	0x053e2d63
 8003ec8:	40022000 	.word	0x40022000
 8003ecc:	40022100 	.word	0x40022100
 8003ed0:	58026000 	.word	0x58026000
 8003ed4:	40022300 	.word	0x40022300
 8003ed8:	58026300 	.word	0x58026300
 8003edc:	fff04007 	.word	0xfff04007
 8003ee0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	7e1b      	ldrb	r3, [r3, #24]
 8003ee8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	4b46      	ldr	r3, [pc, #280]	@ (8004014 <HAL_ADC_Init+0x400>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	69b9      	ldr	r1, [r7, #24]
 8003f02:	430b      	orrs	r3, r1
 8003f04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d137      	bne.n	8003f80 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004018 <HAL_ADC_Init+0x404>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d116      	bne.n	8003f4e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	4b3d      	ldr	r3, [pc, #244]	@ (800401c <HAL_ADC_Init+0x408>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f32:	4311      	orrs	r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	611a      	str	r2, [r3, #16]
 8003f4c:	e020      	b.n	8003f90 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	4b32      	ldr	r3, [pc, #200]	@ (8004020 <HAL_ADC_Init+0x40c>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	0411      	lsls	r1, r2, #16
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f64:	4311      	orrs	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003f70:	430a      	orrs	r2, r1
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	611a      	str	r2, [r3, #16]
 8003f7e:	e007      	b.n	8003f90 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	@ (8004018 <HAL_ADC_Init+0x404>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d002      	beq.n	8003fb6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fd67 	bl	8004a84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	f023 010f 	bic.w	r1, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	1e5a      	subs	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fd6:	e007      	b.n	8003fe8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 020f 	bic.w	r2, r2, #15
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ff8:	e007      	b.n	800400a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	f043 0210 	orr.w	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800400a:	7ffb      	ldrb	r3, [r7, #31]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3724      	adds	r7, #36	@ 0x24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}
 8004014:	ffffbffc 	.word	0xffffbffc
 8004018:	58026000 	.word	0x58026000
 800401c:	fc00f81f 	.word	0xfc00f81f
 8004020:	fc00f81e 	.word	0xfc00f81e

08004024 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b0b9      	sub	sp, #228	@ 0xe4
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800403e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4aab      	ldr	r2, [pc, #684]	@ (80042f4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004046:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x34>
 8004052:	2302      	movs	r3, #2
 8004054:	f000 bcfe 	b.w	8004a54 <HAL_ADC_ConfigChannel+0xa30>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fdae 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 84e2 	bne.w	8004a36 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db38      	blt.n	80040ec <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a9e      	ldr	r2, [pc, #632]	@ (80042f8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d033      	beq.n	80040ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800408c:	2b00      	cmp	r3, #0
 800408e:	d108      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x7e>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2201      	movs	r2, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	e01d      	b.n	80040de <HAL_ADC_ConfigChannel+0xba>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ae:	fa93 f3a3 	rbit	r3, r3
 80040b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e004      	b.n	80040d4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80040ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2201      	movs	r2, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	69d1      	ldr	r1, [r2, #28]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	f7ff fc6b 	bl	80039d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fd5f 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8004108:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fd6b 	bl	8003bec <LL_ADC_INJ_IsConversionOngoing>
 8004116:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800411a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 8270 	bne.w	8004604 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004124:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 826b 	bne.w	8004604 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	461a      	mov	r2, r3
 800413c:	f7ff fc76 	bl	8003a2c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6c      	ldr	r2, [pc, #432]	@ (80042f8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10d      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	08db      	lsrs	r3, r3, #3
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004164:	e032      	b.n	80041cc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004166:	4b65      	ldr	r3, [pc, #404]	@ (80042fc <HAL_ADC_ConfigChannel+0x2d8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800416e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004172:	d10b      	bne.n	800418c <HAL_ADC_ConfigChannel+0x168>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	e01d      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x1a4>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x18e>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	e00a      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x1a4>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	089b      	lsrs	r3, r3, #2
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d048      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6919      	ldr	r1, [r3, #16]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041e4:	f7ff fb04 	bl	80037f0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a42      	ldr	r2, [pc, #264]	@ (80042f8 <HAL_ADC_ConfigChannel+0x2d4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d119      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6919      	ldr	r1, [r3, #16]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7ff fb9c 	bl	800393c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6919      	ldr	r1, [r3, #16]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_ADC_ConfigChannel+0x1f8>
 8004216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800421a:	e000      	b.n	800421e <HAL_ADC_ConfigChannel+0x1fa>
 800421c:	2300      	movs	r3, #0
 800421e:	461a      	mov	r2, r3
 8004220:	f7ff fb6a 	bl	80038f8 <LL_ADC_SetOffsetSaturation>
 8004224:	e1ee      	b.n	8004604 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6919      	ldr	r1, [r3, #16]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004234:	2b01      	cmp	r3, #1
 8004236:	d102      	bne.n	800423e <HAL_ADC_ConfigChannel+0x21a>
 8004238:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800423c:	e000      	b.n	8004240 <HAL_ADC_ConfigChannel+0x21c>
 800423e:	2300      	movs	r3, #0
 8004240:	461a      	mov	r2, r3
 8004242:	f7ff fb37 	bl	80038b4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6919      	ldr	r1, [r3, #16]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	7e1b      	ldrb	r3, [r3, #24]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_ADC_ConfigChannel+0x238>
 8004256:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800425a:	e000      	b.n	800425e <HAL_ADC_ConfigChannel+0x23a>
 800425c:	2300      	movs	r3, #0
 800425e:	461a      	mov	r2, r3
 8004260:	f7ff fb0e 	bl	8003880 <LL_ADC_SetDataRightShift>
 8004264:	e1ce      	b.n	8004604 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a23      	ldr	r2, [pc, #140]	@ (80042f8 <HAL_ADC_ConfigChannel+0x2d4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	f040 8181 	bne.w	8004574 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff faeb 	bl	8003854 <LL_ADC_GetOffsetChannel>
 800427e:	4603      	mov	r3, r0
 8004280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <HAL_ADC_ConfigChannel+0x27a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fae0 	bl	8003854 <LL_ADC_GetOffsetChannel>
 8004294:	4603      	mov	r3, r0
 8004296:	0e9b      	lsrs	r3, r3, #26
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	e01e      	b.n	80042dc <HAL_ADC_ConfigChannel+0x2b8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fad5 	bl	8003854 <LL_ADC_GetOffsetChannel>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80042bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80042c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80042cc:	2320      	movs	r3, #32
 80042ce:	e004      	b.n	80042da <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80042d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x2dc>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	e01e      	b.n	8004332 <HAL_ADC_ConfigChannel+0x30e>
 80042f4:	47ff0000 	.word	0x47ff0000
 80042f8:	58026000 	.word	0x58026000
 80042fc:	5c001000 	.word	0x5c001000
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800431c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004324:	2320      	movs	r3, #32
 8004326:	e004      	b.n	8004332 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800432c:	fab3 f383 	clz	r3, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	429a      	cmp	r2, r3
 8004334:	d106      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fb1e 	bl	8003980 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fa82 	bl	8003854 <LL_ADC_GetOffsetChannel>
 8004350:	4603      	mov	r3, r0
 8004352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x34c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2101      	movs	r1, #1
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fa77 	bl	8003854 <LL_ADC_GetOffsetChannel>
 8004366:	4603      	mov	r3, r0
 8004368:	0e9b      	lsrs	r3, r3, #26
 800436a:	f003 021f 	and.w	r2, r3, #31
 800436e:	e01e      	b.n	80043ae <HAL_ADC_ConfigChannel+0x38a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fa6c 	bl	8003854 <LL_ADC_GetOffsetChannel>
 800437c:	4603      	mov	r3, r0
 800437e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800438e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004392:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004396:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800439e:	2320      	movs	r3, #32
 80043a0:	e004      	b.n	80043ac <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80043a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x3a2>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	0e9b      	lsrs	r3, r3, #26
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	e018      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x3d4>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80043da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80043e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e004      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80043ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d106      	bne.n	800440a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2200      	movs	r2, #0
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fabb 	bl	8003980 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fa1f 	bl	8003854 <LL_ADC_GetOffsetChannel>
 8004416:	4603      	mov	r3, r0
 8004418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x412>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fa14 	bl	8003854 <LL_ADC_GetOffsetChannel>
 800442c:	4603      	mov	r3, r0
 800442e:	0e9b      	lsrs	r3, r3, #26
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	e01e      	b.n	8004474 <HAL_ADC_ConfigChannel+0x450>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fa09 	bl	8003854 <LL_ADC_GetOffsetChannel>
 8004442:	4603      	mov	r3, r0
 8004444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004458:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800445c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e004      	b.n	8004472 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_ADC_ConfigChannel+0x468>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	e014      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x492>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004494:	fa93 f3a3 	rbit	r3, r3
 8004498:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800449a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800449c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80044a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e004      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80044ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d106      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	2102      	movs	r1, #2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fa5c 	bl	8003980 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2103      	movs	r1, #3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff f9c0 	bl	8003854 <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x4d0>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2103      	movs	r1, #3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff f9b5 	bl	8003854 <LL_ADC_GetOffsetChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	e017      	b.n	8004524 <HAL_ADC_ConfigChannel+0x500>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2103      	movs	r1, #3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff f9aa 	bl	8003854 <LL_ADC_GetOffsetChannel>
 8004500:	4603      	mov	r3, r0
 8004502:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800450c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004516:	2320      	movs	r3, #32
 8004518:	e003      	b.n	8004522 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800451a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <HAL_ADC_ConfigChannel+0x518>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	0e9b      	lsrs	r3, r3, #26
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	e011      	b.n	8004560 <HAL_ADC_ConfigChannel+0x53c>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800454a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800454c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800454e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004554:	2320      	movs	r3, #32
 8004556:	e003      	b.n	8004560 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	429a      	cmp	r2, r3
 8004562:	d14f      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2200      	movs	r2, #0
 800456a:	2103      	movs	r1, #3
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fa07 	bl	8003980 <LL_ADC_SetOffsetState>
 8004572:	e047      	b.n	8004604 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	069b      	lsls	r3, r3, #26
 8004584:	429a      	cmp	r2, r3
 8004586:	d107      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004596:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800459e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	069b      	lsls	r3, r3, #26
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045ba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	069b      	lsls	r3, r3, #26
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d107      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045de:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	069b      	lsls	r3, r3, #26
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d107      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004602:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fac9 	bl	8003ba0 <LL_ADC_IsEnabled>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8219 	bne.w	8004a48 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	461a      	mov	r2, r3
 8004624:	f7ff fa2e 	bl	8003a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4aa1      	ldr	r2, [pc, #644]	@ (80048b4 <HAL_ADC_ConfigChannel+0x890>)
 800462e:	4293      	cmp	r3, r2
 8004630:	f040 812e 	bne.w	8004890 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <HAL_ADC_ConfigChannel+0x638>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	3301      	adds	r3, #1
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2b09      	cmp	r3, #9
 8004652:	bf94      	ite	ls
 8004654:	2301      	movls	r3, #1
 8004656:	2300      	movhi	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e019      	b.n	8004690 <HAL_ADC_ConfigChannel+0x66c>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800466e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e003      	b.n	8004680 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3301      	adds	r3, #1
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2b09      	cmp	r3, #9
 8004688:	bf94      	ite	ls
 800468a:	2301      	movls	r3, #1
 800468c:	2300      	movhi	r3, #0
 800468e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004690:	2b00      	cmp	r3, #0
 8004692:	d079      	beq.n	8004788 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x68c>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	069b      	lsls	r3, r3, #26
 80046aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046ae:	e015      	b.n	80046dc <HAL_ADC_ConfigChannel+0x6b8>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80046be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80046c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e003      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80046cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	069b      	lsls	r3, r3, #26
 80046d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x6d8>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0e9b      	lsrs	r3, r3, #26
 80046ee:	3301      	adds	r3, #1
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2101      	movs	r1, #1
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	e017      	b.n	800472c <HAL_ADC_ConfigChannel+0x708>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800470a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800470c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800470e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004714:	2320      	movs	r3, #32
 8004716:	e003      	b.n	8004720 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	ea42 0103 	orr.w	r1, r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x72e>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	3301      	adds	r3, #1
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	051b      	lsls	r3, r3, #20
 8004750:	e018      	b.n	8004784 <HAL_ADC_ConfigChannel+0x760>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e003      	b.n	8004776 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3301      	adds	r3, #1
 8004778:	f003 021f 	and.w	r2, r3, #31
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004784:	430b      	orrs	r3, r1
 8004786:	e07e      	b.n	8004886 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x780>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	3301      	adds	r3, #1
 800479c:	069b      	lsls	r3, r3, #26
 800479e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047a2:	e015      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x7ac>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80047bc:	2320      	movs	r3, #32
 80047be:	e003      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	069b      	lsls	r3, r3, #26
 80047cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x7cc>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	e017      	b.n	8004820 <HAL_ADC_ConfigChannel+0x7fc>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	61bb      	str	r3, [r7, #24]
  return result;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	ea42 0103 	orr.w	r1, r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10d      	bne.n	800484c <HAL_ADC_ConfigChannel+0x828>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	3301      	adds	r3, #1
 8004838:	f003 021f 	and.w	r2, r3, #31
 800483c:	4613      	mov	r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4413      	add	r3, r2
 8004842:	3b1e      	subs	r3, #30
 8004844:	051b      	lsls	r3, r3, #20
 8004846:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800484a:	e01b      	b.n	8004884 <HAL_ADC_ConfigChannel+0x860>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fa93 f3a3 	rbit	r3, r3
 8004858:	60fb      	str	r3, [r7, #12]
  return result;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004864:	2320      	movs	r3, #32
 8004866:	e003      	b.n	8004870 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	3301      	adds	r3, #1
 8004872:	f003 021f 	and.w	r2, r3, #31
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	3b1e      	subs	r3, #30
 800487e:	051b      	lsls	r3, r3, #20
 8004880:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004884:	430b      	orrs	r3, r1
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	4619      	mov	r1, r3
 800488c:	f7ff f8ce 	bl	8003a2c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f280 80d7 	bge.w	8004a48 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a06      	ldr	r2, [pc, #24]	@ (80048b8 <HAL_ADC_ConfigChannel+0x894>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x88a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <HAL_ADC_ConfigChannel+0x898>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10a      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x8a0>
 80048ae:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <HAL_ADC_ConfigChannel+0x89c>)
 80048b0:	e009      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x8a2>
 80048b2:	bf00      	nop
 80048b4:	47ff0000 	.word	0x47ff0000
 80048b8:	40022000 	.word	0x40022000
 80048bc:	40022100 	.word	0x40022100
 80048c0:	40022300 	.word	0x40022300
 80048c4:	4b65      	ldr	r3, [pc, #404]	@ (8004a5c <HAL_ADC_ConfigChannel+0xa38>)
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe ff84 	bl	80037d4 <LL_ADC_GetCommonPathInternalCh>
 80048cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a62      	ldr	r2, [pc, #392]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa3c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_ADC_ConfigChannel+0x8c0>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a61      	ldr	r2, [pc, #388]	@ (8004a64 <HAL_ADC_ConfigChannel+0xa40>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d10e      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x8de>
 80048e4:	485e      	ldr	r0, [pc, #376]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa3c>)
 80048e6:	f7ff f95b 	bl	8003ba0 <LL_ADC_IsEnabled>
 80048ea:	4604      	mov	r4, r0
 80048ec:	485d      	ldr	r0, [pc, #372]	@ (8004a64 <HAL_ADC_ConfigChannel+0xa40>)
 80048ee:	f7ff f957 	bl	8003ba0 <LL_ADC_IsEnabled>
 80048f2:	4603      	mov	r3, r0
 80048f4:	4323      	orrs	r3, r4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e008      	b.n	8004914 <HAL_ADC_ConfigChannel+0x8f0>
 8004902:	4859      	ldr	r0, [pc, #356]	@ (8004a68 <HAL_ADC_ConfigChannel+0xa44>)
 8004904:	f7ff f94c 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8084 	beq.w	8004a22 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a53      	ldr	r2, [pc, #332]	@ (8004a6c <HAL_ADC_ConfigChannel+0xa48>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d132      	bne.n	800498a <HAL_ADC_ConfigChannel+0x966>
 8004924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d12c      	bne.n	800498a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a4c      	ldr	r2, [pc, #304]	@ (8004a68 <HAL_ADC_ConfigChannel+0xa44>)
 8004936:	4293      	cmp	r3, r2
 8004938:	f040 8086 	bne.w	8004a48 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a47      	ldr	r2, [pc, #284]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa3c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_ADC_ConfigChannel+0x92c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a46      	ldr	r2, [pc, #280]	@ (8004a64 <HAL_ADC_ConfigChannel+0xa40>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x930>
 8004950:	4a47      	ldr	r2, [pc, #284]	@ (8004a70 <HAL_ADC_ConfigChannel+0xa4c>)
 8004952:	e000      	b.n	8004956 <HAL_ADC_ConfigChannel+0x932>
 8004954:	4a41      	ldr	r2, [pc, #260]	@ (8004a5c <HAL_ADC_ConfigChannel+0xa38>)
 8004956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800495a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f7fe ff24 	bl	80037ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004966:	4b43      	ldr	r3, [pc, #268]	@ (8004a74 <HAL_ADC_ConfigChannel+0xa50>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	4a42      	ldr	r2, [pc, #264]	@ (8004a78 <HAL_ADC_ConfigChannel+0xa54>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	3301      	adds	r3, #1
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800497a:	e002      	b.n	8004982 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3b01      	subs	r3, #1
 8004980:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f9      	bne.n	800497c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004988:	e05e      	b.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a7c <HAL_ADC_ConfigChannel+0xa58>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d120      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x9b2>
 8004994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11a      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a30      	ldr	r2, [pc, #192]	@ (8004a68 <HAL_ADC_ConfigChannel+0xa44>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d14e      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa3c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_ADC_ConfigChannel+0x99a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a64 <HAL_ADC_ConfigChannel+0xa40>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x99e>
 80049be:	4a2c      	ldr	r2, [pc, #176]	@ (8004a70 <HAL_ADC_ConfigChannel+0xa4c>)
 80049c0:	e000      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x9a0>
 80049c2:	4a26      	ldr	r2, [pc, #152]	@ (8004a5c <HAL_ADC_ConfigChannel+0xa38>)
 80049c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f7fe feed 	bl	80037ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049d4:	e038      	b.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a29      	ldr	r2, [pc, #164]	@ (8004a80 <HAL_ADC_ConfigChannel+0xa5c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d133      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
 80049e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d12d      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a68 <HAL_ADC_ConfigChannel+0xa44>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d128      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <HAL_ADC_ConfigChannel+0xa3c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_ADC_ConfigChannel+0x9e6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <HAL_ADC_ConfigChannel+0xa40>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x9ea>
 8004a0a:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a0c:	e000      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x9ec>
 8004a0e:	4a13      	ldr	r2, [pc, #76]	@ (8004a5c <HAL_ADC_ConfigChannel+0xa38>)
 8004a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe fec7 	bl	80037ae <LL_ADC_SetCommonPathInternalCh>
 8004a20:	e012      	b.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004a34:	e008      	b.n	8004a48 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a50:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	37e4      	adds	r7, #228	@ 0xe4
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd90      	pop	{r4, r7, pc}
 8004a5c:	58026300 	.word	0x58026300
 8004a60:	40022000 	.word	0x40022000
 8004a64:	40022100 	.word	0x40022100
 8004a68:	58026000 	.word	0x58026000
 8004a6c:	c7520000 	.word	0xc7520000
 8004a70:	40022300 	.word	0x40022300
 8004a74:	24000000 	.word	0x24000000
 8004a78:	053e2d63 	.word	0x053e2d63
 8004a7c:	c3210000 	.word	0xc3210000
 8004a80:	cb840000 	.word	0xcb840000

08004a84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6c      	ldr	r2, [pc, #432]	@ (8004c44 <ADC_ConfigureBoostMode+0x1c0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <ADC_ConfigureBoostMode+0x1c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6b      	ldr	r2, [pc, #428]	@ (8004c48 <ADC_ConfigureBoostMode+0x1c4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d109      	bne.n	8004ab4 <ADC_ConfigureBoostMode+0x30>
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8004c4c <ADC_ConfigureBoostMode+0x1c8>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e008      	b.n	8004ac6 <ADC_ConfigureBoostMode+0x42>
 8004ab4:	4b66      	ldr	r3, [pc, #408]	@ (8004c50 <ADC_ConfigureBoostMode+0x1cc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01c      	beq.n	8004b04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004aca:	f003 fa23 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8004ace:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ad8:	d010      	beq.n	8004afc <ADC_ConfigureBoostMode+0x78>
 8004ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ade:	d873      	bhi.n	8004bc8 <ADC_ConfigureBoostMode+0x144>
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae4:	d002      	beq.n	8004aec <ADC_ConfigureBoostMode+0x68>
 8004ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aea:	d16d      	bne.n	8004bc8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	60fb      	str	r3, [r7, #12]
        break;
 8004afa:	e068      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	60fb      	str	r3, [r7, #12]
        break;
 8004b02:	e064      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004b04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	f004 fbfe 	bl	800930c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004b1a:	d051      	beq.n	8004bc0 <ADC_ConfigureBoostMode+0x13c>
 8004b1c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004b20:	d854      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b22:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004b26:	d047      	beq.n	8004bb8 <ADC_ConfigureBoostMode+0x134>
 8004b28:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004b2c:	d84e      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b2e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b32:	d03d      	beq.n	8004bb0 <ADC_ConfigureBoostMode+0x12c>
 8004b34:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b38:	d848      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b3e:	d033      	beq.n	8004ba8 <ADC_ConfigureBoostMode+0x124>
 8004b40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b44:	d842      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b46:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b4a:	d029      	beq.n	8004ba0 <ADC_ConfigureBoostMode+0x11c>
 8004b4c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b50:	d83c      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b52:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b56:	d01a      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b58:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b5c:	d836      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b5e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b62:	d014      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b64:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b68:	d830      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6e:	d00e      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b74:	d82a      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b7a:	d008      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b80:	d824      	bhi.n	8004bcc <ADC_ConfigureBoostMode+0x148>
 8004b82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b86:	d002      	beq.n	8004b8e <ADC_ConfigureBoostMode+0x10a>
 8004b88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b8c:	d11e      	bne.n	8004bcc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	0c9b      	lsrs	r3, r3, #18
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
        break;
 8004b9e:	e016      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
        break;
 8004ba6:	e012      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	60fb      	str	r3, [r7, #12]
        break;
 8004bae:	e00e      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	60fb      	str	r3, [r7, #12]
        break;
 8004bb6:	e00a      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	09db      	lsrs	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
        break;
 8004bbe:	e006      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	0a1b      	lsrs	r3, r3, #8
 8004bc4:	60fb      	str	r3, [r7, #12]
        break;
 8004bc6:	e002      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004bcc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c54 <ADC_ConfigureBoostMode+0x1d0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d808      	bhi.n	8004bee <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004bec:	e025      	b.n	8004c3a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <ADC_ConfigureBoostMode+0x1d4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d80a      	bhi.n	8004c0c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	e016      	b.n	8004c3a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	@ (8004c5c <ADC_ConfigureBoostMode+0x1d8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d80a      	bhi.n	8004c2a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	e007      	b.n	8004c3a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40022000 	.word	0x40022000
 8004c48:	40022100 	.word	0x40022100
 8004c4c:	40022300 	.word	0x40022300
 8004c50:	58026300 	.word	0x58026300
 8004c54:	005f5e10 	.word	0x005f5e10
 8004c58:	00bebc20 	.word	0x00bebc20
 8004c5c:	017d7840 	.word	0x017d7840

08004c60 <LL_ADC_IsEnabled>:
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <LL_ADC_IsEnabled+0x18>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <LL_ADC_IsEnabled+0x1a>
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d101      	bne.n	8004c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b0a3      	sub	sp, #140	@ 0x8c
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e0c1      	b.n	8004e4e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5e      	ldr	r2, [pc, #376]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d102      	bne.n	8004cea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e001      	b.n	8004cee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0a0      	b.n	8004e4e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ffb9 	bl	8004c86 <LL_ADC_REG_IsConversionOngoing>
 8004d14:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ffb2 	bl	8004c86 <LL_ADC_REG_IsConversionOngoing>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 8081 	bne.w	8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d17c      	bne.n	8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a48      	ldr	r2, [pc, #288]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a46      	ldr	r2, [pc, #280]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d101      	bne.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004d46:	4b46      	ldr	r3, [pc, #280]	@ (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d48:	e000      	b.n	8004d4c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004d4a:	4b46      	ldr	r3, [pc, #280]	@ (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d039      	beq.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a39      	ldr	r2, [pc, #228]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d10e      	bne.n	8004d9a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004d7c:	4836      	ldr	r0, [pc, #216]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d7e:	f7ff ff6f 	bl	8004c60 <LL_ADC_IsEnabled>
 8004d82:	4604      	mov	r4, r0
 8004d84:	4835      	ldr	r0, [pc, #212]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d86:	f7ff ff6b 	bl	8004c60 <LL_ADC_IsEnabled>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4323      	orrs	r3, r4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e008      	b.n	8004dac <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004d9a:	4833      	ldr	r0, [pc, #204]	@ (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d9c:	f7ff ff60 	bl	8004c60 <LL_ADC_IsEnabled>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d047      	beq.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004db0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	6811      	ldr	r1, [r2, #0]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dc8:	e03a      	b.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004dca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1f      	ldr	r2, [pc, #124]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d10e      	bne.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004dea:	481b      	ldr	r0, [pc, #108]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dec:	f7ff ff38 	bl	8004c60 <LL_ADC_IsEnabled>
 8004df0:	4604      	mov	r4, r0
 8004df2:	481a      	ldr	r0, [pc, #104]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004df4:	f7ff ff34 	bl	8004c60 <LL_ADC_IsEnabled>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4323      	orrs	r3, r4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	e008      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004e08:	4817      	ldr	r0, [pc, #92]	@ (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e0a:	f7ff ff29 	bl	8004c60 <LL_ADC_IsEnabled>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d010      	beq.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2a:	e009      	b.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004e3e:	e000      	b.n	8004e42 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e4a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	378c      	adds	r7, #140	@ 0x8c
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40022000 	.word	0x40022000
 8004e5c:	40022100 	.word	0x40022100
 8004e60:	40022300 	.word	0x40022300
 8004e64:	58026300 	.word	0x58026300
 8004e68:	58026000 	.word	0x58026000
 8004e6c:	fffff0e0 	.word	0xfffff0e0

08004e70 <__NVIC_SetPriorityGrouping>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9e:	4a04      	ldr	r2, [pc, #16]	@ (8004eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	60d3      	str	r3, [r2, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000ed00 	.word	0xe000ed00
 8004eb4:	05fa0000 	.word	0x05fa0000

08004eb8 <__NVIC_GetPriorityGrouping>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	0a1b      	lsrs	r3, r3, #8
 8004ec2:	f003 0307 	and.w	r3, r3, #7
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <__NVIC_EnableIRQ>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db0b      	blt.n	8004efe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	f003 021f 	and.w	r2, r3, #31
 8004eec:	4907      	ldr	r1, [pc, #28]	@ (8004f0c <__NVIC_EnableIRQ+0x38>)
 8004eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e100 	.word	0xe000e100

08004f10 <__NVIC_SetPriority>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db0a      	blt.n	8004f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	490c      	ldr	r1, [pc, #48]	@ (8004f5c <__NVIC_SetPriority+0x4c>)
 8004f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2e:	0112      	lsls	r2, r2, #4
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	440b      	add	r3, r1
 8004f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f38:	e00a      	b.n	8004f50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4908      	ldr	r1, [pc, #32]	@ (8004f60 <__NVIC_SetPriority+0x50>)
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	3b04      	subs	r3, #4
 8004f48:	0112      	lsls	r2, r2, #4
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	761a      	strb	r2, [r3, #24]
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000e100 	.word	0xe000e100
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <NVIC_EncodePriority>:
{
 8004f64:	b480      	push	{r7}
 8004f66:	b089      	sub	sp, #36	@ 0x24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	bf28      	it	cs
 8004f82:	2304      	movcs	r3, #4
 8004f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2b06      	cmp	r3, #6
 8004f8c:	d902      	bls.n	8004f94 <NVIC_EncodePriority+0x30>
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3b03      	subs	r3, #3
 8004f92:	e000      	b.n	8004f96 <NVIC_EncodePriority+0x32>
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fac:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	43d9      	mvns	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fbc:	4313      	orrs	r3, r2
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	@ 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <SysTick_Config>:
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fdc:	d301      	bcc.n	8004fe2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e00f      	b.n	8005002 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800500c <SysTick_Config+0x40>)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fea:	210f      	movs	r1, #15
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	f7ff ff8e 	bl	8004f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <SysTick_Config+0x40>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffa:	4b04      	ldr	r3, [pc, #16]	@ (800500c <SysTick_Config+0x40>)
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	e000e010 	.word	0xe000e010

08005010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff ff29 	bl	8004e70 <__NVIC_SetPriorityGrouping>
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005034:	f7ff ff40 	bl	8004eb8 <__NVIC_GetPriorityGrouping>
 8005038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff90 	bl	8004f64 <NVIC_EncodePriority>
 8005044:	4602      	mov	r2, r0
 8005046:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff5f 	bl	8004f10 <__NVIC_SetPriority>
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	4603      	mov	r3, r0
 8005062:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff33 	bl	8004ed4 <__NVIC_EnableIRQ>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffa4 	bl	8004fcc <SysTick_Config>
 8005084:	4603      	mov	r3, r0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005094:	f3bf 8f5f 	dmb	sy
}
 8005098:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800509a:	4b07      	ldr	r3, [pc, #28]	@ (80050b8 <HAL_MPU_Disable+0x28>)
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	4a06      	ldr	r2, [pc, #24]	@ (80050b8 <HAL_MPU_Disable+0x28>)
 80050a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80050a6:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <HAL_MPU_Disable+0x2c>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	605a      	str	r2, [r3, #4]
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	e000ed00 	.word	0xe000ed00
 80050bc:	e000ed90 	.word	0xe000ed90

080050c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80050c8:	4a0b      	ldr	r2, [pc, #44]	@ (80050f8 <HAL_MPU_Enable+0x38>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <HAL_MPU_Enable+0x3c>)
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <HAL_MPU_Enable+0x3c>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050dc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80050de:	f3bf 8f4f 	dsb	sy
}
 80050e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050e4:	f3bf 8f6f 	isb	sy
}
 80050e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	e000ed90 	.word	0xe000ed90
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	785a      	ldrb	r2, [r3, #1]
 800510c:	4b1b      	ldr	r3, [pc, #108]	@ (800517c <HAL_MPU_ConfigRegion+0x7c>)
 800510e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005110:	4b1a      	ldr	r3, [pc, #104]	@ (800517c <HAL_MPU_ConfigRegion+0x7c>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	4a19      	ldr	r2, [pc, #100]	@ (800517c <HAL_MPU_ConfigRegion+0x7c>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800511c:	4a17      	ldr	r2, [pc, #92]	@ (800517c <HAL_MPU_ConfigRegion+0x7c>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	7b1b      	ldrb	r3, [r3, #12]
 8005128:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	7adb      	ldrb	r3, [r3, #11]
 800512e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005130:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7a9b      	ldrb	r3, [r3, #10]
 8005136:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005138:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	7b5b      	ldrb	r3, [r3, #13]
 800513e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005140:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	7b9b      	ldrb	r3, [r3, #14]
 8005146:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005148:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	7bdb      	ldrb	r3, [r3, #15]
 800514e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005150:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7a5b      	ldrb	r3, [r3, #9]
 8005156:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005158:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7a1b      	ldrb	r3, [r3, #8]
 800515e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005160:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005168:	4a04      	ldr	r2, [pc, #16]	@ (800517c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800516a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800516c:	6113      	str	r3, [r2, #16]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	e000ed90 	.word	0xe000ed90

08005180 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005188:	f7fe face 	bl	8003728 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e2dc      	b.n	8005752 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d008      	beq.n	80051b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e2cd      	b.n	8005752 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a76      	ldr	r2, [pc, #472]	@ (8005394 <HAL_DMA_Abort+0x214>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a74      	ldr	r2, [pc, #464]	@ (8005398 <HAL_DMA_Abort+0x218>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a73      	ldr	r2, [pc, #460]	@ (800539c <HAL_DMA_Abort+0x21c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a71      	ldr	r2, [pc, #452]	@ (80053a0 <HAL_DMA_Abort+0x220>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a70      	ldr	r2, [pc, #448]	@ (80053a4 <HAL_DMA_Abort+0x224>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a6e      	ldr	r2, [pc, #440]	@ (80053a8 <HAL_DMA_Abort+0x228>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a6d      	ldr	r2, [pc, #436]	@ (80053ac <HAL_DMA_Abort+0x22c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6b      	ldr	r2, [pc, #428]	@ (80053b0 <HAL_DMA_Abort+0x230>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a6a      	ldr	r2, [pc, #424]	@ (80053b4 <HAL_DMA_Abort+0x234>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a68      	ldr	r2, [pc, #416]	@ (80053b8 <HAL_DMA_Abort+0x238>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a67      	ldr	r2, [pc, #412]	@ (80053bc <HAL_DMA_Abort+0x23c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a65      	ldr	r2, [pc, #404]	@ (80053c0 <HAL_DMA_Abort+0x240>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a64      	ldr	r2, [pc, #400]	@ (80053c4 <HAL_DMA_Abort+0x244>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a62      	ldr	r2, [pc, #392]	@ (80053c8 <HAL_DMA_Abort+0x248>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a61      	ldr	r2, [pc, #388]	@ (80053cc <HAL_DMA_Abort+0x24c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_DMA_Abort+0xd6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5f      	ldr	r2, [pc, #380]	@ (80053d0 <HAL_DMA_Abort+0x250>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_DMA_Abort+0xda>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_DMA_Abort+0xdc>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 021e 	bic.w	r2, r2, #30
 800526e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800527e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e00a      	b.n	800529e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 020e 	bic.w	r2, r2, #14
 8005296:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a3c      	ldr	r2, [pc, #240]	@ (8005394 <HAL_DMA_Abort+0x214>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d072      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005398 <HAL_DMA_Abort+0x218>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d06d      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a39      	ldr	r2, [pc, #228]	@ (800539c <HAL_DMA_Abort+0x21c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d068      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a37      	ldr	r2, [pc, #220]	@ (80053a0 <HAL_DMA_Abort+0x220>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d063      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a36      	ldr	r2, [pc, #216]	@ (80053a4 <HAL_DMA_Abort+0x224>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d05e      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a34      	ldr	r2, [pc, #208]	@ (80053a8 <HAL_DMA_Abort+0x228>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d059      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a33      	ldr	r2, [pc, #204]	@ (80053ac <HAL_DMA_Abort+0x22c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d054      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a31      	ldr	r2, [pc, #196]	@ (80053b0 <HAL_DMA_Abort+0x230>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d04f      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a30      	ldr	r2, [pc, #192]	@ (80053b4 <HAL_DMA_Abort+0x234>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <HAL_DMA_Abort+0x238>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2d      	ldr	r2, [pc, #180]	@ (80053bc <HAL_DMA_Abort+0x23c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2b      	ldr	r2, [pc, #172]	@ (80053c0 <HAL_DMA_Abort+0x240>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2a      	ldr	r2, [pc, #168]	@ (80053c4 <HAL_DMA_Abort+0x244>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a28      	ldr	r2, [pc, #160]	@ (80053c8 <HAL_DMA_Abort+0x248>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a27      	ldr	r2, [pc, #156]	@ (80053cc <HAL_DMA_Abort+0x24c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a25      	ldr	r2, [pc, #148]	@ (80053d0 <HAL_DMA_Abort+0x250>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a24      	ldr	r2, [pc, #144]	@ (80053d4 <HAL_DMA_Abort+0x254>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	@ (80053d8 <HAL_DMA_Abort+0x258>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	@ (80053dc <HAL_DMA_Abort+0x25c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	@ (80053e0 <HAL_DMA_Abort+0x260>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <HAL_DMA_Abort+0x264>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <HAL_DMA_Abort+0x268>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ec <HAL_DMA_Abort+0x26c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMA_Abort+0x20e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <HAL_DMA_Abort+0x270>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d132      	bne.n	80053f4 <HAL_DMA_Abort+0x274>
 800538e:	2301      	movs	r3, #1
 8005390:	e031      	b.n	80053f6 <HAL_DMA_Abort+0x276>
 8005392:	bf00      	nop
 8005394:	40020010 	.word	0x40020010
 8005398:	40020028 	.word	0x40020028
 800539c:	40020040 	.word	0x40020040
 80053a0:	40020058 	.word	0x40020058
 80053a4:	40020070 	.word	0x40020070
 80053a8:	40020088 	.word	0x40020088
 80053ac:	400200a0 	.word	0x400200a0
 80053b0:	400200b8 	.word	0x400200b8
 80053b4:	40020410 	.word	0x40020410
 80053b8:	40020428 	.word	0x40020428
 80053bc:	40020440 	.word	0x40020440
 80053c0:	40020458 	.word	0x40020458
 80053c4:	40020470 	.word	0x40020470
 80053c8:	40020488 	.word	0x40020488
 80053cc:	400204a0 	.word	0x400204a0
 80053d0:	400204b8 	.word	0x400204b8
 80053d4:	58025408 	.word	0x58025408
 80053d8:	5802541c 	.word	0x5802541c
 80053dc:	58025430 	.word	0x58025430
 80053e0:	58025444 	.word	0x58025444
 80053e4:	58025458 	.word	0x58025458
 80053e8:	5802546c 	.word	0x5802546c
 80053ec:	58025480 	.word	0x58025480
 80053f0:	58025494 	.word	0x58025494
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005408:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6d      	ldr	r2, [pc, #436]	@ (80055c4 <HAL_DMA_Abort+0x444>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d04a      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a6b      	ldr	r2, [pc, #428]	@ (80055c8 <HAL_DMA_Abort+0x448>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d045      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6a      	ldr	r2, [pc, #424]	@ (80055cc <HAL_DMA_Abort+0x44c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d040      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a68      	ldr	r2, [pc, #416]	@ (80055d0 <HAL_DMA_Abort+0x450>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d03b      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a67      	ldr	r2, [pc, #412]	@ (80055d4 <HAL_DMA_Abort+0x454>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d036      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a65      	ldr	r2, [pc, #404]	@ (80055d8 <HAL_DMA_Abort+0x458>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d031      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a64      	ldr	r2, [pc, #400]	@ (80055dc <HAL_DMA_Abort+0x45c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d02c      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a62      	ldr	r2, [pc, #392]	@ (80055e0 <HAL_DMA_Abort+0x460>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d027      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a61      	ldr	r2, [pc, #388]	@ (80055e4 <HAL_DMA_Abort+0x464>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5f      	ldr	r2, [pc, #380]	@ (80055e8 <HAL_DMA_Abort+0x468>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01d      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a5e      	ldr	r2, [pc, #376]	@ (80055ec <HAL_DMA_Abort+0x46c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a5c      	ldr	r2, [pc, #368]	@ (80055f0 <HAL_DMA_Abort+0x470>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a5b      	ldr	r2, [pc, #364]	@ (80055f4 <HAL_DMA_Abort+0x474>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a59      	ldr	r2, [pc, #356]	@ (80055f8 <HAL_DMA_Abort+0x478>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a58      	ldr	r2, [pc, #352]	@ (80055fc <HAL_DMA_Abort+0x47c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_DMA_Abort+0x32a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a56      	ldr	r2, [pc, #344]	@ (8005600 <HAL_DMA_Abort+0x480>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <HAL_DMA_Abort+0x33c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e007      	b.n	80054cc <HAL_DMA_Abort+0x34c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0201 	bic.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054cc:	e013      	b.n	80054f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054ce:	f7fe f92b 	bl	8003728 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b05      	cmp	r3, #5
 80054da:	d90c      	bls.n	80054f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2203      	movs	r2, #3
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e12d      	b.n	8005752 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2f      	ldr	r2, [pc, #188]	@ (80055c4 <HAL_DMA_Abort+0x444>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d04a      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a2d      	ldr	r2, [pc, #180]	@ (80055c8 <HAL_DMA_Abort+0x448>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d045      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2c      	ldr	r2, [pc, #176]	@ (80055cc <HAL_DMA_Abort+0x44c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d040      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2a      	ldr	r2, [pc, #168]	@ (80055d0 <HAL_DMA_Abort+0x450>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d03b      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a29      	ldr	r2, [pc, #164]	@ (80055d4 <HAL_DMA_Abort+0x454>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d036      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a27      	ldr	r2, [pc, #156]	@ (80055d8 <HAL_DMA_Abort+0x458>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d031      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a26      	ldr	r2, [pc, #152]	@ (80055dc <HAL_DMA_Abort+0x45c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d02c      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a24      	ldr	r2, [pc, #144]	@ (80055e0 <HAL_DMA_Abort+0x460>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d027      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a23      	ldr	r2, [pc, #140]	@ (80055e4 <HAL_DMA_Abort+0x464>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d022      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a21      	ldr	r2, [pc, #132]	@ (80055e8 <HAL_DMA_Abort+0x468>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01d      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a20      	ldr	r2, [pc, #128]	@ (80055ec <HAL_DMA_Abort+0x46c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1e      	ldr	r2, [pc, #120]	@ (80055f0 <HAL_DMA_Abort+0x470>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <HAL_DMA_Abort+0x474>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <HAL_DMA_Abort+0x478>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1a      	ldr	r2, [pc, #104]	@ (80055fc <HAL_DMA_Abort+0x47c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_DMA_Abort+0x422>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a18      	ldr	r2, [pc, #96]	@ (8005600 <HAL_DMA_Abort+0x480>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_DMA_Abort+0x426>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <HAL_DMA_Abort+0x428>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02b      	beq.n	8005604 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	223f      	movs	r2, #63	@ 0x3f
 80055bc:	409a      	lsls	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	e02a      	b.n	800561a <HAL_DMA_Abort+0x49a>
 80055c4:	40020010 	.word	0x40020010
 80055c8:	40020028 	.word	0x40020028
 80055cc:	40020040 	.word	0x40020040
 80055d0:	40020058 	.word	0x40020058
 80055d4:	40020070 	.word	0x40020070
 80055d8:	40020088 	.word	0x40020088
 80055dc:	400200a0 	.word	0x400200a0
 80055e0:	400200b8 	.word	0x400200b8
 80055e4:	40020410 	.word	0x40020410
 80055e8:	40020428 	.word	0x40020428
 80055ec:	40020440 	.word	0x40020440
 80055f0:	40020458 	.word	0x40020458
 80055f4:	40020470 	.word	0x40020470
 80055f8:	40020488 	.word	0x40020488
 80055fc:	400204a0 	.word	0x400204a0
 8005600:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005608:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2201      	movs	r2, #1
 8005614:	409a      	lsls	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a4f      	ldr	r2, [pc, #316]	@ (800575c <HAL_DMA_Abort+0x5dc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d072      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a4d      	ldr	r2, [pc, #308]	@ (8005760 <HAL_DMA_Abort+0x5e0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d06d      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a4c      	ldr	r2, [pc, #304]	@ (8005764 <HAL_DMA_Abort+0x5e4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d068      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a4a      	ldr	r2, [pc, #296]	@ (8005768 <HAL_DMA_Abort+0x5e8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d063      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a49      	ldr	r2, [pc, #292]	@ (800576c <HAL_DMA_Abort+0x5ec>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d05e      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a47      	ldr	r2, [pc, #284]	@ (8005770 <HAL_DMA_Abort+0x5f0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d059      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a46      	ldr	r2, [pc, #280]	@ (8005774 <HAL_DMA_Abort+0x5f4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d054      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a44      	ldr	r2, [pc, #272]	@ (8005778 <HAL_DMA_Abort+0x5f8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d04f      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a43      	ldr	r2, [pc, #268]	@ (800577c <HAL_DMA_Abort+0x5fc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d04a      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a41      	ldr	r2, [pc, #260]	@ (8005780 <HAL_DMA_Abort+0x600>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d045      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a40      	ldr	r2, [pc, #256]	@ (8005784 <HAL_DMA_Abort+0x604>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d040      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a3e      	ldr	r2, [pc, #248]	@ (8005788 <HAL_DMA_Abort+0x608>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d03b      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a3d      	ldr	r2, [pc, #244]	@ (800578c <HAL_DMA_Abort+0x60c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d036      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005790 <HAL_DMA_Abort+0x610>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d031      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3a      	ldr	r2, [pc, #232]	@ (8005794 <HAL_DMA_Abort+0x614>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d02c      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a38      	ldr	r2, [pc, #224]	@ (8005798 <HAL_DMA_Abort+0x618>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d027      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a37      	ldr	r2, [pc, #220]	@ (800579c <HAL_DMA_Abort+0x61c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d022      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a35      	ldr	r2, [pc, #212]	@ (80057a0 <HAL_DMA_Abort+0x620>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01d      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a34      	ldr	r2, [pc, #208]	@ (80057a4 <HAL_DMA_Abort+0x624>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a32      	ldr	r2, [pc, #200]	@ (80057a8 <HAL_DMA_Abort+0x628>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a31      	ldr	r2, [pc, #196]	@ (80057ac <HAL_DMA_Abort+0x62c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2f      	ldr	r2, [pc, #188]	@ (80057b0 <HAL_DMA_Abort+0x630>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2e      	ldr	r2, [pc, #184]	@ (80057b4 <HAL_DMA_Abort+0x634>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_DMA_Abort+0x58a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2c      	ldr	r2, [pc, #176]	@ (80057b8 <HAL_DMA_Abort+0x638>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d101      	bne.n	800570e <HAL_DMA_Abort+0x58e>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_DMA_Abort+0x590>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800571c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005734:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800573e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40020010 	.word	0x40020010
 8005760:	40020028 	.word	0x40020028
 8005764:	40020040 	.word	0x40020040
 8005768:	40020058 	.word	0x40020058
 800576c:	40020070 	.word	0x40020070
 8005770:	40020088 	.word	0x40020088
 8005774:	400200a0 	.word	0x400200a0
 8005778:	400200b8 	.word	0x400200b8
 800577c:	40020410 	.word	0x40020410
 8005780:	40020428 	.word	0x40020428
 8005784:	40020440 	.word	0x40020440
 8005788:	40020458 	.word	0x40020458
 800578c:	40020470 	.word	0x40020470
 8005790:	40020488 	.word	0x40020488
 8005794:	400204a0 	.word	0x400204a0
 8005798:	400204b8 	.word	0x400204b8
 800579c:	58025408 	.word	0x58025408
 80057a0:	5802541c 	.word	0x5802541c
 80057a4:	58025430 	.word	0x58025430
 80057a8:	58025444 	.word	0x58025444
 80057ac:	58025458 	.word	0x58025458
 80057b0:	5802546c 	.word	0x5802546c
 80057b4:	58025480 	.word	0x58025480
 80057b8:	58025494 	.word	0x58025494

080057bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e237      	b.n	8005c3e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d004      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2280      	movs	r2, #128	@ 0x80
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e22c      	b.n	8005c3e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a5c      	ldr	r2, [pc, #368]	@ (800595c <HAL_DMA_Abort_IT+0x1a0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d04a      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005960 <HAL_DMA_Abort_IT+0x1a4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d045      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a59      	ldr	r2, [pc, #356]	@ (8005964 <HAL_DMA_Abort_IT+0x1a8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d040      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a58      	ldr	r2, [pc, #352]	@ (8005968 <HAL_DMA_Abort_IT+0x1ac>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d03b      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a56      	ldr	r2, [pc, #344]	@ (800596c <HAL_DMA_Abort_IT+0x1b0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d036      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a55      	ldr	r2, [pc, #340]	@ (8005970 <HAL_DMA_Abort_IT+0x1b4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d031      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a53      	ldr	r2, [pc, #332]	@ (8005974 <HAL_DMA_Abort_IT+0x1b8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d02c      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a52      	ldr	r2, [pc, #328]	@ (8005978 <HAL_DMA_Abort_IT+0x1bc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d027      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a50      	ldr	r2, [pc, #320]	@ (800597c <HAL_DMA_Abort_IT+0x1c0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d022      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a4f      	ldr	r2, [pc, #316]	@ (8005980 <HAL_DMA_Abort_IT+0x1c4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d01d      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a4d      	ldr	r2, [pc, #308]	@ (8005984 <HAL_DMA_Abort_IT+0x1c8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d018      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a4c      	ldr	r2, [pc, #304]	@ (8005988 <HAL_DMA_Abort_IT+0x1cc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a4a      	ldr	r2, [pc, #296]	@ (800598c <HAL_DMA_Abort_IT+0x1d0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a49      	ldr	r2, [pc, #292]	@ (8005990 <HAL_DMA_Abort_IT+0x1d4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a47      	ldr	r2, [pc, #284]	@ (8005994 <HAL_DMA_Abort_IT+0x1d8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_DMA_Abort_IT+0xc8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a46      	ldr	r2, [pc, #280]	@ (8005998 <HAL_DMA_Abort_IT+0x1dc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <HAL_DMA_Abort_IT+0xcc>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_DMA_Abort_IT+0xce>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8086 	beq.w	800599c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2204      	movs	r2, #4
 8005894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2f      	ldr	r2, [pc, #188]	@ (800595c <HAL_DMA_Abort_IT+0x1a0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d04a      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005960 <HAL_DMA_Abort_IT+0x1a4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d045      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005964 <HAL_DMA_Abort_IT+0x1a8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d040      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005968 <HAL_DMA_Abort_IT+0x1ac>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d03b      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a29      	ldr	r2, [pc, #164]	@ (800596c <HAL_DMA_Abort_IT+0x1b0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d036      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a28      	ldr	r2, [pc, #160]	@ (8005970 <HAL_DMA_Abort_IT+0x1b4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d031      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a26      	ldr	r2, [pc, #152]	@ (8005974 <HAL_DMA_Abort_IT+0x1b8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d02c      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a25      	ldr	r2, [pc, #148]	@ (8005978 <HAL_DMA_Abort_IT+0x1bc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d027      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a23      	ldr	r2, [pc, #140]	@ (800597c <HAL_DMA_Abort_IT+0x1c0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d022      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a22      	ldr	r2, [pc, #136]	@ (8005980 <HAL_DMA_Abort_IT+0x1c4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d01d      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a20      	ldr	r2, [pc, #128]	@ (8005984 <HAL_DMA_Abort_IT+0x1c8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d018      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1f      	ldr	r2, [pc, #124]	@ (8005988 <HAL_DMA_Abort_IT+0x1cc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d013      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1d      	ldr	r2, [pc, #116]	@ (800598c <HAL_DMA_Abort_IT+0x1d0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00e      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1c      	ldr	r2, [pc, #112]	@ (8005990 <HAL_DMA_Abort_IT+0x1d4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1a      	ldr	r2, [pc, #104]	@ (8005994 <HAL_DMA_Abort_IT+0x1d8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_DMA_Abort_IT+0x17c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a19      	ldr	r2, [pc, #100]	@ (8005998 <HAL_DMA_Abort_IT+0x1dc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d108      	bne.n	800594a <HAL_DMA_Abort_IT+0x18e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	e178      	b.n	8005c3c <HAL_DMA_Abort_IT+0x480>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e16f      	b.n	8005c3c <HAL_DMA_Abort_IT+0x480>
 800595c:	40020010 	.word	0x40020010
 8005960:	40020028 	.word	0x40020028
 8005964:	40020040 	.word	0x40020040
 8005968:	40020058 	.word	0x40020058
 800596c:	40020070 	.word	0x40020070
 8005970:	40020088 	.word	0x40020088
 8005974:	400200a0 	.word	0x400200a0
 8005978:	400200b8 	.word	0x400200b8
 800597c:	40020410 	.word	0x40020410
 8005980:	40020428 	.word	0x40020428
 8005984:	40020440 	.word	0x40020440
 8005988:	40020458 	.word	0x40020458
 800598c:	40020470 	.word	0x40020470
 8005990:	40020488 	.word	0x40020488
 8005994:	400204a0 	.word	0x400204a0
 8005998:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 020e 	bic.w	r2, r2, #14
 80059aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a6c      	ldr	r2, [pc, #432]	@ (8005b64 <HAL_DMA_Abort_IT+0x3a8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d04a      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005b68 <HAL_DMA_Abort_IT+0x3ac>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d045      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a69      	ldr	r2, [pc, #420]	@ (8005b6c <HAL_DMA_Abort_IT+0x3b0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d040      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a68      	ldr	r2, [pc, #416]	@ (8005b70 <HAL_DMA_Abort_IT+0x3b4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d03b      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a66      	ldr	r2, [pc, #408]	@ (8005b74 <HAL_DMA_Abort_IT+0x3b8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d036      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a65      	ldr	r2, [pc, #404]	@ (8005b78 <HAL_DMA_Abort_IT+0x3bc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d031      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a63      	ldr	r2, [pc, #396]	@ (8005b7c <HAL_DMA_Abort_IT+0x3c0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02c      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a62      	ldr	r2, [pc, #392]	@ (8005b80 <HAL_DMA_Abort_IT+0x3c4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d027      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a60      	ldr	r2, [pc, #384]	@ (8005b84 <HAL_DMA_Abort_IT+0x3c8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d022      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8005b88 <HAL_DMA_Abort_IT+0x3cc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d01d      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a5d      	ldr	r2, [pc, #372]	@ (8005b8c <HAL_DMA_Abort_IT+0x3d0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d018      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8005b90 <HAL_DMA_Abort_IT+0x3d4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5a      	ldr	r2, [pc, #360]	@ (8005b94 <HAL_DMA_Abort_IT+0x3d8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00e      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a59      	ldr	r2, [pc, #356]	@ (8005b98 <HAL_DMA_Abort_IT+0x3dc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d009      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a57      	ldr	r2, [pc, #348]	@ (8005b9c <HAL_DMA_Abort_IT+0x3e0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_DMA_Abort_IT+0x290>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a56      	ldr	r2, [pc, #344]	@ (8005ba0 <HAL_DMA_Abort_IT+0x3e4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d108      	bne.n	8005a5e <HAL_DMA_Abort_IT+0x2a2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e007      	b.n	8005a6e <HAL_DMA_Abort_IT+0x2b2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a3c      	ldr	r2, [pc, #240]	@ (8005b64 <HAL_DMA_Abort_IT+0x3a8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d072      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8005b68 <HAL_DMA_Abort_IT+0x3ac>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d06d      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a39      	ldr	r2, [pc, #228]	@ (8005b6c <HAL_DMA_Abort_IT+0x3b0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d068      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a37      	ldr	r2, [pc, #220]	@ (8005b70 <HAL_DMA_Abort_IT+0x3b4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d063      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a36      	ldr	r2, [pc, #216]	@ (8005b74 <HAL_DMA_Abort_IT+0x3b8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d05e      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a34      	ldr	r2, [pc, #208]	@ (8005b78 <HAL_DMA_Abort_IT+0x3bc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d059      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a33      	ldr	r2, [pc, #204]	@ (8005b7c <HAL_DMA_Abort_IT+0x3c0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d054      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a31      	ldr	r2, [pc, #196]	@ (8005b80 <HAL_DMA_Abort_IT+0x3c4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d04f      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a30      	ldr	r2, [pc, #192]	@ (8005b84 <HAL_DMA_Abort_IT+0x3c8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d04a      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a2e      	ldr	r2, [pc, #184]	@ (8005b88 <HAL_DMA_Abort_IT+0x3cc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d045      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8005b8c <HAL_DMA_Abort_IT+0x3d0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d040      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b90 <HAL_DMA_Abort_IT+0x3d4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d03b      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a2a      	ldr	r2, [pc, #168]	@ (8005b94 <HAL_DMA_Abort_IT+0x3d8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d036      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a28      	ldr	r2, [pc, #160]	@ (8005b98 <HAL_DMA_Abort_IT+0x3dc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d031      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a27      	ldr	r2, [pc, #156]	@ (8005b9c <HAL_DMA_Abort_IT+0x3e0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d02c      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a25      	ldr	r2, [pc, #148]	@ (8005ba0 <HAL_DMA_Abort_IT+0x3e4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d027      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a24      	ldr	r2, [pc, #144]	@ (8005ba4 <HAL_DMA_Abort_IT+0x3e8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d022      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	@ (8005ba8 <HAL_DMA_Abort_IT+0x3ec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01d      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a21      	ldr	r2, [pc, #132]	@ (8005bac <HAL_DMA_Abort_IT+0x3f0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d018      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb0 <HAL_DMA_Abort_IT+0x3f4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb4 <HAL_DMA_Abort_IT+0x3f8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb8 <HAL_DMA_Abort_IT+0x3fc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bbc <HAL_DMA_Abort_IT+0x400>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_DMA_Abort_IT+0x3a2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a19      	ldr	r2, [pc, #100]	@ (8005bc0 <HAL_DMA_Abort_IT+0x404>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d132      	bne.n	8005bc4 <HAL_DMA_Abort_IT+0x408>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e031      	b.n	8005bc6 <HAL_DMA_Abort_IT+0x40a>
 8005b62:	bf00      	nop
 8005b64:	40020010 	.word	0x40020010
 8005b68:	40020028 	.word	0x40020028
 8005b6c:	40020040 	.word	0x40020040
 8005b70:	40020058 	.word	0x40020058
 8005b74:	40020070 	.word	0x40020070
 8005b78:	40020088 	.word	0x40020088
 8005b7c:	400200a0 	.word	0x400200a0
 8005b80:	400200b8 	.word	0x400200b8
 8005b84:	40020410 	.word	0x40020410
 8005b88:	40020428 	.word	0x40020428
 8005b8c:	40020440 	.word	0x40020440
 8005b90:	40020458 	.word	0x40020458
 8005b94:	40020470 	.word	0x40020470
 8005b98:	40020488 	.word	0x40020488
 8005b9c:	400204a0 	.word	0x400204a0
 8005ba0:	400204b8 	.word	0x400204b8
 8005ba4:	58025408 	.word	0x58025408
 8005ba8:	5802541c 	.word	0x5802541c
 8005bac:	58025430 	.word	0x58025430
 8005bb0:	58025444 	.word	0x58025444
 8005bb4:	58025458 	.word	0x58025458
 8005bb8:	5802546c 	.word	0x5802546c
 8005bbc:	58025480 	.word	0x58025480
 8005bc0:	58025494 	.word	0x58025494
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d028      	beq.n	8005c1c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bde:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2201      	movs	r2, #1
 8005bea:	409a      	lsls	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005bf8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00c      	beq.n	8005c1c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop

08005c48 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c56:	b2db      	uxtb	r3, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b089      	sub	sp, #36	@ 0x24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c72:	4b86      	ldr	r3, [pc, #536]	@ (8005e8c <HAL_GPIO_Init+0x228>)
 8005c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c76:	e18c      	b.n	8005f92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	fa01 f303 	lsl.w	r3, r1, r3
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 817e 	beq.w	8005f8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d005      	beq.n	8005ca8 <HAL_GPIO_Init+0x44>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d130      	bne.n	8005d0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cde:	2201      	movs	r2, #1
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4013      	ands	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	f003 0201 	and.w	r2, r3, #1
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d017      	beq.n	8005d46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	2203      	movs	r2, #3
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d123      	bne.n	8005d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	08da      	lsrs	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3208      	adds	r2, #8
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	220f      	movs	r2, #15
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	08da      	lsrs	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3208      	adds	r2, #8
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	2203      	movs	r2, #3
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0203 	and.w	r2, r3, #3
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80d8 	beq.w	8005f8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8005e90 <HAL_GPIO_Init+0x22c>)
 8005dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005de2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e90 <HAL_GPIO_Init+0x22c>)
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005dec:	4b28      	ldr	r3, [pc, #160]	@ (8005e90 <HAL_GPIO_Init+0x22c>)
 8005dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dfa:	4a26      	ldr	r2, [pc, #152]	@ (8005e94 <HAL_GPIO_Init+0x230>)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	3302      	adds	r3, #2
 8005e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	220f      	movs	r2, #15
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1d      	ldr	r2, [pc, #116]	@ (8005e98 <HAL_GPIO_Init+0x234>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d04a      	beq.n	8005ebc <HAL_GPIO_Init+0x258>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1c      	ldr	r2, [pc, #112]	@ (8005e9c <HAL_GPIO_Init+0x238>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d02b      	beq.n	8005e86 <HAL_GPIO_Init+0x222>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea0 <HAL_GPIO_Init+0x23c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d025      	beq.n	8005e82 <HAL_GPIO_Init+0x21e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea4 <HAL_GPIO_Init+0x240>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01f      	beq.n	8005e7e <HAL_GPIO_Init+0x21a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a19      	ldr	r2, [pc, #100]	@ (8005ea8 <HAL_GPIO_Init+0x244>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d019      	beq.n	8005e7a <HAL_GPIO_Init+0x216>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a18      	ldr	r2, [pc, #96]	@ (8005eac <HAL_GPIO_Init+0x248>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <HAL_GPIO_Init+0x212>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a17      	ldr	r2, [pc, #92]	@ (8005eb0 <HAL_GPIO_Init+0x24c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00d      	beq.n	8005e72 <HAL_GPIO_Init+0x20e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a16      	ldr	r2, [pc, #88]	@ (8005eb4 <HAL_GPIO_Init+0x250>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <HAL_GPIO_Init+0x20a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a15      	ldr	r2, [pc, #84]	@ (8005eb8 <HAL_GPIO_Init+0x254>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d101      	bne.n	8005e6a <HAL_GPIO_Init+0x206>
 8005e66:	2309      	movs	r3, #9
 8005e68:	e029      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e6a:	230a      	movs	r3, #10
 8005e6c:	e027      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e6e:	2307      	movs	r3, #7
 8005e70:	e025      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e72:	2306      	movs	r3, #6
 8005e74:	e023      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e76:	2305      	movs	r3, #5
 8005e78:	e021      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	e01f      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e01d      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e01b      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e019      	b.n	8005ebe <HAL_GPIO_Init+0x25a>
 8005e8a:	bf00      	nop
 8005e8c:	58000080 	.word	0x58000080
 8005e90:	58024400 	.word	0x58024400
 8005e94:	58000400 	.word	0x58000400
 8005e98:	58020000 	.word	0x58020000
 8005e9c:	58020400 	.word	0x58020400
 8005ea0:	58020800 	.word	0x58020800
 8005ea4:	58020c00 	.word	0x58020c00
 8005ea8:	58021000 	.word	0x58021000
 8005eac:	58021400 	.word	0x58021400
 8005eb0:	58021800 	.word	0x58021800
 8005eb4:	58021c00 	.word	0x58021c00
 8005eb8:	58022400 	.word	0x58022400
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	f002 0203 	and.w	r2, r2, #3
 8005ec4:	0092      	lsls	r2, r2, #2
 8005ec6:	4093      	lsls	r3, r2
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ece:	4938      	ldr	r1, [pc, #224]	@ (8005fb0 <HAL_GPIO_Init+0x34c>)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f47f ae6b 	bne.w	8005c78 <HAL_GPIO_Init+0x14>
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	3724      	adds	r7, #36	@ 0x24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	58000400 	.word	0x58000400

08005fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	887b      	ldrh	r3, [r7, #2]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e001      	b.n	8005fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ff4:	787b      	ldrb	r3, [r7, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ffa:	887a      	ldrh	r2, [r7, #2]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006000:	e003      	b.n	800600a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006002:	887b      	ldrh	r3, [r7, #2]
 8006004:	041a      	lsls	r2, r3, #16
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	619a      	str	r2, [r3, #24]
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	4603      	mov	r3, r0
 800601e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006024:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006030:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	4618      	mov	r0, r3
 800603e:	f7fa fd2b 	bl	8000a98 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e08b      	b.n	8006176 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fc f95c 	bl	8002330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2224      	movs	r2, #36	@ 0x24
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800609c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060c2:	609a      	str	r2, [r3, #8]
 80060c4:	e006      	b.n	80060d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d108      	bne.n	80060ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e007      	b.n	80060fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <HAL_I2C_Init+0x134>)
 800610a:	430b      	orrs	r3, r1
 800610c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800611c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69d9      	ldr	r1, [r3, #28]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	02008000 	.word	0x02008000

08006184 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
  }
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00f      	beq.n	80061fa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e8:	f043 0201 	orr.w	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00f      	beq.n	8006224 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006212:	f043 0208 	orr.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006222:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623c:	f043 0202 	orr.w	r2, r3, #2
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800624c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006252:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 030b 	and.w	r3, r3, #11
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fcc5 	bl	8006bf0 <I2C_ITError>
  }
}
 8006266:	bf00      	nop
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
 80062a2:	4613      	mov	r3, r2
 80062a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b086      	sub	sp, #24
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <I2C_Slave_ISR_IT+0x24>
 800630e:	2302      	movs	r3, #2
 8006310:	e0e2      	b.n	80064d8 <I2C_Slave_ISR_IT+0x1ea>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d009      	beq.n	8006338 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800632e:	6939      	ldr	r1, [r7, #16]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f9b5 	bl	80066a0 <I2C_ITSlaveCplt>
 8006336:	e0ca      	b.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	2b00      	cmp	r3, #0
 8006340:	d04b      	beq.n	80063da <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006348:	2b00      	cmp	r3, #0
 800634a:	d046      	beq.n	80063da <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d128      	bne.n	80063a8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b28      	cmp	r3, #40	@ 0x28
 8006360:	d108      	bne.n	8006374 <I2C_Slave_ISR_IT+0x86>
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006368:	d104      	bne.n	8006374 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800636a:	6939      	ldr	r1, [r7, #16]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fbeb 	bl	8006b48 <I2C_ITListenCplt>
 8006372:	e031      	b.n	80063d8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b29      	cmp	r3, #41	@ 0x29
 800637e:	d10e      	bne.n	800639e <I2C_Slave_ISR_IT+0xb0>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006386:	d00a      	beq.n	800639e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2210      	movs	r2, #16
 800638e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fd44 	bl	8006e1e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f926 	bl	80065e8 <I2C_ITSlaveSeqCplt>
 800639c:	e01c      	b.n	80063d8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2210      	movs	r2, #16
 80063a4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80063a6:	e08f      	b.n	80064c8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2210      	movs	r2, #16
 80063ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b4:	f043 0204 	orr.w	r2, r3, #4
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <I2C_Slave_ISR_IT+0xdc>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063c8:	d17e      	bne.n	80064c8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ce:	4619      	mov	r1, r3
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fc0d 	bl	8006bf0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80063d6:	e077      	b.n	80064c8 <I2C_Slave_ISR_IT+0x1da>
 80063d8:	e076      	b.n	80064c8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02f      	beq.n	8006444 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d02a      	beq.n	8006444 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d018      	beq.n	800642a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d14b      	bne.n	80064cc <I2C_Slave_ISR_IT+0x1de>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800643a:	d047      	beq.n	80064cc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f8d3 	bl	80065e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006442:	e043      	b.n	80064cc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006458:	6939      	ldr	r1, [r7, #16]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f840 	bl	80064e0 <I2C_ITAddrCplt>
 8006460:	e035      	b.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d030      	beq.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006472:	2b00      	cmp	r3, #0
 8006474:	d02b      	beq.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d018      	beq.n	80064b2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80064b0:	e00d      	b.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064b8:	d002      	beq.n	80064c0 <I2C_Slave_ISR_IT+0x1d2>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f891 	bl	80065e8 <I2C_ITSlaveSeqCplt>
 80064c6:	e002      	b.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80064cc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064f6:	2b28      	cmp	r3, #40	@ 0x28
 80064f8:	d16a      	bne.n	80065d0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b29b      	uxth	r3, r3
 8006514:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006518:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006526:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006534:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d138      	bne.n	80065b0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800653e:	897b      	ldrh	r3, [r7, #10]
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	b29a      	uxth	r2, r3
 8006544:	89bb      	ldrh	r3, [r7, #12]
 8006546:	4053      	eors	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	f003 0306 	and.w	r3, r3, #6
 800654e:	2b00      	cmp	r3, #0
 8006550:	d11c      	bne.n	800658c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006552:	897b      	ldrh	r3, [r7, #10]
 8006554:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006564:	2b02      	cmp	r3, #2
 8006566:	d13b      	bne.n	80065e0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2208      	movs	r2, #8
 8006574:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800657e:	89ba      	ldrh	r2, [r7, #12]
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fe86 	bl	8006296 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800658a:	e029      	b.n	80065e0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fc84 	bl	8006ea2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065a2:	89ba      	ldrh	r2, [r7, #12]
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff fe74 	bl	8006296 <HAL_I2C_AddrCallback>
}
 80065ae:	e017      	b.n	80065e0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fc74 	bl	8006ea2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065c2:	89ba      	ldrh	r2, [r7, #12]
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fe64 	bl	8006296 <HAL_I2C_AddrCallback>
}
 80065ce:	e007      	b.n	80065e0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2208      	movs	r2, #8
 80065d6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	e00c      	b.n	8006636 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006634:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b29      	cmp	r3, #41	@ 0x29
 8006640:	d112      	bne.n	8006668 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2228      	movs	r2, #40	@ 0x28
 8006646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2221      	movs	r2, #33	@ 0x21
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006650:	2101      	movs	r1, #1
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fc25 	bl	8006ea2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fe04 	bl	800626e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006666:	e017      	b.n	8006698 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b2a      	cmp	r3, #42	@ 0x2a
 8006672:	d111      	bne.n	8006698 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2228      	movs	r2, #40	@ 0x28
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2222      	movs	r2, #34	@ 0x22
 8006680:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006682:	2102      	movs	r1, #2
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fc0c 	bl	8006ea2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fdf5 	bl	8006282 <HAL_I2C_SlaveRxCpltCallback>
}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2220      	movs	r2, #32
 80066ca:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	2b21      	cmp	r3, #33	@ 0x21
 80066d0:	d002      	beq.n	80066d8 <I2C_ITSlaveCplt+0x38>
 80066d2:	7afb      	ldrb	r3, [r7, #11]
 80066d4:	2b29      	cmp	r3, #41	@ 0x29
 80066d6:	d108      	bne.n	80066ea <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80066d8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fbe0 	bl	8006ea2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2221      	movs	r2, #33	@ 0x21
 80066e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80066e8:	e019      	b.n	800671e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066ea:	7afb      	ldrb	r3, [r7, #11]
 80066ec:	2b22      	cmp	r3, #34	@ 0x22
 80066ee:	d002      	beq.n	80066f6 <I2C_ITSlaveCplt+0x56>
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f4:	d108      	bne.n	8006708 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80066f6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fbd1 	bl	8006ea2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2222      	movs	r2, #34	@ 0x22
 8006704:	631a      	str	r2, [r3, #48]	@ 0x30
 8006706:	e00a      	b.n	800671e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	2b28      	cmp	r3, #40	@ 0x28
 800670c:	d107      	bne.n	800671e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800670e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fbc5 	bl	8006ea2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800672c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	4b7f      	ldr	r3, [pc, #508]	@ (8006938 <I2C_ITSlaveCplt+0x298>)
 800673a:	400b      	ands	r3, r1
 800673c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fb6d 	bl	8006e1e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d07a      	beq.n	8006844 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800675c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8111 	beq.w	800698a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a73      	ldr	r2, [pc, #460]	@ (800693c <I2C_ITSlaveCplt+0x29c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d059      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a71      	ldr	r2, [pc, #452]	@ (8006940 <I2C_ITSlaveCplt+0x2a0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d053      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a6f      	ldr	r2, [pc, #444]	@ (8006944 <I2C_ITSlaveCplt+0x2a4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d04d      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a6d      	ldr	r2, [pc, #436]	@ (8006948 <I2C_ITSlaveCplt+0x2a8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d047      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a6b      	ldr	r2, [pc, #428]	@ (800694c <I2C_ITSlaveCplt+0x2ac>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d041      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a69      	ldr	r2, [pc, #420]	@ (8006950 <I2C_ITSlaveCplt+0x2b0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d03b      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a67      	ldr	r2, [pc, #412]	@ (8006954 <I2C_ITSlaveCplt+0x2b4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d035      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a65      	ldr	r2, [pc, #404]	@ (8006958 <I2C_ITSlaveCplt+0x2b8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d02f      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a63      	ldr	r2, [pc, #396]	@ (800695c <I2C_ITSlaveCplt+0x2bc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d029      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a61      	ldr	r2, [pc, #388]	@ (8006960 <I2C_ITSlaveCplt+0x2c0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d023      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a5f      	ldr	r2, [pc, #380]	@ (8006964 <I2C_ITSlaveCplt+0x2c4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d01d      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a5d      	ldr	r2, [pc, #372]	@ (8006968 <I2C_ITSlaveCplt+0x2c8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d017      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a5b      	ldr	r2, [pc, #364]	@ (800696c <I2C_ITSlaveCplt+0x2cc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d011      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a59      	ldr	r2, [pc, #356]	@ (8006970 <I2C_ITSlaveCplt+0x2d0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00b      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a57      	ldr	r2, [pc, #348]	@ (8006974 <I2C_ITSlaveCplt+0x2d4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d005      	beq.n	8006828 <I2C_ITSlaveCplt+0x188>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a55      	ldr	r2, [pc, #340]	@ (8006978 <I2C_ITSlaveCplt+0x2d8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d105      	bne.n	8006834 <I2C_ITSlaveCplt+0x194>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	b29b      	uxth	r3, r3
 8006832:	e004      	b.n	800683e <I2C_ITSlaveCplt+0x19e>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	b29b      	uxth	r3, r3
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8006842:	e0a2      	b.n	800698a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 809d 	beq.w	800698a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800685e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8090 	beq.w	800698a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a32      	ldr	r2, [pc, #200]	@ (800693c <I2C_ITSlaveCplt+0x29c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d059      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a30      	ldr	r2, [pc, #192]	@ (8006940 <I2C_ITSlaveCplt+0x2a0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d053      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2e      	ldr	r2, [pc, #184]	@ (8006944 <I2C_ITSlaveCplt+0x2a4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d04d      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a2c      	ldr	r2, [pc, #176]	@ (8006948 <I2C_ITSlaveCplt+0x2a8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d047      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2a      	ldr	r2, [pc, #168]	@ (800694c <I2C_ITSlaveCplt+0x2ac>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d041      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a28      	ldr	r2, [pc, #160]	@ (8006950 <I2C_ITSlaveCplt+0x2b0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d03b      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a26      	ldr	r2, [pc, #152]	@ (8006954 <I2C_ITSlaveCplt+0x2b4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d035      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a24      	ldr	r2, [pc, #144]	@ (8006958 <I2C_ITSlaveCplt+0x2b8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d02f      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a22      	ldr	r2, [pc, #136]	@ (800695c <I2C_ITSlaveCplt+0x2bc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d029      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a20      	ldr	r2, [pc, #128]	@ (8006960 <I2C_ITSlaveCplt+0x2c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d023      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006964 <I2C_ITSlaveCplt+0x2c4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01d      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006968 <I2C_ITSlaveCplt+0x2c8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d017      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1a      	ldr	r2, [pc, #104]	@ (800696c <I2C_ITSlaveCplt+0x2cc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d011      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a18      	ldr	r2, [pc, #96]	@ (8006970 <I2C_ITSlaveCplt+0x2d0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a16      	ldr	r2, [pc, #88]	@ (8006974 <I2C_ITSlaveCplt+0x2d4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d005      	beq.n	800692a <I2C_ITSlaveCplt+0x28a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a14      	ldr	r2, [pc, #80]	@ (8006978 <I2C_ITSlaveCplt+0x2d8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d128      	bne.n	800697c <I2C_ITSlaveCplt+0x2dc>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	b29b      	uxth	r3, r3
 8006934:	e027      	b.n	8006986 <I2C_ITSlaveCplt+0x2e6>
 8006936:	bf00      	nop
 8006938:	fe00e800 	.word	0xfe00e800
 800693c:	40020010 	.word	0x40020010
 8006940:	40020028 	.word	0x40020028
 8006944:	40020040 	.word	0x40020040
 8006948:	40020058 	.word	0x40020058
 800694c:	40020070 	.word	0x40020070
 8006950:	40020088 	.word	0x40020088
 8006954:	400200a0 	.word	0x400200a0
 8006958:	400200b8 	.word	0x400200b8
 800695c:	40020410 	.word	0x40020410
 8006960:	40020428 	.word	0x40020428
 8006964:	40020440 	.word	0x40020440
 8006968:	40020458 	.word	0x40020458
 800696c:	40020470 	.word	0x40020470
 8006970:	40020488 	.word	0x40020488
 8006974:	400204a0 	.word	0x400204a0
 8006978:	400204b8 	.word	0x400204b8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	b29b      	uxth	r3, r3
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d020      	beq.n	80069d6 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0304 	bic.w	r3, r3, #4
 800699a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e4:	f043 0204 	orr.w	r2, r3, #4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d049      	beq.n	8006a8a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d044      	beq.n	8006a8a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d128      	bne.n	8006a5c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b28      	cmp	r3, #40	@ 0x28
 8006a14:	d108      	bne.n	8006a28 <I2C_ITSlaveCplt+0x388>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a1c:	d104      	bne.n	8006a28 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a1e:	6979      	ldr	r1, [r7, #20]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f891 	bl	8006b48 <I2C_ITListenCplt>
 8006a26:	e030      	b.n	8006a8a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b29      	cmp	r3, #41	@ 0x29
 8006a32:	d10e      	bne.n	8006a52 <I2C_ITSlaveCplt+0x3b2>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a3a:	d00a      	beq.n	8006a52 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2210      	movs	r2, #16
 8006a42:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9ea 	bl	8006e1e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fdcc 	bl	80065e8 <I2C_ITSlaveSeqCplt>
 8006a50:	e01b      	b.n	8006a8a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2210      	movs	r2, #16
 8006a58:	61da      	str	r2, [r3, #28]
 8006a5a:	e016      	b.n	8006a8a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2210      	movs	r2, #16
 8006a62:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a68:	f043 0204 	orr.w	r2, r3, #4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <I2C_ITSlaveCplt+0x3de>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a7c:	d105      	bne.n	8006a8a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f8b3 	bl	8006bf0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d010      	beq.n	8006ac2 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8a2 	bl	8006bf0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b28      	cmp	r3, #40	@ 0x28
 8006ab6:	d141      	bne.n	8006b3c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f844 	bl	8006b48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ac0:	e03c      	b.n	8006b3c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006aca:	d014      	beq.n	8006af6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fd8b 	bl	80065e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b44 <I2C_ITSlaveCplt+0x4a4>)
 8006ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fbdf 	bl	80062b2 <HAL_I2C_ListenCpltCallback>
}
 8006af4:	e022      	b.n	8006b3c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b22      	cmp	r3, #34	@ 0x22
 8006b00:	d10e      	bne.n	8006b20 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fbb2 	bl	8006282 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b1e:	e00d      	b.n	8006b3c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fb99 	bl	800626e <HAL_I2C_SlaveTxCpltCallback>
}
 8006b3c:	bf00      	nop
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	ffff0000 	.word	0xffff0000

08006b48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a25      	ldr	r2, [pc, #148]	@ (8006bec <I2C_ITListenCplt+0xa4>)
 8006b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d022      	beq.n	8006bc4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d012      	beq.n	8006bc4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bbc:	f043 0204 	orr.w	r2, r3, #4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006bc4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f96a 	bl	8006ea2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2210      	movs	r2, #16
 8006bd4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff fb67 	bl	80062b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	ffff0000 	.word	0xffff0000

08006bf0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c00:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8006dc4 <I2C_ITError+0x1d4>)
 8006c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b28      	cmp	r3, #40	@ 0x28
 8006c26:	d005      	beq.n	8006c34 <I2C_ITError+0x44>
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b29      	cmp	r3, #41	@ 0x29
 8006c2c:	d002      	beq.n	8006c34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c32:	d10b      	bne.n	8006c4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c34:	2103      	movs	r1, #3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f933 	bl	8006ea2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2228      	movs	r2, #40	@ 0x28
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a60      	ldr	r2, [pc, #384]	@ (8006dc8 <I2C_ITError+0x1d8>)
 8006c48:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c4a:	e030      	b.n	8006cae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c4c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f926 	bl	8006ea2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8e1 	bl	8006e1e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b60      	cmp	r3, #96	@ 0x60
 8006c66:	d01f      	beq.n	8006ca8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d114      	bne.n	8006ca8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d109      	bne.n	8006ca0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2210      	movs	r2, #16
 8006c92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c98:	f043 0204 	orr.w	r2, r3, #4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d039      	beq.n	8006d30 <I2C_ITError+0x140>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b11      	cmp	r3, #17
 8006cc0:	d002      	beq.n	8006cc8 <I2C_ITError+0xd8>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b21      	cmp	r3, #33	@ 0x21
 8006cc6:	d133      	bne.n	8006d30 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd6:	d107      	bne.n	8006ce8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ce6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe ffab 	bl	8005c48 <HAL_DMA_GetState>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d017      	beq.n	8006d28 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	4a33      	ldr	r2, [pc, #204]	@ (8006dcc <I2C_ITError+0x1dc>)
 8006cfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe fd55 	bl	80057bc <HAL_DMA_Abort_IT>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d04d      	beq.n	8006db4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d22:	4610      	mov	r0, r2
 8006d24:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d26:	e045      	b.n	8006db4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f851 	bl	8006dd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d2e:	e041      	b.n	8006db4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d039      	beq.n	8006dac <I2C_ITError+0x1bc>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b12      	cmp	r3, #18
 8006d3c:	d002      	beq.n	8006d44 <I2C_ITError+0x154>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b22      	cmp	r3, #34	@ 0x22
 8006d42:	d133      	bne.n	8006dac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d52:	d107      	bne.n	8006d64 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe ff6d 	bl	8005c48 <HAL_DMA_GetState>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d017      	beq.n	8006da4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	4a14      	ldr	r2, [pc, #80]	@ (8006dcc <I2C_ITError+0x1dc>)
 8006d7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fd17 	bl	80057bc <HAL_DMA_Abort_IT>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d011      	beq.n	8006db8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006da2:	e009      	b.n	8006db8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f813 	bl	8006dd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006daa:	e005      	b.n	8006db8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f80f 	bl	8006dd0 <I2C_TreatErrorCallback>
  }
}
 8006db2:	e002      	b.n	8006dba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006db4:	bf00      	nop
 8006db6:	e000      	b.n	8006dba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db8:	bf00      	nop
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	ffff0000 	.word	0xffff0000
 8006dc8:	080062ef 	.word	0x080062ef
 8006dcc:	08006e67 	.word	0x08006e67

08006dd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b60      	cmp	r3, #96	@ 0x60
 8006de2:	d10e      	bne.n	8006e02 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff fa6d 	bl	80062da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e00:	e009      	b.n	8006e16 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff fa58 	bl	80062c6 <HAL_I2C_ErrorCallback>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d103      	bne.n	8006e3c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d007      	beq.n	8006e5a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	619a      	str	r2, [r3, #24]
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e80:	2200      	movs	r2, #0
 8006e82:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	2200      	movs	r2, #0
 8006e92:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff ff9b 	bl	8006dd0 <I2C_TreatErrorCallback>
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006eb2:	887b      	ldrh	r3, [r7, #2]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00f      	beq.n	8006edc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006ec2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ed0:	2b28      	cmp	r3, #40	@ 0x28
 8006ed2:	d003      	beq.n	8006edc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006eda:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006edc:	887b      	ldrh	r3, [r7, #2]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00f      	beq.n	8006f06 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006eec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006efa:	2b28      	cmp	r3, #40	@ 0x28
 8006efc:	d003      	beq.n	8006f06 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006f04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da03      	bge.n	8006f16 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006f14:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006f16:	887b      	ldrh	r3, [r7, #2]
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d103      	bne.n	8006f24 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006f24:	887b      	ldrh	r3, [r7, #2]
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d103      	bne.n	8006f32 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006f32:	887b      	ldrh	r3, [r7, #2]
 8006f34:	2b40      	cmp	r3, #64	@ 0x40
 8006f36:	d103      	bne.n	8006f40 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6819      	ldr	r1, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	43da      	mvns	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	400a      	ands	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d138      	bne.n	8006fe6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e032      	b.n	8006fe8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2224      	movs	r2, #36	@ 0x24
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0201 	bic.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006fb0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6819      	ldr	r1, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b20      	cmp	r3, #32
 8007008:	d139      	bne.n	800707e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007014:	2302      	movs	r3, #2
 8007016:	e033      	b.n	8007080 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2224      	movs	r2, #36	@ 0x24
 8007024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007046:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0201 	orr.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e000      	b.n	8007080 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800707e:	2302      	movs	r3, #2
  }
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007094:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <HAL_PWREx_ConfigSupply+0x70>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b04      	cmp	r3, #4
 800709e:	d00a      	beq.n	80070b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80070a0:	4b16      	ldr	r3, [pc, #88]	@ (80070fc <HAL_PWREx_ConfigSupply+0x70>)
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d001      	beq.n	80070b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e01f      	b.n	80070f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e01d      	b.n	80070f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80070b6:	4b11      	ldr	r3, [pc, #68]	@ (80070fc <HAL_PWREx_ConfigSupply+0x70>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f023 0207 	bic.w	r2, r3, #7
 80070be:	490f      	ldr	r1, [pc, #60]	@ (80070fc <HAL_PWREx_ConfigSupply+0x70>)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80070c6:	f7fc fb2f 	bl	8003728 <HAL_GetTick>
 80070ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070cc:	e009      	b.n	80070e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070ce:	f7fc fb2b 	bl	8003728 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070dc:	d901      	bls.n	80070e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e007      	b.n	80070f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070e2:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <HAL_PWREx_ConfigSupply+0x70>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ee:	d1ee      	bne.n	80070ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	58024800 	.word	0x58024800

08007100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	@ 0x30
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e3c8      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 8087 	beq.w	800722e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007120:	4b88      	ldr	r3, [pc, #544]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800712a:	4b86      	ldr	r3, [pc, #536]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007132:	2b10      	cmp	r3, #16
 8007134:	d007      	beq.n	8007146 <HAL_RCC_OscConfig+0x46>
 8007136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007138:	2b18      	cmp	r3, #24
 800713a:	d110      	bne.n	800715e <HAL_RCC_OscConfig+0x5e>
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d10b      	bne.n	800715e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007146:	4b7f      	ldr	r3, [pc, #508]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d06c      	beq.n	800722c <HAL_RCC_OscConfig+0x12c>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d168      	bne.n	800722c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e3a2      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007166:	d106      	bne.n	8007176 <HAL_RCC_OscConfig+0x76>
 8007168:	4b76      	ldr	r3, [pc, #472]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a75      	ldr	r2, [pc, #468]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 800716e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	e02e      	b.n	80071d4 <HAL_RCC_OscConfig+0xd4>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10c      	bne.n	8007198 <HAL_RCC_OscConfig+0x98>
 800717e:	4b71      	ldr	r3, [pc, #452]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a70      	ldr	r2, [pc, #448]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	4b6e      	ldr	r3, [pc, #440]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a6d      	ldr	r2, [pc, #436]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	e01d      	b.n	80071d4 <HAL_RCC_OscConfig+0xd4>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071a0:	d10c      	bne.n	80071bc <HAL_RCC_OscConfig+0xbc>
 80071a2:	4b68      	ldr	r3, [pc, #416]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a67      	ldr	r2, [pc, #412]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	4b65      	ldr	r3, [pc, #404]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a64      	ldr	r2, [pc, #400]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	e00b      	b.n	80071d4 <HAL_RCC_OscConfig+0xd4>
 80071bc:	4b61      	ldr	r3, [pc, #388]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a60      	ldr	r2, [pc, #384]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	4b5e      	ldr	r3, [pc, #376]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a5d      	ldr	r2, [pc, #372]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d013      	beq.n	8007204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071dc:	f7fc faa4 	bl	8003728 <HAL_GetTick>
 80071e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071e2:	e008      	b.n	80071f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071e4:	f7fc faa0 	bl	8003728 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b64      	cmp	r3, #100	@ 0x64
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e356      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071f6:	4b53      	ldr	r3, [pc, #332]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0f0      	beq.n	80071e4 <HAL_RCC_OscConfig+0xe4>
 8007202:	e014      	b.n	800722e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fc fa90 	bl	8003728 <HAL_GetTick>
 8007208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800720c:	f7fc fa8c 	bl	8003728 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b64      	cmp	r3, #100	@ 0x64
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e342      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800721e:	4b49      	ldr	r3, [pc, #292]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1f0      	bne.n	800720c <HAL_RCC_OscConfig+0x10c>
 800722a:	e000      	b.n	800722e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800722c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 808c 	beq.w	8007354 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800723c:	4b41      	ldr	r3, [pc, #260]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007244:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007246:	4b3f      	ldr	r3, [pc, #252]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_RCC_OscConfig+0x162>
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	2b18      	cmp	r3, #24
 8007256:	d137      	bne.n	80072c8 <HAL_RCC_OscConfig+0x1c8>
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d132      	bne.n	80072c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007262:	4b38      	ldr	r3, [pc, #224]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_RCC_OscConfig+0x17a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e314      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800727a:	4b32      	ldr	r3, [pc, #200]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 0219 	bic.w	r2, r3, #25
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	492f      	ldr	r1, [pc, #188]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007288:	4313      	orrs	r3, r2
 800728a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728c:	f7fc fa4c 	bl	8003728 <HAL_GetTick>
 8007290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007294:	f7fc fa48 	bl	8003728 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e2fe      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072a6:	4b27      	ldr	r3, [pc, #156]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f0      	beq.n	8007294 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b2:	4b24      	ldr	r3, [pc, #144]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	061b      	lsls	r3, r3, #24
 80072c0:	4920      	ldr	r1, [pc, #128]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072c6:	e045      	b.n	8007354 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d026      	beq.n	800731e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80072d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f023 0219 	bic.w	r2, r3, #25
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4919      	ldr	r1, [pc, #100]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e2:	f7fc fa21 	bl	8003728 <HAL_GetTick>
 80072e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ea:	f7fc fa1d 	bl	8003728 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e2d3      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072fc:	4b11      	ldr	r3, [pc, #68]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007308:	4b0e      	ldr	r3, [pc, #56]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	061b      	lsls	r3, r3, #24
 8007316:	490b      	ldr	r1, [pc, #44]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007318:	4313      	orrs	r3, r2
 800731a:	604b      	str	r3, [r1, #4]
 800731c:	e01a      	b.n	8007354 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800731e:	4b09      	ldr	r3, [pc, #36]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a08      	ldr	r2, [pc, #32]	@ (8007344 <HAL_RCC_OscConfig+0x244>)
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732a:	f7fc f9fd 	bl	8003728 <HAL_GetTick>
 800732e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007330:	e00a      	b.n	8007348 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007332:	f7fc f9f9 	bl	8003728 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d903      	bls.n	8007348 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e2af      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
 8007344:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007348:	4b96      	ldr	r3, [pc, #600]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1ee      	bne.n	8007332 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	d06a      	beq.n	8007436 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007360:	4b90      	ldr	r3, [pc, #576]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007368:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800736a:	4b8e      	ldr	r3, [pc, #568]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b08      	cmp	r3, #8
 8007374:	d007      	beq.n	8007386 <HAL_RCC_OscConfig+0x286>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b18      	cmp	r3, #24
 800737a:	d11b      	bne.n	80073b4 <HAL_RCC_OscConfig+0x2b4>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b01      	cmp	r3, #1
 8007384:	d116      	bne.n	80073b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007386:	4b87      	ldr	r3, [pc, #540]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <HAL_RCC_OscConfig+0x29e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	2b80      	cmp	r3, #128	@ 0x80
 8007398:	d001      	beq.n	800739e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e282      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800739e:	4b81      	ldr	r3, [pc, #516]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	061b      	lsls	r3, r3, #24
 80073ac:	497d      	ldr	r1, [pc, #500]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073b2:	e040      	b.n	8007436 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d023      	beq.n	8007404 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80073bc:	4b79      	ldr	r3, [pc, #484]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a78      	ldr	r2, [pc, #480]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7fc f9ae 	bl	8003728 <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073d0:	f7fc f9aa 	bl	8003728 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e260      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073e2:	4b70      	ldr	r3, [pc, #448]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073ee:	4b6d      	ldr	r3, [pc, #436]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	061b      	lsls	r3, r3, #24
 80073fc:	4969      	ldr	r1, [pc, #420]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	60cb      	str	r3, [r1, #12]
 8007402:	e018      	b.n	8007436 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007404:	4b67      	ldr	r3, [pc, #412]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a66      	ldr	r2, [pc, #408]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800740a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800740e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fc f98a 	bl	8003728 <HAL_GetTick>
 8007414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007418:	f7fc f986 	bl	8003728 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e23c      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800742a:	4b5e      	ldr	r3, [pc, #376]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d036      	beq.n	80074b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d019      	beq.n	800747e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800744a:	4b56      	ldr	r3, [pc, #344]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800744c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744e:	4a55      	ldr	r2, [pc, #340]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007456:	f7fc f967 	bl	8003728 <HAL_GetTick>
 800745a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800745e:	f7fc f963 	bl	8003728 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e219      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007470:	4b4c      	ldr	r3, [pc, #304]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x35e>
 800747c:	e018      	b.n	80074b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800747e:	4b49      	ldr	r3, [pc, #292]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007482:	4a48      	ldr	r2, [pc, #288]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fc f94d 	bl	8003728 <HAL_GetTick>
 800748e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007492:	f7fc f949 	bl	8003728 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e1ff      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074a4:	4b3f      	ldr	r3, [pc, #252]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80074a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d036      	beq.n	800752a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d019      	beq.n	80074f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074c4:	4b37      	ldr	r3, [pc, #220]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a36      	ldr	r2, [pc, #216]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80074ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80074ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074d0:	f7fc f92a 	bl	8003728 <HAL_GetTick>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074d8:	f7fc f926 	bl	8003728 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e1dc      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074ea:	4b2e      	ldr	r3, [pc, #184]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f0      	beq.n	80074d8 <HAL_RCC_OscConfig+0x3d8>
 80074f6:	e018      	b.n	800752a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074f8:	4b2a      	ldr	r3, [pc, #168]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a29      	ldr	r2, [pc, #164]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 80074fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007504:	f7fc f910 	bl	8003728 <HAL_GetTick>
 8007508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800750c:	f7fc f90c 	bl	8003728 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e1c2      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800751e:	4b21      	ldr	r3, [pc, #132]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 8086 	beq.w	8007644 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007538:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <HAL_RCC_OscConfig+0x4a8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1a      	ldr	r2, [pc, #104]	@ (80075a8 <HAL_RCC_OscConfig+0x4a8>)
 800753e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007544:	f7fc f8f0 	bl	8003728 <HAL_GetTick>
 8007548:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800754c:	f7fc f8ec 	bl	8003728 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b64      	cmp	r3, #100	@ 0x64
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e1a2      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800755e:	4b12      	ldr	r3, [pc, #72]	@ (80075a8 <HAL_RCC_OscConfig+0x4a8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0f0      	beq.n	800754c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d106      	bne.n	8007580 <HAL_RCC_OscConfig+0x480>
 8007572:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007576:	4a0b      	ldr	r2, [pc, #44]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	6713      	str	r3, [r2, #112]	@ 0x70
 800757e:	e032      	b.n	80075e6 <HAL_RCC_OscConfig+0x4e6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d111      	bne.n	80075ac <HAL_RCC_OscConfig+0x4ac>
 8007588:	4b06      	ldr	r3, [pc, #24]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758c:	4a05      	ldr	r2, [pc, #20]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800758e:	f023 0301 	bic.w	r3, r3, #1
 8007592:	6713      	str	r3, [r2, #112]	@ 0x70
 8007594:	4b03      	ldr	r3, [pc, #12]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007598:	4a02      	ldr	r2, [pc, #8]	@ (80075a4 <HAL_RCC_OscConfig+0x4a4>)
 800759a:	f023 0304 	bic.w	r3, r3, #4
 800759e:	6713      	str	r3, [r2, #112]	@ 0x70
 80075a0:	e021      	b.n	80075e6 <HAL_RCC_OscConfig+0x4e6>
 80075a2:	bf00      	nop
 80075a4:	58024400 	.word	0x58024400
 80075a8:	58024800 	.word	0x58024800
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b05      	cmp	r3, #5
 80075b2:	d10c      	bne.n	80075ce <HAL_RCC_OscConfig+0x4ce>
 80075b4:	4b83      	ldr	r3, [pc, #524]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b8:	4a82      	ldr	r2, [pc, #520]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075ba:	f043 0304 	orr.w	r3, r3, #4
 80075be:	6713      	str	r3, [r2, #112]	@ 0x70
 80075c0:	4b80      	ldr	r3, [pc, #512]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c4:	4a7f      	ldr	r2, [pc, #508]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80075cc:	e00b      	b.n	80075e6 <HAL_RCC_OscConfig+0x4e6>
 80075ce:	4b7d      	ldr	r3, [pc, #500]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d2:	4a7c      	ldr	r2, [pc, #496]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075da:	4b7a      	ldr	r3, [pc, #488]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075de:	4a79      	ldr	r2, [pc, #484]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80075e0:	f023 0304 	bic.w	r3, r3, #4
 80075e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d015      	beq.n	800761a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ee:	f7fc f89b 	bl	8003728 <HAL_GetTick>
 80075f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075f4:	e00a      	b.n	800760c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f6:	f7fc f897 	bl	8003728 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007604:	4293      	cmp	r3, r2
 8007606:	d901      	bls.n	800760c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e14b      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800760c:	4b6d      	ldr	r3, [pc, #436]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800760e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0ee      	beq.n	80075f6 <HAL_RCC_OscConfig+0x4f6>
 8007618:	e014      	b.n	8007644 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761a:	f7fc f885 	bl	8003728 <HAL_GetTick>
 800761e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007620:	e00a      	b.n	8007638 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007622:	f7fc f881 	bl	8003728 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007630:	4293      	cmp	r3, r2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e135      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007638:	4b62      	ldr	r3, [pc, #392]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ee      	bne.n	8007622 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 812a 	beq.w	80078a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800764e:	4b5d      	ldr	r3, [pc, #372]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007656:	2b18      	cmp	r3, #24
 8007658:	f000 80ba 	beq.w	80077d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007660:	2b02      	cmp	r3, #2
 8007662:	f040 8095 	bne.w	8007790 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007666:	4b57      	ldr	r3, [pc, #348]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a56      	ldr	r2, [pc, #344]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800766c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007672:	f7fc f859 	bl	8003728 <HAL_GetTick>
 8007676:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800767a:	f7fc f855 	bl	8003728 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e10b      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800768c:	4b4d      	ldr	r3, [pc, #308]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f0      	bne.n	800767a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007698:	4b4a      	ldr	r3, [pc, #296]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800769a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800769c:	4b4a      	ldr	r3, [pc, #296]	@ (80077c8 <HAL_RCC_OscConfig+0x6c8>)
 800769e:	4013      	ands	r3, r2
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80076a8:	0112      	lsls	r2, r2, #4
 80076aa:	430a      	orrs	r2, r1
 80076ac:	4945      	ldr	r1, [pc, #276]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	628b      	str	r3, [r1, #40]	@ 0x28
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	3b01      	subs	r3, #1
 80076b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c0:	3b01      	subs	r3, #1
 80076c2:	025b      	lsls	r3, r3, #9
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	3b01      	subs	r3, #1
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076da:	3b01      	subs	r3, #1
 80076dc:	061b      	lsls	r3, r3, #24
 80076de:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076e2:	4938      	ldr	r1, [pc, #224]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80076e8:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ec:	4a35      	ldr	r2, [pc, #212]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80076ee:	f023 0301 	bic.w	r3, r3, #1
 80076f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076f4:	4b33      	ldr	r3, [pc, #204]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80076f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076f8:	4b34      	ldr	r3, [pc, #208]	@ (80077cc <HAL_RCC_OscConfig+0x6cc>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007700:	00d2      	lsls	r2, r2, #3
 8007702:	4930      	ldr	r1, [pc, #192]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007708:	4b2e      	ldr	r3, [pc, #184]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	f023 020c 	bic.w	r2, r3, #12
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	492b      	ldr	r1, [pc, #172]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007716:	4313      	orrs	r3, r2
 8007718:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800771a:	4b2a      	ldr	r3, [pc, #168]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800771c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771e:	f023 0202 	bic.w	r2, r3, #2
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007726:	4927      	ldr	r1, [pc, #156]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007728:	4313      	orrs	r3, r2
 800772a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800772c:	4b25      	ldr	r3, [pc, #148]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	4a24      	ldr	r2, [pc, #144]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007738:	4b22      	ldr	r3, [pc, #136]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	4a21      	ldr	r2, [pc, #132]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800773e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007744:	4b1f      	ldr	r3, [pc, #124]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007748:	4a1e      	ldr	r2, [pc, #120]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800774a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800774e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007750:	4b1c      	ldr	r3, [pc, #112]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	4a1b      	ldr	r2, [pc, #108]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800775c:	4b19      	ldr	r3, [pc, #100]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a18      	ldr	r2, [pc, #96]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007768:	f7fb ffde 	bl	8003728 <HAL_GetTick>
 800776c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007770:	f7fb ffda 	bl	8003728 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e090      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007782:	4b10      	ldr	r3, [pc, #64]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCC_OscConfig+0x670>
 800778e:	e088      	b.n	80078a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007790:	4b0c      	ldr	r3, [pc, #48]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a0b      	ldr	r2, [pc, #44]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 8007796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800779a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fb ffc4 	bl	8003728 <HAL_GetTick>
 80077a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a4:	f7fb ffc0 	bl	8003728 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e076      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077b6:	4b03      	ldr	r3, [pc, #12]	@ (80077c4 <HAL_RCC_OscConfig+0x6c4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0x6a4>
 80077c2:	e06e      	b.n	80078a2 <HAL_RCC_OscConfig+0x7a2>
 80077c4:	58024400 	.word	0x58024400
 80077c8:	fffffc0c 	.word	0xfffffc0c
 80077cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077d0:	4b36      	ldr	r3, [pc, #216]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077d6:	4b35      	ldr	r3, [pc, #212]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 80077d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d031      	beq.n	8007848 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f003 0203 	and.w	r2, r3, #3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d12a      	bne.n	8007848 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	091b      	lsrs	r3, r3, #4
 80077f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fe:	429a      	cmp	r2, r3
 8007800:	d122      	bne.n	8007848 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800780e:	429a      	cmp	r2, r3
 8007810:	d11a      	bne.n	8007848 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	0a5b      	lsrs	r3, r3, #9
 8007816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007820:	429a      	cmp	r2, r3
 8007822:	d111      	bne.n	8007848 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007830:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007832:	429a      	cmp	r2, r3
 8007834:	d108      	bne.n	8007848 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	0e1b      	lsrs	r3, r3, #24
 800783a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007842:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007844:	429a      	cmp	r2, r3
 8007846:	d001      	beq.n	800784c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e02b      	b.n	80078a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800784c:	4b17      	ldr	r3, [pc, #92]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 800784e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007850:	08db      	lsrs	r3, r3, #3
 8007852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007856:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	429a      	cmp	r2, r3
 8007860:	d01f      	beq.n	80078a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007862:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 8007864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007866:	4a11      	ldr	r2, [pc, #68]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 8007868:	f023 0301 	bic.w	r3, r3, #1
 800786c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800786e:	f7fb ff5b 	bl	8003728 <HAL_GetTick>
 8007872:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007874:	bf00      	nop
 8007876:	f7fb ff57 	bl	8003728 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	4293      	cmp	r3, r2
 8007880:	d0f9      	beq.n	8007876 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007882:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 8007884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007886:	4b0a      	ldr	r3, [pc, #40]	@ (80078b0 <HAL_RCC_OscConfig+0x7b0>)
 8007888:	4013      	ands	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800788e:	00d2      	lsls	r2, r2, #3
 8007890:	4906      	ldr	r1, [pc, #24]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 8007892:	4313      	orrs	r3, r2
 8007894:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007896:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 8007898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789a:	4a04      	ldr	r2, [pc, #16]	@ (80078ac <HAL_RCC_OscConfig+0x7ac>)
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3730      	adds	r7, #48	@ 0x30
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	58024400 	.word	0x58024400
 80078b0:	ffff0007 	.word	0xffff0007

080078b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e19c      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078c8:	4b8a      	ldr	r3, [pc, #552]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d910      	bls.n	80078f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d6:	4b87      	ldr	r3, [pc, #540]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f023 020f 	bic.w	r2, r3, #15
 80078de:	4985      	ldr	r1, [pc, #532]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e6:	4b83      	ldr	r3, [pc, #524]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d001      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e184      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d010      	beq.n	8007926 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	4b7b      	ldr	r3, [pc, #492]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007910:	429a      	cmp	r2, r3
 8007912:	d908      	bls.n	8007926 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007914:	4b78      	ldr	r3, [pc, #480]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	4975      	ldr	r1, [pc, #468]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007922:	4313      	orrs	r3, r2
 8007924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d010      	beq.n	8007954 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	4b70      	ldr	r3, [pc, #448]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800793e:	429a      	cmp	r2, r3
 8007940:	d908      	bls.n	8007954 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007942:	4b6d      	ldr	r3, [pc, #436]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	496a      	ldr	r1, [pc, #424]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007950:	4313      	orrs	r3, r2
 8007952:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d010      	beq.n	8007982 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	4b64      	ldr	r3, [pc, #400]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800796c:	429a      	cmp	r2, r3
 800796e:	d908      	bls.n	8007982 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007970:	4b61      	ldr	r3, [pc, #388]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	495e      	ldr	r1, [pc, #376]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 800797e:	4313      	orrs	r3, r2
 8007980:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d010      	beq.n	80079b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69da      	ldr	r2, [r3, #28]
 8007992:	4b59      	ldr	r3, [pc, #356]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800799a:	429a      	cmp	r2, r3
 800799c:	d908      	bls.n	80079b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800799e:	4b56      	ldr	r3, [pc, #344]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	4953      	ldr	r1, [pc, #332]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d010      	beq.n	80079de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	4b4d      	ldr	r3, [pc, #308]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d908      	bls.n	80079de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079cc:	4b4a      	ldr	r3, [pc, #296]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f023 020f 	bic.w	r2, r3, #15
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	4947      	ldr	r1, [pc, #284]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d055      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80079ea:	4b43      	ldr	r3, [pc, #268]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	4940      	ldr	r1, [pc, #256]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d107      	bne.n	8007a14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a04:	4b3c      	ldr	r3, [pc, #240]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d121      	bne.n	8007a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0f6      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d107      	bne.n	8007a2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a1c:	4b36      	ldr	r3, [pc, #216]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d115      	bne.n	8007a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e0ea      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d107      	bne.n	8007a44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a34:	4b30      	ldr	r3, [pc, #192]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d109      	bne.n	8007a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0de      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a44:	4b2c      	ldr	r3, [pc, #176]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e0d6      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a54:	4b28      	ldr	r3, [pc, #160]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f023 0207 	bic.w	r2, r3, #7
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	4925      	ldr	r1, [pc, #148]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a66:	f7fb fe5f 	bl	8003728 <HAL_GetTick>
 8007a6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a6e:	f7fb fe5b 	bl	8003728 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e0be      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a84:	4b1c      	ldr	r3, [pc, #112]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d1eb      	bne.n	8007a6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d010      	beq.n	8007ac4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	4b14      	ldr	r3, [pc, #80]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d208      	bcs.n	8007ac4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ab2:	4b11      	ldr	r3, [pc, #68]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f023 020f 	bic.w	r2, r3, #15
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	490e      	ldr	r1, [pc, #56]	@ (8007af8 <HAL_RCC_ClockConfig+0x244>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d214      	bcs.n	8007afc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ad2:	4b08      	ldr	r3, [pc, #32]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f023 020f 	bic.w	r2, r3, #15
 8007ada:	4906      	ldr	r1, [pc, #24]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae2:	4b04      	ldr	r3, [pc, #16]	@ (8007af4 <HAL_RCC_ClockConfig+0x240>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 030f 	and.w	r3, r3, #15
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d005      	beq.n	8007afc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e086      	b.n	8007c02 <HAL_RCC_ClockConfig+0x34e>
 8007af4:	52002000 	.word	0x52002000
 8007af8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d010      	beq.n	8007b2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d208      	bcs.n	8007b2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b18:	4b3c      	ldr	r3, [pc, #240]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	4939      	ldr	r1, [pc, #228]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0308 	and.w	r3, r3, #8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d010      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	4b34      	ldr	r3, [pc, #208]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d208      	bcs.n	8007b58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b46:	4b31      	ldr	r3, [pc, #196]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	492e      	ldr	r1, [pc, #184]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699a      	ldr	r2, [r3, #24]
 8007b68:	4b28      	ldr	r3, [pc, #160]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d208      	bcs.n	8007b86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b74:	4b25      	ldr	r3, [pc, #148]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	4922      	ldr	r1, [pc, #136]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d010      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69da      	ldr	r2, [r3, #28]
 8007b96:	4b1d      	ldr	r3, [pc, #116]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d208      	bcs.n	8007bb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	4917      	ldr	r1, [pc, #92]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007bb4:	f000 f834 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4b14      	ldr	r3, [pc, #80]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	4912      	ldr	r1, [pc, #72]	@ (8007c10 <HAL_RCC_ClockConfig+0x35c>)
 8007bc6:	5ccb      	ldrb	r3, [r1, r3]
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c0c <HAL_RCC_ClockConfig+0x358>)
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	4a0d      	ldr	r2, [pc, #52]	@ (8007c10 <HAL_RCC_ClockConfig+0x35c>)
 8007bdc:	5cd3      	ldrb	r3, [r2, r3]
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	4a0a      	ldr	r2, [pc, #40]	@ (8007c14 <HAL_RCC_ClockConfig+0x360>)
 8007bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bec:	4a0a      	ldr	r2, [pc, #40]	@ (8007c18 <HAL_RCC_ClockConfig+0x364>)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c1c <HAL_RCC_ClockConfig+0x368>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fb fd4c 	bl	8003694 <HAL_InitTick>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	08015334 	.word	0x08015334
 8007c14:	24000004 	.word	0x24000004
 8007c18:	24000000 	.word	0x24000000
 8007c1c:	24000008 	.word	0x24000008

08007c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	@ 0x24
 8007c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c26:	4bb3      	ldr	r3, [pc, #716]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c2e:	2b18      	cmp	r3, #24
 8007c30:	f200 8155 	bhi.w	8007ede <HAL_RCC_GetSysClockFreq+0x2be>
 8007c34:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007ca1 	.word	0x08007ca1
 8007c40:	08007edf 	.word	0x08007edf
 8007c44:	08007edf 	.word	0x08007edf
 8007c48:	08007edf 	.word	0x08007edf
 8007c4c:	08007edf 	.word	0x08007edf
 8007c50:	08007edf 	.word	0x08007edf
 8007c54:	08007edf 	.word	0x08007edf
 8007c58:	08007edf 	.word	0x08007edf
 8007c5c:	08007cc7 	.word	0x08007cc7
 8007c60:	08007edf 	.word	0x08007edf
 8007c64:	08007edf 	.word	0x08007edf
 8007c68:	08007edf 	.word	0x08007edf
 8007c6c:	08007edf 	.word	0x08007edf
 8007c70:	08007edf 	.word	0x08007edf
 8007c74:	08007edf 	.word	0x08007edf
 8007c78:	08007edf 	.word	0x08007edf
 8007c7c:	08007ccd 	.word	0x08007ccd
 8007c80:	08007edf 	.word	0x08007edf
 8007c84:	08007edf 	.word	0x08007edf
 8007c88:	08007edf 	.word	0x08007edf
 8007c8c:	08007edf 	.word	0x08007edf
 8007c90:	08007edf 	.word	0x08007edf
 8007c94:	08007edf 	.word	0x08007edf
 8007c98:	08007edf 	.word	0x08007edf
 8007c9c:	08007cd3 	.word	0x08007cd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ca0:	4b94      	ldr	r3, [pc, #592]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0320 	and.w	r3, r3, #32
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cac:	4b91      	ldr	r3, [pc, #580]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	08db      	lsrs	r3, r3, #3
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	4a90      	ldr	r2, [pc, #576]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007cbe:	e111      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cc2:	61bb      	str	r3, [r7, #24]
      break;
 8007cc4:	e10e      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8007efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007cc8:	61bb      	str	r3, [r7, #24]
      break;
 8007cca:	e10b      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8007f00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007cce:	61bb      	str	r3, [r7, #24]
      break;
 8007cd0:	e108      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cd2:	4b88      	ldr	r3, [pc, #544]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007cdc:	4b85      	ldr	r3, [pc, #532]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ce6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ce8:	4b82      	ldr	r3, [pc, #520]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cf2:	4b80      	ldr	r3, [pc, #512]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf6:	08db      	lsrs	r3, r3, #3
 8007cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80e1 	beq.w	8007ed8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	f000 8083 	beq.w	8007e24 <HAL_RCC_GetSysClockFreq+0x204>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	f200 80a1 	bhi.w	8007e68 <HAL_RCC_GetSysClockFreq+0x248>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_RCC_GetSysClockFreq+0x114>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d056      	beq.n	8007de0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007d32:	e099      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d34:	4b6f      	ldr	r3, [pc, #444]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d02d      	beq.n	8007d9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d40:	4b6c      	ldr	r3, [pc, #432]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	08db      	lsrs	r3, r3, #3
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	4a6b      	ldr	r2, [pc, #428]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	ee07 3a90 	vmov	s15, r3
 8007d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6a:	4b62      	ldr	r3, [pc, #392]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d9a:	e087      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007f08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dae:	4b51      	ldr	r3, [pc, #324]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dde:	e065      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df2:	4b40      	ldr	r3, [pc, #256]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e22:	e043      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007f10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e36:	4b2f      	ldr	r3, [pc, #188]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e66:	e021      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007eaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007eac:	4b11      	ldr	r3, [pc, #68]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb0:	0a5b      	lsrs	r3, r3, #9
 8007eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed0:	ee17 3a90 	vmov	r3, s15
 8007ed4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007ed6:	e005      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]
      break;
 8007edc:	e002      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ede:	4b07      	ldr	r3, [pc, #28]	@ (8007efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ee0:	61bb      	str	r3, [r7, #24]
      break;
 8007ee2:	bf00      	nop
  }

  return sysclockfreq;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3724      	adds	r7, #36	@ 0x24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	03d09000 	.word	0x03d09000
 8007efc:	003d0900 	.word	0x003d0900
 8007f00:	02dc6c00 	.word	0x02dc6c00
 8007f04:	46000000 	.word	0x46000000
 8007f08:	4c742400 	.word	0x4c742400
 8007f0c:	4a742400 	.word	0x4a742400
 8007f10:	4c371b00 	.word	0x4c371b00

08007f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f1a:	f7ff fe81 	bl	8007c20 <HAL_RCC_GetSysClockFreq>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	4b10      	ldr	r3, [pc, #64]	@ (8007f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	0a1b      	lsrs	r3, r3, #8
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	490f      	ldr	r1, [pc, #60]	@ (8007f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f2c:	5ccb      	ldrb	r3, [r1, r3]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	fa22 f303 	lsr.w	r3, r2, r3
 8007f36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f38:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	4a09      	ldr	r2, [pc, #36]	@ (8007f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f42:	5cd3      	ldrb	r3, [r2, r3]
 8007f44:	f003 031f 	and.w	r3, r3, #31
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4e:	4a07      	ldr	r2, [pc, #28]	@ (8007f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8007f50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f52:	4a07      	ldr	r2, [pc, #28]	@ (8007f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f58:	4b04      	ldr	r3, [pc, #16]	@ (8007f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	58024400 	.word	0x58024400
 8007f68:	08015334 	.word	0x08015334
 8007f6c:	24000004 	.word	0x24000004
 8007f70:	24000000 	.word	0x24000000

08007f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f78:	f7ff ffcc 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b06      	ldr	r3, [pc, #24]	@ (8007f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	091b      	lsrs	r3, r3, #4
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	4904      	ldr	r1, [pc, #16]	@ (8007f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f8a:	5ccb      	ldrb	r3, [r1, r3]
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	58024400 	.word	0x58024400
 8007f9c:	08015334 	.word	0x08015334

08007fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007fa4:	f7ff ffb6 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	0a1b      	lsrs	r3, r3, #8
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	4904      	ldr	r1, [pc, #16]	@ (8007fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007fb6:	5ccb      	ldrb	r3, [r1, r3]
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	58024400 	.word	0x58024400
 8007fc8:	08015334 	.word	0x08015334

08007fcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fd0:	b0c6      	sub	sp, #280	@ 0x118
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	ea54 0305 	orrs.w	r3, r4, r5
 8007ff6:	d049      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ffe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008002:	d02f      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008008:	d828      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800800a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800800e:	d01a      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008014:	d822      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800801a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800801e:	d007      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008020:	e01c      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008022:	4bab      	ldr	r3, [pc, #684]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008026:	4aaa      	ldr	r2, [pc, #680]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800802c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800802e:	e01a      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008034:	3308      	adds	r3, #8
 8008036:	2102      	movs	r1, #2
 8008038:	4618      	mov	r0, r3
 800803a:	f002 fa49 	bl	800a4d0 <RCCEx_PLL2_Config>
 800803e:	4603      	mov	r3, r0
 8008040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008044:	e00f      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	3328      	adds	r3, #40	@ 0x28
 800804c:	2102      	movs	r1, #2
 800804e:	4618      	mov	r0, r3
 8008050:	f002 faf0 	bl	800a634 <RCCEx_PLL3_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800805a:	e004      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008062:	e000      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800806e:	4b98      	ldr	r3, [pc, #608]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008072:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800807c:	4a94      	ldr	r2, [pc, #592]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800807e:	430b      	orrs	r3, r1
 8008080:	6513      	str	r3, [r2, #80]	@ 0x50
 8008082:	e003      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008098:	f04f 0900 	mov.w	r9, #0
 800809c:	ea58 0309 	orrs.w	r3, r8, r9
 80080a0:	d047      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80080a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d82a      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80080ac:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080c9 	.word	0x080080c9
 80080b8:	080080d7 	.word	0x080080d7
 80080bc:	080080ed 	.word	0x080080ed
 80080c0:	0800810b 	.word	0x0800810b
 80080c4:	0800810b 	.word	0x0800810b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c8:	4b81      	ldr	r3, [pc, #516]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	4a80      	ldr	r2, [pc, #512]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080d4:	e01a      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080da:	3308      	adds	r3, #8
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f002 f9f6 	bl	800a4d0 <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080ea:	e00f      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f0:	3328      	adds	r3, #40	@ 0x28
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f002 fa9d 	bl	800a634 <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008100:	e004      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800810a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008114:	4b6e      	ldr	r3, [pc, #440]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008118:	f023 0107 	bic.w	r1, r3, #7
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008122:	4a6b      	ldr	r2, [pc, #428]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008124:	430b      	orrs	r3, r1
 8008126:	6513      	str	r3, [r2, #80]	@ 0x50
 8008128:	e003      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800812e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800813e:	f04f 0b00 	mov.w	fp, #0
 8008142:	ea5a 030b 	orrs.w	r3, sl, fp
 8008146:	d05b      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008150:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008154:	d03b      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008156:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800815a:	d834      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800815c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008160:	d037      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008162:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008166:	d82e      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008168:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800816c:	d033      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800816e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008172:	d828      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008178:	d01a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800817a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800817e:	d822      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008188:	d007      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800818a:	e01c      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800818c:	4b50      	ldr	r3, [pc, #320]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	4a4f      	ldr	r2, [pc, #316]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008198:	e01e      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819e:	3308      	adds	r3, #8
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 f994 	bl	800a4d0 <RCCEx_PLL2_Config>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80081ae:	e013      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b4:	3328      	adds	r3, #40	@ 0x28
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f002 fa3b 	bl	800a634 <RCCEx_PLL3_Config>
 80081be:	4603      	mov	r3, r0
 80081c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081c4:	e008      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081cc:	e004      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80081ce:	bf00      	nop
 80081d0:	e002      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80081d2:	bf00      	nop
 80081d4:	e000      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80081d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10b      	bne.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081e0:	4b3b      	ldr	r3, [pc, #236]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081f0:	4a37      	ldr	r2, [pc, #220]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081f2:	430b      	orrs	r3, r1
 80081f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80081f6:	e003      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800820c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008210:	2300      	movs	r3, #0
 8008212:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008216:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800821a:	460b      	mov	r3, r1
 800821c:	4313      	orrs	r3, r2
 800821e:	d05d      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008224:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008228:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800822c:	d03b      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800822e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008232:	d834      	bhi.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008238:	d037      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800823a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800823e:	d82e      	bhi.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008240:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008244:	d033      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008246:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800824a:	d828      	bhi.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800824c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008250:	d01a      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008252:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008256:	d822      	bhi.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800825c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008260:	d007      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008262:	e01c      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008264:	4b1a      	ldr	r3, [pc, #104]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008268:	4a19      	ldr	r2, [pc, #100]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800826a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800826e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008270:	e01e      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008276:	3308      	adds	r3, #8
 8008278:	2100      	movs	r1, #0
 800827a:	4618      	mov	r0, r3
 800827c:	f002 f928 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008280:	4603      	mov	r3, r0
 8008282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008286:	e013      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828c:	3328      	adds	r3, #40	@ 0x28
 800828e:	2100      	movs	r1, #0
 8008290:	4618      	mov	r0, r3
 8008292:	f002 f9cf 	bl	800a634 <RCCEx_PLL3_Config>
 8008296:	4603      	mov	r3, r0
 8008298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800829c:	e008      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082a4:	e004      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80082a6:	bf00      	nop
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80082ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10d      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80082b8:	4b05      	ldr	r3, [pc, #20]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082c8:	4a01      	ldr	r2, [pc, #4]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082ca:	430b      	orrs	r3, r1
 80082cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80082ce:	e005      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80082d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80082e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	d03a      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80082fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008302:	2b30      	cmp	r3, #48	@ 0x30
 8008304:	d01f      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008306:	2b30      	cmp	r3, #48	@ 0x30
 8008308:	d819      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800830a:	2b20      	cmp	r3, #32
 800830c:	d00c      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d815      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d019      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008316:	2b10      	cmp	r3, #16
 8008318:	d111      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831a:	4baa      	ldr	r3, [pc, #680]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	4aa9      	ldr	r2, [pc, #676]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008326:	e011      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832c:	3308      	adds	r3, #8
 800832e:	2102      	movs	r1, #2
 8008330:	4618      	mov	r0, r3
 8008332:	f002 f8cd 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800833c:	e006      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008344:	e002      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800834a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800834c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10a      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008354:	4b9b      	ldr	r3, [pc, #620]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008358:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800835c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008362:	4a98      	ldr	r2, [pc, #608]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008364:	430b      	orrs	r3, r1
 8008366:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008368:	e003      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800836e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800837e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008382:	2300      	movs	r3, #0
 8008384:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008388:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800838c:	460b      	mov	r3, r1
 800838e:	4313      	orrs	r3, r2
 8008390:	d051      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800839c:	d035      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800839e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a2:	d82e      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80083a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083a8:	d031      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80083aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083ae:	d828      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80083b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b4:	d01a      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 80083b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ba:	d822      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80083c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c4:	d007      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80083c6:	e01c      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c8:	4b7e      	ldr	r3, [pc, #504]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	4a7d      	ldr	r2, [pc, #500]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083d4:	e01c      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083da:	3308      	adds	r3, #8
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f002 f876 	bl	800a4d0 <RCCEx_PLL2_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083ea:	e011      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f0:	3328      	adds	r3, #40	@ 0x28
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f002 f91d 	bl	800a634 <RCCEx_PLL3_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008400:	e006      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008408:	e002      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800840a:	bf00      	nop
 800840c:	e000      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800840e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008418:	4b6a      	ldr	r3, [pc, #424]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800841a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008426:	4a67      	ldr	r2, [pc, #412]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008428:	430b      	orrs	r3, r1
 800842a:	6513      	str	r3, [r2, #80]	@ 0x50
 800842c:	e003      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008432:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008442:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008446:	2300      	movs	r3, #0
 8008448:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800844c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008450:	460b      	mov	r3, r1
 8008452:	4313      	orrs	r3, r2
 8008454:	d053      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800845c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008460:	d033      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008462:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008466:	d82c      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800846c:	d02f      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x502>
 800846e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008472:	d826      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008474:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008478:	d02b      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800847a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800847e:	d820      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008484:	d012      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800848a:	d81a      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d022      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008494:	d115      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849a:	3308      	adds	r3, #8
 800849c:	2101      	movs	r1, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 f816 	bl	800a4d0 <RCCEx_PLL2_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80084aa:	e015      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b0:	3328      	adds	r3, #40	@ 0x28
 80084b2:	2101      	movs	r1, #1
 80084b4:	4618      	mov	r0, r3
 80084b6:	f002 f8bd 	bl	800a634 <RCCEx_PLL3_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80084c0:	e00a      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084c8:	e006      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80084ca:	bf00      	nop
 80084cc:	e004      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80084ce:	bf00      	nop
 80084d0:	e002      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80084d2:	bf00      	nop
 80084d4:	e000      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80084d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80084e0:	4b38      	ldr	r3, [pc, #224]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084ee:	4a35      	ldr	r2, [pc, #212]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084f0:	430b      	orrs	r3, r1
 80084f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80084f4:	e003      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800850a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800850e:	2300      	movs	r3, #0
 8008510:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008514:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008518:	460b      	mov	r3, r1
 800851a:	4313      	orrs	r3, r2
 800851c:	d058      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800851e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008522:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800852a:	d033      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800852c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008530:	d82c      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008536:	d02f      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853c:	d826      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800853e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008542:	d02b      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008544:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008548:	d820      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800854a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854e:	d012      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008554:	d81a      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d022      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800855a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800855e:	d115      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008564:	3308      	adds	r3, #8
 8008566:	2101      	movs	r1, #1
 8008568:	4618      	mov	r0, r3
 800856a:	f001 ffb1 	bl	800a4d0 <RCCEx_PLL2_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008574:	e015      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857a:	3328      	adds	r3, #40	@ 0x28
 800857c:	2101      	movs	r1, #1
 800857e:	4618      	mov	r0, r3
 8008580:	f002 f858 	bl	800a634 <RCCEx_PLL3_Config>
 8008584:	4603      	mov	r3, r0
 8008586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800858a:	e00a      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008592:	e006      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008594:	bf00      	nop
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008598:	bf00      	nop
 800859a:	e002      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800859c:	bf00      	nop
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10e      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80085aa:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80085ba:	4a02      	ldr	r2, [pc, #8]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	6593      	str	r3, [r2, #88]	@ 0x58
 80085c0:	e006      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80085c2:	bf00      	nop
 80085c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80085dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085e0:	2300      	movs	r3, #0
 80085e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4313      	orrs	r3, r2
 80085ee:	d037      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80085f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fa:	d00e      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80085fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008600:	d816      	bhi.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d018      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800860a:	d111      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860c:	4bc4      	ldr	r3, [pc, #784]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	4ac3      	ldr	r2, [pc, #780]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008618:	e00f      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861e:	3308      	adds	r3, #8
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f001 ff54 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800862e:	e004      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008636:	e000      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008642:	4bb7      	ldr	r3, [pc, #732]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008646:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800864a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800864e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008650:	4ab3      	ldr	r2, [pc, #716]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008652:	430b      	orrs	r3, r1
 8008654:	6513      	str	r3, [r2, #80]	@ 0x50
 8008656:	e003      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800865c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800866c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008670:	2300      	movs	r3, #0
 8008672:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008676:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800867a:	460b      	mov	r3, r1
 800867c:	4313      	orrs	r3, r2
 800867e:	d039      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008686:	2b03      	cmp	r3, #3
 8008688:	d81c      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800868a:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086cd 	.word	0x080086cd
 8008694:	080086a1 	.word	0x080086a1
 8008698:	080086af 	.word	0x080086af
 800869c:	080086cd 	.word	0x080086cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a0:	4b9f      	ldr	r3, [pc, #636]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a4:	4a9e      	ldr	r2, [pc, #632]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80086ac:	e00f      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b2:	3308      	adds	r3, #8
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 ff0a 	bl	800a4d0 <RCCEx_PLL2_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80086c2:	e004      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086ca:	e000      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80086cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80086d6:	4b92      	ldr	r3, [pc, #584]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086da:	f023 0103 	bic.w	r1, r3, #3
 80086de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e6:	430b      	orrs	r3, r1
 80086e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086ea:	e003      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008700:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008704:	2300      	movs	r3, #0
 8008706:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800870a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800870e:	460b      	mov	r3, r1
 8008710:	4313      	orrs	r3, r2
 8008712:	f000 8099 	beq.w	8008848 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008716:	4b83      	ldr	r3, [pc, #524]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a82      	ldr	r2, [pc, #520]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800871c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008722:	f7fb f801 	bl	8003728 <HAL_GetTick>
 8008726:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800872a:	e00b      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872c:	f7fa fffc 	bl	8003728 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b64      	cmp	r3, #100	@ 0x64
 800873a:	d903      	bls.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008742:	e005      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008744:	4b77      	ldr	r3, [pc, #476]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0ed      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008754:	2b00      	cmp	r3, #0
 8008756:	d173      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008758:	4b71      	ldr	r3, [pc, #452]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800875a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008760:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008764:	4053      	eors	r3, r2
 8008766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800876a:	2b00      	cmp	r3, #0
 800876c:	d015      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800876e:	4b6c      	ldr	r3, [pc, #432]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008776:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800877a:	4b69      	ldr	r3, [pc, #420]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800877c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877e:	4a68      	ldr	r2, [pc, #416]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008784:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008786:	4b66      	ldr	r3, [pc, #408]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878a:	4a65      	ldr	r2, [pc, #404]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800878c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008790:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008792:	4a63      	ldr	r2, [pc, #396]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008798:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a6:	d118      	bne.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a8:	f7fa ffbe 	bl	8003728 <HAL_GetTick>
 80087ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087b0:	e00d      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087b2:	f7fa ffb9 	bl	8003728 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80087bc:	1ad2      	subs	r2, r2, r3
 80087be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d903      	bls.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80087cc:	e005      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ce:	4b54      	ldr	r3, [pc, #336]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0eb      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80087da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d129      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087f2:	d10e      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80087f4:	4b4a      	ldr	r3, [pc, #296]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008804:	091a      	lsrs	r2, r3, #4
 8008806:	4b48      	ldr	r3, [pc, #288]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008808:	4013      	ands	r3, r2
 800880a:	4a45      	ldr	r2, [pc, #276]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800880c:	430b      	orrs	r3, r1
 800880e:	6113      	str	r3, [r2, #16]
 8008810:	e005      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008812:	4b43      	ldr	r3, [pc, #268]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	4a42      	ldr	r2, [pc, #264]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008818:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800881c:	6113      	str	r3, [r2, #16]
 800881e:	4b40      	ldr	r3, [pc, #256]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008820:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008826:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800882a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800882e:	4a3c      	ldr	r2, [pc, #240]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008830:	430b      	orrs	r3, r1
 8008832:	6713      	str	r3, [r2, #112]	@ 0x70
 8008834:	e008      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008836:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800883a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800883e:	e003      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008844:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	f002 0301 	and.w	r3, r2, #1
 8008854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008858:	2300      	movs	r3, #0
 800885a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800885e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008862:	460b      	mov	r3, r1
 8008864:	4313      	orrs	r3, r2
 8008866:	f000 808f 	beq.w	8008988 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800886a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008870:	2b28      	cmp	r3, #40	@ 0x28
 8008872:	d871      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008874:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887a:	bf00      	nop
 800887c:	08008961 	.word	0x08008961
 8008880:	08008959 	.word	0x08008959
 8008884:	08008959 	.word	0x08008959
 8008888:	08008959 	.word	0x08008959
 800888c:	08008959 	.word	0x08008959
 8008890:	08008959 	.word	0x08008959
 8008894:	08008959 	.word	0x08008959
 8008898:	08008959 	.word	0x08008959
 800889c:	0800892d 	.word	0x0800892d
 80088a0:	08008959 	.word	0x08008959
 80088a4:	08008959 	.word	0x08008959
 80088a8:	08008959 	.word	0x08008959
 80088ac:	08008959 	.word	0x08008959
 80088b0:	08008959 	.word	0x08008959
 80088b4:	08008959 	.word	0x08008959
 80088b8:	08008959 	.word	0x08008959
 80088bc:	08008943 	.word	0x08008943
 80088c0:	08008959 	.word	0x08008959
 80088c4:	08008959 	.word	0x08008959
 80088c8:	08008959 	.word	0x08008959
 80088cc:	08008959 	.word	0x08008959
 80088d0:	08008959 	.word	0x08008959
 80088d4:	08008959 	.word	0x08008959
 80088d8:	08008959 	.word	0x08008959
 80088dc:	08008961 	.word	0x08008961
 80088e0:	08008959 	.word	0x08008959
 80088e4:	08008959 	.word	0x08008959
 80088e8:	08008959 	.word	0x08008959
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008959 	.word	0x08008959
 80088f4:	08008959 	.word	0x08008959
 80088f8:	08008959 	.word	0x08008959
 80088fc:	08008961 	.word	0x08008961
 8008900:	08008959 	.word	0x08008959
 8008904:	08008959 	.word	0x08008959
 8008908:	08008959 	.word	0x08008959
 800890c:	08008959 	.word	0x08008959
 8008910:	08008959 	.word	0x08008959
 8008914:	08008959 	.word	0x08008959
 8008918:	08008959 	.word	0x08008959
 800891c:	08008961 	.word	0x08008961
 8008920:	58024400 	.word	0x58024400
 8008924:	58024800 	.word	0x58024800
 8008928:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800892c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008930:	3308      	adds	r3, #8
 8008932:	2101      	movs	r1, #1
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fdcb 	bl	800a4d0 <RCCEx_PLL2_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008940:	e00f      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008946:	3328      	adds	r3, #40	@ 0x28
 8008948:	2101      	movs	r1, #1
 800894a:	4618      	mov	r0, r3
 800894c:	f001 fe72 	bl	800a634 <RCCEx_PLL3_Config>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008956:	e004      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800896a:	4bbf      	ldr	r3, [pc, #764]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800896c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008978:	4abb      	ldr	r2, [pc, #748]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800897a:	430b      	orrs	r3, r1
 800897c:	6553      	str	r3, [r2, #84]	@ 0x54
 800897e:	e003      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f002 0302 	and.w	r3, r2, #2
 8008994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008998:	2300      	movs	r3, #0
 800899a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800899e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d041      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80089a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	d824      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80089b2:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	080089d1 	.word	0x080089d1
 80089c0:	080089e7 	.word	0x080089e7
 80089c4:	08008a05 	.word	0x08008a05
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a05 	.word	0x08008a05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d4:	3308      	adds	r3, #8
 80089d6:	2101      	movs	r1, #1
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 fd79 	bl	800a4d0 <RCCEx_PLL2_Config>
 80089de:	4603      	mov	r3, r0
 80089e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089e4:	e00f      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ea:	3328      	adds	r3, #40	@ 0x28
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 fe20 	bl	800a634 <RCCEx_PLL3_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089fa:	e004      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a02:	e000      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008a0e:	4b96      	ldr	r3, [pc, #600]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a12:	f023 0107 	bic.w	r1, r3, #7
 8008a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a1c:	4a92      	ldr	r2, [pc, #584]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a22:	e003      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 0304 	and.w	r3, r2, #4
 8008a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a42:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a46:	460b      	mov	r3, r1
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	d044      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a54:	2b05      	cmp	r3, #5
 8008a56:	d825      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008aad 	.word	0x08008aad
 8008a64:	08008a79 	.word	0x08008a79
 8008a68:	08008a8f 	.word	0x08008a8f
 8008a6c:	08008aad 	.word	0x08008aad
 8008a70:	08008aad 	.word	0x08008aad
 8008a74:	08008aad 	.word	0x08008aad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 fd25 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a8c:	e00f      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a92:	3328      	adds	r3, #40	@ 0x28
 8008a94:	2101      	movs	r1, #1
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 fdcc 	bl	800a634 <RCCEx_PLL3_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008aa2:	e004      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008aaa:	e000      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10b      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aba:	f023 0107 	bic.w	r1, r3, #7
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac6:	4a68      	ldr	r2, [pc, #416]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8008acc:	e003      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ad2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f002 0320 	and.w	r3, r2, #32
 8008ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008aec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4313      	orrs	r3, r2
 8008af4:	d055      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b02:	d033      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b08:	d82c      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b0e:	d02f      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b14:	d826      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008b16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b1a:	d02b      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008b1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b20:	d820      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b26:	d012      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b2c:	d81a      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d022      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b36:	d115      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	2100      	movs	r1, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 fcc5 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b4c:	e015      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b52:	3328      	adds	r3, #40	@ 0x28
 8008b54:	2102      	movs	r1, #2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 fd6c 	bl	800a634 <RCCEx_PLL3_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b62:	e00a      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b6a:	e006      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b6c:	bf00      	nop
 8008b6e:	e004      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b70:	bf00      	nop
 8008b72:	e002      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b74:	bf00      	nop
 8008b76:	e000      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10b      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b82:	4b39      	ldr	r3, [pc, #228]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b92:	4a35      	ldr	r2, [pc, #212]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b98:	e003      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008bae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bb8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	d058      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008bce:	d033      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008bd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008bd4:	d82c      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bda:	d02f      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be0:	d826      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008be6:	d02b      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008be8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bec:	d820      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bf2:	d012      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bf8:	d81a      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d022      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c02:	d115      	bne.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c08:	3308      	adds	r3, #8
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 fc5f 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c18:	e015      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c1e:	3328      	adds	r3, #40	@ 0x28
 8008c20:	2102      	movs	r1, #2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 fd06 	bl	800a634 <RCCEx_PLL3_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c2e:	e00a      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c36:	e006      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008c38:	bf00      	nop
 8008c3a:	e004      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008c3c:	bf00      	nop
 8008c3e:	e002      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008c40:	bf00      	nop
 8008c42:	e000      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10e      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c4e:	4b06      	ldr	r3, [pc, #24]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c5e:	4a02      	ldr	r2, [pc, #8]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c64:	e006      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008c66:	bf00      	nop
 8008c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d055      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ca0:	d033      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008ca2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ca6:	d82c      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cac:	d02f      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cb2:	d826      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008cb4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008cb8:	d02b      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008cba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008cbe:	d820      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc4:	d012      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cca:	d81a      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d022      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd4:	d115      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cda:	3308      	adds	r3, #8
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 fbf6 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cea:	e015      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf0:	3328      	adds	r3, #40	@ 0x28
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 fc9d 	bl	800a634 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d00:	e00a      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d08:	e006      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d0a:	bf00      	nop
 8008d0c:	e004      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10b      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008d20:	4ba0      	ldr	r3, [pc, #640]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d30:	4a9c      	ldr	r2, [pc, #624]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d32:	430b      	orrs	r3, r1
 8008d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d36:	e003      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f002 0308 	and.w	r3, r2, #8
 8008d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d50:	2300      	movs	r3, #0
 8008d52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d56:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	d01e      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d72:	3328      	adds	r3, #40	@ 0x28
 8008d74:	2102      	movs	r1, #2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 fc5c 	bl	800a634 <RCCEx_PLL3_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008d88:	4b86      	ldr	r3, [pc, #536]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d98:	4a82      	ldr	r2, [pc, #520]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f002 0310 	and.w	r3, r2, #16
 8008daa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008dae:	2300      	movs	r3, #0
 8008db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008db4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008db8:	460b      	mov	r3, r1
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	d01e      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dca:	d10c      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd0:	3328      	adds	r3, #40	@ 0x28
 8008dd2:	2102      	movs	r1, #2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fc2d 	bl	800a634 <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008de6:	4b6f      	ldr	r3, [pc, #444]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008df6:	4a6b      	ldr	r2, [pc, #428]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008e08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e0e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e12:	460b      	mov	r3, r1
 8008e14:	4313      	orrs	r3, r2
 8008e16:	d03e      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e24:	d022      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e2a:	d81b      	bhi.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e34:	d00b      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008e36:	e015      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	2100      	movs	r1, #0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 fb45 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e4c:	e00f      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e52:	3328      	adds	r3, #40	@ 0x28
 8008e54:	2102      	movs	r1, #2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f001 fbec 	bl	800a634 <RCCEx_PLL3_Config>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e62:	e004      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e6a:	e000      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10b      	bne.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e76:	4b4b      	ldr	r3, [pc, #300]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e86:	4a47      	ldr	r2, [pc, #284]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e8c:	e003      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ea2:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ea8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008eac:	460b      	mov	r3, r1
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	d03b      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ebe:	d01f      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008ec0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ec4:	d818      	bhi.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eca:	d003      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ed0:	d007      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008ed2:	e011      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed4:	4b33      	ldr	r3, [pc, #204]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	4a32      	ldr	r2, [pc, #200]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ee0:	e00f      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee6:	3328      	adds	r3, #40	@ 0x28
 8008ee8:	2101      	movs	r1, #1
 8008eea:	4618      	mov	r0, r3
 8008eec:	f001 fba2 	bl	800a634 <RCCEx_PLL3_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ef6:	e004      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008efe:	e000      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10b      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f0a:	4b26      	ldr	r3, [pc, #152]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f1a:	4a22      	ldr	r2, [pc, #136]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f20:	e003      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008f36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f38:	2300      	movs	r3, #0
 8008f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f40:	460b      	mov	r3, r1
 8008f42:	4313      	orrs	r3, r2
 8008f44:	d034      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f54:	d007      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008f56:	e011      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f58:	4b12      	ldr	r3, [pc, #72]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5c:	4a11      	ldr	r2, [pc, #68]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f64:	e00e      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	2102      	movs	r1, #2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 faae 	bl	800a4d0 <RCCEx_PLL2_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f7a:	e003      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10d      	bne.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f8c:	4b05      	ldr	r3, [pc, #20]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f9a:	4a02      	ldr	r2, [pc, #8]	@ (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008fa0:	e006      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008fa2:	bf00      	nop
 8008fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008fbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fc2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	d00c      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd0:	3328      	adds	r3, #40	@ 0x28
 8008fd2:	2102      	movs	r1, #2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fb2d 	bl	800a634 <RCCEx_PLL3_Config>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ff8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4313      	orrs	r3, r2
 8009000:	d036      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009008:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800900c:	d018      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800900e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009012:	d811      	bhi.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009018:	d014      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800901a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800901e:	d80b      	bhi.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009020:	2b00      	cmp	r3, #0
 8009022:	d011      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009028:	d106      	bne.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800902a:	4bb7      	ldr	r3, [pc, #732]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902e:	4ab6      	ldr	r2, [pc, #728]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009036:	e008      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800903e:	e004      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009040:	bf00      	nop
 8009042:	e002      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009044:	bf00      	nop
 8009046:	e000      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800904a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009052:	4bad      	ldr	r3, [pc, #692]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009056:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800905a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009060:	4aa9      	ldr	r2, [pc, #676]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009062:	430b      	orrs	r3, r1
 8009064:	6553      	str	r3, [r2, #84]	@ 0x54
 8009066:	e003      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800906c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800907c:	653b      	str	r3, [r7, #80]	@ 0x50
 800907e:	2300      	movs	r3, #0
 8009080:	657b      	str	r3, [r7, #84]	@ 0x54
 8009082:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009086:	460b      	mov	r3, r1
 8009088:	4313      	orrs	r3, r2
 800908a:	d009      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800908c:	4b9e      	ldr	r3, [pc, #632]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800908e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009090:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800909a:	4a9b      	ldr	r2, [pc, #620]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800909c:	430b      	orrs	r3, r1
 800909e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80090ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ae:	2300      	movs	r3, #0
 80090b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80090b6:	460b      	mov	r3, r1
 80090b8:	4313      	orrs	r3, r2
 80090ba:	d009      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090bc:	4b92      	ldr	r3, [pc, #584]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80090c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ca:	4a8f      	ldr	r2, [pc, #572]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090cc:	430b      	orrs	r3, r1
 80090ce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80090dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80090de:	2300      	movs	r3, #0
 80090e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80090e6:	460b      	mov	r3, r1
 80090e8:	4313      	orrs	r3, r2
 80090ea:	d00e      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090ec:	4b86      	ldr	r3, [pc, #536]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	4a85      	ldr	r2, [pc, #532]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090f6:	6113      	str	r3, [r2, #16]
 80090f8:	4b83      	ldr	r3, [pc, #524]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090fa:	6919      	ldr	r1, [r3, #16]
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009100:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009104:	4a80      	ldr	r2, [pc, #512]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009106:	430b      	orrs	r3, r1
 8009108:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800910a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009116:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009118:	2300      	movs	r3, #0
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800911c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009120:	460b      	mov	r3, r1
 8009122:	4313      	orrs	r3, r2
 8009124:	d009      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009126:	4b78      	ldr	r3, [pc, #480]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800912a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800912e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009134:	4a74      	ldr	r2, [pc, #464]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009136:	430b      	orrs	r3, r1
 8009138:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800913a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009146:	633b      	str	r3, [r7, #48]	@ 0x30
 8009148:	2300      	movs	r3, #0
 800914a:	637b      	str	r3, [r7, #52]	@ 0x34
 800914c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009150:	460b      	mov	r3, r1
 8009152:	4313      	orrs	r3, r2
 8009154:	d00a      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009156:	4b6c      	ldr	r3, [pc, #432]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800915e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009166:	4a68      	ldr	r2, [pc, #416]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009168:	430b      	orrs	r3, r1
 800916a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800916c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	2100      	movs	r1, #0
 8009176:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800917e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009182:	460b      	mov	r3, r1
 8009184:	4313      	orrs	r3, r2
 8009186:	d011      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918c:	3308      	adds	r3, #8
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f001 f99d 	bl	800a4d0 <RCCEx_PLL2_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800919c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80091ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	2100      	movs	r1, #0
 80091b6:	6239      	str	r1, [r7, #32]
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80091be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80091c2:	460b      	mov	r3, r1
 80091c4:	4313      	orrs	r3, r2
 80091c6:	d011      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091cc:	3308      	adds	r3, #8
 80091ce:	2101      	movs	r1, #1
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 f97d 	bl	800a4d0 <RCCEx_PLL2_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80091dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	2100      	movs	r1, #0
 80091f6:	61b9      	str	r1, [r7, #24]
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	61fb      	str	r3, [r7, #28]
 80091fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009202:	460b      	mov	r3, r1
 8009204:	4313      	orrs	r3, r2
 8009206:	d011      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800920c:	3308      	adds	r3, #8
 800920e:	2102      	movs	r1, #2
 8009210:	4618      	mov	r0, r3
 8009212:	f001 f95d 	bl	800a4d0 <RCCEx_PLL2_Config>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800921c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009228:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	2100      	movs	r1, #0
 8009236:	6139      	str	r1, [r7, #16]
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009242:	460b      	mov	r3, r1
 8009244:	4313      	orrs	r3, r2
 8009246:	d011      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924c:	3328      	adds	r3, #40	@ 0x28
 800924e:	2100      	movs	r1, #0
 8009250:	4618      	mov	r0, r3
 8009252:	f001 f9ef 	bl	800a634 <RCCEx_PLL3_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800925c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	2100      	movs	r1, #0
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009282:	460b      	mov	r3, r1
 8009284:	4313      	orrs	r3, r2
 8009286:	d011      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928c:	3328      	adds	r3, #40	@ 0x28
 800928e:	2101      	movs	r1, #1
 8009290:	4618      	mov	r0, r3
 8009292:	f001 f9cf 	bl	800a634 <RCCEx_PLL3_Config>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800929c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80092ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	2100      	movs	r1, #0
 80092b6:	6039      	str	r1, [r7, #0]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	607b      	str	r3, [r7, #4]
 80092be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092c2:	460b      	mov	r3, r1
 80092c4:	4313      	orrs	r3, r2
 80092c6:	d011      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092cc:	3328      	adds	r3, #40	@ 0x28
 80092ce:	2102      	movs	r1, #2
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 f9af 	bl	800a634 <RCCEx_PLL3_Config>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80092dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80092ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	e000      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009300:	46bd      	mov	sp, r7
 8009302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009306:	bf00      	nop
 8009308:	58024400 	.word	0x58024400

0800930c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b090      	sub	sp, #64	@ 0x40
 8009310:	af00      	add	r7, sp, #0
 8009312:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800931a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800931e:	430b      	orrs	r3, r1
 8009320:	f040 8094 	bne.w	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009324:	4b9b      	ldr	r3, [pc, #620]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	2b04      	cmp	r3, #4
 8009332:	f200 8087 	bhi.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009336:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	08009351 	.word	0x08009351
 8009340:	08009379 	.word	0x08009379
 8009344:	080093a1 	.word	0x080093a1
 8009348:	0800943d 	.word	0x0800943d
 800934c:	080093c9 	.word	0x080093c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009350:	4b90      	ldr	r3, [pc, #576]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800935c:	d108      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800935e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009362:	4618      	mov	r0, r3
 8009364:	f000 ff62 	bl	800a22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800936c:	f000 bc93 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009374:	f000 bc8f 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009378:	4b86      	ldr	r3, [pc, #536]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009384:	d108      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fca6 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009394:	f000 bc7f 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939c:	f000 bc7b 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a0:	4b7c      	ldr	r3, [pc, #496]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ac:	d108      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fde6 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093bc:	f000 bc6b 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c4:	f000 bc67 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093c8:	4b72      	ldr	r3, [pc, #456]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093d2:	4b70      	ldr	r3, [pc, #448]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d10c      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80093de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d109      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e4:	4b6b      	ldr	r3, [pc, #428]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	08db      	lsrs	r3, r3, #3
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	4a6a      	ldr	r2, [pc, #424]	@ (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80093f0:	fa22 f303 	lsr.w	r3, r2, r3
 80093f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f6:	e01f      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093f8:	4b66      	ldr	r3, [pc, #408]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009404:	d106      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800940c:	d102      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800940e:	4b63      	ldr	r3, [pc, #396]	@ (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009412:	e011      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009414:	4b5f      	ldr	r3, [pc, #380]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800941c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009420:	d106      	bne.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009428:	d102      	bne.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800942a:	4b5d      	ldr	r3, [pc, #372]	@ (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800942c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800942e:	e003      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009434:	f000 bc2f 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009438:	f000 bc2d 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800943c:	4b59      	ldr	r3, [pc, #356]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009440:	f000 bc29 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009448:	f000 bc25 	b.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800944c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009450:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009454:	430b      	orrs	r3, r1
 8009456:	f040 80a7 	bne.w	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800945a:	4b4e      	ldr	r3, [pc, #312]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800945c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009462:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800946a:	d054      	beq.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009472:	f200 808b 	bhi.w	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800947c:	f000 8083 	beq.w	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009486:	f200 8081 	bhi.w	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800948a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009490:	d02f      	beq.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009498:	d878      	bhi.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80094a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094a6:	d012      	beq.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80094a8:	e070      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094aa:	4b3a      	ldr	r3, [pc, #232]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094b6:	d107      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 feb5 	bl	800a22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c6:	e3e6      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094cc:	e3e3      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ce:	4b31      	ldr	r3, [pc, #196]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094da:	d107      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094dc:	f107 0318 	add.w	r3, r7, #24
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fbfb 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ea:	e3d4      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f0:	e3d1      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094f2:	4b28      	ldr	r3, [pc, #160]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094fe:	d107      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009500:	f107 030c 	add.w	r3, r7, #12
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fd3d 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800950e:	e3c2      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009514:	e3bf      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009516:	4b1f      	ldr	r3, [pc, #124]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800951a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800951e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009520:	4b1c      	ldr	r3, [pc, #112]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b04      	cmp	r3, #4
 800952a:	d10c      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800952c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952e:	2b00      	cmp	r3, #0
 8009530:	d109      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009532:	4b18      	ldr	r3, [pc, #96]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	08db      	lsrs	r3, r3, #3
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	4a16      	ldr	r2, [pc, #88]	@ (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800953e:	fa22 f303 	lsr.w	r3, r2, r3
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009544:	e01e      	b.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009546:	4b13      	ldr	r3, [pc, #76]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009552:	d106      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800955a:	d102      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800955c:	4b0f      	ldr	r3, [pc, #60]	@ (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009560:	e010      	b.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009562:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800956a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800956e:	d106      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009576:	d102      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009578:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800957a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800957c:	e002      	b.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009582:	e388      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009584:	e387      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009586:	4b07      	ldr	r3, [pc, #28]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958a:	e384      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009590:	e381      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009592:	bf00      	nop
 8009594:	58024400 	.word	0x58024400
 8009598:	03d09000 	.word	0x03d09000
 800959c:	003d0900 	.word	0x003d0900
 80095a0:	02dc6c00 	.word	0x02dc6c00
 80095a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80095a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ac:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80095b0:	430b      	orrs	r3, r1
 80095b2:	f040 809c 	bne.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80095b6:	4b9e      	ldr	r3, [pc, #632]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80095b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ba:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80095be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80095c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095c6:	d054      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80095c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095ce:	f200 808b 	bhi.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095d8:	f000 8083 	beq.w	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80095e2:	f200 8081 	bhi.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80095e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ec:	d02f      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095f4:	d878      	bhi.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009602:	d012      	beq.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009604:	e070      	b.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009606:	4b8a      	ldr	r3, [pc, #552]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800960e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009612:	d107      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009618:	4618      	mov	r0, r3
 800961a:	f000 fe07 	bl	800a22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800961e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009622:	e338      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009628:	e335      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800962a:	4b81      	ldr	r3, [pc, #516]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009636:	d107      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009638:	f107 0318 	add.w	r3, r7, #24
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fb4d 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009646:	e326      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964c:	e323      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800964e:	4b78      	ldr	r3, [pc, #480]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800965a:	d107      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800965c:	f107 030c 	add.w	r3, r7, #12
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fc8f 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800966a:	e314      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009670:	e311      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009672:	4b6f      	ldr	r3, [pc, #444]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009676:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800967a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800967c:	4b6c      	ldr	r3, [pc, #432]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d10c      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968a:	2b00      	cmp	r3, #0
 800968c:	d109      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800968e:	4b68      	ldr	r3, [pc, #416]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	08db      	lsrs	r3, r3, #3
 8009694:	f003 0303 	and.w	r3, r3, #3
 8009698:	4a66      	ldr	r2, [pc, #408]	@ (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800969a:	fa22 f303 	lsr.w	r3, r2, r3
 800969e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096a0:	e01e      	b.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096a2:	4b63      	ldr	r3, [pc, #396]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ae:	d106      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80096b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096b6:	d102      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096b8:	4b5f      	ldr	r3, [pc, #380]	@ (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096bc:	e010      	b.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096be:	4b5c      	ldr	r3, [pc, #368]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096ca:	d106      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80096cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d2:	d102      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096d4:	4b59      	ldr	r3, [pc, #356]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096d8:	e002      	b.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096de:	e2da      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80096e0:	e2d9      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096e2:	4b57      	ldr	r3, [pc, #348]	@ (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e2d6      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ec:	e2d3      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80096ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096f2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80096f6:	430b      	orrs	r3, r1
 80096f8:	f040 80a7 	bne.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80096fc:	4b4c      	ldr	r3, [pc, #304]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009700:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009704:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800970c:	d055      	beq.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009714:	f200 8096 	bhi.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800971e:	f000 8084 	beq.w	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009728:	f200 808c 	bhi.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009732:	d030      	beq.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800973a:	f200 8083 	bhi.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800974a:	d012      	beq.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800974c:	e07a      	b.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800974e:	4b38      	ldr	r3, [pc, #224]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800975a:	d107      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800975c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fd63 	bl	800a22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800976a:	e294      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009770:	e291      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009772:	4b2f      	ldr	r3, [pc, #188]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800977a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800977e:	d107      	bne.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009780:	f107 0318 	add.w	r3, r7, #24
 8009784:	4618      	mov	r0, r3
 8009786:	f000 faa9 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800978e:	e282      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009794:	e27f      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009796:	4b26      	ldr	r3, [pc, #152]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800979e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097a2:	d107      	bne.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fbeb 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b2:	e270      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b8:	e26d      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b04      	cmp	r3, #4
 80097ce:	d10c      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80097d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d109      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097d6:	4b16      	ldr	r3, [pc, #88]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	08db      	lsrs	r3, r3, #3
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	4a14      	ldr	r2, [pc, #80]	@ (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80097e2:	fa22 f303 	lsr.w	r3, r2, r3
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e8:	e01e      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ea:	4b11      	ldr	r3, [pc, #68]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097f6:	d106      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80097f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097fe:	d102      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009800:	4b0d      	ldr	r3, [pc, #52]	@ (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009804:	e010      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009806:	4b0a      	ldr	r3, [pc, #40]	@ (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800980e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009812:	d106      	bne.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800981a:	d102      	bne.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800981c:	4b07      	ldr	r3, [pc, #28]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800981e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009820:	e002      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009826:	e236      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009828:	e235      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800982a:	4b05      	ldr	r3, [pc, #20]	@ (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800982c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800982e:	e232      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009830:	58024400 	.word	0x58024400
 8009834:	03d09000 	.word	0x03d09000
 8009838:	003d0900 	.word	0x003d0900
 800983c:	02dc6c00 	.word	0x02dc6c00
 8009840:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009848:	e225      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800984a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800984e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009852:	430b      	orrs	r3, r1
 8009854:	f040 8085 	bne.w	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009858:	4b9c      	ldr	r3, [pc, #624]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800985a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800985c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009860:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009868:	d06b      	beq.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800986a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009870:	d874      	bhi.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009874:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009878:	d056      	beq.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800987a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009880:	d86c      	bhi.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009884:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009888:	d03b      	beq.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009890:	d864      	bhi.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009898:	d021      	beq.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098a0:	d85c      	bhi.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80098a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80098a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098ae:	d004      	beq.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80098b0:	e054      	b.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80098b2:	f7fe fb5f 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 80098b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098b8:	e1ed      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098ba:	4b84      	ldr	r3, [pc, #528]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098c6:	d107      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c8:	f107 0318 	add.w	r3, r7, #24
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fa05 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d6:	e1de      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098dc:	e1db      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098de:	4b7b      	ldr	r3, [pc, #492]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ea:	d107      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ec:	f107 030c 	add.w	r3, r7, #12
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fb47 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098fa:	e1cc      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	e1c9      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009902:	4b72      	ldr	r3, [pc, #456]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	2b04      	cmp	r3, #4
 800990c:	d109      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800990e:	4b6f      	ldr	r3, [pc, #444]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	08db      	lsrs	r3, r3, #3
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	4a6d      	ldr	r2, [pc, #436]	@ (8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800991a:	fa22 f303 	lsr.w	r3, r2, r3
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009920:	e1b9      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009926:	e1b6      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009928:	4b68      	ldr	r3, [pc, #416]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009934:	d102      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009936:	4b67      	ldr	r3, [pc, #412]	@ (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800993a:	e1ac      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009940:	e1a9      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009942:	4b62      	ldr	r3, [pc, #392]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800994a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800994e:	d102      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009950:	4b61      	ldr	r3, [pc, #388]	@ (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009954:	e19f      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995a:	e19c      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009960:	e199      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009966:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800996a:	430b      	orrs	r3, r1
 800996c:	d173      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800996e:	4b57      	ldr	r3, [pc, #348]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009972:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009976:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800997e:	d02f      	beq.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009986:	d863      	bhi.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009994:	d012      	beq.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009996:	e05b      	b.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009998:	4b4c      	ldr	r3, [pc, #304]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099a4:	d107      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a6:	f107 0318 	add.w	r3, r7, #24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f996 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b4:	e16f      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ba:	e16c      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099bc:	4b43      	ldr	r3, [pc, #268]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099c8:	d107      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ca:	f107 030c 	add.w	r3, r7, #12
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fad8 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099d8:	e15d      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099de:	e15a      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099e0:	4b3a      	ldr	r3, [pc, #232]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099ea:	4b38      	ldr	r3, [pc, #224]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b04      	cmp	r3, #4
 80099f4:	d10c      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80099f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099fc:	4b33      	ldr	r3, [pc, #204]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	08db      	lsrs	r3, r3, #3
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	4a32      	ldr	r2, [pc, #200]	@ (8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009a08:	fa22 f303 	lsr.w	r3, r2, r3
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a0e:	e01e      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a10:	4b2e      	ldr	r3, [pc, #184]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a1c:	d106      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a24:	d102      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a26:	4b2b      	ldr	r3, [pc, #172]	@ (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a2a:	e010      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a2c:	4b27      	ldr	r3, [pc, #156]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a38:	d106      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a40:	d102      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a42:	4b25      	ldr	r3, [pc, #148]	@ (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a46:	e002      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a4c:	e123      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a4e:	e122      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a54:	e11f      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009a5e:	430b      	orrs	r3, r1
 8009a60:	d13c      	bne.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009a62:	4b1a      	ldr	r3, [pc, #104]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a6a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a78:	d012      	beq.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009a7a:	e023      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a7c:	4b13      	ldr	r3, [pc, #76]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a88:	d107      	bne.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fbcc 	bl	800a22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a98:	e0fd      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a9e:	e0fa      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aac:	d107      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aae:	f107 0318 	add.w	r3, r7, #24
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 f912 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009abc:	e0eb      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac2:	e0e8      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac8:	e0e5      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009aca:	bf00      	nop
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	03d09000 	.word	0x03d09000
 8009ad4:	003d0900 	.word	0x003d0900
 8009ad8:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ae0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	f040 8085 	bne.w	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009aea:	4b6d      	ldr	r3, [pc, #436]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009af2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009afa:	d06b      	beq.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b02:	d874      	bhi.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0a:	d056      	beq.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b12:	d86c      	bhi.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b1a:	d03b      	beq.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b22:	d864      	bhi.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b2a:	d021      	beq.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b32:	d85c      	bhi.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b40:	d004      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009b42:	e054      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009b44:	f000 f8b4 	bl	8009cb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b4a:	e0a4      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b4c:	4b54      	ldr	r3, [pc, #336]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b58:	d107      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b5a:	f107 0318 	add.w	r3, r7, #24
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f8bc 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b68:	e095      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b6e:	e092      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b70:	4b4b      	ldr	r3, [pc, #300]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b7c:	d107      	bne.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b7e:	f107 030c 	add.w	r3, r7, #12
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f9fe 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b8c:	e083      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b92:	e080      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b94:	4b42      	ldr	r3, [pc, #264]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d109      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	08db      	lsrs	r3, r3, #3
 8009ba6:	f003 0303 	and.w	r3, r3, #3
 8009baa:	4a3e      	ldr	r2, [pc, #248]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bb2:	e070      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb8:	e06d      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009bba:	4b39      	ldr	r3, [pc, #228]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bc6:	d102      	bne.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009bc8:	4b37      	ldr	r3, [pc, #220]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bcc:	e063      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd2:	e060      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bd4:	4b32      	ldr	r3, [pc, #200]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be0:	d102      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009be2:	4b32      	ldr	r3, [pc, #200]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be6:	e056      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bec:	e053      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf2:	e050      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bf8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	d148      	bne.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009c00:	4b27      	ldr	r3, [pc, #156]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c10:	d02a      	beq.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c18:	d838      	bhi.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d004      	beq.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c26:	d00d      	beq.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009c28:	e030      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c36:	d102      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009c38:	4b1c      	ldr	r3, [pc, #112]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c3c:	e02b      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c42:	e028      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c44:	4b16      	ldr	r3, [pc, #88]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c50:	d107      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fae8 	bl	800a22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c60:	e019      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c62:	2300      	movs	r3, #0
 8009c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c66:	e016      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c68:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c74:	d107      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c76:	f107 0318 	add.w	r3, r7, #24
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f82e 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c84:	e007      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c8a:	e004      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c90:	e001      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3740      	adds	r7, #64	@ 0x40
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	03d09000 	.word	0x03d09000
 8009ca8:	003d0900 	.word	0x003d0900
 8009cac:	02dc6c00 	.word	0x02dc6c00

08009cb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009cb4:	f7fe f92e 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	4b06      	ldr	r3, [pc, #24]	@ (8009cd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	091b      	lsrs	r3, r3, #4
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	4904      	ldr	r1, [pc, #16]	@ (8009cd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cc6:	5ccb      	ldrb	r3, [r1, r3]
 8009cc8:	f003 031f 	and.w	r3, r3, #31
 8009ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	08015334 	.word	0x08015334

08009cdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b089      	sub	sp, #36	@ 0x24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ce4:	4ba1      	ldr	r3, [pc, #644]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009cee:	4b9f      	ldr	r3, [pc, #636]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf2:	0b1b      	lsrs	r3, r3, #12
 8009cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfe:	091b      	lsrs	r3, r3, #4
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009d06:	4b99      	ldr	r3, [pc, #612]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d0a:	08db      	lsrs	r3, r3, #3
 8009d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	fb02 f303 	mul.w	r3, r2, r3
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 8111 	beq.w	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	f000 8083 	beq.w	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	f200 80a1 	bhi.w	8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d056      	beq.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d46:	e099      	b.n	8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d48:	4b88      	ldr	r3, [pc, #544]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d02d      	beq.n	8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d54:	4b85      	ldr	r3, [pc, #532]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	08db      	lsrs	r3, r3, #3
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	4a84      	ldr	r2, [pc, #528]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d60:	fa22 f303 	lsr.w	r3, r2, r3
 8009d64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009daa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009dae:	e087      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df2:	e065      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e06:	4b59      	ldr	r3, [pc, #356]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e36:	e043      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	ee07 3a90 	vmov	s15, r3
 8009e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4a:	4b48      	ldr	r3, [pc, #288]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e7a:	e021      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e8e:	4b37      	ldr	r3, [pc, #220]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ebe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec4:	0a5b      	lsrs	r3, r3, #9
 8009ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee6:	ee17 2a90 	vmov	r2, s15
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009eee:	4b1f      	ldr	r3, [pc, #124]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef2:	0c1b      	lsrs	r3, r3, #16
 8009ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ef8:	ee07 3a90 	vmov	s15, r3
 8009efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f14:	ee17 2a90 	vmov	r2, s15
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f1c:	4b13      	ldr	r3, [pc, #76]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f20:	0e1b      	lsrs	r3, r3, #24
 8009f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f42:	ee17 2a90 	vmov	r2, s15
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f4a:	e008      	b.n	8009f5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	609a      	str	r2, [r3, #8]
}
 8009f5e:	bf00      	nop
 8009f60:	3724      	adds	r7, #36	@ 0x24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	03d09000 	.word	0x03d09000
 8009f74:	46000000 	.word	0x46000000
 8009f78:	4c742400 	.word	0x4c742400
 8009f7c:	4a742400 	.word	0x4a742400
 8009f80:	4c371b00 	.word	0x4c371b00

08009f84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b089      	sub	sp, #36	@ 0x24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f8c:	4ba1      	ldr	r3, [pc, #644]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	f003 0303 	and.w	r3, r3, #3
 8009f94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f96:	4b9f      	ldr	r3, [pc, #636]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9a:	0d1b      	lsrs	r3, r3, #20
 8009f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fa2:	4b9c      	ldr	r3, [pc, #624]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa6:	0a1b      	lsrs	r3, r3, #8
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009fae:	4b99      	ldr	r3, [pc, #612]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb2:	08db      	lsrs	r3, r3, #3
 8009fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	fb02 f303 	mul.w	r3, r2, r3
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8111 	beq.w	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	f000 8083 	beq.w	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	f200 80a1 	bhi.w	800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d056      	beq.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009fee:	e099      	b.n	800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ff0:	4b88      	ldr	r3, [pc, #544]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d02d      	beq.n	800a058 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ffc:	4b85      	ldr	r3, [pc, #532]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	08db      	lsrs	r3, r3, #3
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	4a84      	ldr	r2, [pc, #528]	@ (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a008:	fa22 f303 	lsr.w	r3, r2, r3
 800a00c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a026:	4b7b      	ldr	r3, [pc, #492]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a056:	e087      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06a:	4b6a      	ldr	r3, [pc, #424]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a07e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a09a:	e065      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ae:	4b59      	ldr	r3, [pc, #356]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0de:	e043      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f2:	4b48      	ldr	r3, [pc, #288]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a102:	ed97 6a03 	vldr	s12, [r7, #12]
 800a106:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a122:	e021      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	ee07 3a90 	vmov	s15, r3
 800a12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a136:	4b37      	ldr	r3, [pc, #220]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a146:	ed97 6a03 	vldr	s12, [r7, #12]
 800a14a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a166:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a168:	4b2a      	ldr	r3, [pc, #168]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a16c:	0a5b      	lsrs	r3, r3, #9
 800a16e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a17e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a182:	edd7 6a07 	vldr	s13, [r7, #28]
 800a186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a18a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a18e:	ee17 2a90 	vmov	r2, s15
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a196:	4b1f      	ldr	r3, [pc, #124]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19a:	0c1b      	lsrs	r3, r3, #16
 800a19c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a0:	ee07 3a90 	vmov	s15, r3
 800a1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1bc:	ee17 2a90 	vmov	r2, s15
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1c4:	4b13      	ldr	r3, [pc, #76]	@ (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c8:	0e1b      	lsrs	r3, r3, #24
 800a1ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ea:	ee17 2a90 	vmov	r2, s15
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1f2:	e008      	b.n	800a206 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	609a      	str	r2, [r3, #8]
}
 800a206:	bf00      	nop
 800a208:	3724      	adds	r7, #36	@ 0x24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	58024400 	.word	0x58024400
 800a218:	03d09000 	.word	0x03d09000
 800a21c:	46000000 	.word	0x46000000
 800a220:	4c742400 	.word	0x4c742400
 800a224:	4a742400 	.word	0x4a742400
 800a228:	4c371b00 	.word	0x4c371b00

0800a22c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b089      	sub	sp, #36	@ 0x24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a234:	4ba0      	ldr	r3, [pc, #640]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a238:	f003 0303 	and.w	r3, r3, #3
 800a23c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a23e:	4b9e      	ldr	r3, [pc, #632]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a242:	091b      	lsrs	r3, r3, #4
 800a244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a248:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a24a:	4b9b      	ldr	r3, [pc, #620]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a254:	4b98      	ldr	r3, [pc, #608]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a258:	08db      	lsrs	r3, r3, #3
 800a25a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	fb02 f303 	mul.w	r3, r2, r3
 800a264:	ee07 3a90 	vmov	s15, r3
 800a268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 8111 	beq.w	800a49a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	f000 8083 	beq.w	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	2b02      	cmp	r3, #2
 800a284:	f200 80a1 	bhi.w	800a3ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d056      	beq.n	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a294:	e099      	b.n	800a3ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a296:	4b88      	ldr	r3, [pc, #544]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d02d      	beq.n	800a2fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2a2:	4b85      	ldr	r3, [pc, #532]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	08db      	lsrs	r3, r3, #3
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	4a83      	ldr	r2, [pc, #524]	@ (800a4bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	ee07 3a90 	vmov	s15, r3
 800a2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2cc:	4b7a      	ldr	r3, [pc, #488]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2fc:	e087      	b.n	800a40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a310:	4b69      	ldr	r3, [pc, #420]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a320:	ed97 6a03 	vldr	s12, [r7, #12]
 800a324:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a330:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a340:	e065      	b.n	800a40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	ee07 3a90 	vmov	s15, r3
 800a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a354:	4b58      	ldr	r3, [pc, #352]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35c:	ee07 3a90 	vmov	s15, r3
 800a360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a364:	ed97 6a03 	vldr	s12, [r7, #12]
 800a368:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a374:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a384:	e043      	b.n	800a40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	ee07 3a90 	vmov	s15, r3
 800a38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a390:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a4cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a398:	4b47      	ldr	r3, [pc, #284]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a39a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a0:	ee07 3a90 	vmov	s15, r3
 800a3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3c8:	e021      	b.n	800a40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	ee07 3a90 	vmov	s15, r3
 800a3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a3d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3dc:	4b36      	ldr	r3, [pc, #216]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e4:	ee07 3a90 	vmov	s15, r3
 800a3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a40c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a40e:	4b2a      	ldr	r3, [pc, #168]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a412:	0a5b      	lsrs	r3, r3, #9
 800a414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a418:	ee07 3a90 	vmov	s15, r3
 800a41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a420:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a424:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a428:	edd7 6a07 	vldr	s13, [r7, #28]
 800a42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a434:	ee17 2a90 	vmov	r2, s15
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a43c:	4b1e      	ldr	r3, [pc, #120]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a440:	0c1b      	lsrs	r3, r3, #16
 800a442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a452:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a456:	edd7 6a07 	vldr	s13, [r7, #28]
 800a45a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a462:	ee17 2a90 	vmov	r2, s15
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a46a:	4b13      	ldr	r3, [pc, #76]	@ (800a4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a46e:	0e1b      	lsrs	r3, r3, #24
 800a470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a474:	ee07 3a90 	vmov	s15, r3
 800a478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a480:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a484:	edd7 6a07 	vldr	s13, [r7, #28]
 800a488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a490:	ee17 2a90 	vmov	r2, s15
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a498:	e008      	b.n	800a4ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	609a      	str	r2, [r3, #8]
}
 800a4ac:	bf00      	nop
 800a4ae:	3724      	adds	r7, #36	@ 0x24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	58024400 	.word	0x58024400
 800a4bc:	03d09000 	.word	0x03d09000
 800a4c0:	46000000 	.word	0x46000000
 800a4c4:	4c742400 	.word	0x4c742400
 800a4c8:	4a742400 	.word	0x4a742400
 800a4cc:	4c371b00 	.word	0x4c371b00

0800a4d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4de:	4b53      	ldr	r3, [pc, #332]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d101      	bne.n	800a4ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e099      	b.n	800a622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4ee:	4b4f      	ldr	r3, [pc, #316]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a4e      	ldr	r2, [pc, #312]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a4f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4fa:	f7f9 f915 	bl	8003728 <HAL_GetTick>
 800a4fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a500:	e008      	b.n	800a514 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a502:	f7f9 f911 	bl	8003728 <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d901      	bls.n	800a514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e086      	b.n	800a622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a514:	4b45      	ldr	r3, [pc, #276]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1f0      	bne.n	800a502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a520:	4b42      	ldr	r3, [pc, #264]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a524:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	031b      	lsls	r3, r3, #12
 800a52e:	493f      	ldr	r1, [pc, #252]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a530:	4313      	orrs	r3, r2
 800a532:	628b      	str	r3, [r1, #40]	@ 0x28
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	3b01      	subs	r3, #1
 800a53a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	3b01      	subs	r3, #1
 800a544:	025b      	lsls	r3, r3, #9
 800a546:	b29b      	uxth	r3, r3
 800a548:	431a      	orrs	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	3b01      	subs	r3, #1
 800a550:	041b      	lsls	r3, r3, #16
 800a552:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	061b      	lsls	r3, r3, #24
 800a560:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a564:	4931      	ldr	r1, [pc, #196]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a566:	4313      	orrs	r3, r2
 800a568:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a56a:	4b30      	ldr	r3, [pc, #192]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	492d      	ldr	r1, [pc, #180]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a57c:	4b2b      	ldr	r3, [pc, #172]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a580:	f023 0220 	bic.w	r2, r3, #32
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	4928      	ldr	r1, [pc, #160]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a58e:	4b27      	ldr	r3, [pc, #156]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a592:	4a26      	ldr	r2, [pc, #152]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a594:	f023 0310 	bic.w	r3, r3, #16
 800a598:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a59a:	4b24      	ldr	r3, [pc, #144]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a59c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a59e:	4b24      	ldr	r3, [pc, #144]	@ (800a630 <RCCEx_PLL2_Config+0x160>)
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	69d2      	ldr	r2, [r2, #28]
 800a5a6:	00d2      	lsls	r2, r2, #3
 800a5a8:	4920      	ldr	r1, [pc, #128]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a5ae:	4b1f      	ldr	r3, [pc, #124]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b2:	4a1e      	ldr	r2, [pc, #120]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5b4:	f043 0310 	orr.w	r3, r3, #16
 800a5b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d106      	bne.n	800a5ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a5c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c4:	4a19      	ldr	r2, [pc, #100]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5cc:	e00f      	b.n	800a5ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d106      	bne.n	800a5e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5d4:	4b15      	ldr	r3, [pc, #84]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d8:	4a14      	ldr	r2, [pc, #80]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5e0:	e005      	b.n	800a5ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5e2:	4b12      	ldr	r3, [pc, #72]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e6:	4a11      	ldr	r2, [pc, #68]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a0e      	ldr	r2, [pc, #56]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a5f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5fa:	f7f9 f895 	bl	8003728 <HAL_GetTick>
 800a5fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a600:	e008      	b.n	800a614 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a602:	f7f9 f891 	bl	8003728 <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d901      	bls.n	800a614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e006      	b.n	800a622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a614:	4b05      	ldr	r3, [pc, #20]	@ (800a62c <RCCEx_PLL2_Config+0x15c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d0f0      	beq.n	800a602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a620:	7bfb      	ldrb	r3, [r7, #15]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	58024400 	.word	0x58024400
 800a630:	ffff0007 	.word	0xffff0007

0800a634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a642:	4b53      	ldr	r3, [pc, #332]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	2b03      	cmp	r3, #3
 800a64c:	d101      	bne.n	800a652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e099      	b.n	800a786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a652:	4b4f      	ldr	r3, [pc, #316]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a4e      	ldr	r2, [pc, #312]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a65c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a65e:	f7f9 f863 	bl	8003728 <HAL_GetTick>
 800a662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a664:	e008      	b.n	800a678 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a666:	f7f9 f85f 	bl	8003728 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	2b02      	cmp	r3, #2
 800a672:	d901      	bls.n	800a678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e086      	b.n	800a786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a678:	4b45      	ldr	r3, [pc, #276]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1f0      	bne.n	800a666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a684:	4b42      	ldr	r3, [pc, #264]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a688:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	051b      	lsls	r3, r3, #20
 800a692:	493f      	ldr	r1, [pc, #252]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a694:	4313      	orrs	r3, r2
 800a696:	628b      	str	r3, [r1, #40]	@ 0x28
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	025b      	lsls	r3, r3, #9
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	041b      	lsls	r3, r3, #16
 800a6b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	061b      	lsls	r3, r3, #24
 800a6c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a6c8:	4931      	ldr	r1, [pc, #196]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a6ce:	4b30      	ldr	r3, [pc, #192]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	492d      	ldr	r1, [pc, #180]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6e0:	4b2b      	ldr	r3, [pc, #172]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	4928      	ldr	r1, [pc, #160]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6f2:	4b27      	ldr	r3, [pc, #156]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f6:	4a26      	ldr	r2, [pc, #152]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a6f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6fe:	4b24      	ldr	r3, [pc, #144]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a702:	4b24      	ldr	r3, [pc, #144]	@ (800a794 <RCCEx_PLL3_Config+0x160>)
 800a704:	4013      	ands	r3, r2
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	69d2      	ldr	r2, [r2, #28]
 800a70a:	00d2      	lsls	r2, r2, #3
 800a70c:	4920      	ldr	r1, [pc, #128]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a712:	4b1f      	ldr	r3, [pc, #124]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a716:	4a1e      	ldr	r2, [pc, #120]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a71c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d106      	bne.n	800a732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a724:	4b1a      	ldr	r3, [pc, #104]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a728:	4a19      	ldr	r2, [pc, #100]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a72a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a72e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a730:	e00f      	b.n	800a752 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d106      	bne.n	800a746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a738:	4b15      	ldr	r3, [pc, #84]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73c:	4a14      	ldr	r2, [pc, #80]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a73e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a742:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a744:	e005      	b.n	800a752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a746:	4b12      	ldr	r3, [pc, #72]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74a:	4a11      	ldr	r2, [pc, #68]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a74c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a750:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a752:	4b0f      	ldr	r3, [pc, #60]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a0e      	ldr	r2, [pc, #56]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a75c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a75e:	f7f8 ffe3 	bl	8003728 <HAL_GetTick>
 800a762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a764:	e008      	b.n	800a778 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a766:	f7f8 ffdf 	bl	8003728 <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	2b02      	cmp	r3, #2
 800a772:	d901      	bls.n	800a778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e006      	b.n	800a786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a778:	4b05      	ldr	r3, [pc, #20]	@ (800a790 <RCCEx_PLL3_Config+0x15c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0f0      	beq.n	800a766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a784:	7bfb      	ldrb	r3, [r7, #15]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	58024400 	.word	0x58024400
 800a794:	ffff0007 	.word	0xffff0007

0800a798 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	@ 0x28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e075      	b.n	800a896 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d105      	bne.n	800a7c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7f7 fed1 	bl	8002564 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2204      	movs	r2, #4
 800a7c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f868 	bl	800a8a0 <HAL_SD_InitCard>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e05d      	b.n	800a896 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a7da:	f107 0308 	add.w	r3, r7, #8
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fdb5 	bl	800b350 <HAL_SD_GetCardStatus>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e052      	b.n	800a896 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a7f0:	7e3b      	ldrb	r3, [r7, #24]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a7f6:	7e7b      	ldrb	r3, [r7, #25]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10a      	bne.n	800a81a <HAL_SD_Init+0x82>
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <HAL_SD_Init+0x78>
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d004      	beq.n	800a81a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a816:	659a      	str	r2, [r3, #88]	@ 0x58
 800a818:	e00b      	b.n	800a832 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d104      	bne.n	800a82c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a828:	659a      	str	r2, [r3, #88]	@ 0x58
 800a82a:	e002      	b.n	800a832 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fe73 	bl	800b524 <HAL_SD_ConfigWideBusOperation>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e026      	b.n	800a896 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a848:	f7f8 ff6e 	bl	8003728 <HAL_GetTick>
 800a84c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a84e:	e011      	b.n	800a874 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a850:	f7f8 ff6a 	bl	8003728 <HAL_GetTick>
 800a854:	4602      	mov	r2, r0
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85e:	d109      	bne.n	800a874 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a866:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e010      	b.n	800a896 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 ff67 	bl	800b748 <HAL_SD_GetCardState>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d1e7      	bne.n	800a850 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3728      	adds	r7, #40	@ 0x28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a8a0:	b590      	push	{r4, r7, lr}
 800a8a2:	b08d      	sub	sp, #52	@ 0x34
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a8b8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a8bc:	f04f 0100 	mov.w	r1, #0
 800a8c0:	f7fe fd24 	bl	800930c <HAL_RCCEx_GetPeriphCLKFreq>
 800a8c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d109      	bne.n	800a8e0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a8da:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e070      	b.n	800a9c2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	0a1b      	lsrs	r3, r3, #8
 800a8e4:	4a39      	ldr	r2, [pc, #228]	@ (800a9cc <HAL_SD_InitCard+0x12c>)
 800a8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681c      	ldr	r4, [r3, #0]
 800a8f2:	466a      	mov	r2, sp
 800a8f4:	f107 0318 	add.w	r3, r7, #24
 800a8f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a8fc:	e882 0003 	stmia.w	r2, {r0, r1}
 800a900:	f107 030c 	add.w	r3, r7, #12
 800a904:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a906:	4620      	mov	r0, r4
 800a908:	f005 fa4e 	bl	800fda8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4618      	mov	r0, r3
 800a912:	f005 fa91 	bl	800fe38 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d005      	beq.n	800a928 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	005b      	lsls	r3, r3, #1
 800a920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a922:	fbb2 f3f3 	udiv	r3, r2, r3
 800a926:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a92e:	4a28      	ldr	r2, [pc, #160]	@ (800a9d0 <HAL_SD_InitCard+0x130>)
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	fbb2 f3f3 	udiv	r3, r2, r3
 800a936:	3301      	adds	r3, #1
 800a938:	4618      	mov	r0, r3
 800a93a:	f7f8 ff01 	bl	8003740 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fff0 	bl	800b924 <SD_PowerON>
 800a944:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e02e      	b.n	800a9c2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 ff0f 	bl	800b788 <SD_InitCard>
 800a96a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	431a      	orrs	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e01b      	b.n	800a9c2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a992:	4618      	mov	r0, r3
 800a994:	f005 fae6 	bl	800ff64 <SDMMC_CmdBlockLength>
 800a998:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00f      	beq.n	800a9c0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a0b      	ldr	r2, [pc, #44]	@ (800a9d4 <HAL_SD_InitCard+0x134>)
 800a9a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e000      	b.n	800a9c2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	372c      	adds	r7, #44	@ 0x2c
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd90      	pop	{r4, r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	014f8b59 	.word	0x014f8b59
 800a9d0:	00012110 	.word	0x00012110
 800a9d4:	1fe00fff 	.word	0x1fe00fff

0800a9d8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b092      	sub	sp, #72	@ 0x48
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a9e6:	f7f8 fe9f 	bl	8003728 <HAL_GetTick>
 800a9ea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d107      	bne.n	800aa0a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e167      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	f040 815a 	bne.w	800accc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	441a      	add	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d907      	bls.n	800aa3c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa30:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e14e      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2203      	movs	r2, #3
 800aa40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d002      	beq.n	800aa5a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800aa54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa56:	025b      	lsls	r3, r3, #9
 800aa58:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa5a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	025b      	lsls	r3, r3, #9
 800aa64:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa66:	2390      	movs	r3, #144	@ 0x90
 800aa68:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800aa72:	2300      	movs	r3, #0
 800aa74:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f107 0214 	add.w	r2, r7, #20
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f005 fa43 	bl	800ff0c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68da      	ldr	r2, [r3, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa94:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d90a      	bls.n	800aab2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f005 faa1 	bl	800fff0 <SDMMC_CmdReadMultiBlock>
 800aaae:	6478      	str	r0, [r7, #68]	@ 0x44
 800aab0:	e009      	b.n	800aac6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aabe:	4618      	mov	r0, r3
 800aac0:	f005 fa73 	bl	800ffaa <SDMMC_CmdReadSingleBlock>
 800aac4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800aac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d012      	beq.n	800aaf2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a84      	ldr	r2, [pc, #528]	@ (800ace4 <HAL_SD_ReadBlocks+0x30c>)
 800aad2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aada:	431a      	orrs	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e0f3      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aaf6:	e058      	b.n	800abaa <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aafe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d033      	beq.n	800ab6e <HAL_SD_ReadBlocks+0x196>
 800ab06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab08:	2b1f      	cmp	r3, #31
 800ab0a:	d930      	bls.n	800ab6e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab10:	e027      	b.n	800ab62 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f005 f970 	bl	800fdfc <SDMMC_ReadFIFO>
 800ab1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800ab1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ab26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab28:	3301      	adds	r3, #1
 800ab2a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ab2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2e:	0a1b      	lsrs	r3, r3, #8
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ab36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab38:	3301      	adds	r3, #1
 800ab3a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ab3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3e:	0c1b      	lsrs	r3, r3, #16
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ab46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab48:	3301      	adds	r3, #1
 800ab4a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ab4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab4e:	0e1b      	lsrs	r3, r3, #24
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ab56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab58:	3301      	adds	r3, #1
 800ab5a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800ab5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5e:	3301      	adds	r3, #1
 800ab60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab64:	2b07      	cmp	r3, #7
 800ab66:	d9d4      	bls.n	800ab12 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ab68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab6a:	3b20      	subs	r3, #32
 800ab6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800ab6e:	f7f8 fddb 	bl	8003728 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d902      	bls.n	800ab84 <HAL_SD_ReadBlocks+0x1ac>
 800ab7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d112      	bne.n	800abaa <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a56      	ldr	r2, [pc, #344]	@ (800ace4 <HAL_SD_ReadBlocks+0x30c>)
 800ab8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e097      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abb0:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d09f      	beq.n	800aaf8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68da      	ldr	r2, [r3, #12]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abc6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d022      	beq.n	800ac1c <HAL_SD_ReadBlocks+0x244>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d91f      	bls.n	800ac1c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	d01b      	beq.n	800ac1c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4618      	mov	r0, r3
 800abea:	f005 fa6b 	bl	80100c4 <SDMMC_CmdStopTransfer>
 800abee:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800abf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d012      	beq.n	800ac1c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a3a      	ldr	r2, [pc, #232]	@ (800ace4 <HAL_SD_ReadBlocks+0x30c>)
 800abfc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac04:	431a      	orrs	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e05e      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac22:	f003 0308 	and.w	r3, r3, #8
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d012      	beq.n	800ac50 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a2d      	ldr	r2, [pc, #180]	@ (800ace4 <HAL_SD_ReadBlocks+0x30c>)
 800ac30:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac36:	f043 0208 	orr.w	r2, r3, #8
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e044      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac56:	f003 0302 	and.w	r3, r3, #2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d012      	beq.n	800ac84 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a20      	ldr	r2, [pc, #128]	@ (800ace4 <HAL_SD_ReadBlocks+0x30c>)
 800ac64:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6a:	f043 0202 	orr.w	r2, r3, #2
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e02a      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d012      	beq.n	800acb8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a13      	ldr	r2, [pc, #76]	@ (800ace4 <HAL_SD_ReadBlocks+0x30c>)
 800ac98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac9e:	f043 0220 	orr.w	r2, r3, #32
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e010      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a0a      	ldr	r2, [pc, #40]	@ (800ace8 <HAL_SD_ReadBlocks+0x310>)
 800acbe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	e006      	b.n	800acda <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
  }
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3748      	adds	r7, #72	@ 0x48
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	1fe00fff 	.word	0x1fe00fff
 800ace8:	18000f3a 	.word	0x18000f3a

0800acec <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b092      	sub	sp, #72	@ 0x48
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800acfa:	f7f8 fd15 	bl	8003728 <HAL_GetTick>
 800acfe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d107      	bne.n	800ad1e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e16b      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	f040 815e 	bne.w	800afe8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	441a      	add	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d907      	bls.n	800ad50 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad44:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e152      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2203      	movs	r2, #3
 800ad54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d002      	beq.n	800ad6e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800ad68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6a:	025b      	lsls	r3, r3, #9
 800ad6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	025b      	lsls	r3, r3, #9
 800ad78:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ad7a:	2390      	movs	r3, #144	@ 0x90
 800ad7c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f107 0218 	add.w	r2, r7, #24
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f005 f8b9 	bl	800ff0c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ada8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d90a      	bls.n	800adc6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2220      	movs	r2, #32
 800adb4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800adbc:	4618      	mov	r0, r3
 800adbe:	f005 f95d 	bl	801007c <SDMMC_CmdWriteMultiBlock>
 800adc2:	6478      	str	r0, [r7, #68]	@ 0x44
 800adc4:	e009      	b.n	800adda <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2210      	movs	r2, #16
 800adca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800add2:	4618      	mov	r0, r3
 800add4:	f005 f92f 	bl	8010036 <SDMMC_CmdWriteSingleBlock>
 800add8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800adda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800addc:	2b00      	cmp	r3, #0
 800adde:	d012      	beq.n	800ae06 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a86      	ldr	r2, [pc, #536]	@ (800b000 <HAL_SD_WriteBlocks+0x314>)
 800ade6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adee:	431a      	orrs	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e0f7      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800ae0a:	e05c      	b.n	800aec6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d037      	beq.n	800ae8a <HAL_SD_WriteBlocks+0x19e>
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1c:	2b1f      	cmp	r3, #31
 800ae1e:	d934      	bls.n	800ae8a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800ae20:	2300      	movs	r3, #0
 800ae22:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae24:	e02b      	b.n	800ae7e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800ae26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ae2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2e:	3301      	adds	r3, #1
 800ae30:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800ae32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	021a      	lsls	r2, r3, #8
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae40:	3301      	adds	r3, #1
 800ae42:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800ae44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	041a      	lsls	r2, r3, #16
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ae50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae52:	3301      	adds	r3, #1
 800ae54:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ae56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	061a      	lsls	r2, r3, #24
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ae62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae64:	3301      	adds	r3, #1
 800ae66:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f107 0214 	add.w	r2, r7, #20
 800ae70:	4611      	mov	r1, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f004 ffcf 	bl	800fe16 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800ae78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae80:	2b07      	cmp	r3, #7
 800ae82:	d9d0      	bls.n	800ae26 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ae84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae86:	3b20      	subs	r3, #32
 800ae88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800ae8a:	f7f8 fc4d 	bl	8003728 <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d902      	bls.n	800aea0 <HAL_SD_WriteBlocks+0x1b4>
 800ae9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d112      	bne.n	800aec6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a56      	ldr	r2, [pc, #344]	@ (800b000 <HAL_SD_WriteBlocks+0x314>)
 800aea6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aeac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e097      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aecc:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d09b      	beq.n	800ae0c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aee2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d022      	beq.n	800af38 <HAL_SD_WriteBlocks+0x24c>
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d91f      	bls.n	800af38 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d01b      	beq.n	800af38 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f005 f8dd 	bl	80100c4 <SDMMC_CmdStopTransfer>
 800af0a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800af0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d012      	beq.n	800af38 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a3a      	ldr	r2, [pc, #232]	@ (800b000 <HAL_SD_WriteBlocks+0x314>)
 800af18:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af20:	431a      	orrs	r2, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e05e      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af3e:	f003 0308 	and.w	r3, r3, #8
 800af42:	2b00      	cmp	r3, #0
 800af44:	d012      	beq.n	800af6c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a2d      	ldr	r2, [pc, #180]	@ (800b000 <HAL_SD_WriteBlocks+0x314>)
 800af4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af52:	f043 0208 	orr.w	r2, r3, #8
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e044      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d012      	beq.n	800afa0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a20      	ldr	r2, [pc, #128]	@ (800b000 <HAL_SD_WriteBlocks+0x314>)
 800af80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af86:	f043 0202 	orr.w	r2, r3, #2
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e02a      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afa6:	f003 0310 	and.w	r3, r3, #16
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d012      	beq.n	800afd4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a13      	ldr	r2, [pc, #76]	@ (800b000 <HAL_SD_WriteBlocks+0x314>)
 800afb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afba:	f043 0210 	orr.w	r2, r3, #16
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e010      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a0a      	ldr	r2, [pc, #40]	@ (800b004 <HAL_SD_WriteBlocks+0x318>)
 800afda:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	e006      	b.n	800aff6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
  }
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3748      	adds	r7, #72	@ 0x48
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	1fe00fff 	.word	0x1fe00fff
 800b004:	18000f3a 	.word	0x18000f3a

0800b008 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b016:	0f9b      	lsrs	r3, r3, #30
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b022:	0e9b      	lsrs	r3, r3, #26
 800b024:	b2db      	uxtb	r3, r3
 800b026:	f003 030f 	and.w	r3, r3, #15
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b034:	0e1b      	lsrs	r3, r3, #24
 800b036:	b2db      	uxtb	r3, r3
 800b038:	f003 0303 	and.w	r3, r3, #3
 800b03c:	b2da      	uxtb	r2, r3
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b046:	0c1b      	lsrs	r3, r3, #16
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b052:	0a1b      	lsrs	r3, r3, #8
 800b054:	b2da      	uxtb	r2, r3
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b068:	0d1b      	lsrs	r3, r3, #20
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b074:	0c1b      	lsrs	r3, r3, #16
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 030f 	and.w	r3, r3, #15
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b086:	0bdb      	lsrs	r3, r3, #15
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b098:	0b9b      	lsrs	r3, r3, #14
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0aa:	0b5b      	lsrs	r3, r3, #13
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0bc:	0b1b      	lsrs	r3, r3, #12
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d163      	bne.n	800b1a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0dc:	009a      	lsls	r2, r3, #2
 800b0de:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800b0e8:	0f92      	lsrs	r2, r2, #30
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0f4:	0edb      	lsrs	r3, r3, #27
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b106:	0e1b      	lsrs	r3, r3, #24
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	f003 0307 	and.w	r3, r3, #7
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b118:	0d5b      	lsrs	r3, r3, #21
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	b2da      	uxtb	r2, r3
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b12a:	0c9b      	lsrs	r3, r3, #18
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	b2da      	uxtb	r2, r3
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b13c:	0bdb      	lsrs	r3, r3, #15
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	f003 0307 	and.w	r3, r3, #7
 800b144:	b2da      	uxtb	r2, r3
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	7e1b      	ldrb	r3, [r3, #24]
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	3302      	adds	r3, #2
 800b160:	2201      	movs	r2, #1
 800b162:	fa02 f303 	lsl.w	r3, r2, r3
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b16a:	fb03 f202 	mul.w	r2, r3, r2
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	7a1b      	ldrb	r3, [r3, #8]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 030f 	and.w	r3, r3, #15
 800b17c:	2201      	movs	r2, #1
 800b17e:	409a      	lsls	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b18c:	0a52      	lsrs	r2, r2, #9
 800b18e:	fb03 f202 	mul.w	r2, r3, r2
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b19c:	655a      	str	r2, [r3, #84]	@ 0x54
 800b19e:	e031      	b.n	800b204 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d11d      	bne.n	800b1e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ac:	041b      	lsls	r3, r3, #16
 800b1ae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1b6:	0c1b      	lsrs	r3, r3, #16
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	029a      	lsls	r2, r3, #10
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	655a      	str	r2, [r3, #84]	@ 0x54
 800b1e2:	e00f      	b.n	800b204 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a58      	ldr	r2, [pc, #352]	@ (800b34c <HAL_SD_GetCardCSD+0x344>)
 800b1ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e09d      	b.n	800b340 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b208:	0b9b      	lsrs	r3, r3, #14
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	b2da      	uxtb	r2, r3
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b21a:	09db      	lsrs	r3, r3, #7
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b222:	b2da      	uxtb	r2, r3
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b232:	b2da      	uxtb	r2, r3
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b23c:	0fdb      	lsrs	r3, r3, #31
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b248:	0f5b      	lsrs	r3, r3, #29
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	f003 0303 	and.w	r3, r3, #3
 800b250:	b2da      	uxtb	r2, r3
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b25a:	0e9b      	lsrs	r3, r3, #26
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0307 	and.w	r3, r3, #7
 800b262:	b2da      	uxtb	r2, r3
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b26c:	0d9b      	lsrs	r3, r3, #22
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	f003 030f 	and.w	r3, r3, #15
 800b274:	b2da      	uxtb	r2, r3
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b27e:	0d5b      	lsrs	r3, r3, #21
 800b280:	b2db      	uxtb	r3, r3
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	b2da      	uxtb	r2, r3
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b29a:	0c1b      	lsrs	r3, r3, #16
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2ae:	0bdb      	lsrs	r3, r3, #15
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2c2:	0b9b      	lsrs	r3, r3, #14
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	f003 0301 	and.w	r3, r3, #1
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2d6:	0b5b      	lsrs	r3, r3, #13
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2ea:	0b1b      	lsrs	r3, r3, #12
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2fe:	0a9b      	lsrs	r3, r3, #10
 800b300:	b2db      	uxtb	r3, r3
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	b2da      	uxtb	r2, r3
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b312:	0a1b      	lsrs	r3, r3, #8
 800b314:	b2db      	uxtb	r3, r3
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b326:	085b      	lsrs	r3, r3, #1
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	1fe00fff 	.word	0x1fe00fff

0800b350 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b094      	sub	sp, #80	@ 0x50
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d101      	bne.n	800b370 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e0a7      	b.n	800b4c0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fb62 	bl	800ba40 <SD_SendSDStatus>
 800b37c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b37e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b380:	2b00      	cmp	r3, #0
 800b382:	d011      	beq.n	800b3a8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a4f      	ldr	r2, [pc, #316]	@ (800b4c8 <HAL_SD_GetCardStatus+0x178>)
 800b38a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800b3a6:	e070      	b.n	800b48a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	099b      	lsrs	r3, r3, #6
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	f003 0303 	and.w	r3, r3, #3
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	095b      	lsrs	r3, r3, #5
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	0a1b      	lsrs	r3, r3, #8
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	0e1b      	lsrs	r3, r3, #24
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	061a      	lsls	r2, r3, #24
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b3ee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	0a1b      	lsrs	r3, r3, #8
 800b3f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b3f8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	0e1b      	lsrs	r3, r3, #24
 800b3fe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	b2da      	uxtb	r2, r3
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	0a1b      	lsrs	r3, r3, #8
 800b410:	b2da      	uxtb	r2, r3
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	0d1b      	lsrs	r3, r3, #20
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 030f 	and.w	r3, r3, #15
 800b420:	b2da      	uxtb	r2, r3
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	0c1b      	lsrs	r3, r3, #16
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b430:	b29a      	uxth	r2, r3
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	b29b      	uxth	r3, r3
 800b436:	b2db      	uxtb	r3, r3
 800b438:	b29b      	uxth	r3, r3
 800b43a:	4313      	orrs	r3, r2
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	0a9b      	lsrs	r3, r3, #10
 800b446:	b2db      	uxtb	r3, r3
 800b448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	0a1b      	lsrs	r3, r3, #8
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	091b      	lsrs	r3, r3, #4
 800b466:	b2db      	uxtb	r3, r3
 800b468:	f003 030f 	and.w	r3, r3, #15
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	b2db      	uxtb	r3, r3
 800b476:	f003 030f 	and.w	r3, r3, #15
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	0e1b      	lsrs	r3, r3, #24
 800b484:	b2da      	uxtb	r2, r3
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b492:	4618      	mov	r0, r3
 800b494:	f004 fd66 	bl	800ff64 <SDMMC_CmdBlockLength>
 800b498:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b49a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00d      	beq.n	800b4bc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a08      	ldr	r2, [pc, #32]	@ (800b4c8 <HAL_SD_GetCardStatus+0x178>)
 800b4a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4ac:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800b4bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3750      	adds	r7, #80	@ 0x50
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	1fe00fff 	.word	0x1fe00fff

0800b4cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b524:	b590      	push	{r4, r7, lr}
 800b526:	b08d      	sub	sp, #52	@ 0x34
 800b528:	af02      	add	r7, sp, #8
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2203      	movs	r2, #3
 800b538:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b540:	2b03      	cmp	r3, #3
 800b542:	d02e      	beq.n	800b5a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b54a:	d106      	bne.n	800b55a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b550:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	635a      	str	r2, [r3, #52]	@ 0x34
 800b558:	e029      	b.n	800b5ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b560:	d10a      	bne.n	800b578 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fb64 	bl	800bc30 <SD_WideBus_Enable>
 800b568:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	431a      	orrs	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	635a      	str	r2, [r3, #52]	@ 0x34
 800b576:	e01a      	b.n	800b5ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10a      	bne.n	800b594 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fba1 	bl	800bcc6 <SD_WideBus_Disable>
 800b584:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	431a      	orrs	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	635a      	str	r2, [r3, #52]	@ 0x34
 800b592:	e00c      	b.n	800b5ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b598:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5a0:	e005      	b.n	800b5ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d007      	beq.n	800b5c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a5f      	ldr	r2, [pc, #380]	@ (800b738 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b5bc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5c4:	e096      	b.n	800b6f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b5c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b5ca:	f04f 0100 	mov.w	r1, #0
 800b5ce:	f7fd fe9d 	bl	800930c <HAL_RCCEx_GetPeriphCLKFreq>
 800b5d2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f000 8083 	beq.w	800b6e2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695a      	ldr	r2, [r3, #20]
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	4950      	ldr	r1, [pc, #320]	@ (800b73c <HAL_SD_ConfigWideBusOperation+0x218>)
 800b5fa:	fba1 1303 	umull	r1, r3, r1, r3
 800b5fe:	0e1b      	lsrs	r3, r3, #24
 800b600:	429a      	cmp	r2, r3
 800b602:	d303      	bcc.n	800b60c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e05a      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b614:	d103      	bne.n	800b61e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	61bb      	str	r3, [r7, #24]
 800b61c:	e051      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b626:	d126      	bne.n	800b676 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10e      	bne.n	800b64e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	4a43      	ldr	r2, [pc, #268]	@ (800b740 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d906      	bls.n	800b646 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	4a40      	ldr	r2, [pc, #256]	@ (800b73c <HAL_SD_ConfigWideBusOperation+0x218>)
 800b63c:	fba2 2303 	umull	r2, r3, r2, r3
 800b640:	0e5b      	lsrs	r3, r3, #25
 800b642:	61bb      	str	r3, [r7, #24]
 800b644:	e03d      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	695b      	ldr	r3, [r3, #20]
 800b64a:	61bb      	str	r3, [r7, #24]
 800b64c:	e039      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	69fa      	ldr	r2, [r7, #28]
 800b656:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65a:	4a39      	ldr	r2, [pc, #228]	@ (800b740 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d906      	bls.n	800b66e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	4a36      	ldr	r2, [pc, #216]	@ (800b73c <HAL_SD_ConfigWideBusOperation+0x218>)
 800b664:	fba2 2303 	umull	r2, r3, r2, r3
 800b668:	0e5b      	lsrs	r3, r3, #25
 800b66a:	61bb      	str	r3, [r7, #24]
 800b66c:	e029      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	61bb      	str	r3, [r7, #24]
 800b674:	e025      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10e      	bne.n	800b69c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4a30      	ldr	r2, [pc, #192]	@ (800b744 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d906      	bls.n	800b694 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	4a2c      	ldr	r2, [pc, #176]	@ (800b73c <HAL_SD_ConfigWideBusOperation+0x218>)
 800b68a:	fba2 2303 	umull	r2, r3, r2, r3
 800b68e:	0e1b      	lsrs	r3, r3, #24
 800b690:	61bb      	str	r3, [r7, #24]
 800b692:	e016      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	61bb      	str	r3, [r7, #24]
 800b69a:	e012      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a8:	4a26      	ldr	r2, [pc, #152]	@ (800b744 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d906      	bls.n	800b6bc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	4a22      	ldr	r2, [pc, #136]	@ (800b73c <HAL_SD_ConfigWideBusOperation+0x218>)
 800b6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b6:	0e1b      	lsrs	r3, r3, #24
 800b6b8:	61bb      	str	r3, [r7, #24]
 800b6ba:	e002      	b.n	800b6c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681c      	ldr	r4, [r3, #0]
 800b6c6:	466a      	mov	r2, sp
 800b6c8:	f107 0314 	add.w	r3, r7, #20
 800b6cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b6d0:	e882 0003 	stmia.w	r2, {r0, r1}
 800b6d4:	f107 0308 	add.w	r3, r7, #8
 800b6d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f004 fb64 	bl	800fda8 <SDMMC_Init>
 800b6e0:	e008      	b.n	800b6f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f004 fc31 	bl	800ff64 <SDMMC_CmdBlockLength>
 800b702:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00c      	beq.n	800b724 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a0a      	ldr	r2, [pc, #40]	@ (800b738 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b710:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	431a      	orrs	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800b72c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b730:	4618      	mov	r0, r3
 800b732:	372c      	adds	r7, #44	@ 0x2c
 800b734:	46bd      	mov	sp, r7
 800b736:	bd90      	pop	{r4, r7, pc}
 800b738:	1fe00fff 	.word	0x1fe00fff
 800b73c:	55e63b89 	.word	0x55e63b89
 800b740:	02faf080 	.word	0x02faf080
 800b744:	017d7840 	.word	0x017d7840

0800b748 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b754:	f107 030c 	add.w	r3, r7, #12
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fa40 	bl	800bbe0 <SD_SendStatus>
 800b760:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d005      	beq.n	800b774 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	431a      	orrs	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	0a5b      	lsrs	r3, r3, #9
 800b778:	f003 030f 	and.w	r3, r3, #15
 800b77c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b77e:	693b      	ldr	r3, [r7, #16]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b090      	sub	sp, #64	@ 0x40
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b794:	f7f7 ffc8 	bl	8003728 <HAL_GetTick>
 800b798:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f004 fb5b 	bl	800fe5a <SDMMC_GetPowerState>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b7ae:	e0b5      	b.n	800b91c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d02e      	beq.n	800b816 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f004 fda6 	bl	801030e <SDMMC_CmdSendCID>
 800b7c2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <SD_InitCard+0x46>
    {
      return errorstate;
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7cc:	e0a6      	b.n	800b91c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f004 fb86 	bl	800fee6 <SDMMC_GetResponse>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2104      	movs	r1, #4
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f004 fb7d 	bl	800fee6 <SDMMC_GetResponse>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2108      	movs	r1, #8
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f004 fb74 	bl	800fee6 <SDMMC_GetResponse>
 800b7fe:	4602      	mov	r2, r0
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	210c      	movs	r1, #12
 800b80a:	4618      	mov	r0, r3
 800b80c:	f004 fb6b 	bl	800fee6 <SDMMC_GetResponse>
 800b810:	4602      	mov	r2, r0
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d01d      	beq.n	800b85a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b81e:	e019      	b.n	800b854 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f107 020a 	add.w	r2, r7, #10
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f004 fdae 	bl	801038c <SDMMC_CmdSetRelAdd>
 800b830:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <SD_InitCard+0xb4>
      {
        return errorstate;
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	e06f      	b.n	800b91c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b83c:	f7f7 ff74 	bl	8003728 <HAL_GetTick>
 800b840:	4602      	mov	r2, r0
 800b842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	f241 3287 	movw	r2, #4999	@ 0x1387
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d902      	bls.n	800b854 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b84e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b852:	e063      	b.n	800b91c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b854:	897b      	ldrh	r3, [r7, #10]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0e2      	beq.n	800b820 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d036      	beq.n	800b8d0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b862:	897b      	ldrh	r3, [r7, #10]
 800b864:	461a      	mov	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b872:	041b      	lsls	r3, r3, #16
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f004 fd68 	bl	801034c <SDMMC_CmdSendCSD>
 800b87c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <SD_InitCard+0x100>
    {
      return errorstate;
 800b884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b886:	e049      	b.n	800b91c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2100      	movs	r1, #0
 800b88e:	4618      	mov	r0, r3
 800b890:	f004 fb29 	bl	800fee6 <SDMMC_GetResponse>
 800b894:	4602      	mov	r2, r0
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2104      	movs	r1, #4
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f004 fb20 	bl	800fee6 <SDMMC_GetResponse>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2108      	movs	r1, #8
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f004 fb17 	bl	800fee6 <SDMMC_GetResponse>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	210c      	movs	r1, #12
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f004 fb0e 	bl	800fee6 <SDMMC_GetResponse>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2104      	movs	r1, #4
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f004 fb05 	bl	800fee6 <SDMMC_GetResponse>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	0d1a      	lsrs	r2, r3, #20
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b8e4:	f107 030c 	add.w	r3, r7, #12
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff fb8c 	bl	800b008 <HAL_SD_GetCardCSD>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d002      	beq.n	800b8fc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b8fa:	e00f      	b.n	800b91c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b904:	041b      	lsls	r3, r3, #16
 800b906:	4619      	mov	r1, r3
 800b908:	4610      	mov	r0, r2
 800b90a:	f004 fc17 	bl	801013c <SDMMC_CmdSelDesel>
 800b90e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <SD_InitCard+0x192>
  {
    return errorstate;
 800b916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b918:	e000      	b.n	800b91c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3740      	adds	r7, #64	@ 0x40
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f004 fc20 	bl	8010182 <SDMMC_CmdGoIdleState>
 800b942:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	e072      	b.n	800ba34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4618      	mov	r0, r3
 800b954:	f004 fc33 	bl	80101be <SDMMC_CmdOperCond>
 800b958:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b960:	d10d      	bne.n	800b97e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f004 fc08 	bl	8010182 <SDMMC_CmdGoIdleState>
 800b972:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d004      	beq.n	800b984 <SD_PowerON+0x60>
    {
      return errorstate;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	e05a      	b.n	800ba34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d137      	bne.n	800b9fc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2100      	movs	r1, #0
 800b992:	4618      	mov	r0, r3
 800b994:	f004 fc33 	bl	80101fe <SDMMC_CmdAppCommand>
 800b998:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d02d      	beq.n	800b9fc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b9a4:	e046      	b.n	800ba34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f004 fc26 	bl	80101fe <SDMMC_CmdAppCommand>
 800b9b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <SD_PowerON+0x9a>
    {
      return errorstate;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	e03a      	b.n	800ba34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	491e      	ldr	r1, [pc, #120]	@ (800ba3c <SD_PowerON+0x118>)
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f004 fc3d 	bl	8010244 <SDMMC_CmdAppOperCommand>
 800b9ca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b9d6:	e02d      	b.n	800ba34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2100      	movs	r1, #0
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f004 fa81 	bl	800fee6 <SDMMC_GetResponse>
 800b9e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	0fdb      	lsrs	r3, r3, #31
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d101      	bne.n	800b9f2 <SD_PowerON+0xce>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <SD_PowerON+0xd0>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	613b      	str	r3, [r7, #16]

    count++;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d802      	bhi.n	800ba0c <SD_PowerON+0xe8>
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0cc      	beq.n	800b9a6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d902      	bls.n	800ba1c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ba1a:	e00b      	b.n	800ba34 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3718      	adds	r7, #24
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	c1100000 	.word	0xc1100000

0800ba40 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08c      	sub	sp, #48	@ 0x30
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba4a:	f7f7 fe6d 	bl	8003728 <HAL_GetTick>
 800ba4e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f004 fa43 	bl	800fee6 <SDMMC_GetResponse>
 800ba60:	4603      	mov	r3, r0
 800ba62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba6a:	d102      	bne.n	800ba72 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba70:	e0b0      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2140      	movs	r1, #64	@ 0x40
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f004 fa73 	bl	800ff64 <SDMMC_CmdBlockLength>
 800ba7e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	e0a0      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9a:	041b      	lsls	r3, r3, #16
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f004 fbad 	bl	80101fe <SDMMC_CmdAppCommand>
 800baa4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d005      	beq.n	800bab8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	e08d      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bab8:	f04f 33ff 	mov.w	r3, #4294967295
 800babc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800babe:	2340      	movs	r3, #64	@ 0x40
 800bac0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bac2:	2360      	movs	r3, #96	@ 0x60
 800bac4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bac6:	2302      	movs	r3, #2
 800bac8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800baca:	2300      	movs	r3, #0
 800bacc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bace:	2301      	movs	r3, #1
 800bad0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f107 0208 	add.w	r2, r7, #8
 800bada:	4611      	mov	r1, r2
 800badc:	4618      	mov	r0, r3
 800bade:	f004 fa15 	bl	800ff0c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f004 fc95 	bl	8010416 <SDMMC_CmdStatusRegister>
 800baec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d02b      	beq.n	800bb4c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	e069      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d013      	beq.n	800bb36 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800bb0e:	2300      	movs	r3, #0
 800bb10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb12:	e00d      	b.n	800bb30 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f004 f96f 	bl	800fdfc <SDMMC_ReadFIFO>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb22:	601a      	str	r2, [r3, #0]
        pData++;
 800bb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb26:	3304      	adds	r3, #4
 800bb28:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800bb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb32:	2b07      	cmp	r3, #7
 800bb34:	d9ee      	bls.n	800bb14 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb36:	f7f7 fdf7 	bl	8003728 <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb44:	d102      	bne.n	800bb4c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb4a:	e043      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb52:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d0d2      	beq.n	800bb00 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb68:	2308      	movs	r3, #8
 800bb6a:	e033      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb72:	f003 0302 	and.w	r3, r3, #2
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	e02a      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb84:	f003 0320 	and.w	r3, r3, #32
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d017      	beq.n	800bbbc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bb8c:	2320      	movs	r3, #32
 800bb8e:	e021      	b.n	800bbd4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f004 f931 	bl	800fdfc <SDMMC_ReadFIFO>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9e:	601a      	str	r2, [r3, #0]
    pData++;
 800bba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba2:	3304      	adds	r3, #4
 800bba4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bba6:	f7f7 fdbf 	bl	8003728 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb4:	d102      	bne.n	800bbbc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bbb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbba:	e00b      	b.n	800bbd4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1e2      	bne.n	800bb90 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a03      	ldr	r2, [pc, #12]	@ (800bbdc <SD_SendSDStatus+0x19c>)
 800bbd0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3730      	adds	r7, #48	@ 0x30
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	18000f3a 	.word	0x18000f3a

0800bbe0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bbf0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bbf4:	e018      	b.n	800bc28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbfe:	041b      	lsls	r3, r3, #16
 800bc00:	4619      	mov	r1, r3
 800bc02:	4610      	mov	r0, r2
 800bc04:	f004 fbe4 	bl	80103d0 <SDMMC_CmdSendStatus>
 800bc08:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	e009      	b.n	800bc28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2100      	movs	r1, #0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f004 f963 	bl	800fee6 <SDMMC_GetResponse>
 800bc20:	4602      	mov	r2, r0
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2100      	movs	r1, #0
 800bc46:	4618      	mov	r0, r3
 800bc48:	f004 f94d 	bl	800fee6 <SDMMC_GetResponse>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc56:	d102      	bne.n	800bc5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc5c:	e02f      	b.n	800bcbe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bc5e:	f107 030c 	add.w	r3, r7, #12
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f879 	bl	800bd5c <SD_FindSCR>
 800bc6a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	e023      	b.n	800bcbe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d01c      	beq.n	800bcba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc88:	041b      	lsls	r3, r3, #16
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	f004 fab6 	bl	80101fe <SDMMC_CmdAppCommand>
 800bc92:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	e00f      	b.n	800bcbe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2102      	movs	r1, #2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f004 faed 	bl	8010284 <SDMMC_CmdBusWidth>
 800bcaa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	e003      	b.n	800bcbe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e001      	b.n	800bcbe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bcba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3718      	adds	r7, #24
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b086      	sub	sp, #24
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2100      	movs	r1, #0
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f004 f902 	bl	800fee6 <SDMMC_GetResponse>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcec:	d102      	bne.n	800bcf4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bcee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcf2:	e02f      	b.n	800bd54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bcf4:	f107 030c 	add.w	r3, r7, #12
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f82e 	bl	800bd5c <SD_FindSCR>
 800bd00:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d001      	beq.n	800bd0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	e023      	b.n	800bd54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d01c      	beq.n	800bd50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd1e:	041b      	lsls	r3, r3, #16
 800bd20:	4619      	mov	r1, r3
 800bd22:	4610      	mov	r0, r2
 800bd24:	f004 fa6b 	bl	80101fe <SDMMC_CmdAppCommand>
 800bd28:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	e00f      	b.n	800bd54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f004 faa2 	bl	8010284 <SDMMC_CmdBusWidth>
 800bd40:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	e003      	b.n	800bd54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e001      	b.n	800bd54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08e      	sub	sp, #56	@ 0x38
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bd66:	f7f7 fcdf 	bl	8003728 <HAL_GetTick>
 800bd6a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bd70:	2300      	movs	r3, #0
 800bd72:	60bb      	str	r3, [r7, #8]
 800bd74:	2300      	movs	r3, #0
 800bd76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2108      	movs	r1, #8
 800bd82:	4618      	mov	r0, r3
 800bd84:	f004 f8ee 	bl	800ff64 <SDMMC_CmdBlockLength>
 800bd88:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	e0ad      	b.n	800bef0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd9c:	041b      	lsls	r3, r3, #16
 800bd9e:	4619      	mov	r1, r3
 800bda0:	4610      	mov	r0, r2
 800bda2:	f004 fa2c 	bl	80101fe <SDMMC_CmdAppCommand>
 800bda6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb0:	e09e      	b.n	800bef0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bdb8:	2308      	movs	r3, #8
 800bdba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bdbc:	2330      	movs	r3, #48	@ 0x30
 800bdbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f107 0210 	add.w	r2, r7, #16
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f004 f898 	bl	800ff0c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f004 fa72 	bl	80102ca <SDMMC_CmdSendSCR>
 800bde6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d027      	beq.n	800be3e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf0:	e07e      	b.n	800bef0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d113      	bne.n	800be28 <SD_FindSCR+0xcc>
 800be00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be02:	2b00      	cmp	r3, #0
 800be04:	d110      	bne.n	800be28 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f003 fff6 	bl	800fdfc <SDMMC_ReadFIFO>
 800be10:	4603      	mov	r3, r0
 800be12:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4618      	mov	r0, r3
 800be1a:	f003 ffef 	bl	800fdfc <SDMMC_ReadFIFO>
 800be1e:	4603      	mov	r3, r0
 800be20:	60fb      	str	r3, [r7, #12]
      index++;
 800be22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be24:	3301      	adds	r3, #1
 800be26:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be28:	f7f7 fc7e 	bl	8003728 <HAL_GetTick>
 800be2c:	4602      	mov	r2, r0
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be36:	d102      	bne.n	800be3e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800be38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800be3c:	e058      	b.n	800bef0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be44:	f240 532a 	movw	r3, #1322	@ 0x52a
 800be48:	4013      	ands	r3, r2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0d1      	beq.n	800bdf2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be54:	f003 0308 	and.w	r3, r3, #8
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d005      	beq.n	800be68 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2208      	movs	r2, #8
 800be62:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800be64:	2308      	movs	r3, #8
 800be66:	e043      	b.n	800bef0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be6e:	f003 0302 	and.w	r3, r3, #2
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2202      	movs	r2, #2
 800be7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800be7e:	2302      	movs	r3, #2
 800be80:	e036      	b.n	800bef0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be88:	f003 0320 	and.w	r3, r3, #32
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d005      	beq.n	800be9c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2220      	movs	r2, #32
 800be96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800be98:	2320      	movs	r3, #32
 800be9a:	e029      	b.n	800bef0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a15      	ldr	r2, [pc, #84]	@ (800bef8 <SD_FindSCR+0x19c>)
 800bea2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	061a      	lsls	r2, r3, #24
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	021b      	lsls	r3, r3, #8
 800beac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800beb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	0a1b      	lsrs	r3, r3, #8
 800beb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800beba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	0e1b      	lsrs	r3, r3, #24
 800bec0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec4:	601a      	str	r2, [r3, #0]
    scr++;
 800bec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec8:	3304      	adds	r3, #4
 800beca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	061a      	lsls	r2, r3, #24
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bed8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	0a1b      	lsrs	r3, r3, #8
 800bede:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800bee2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	0e1b      	lsrs	r3, r3, #24
 800bee8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800beea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3738      	adds	r7, #56	@ 0x38
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	18000f3a 	.word	0x18000f3a

0800befc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e10f      	b.n	800c12e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a87      	ldr	r2, [pc, #540]	@ (800c138 <HAL_SPI_Init+0x23c>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d00f      	beq.n	800bf3e <HAL_SPI_Init+0x42>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a86      	ldr	r2, [pc, #536]	@ (800c13c <HAL_SPI_Init+0x240>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d00a      	beq.n	800bf3e <HAL_SPI_Init+0x42>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a84      	ldr	r2, [pc, #528]	@ (800c140 <HAL_SPI_Init+0x244>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d005      	beq.n	800bf3e <HAL_SPI_Init+0x42>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	2b0f      	cmp	r3, #15
 800bf38:	d901      	bls.n	800bf3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e0f7      	b.n	800c12e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f900 	bl	800c144 <SPI_GetPacketSize>
 800bf44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a7b      	ldr	r2, [pc, #492]	@ (800c138 <HAL_SPI_Init+0x23c>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00c      	beq.n	800bf6a <HAL_SPI_Init+0x6e>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a79      	ldr	r2, [pc, #484]	@ (800c13c <HAL_SPI_Init+0x240>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d007      	beq.n	800bf6a <HAL_SPI_Init+0x6e>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a78      	ldr	r2, [pc, #480]	@ (800c140 <HAL_SPI_Init+0x244>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d002      	beq.n	800bf6a <HAL_SPI_Init+0x6e>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b08      	cmp	r3, #8
 800bf68:	d811      	bhi.n	800bf8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bf6e:	4a72      	ldr	r2, [pc, #456]	@ (800c138 <HAL_SPI_Init+0x23c>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d009      	beq.n	800bf88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a70      	ldr	r2, [pc, #448]	@ (800c13c <HAL_SPI_Init+0x240>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d004      	beq.n	800bf88 <HAL_SPI_Init+0x8c>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a6f      	ldr	r2, [pc, #444]	@ (800c140 <HAL_SPI_Init+0x244>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d104      	bne.n	800bf92 <HAL_SPI_Init+0x96>
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b10      	cmp	r3, #16
 800bf8c:	d901      	bls.n	800bf92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e0cd      	b.n	800c12e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7f6 fb6a 	bl	8002680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f022 0201 	bic.w	r2, r2, #1
 800bfc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bfce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bfd8:	d119      	bne.n	800c00e <HAL_SPI_Init+0x112>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfe2:	d103      	bne.n	800bfec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d008      	beq.n	800bffe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10c      	bne.n	800c00e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bffc:	d107      	bne.n	800c00e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c00c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00f      	beq.n	800c03a <HAL_SPI_Init+0x13e>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	2b06      	cmp	r3, #6
 800c020:	d90b      	bls.n	800c03a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	430a      	orrs	r2, r1
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	e007      	b.n	800c04a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c048:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	69da      	ldr	r2, [r3, #28]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c052:	431a      	orrs	r2, r3
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	431a      	orrs	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c05c:	ea42 0103 	orr.w	r1, r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	68da      	ldr	r2, [r3, #12]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	430a      	orrs	r2, r1
 800c06a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c074:	431a      	orrs	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c07a:	431a      	orrs	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	431a      	orrs	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	431a      	orrs	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	431a      	orrs	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0aa:	ea42 0103 	orr.w	r1, r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d113      	bne.n	800c0ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c0e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 0201 	bic.w	r2, r2, #1
 800c0f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00a      	beq.n	800c11c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	40013000 	.word	0x40013000
 800c13c:	40003800 	.word	0x40003800
 800c140:	40003c00 	.word	0x40003c00

0800c144 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c150:	095b      	lsrs	r3, r3, #5
 800c152:	3301      	adds	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	3301      	adds	r3, #1
 800c15c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	3307      	adds	r3, #7
 800c162:	08db      	lsrs	r3, r3, #3
 800c164:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b082      	sub	sp, #8
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d101      	bne.n	800c18c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	e049      	b.n	800c220 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7f6 fbc1 	bl	8002928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	f000 fa99 	bl	800c6f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e049      	b.n	800c2ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	d106      	bne.n	800c254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7f6 fb8c 	bl	800296c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3304      	adds	r3, #4
 800c264:	4619      	mov	r1, r3
 800c266:	4610      	mov	r0, r2
 800c268:	f000 fa42 	bl	800c6f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b086      	sub	sp, #24
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d101      	bne.n	800c2f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e0ff      	b.n	800c4f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b14      	cmp	r3, #20
 800c302:	f200 80f0 	bhi.w	800c4e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c306:	a201      	add	r2, pc, #4	@ (adr r2, 800c30c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30c:	0800c361 	.word	0x0800c361
 800c310:	0800c4e7 	.word	0x0800c4e7
 800c314:	0800c4e7 	.word	0x0800c4e7
 800c318:	0800c4e7 	.word	0x0800c4e7
 800c31c:	0800c3a1 	.word	0x0800c3a1
 800c320:	0800c4e7 	.word	0x0800c4e7
 800c324:	0800c4e7 	.word	0x0800c4e7
 800c328:	0800c4e7 	.word	0x0800c4e7
 800c32c:	0800c3e3 	.word	0x0800c3e3
 800c330:	0800c4e7 	.word	0x0800c4e7
 800c334:	0800c4e7 	.word	0x0800c4e7
 800c338:	0800c4e7 	.word	0x0800c4e7
 800c33c:	0800c423 	.word	0x0800c423
 800c340:	0800c4e7 	.word	0x0800c4e7
 800c344:	0800c4e7 	.word	0x0800c4e7
 800c348:	0800c4e7 	.word	0x0800c4e7
 800c34c:	0800c465 	.word	0x0800c465
 800c350:	0800c4e7 	.word	0x0800c4e7
 800c354:	0800c4e7 	.word	0x0800c4e7
 800c358:	0800c4e7 	.word	0x0800c4e7
 800c35c:	0800c4a5 	.word	0x0800c4a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68b9      	ldr	r1, [r7, #8]
 800c366:	4618      	mov	r0, r3
 800c368:	f000 fa74 	bl	800c854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	699a      	ldr	r2, [r3, #24]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0208 	orr.w	r2, r2, #8
 800c37a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	699a      	ldr	r2, [r3, #24]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f022 0204 	bic.w	r2, r2, #4
 800c38a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6999      	ldr	r1, [r3, #24]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	691a      	ldr	r2, [r3, #16]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	619a      	str	r2, [r3, #24]
      break;
 800c39e:	e0a5      	b.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	68b9      	ldr	r1, [r7, #8]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 fae4 	bl	800c974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	699a      	ldr	r2, [r3, #24]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	699a      	ldr	r2, [r3, #24]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6999      	ldr	r1, [r3, #24]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	021a      	lsls	r2, r3, #8
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	430a      	orrs	r2, r1
 800c3de:	619a      	str	r2, [r3, #24]
      break;
 800c3e0:	e084      	b.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fb4d 	bl	800ca88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	69da      	ldr	r2, [r3, #28]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f042 0208 	orr.w	r2, r2, #8
 800c3fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69da      	ldr	r2, [r3, #28]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f022 0204 	bic.w	r2, r2, #4
 800c40c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	69d9      	ldr	r1, [r3, #28]
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	691a      	ldr	r2, [r3, #16]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	430a      	orrs	r2, r1
 800c41e:	61da      	str	r2, [r3, #28]
      break;
 800c420:	e064      	b.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68b9      	ldr	r1, [r7, #8]
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 fbb5 	bl	800cb98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	69da      	ldr	r2, [r3, #28]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c43c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	69da      	ldr	r2, [r3, #28]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c44c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	69d9      	ldr	r1, [r3, #28]
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	021a      	lsls	r2, r3, #8
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	430a      	orrs	r2, r1
 800c460:	61da      	str	r2, [r3, #28]
      break;
 800c462:	e043      	b.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68b9      	ldr	r1, [r7, #8]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 fbfe 	bl	800cc6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f042 0208 	orr.w	r2, r2, #8
 800c47e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f022 0204 	bic.w	r2, r2, #4
 800c48e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	691a      	ldr	r2, [r3, #16]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c4a2:	e023      	b.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 fc42 	bl	800cd34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	021a      	lsls	r2, r3, #8
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c4e4:	e002      	b.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c4ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop

0800c500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c514:	2b01      	cmp	r3, #1
 800c516:	d101      	bne.n	800c51c <HAL_TIM_ConfigClockSource+0x1c>
 800c518:	2302      	movs	r3, #2
 800c51a:	e0dc      	b.n	800c6d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2202      	movs	r2, #2
 800c528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	4b6a      	ldr	r3, [pc, #424]	@ (800c6e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c538:	4013      	ands	r3, r2
 800c53a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a64      	ldr	r2, [pc, #400]	@ (800c6e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c552:	4293      	cmp	r3, r2
 800c554:	f000 80a9 	beq.w	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c558:	4a62      	ldr	r2, [pc, #392]	@ (800c6e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	f200 80ae 	bhi.w	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c560:	4a61      	ldr	r2, [pc, #388]	@ (800c6e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c562:	4293      	cmp	r3, r2
 800c564:	f000 80a1 	beq.w	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c568:	4a5f      	ldr	r2, [pc, #380]	@ (800c6e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	f200 80a6 	bhi.w	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c570:	4a5e      	ldr	r2, [pc, #376]	@ (800c6ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800c572:	4293      	cmp	r3, r2
 800c574:	f000 8099 	beq.w	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c578:	4a5c      	ldr	r2, [pc, #368]	@ (800c6ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	f200 809e 	bhi.w	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c580:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c584:	f000 8091 	beq.w	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c588:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c58c:	f200 8096 	bhi.w	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c594:	f000 8089 	beq.w	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c598:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c59c:	f200 808e 	bhi.w	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5a4:	d03e      	beq.n	800c624 <HAL_TIM_ConfigClockSource+0x124>
 800c5a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5aa:	f200 8087 	bhi.w	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5b2:	f000 8086 	beq.w	800c6c2 <HAL_TIM_ConfigClockSource+0x1c2>
 800c5b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5ba:	d87f      	bhi.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5bc:	2b70      	cmp	r3, #112	@ 0x70
 800c5be:	d01a      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0xf6>
 800c5c0:	2b70      	cmp	r3, #112	@ 0x70
 800c5c2:	d87b      	bhi.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5c4:	2b60      	cmp	r3, #96	@ 0x60
 800c5c6:	d050      	beq.n	800c66a <HAL_TIM_ConfigClockSource+0x16a>
 800c5c8:	2b60      	cmp	r3, #96	@ 0x60
 800c5ca:	d877      	bhi.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5cc:	2b50      	cmp	r3, #80	@ 0x50
 800c5ce:	d03c      	beq.n	800c64a <HAL_TIM_ConfigClockSource+0x14a>
 800c5d0:	2b50      	cmp	r3, #80	@ 0x50
 800c5d2:	d873      	bhi.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5d4:	2b40      	cmp	r3, #64	@ 0x40
 800c5d6:	d058      	beq.n	800c68a <HAL_TIM_ConfigClockSource+0x18a>
 800c5d8:	2b40      	cmp	r3, #64	@ 0x40
 800c5da:	d86f      	bhi.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5dc:	2b30      	cmp	r3, #48	@ 0x30
 800c5de:	d064      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c5e0:	2b30      	cmp	r3, #48	@ 0x30
 800c5e2:	d86b      	bhi.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5e4:	2b20      	cmp	r3, #32
 800c5e6:	d060      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c5e8:	2b20      	cmp	r3, #32
 800c5ea:	d867      	bhi.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d05c      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c5f0:	2b10      	cmp	r3, #16
 800c5f2:	d05a      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x1aa>
 800c5f4:	e062      	b.n	800c6bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c606:	f000 fc79 	bl	800cefc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	609a      	str	r2, [r3, #8]
      break;
 800c622:	e04f      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c634:	f000 fc62 	bl	800cefc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c646:	609a      	str	r2, [r3, #8]
      break;
 800c648:	e03c      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c656:	461a      	mov	r2, r3
 800c658:	f000 fbd2 	bl	800ce00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2150      	movs	r1, #80	@ 0x50
 800c662:	4618      	mov	r0, r3
 800c664:	f000 fc2c 	bl	800cec0 <TIM_ITRx_SetConfig>
      break;
 800c668:	e02c      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c676:	461a      	mov	r2, r3
 800c678:	f000 fbf1 	bl	800ce5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2160      	movs	r1, #96	@ 0x60
 800c682:	4618      	mov	r0, r3
 800c684:	f000 fc1c 	bl	800cec0 <TIM_ITRx_SetConfig>
      break;
 800c688:	e01c      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c696:	461a      	mov	r2, r3
 800c698:	f000 fbb2 	bl	800ce00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2140      	movs	r1, #64	@ 0x40
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fc0c 	bl	800cec0 <TIM_ITRx_SetConfig>
      break;
 800c6a8:	e00c      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	f000 fc03 	bl	800cec0 <TIM_ITRx_SetConfig>
      break;
 800c6ba:	e003      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	73fb      	strb	r3, [r7, #15]
      break;
 800c6c0:	e000      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c6c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	ffceff88 	.word	0xffceff88
 800c6e4:	00100040 	.word	0x00100040
 800c6e8:	00100030 	.word	0x00100030
 800c6ec:	00100020 	.word	0x00100020

0800c6f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a4a      	ldr	r2, [pc, #296]	@ (800c82c <TIM_Base_SetConfig+0x13c>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d013      	beq.n	800c730 <TIM_Base_SetConfig+0x40>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c70e:	d00f      	beq.n	800c730 <TIM_Base_SetConfig+0x40>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a47      	ldr	r2, [pc, #284]	@ (800c830 <TIM_Base_SetConfig+0x140>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d00b      	beq.n	800c730 <TIM_Base_SetConfig+0x40>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a46      	ldr	r2, [pc, #280]	@ (800c834 <TIM_Base_SetConfig+0x144>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d007      	beq.n	800c730 <TIM_Base_SetConfig+0x40>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a45      	ldr	r2, [pc, #276]	@ (800c838 <TIM_Base_SetConfig+0x148>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d003      	beq.n	800c730 <TIM_Base_SetConfig+0x40>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a44      	ldr	r2, [pc, #272]	@ (800c83c <TIM_Base_SetConfig+0x14c>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d108      	bne.n	800c742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4313      	orrs	r3, r2
 800c740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	4a39      	ldr	r2, [pc, #228]	@ (800c82c <TIM_Base_SetConfig+0x13c>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d027      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c750:	d023      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a36      	ldr	r2, [pc, #216]	@ (800c830 <TIM_Base_SetConfig+0x140>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d01f      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a35      	ldr	r2, [pc, #212]	@ (800c834 <TIM_Base_SetConfig+0x144>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d01b      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a34      	ldr	r2, [pc, #208]	@ (800c838 <TIM_Base_SetConfig+0x148>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d017      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a33      	ldr	r2, [pc, #204]	@ (800c83c <TIM_Base_SetConfig+0x14c>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d013      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a32      	ldr	r2, [pc, #200]	@ (800c840 <TIM_Base_SetConfig+0x150>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d00f      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a31      	ldr	r2, [pc, #196]	@ (800c844 <TIM_Base_SetConfig+0x154>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d00b      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a30      	ldr	r2, [pc, #192]	@ (800c848 <TIM_Base_SetConfig+0x158>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d007      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a2f      	ldr	r2, [pc, #188]	@ (800c84c <TIM_Base_SetConfig+0x15c>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d003      	beq.n	800c79a <TIM_Base_SetConfig+0xaa>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a2e      	ldr	r2, [pc, #184]	@ (800c850 <TIM_Base_SetConfig+0x160>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d108      	bne.n	800c7ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a16      	ldr	r2, [pc, #88]	@ (800c82c <TIM_Base_SetConfig+0x13c>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d00f      	beq.n	800c7f8 <TIM_Base_SetConfig+0x108>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a18      	ldr	r2, [pc, #96]	@ (800c83c <TIM_Base_SetConfig+0x14c>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d00b      	beq.n	800c7f8 <TIM_Base_SetConfig+0x108>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a17      	ldr	r2, [pc, #92]	@ (800c840 <TIM_Base_SetConfig+0x150>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d007      	beq.n	800c7f8 <TIM_Base_SetConfig+0x108>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a16      	ldr	r2, [pc, #88]	@ (800c844 <TIM_Base_SetConfig+0x154>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d003      	beq.n	800c7f8 <TIM_Base_SetConfig+0x108>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a15      	ldr	r2, [pc, #84]	@ (800c848 <TIM_Base_SetConfig+0x158>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d103      	bne.n	800c800 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	691a      	ldr	r2, [r3, #16]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d105      	bne.n	800c81e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	f023 0201 	bic.w	r2, r3, #1
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	611a      	str	r2, [r3, #16]
  }
}
 800c81e:	bf00      	nop
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	40010000 	.word	0x40010000
 800c830:	40000400 	.word	0x40000400
 800c834:	40000800 	.word	0x40000800
 800c838:	40000c00 	.word	0x40000c00
 800c83c:	40010400 	.word	0x40010400
 800c840:	40014000 	.word	0x40014000
 800c844:	40014400 	.word	0x40014400
 800c848:	40014800 	.word	0x40014800
 800c84c:	4000e000 	.word	0x4000e000
 800c850:	4000e400 	.word	0x4000e400

0800c854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	f023 0201 	bic.w	r2, r3, #1
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	4b37      	ldr	r3, [pc, #220]	@ (800c95c <TIM_OC1_SetConfig+0x108>)
 800c880:	4013      	ands	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f023 0303 	bic.w	r3, r3, #3
 800c88a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	4313      	orrs	r3, r2
 800c894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f023 0302 	bic.w	r3, r3, #2
 800c89c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a2d      	ldr	r2, [pc, #180]	@ (800c960 <TIM_OC1_SetConfig+0x10c>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d00f      	beq.n	800c8d0 <TIM_OC1_SetConfig+0x7c>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a2c      	ldr	r2, [pc, #176]	@ (800c964 <TIM_OC1_SetConfig+0x110>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00b      	beq.n	800c8d0 <TIM_OC1_SetConfig+0x7c>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a2b      	ldr	r2, [pc, #172]	@ (800c968 <TIM_OC1_SetConfig+0x114>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d007      	beq.n	800c8d0 <TIM_OC1_SetConfig+0x7c>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c96c <TIM_OC1_SetConfig+0x118>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d003      	beq.n	800c8d0 <TIM_OC1_SetConfig+0x7c>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a29      	ldr	r2, [pc, #164]	@ (800c970 <TIM_OC1_SetConfig+0x11c>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d10c      	bne.n	800c8ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f023 0308 	bic.w	r3, r3, #8
 800c8d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f023 0304 	bic.w	r3, r3, #4
 800c8e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c960 <TIM_OC1_SetConfig+0x10c>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d00f      	beq.n	800c912 <TIM_OC1_SetConfig+0xbe>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c964 <TIM_OC1_SetConfig+0x110>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d00b      	beq.n	800c912 <TIM_OC1_SetConfig+0xbe>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a1a      	ldr	r2, [pc, #104]	@ (800c968 <TIM_OC1_SetConfig+0x114>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d007      	beq.n	800c912 <TIM_OC1_SetConfig+0xbe>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a19      	ldr	r2, [pc, #100]	@ (800c96c <TIM_OC1_SetConfig+0x118>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d003      	beq.n	800c912 <TIM_OC1_SetConfig+0xbe>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a18      	ldr	r2, [pc, #96]	@ (800c970 <TIM_OC1_SetConfig+0x11c>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d111      	bne.n	800c936 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	4313      	orrs	r3, r2
 800c92a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	699b      	ldr	r3, [r3, #24]
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	4313      	orrs	r3, r2
 800c934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	697a      	ldr	r2, [r7, #20]
 800c94e:	621a      	str	r2, [r3, #32]
}
 800c950:	bf00      	nop
 800c952:	371c      	adds	r7, #28
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	fffeff8f 	.word	0xfffeff8f
 800c960:	40010000 	.word	0x40010000
 800c964:	40010400 	.word	0x40010400
 800c968:	40014000 	.word	0x40014000
 800c96c:	40014400 	.word	0x40014400
 800c970:	40014800 	.word	0x40014800

0800c974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c974:	b480      	push	{r7}
 800c976:	b087      	sub	sp, #28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	f023 0210 	bic.w	r2, r3, #16
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	4b34      	ldr	r3, [pc, #208]	@ (800ca70 <TIM_OC2_SetConfig+0xfc>)
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f023 0320 	bic.w	r3, r3, #32
 800c9be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	011b      	lsls	r3, r3, #4
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a29      	ldr	r2, [pc, #164]	@ (800ca74 <TIM_OC2_SetConfig+0x100>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d003      	beq.n	800c9dc <TIM_OC2_SetConfig+0x68>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a28      	ldr	r2, [pc, #160]	@ (800ca78 <TIM_OC2_SetConfig+0x104>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d10d      	bne.n	800c9f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	011b      	lsls	r3, r3, #4
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a1e      	ldr	r2, [pc, #120]	@ (800ca74 <TIM_OC2_SetConfig+0x100>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00f      	beq.n	800ca20 <TIM_OC2_SetConfig+0xac>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a1d      	ldr	r2, [pc, #116]	@ (800ca78 <TIM_OC2_SetConfig+0x104>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d00b      	beq.n	800ca20 <TIM_OC2_SetConfig+0xac>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a1c      	ldr	r2, [pc, #112]	@ (800ca7c <TIM_OC2_SetConfig+0x108>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d007      	beq.n	800ca20 <TIM_OC2_SetConfig+0xac>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a1b      	ldr	r2, [pc, #108]	@ (800ca80 <TIM_OC2_SetConfig+0x10c>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d003      	beq.n	800ca20 <TIM_OC2_SetConfig+0xac>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a1a      	ldr	r2, [pc, #104]	@ (800ca84 <TIM_OC2_SetConfig+0x110>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d113      	bne.n	800ca48 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	621a      	str	r2, [r3, #32]
}
 800ca62:	bf00      	nop
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	feff8fff 	.word	0xfeff8fff
 800ca74:	40010000 	.word	0x40010000
 800ca78:	40010400 	.word	0x40010400
 800ca7c:	40014000 	.word	0x40014000
 800ca80:	40014400 	.word	0x40014400
 800ca84:	40014800 	.word	0x40014800

0800ca88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	69db      	ldr	r3, [r3, #28]
 800caae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	4b33      	ldr	r3, [pc, #204]	@ (800cb80 <TIM_OC3_SetConfig+0xf8>)
 800cab4:	4013      	ands	r3, r2
 800cab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f023 0303 	bic.w	r3, r3, #3
 800cabe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	021b      	lsls	r3, r3, #8
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	4313      	orrs	r3, r2
 800cadc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a28      	ldr	r2, [pc, #160]	@ (800cb84 <TIM_OC3_SetConfig+0xfc>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d003      	beq.n	800caee <TIM_OC3_SetConfig+0x66>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a27      	ldr	r2, [pc, #156]	@ (800cb88 <TIM_OC3_SetConfig+0x100>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d10d      	bne.n	800cb0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800caf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	697a      	ldr	r2, [r7, #20]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a1d      	ldr	r2, [pc, #116]	@ (800cb84 <TIM_OC3_SetConfig+0xfc>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d00f      	beq.n	800cb32 <TIM_OC3_SetConfig+0xaa>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a1c      	ldr	r2, [pc, #112]	@ (800cb88 <TIM_OC3_SetConfig+0x100>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d00b      	beq.n	800cb32 <TIM_OC3_SetConfig+0xaa>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a1b      	ldr	r2, [pc, #108]	@ (800cb8c <TIM_OC3_SetConfig+0x104>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d007      	beq.n	800cb32 <TIM_OC3_SetConfig+0xaa>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a1a      	ldr	r2, [pc, #104]	@ (800cb90 <TIM_OC3_SetConfig+0x108>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d003      	beq.n	800cb32 <TIM_OC3_SetConfig+0xaa>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a19      	ldr	r2, [pc, #100]	@ (800cb94 <TIM_OC3_SetConfig+0x10c>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d113      	bne.n	800cb5a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	011b      	lsls	r3, r3, #4
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	011b      	lsls	r3, r3, #4
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	621a      	str	r2, [r3, #32]
}
 800cb74:	bf00      	nop
 800cb76:	371c      	adds	r7, #28
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	fffeff8f 	.word	0xfffeff8f
 800cb84:	40010000 	.word	0x40010000
 800cb88:	40010400 	.word	0x40010400
 800cb8c:	40014000 	.word	0x40014000
 800cb90:	40014400 	.word	0x40014400
 800cb94:	40014800 	.word	0x40014800

0800cb98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a1b      	ldr	r3, [r3, #32]
 800cbac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	69db      	ldr	r3, [r3, #28]
 800cbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	4b24      	ldr	r3, [pc, #144]	@ (800cc54 <TIM_OC4_SetConfig+0xbc>)
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	021b      	lsls	r3, r3, #8
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cbe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	031b      	lsls	r3, r3, #12
 800cbea:	693a      	ldr	r2, [r7, #16]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a19      	ldr	r2, [pc, #100]	@ (800cc58 <TIM_OC4_SetConfig+0xc0>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d00f      	beq.n	800cc18 <TIM_OC4_SetConfig+0x80>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a18      	ldr	r2, [pc, #96]	@ (800cc5c <TIM_OC4_SetConfig+0xc4>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d00b      	beq.n	800cc18 <TIM_OC4_SetConfig+0x80>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a17      	ldr	r2, [pc, #92]	@ (800cc60 <TIM_OC4_SetConfig+0xc8>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d007      	beq.n	800cc18 <TIM_OC4_SetConfig+0x80>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a16      	ldr	r2, [pc, #88]	@ (800cc64 <TIM_OC4_SetConfig+0xcc>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d003      	beq.n	800cc18 <TIM_OC4_SetConfig+0x80>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a15      	ldr	r2, [pc, #84]	@ (800cc68 <TIM_OC4_SetConfig+0xd0>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d109      	bne.n	800cc2c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	019b      	lsls	r3, r3, #6
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	621a      	str	r2, [r3, #32]
}
 800cc46:	bf00      	nop
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	feff8fff 	.word	0xfeff8fff
 800cc58:	40010000 	.word	0x40010000
 800cc5c:	40010400 	.word	0x40010400
 800cc60:	40014000 	.word	0x40014000
 800cc64:	40014400 	.word	0x40014400
 800cc68:	40014800 	.word	0x40014800

0800cc6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a1b      	ldr	r3, [r3, #32]
 800cc80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	4b21      	ldr	r3, [pc, #132]	@ (800cd1c <TIM_OC5_SetConfig+0xb0>)
 800cc98:	4013      	ands	r3, r2
 800cc9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ccac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	041b      	lsls	r3, r3, #16
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a18      	ldr	r2, [pc, #96]	@ (800cd20 <TIM_OC5_SetConfig+0xb4>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d00f      	beq.n	800cce2 <TIM_OC5_SetConfig+0x76>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a17      	ldr	r2, [pc, #92]	@ (800cd24 <TIM_OC5_SetConfig+0xb8>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00b      	beq.n	800cce2 <TIM_OC5_SetConfig+0x76>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a16      	ldr	r2, [pc, #88]	@ (800cd28 <TIM_OC5_SetConfig+0xbc>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d007      	beq.n	800cce2 <TIM_OC5_SetConfig+0x76>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a15      	ldr	r2, [pc, #84]	@ (800cd2c <TIM_OC5_SetConfig+0xc0>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d003      	beq.n	800cce2 <TIM_OC5_SetConfig+0x76>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a14      	ldr	r2, [pc, #80]	@ (800cd30 <TIM_OC5_SetConfig+0xc4>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d109      	bne.n	800ccf6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	621a      	str	r2, [r3, #32]
}
 800cd10:	bf00      	nop
 800cd12:	371c      	adds	r7, #28
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	fffeff8f 	.word	0xfffeff8f
 800cd20:	40010000 	.word	0x40010000
 800cd24:	40010400 	.word	0x40010400
 800cd28:	40014000 	.word	0x40014000
 800cd2c:	40014400 	.word	0x40014400
 800cd30:	40014800 	.word	0x40014800

0800cd34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a1b      	ldr	r3, [r3, #32]
 800cd48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	4b22      	ldr	r3, [pc, #136]	@ (800cde8 <TIM_OC6_SetConfig+0xb4>)
 800cd60:	4013      	ands	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	021b      	lsls	r3, r3, #8
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	051b      	lsls	r3, r3, #20
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a19      	ldr	r2, [pc, #100]	@ (800cdec <TIM_OC6_SetConfig+0xb8>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d00f      	beq.n	800cdac <TIM_OC6_SetConfig+0x78>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a18      	ldr	r2, [pc, #96]	@ (800cdf0 <TIM_OC6_SetConfig+0xbc>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d00b      	beq.n	800cdac <TIM_OC6_SetConfig+0x78>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a17      	ldr	r2, [pc, #92]	@ (800cdf4 <TIM_OC6_SetConfig+0xc0>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d007      	beq.n	800cdac <TIM_OC6_SetConfig+0x78>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a16      	ldr	r2, [pc, #88]	@ (800cdf8 <TIM_OC6_SetConfig+0xc4>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d003      	beq.n	800cdac <TIM_OC6_SetConfig+0x78>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a15      	ldr	r2, [pc, #84]	@ (800cdfc <TIM_OC6_SetConfig+0xc8>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d109      	bne.n	800cdc0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cdb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	029b      	lsls	r3, r3, #10
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	685a      	ldr	r2, [r3, #4]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	621a      	str	r2, [r3, #32]
}
 800cdda:	bf00      	nop
 800cddc:	371c      	adds	r7, #28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	feff8fff 	.word	0xfeff8fff
 800cdec:	40010000 	.word	0x40010000
 800cdf0:	40010400 	.word	0x40010400
 800cdf4:	40014000 	.word	0x40014000
 800cdf8:	40014400 	.word	0x40014400
 800cdfc:	40014800 	.word	0x40014800

0800ce00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b087      	sub	sp, #28
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a1b      	ldr	r3, [r3, #32]
 800ce10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	f023 0201 	bic.w	r2, r3, #1
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ce2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	011b      	lsls	r3, r3, #4
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f023 030a 	bic.w	r3, r3, #10
 800ce3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	621a      	str	r2, [r3, #32]
}
 800ce52:	bf00      	nop
 800ce54:	371c      	adds	r7, #28
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce5e:	b480      	push	{r7}
 800ce60:	b087      	sub	sp, #28
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6a1b      	ldr	r3, [r3, #32]
 800ce6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a1b      	ldr	r3, [r3, #32]
 800ce74:	f023 0210 	bic.w	r2, r3, #16
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ce88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	031b      	lsls	r3, r3, #12
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ce9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	011b      	lsls	r3, r3, #4
 800cea0:	697a      	ldr	r2, [r7, #20]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	621a      	str	r2, [r3, #32]
}
 800ceb2:	bf00      	nop
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
	...

0800cec0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	4b09      	ldr	r3, [pc, #36]	@ (800cef8 <TIM_ITRx_SetConfig+0x38>)
 800ced4:	4013      	ands	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	4313      	orrs	r3, r2
 800cede:	f043 0307 	orr.w	r3, r3, #7
 800cee2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	609a      	str	r2, [r3, #8]
}
 800ceea:	bf00      	nop
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	ffcfff8f 	.word	0xffcfff8f

0800cefc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b087      	sub	sp, #28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cf16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	021a      	lsls	r2, r3, #8
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	431a      	orrs	r2, r3
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	609a      	str	r2, [r3, #8]
}
 800cf30:	bf00      	nop
 800cf32:	371c      	adds	r7, #28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d101      	bne.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf50:	2302      	movs	r3, #2
 800cf52:	e077      	b.n	800d044 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2202      	movs	r2, #2
 800cf60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a35      	ldr	r2, [pc, #212]	@ (800d050 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d004      	beq.n	800cf88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a34      	ldr	r2, [pc, #208]	@ (800d054 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d108      	bne.n	800cf9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cf8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a25      	ldr	r2, [pc, #148]	@ (800d050 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d02c      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfc6:	d027      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a22      	ldr	r2, [pc, #136]	@ (800d058 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d022      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a21      	ldr	r2, [pc, #132]	@ (800d05c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d01d      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a1f      	ldr	r2, [pc, #124]	@ (800d060 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d018      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a1a      	ldr	r2, [pc, #104]	@ (800d054 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d013      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a1b      	ldr	r2, [pc, #108]	@ (800d064 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d00e      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a1a      	ldr	r2, [pc, #104]	@ (800d068 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d009      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a18      	ldr	r2, [pc, #96]	@ (800d06c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d004      	beq.n	800d018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a17      	ldr	r2, [pc, #92]	@ (800d070 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d10c      	bne.n	800d032 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d01e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	4313      	orrs	r3, r2
 800d028:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	40010000 	.word	0x40010000
 800d054:	40010400 	.word	0x40010400
 800d058:	40000400 	.word	0x40000400
 800d05c:	40000800 	.word	0x40000800
 800d060:	40000c00 	.word	0x40000c00
 800d064:	40001800 	.word	0x40001800
 800d068:	40014000 	.word	0x40014000
 800d06c:	4000e000 	.word	0x4000e000
 800d070:	4000e400 	.word	0x4000e400

0800d074 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d101      	bne.n	800d090 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d08c:	2302      	movs	r3, #2
 800d08e:	e073      	b.n	800d178 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	695b      	ldr	r3, [r3, #20]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	041b      	lsls	r3, r3, #16
 800d106:	4313      	orrs	r3, r2
 800d108:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	69db      	ldr	r3, [r3, #28]
 800d114:	4313      	orrs	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a19      	ldr	r2, [pc, #100]	@ (800d184 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d004      	beq.n	800d12c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a18      	ldr	r2, [pc, #96]	@ (800d188 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d11c      	bne.n	800d166 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d136:	051b      	lsls	r3, r3, #20
 800d138:	4313      	orrs	r3, r2
 800d13a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	4313      	orrs	r3, r2
 800d148:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d154:	4313      	orrs	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d162:	4313      	orrs	r3, r2
 800d164:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	40010000 	.word	0x40010000
 800d188:	40010400 	.word	0x40010400

0800d18c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e042      	b.n	800d224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d106      	bne.n	800d1b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f7f5 fdd7 	bl	8002d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2224      	movs	r2, #36	@ 0x24
 800d1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f022 0201 	bic.w	r2, r2, #1
 800d1cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f001 fa6e 	bl	800e6b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fbff 	bl	800d9e0 <UART_SetConfig>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d101      	bne.n	800d1ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e01b      	b.n	800d224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	685a      	ldr	r2, [r3, #4]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d1fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	689a      	ldr	r2, [r3, #8]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d20a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f042 0201 	orr.w	r2, r2, #1
 800d21a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 faed 	bl	800e7fc <UART_CheckIdleState>
 800d222:	4603      	mov	r3, r0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b0ba      	sub	sp, #232	@ 0xe8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	69db      	ldr	r3, [r3, #28]
 800d23a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d256:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d25a:	4013      	ands	r3, r2
 800d25c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d264:	2b00      	cmp	r3, #0
 800d266:	d11b      	bne.n	800d2a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d26c:	f003 0320 	and.w	r3, r3, #32
 800d270:	2b00      	cmp	r3, #0
 800d272:	d015      	beq.n	800d2a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d278:	f003 0320 	and.w	r3, r3, #32
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d105      	bne.n	800d28c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d009      	beq.n	800d2a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 8377 	beq.w	800d984 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	4798      	blx	r3
      }
      return;
 800d29e:	e371      	b.n	800d984 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d2a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 8123 	beq.w	800d4f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d2aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d2ae:	4b8d      	ldr	r3, [pc, #564]	@ (800d4e4 <HAL_UART_IRQHandler+0x2b8>)
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d106      	bne.n	800d2c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d2b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d2ba:	4b8b      	ldr	r3, [pc, #556]	@ (800d4e8 <HAL_UART_IRQHandler+0x2bc>)
 800d2bc:	4013      	ands	r3, r2
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 8116 	beq.w	800d4f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d011      	beq.n	800d2f4 <HAL_UART_IRQHandler+0xc8>
 800d2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00b      	beq.n	800d2f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2ea:	f043 0201 	orr.w	r2, r3, #1
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2f8:	f003 0302 	and.w	r3, r3, #2
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d011      	beq.n	800d324 <HAL_UART_IRQHandler+0xf8>
 800d300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d00b      	beq.n	800d324 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2202      	movs	r2, #2
 800d312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d31a:	f043 0204 	orr.w	r2, r3, #4
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d328:	f003 0304 	and.w	r3, r3, #4
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d011      	beq.n	800d354 <HAL_UART_IRQHandler+0x128>
 800d330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2204      	movs	r2, #4
 800d342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d34a:	f043 0202 	orr.w	r2, r3, #2
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d358:	f003 0308 	and.w	r3, r3, #8
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d017      	beq.n	800d390 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d364:	f003 0320 	and.w	r3, r3, #32
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d105      	bne.n	800d378 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d36c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d370:	4b5c      	ldr	r3, [pc, #368]	@ (800d4e4 <HAL_UART_IRQHandler+0x2b8>)
 800d372:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00b      	beq.n	800d390 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2208      	movs	r2, #8
 800d37e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d386:	f043 0208 	orr.w	r2, r3, #8
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d012      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x196>
 800d39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00c      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d3b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3b8:	f043 0220 	orr.w	r2, r3, #32
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f000 82dd 	beq.w	800d988 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3d2:	f003 0320 	and.w	r3, r3, #32
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d013      	beq.n	800d402 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d105      	bne.n	800d3f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d007      	beq.n	800d402 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d003      	beq.n	800d402 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d408:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d416:	2b40      	cmp	r3, #64	@ 0x40
 800d418:	d005      	beq.n	800d426 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d41a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d41e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d422:	2b00      	cmp	r3, #0
 800d424:	d054      	beq.n	800d4d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f001 fb00 	bl	800ea2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d436:	2b40      	cmp	r3, #64	@ 0x40
 800d438:	d146      	bne.n	800d4c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3308      	adds	r3, #8
 800d440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d444:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d448:	e853 3f00 	ldrex	r3, [r3]
 800d44c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	3308      	adds	r3, #8
 800d462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d466:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d46a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d476:	e841 2300 	strex	r3, r2, [r1]
 800d47a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d47e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d1d9      	bne.n	800d43a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d017      	beq.n	800d4c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d496:	4a15      	ldr	r2, [pc, #84]	@ (800d4ec <HAL_UART_IRQHandler+0x2c0>)
 800d498:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7f8 f98b 	bl	80057bc <HAL_DMA_Abort_IT>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d019      	beq.n	800d4e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4be:	e00f      	b.n	800d4e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fa77 	bl	800d9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c6:	e00b      	b.n	800d4e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fa73 	bl	800d9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4ce:	e007      	b.n	800d4e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa6f 	bl	800d9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d4de:	e253      	b.n	800d988 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4e0:	bf00      	nop
    return;
 800d4e2:	e251      	b.n	800d988 <HAL_UART_IRQHandler+0x75c>
 800d4e4:	10000001 	.word	0x10000001
 800d4e8:	04000120 	.word	0x04000120
 800d4ec:	0800eaf9 	.word	0x0800eaf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	f040 81e7 	bne.w	800d8c8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4fe:	f003 0310 	and.w	r3, r3, #16
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 81e0 	beq.w	800d8c8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d50c:	f003 0310 	and.w	r3, r3, #16
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 81d9 	beq.w	800d8c8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2210      	movs	r2, #16
 800d51c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d528:	2b40      	cmp	r3, #64	@ 0x40
 800d52a:	f040 8151 	bne.w	800d7d0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a96      	ldr	r2, [pc, #600]	@ (800d790 <HAL_UART_IRQHandler+0x564>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d068      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a93      	ldr	r2, [pc, #588]	@ (800d794 <HAL_UART_IRQHandler+0x568>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d061      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a91      	ldr	r2, [pc, #580]	@ (800d798 <HAL_UART_IRQHandler+0x56c>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d05a      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a8e      	ldr	r2, [pc, #568]	@ (800d79c <HAL_UART_IRQHandler+0x570>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d053      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a8c      	ldr	r2, [pc, #560]	@ (800d7a0 <HAL_UART_IRQHandler+0x574>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d04c      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a89      	ldr	r2, [pc, #548]	@ (800d7a4 <HAL_UART_IRQHandler+0x578>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d045      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a87      	ldr	r2, [pc, #540]	@ (800d7a8 <HAL_UART_IRQHandler+0x57c>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d03e      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a84      	ldr	r2, [pc, #528]	@ (800d7ac <HAL_UART_IRQHandler+0x580>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d037      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a82      	ldr	r2, [pc, #520]	@ (800d7b0 <HAL_UART_IRQHandler+0x584>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d030      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a7f      	ldr	r2, [pc, #508]	@ (800d7b4 <HAL_UART_IRQHandler+0x588>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d029      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a7d      	ldr	r2, [pc, #500]	@ (800d7b8 <HAL_UART_IRQHandler+0x58c>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d022      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a7a      	ldr	r2, [pc, #488]	@ (800d7bc <HAL_UART_IRQHandler+0x590>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d01b      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a78      	ldr	r2, [pc, #480]	@ (800d7c0 <HAL_UART_IRQHandler+0x594>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d014      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a75      	ldr	r2, [pc, #468]	@ (800d7c4 <HAL_UART_IRQHandler+0x598>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d00d      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a73      	ldr	r2, [pc, #460]	@ (800d7c8 <HAL_UART_IRQHandler+0x59c>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d006      	beq.n	800d60e <HAL_UART_IRQHandler+0x3e2>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a70      	ldr	r2, [pc, #448]	@ (800d7cc <HAL_UART_IRQHandler+0x5a0>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d106      	bne.n	800d61c <HAL_UART_IRQHandler+0x3f0>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	b29b      	uxth	r3, r3
 800d61a:	e005      	b.n	800d628 <HAL_UART_IRQHandler+0x3fc>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	b29b      	uxth	r3, r3
 800d628:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d62c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d630:	2b00      	cmp	r3, #0
 800d632:	f000 81ab 	beq.w	800d98c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d63c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d640:	429a      	cmp	r2, r3
 800d642:	f080 81a3 	bcs.w	800d98c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d64c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d656:	69db      	ldr	r3, [r3, #28]
 800d658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d65c:	f000 8087 	beq.w	800d76e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d67c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	461a      	mov	r2, r3
 800d686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d68a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d68e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1da      	bne.n	800d660 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d6b4:	e853 3f00 	ldrex	r3, [r3]
 800d6b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d6ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6bc:	f023 0301 	bic.w	r3, r3, #1
 800d6c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d6ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d6d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d6d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d6da:	e841 2300 	strex	r3, r2, [r1]
 800d6de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d6e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1e1      	bne.n	800d6aa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3308      	adds	r3, #8
 800d6ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6f0:	e853 3f00 	ldrex	r3, [r3]
 800d6f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d6f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3308      	adds	r3, #8
 800d706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d70a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d70c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1e3      	bne.n	800d6e6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2220      	movs	r2, #32
 800d722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d734:	e853 3f00 	ldrex	r3, [r3]
 800d738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d73a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d73c:	f023 0310 	bic.w	r3, r3, #16
 800d740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	461a      	mov	r2, r3
 800d74a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d74e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d756:	e841 2300 	strex	r3, r2, [r1]
 800d75a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1e4      	bne.n	800d72c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d768:	4618      	mov	r0, r3
 800d76a:	f7f7 fd09 	bl	8005180 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2202      	movs	r2, #2
 800d772:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d780:	b29b      	uxth	r3, r3
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	b29b      	uxth	r3, r3
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 f91d 	bl	800d9c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d78e:	e0fd      	b.n	800d98c <HAL_UART_IRQHandler+0x760>
 800d790:	40020010 	.word	0x40020010
 800d794:	40020028 	.word	0x40020028
 800d798:	40020040 	.word	0x40020040
 800d79c:	40020058 	.word	0x40020058
 800d7a0:	40020070 	.word	0x40020070
 800d7a4:	40020088 	.word	0x40020088
 800d7a8:	400200a0 	.word	0x400200a0
 800d7ac:	400200b8 	.word	0x400200b8
 800d7b0:	40020410 	.word	0x40020410
 800d7b4:	40020428 	.word	0x40020428
 800d7b8:	40020440 	.word	0x40020440
 800d7bc:	40020458 	.word	0x40020458
 800d7c0:	40020470 	.word	0x40020470
 800d7c4:	40020488 	.word	0x40020488
 800d7c8:	400204a0 	.word	0x400204a0
 800d7cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	1ad3      	subs	r3, r2, r3
 800d7e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 80cf 	beq.w	800d990 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d7f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 80ca 	beq.w	800d990 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	e853 3f00 	ldrex	r3, [r3]
 800d808:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d80c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	461a      	mov	r2, r3
 800d81a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d81e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d820:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e4      	bne.n	800d7fc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3308      	adds	r3, #8
 800d838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	e853 3f00 	ldrex	r3, [r3]
 800d840:	623b      	str	r3, [r7, #32]
   return(result);
 800d842:	6a3a      	ldr	r2, [r7, #32]
 800d844:	4b55      	ldr	r3, [pc, #340]	@ (800d99c <HAL_UART_IRQHandler+0x770>)
 800d846:	4013      	ands	r3, r2
 800d848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	3308      	adds	r3, #8
 800d852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d856:	633a      	str	r2, [r7, #48]	@ 0x30
 800d858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d85e:	e841 2300 	strex	r3, r2, [r1]
 800d862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e3      	bne.n	800d832 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2220      	movs	r2, #32
 800d86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	e853 3f00 	ldrex	r3, [r3]
 800d88a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f023 0310 	bic.w	r3, r3, #16
 800d892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d8a0:	61fb      	str	r3, [r7, #28]
 800d8a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a4:	69b9      	ldr	r1, [r7, #24]
 800d8a6:	69fa      	ldr	r2, [r7, #28]
 800d8a8:	e841 2300 	strex	r3, r2, [r1]
 800d8ac:	617b      	str	r3, [r7, #20]
   return(result);
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1e4      	bne.n	800d87e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d8ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d8be:	4619      	mov	r1, r3
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f881 	bl	800d9c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8c6:	e063      	b.n	800d990 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00e      	beq.n	800d8f2 <HAL_UART_IRQHandler+0x6c6>
 800d8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d8d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d008      	beq.n	800d8f2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d8e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f001 f945 	bl	800eb7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8f0:	e051      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d014      	beq.n	800d928 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d906:	2b00      	cmp	r3, #0
 800d908:	d105      	bne.n	800d916 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d90a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d90e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d912:	2b00      	cmp	r3, #0
 800d914:	d008      	beq.n	800d928 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d03a      	beq.n	800d994 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	4798      	blx	r3
    }
    return;
 800d926:	e035      	b.n	800d994 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d930:	2b00      	cmp	r3, #0
 800d932:	d009      	beq.n	800d948 <HAL_UART_IRQHandler+0x71c>
 800d934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d003      	beq.n	800d948 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f001 f8ef 	bl	800eb24 <UART_EndTransmit_IT>
    return;
 800d946:	e026      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d94c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d950:	2b00      	cmp	r3, #0
 800d952:	d009      	beq.n	800d968 <HAL_UART_IRQHandler+0x73c>
 800d954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d958:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d003      	beq.n	800d968 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f001 f91e 	bl	800eba2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d966:	e016      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d96c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d970:	2b00      	cmp	r3, #0
 800d972:	d010      	beq.n	800d996 <HAL_UART_IRQHandler+0x76a>
 800d974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	da0c      	bge.n	800d996 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f001 f906 	bl	800eb8e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d982:	e008      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
      return;
 800d984:	bf00      	nop
 800d986:	e006      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
    return;
 800d988:	bf00      	nop
 800d98a:	e004      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
      return;
 800d98c:	bf00      	nop
 800d98e:	e002      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
      return;
 800d990:	bf00      	nop
 800d992:	e000      	b.n	800d996 <HAL_UART_IRQHandler+0x76a>
    return;
 800d994:	bf00      	nop
  }
}
 800d996:	37e8      	adds	r7, #232	@ 0xe8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	effffffe 	.word	0xeffffffe

0800d9a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d9a8:	bf00      	nop
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d9bc:	bf00      	nop
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9e4:	b092      	sub	sp, #72	@ 0x48
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	431a      	orrs	r2, r3
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	431a      	orrs	r2, r3
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	69db      	ldr	r3, [r3, #28]
 800da04:	4313      	orrs	r3, r2
 800da06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	4bbe      	ldr	r3, [pc, #760]	@ (800dd08 <UART_SetConfig+0x328>)
 800da10:	4013      	ands	r3, r2
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	6812      	ldr	r2, [r2, #0]
 800da16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800da18:	430b      	orrs	r3, r1
 800da1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	68da      	ldr	r2, [r3, #12]
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	430a      	orrs	r2, r1
 800da30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4ab3      	ldr	r2, [pc, #716]	@ (800dd0c <UART_SetConfig+0x32c>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d004      	beq.n	800da4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da48:	4313      	orrs	r3, r2
 800da4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	689a      	ldr	r2, [r3, #8]
 800da52:	4baf      	ldr	r3, [pc, #700]	@ (800dd10 <UART_SetConfig+0x330>)
 800da54:	4013      	ands	r3, r2
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	6812      	ldr	r2, [r2, #0]
 800da5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800da5c:	430b      	orrs	r3, r1
 800da5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da66:	f023 010f 	bic.w	r1, r3, #15
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	430a      	orrs	r2, r1
 800da74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4aa6      	ldr	r2, [pc, #664]	@ (800dd14 <UART_SetConfig+0x334>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d177      	bne.n	800db70 <UART_SetConfig+0x190>
 800da80:	4ba5      	ldr	r3, [pc, #660]	@ (800dd18 <UART_SetConfig+0x338>)
 800da82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da88:	2b28      	cmp	r3, #40	@ 0x28
 800da8a:	d86d      	bhi.n	800db68 <UART_SetConfig+0x188>
 800da8c:	a201      	add	r2, pc, #4	@ (adr r2, 800da94 <UART_SetConfig+0xb4>)
 800da8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da92:	bf00      	nop
 800da94:	0800db39 	.word	0x0800db39
 800da98:	0800db69 	.word	0x0800db69
 800da9c:	0800db69 	.word	0x0800db69
 800daa0:	0800db69 	.word	0x0800db69
 800daa4:	0800db69 	.word	0x0800db69
 800daa8:	0800db69 	.word	0x0800db69
 800daac:	0800db69 	.word	0x0800db69
 800dab0:	0800db69 	.word	0x0800db69
 800dab4:	0800db41 	.word	0x0800db41
 800dab8:	0800db69 	.word	0x0800db69
 800dabc:	0800db69 	.word	0x0800db69
 800dac0:	0800db69 	.word	0x0800db69
 800dac4:	0800db69 	.word	0x0800db69
 800dac8:	0800db69 	.word	0x0800db69
 800dacc:	0800db69 	.word	0x0800db69
 800dad0:	0800db69 	.word	0x0800db69
 800dad4:	0800db49 	.word	0x0800db49
 800dad8:	0800db69 	.word	0x0800db69
 800dadc:	0800db69 	.word	0x0800db69
 800dae0:	0800db69 	.word	0x0800db69
 800dae4:	0800db69 	.word	0x0800db69
 800dae8:	0800db69 	.word	0x0800db69
 800daec:	0800db69 	.word	0x0800db69
 800daf0:	0800db69 	.word	0x0800db69
 800daf4:	0800db51 	.word	0x0800db51
 800daf8:	0800db69 	.word	0x0800db69
 800dafc:	0800db69 	.word	0x0800db69
 800db00:	0800db69 	.word	0x0800db69
 800db04:	0800db69 	.word	0x0800db69
 800db08:	0800db69 	.word	0x0800db69
 800db0c:	0800db69 	.word	0x0800db69
 800db10:	0800db69 	.word	0x0800db69
 800db14:	0800db59 	.word	0x0800db59
 800db18:	0800db69 	.word	0x0800db69
 800db1c:	0800db69 	.word	0x0800db69
 800db20:	0800db69 	.word	0x0800db69
 800db24:	0800db69 	.word	0x0800db69
 800db28:	0800db69 	.word	0x0800db69
 800db2c:	0800db69 	.word	0x0800db69
 800db30:	0800db69 	.word	0x0800db69
 800db34:	0800db61 	.word	0x0800db61
 800db38:	2301      	movs	r3, #1
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3e:	e326      	b.n	800e18e <UART_SetConfig+0x7ae>
 800db40:	2304      	movs	r3, #4
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db46:	e322      	b.n	800e18e <UART_SetConfig+0x7ae>
 800db48:	2308      	movs	r3, #8
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db4e:	e31e      	b.n	800e18e <UART_SetConfig+0x7ae>
 800db50:	2310      	movs	r3, #16
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db56:	e31a      	b.n	800e18e <UART_SetConfig+0x7ae>
 800db58:	2320      	movs	r3, #32
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db5e:	e316      	b.n	800e18e <UART_SetConfig+0x7ae>
 800db60:	2340      	movs	r3, #64	@ 0x40
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db66:	e312      	b.n	800e18e <UART_SetConfig+0x7ae>
 800db68:	2380      	movs	r3, #128	@ 0x80
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db6e:	e30e      	b.n	800e18e <UART_SetConfig+0x7ae>
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a69      	ldr	r2, [pc, #420]	@ (800dd1c <UART_SetConfig+0x33c>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d130      	bne.n	800dbdc <UART_SetConfig+0x1fc>
 800db7a:	4b67      	ldr	r3, [pc, #412]	@ (800dd18 <UART_SetConfig+0x338>)
 800db7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db7e:	f003 0307 	and.w	r3, r3, #7
 800db82:	2b05      	cmp	r3, #5
 800db84:	d826      	bhi.n	800dbd4 <UART_SetConfig+0x1f4>
 800db86:	a201      	add	r2, pc, #4	@ (adr r2, 800db8c <UART_SetConfig+0x1ac>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800dba5 	.word	0x0800dba5
 800db90:	0800dbad 	.word	0x0800dbad
 800db94:	0800dbb5 	.word	0x0800dbb5
 800db98:	0800dbbd 	.word	0x0800dbbd
 800db9c:	0800dbc5 	.word	0x0800dbc5
 800dba0:	0800dbcd 	.word	0x0800dbcd
 800dba4:	2300      	movs	r3, #0
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbaa:	e2f0      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dbac:	2304      	movs	r3, #4
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb2:	e2ec      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dbb4:	2308      	movs	r3, #8
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbba:	e2e8      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dbbc:	2310      	movs	r3, #16
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbc2:	e2e4      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dbc4:	2320      	movs	r3, #32
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbca:	e2e0      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dbcc:	2340      	movs	r3, #64	@ 0x40
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbd2:	e2dc      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dbd4:	2380      	movs	r3, #128	@ 0x80
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbda:	e2d8      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a4f      	ldr	r2, [pc, #316]	@ (800dd20 <UART_SetConfig+0x340>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d130      	bne.n	800dc48 <UART_SetConfig+0x268>
 800dbe6:	4b4c      	ldr	r3, [pc, #304]	@ (800dd18 <UART_SetConfig+0x338>)
 800dbe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbea:	f003 0307 	and.w	r3, r3, #7
 800dbee:	2b05      	cmp	r3, #5
 800dbf0:	d826      	bhi.n	800dc40 <UART_SetConfig+0x260>
 800dbf2:	a201      	add	r2, pc, #4	@ (adr r2, 800dbf8 <UART_SetConfig+0x218>)
 800dbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf8:	0800dc11 	.word	0x0800dc11
 800dbfc:	0800dc19 	.word	0x0800dc19
 800dc00:	0800dc21 	.word	0x0800dc21
 800dc04:	0800dc29 	.word	0x0800dc29
 800dc08:	0800dc31 	.word	0x0800dc31
 800dc0c:	0800dc39 	.word	0x0800dc39
 800dc10:	2300      	movs	r3, #0
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc16:	e2ba      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc18:	2304      	movs	r3, #4
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc1e:	e2b6      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc20:	2308      	movs	r3, #8
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc26:	e2b2      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc28:	2310      	movs	r3, #16
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc2e:	e2ae      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc30:	2320      	movs	r3, #32
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc36:	e2aa      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc38:	2340      	movs	r3, #64	@ 0x40
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3e:	e2a6      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc40:	2380      	movs	r3, #128	@ 0x80
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc46:	e2a2      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a35      	ldr	r2, [pc, #212]	@ (800dd24 <UART_SetConfig+0x344>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d130      	bne.n	800dcb4 <UART_SetConfig+0x2d4>
 800dc52:	4b31      	ldr	r3, [pc, #196]	@ (800dd18 <UART_SetConfig+0x338>)
 800dc54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc56:	f003 0307 	and.w	r3, r3, #7
 800dc5a:	2b05      	cmp	r3, #5
 800dc5c:	d826      	bhi.n	800dcac <UART_SetConfig+0x2cc>
 800dc5e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc64 <UART_SetConfig+0x284>)
 800dc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc64:	0800dc7d 	.word	0x0800dc7d
 800dc68:	0800dc85 	.word	0x0800dc85
 800dc6c:	0800dc8d 	.word	0x0800dc8d
 800dc70:	0800dc95 	.word	0x0800dc95
 800dc74:	0800dc9d 	.word	0x0800dc9d
 800dc78:	0800dca5 	.word	0x0800dca5
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc82:	e284      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc84:	2304      	movs	r3, #4
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8a:	e280      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc8c:	2308      	movs	r3, #8
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc92:	e27c      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc94:	2310      	movs	r3, #16
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9a:	e278      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dc9c:	2320      	movs	r3, #32
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca2:	e274      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dca4:	2340      	movs	r3, #64	@ 0x40
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e270      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dcac:	2380      	movs	r3, #128	@ 0x80
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e26c      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a1b      	ldr	r2, [pc, #108]	@ (800dd28 <UART_SetConfig+0x348>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d142      	bne.n	800dd44 <UART_SetConfig+0x364>
 800dcbe:	4b16      	ldr	r3, [pc, #88]	@ (800dd18 <UART_SetConfig+0x338>)
 800dcc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcc2:	f003 0307 	and.w	r3, r3, #7
 800dcc6:	2b05      	cmp	r3, #5
 800dcc8:	d838      	bhi.n	800dd3c <UART_SetConfig+0x35c>
 800dcca:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd0 <UART_SetConfig+0x2f0>)
 800dccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd0:	0800dce9 	.word	0x0800dce9
 800dcd4:	0800dcf1 	.word	0x0800dcf1
 800dcd8:	0800dcf9 	.word	0x0800dcf9
 800dcdc:	0800dd01 	.word	0x0800dd01
 800dce0:	0800dd2d 	.word	0x0800dd2d
 800dce4:	0800dd35 	.word	0x0800dd35
 800dce8:	2300      	movs	r3, #0
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcee:	e24e      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dcf0:	2304      	movs	r3, #4
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf6:	e24a      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dcf8:	2308      	movs	r3, #8
 800dcfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcfe:	e246      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dd00:	2310      	movs	r3, #16
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd06:	e242      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dd08:	cfff69f3 	.word	0xcfff69f3
 800dd0c:	58000c00 	.word	0x58000c00
 800dd10:	11fff4ff 	.word	0x11fff4ff
 800dd14:	40011000 	.word	0x40011000
 800dd18:	58024400 	.word	0x58024400
 800dd1c:	40004400 	.word	0x40004400
 800dd20:	40004800 	.word	0x40004800
 800dd24:	40004c00 	.word	0x40004c00
 800dd28:	40005000 	.word	0x40005000
 800dd2c:	2320      	movs	r3, #32
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e22c      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dd34:	2340      	movs	r3, #64	@ 0x40
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e228      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dd3c:	2380      	movs	r3, #128	@ 0x80
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e224      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4ab1      	ldr	r2, [pc, #708]	@ (800e010 <UART_SetConfig+0x630>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d176      	bne.n	800de3c <UART_SetConfig+0x45c>
 800dd4e:	4bb1      	ldr	r3, [pc, #708]	@ (800e014 <UART_SetConfig+0x634>)
 800dd50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd56:	2b28      	cmp	r3, #40	@ 0x28
 800dd58:	d86c      	bhi.n	800de34 <UART_SetConfig+0x454>
 800dd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd60 <UART_SetConfig+0x380>)
 800dd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd60:	0800de05 	.word	0x0800de05
 800dd64:	0800de35 	.word	0x0800de35
 800dd68:	0800de35 	.word	0x0800de35
 800dd6c:	0800de35 	.word	0x0800de35
 800dd70:	0800de35 	.word	0x0800de35
 800dd74:	0800de35 	.word	0x0800de35
 800dd78:	0800de35 	.word	0x0800de35
 800dd7c:	0800de35 	.word	0x0800de35
 800dd80:	0800de0d 	.word	0x0800de0d
 800dd84:	0800de35 	.word	0x0800de35
 800dd88:	0800de35 	.word	0x0800de35
 800dd8c:	0800de35 	.word	0x0800de35
 800dd90:	0800de35 	.word	0x0800de35
 800dd94:	0800de35 	.word	0x0800de35
 800dd98:	0800de35 	.word	0x0800de35
 800dd9c:	0800de35 	.word	0x0800de35
 800dda0:	0800de15 	.word	0x0800de15
 800dda4:	0800de35 	.word	0x0800de35
 800dda8:	0800de35 	.word	0x0800de35
 800ddac:	0800de35 	.word	0x0800de35
 800ddb0:	0800de35 	.word	0x0800de35
 800ddb4:	0800de35 	.word	0x0800de35
 800ddb8:	0800de35 	.word	0x0800de35
 800ddbc:	0800de35 	.word	0x0800de35
 800ddc0:	0800de1d 	.word	0x0800de1d
 800ddc4:	0800de35 	.word	0x0800de35
 800ddc8:	0800de35 	.word	0x0800de35
 800ddcc:	0800de35 	.word	0x0800de35
 800ddd0:	0800de35 	.word	0x0800de35
 800ddd4:	0800de35 	.word	0x0800de35
 800ddd8:	0800de35 	.word	0x0800de35
 800dddc:	0800de35 	.word	0x0800de35
 800dde0:	0800de25 	.word	0x0800de25
 800dde4:	0800de35 	.word	0x0800de35
 800dde8:	0800de35 	.word	0x0800de35
 800ddec:	0800de35 	.word	0x0800de35
 800ddf0:	0800de35 	.word	0x0800de35
 800ddf4:	0800de35 	.word	0x0800de35
 800ddf8:	0800de35 	.word	0x0800de35
 800ddfc:	0800de35 	.word	0x0800de35
 800de00:	0800de2d 	.word	0x0800de2d
 800de04:	2301      	movs	r3, #1
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0a:	e1c0      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de0c:	2304      	movs	r3, #4
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de12:	e1bc      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de14:	2308      	movs	r3, #8
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1a:	e1b8      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de1c:	2310      	movs	r3, #16
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de22:	e1b4      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de24:	2320      	movs	r3, #32
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2a:	e1b0      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de2c:	2340      	movs	r3, #64	@ 0x40
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de32:	e1ac      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de34:	2380      	movs	r3, #128	@ 0x80
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de3a:	e1a8      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a75      	ldr	r2, [pc, #468]	@ (800e018 <UART_SetConfig+0x638>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d130      	bne.n	800dea8 <UART_SetConfig+0x4c8>
 800de46:	4b73      	ldr	r3, [pc, #460]	@ (800e014 <UART_SetConfig+0x634>)
 800de48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de4a:	f003 0307 	and.w	r3, r3, #7
 800de4e:	2b05      	cmp	r3, #5
 800de50:	d826      	bhi.n	800dea0 <UART_SetConfig+0x4c0>
 800de52:	a201      	add	r2, pc, #4	@ (adr r2, 800de58 <UART_SetConfig+0x478>)
 800de54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de58:	0800de71 	.word	0x0800de71
 800de5c:	0800de79 	.word	0x0800de79
 800de60:	0800de81 	.word	0x0800de81
 800de64:	0800de89 	.word	0x0800de89
 800de68:	0800de91 	.word	0x0800de91
 800de6c:	0800de99 	.word	0x0800de99
 800de70:	2300      	movs	r3, #0
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de76:	e18a      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de78:	2304      	movs	r3, #4
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de7e:	e186      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de80:	2308      	movs	r3, #8
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de86:	e182      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de88:	2310      	movs	r3, #16
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de8e:	e17e      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de90:	2320      	movs	r3, #32
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de96:	e17a      	b.n	800e18e <UART_SetConfig+0x7ae>
 800de98:	2340      	movs	r3, #64	@ 0x40
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de9e:	e176      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dea0:	2380      	movs	r3, #128	@ 0x80
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea6:	e172      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a5b      	ldr	r2, [pc, #364]	@ (800e01c <UART_SetConfig+0x63c>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d130      	bne.n	800df14 <UART_SetConfig+0x534>
 800deb2:	4b58      	ldr	r3, [pc, #352]	@ (800e014 <UART_SetConfig+0x634>)
 800deb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deb6:	f003 0307 	and.w	r3, r3, #7
 800deba:	2b05      	cmp	r3, #5
 800debc:	d826      	bhi.n	800df0c <UART_SetConfig+0x52c>
 800debe:	a201      	add	r2, pc, #4	@ (adr r2, 800dec4 <UART_SetConfig+0x4e4>)
 800dec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec4:	0800dedd 	.word	0x0800dedd
 800dec8:	0800dee5 	.word	0x0800dee5
 800decc:	0800deed 	.word	0x0800deed
 800ded0:	0800def5 	.word	0x0800def5
 800ded4:	0800defd 	.word	0x0800defd
 800ded8:	0800df05 	.word	0x0800df05
 800dedc:	2300      	movs	r3, #0
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dee2:	e154      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dee4:	2304      	movs	r3, #4
 800dee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deea:	e150      	b.n	800e18e <UART_SetConfig+0x7ae>
 800deec:	2308      	movs	r3, #8
 800deee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def2:	e14c      	b.n	800e18e <UART_SetConfig+0x7ae>
 800def4:	2310      	movs	r3, #16
 800def6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defa:	e148      	b.n	800e18e <UART_SetConfig+0x7ae>
 800defc:	2320      	movs	r3, #32
 800defe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df02:	e144      	b.n	800e18e <UART_SetConfig+0x7ae>
 800df04:	2340      	movs	r3, #64	@ 0x40
 800df06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0a:	e140      	b.n	800e18e <UART_SetConfig+0x7ae>
 800df0c:	2380      	movs	r3, #128	@ 0x80
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df12:	e13c      	b.n	800e18e <UART_SetConfig+0x7ae>
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a41      	ldr	r2, [pc, #260]	@ (800e020 <UART_SetConfig+0x640>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	f040 8082 	bne.w	800e024 <UART_SetConfig+0x644>
 800df20:	4b3c      	ldr	r3, [pc, #240]	@ (800e014 <UART_SetConfig+0x634>)
 800df22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df28:	2b28      	cmp	r3, #40	@ 0x28
 800df2a:	d86d      	bhi.n	800e008 <UART_SetConfig+0x628>
 800df2c:	a201      	add	r2, pc, #4	@ (adr r2, 800df34 <UART_SetConfig+0x554>)
 800df2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df32:	bf00      	nop
 800df34:	0800dfd9 	.word	0x0800dfd9
 800df38:	0800e009 	.word	0x0800e009
 800df3c:	0800e009 	.word	0x0800e009
 800df40:	0800e009 	.word	0x0800e009
 800df44:	0800e009 	.word	0x0800e009
 800df48:	0800e009 	.word	0x0800e009
 800df4c:	0800e009 	.word	0x0800e009
 800df50:	0800e009 	.word	0x0800e009
 800df54:	0800dfe1 	.word	0x0800dfe1
 800df58:	0800e009 	.word	0x0800e009
 800df5c:	0800e009 	.word	0x0800e009
 800df60:	0800e009 	.word	0x0800e009
 800df64:	0800e009 	.word	0x0800e009
 800df68:	0800e009 	.word	0x0800e009
 800df6c:	0800e009 	.word	0x0800e009
 800df70:	0800e009 	.word	0x0800e009
 800df74:	0800dfe9 	.word	0x0800dfe9
 800df78:	0800e009 	.word	0x0800e009
 800df7c:	0800e009 	.word	0x0800e009
 800df80:	0800e009 	.word	0x0800e009
 800df84:	0800e009 	.word	0x0800e009
 800df88:	0800e009 	.word	0x0800e009
 800df8c:	0800e009 	.word	0x0800e009
 800df90:	0800e009 	.word	0x0800e009
 800df94:	0800dff1 	.word	0x0800dff1
 800df98:	0800e009 	.word	0x0800e009
 800df9c:	0800e009 	.word	0x0800e009
 800dfa0:	0800e009 	.word	0x0800e009
 800dfa4:	0800e009 	.word	0x0800e009
 800dfa8:	0800e009 	.word	0x0800e009
 800dfac:	0800e009 	.word	0x0800e009
 800dfb0:	0800e009 	.word	0x0800e009
 800dfb4:	0800dff9 	.word	0x0800dff9
 800dfb8:	0800e009 	.word	0x0800e009
 800dfbc:	0800e009 	.word	0x0800e009
 800dfc0:	0800e009 	.word	0x0800e009
 800dfc4:	0800e009 	.word	0x0800e009
 800dfc8:	0800e009 	.word	0x0800e009
 800dfcc:	0800e009 	.word	0x0800e009
 800dfd0:	0800e009 	.word	0x0800e009
 800dfd4:	0800e001 	.word	0x0800e001
 800dfd8:	2301      	movs	r3, #1
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfde:	e0d6      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dfe0:	2304      	movs	r3, #4
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe6:	e0d2      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dfe8:	2308      	movs	r3, #8
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfee:	e0ce      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dff0:	2310      	movs	r3, #16
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff6:	e0ca      	b.n	800e18e <UART_SetConfig+0x7ae>
 800dff8:	2320      	movs	r3, #32
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffe:	e0c6      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e000:	2340      	movs	r3, #64	@ 0x40
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e006:	e0c2      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e008:	2380      	movs	r3, #128	@ 0x80
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e00e:	e0be      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e010:	40011400 	.word	0x40011400
 800e014:	58024400 	.word	0x58024400
 800e018:	40007800 	.word	0x40007800
 800e01c:	40007c00 	.word	0x40007c00
 800e020:	40011800 	.word	0x40011800
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4aad      	ldr	r2, [pc, #692]	@ (800e2e0 <UART_SetConfig+0x900>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d176      	bne.n	800e11c <UART_SetConfig+0x73c>
 800e02e:	4bad      	ldr	r3, [pc, #692]	@ (800e2e4 <UART_SetConfig+0x904>)
 800e030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e036:	2b28      	cmp	r3, #40	@ 0x28
 800e038:	d86c      	bhi.n	800e114 <UART_SetConfig+0x734>
 800e03a:	a201      	add	r2, pc, #4	@ (adr r2, 800e040 <UART_SetConfig+0x660>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e0e5 	.word	0x0800e0e5
 800e044:	0800e115 	.word	0x0800e115
 800e048:	0800e115 	.word	0x0800e115
 800e04c:	0800e115 	.word	0x0800e115
 800e050:	0800e115 	.word	0x0800e115
 800e054:	0800e115 	.word	0x0800e115
 800e058:	0800e115 	.word	0x0800e115
 800e05c:	0800e115 	.word	0x0800e115
 800e060:	0800e0ed 	.word	0x0800e0ed
 800e064:	0800e115 	.word	0x0800e115
 800e068:	0800e115 	.word	0x0800e115
 800e06c:	0800e115 	.word	0x0800e115
 800e070:	0800e115 	.word	0x0800e115
 800e074:	0800e115 	.word	0x0800e115
 800e078:	0800e115 	.word	0x0800e115
 800e07c:	0800e115 	.word	0x0800e115
 800e080:	0800e0f5 	.word	0x0800e0f5
 800e084:	0800e115 	.word	0x0800e115
 800e088:	0800e115 	.word	0x0800e115
 800e08c:	0800e115 	.word	0x0800e115
 800e090:	0800e115 	.word	0x0800e115
 800e094:	0800e115 	.word	0x0800e115
 800e098:	0800e115 	.word	0x0800e115
 800e09c:	0800e115 	.word	0x0800e115
 800e0a0:	0800e0fd 	.word	0x0800e0fd
 800e0a4:	0800e115 	.word	0x0800e115
 800e0a8:	0800e115 	.word	0x0800e115
 800e0ac:	0800e115 	.word	0x0800e115
 800e0b0:	0800e115 	.word	0x0800e115
 800e0b4:	0800e115 	.word	0x0800e115
 800e0b8:	0800e115 	.word	0x0800e115
 800e0bc:	0800e115 	.word	0x0800e115
 800e0c0:	0800e105 	.word	0x0800e105
 800e0c4:	0800e115 	.word	0x0800e115
 800e0c8:	0800e115 	.word	0x0800e115
 800e0cc:	0800e115 	.word	0x0800e115
 800e0d0:	0800e115 	.word	0x0800e115
 800e0d4:	0800e115 	.word	0x0800e115
 800e0d8:	0800e115 	.word	0x0800e115
 800e0dc:	0800e115 	.word	0x0800e115
 800e0e0:	0800e10d 	.word	0x0800e10d
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ea:	e050      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e0ec:	2304      	movs	r3, #4
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0f2:	e04c      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e0f4:	2308      	movs	r3, #8
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0fa:	e048      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e0fc:	2310      	movs	r3, #16
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e102:	e044      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e104:	2320      	movs	r3, #32
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e10a:	e040      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e10c:	2340      	movs	r3, #64	@ 0x40
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e112:	e03c      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e114:	2380      	movs	r3, #128	@ 0x80
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e11a:	e038      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a71      	ldr	r2, [pc, #452]	@ (800e2e8 <UART_SetConfig+0x908>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d130      	bne.n	800e188 <UART_SetConfig+0x7a8>
 800e126:	4b6f      	ldr	r3, [pc, #444]	@ (800e2e4 <UART_SetConfig+0x904>)
 800e128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e12a:	f003 0307 	and.w	r3, r3, #7
 800e12e:	2b05      	cmp	r3, #5
 800e130:	d826      	bhi.n	800e180 <UART_SetConfig+0x7a0>
 800e132:	a201      	add	r2, pc, #4	@ (adr r2, 800e138 <UART_SetConfig+0x758>)
 800e134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e138:	0800e151 	.word	0x0800e151
 800e13c:	0800e159 	.word	0x0800e159
 800e140:	0800e161 	.word	0x0800e161
 800e144:	0800e169 	.word	0x0800e169
 800e148:	0800e171 	.word	0x0800e171
 800e14c:	0800e179 	.word	0x0800e179
 800e150:	2302      	movs	r3, #2
 800e152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e156:	e01a      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e158:	2304      	movs	r3, #4
 800e15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e15e:	e016      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e160:	2308      	movs	r3, #8
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e166:	e012      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e168:	2310      	movs	r3, #16
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e16e:	e00e      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e170:	2320      	movs	r3, #32
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e176:	e00a      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e178:	2340      	movs	r3, #64	@ 0x40
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e17e:	e006      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e180:	2380      	movs	r3, #128	@ 0x80
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e186:	e002      	b.n	800e18e <UART_SetConfig+0x7ae>
 800e188:	2380      	movs	r3, #128	@ 0x80
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a55      	ldr	r2, [pc, #340]	@ (800e2e8 <UART_SetConfig+0x908>)
 800e194:	4293      	cmp	r3, r2
 800e196:	f040 80f8 	bne.w	800e38a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e19a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e19e:	2b20      	cmp	r3, #32
 800e1a0:	dc46      	bgt.n	800e230 <UART_SetConfig+0x850>
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	db75      	blt.n	800e292 <UART_SetConfig+0x8b2>
 800e1a6:	3b02      	subs	r3, #2
 800e1a8:	2b1e      	cmp	r3, #30
 800e1aa:	d872      	bhi.n	800e292 <UART_SetConfig+0x8b2>
 800e1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b4 <UART_SetConfig+0x7d4>)
 800e1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b2:	bf00      	nop
 800e1b4:	0800e237 	.word	0x0800e237
 800e1b8:	0800e293 	.word	0x0800e293
 800e1bc:	0800e23f 	.word	0x0800e23f
 800e1c0:	0800e293 	.word	0x0800e293
 800e1c4:	0800e293 	.word	0x0800e293
 800e1c8:	0800e293 	.word	0x0800e293
 800e1cc:	0800e24f 	.word	0x0800e24f
 800e1d0:	0800e293 	.word	0x0800e293
 800e1d4:	0800e293 	.word	0x0800e293
 800e1d8:	0800e293 	.word	0x0800e293
 800e1dc:	0800e293 	.word	0x0800e293
 800e1e0:	0800e293 	.word	0x0800e293
 800e1e4:	0800e293 	.word	0x0800e293
 800e1e8:	0800e293 	.word	0x0800e293
 800e1ec:	0800e25f 	.word	0x0800e25f
 800e1f0:	0800e293 	.word	0x0800e293
 800e1f4:	0800e293 	.word	0x0800e293
 800e1f8:	0800e293 	.word	0x0800e293
 800e1fc:	0800e293 	.word	0x0800e293
 800e200:	0800e293 	.word	0x0800e293
 800e204:	0800e293 	.word	0x0800e293
 800e208:	0800e293 	.word	0x0800e293
 800e20c:	0800e293 	.word	0x0800e293
 800e210:	0800e293 	.word	0x0800e293
 800e214:	0800e293 	.word	0x0800e293
 800e218:	0800e293 	.word	0x0800e293
 800e21c:	0800e293 	.word	0x0800e293
 800e220:	0800e293 	.word	0x0800e293
 800e224:	0800e293 	.word	0x0800e293
 800e228:	0800e293 	.word	0x0800e293
 800e22c:	0800e285 	.word	0x0800e285
 800e230:	2b40      	cmp	r3, #64	@ 0x40
 800e232:	d02a      	beq.n	800e28a <UART_SetConfig+0x8aa>
 800e234:	e02d      	b.n	800e292 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e236:	f7fb fd3b 	bl	8009cb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e23a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e23c:	e02f      	b.n	800e29e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e23e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e242:	4618      	mov	r0, r3
 800e244:	f7fb fd4a 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e24c:	e027      	b.n	800e29e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e24e:	f107 0318 	add.w	r3, r7, #24
 800e252:	4618      	mov	r0, r3
 800e254:	f7fb fe96 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e25c:	e01f      	b.n	800e29e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e25e:	4b21      	ldr	r3, [pc, #132]	@ (800e2e4 <UART_SetConfig+0x904>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 0320 	and.w	r3, r3, #32
 800e266:	2b00      	cmp	r3, #0
 800e268:	d009      	beq.n	800e27e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e26a:	4b1e      	ldr	r3, [pc, #120]	@ (800e2e4 <UART_SetConfig+0x904>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	08db      	lsrs	r3, r3, #3
 800e270:	f003 0303 	and.w	r3, r3, #3
 800e274:	4a1d      	ldr	r2, [pc, #116]	@ (800e2ec <UART_SetConfig+0x90c>)
 800e276:	fa22 f303 	lsr.w	r3, r2, r3
 800e27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e27c:	e00f      	b.n	800e29e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e27e:	4b1b      	ldr	r3, [pc, #108]	@ (800e2ec <UART_SetConfig+0x90c>)
 800e280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e282:	e00c      	b.n	800e29e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e284:	4b1a      	ldr	r3, [pc, #104]	@ (800e2f0 <UART_SetConfig+0x910>)
 800e286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e288:	e009      	b.n	800e29e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e28a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e290:	e005      	b.n	800e29e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e292:	2300      	movs	r3, #0
 800e294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e29c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 81ee 	beq.w	800e682 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2aa:	4a12      	ldr	r2, [pc, #72]	@ (800e2f4 <UART_SetConfig+0x914>)
 800e2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	4413      	add	r3, r2
 800e2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d305      	bcc.n	800e2d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d910      	bls.n	800e2f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e2dc:	e1d1      	b.n	800e682 <UART_SetConfig+0xca2>
 800e2de:	bf00      	nop
 800e2e0:	40011c00 	.word	0x40011c00
 800e2e4:	58024400 	.word	0x58024400
 800e2e8:	58000c00 	.word	0x58000c00
 800e2ec:	03d09000 	.word	0x03d09000
 800e2f0:	003d0900 	.word	0x003d0900
 800e2f4:	08015344 	.word	0x08015344
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	60bb      	str	r3, [r7, #8]
 800e2fe:	60fa      	str	r2, [r7, #12]
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e304:	4ac0      	ldr	r2, [pc, #768]	@ (800e608 <UART_SetConfig+0xc28>)
 800e306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	2200      	movs	r2, #0
 800e30e:	603b      	str	r3, [r7, #0]
 800e310:	607a      	str	r2, [r7, #4]
 800e312:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e31a:	f7f2 fa0d 	bl	8000738 <__aeabi_uldivmod>
 800e31e:	4602      	mov	r2, r0
 800e320:	460b      	mov	r3, r1
 800e322:	4610      	mov	r0, r2
 800e324:	4619      	mov	r1, r3
 800e326:	f04f 0200 	mov.w	r2, #0
 800e32a:	f04f 0300 	mov.w	r3, #0
 800e32e:	020b      	lsls	r3, r1, #8
 800e330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e334:	0202      	lsls	r2, r0, #8
 800e336:	6979      	ldr	r1, [r7, #20]
 800e338:	6849      	ldr	r1, [r1, #4]
 800e33a:	0849      	lsrs	r1, r1, #1
 800e33c:	2000      	movs	r0, #0
 800e33e:	460c      	mov	r4, r1
 800e340:	4605      	mov	r5, r0
 800e342:	eb12 0804 	adds.w	r8, r2, r4
 800e346:	eb43 0905 	adc.w	r9, r3, r5
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	469a      	mov	sl, r3
 800e352:	4693      	mov	fp, r2
 800e354:	4652      	mov	r2, sl
 800e356:	465b      	mov	r3, fp
 800e358:	4640      	mov	r0, r8
 800e35a:	4649      	mov	r1, r9
 800e35c:	f7f2 f9ec 	bl	8000738 <__aeabi_uldivmod>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	4613      	mov	r3, r2
 800e366:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e36e:	d308      	bcc.n	800e382 <UART_SetConfig+0x9a2>
 800e370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e376:	d204      	bcs.n	800e382 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e37e:	60da      	str	r2, [r3, #12]
 800e380:	e17f      	b.n	800e682 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e388:	e17b      	b.n	800e682 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	69db      	ldr	r3, [r3, #28]
 800e38e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e392:	f040 80bd 	bne.w	800e510 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e396:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e39a:	2b20      	cmp	r3, #32
 800e39c:	dc48      	bgt.n	800e430 <UART_SetConfig+0xa50>
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	db7b      	blt.n	800e49a <UART_SetConfig+0xaba>
 800e3a2:	2b20      	cmp	r3, #32
 800e3a4:	d879      	bhi.n	800e49a <UART_SetConfig+0xaba>
 800e3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e3ac <UART_SetConfig+0x9cc>)
 800e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ac:	0800e437 	.word	0x0800e437
 800e3b0:	0800e43f 	.word	0x0800e43f
 800e3b4:	0800e49b 	.word	0x0800e49b
 800e3b8:	0800e49b 	.word	0x0800e49b
 800e3bc:	0800e447 	.word	0x0800e447
 800e3c0:	0800e49b 	.word	0x0800e49b
 800e3c4:	0800e49b 	.word	0x0800e49b
 800e3c8:	0800e49b 	.word	0x0800e49b
 800e3cc:	0800e457 	.word	0x0800e457
 800e3d0:	0800e49b 	.word	0x0800e49b
 800e3d4:	0800e49b 	.word	0x0800e49b
 800e3d8:	0800e49b 	.word	0x0800e49b
 800e3dc:	0800e49b 	.word	0x0800e49b
 800e3e0:	0800e49b 	.word	0x0800e49b
 800e3e4:	0800e49b 	.word	0x0800e49b
 800e3e8:	0800e49b 	.word	0x0800e49b
 800e3ec:	0800e467 	.word	0x0800e467
 800e3f0:	0800e49b 	.word	0x0800e49b
 800e3f4:	0800e49b 	.word	0x0800e49b
 800e3f8:	0800e49b 	.word	0x0800e49b
 800e3fc:	0800e49b 	.word	0x0800e49b
 800e400:	0800e49b 	.word	0x0800e49b
 800e404:	0800e49b 	.word	0x0800e49b
 800e408:	0800e49b 	.word	0x0800e49b
 800e40c:	0800e49b 	.word	0x0800e49b
 800e410:	0800e49b 	.word	0x0800e49b
 800e414:	0800e49b 	.word	0x0800e49b
 800e418:	0800e49b 	.word	0x0800e49b
 800e41c:	0800e49b 	.word	0x0800e49b
 800e420:	0800e49b 	.word	0x0800e49b
 800e424:	0800e49b 	.word	0x0800e49b
 800e428:	0800e49b 	.word	0x0800e49b
 800e42c:	0800e48d 	.word	0x0800e48d
 800e430:	2b40      	cmp	r3, #64	@ 0x40
 800e432:	d02e      	beq.n	800e492 <UART_SetConfig+0xab2>
 800e434:	e031      	b.n	800e49a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e436:	f7f9 fd9d 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 800e43a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e43c:	e033      	b.n	800e4a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e43e:	f7f9 fdaf 	bl	8007fa0 <HAL_RCC_GetPCLK2Freq>
 800e442:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e444:	e02f      	b.n	800e4a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fb fc46 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e454:	e027      	b.n	800e4a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e456:	f107 0318 	add.w	r3, r7, #24
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fb fd92 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e464:	e01f      	b.n	800e4a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e466:	4b69      	ldr	r3, [pc, #420]	@ (800e60c <UART_SetConfig+0xc2c>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f003 0320 	and.w	r3, r3, #32
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d009      	beq.n	800e486 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e472:	4b66      	ldr	r3, [pc, #408]	@ (800e60c <UART_SetConfig+0xc2c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	08db      	lsrs	r3, r3, #3
 800e478:	f003 0303 	and.w	r3, r3, #3
 800e47c:	4a64      	ldr	r2, [pc, #400]	@ (800e610 <UART_SetConfig+0xc30>)
 800e47e:	fa22 f303 	lsr.w	r3, r2, r3
 800e482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e484:	e00f      	b.n	800e4a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e486:	4b62      	ldr	r3, [pc, #392]	@ (800e610 <UART_SetConfig+0xc30>)
 800e488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e48a:	e00c      	b.n	800e4a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e48c:	4b61      	ldr	r3, [pc, #388]	@ (800e614 <UART_SetConfig+0xc34>)
 800e48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e490:	e009      	b.n	800e4a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e498:	e005      	b.n	800e4a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e49a:	2300      	movs	r3, #0
 800e49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e4a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 80ea 	beq.w	800e682 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b2:	4a55      	ldr	r2, [pc, #340]	@ (800e608 <UART_SetConfig+0xc28>)
 800e4b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4c0:	005a      	lsls	r2, r3, #1
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	085b      	lsrs	r3, r3, #1
 800e4c8:	441a      	add	r2, r3
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d6:	2b0f      	cmp	r3, #15
 800e4d8:	d916      	bls.n	800e508 <UART_SetConfig+0xb28>
 800e4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4e0:	d212      	bcs.n	800e508 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	f023 030f 	bic.w	r3, r3, #15
 800e4ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ee:	085b      	lsrs	r3, r3, #1
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	f003 0307 	and.w	r3, r3, #7
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e504:	60da      	str	r2, [r3, #12]
 800e506:	e0bc      	b.n	800e682 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e508:	2301      	movs	r3, #1
 800e50a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e50e:	e0b8      	b.n	800e682 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e510:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e514:	2b20      	cmp	r3, #32
 800e516:	dc4b      	bgt.n	800e5b0 <UART_SetConfig+0xbd0>
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f2c0 8087 	blt.w	800e62c <UART_SetConfig+0xc4c>
 800e51e:	2b20      	cmp	r3, #32
 800e520:	f200 8084 	bhi.w	800e62c <UART_SetConfig+0xc4c>
 800e524:	a201      	add	r2, pc, #4	@ (adr r2, 800e52c <UART_SetConfig+0xb4c>)
 800e526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e52a:	bf00      	nop
 800e52c:	0800e5b7 	.word	0x0800e5b7
 800e530:	0800e5bf 	.word	0x0800e5bf
 800e534:	0800e62d 	.word	0x0800e62d
 800e538:	0800e62d 	.word	0x0800e62d
 800e53c:	0800e5c7 	.word	0x0800e5c7
 800e540:	0800e62d 	.word	0x0800e62d
 800e544:	0800e62d 	.word	0x0800e62d
 800e548:	0800e62d 	.word	0x0800e62d
 800e54c:	0800e5d7 	.word	0x0800e5d7
 800e550:	0800e62d 	.word	0x0800e62d
 800e554:	0800e62d 	.word	0x0800e62d
 800e558:	0800e62d 	.word	0x0800e62d
 800e55c:	0800e62d 	.word	0x0800e62d
 800e560:	0800e62d 	.word	0x0800e62d
 800e564:	0800e62d 	.word	0x0800e62d
 800e568:	0800e62d 	.word	0x0800e62d
 800e56c:	0800e5e7 	.word	0x0800e5e7
 800e570:	0800e62d 	.word	0x0800e62d
 800e574:	0800e62d 	.word	0x0800e62d
 800e578:	0800e62d 	.word	0x0800e62d
 800e57c:	0800e62d 	.word	0x0800e62d
 800e580:	0800e62d 	.word	0x0800e62d
 800e584:	0800e62d 	.word	0x0800e62d
 800e588:	0800e62d 	.word	0x0800e62d
 800e58c:	0800e62d 	.word	0x0800e62d
 800e590:	0800e62d 	.word	0x0800e62d
 800e594:	0800e62d 	.word	0x0800e62d
 800e598:	0800e62d 	.word	0x0800e62d
 800e59c:	0800e62d 	.word	0x0800e62d
 800e5a0:	0800e62d 	.word	0x0800e62d
 800e5a4:	0800e62d 	.word	0x0800e62d
 800e5a8:	0800e62d 	.word	0x0800e62d
 800e5ac:	0800e61f 	.word	0x0800e61f
 800e5b0:	2b40      	cmp	r3, #64	@ 0x40
 800e5b2:	d037      	beq.n	800e624 <UART_SetConfig+0xc44>
 800e5b4:	e03a      	b.n	800e62c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5b6:	f7f9 fcdd 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 800e5ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e5bc:	e03c      	b.n	800e638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5be:	f7f9 fcef 	bl	8007fa0 <HAL_RCC_GetPCLK2Freq>
 800e5c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e5c4:	e038      	b.n	800e638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fb fb86 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5d4:	e030      	b.n	800e638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5d6:	f107 0318 	add.w	r3, r7, #24
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fb fcd2 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5e4:	e028      	b.n	800e638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5e6:	4b09      	ldr	r3, [pc, #36]	@ (800e60c <UART_SetConfig+0xc2c>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f003 0320 	and.w	r3, r3, #32
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d012      	beq.n	800e618 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5f2:	4b06      	ldr	r3, [pc, #24]	@ (800e60c <UART_SetConfig+0xc2c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	08db      	lsrs	r3, r3, #3
 800e5f8:	f003 0303 	and.w	r3, r3, #3
 800e5fc:	4a04      	ldr	r2, [pc, #16]	@ (800e610 <UART_SetConfig+0xc30>)
 800e5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e604:	e018      	b.n	800e638 <UART_SetConfig+0xc58>
 800e606:	bf00      	nop
 800e608:	08015344 	.word	0x08015344
 800e60c:	58024400 	.word	0x58024400
 800e610:	03d09000 	.word	0x03d09000
 800e614:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e618:	4b24      	ldr	r3, [pc, #144]	@ (800e6ac <UART_SetConfig+0xccc>)
 800e61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e61c:	e00c      	b.n	800e638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e61e:	4b24      	ldr	r3, [pc, #144]	@ (800e6b0 <UART_SetConfig+0xcd0>)
 800e620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e622:	e009      	b.n	800e638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e62a:	e005      	b.n	800e638 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e62c:	2300      	movs	r3, #0
 800e62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e630:	2301      	movs	r3, #1
 800e632:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e636:	bf00      	nop
    }

    if (pclk != 0U)
 800e638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d021      	beq.n	800e682 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e642:	4a1c      	ldr	r2, [pc, #112]	@ (800e6b4 <UART_SetConfig+0xcd4>)
 800e644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e648:	461a      	mov	r2, r3
 800e64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e64c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	085b      	lsrs	r3, r3, #1
 800e656:	441a      	add	r2, r3
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e660:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e664:	2b0f      	cmp	r3, #15
 800e666:	d909      	bls.n	800e67c <UART_SetConfig+0xc9c>
 800e668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e66e:	d205      	bcs.n	800e67c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e672:	b29a      	uxth	r2, r3
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	60da      	str	r2, [r3, #12]
 800e67a:	e002      	b.n	800e682 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e67c:	2301      	movs	r3, #1
 800e67e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2201      	movs	r2, #1
 800e686:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2200      	movs	r2, #0
 800e696:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	2200      	movs	r2, #0
 800e69c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e69e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3748      	adds	r7, #72	@ 0x48
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6ac:	03d09000 	.word	0x03d09000
 800e6b0:	003d0900 	.word	0x003d0900
 800e6b4:	08015344 	.word	0x08015344

0800e6b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6c4:	f003 0308 	and.w	r3, r3, #8
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00a      	beq.n	800e6e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	430a      	orrs	r2, r1
 800e6e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00a      	beq.n	800e704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	430a      	orrs	r2, r1
 800e702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e708:	f003 0302 	and.w	r3, r3, #2
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00a      	beq.n	800e726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	430a      	orrs	r2, r1
 800e724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e72a:	f003 0304 	and.w	r3, r3, #4
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00a      	beq.n	800e748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	430a      	orrs	r2, r1
 800e746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e74c:	f003 0310 	and.w	r3, r3, #16
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00a      	beq.n	800e76a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	430a      	orrs	r2, r1
 800e768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e76e:	f003 0320 	and.w	r3, r3, #32
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	430a      	orrs	r2, r1
 800e78a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e794:	2b00      	cmp	r3, #0
 800e796:	d01a      	beq.n	800e7ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	430a      	orrs	r2, r1
 800e7ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7b6:	d10a      	bne.n	800e7ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00a      	beq.n	800e7f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	430a      	orrs	r2, r1
 800e7ee:	605a      	str	r2, [r3, #4]
  }
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b098      	sub	sp, #96	@ 0x60
 800e800:	af02      	add	r7, sp, #8
 800e802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2200      	movs	r2, #0
 800e808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e80c:	f7f4 ff8c 	bl	8003728 <HAL_GetTick>
 800e810:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f003 0308 	and.w	r3, r3, #8
 800e81c:	2b08      	cmp	r3, #8
 800e81e:	d12f      	bne.n	800e880 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e820:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e828:	2200      	movs	r2, #0
 800e82a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 f88e 	bl	800e950 <UART_WaitOnFlagUntilTimeout>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d022      	beq.n	800e880 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e842:	e853 3f00 	ldrex	r3, [r3]
 800e846:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e84a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e84e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	461a      	mov	r2, r3
 800e856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e858:	647b      	str	r3, [r7, #68]	@ 0x44
 800e85a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e85c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e85e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e860:	e841 2300 	strex	r3, r2, [r1]
 800e864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1e6      	bne.n	800e83a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2220      	movs	r2, #32
 800e870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e87c:	2303      	movs	r3, #3
 800e87e:	e063      	b.n	800e948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f003 0304 	and.w	r3, r3, #4
 800e88a:	2b04      	cmp	r3, #4
 800e88c:	d149      	bne.n	800e922 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e88e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e896:	2200      	movs	r2, #0
 800e898:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 f857 	bl	800e950 <UART_WaitOnFlagUntilTimeout>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d03c      	beq.n	800e922 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b0:	e853 3f00 	ldrex	r3, [r3]
 800e8b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e6      	bne.n	800e8a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	e853 3f00 	ldrex	r3, [r3]
 800e8e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f023 0301 	bic.w	r3, r3, #1
 800e8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	3308      	adds	r3, #8
 800e8f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8fa:	61fa      	str	r2, [r7, #28]
 800e8fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fe:	69b9      	ldr	r1, [r7, #24]
 800e900:	69fa      	ldr	r2, [r7, #28]
 800e902:	e841 2300 	strex	r3, r2, [r1]
 800e906:	617b      	str	r3, [r7, #20]
   return(result);
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1e5      	bne.n	800e8da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2220      	movs	r2, #32
 800e912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e91e:	2303      	movs	r3, #3
 800e920:	e012      	b.n	800e948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2220      	movs	r2, #32
 800e926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2220      	movs	r2, #32
 800e92e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3758      	adds	r7, #88	@ 0x58
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	603b      	str	r3, [r7, #0]
 800e95c:	4613      	mov	r3, r2
 800e95e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e960:	e04f      	b.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e968:	d04b      	beq.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e96a:	f7f4 fedd 	bl	8003728 <HAL_GetTick>
 800e96e:	4602      	mov	r2, r0
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	69ba      	ldr	r2, [r7, #24]
 800e976:	429a      	cmp	r2, r3
 800e978:	d302      	bcc.n	800e980 <UART_WaitOnFlagUntilTimeout+0x30>
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d101      	bne.n	800e984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e980:	2303      	movs	r3, #3
 800e982:	e04e      	b.n	800ea22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f003 0304 	and.w	r3, r3, #4
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d037      	beq.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2b80      	cmp	r3, #128	@ 0x80
 800e996:	d034      	beq.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	2b40      	cmp	r3, #64	@ 0x40
 800e99c:	d031      	beq.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	69db      	ldr	r3, [r3, #28]
 800e9a4:	f003 0308 	and.w	r3, r3, #8
 800e9a8:	2b08      	cmp	r3, #8
 800e9aa:	d110      	bne.n	800e9ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2208      	movs	r2, #8
 800e9b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f000 f839 	bl	800ea2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2208      	movs	r2, #8
 800e9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e029      	b.n	800ea22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	69db      	ldr	r3, [r3, #28]
 800e9d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e9dc:	d111      	bne.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e9e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f000 f81f 	bl	800ea2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2220      	movs	r2, #32
 800e9f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e9fe:	2303      	movs	r3, #3
 800ea00:	e00f      	b.n	800ea22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	69da      	ldr	r2, [r3, #28]
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	4013      	ands	r3, r2
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	bf0c      	ite	eq
 800ea12:	2301      	moveq	r3, #1
 800ea14:	2300      	movne	r3, #0
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	461a      	mov	r2, r3
 800ea1a:	79fb      	ldrb	r3, [r7, #7]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d0a0      	beq.n	800e962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
	...

0800ea2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b095      	sub	sp, #84	@ 0x54
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea3c:	e853 3f00 	ldrex	r3, [r3]
 800ea40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea52:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea5a:	e841 2300 	strex	r3, r2, [r1]
 800ea5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1e6      	bne.n	800ea34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	3308      	adds	r3, #8
 800ea6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea6e:	6a3b      	ldr	r3, [r7, #32]
 800ea70:	e853 3f00 	ldrex	r3, [r3]
 800ea74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea76:	69fa      	ldr	r2, [r7, #28]
 800ea78:	4b1e      	ldr	r3, [pc, #120]	@ (800eaf4 <UART_EndRxTransfer+0xc8>)
 800ea7a:	4013      	ands	r3, r2
 800ea7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	3308      	adds	r3, #8
 800ea84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ea88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea8e:	e841 2300 	strex	r3, r2, [r1]
 800ea92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1e5      	bne.n	800ea66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d118      	bne.n	800ead4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	e853 3f00 	ldrex	r3, [r3]
 800eaae:	60bb      	str	r3, [r7, #8]
   return(result);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	f023 0310 	bic.w	r3, r3, #16
 800eab6:	647b      	str	r3, [r7, #68]	@ 0x44
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	461a      	mov	r2, r3
 800eabe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eac0:	61bb      	str	r3, [r7, #24]
 800eac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac4:	6979      	ldr	r1, [r7, #20]
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	e841 2300 	strex	r3, r2, [r1]
 800eacc:	613b      	str	r3, [r7, #16]
   return(result);
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e6      	bne.n	800eaa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2220      	movs	r2, #32
 800ead8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eae8:	bf00      	nop
 800eaea:	3754      	adds	r7, #84	@ 0x54
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr
 800eaf4:	effffffe 	.word	0xeffffffe

0800eaf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f7fe ff4c 	bl	800d9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb1c:	bf00      	nop
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b088      	sub	sp, #32
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	e853 3f00 	ldrex	r3, [r3]
 800eb38:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb40:	61fb      	str	r3, [r7, #28]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	61bb      	str	r3, [r7, #24]
 800eb4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4e:	6979      	ldr	r1, [r7, #20]
 800eb50:	69ba      	ldr	r2, [r7, #24]
 800eb52:	e841 2300 	strex	r3, r2, [r1]
 800eb56:	613b      	str	r3, [r7, #16]
   return(result);
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1e6      	bne.n	800eb2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2220      	movs	r2, #32
 800eb62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7fe ff17 	bl	800d9a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb72:	bf00      	nop
 800eb74:	3720      	adds	r7, #32
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b083      	sub	sp, #12
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb82:	bf00      	nop
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb96:	bf00      	nop
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b083      	sub	sp, #12
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ebaa:	bf00      	nop
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr

0800ebb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ebb6:	b480      	push	{r7}
 800ebb8:	b085      	sub	sp, #20
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d101      	bne.n	800ebcc <HAL_UARTEx_DisableFifoMode+0x16>
 800ebc8:	2302      	movs	r3, #2
 800ebca:	e027      	b.n	800ec1c <HAL_UARTEx_DisableFifoMode+0x66>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2224      	movs	r2, #36	@ 0x24
 800ebd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f022 0201 	bic.w	r2, r2, #1
 800ebf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ebfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2220      	movs	r2, #32
 800ec0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d101      	bne.n	800ec40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	e02d      	b.n	800ec9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2224      	movs	r2, #36	@ 0x24
 800ec4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f022 0201 	bic.w	r2, r2, #1
 800ec66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	430a      	orrs	r2, r1
 800ec7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 f84f 	bl	800ed20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2220      	movs	r2, #32
 800ec8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d101      	bne.n	800ecbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ecb8:	2302      	movs	r3, #2
 800ecba:	e02d      	b.n	800ed18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2224      	movs	r2, #36	@ 0x24
 800ecc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f022 0201 	bic.w	r2, r2, #1
 800ece2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f811 	bl	800ed20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2220      	movs	r2, #32
 800ed0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d108      	bne.n	800ed42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed40:	e031      	b.n	800eda6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed42:	2310      	movs	r3, #16
 800ed44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed46:	2310      	movs	r3, #16
 800ed48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	0e5b      	lsrs	r3, r3, #25
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	f003 0307 	and.w	r3, r3, #7
 800ed58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	0f5b      	lsrs	r3, r3, #29
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f003 0307 	and.w	r3, r3, #7
 800ed68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed6a:	7bbb      	ldrb	r3, [r7, #14]
 800ed6c:	7b3a      	ldrb	r2, [r7, #12]
 800ed6e:	4911      	ldr	r1, [pc, #68]	@ (800edb4 <UARTEx_SetNbDataToProcess+0x94>)
 800ed70:	5c8a      	ldrb	r2, [r1, r2]
 800ed72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ed76:	7b3a      	ldrb	r2, [r7, #12]
 800ed78:	490f      	ldr	r1, [pc, #60]	@ (800edb8 <UARTEx_SetNbDataToProcess+0x98>)
 800ed7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed88:	7bfb      	ldrb	r3, [r7, #15]
 800ed8a:	7b7a      	ldrb	r2, [r7, #13]
 800ed8c:	4909      	ldr	r1, [pc, #36]	@ (800edb4 <UARTEx_SetNbDataToProcess+0x94>)
 800ed8e:	5c8a      	ldrb	r2, [r1, r2]
 800ed90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed94:	7b7a      	ldrb	r2, [r7, #13]
 800ed96:	4908      	ldr	r1, [pc, #32]	@ (800edb8 <UARTEx_SetNbDataToProcess+0x98>)
 800ed98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800eda6:	bf00      	nop
 800eda8:	3714      	adds	r7, #20
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	0801535c 	.word	0x0801535c
 800edb8:	08015364 	.word	0x08015364

0800edbc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e03c      	b.n	800ee48 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d106      	bne.n	800ede8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7f4 f96a 	bl	80030bc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2202      	movs	r2, #2
 800edec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f022 0201 	bic.w	r2, r2, #1
 800edfe:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 f85b 	bl	800eebc <USART_SetConfig>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d101      	bne.n	800ee10 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	e01b      	b.n	800ee48 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	685a      	ldr	r2, [r3, #4]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ee1e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	689a      	ldr	r2, [r3, #8]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ee2e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f042 0201 	orr.w	r2, r2, #1
 800ee3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 fddd 	bl	800fa00 <USART_CheckIdleState>
 800ee46:	4603      	mov	r3, r0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ee60:	e018      	b.n	800ee94 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee68:	d014      	beq.n	800ee94 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee6a:	f7f4 fc5d 	bl	8003728 <HAL_GetTick>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	69ba      	ldr	r2, [r7, #24]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d302      	bcc.n	800ee80 <USART_WaitOnFlagUntilTimeout+0x30>
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d109      	bne.n	800ee94 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800ee90:	2303      	movs	r3, #3
 800ee92:	e00f      	b.n	800eeb4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	69da      	ldr	r2, [r3, #28]
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	bf0c      	ite	eq
 800eea4:	2301      	moveq	r3, #1
 800eea6:	2300      	movne	r3, #0
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	461a      	mov	r2, r3
 800eeac:	79fb      	ldrb	r3, [r7, #7]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d0d7      	beq.n	800ee62 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b08e      	sub	sp, #56	@ 0x38
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800eec4:	2300      	movs	r3, #0
 800eec6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800eeca:	2300      	movs	r3, #0
 800eecc:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	689a      	ldr	r2, [r3, #8]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	431a      	orrs	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	695b      	ldr	r3, [r3, #20]
 800eedc:	4313      	orrs	r3, r2
 800eede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	4bc9      	ldr	r3, [pc, #804]	@ (800f210 <USART_SetConfig+0x354>)
 800eeec:	4013      	ands	r3, r2
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6812      	ldr	r2, [r2, #0]
 800eef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eef4:	430b      	orrs	r3, r1
 800eef6:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800eef8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef04:	4313      	orrs	r3, r2
 800ef06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	699a      	ldr	r2, [r3, #24]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	4313      	orrs	r3, r2
 800ef12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef14:	4313      	orrs	r3, r2
 800ef16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	685a      	ldr	r2, [r3, #4]
 800ef28:	4bba      	ldr	r3, [pc, #744]	@ (800f214 <USART_SetConfig+0x358>)
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	6812      	ldr	r2, [r2, #0]
 800ef30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef32:	430b      	orrs	r3, r1
 800ef34:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef3c:	f023 010f 	bic.w	r1, r3, #15
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	430a      	orrs	r2, r1
 800ef4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4ab1      	ldr	r2, [pc, #708]	@ (800f218 <USART_SetConfig+0x35c>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d176      	bne.n	800f044 <USART_SetConfig+0x188>
 800ef56:	4bb1      	ldr	r3, [pc, #708]	@ (800f21c <USART_SetConfig+0x360>)
 800ef58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef5e:	2b28      	cmp	r3, #40	@ 0x28
 800ef60:	d86c      	bhi.n	800f03c <USART_SetConfig+0x180>
 800ef62:	a201      	add	r2, pc, #4	@ (adr r2, 800ef68 <USART_SetConfig+0xac>)
 800ef64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef68:	0800f00d 	.word	0x0800f00d
 800ef6c:	0800f03d 	.word	0x0800f03d
 800ef70:	0800f03d 	.word	0x0800f03d
 800ef74:	0800f03d 	.word	0x0800f03d
 800ef78:	0800f03d 	.word	0x0800f03d
 800ef7c:	0800f03d 	.word	0x0800f03d
 800ef80:	0800f03d 	.word	0x0800f03d
 800ef84:	0800f03d 	.word	0x0800f03d
 800ef88:	0800f015 	.word	0x0800f015
 800ef8c:	0800f03d 	.word	0x0800f03d
 800ef90:	0800f03d 	.word	0x0800f03d
 800ef94:	0800f03d 	.word	0x0800f03d
 800ef98:	0800f03d 	.word	0x0800f03d
 800ef9c:	0800f03d 	.word	0x0800f03d
 800efa0:	0800f03d 	.word	0x0800f03d
 800efa4:	0800f03d 	.word	0x0800f03d
 800efa8:	0800f01d 	.word	0x0800f01d
 800efac:	0800f03d 	.word	0x0800f03d
 800efb0:	0800f03d 	.word	0x0800f03d
 800efb4:	0800f03d 	.word	0x0800f03d
 800efb8:	0800f03d 	.word	0x0800f03d
 800efbc:	0800f03d 	.word	0x0800f03d
 800efc0:	0800f03d 	.word	0x0800f03d
 800efc4:	0800f03d 	.word	0x0800f03d
 800efc8:	0800f025 	.word	0x0800f025
 800efcc:	0800f03d 	.word	0x0800f03d
 800efd0:	0800f03d 	.word	0x0800f03d
 800efd4:	0800f03d 	.word	0x0800f03d
 800efd8:	0800f03d 	.word	0x0800f03d
 800efdc:	0800f03d 	.word	0x0800f03d
 800efe0:	0800f03d 	.word	0x0800f03d
 800efe4:	0800f03d 	.word	0x0800f03d
 800efe8:	0800f02d 	.word	0x0800f02d
 800efec:	0800f03d 	.word	0x0800f03d
 800eff0:	0800f03d 	.word	0x0800f03d
 800eff4:	0800f03d 	.word	0x0800f03d
 800eff8:	0800f03d 	.word	0x0800f03d
 800effc:	0800f03d 	.word	0x0800f03d
 800f000:	0800f03d 	.word	0x0800f03d
 800f004:	0800f03d 	.word	0x0800f03d
 800f008:	0800f035 	.word	0x0800f035
 800f00c:	2301      	movs	r3, #1
 800f00e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f012:	e18e      	b.n	800f332 <USART_SetConfig+0x476>
 800f014:	2302      	movs	r3, #2
 800f016:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f01a:	e18a      	b.n	800f332 <USART_SetConfig+0x476>
 800f01c:	2304      	movs	r3, #4
 800f01e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f022:	e186      	b.n	800f332 <USART_SetConfig+0x476>
 800f024:	2308      	movs	r3, #8
 800f026:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f02a:	e182      	b.n	800f332 <USART_SetConfig+0x476>
 800f02c:	2310      	movs	r3, #16
 800f02e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f032:	e17e      	b.n	800f332 <USART_SetConfig+0x476>
 800f034:	2320      	movs	r3, #32
 800f036:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f03a:	e17a      	b.n	800f332 <USART_SetConfig+0x476>
 800f03c:	2340      	movs	r3, #64	@ 0x40
 800f03e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f042:	e176      	b.n	800f332 <USART_SetConfig+0x476>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a75      	ldr	r2, [pc, #468]	@ (800f220 <USART_SetConfig+0x364>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d130      	bne.n	800f0b0 <USART_SetConfig+0x1f4>
 800f04e:	4b73      	ldr	r3, [pc, #460]	@ (800f21c <USART_SetConfig+0x360>)
 800f050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f052:	f003 0307 	and.w	r3, r3, #7
 800f056:	2b05      	cmp	r3, #5
 800f058:	d826      	bhi.n	800f0a8 <USART_SetConfig+0x1ec>
 800f05a:	a201      	add	r2, pc, #4	@ (adr r2, 800f060 <USART_SetConfig+0x1a4>)
 800f05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f060:	0800f079 	.word	0x0800f079
 800f064:	0800f081 	.word	0x0800f081
 800f068:	0800f089 	.word	0x0800f089
 800f06c:	0800f091 	.word	0x0800f091
 800f070:	0800f099 	.word	0x0800f099
 800f074:	0800f0a1 	.word	0x0800f0a1
 800f078:	2300      	movs	r3, #0
 800f07a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f07e:	e158      	b.n	800f332 <USART_SetConfig+0x476>
 800f080:	2302      	movs	r3, #2
 800f082:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f086:	e154      	b.n	800f332 <USART_SetConfig+0x476>
 800f088:	2304      	movs	r3, #4
 800f08a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f08e:	e150      	b.n	800f332 <USART_SetConfig+0x476>
 800f090:	2308      	movs	r3, #8
 800f092:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f096:	e14c      	b.n	800f332 <USART_SetConfig+0x476>
 800f098:	2310      	movs	r3, #16
 800f09a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f09e:	e148      	b.n	800f332 <USART_SetConfig+0x476>
 800f0a0:	2320      	movs	r3, #32
 800f0a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f0a6:	e144      	b.n	800f332 <USART_SetConfig+0x476>
 800f0a8:	2340      	movs	r3, #64	@ 0x40
 800f0aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f0ae:	e140      	b.n	800f332 <USART_SetConfig+0x476>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a5b      	ldr	r2, [pc, #364]	@ (800f224 <USART_SetConfig+0x368>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d130      	bne.n	800f11c <USART_SetConfig+0x260>
 800f0ba:	4b58      	ldr	r3, [pc, #352]	@ (800f21c <USART_SetConfig+0x360>)
 800f0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0be:	f003 0307 	and.w	r3, r3, #7
 800f0c2:	2b05      	cmp	r3, #5
 800f0c4:	d826      	bhi.n	800f114 <USART_SetConfig+0x258>
 800f0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f0cc <USART_SetConfig+0x210>)
 800f0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0cc:	0800f0e5 	.word	0x0800f0e5
 800f0d0:	0800f0ed 	.word	0x0800f0ed
 800f0d4:	0800f0f5 	.word	0x0800f0f5
 800f0d8:	0800f0fd 	.word	0x0800f0fd
 800f0dc:	0800f105 	.word	0x0800f105
 800f0e0:	0800f10d 	.word	0x0800f10d
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f0ea:	e122      	b.n	800f332 <USART_SetConfig+0x476>
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f0f2:	e11e      	b.n	800f332 <USART_SetConfig+0x476>
 800f0f4:	2304      	movs	r3, #4
 800f0f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f0fa:	e11a      	b.n	800f332 <USART_SetConfig+0x476>
 800f0fc:	2308      	movs	r3, #8
 800f0fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f102:	e116      	b.n	800f332 <USART_SetConfig+0x476>
 800f104:	2310      	movs	r3, #16
 800f106:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f10a:	e112      	b.n	800f332 <USART_SetConfig+0x476>
 800f10c:	2320      	movs	r3, #32
 800f10e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f112:	e10e      	b.n	800f332 <USART_SetConfig+0x476>
 800f114:	2340      	movs	r3, #64	@ 0x40
 800f116:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f11a:	e10a      	b.n	800f332 <USART_SetConfig+0x476>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4a41      	ldr	r2, [pc, #260]	@ (800f228 <USART_SetConfig+0x36c>)
 800f122:	4293      	cmp	r3, r2
 800f124:	f040 8086 	bne.w	800f234 <USART_SetConfig+0x378>
 800f128:	4b3c      	ldr	r3, [pc, #240]	@ (800f21c <USART_SetConfig+0x360>)
 800f12a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f12c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f130:	2b28      	cmp	r3, #40	@ 0x28
 800f132:	d87b      	bhi.n	800f22c <USART_SetConfig+0x370>
 800f134:	a201      	add	r2, pc, #4	@ (adr r2, 800f13c <USART_SetConfig+0x280>)
 800f136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f13a:	bf00      	nop
 800f13c:	0800f1e1 	.word	0x0800f1e1
 800f140:	0800f22d 	.word	0x0800f22d
 800f144:	0800f22d 	.word	0x0800f22d
 800f148:	0800f22d 	.word	0x0800f22d
 800f14c:	0800f22d 	.word	0x0800f22d
 800f150:	0800f22d 	.word	0x0800f22d
 800f154:	0800f22d 	.word	0x0800f22d
 800f158:	0800f22d 	.word	0x0800f22d
 800f15c:	0800f1e9 	.word	0x0800f1e9
 800f160:	0800f22d 	.word	0x0800f22d
 800f164:	0800f22d 	.word	0x0800f22d
 800f168:	0800f22d 	.word	0x0800f22d
 800f16c:	0800f22d 	.word	0x0800f22d
 800f170:	0800f22d 	.word	0x0800f22d
 800f174:	0800f22d 	.word	0x0800f22d
 800f178:	0800f22d 	.word	0x0800f22d
 800f17c:	0800f1f1 	.word	0x0800f1f1
 800f180:	0800f22d 	.word	0x0800f22d
 800f184:	0800f22d 	.word	0x0800f22d
 800f188:	0800f22d 	.word	0x0800f22d
 800f18c:	0800f22d 	.word	0x0800f22d
 800f190:	0800f22d 	.word	0x0800f22d
 800f194:	0800f22d 	.word	0x0800f22d
 800f198:	0800f22d 	.word	0x0800f22d
 800f19c:	0800f1f9 	.word	0x0800f1f9
 800f1a0:	0800f22d 	.word	0x0800f22d
 800f1a4:	0800f22d 	.word	0x0800f22d
 800f1a8:	0800f22d 	.word	0x0800f22d
 800f1ac:	0800f22d 	.word	0x0800f22d
 800f1b0:	0800f22d 	.word	0x0800f22d
 800f1b4:	0800f22d 	.word	0x0800f22d
 800f1b8:	0800f22d 	.word	0x0800f22d
 800f1bc:	0800f201 	.word	0x0800f201
 800f1c0:	0800f22d 	.word	0x0800f22d
 800f1c4:	0800f22d 	.word	0x0800f22d
 800f1c8:	0800f22d 	.word	0x0800f22d
 800f1cc:	0800f22d 	.word	0x0800f22d
 800f1d0:	0800f22d 	.word	0x0800f22d
 800f1d4:	0800f22d 	.word	0x0800f22d
 800f1d8:	0800f22d 	.word	0x0800f22d
 800f1dc:	0800f209 	.word	0x0800f209
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f1e6:	e0a4      	b.n	800f332 <USART_SetConfig+0x476>
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f1ee:	e0a0      	b.n	800f332 <USART_SetConfig+0x476>
 800f1f0:	2304      	movs	r3, #4
 800f1f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f1f6:	e09c      	b.n	800f332 <USART_SetConfig+0x476>
 800f1f8:	2308      	movs	r3, #8
 800f1fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f1fe:	e098      	b.n	800f332 <USART_SetConfig+0x476>
 800f200:	2310      	movs	r3, #16
 800f202:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f206:	e094      	b.n	800f332 <USART_SetConfig+0x476>
 800f208:	2320      	movs	r3, #32
 800f20a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f20e:	e090      	b.n	800f332 <USART_SetConfig+0x476>
 800f210:	cfff69f3 	.word	0xcfff69f3
 800f214:	ffffc0f6 	.word	0xffffc0f6
 800f218:	40011000 	.word	0x40011000
 800f21c:	58024400 	.word	0x58024400
 800f220:	40004400 	.word	0x40004400
 800f224:	40004800 	.word	0x40004800
 800f228:	40011400 	.word	0x40011400
 800f22c:	2340      	movs	r3, #64	@ 0x40
 800f22e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f232:	e07e      	b.n	800f332 <USART_SetConfig+0x476>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4ab5      	ldr	r2, [pc, #724]	@ (800f510 <USART_SetConfig+0x654>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d176      	bne.n	800f32c <USART_SetConfig+0x470>
 800f23e:	4bb5      	ldr	r3, [pc, #724]	@ (800f514 <USART_SetConfig+0x658>)
 800f240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f246:	2b28      	cmp	r3, #40	@ 0x28
 800f248:	d86c      	bhi.n	800f324 <USART_SetConfig+0x468>
 800f24a:	a201      	add	r2, pc, #4	@ (adr r2, 800f250 <USART_SetConfig+0x394>)
 800f24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f250:	0800f2f5 	.word	0x0800f2f5
 800f254:	0800f325 	.word	0x0800f325
 800f258:	0800f325 	.word	0x0800f325
 800f25c:	0800f325 	.word	0x0800f325
 800f260:	0800f325 	.word	0x0800f325
 800f264:	0800f325 	.word	0x0800f325
 800f268:	0800f325 	.word	0x0800f325
 800f26c:	0800f325 	.word	0x0800f325
 800f270:	0800f2fd 	.word	0x0800f2fd
 800f274:	0800f325 	.word	0x0800f325
 800f278:	0800f325 	.word	0x0800f325
 800f27c:	0800f325 	.word	0x0800f325
 800f280:	0800f325 	.word	0x0800f325
 800f284:	0800f325 	.word	0x0800f325
 800f288:	0800f325 	.word	0x0800f325
 800f28c:	0800f325 	.word	0x0800f325
 800f290:	0800f305 	.word	0x0800f305
 800f294:	0800f325 	.word	0x0800f325
 800f298:	0800f325 	.word	0x0800f325
 800f29c:	0800f325 	.word	0x0800f325
 800f2a0:	0800f325 	.word	0x0800f325
 800f2a4:	0800f325 	.word	0x0800f325
 800f2a8:	0800f325 	.word	0x0800f325
 800f2ac:	0800f325 	.word	0x0800f325
 800f2b0:	0800f30d 	.word	0x0800f30d
 800f2b4:	0800f325 	.word	0x0800f325
 800f2b8:	0800f325 	.word	0x0800f325
 800f2bc:	0800f325 	.word	0x0800f325
 800f2c0:	0800f325 	.word	0x0800f325
 800f2c4:	0800f325 	.word	0x0800f325
 800f2c8:	0800f325 	.word	0x0800f325
 800f2cc:	0800f325 	.word	0x0800f325
 800f2d0:	0800f315 	.word	0x0800f315
 800f2d4:	0800f325 	.word	0x0800f325
 800f2d8:	0800f325 	.word	0x0800f325
 800f2dc:	0800f325 	.word	0x0800f325
 800f2e0:	0800f325 	.word	0x0800f325
 800f2e4:	0800f325 	.word	0x0800f325
 800f2e8:	0800f325 	.word	0x0800f325
 800f2ec:	0800f325 	.word	0x0800f325
 800f2f0:	0800f31d 	.word	0x0800f31d
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f2fa:	e01a      	b.n	800f332 <USART_SetConfig+0x476>
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f302:	e016      	b.n	800f332 <USART_SetConfig+0x476>
 800f304:	2304      	movs	r3, #4
 800f306:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f30a:	e012      	b.n	800f332 <USART_SetConfig+0x476>
 800f30c:	2308      	movs	r3, #8
 800f30e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f312:	e00e      	b.n	800f332 <USART_SetConfig+0x476>
 800f314:	2310      	movs	r3, #16
 800f316:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f31a:	e00a      	b.n	800f332 <USART_SetConfig+0x476>
 800f31c:	2320      	movs	r3, #32
 800f31e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f322:	e006      	b.n	800f332 <USART_SetConfig+0x476>
 800f324:	2340      	movs	r3, #64	@ 0x40
 800f326:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f32a:	e002      	b.n	800f332 <USART_SetConfig+0x476>
 800f32c:	2340      	movs	r3, #64	@ 0x40
 800f32e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800f332:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f336:	2b20      	cmp	r3, #32
 800f338:	f200 832f 	bhi.w	800f99a <USART_SetConfig+0xade>
 800f33c:	a201      	add	r2, pc, #4	@ (adr r2, 800f344 <USART_SetConfig+0x488>)
 800f33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f342:	bf00      	nop
 800f344:	0800f3c9 	.word	0x0800f3c9
 800f348:	0800f47f 	.word	0x0800f47f
 800f34c:	0800f53f 	.word	0x0800f53f
 800f350:	0800f99b 	.word	0x0800f99b
 800f354:	0800f5f9 	.word	0x0800f5f9
 800f358:	0800f99b 	.word	0x0800f99b
 800f35c:	0800f99b 	.word	0x0800f99b
 800f360:	0800f99b 	.word	0x0800f99b
 800f364:	0800f6b3 	.word	0x0800f6b3
 800f368:	0800f99b 	.word	0x0800f99b
 800f36c:	0800f99b 	.word	0x0800f99b
 800f370:	0800f99b 	.word	0x0800f99b
 800f374:	0800f99b 	.word	0x0800f99b
 800f378:	0800f99b 	.word	0x0800f99b
 800f37c:	0800f99b 	.word	0x0800f99b
 800f380:	0800f99b 	.word	0x0800f99b
 800f384:	0800f82b 	.word	0x0800f82b
 800f388:	0800f99b 	.word	0x0800f99b
 800f38c:	0800f99b 	.word	0x0800f99b
 800f390:	0800f99b 	.word	0x0800f99b
 800f394:	0800f99b 	.word	0x0800f99b
 800f398:	0800f99b 	.word	0x0800f99b
 800f39c:	0800f99b 	.word	0x0800f99b
 800f3a0:	0800f99b 	.word	0x0800f99b
 800f3a4:	0800f99b 	.word	0x0800f99b
 800f3a8:	0800f99b 	.word	0x0800f99b
 800f3ac:	0800f99b 	.word	0x0800f99b
 800f3b0:	0800f99b 	.word	0x0800f99b
 800f3b4:	0800f99b 	.word	0x0800f99b
 800f3b8:	0800f99b 	.word	0x0800f99b
 800f3bc:	0800f99b 	.word	0x0800f99b
 800f3c0:	0800f99b 	.word	0x0800f99b
 800f3c4:	0800f8e9 	.word	0x0800f8e9
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800f3c8:	f7f8 fdd4 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 800f3cc:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d044      	beq.n	800f460 <USART_SetConfig+0x5a4>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d03e      	beq.n	800f45c <USART_SetConfig+0x5a0>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d038      	beq.n	800f458 <USART_SetConfig+0x59c>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ea:	2b03      	cmp	r3, #3
 800f3ec:	d032      	beq.n	800f454 <USART_SetConfig+0x598>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3f2:	2b04      	cmp	r3, #4
 800f3f4:	d02c      	beq.n	800f450 <USART_SetConfig+0x594>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3fa:	2b05      	cmp	r3, #5
 800f3fc:	d026      	beq.n	800f44c <USART_SetConfig+0x590>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f402:	2b06      	cmp	r3, #6
 800f404:	d020      	beq.n	800f448 <USART_SetConfig+0x58c>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f40a:	2b07      	cmp	r3, #7
 800f40c:	d01a      	beq.n	800f444 <USART_SetConfig+0x588>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f412:	2b08      	cmp	r3, #8
 800f414:	d014      	beq.n	800f440 <USART_SetConfig+0x584>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f41a:	2b09      	cmp	r3, #9
 800f41c:	d00e      	beq.n	800f43c <USART_SetConfig+0x580>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f422:	2b0a      	cmp	r3, #10
 800f424:	d008      	beq.n	800f438 <USART_SetConfig+0x57c>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f42a:	2b0b      	cmp	r3, #11
 800f42c:	d102      	bne.n	800f434 <USART_SetConfig+0x578>
 800f42e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f432:	e016      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f434:	2301      	movs	r3, #1
 800f436:	e014      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f438:	2380      	movs	r3, #128	@ 0x80
 800f43a:	e012      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f43c:	2340      	movs	r3, #64	@ 0x40
 800f43e:	e010      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f440:	2320      	movs	r3, #32
 800f442:	e00e      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f444:	2310      	movs	r3, #16
 800f446:	e00c      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f448:	230c      	movs	r3, #12
 800f44a:	e00a      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f44c:	230a      	movs	r3, #10
 800f44e:	e008      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f450:	2308      	movs	r3, #8
 800f452:	e006      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f454:	2306      	movs	r3, #6
 800f456:	e004      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f458:	2304      	movs	r3, #4
 800f45a:	e002      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f45c:	2302      	movs	r3, #2
 800f45e:	e000      	b.n	800f462 <USART_SetConfig+0x5a6>
 800f460:	2301      	movs	r3, #1
 800f462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f464:	fbb2 f3f3 	udiv	r3, r2, r3
 800f468:	005a      	lsls	r2, r3, #1
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	085b      	lsrs	r3, r3, #1
 800f470:	441a      	add	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	fbb2 f3f3 	udiv	r3, r2, r3
 800f47a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f47c:	e291      	b.n	800f9a2 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800f47e:	f7f8 fd8f 	bl	8007fa0 <HAL_RCC_GetPCLK2Freq>
 800f482:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d049      	beq.n	800f520 <USART_SetConfig+0x664>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f490:	2b01      	cmp	r3, #1
 800f492:	d043      	beq.n	800f51c <USART_SetConfig+0x660>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f498:	2b02      	cmp	r3, #2
 800f49a:	d03d      	beq.n	800f518 <USART_SetConfig+0x65c>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4a0:	2b03      	cmp	r3, #3
 800f4a2:	d032      	beq.n	800f50a <USART_SetConfig+0x64e>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	d02c      	beq.n	800f506 <USART_SetConfig+0x64a>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b0:	2b05      	cmp	r3, #5
 800f4b2:	d026      	beq.n	800f502 <USART_SetConfig+0x646>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b8:	2b06      	cmp	r3, #6
 800f4ba:	d020      	beq.n	800f4fe <USART_SetConfig+0x642>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4c0:	2b07      	cmp	r3, #7
 800f4c2:	d01a      	beq.n	800f4fa <USART_SetConfig+0x63e>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4c8:	2b08      	cmp	r3, #8
 800f4ca:	d014      	beq.n	800f4f6 <USART_SetConfig+0x63a>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4d0:	2b09      	cmp	r3, #9
 800f4d2:	d00e      	beq.n	800f4f2 <USART_SetConfig+0x636>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4d8:	2b0a      	cmp	r3, #10
 800f4da:	d008      	beq.n	800f4ee <USART_SetConfig+0x632>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4e0:	2b0b      	cmp	r3, #11
 800f4e2:	d102      	bne.n	800f4ea <USART_SetConfig+0x62e>
 800f4e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f4e8:	e01b      	b.n	800f522 <USART_SetConfig+0x666>
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e019      	b.n	800f522 <USART_SetConfig+0x666>
 800f4ee:	2380      	movs	r3, #128	@ 0x80
 800f4f0:	e017      	b.n	800f522 <USART_SetConfig+0x666>
 800f4f2:	2340      	movs	r3, #64	@ 0x40
 800f4f4:	e015      	b.n	800f522 <USART_SetConfig+0x666>
 800f4f6:	2320      	movs	r3, #32
 800f4f8:	e013      	b.n	800f522 <USART_SetConfig+0x666>
 800f4fa:	2310      	movs	r3, #16
 800f4fc:	e011      	b.n	800f522 <USART_SetConfig+0x666>
 800f4fe:	230c      	movs	r3, #12
 800f500:	e00f      	b.n	800f522 <USART_SetConfig+0x666>
 800f502:	230a      	movs	r3, #10
 800f504:	e00d      	b.n	800f522 <USART_SetConfig+0x666>
 800f506:	2308      	movs	r3, #8
 800f508:	e00b      	b.n	800f522 <USART_SetConfig+0x666>
 800f50a:	2306      	movs	r3, #6
 800f50c:	e009      	b.n	800f522 <USART_SetConfig+0x666>
 800f50e:	bf00      	nop
 800f510:	40011c00 	.word	0x40011c00
 800f514:	58024400 	.word	0x58024400
 800f518:	2304      	movs	r3, #4
 800f51a:	e002      	b.n	800f522 <USART_SetConfig+0x666>
 800f51c:	2302      	movs	r3, #2
 800f51e:	e000      	b.n	800f522 <USART_SetConfig+0x666>
 800f520:	2301      	movs	r3, #1
 800f522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f524:	fbb2 f3f3 	udiv	r3, r2, r3
 800f528:	005a      	lsls	r2, r3, #1
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	085b      	lsrs	r3, r3, #1
 800f530:	441a      	add	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	fbb2 f3f3 	udiv	r3, r2, r3
 800f53a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f53c:	e231      	b.n	800f9a2 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f53e:	f107 0318 	add.w	r3, r7, #24
 800f542:	4618      	mov	r0, r3
 800f544:	f7fa fbca 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800f548:	69fa      	ldr	r2, [r7, #28]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d044      	beq.n	800f5dc <USART_SetConfig+0x720>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f556:	2b01      	cmp	r3, #1
 800f558:	d03e      	beq.n	800f5d8 <USART_SetConfig+0x71c>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f55e:	2b02      	cmp	r3, #2
 800f560:	d038      	beq.n	800f5d4 <USART_SetConfig+0x718>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f566:	2b03      	cmp	r3, #3
 800f568:	d032      	beq.n	800f5d0 <USART_SetConfig+0x714>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f56e:	2b04      	cmp	r3, #4
 800f570:	d02c      	beq.n	800f5cc <USART_SetConfig+0x710>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f576:	2b05      	cmp	r3, #5
 800f578:	d026      	beq.n	800f5c8 <USART_SetConfig+0x70c>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f57e:	2b06      	cmp	r3, #6
 800f580:	d020      	beq.n	800f5c4 <USART_SetConfig+0x708>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f586:	2b07      	cmp	r3, #7
 800f588:	d01a      	beq.n	800f5c0 <USART_SetConfig+0x704>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f58e:	2b08      	cmp	r3, #8
 800f590:	d014      	beq.n	800f5bc <USART_SetConfig+0x700>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f596:	2b09      	cmp	r3, #9
 800f598:	d00e      	beq.n	800f5b8 <USART_SetConfig+0x6fc>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f59e:	2b0a      	cmp	r3, #10
 800f5a0:	d008      	beq.n	800f5b4 <USART_SetConfig+0x6f8>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a6:	2b0b      	cmp	r3, #11
 800f5a8:	d102      	bne.n	800f5b0 <USART_SetConfig+0x6f4>
 800f5aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f5ae:	e016      	b.n	800f5de <USART_SetConfig+0x722>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e014      	b.n	800f5de <USART_SetConfig+0x722>
 800f5b4:	2380      	movs	r3, #128	@ 0x80
 800f5b6:	e012      	b.n	800f5de <USART_SetConfig+0x722>
 800f5b8:	2340      	movs	r3, #64	@ 0x40
 800f5ba:	e010      	b.n	800f5de <USART_SetConfig+0x722>
 800f5bc:	2320      	movs	r3, #32
 800f5be:	e00e      	b.n	800f5de <USART_SetConfig+0x722>
 800f5c0:	2310      	movs	r3, #16
 800f5c2:	e00c      	b.n	800f5de <USART_SetConfig+0x722>
 800f5c4:	230c      	movs	r3, #12
 800f5c6:	e00a      	b.n	800f5de <USART_SetConfig+0x722>
 800f5c8:	230a      	movs	r3, #10
 800f5ca:	e008      	b.n	800f5de <USART_SetConfig+0x722>
 800f5cc:	2308      	movs	r3, #8
 800f5ce:	e006      	b.n	800f5de <USART_SetConfig+0x722>
 800f5d0:	2306      	movs	r3, #6
 800f5d2:	e004      	b.n	800f5de <USART_SetConfig+0x722>
 800f5d4:	2304      	movs	r3, #4
 800f5d6:	e002      	b.n	800f5de <USART_SetConfig+0x722>
 800f5d8:	2302      	movs	r3, #2
 800f5da:	e000      	b.n	800f5de <USART_SetConfig+0x722>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5e2:	005a      	lsls	r2, r3, #1
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	085b      	lsrs	r3, r3, #1
 800f5ea:	441a      	add	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5f4:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800f5f6:	e1d4      	b.n	800f9a2 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5f8:	f107 030c 	add.w	r3, r7, #12
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fa fcc1 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d044      	beq.n	800f696 <USART_SetConfig+0x7da>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f610:	2b01      	cmp	r3, #1
 800f612:	d03e      	beq.n	800f692 <USART_SetConfig+0x7d6>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f618:	2b02      	cmp	r3, #2
 800f61a:	d038      	beq.n	800f68e <USART_SetConfig+0x7d2>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f620:	2b03      	cmp	r3, #3
 800f622:	d032      	beq.n	800f68a <USART_SetConfig+0x7ce>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f628:	2b04      	cmp	r3, #4
 800f62a:	d02c      	beq.n	800f686 <USART_SetConfig+0x7ca>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f630:	2b05      	cmp	r3, #5
 800f632:	d026      	beq.n	800f682 <USART_SetConfig+0x7c6>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f638:	2b06      	cmp	r3, #6
 800f63a:	d020      	beq.n	800f67e <USART_SetConfig+0x7c2>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f640:	2b07      	cmp	r3, #7
 800f642:	d01a      	beq.n	800f67a <USART_SetConfig+0x7be>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f648:	2b08      	cmp	r3, #8
 800f64a:	d014      	beq.n	800f676 <USART_SetConfig+0x7ba>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f650:	2b09      	cmp	r3, #9
 800f652:	d00e      	beq.n	800f672 <USART_SetConfig+0x7b6>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f658:	2b0a      	cmp	r3, #10
 800f65a:	d008      	beq.n	800f66e <USART_SetConfig+0x7b2>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f660:	2b0b      	cmp	r3, #11
 800f662:	d102      	bne.n	800f66a <USART_SetConfig+0x7ae>
 800f664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f668:	e016      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f66a:	2301      	movs	r3, #1
 800f66c:	e014      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f66e:	2380      	movs	r3, #128	@ 0x80
 800f670:	e012      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f672:	2340      	movs	r3, #64	@ 0x40
 800f674:	e010      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f676:	2320      	movs	r3, #32
 800f678:	e00e      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f67a:	2310      	movs	r3, #16
 800f67c:	e00c      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f67e:	230c      	movs	r3, #12
 800f680:	e00a      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f682:	230a      	movs	r3, #10
 800f684:	e008      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f686:	2308      	movs	r3, #8
 800f688:	e006      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f68a:	2306      	movs	r3, #6
 800f68c:	e004      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f68e:	2304      	movs	r3, #4
 800f690:	e002      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f692:	2302      	movs	r3, #2
 800f694:	e000      	b.n	800f698 <USART_SetConfig+0x7dc>
 800f696:	2301      	movs	r3, #1
 800f698:	fbb2 f3f3 	udiv	r3, r2, r3
 800f69c:	005a      	lsls	r2, r3, #1
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	085b      	lsrs	r3, r3, #1
 800f6a4:	441a      	add	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6ae:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800f6b0:	e177      	b.n	800f9a2 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6b2:	4b8a      	ldr	r3, [pc, #552]	@ (800f8dc <USART_SetConfig+0xa20>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f003 0320 	and.w	r3, r3, #32
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d05d      	beq.n	800f77a <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800f6be:	4b87      	ldr	r3, [pc, #540]	@ (800f8dc <USART_SetConfig+0xa20>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	08db      	lsrs	r3, r3, #3
 800f6c4:	f003 0303 	and.w	r3, r3, #3
 800f6c8:	4a85      	ldr	r2, [pc, #532]	@ (800f8e0 <USART_SetConfig+0xa24>)
 800f6ca:	40da      	lsrs	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d044      	beq.n	800f75e <USART_SetConfig+0x8a2>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d03e      	beq.n	800f75a <USART_SetConfig+0x89e>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d038      	beq.n	800f756 <USART_SetConfig+0x89a>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6e8:	2b03      	cmp	r3, #3
 800f6ea:	d032      	beq.n	800f752 <USART_SetConfig+0x896>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f0:	2b04      	cmp	r3, #4
 800f6f2:	d02c      	beq.n	800f74e <USART_SetConfig+0x892>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f8:	2b05      	cmp	r3, #5
 800f6fa:	d026      	beq.n	800f74a <USART_SetConfig+0x88e>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f700:	2b06      	cmp	r3, #6
 800f702:	d020      	beq.n	800f746 <USART_SetConfig+0x88a>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f708:	2b07      	cmp	r3, #7
 800f70a:	d01a      	beq.n	800f742 <USART_SetConfig+0x886>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f710:	2b08      	cmp	r3, #8
 800f712:	d014      	beq.n	800f73e <USART_SetConfig+0x882>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f718:	2b09      	cmp	r3, #9
 800f71a:	d00e      	beq.n	800f73a <USART_SetConfig+0x87e>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f720:	2b0a      	cmp	r3, #10
 800f722:	d008      	beq.n	800f736 <USART_SetConfig+0x87a>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f728:	2b0b      	cmp	r3, #11
 800f72a:	d102      	bne.n	800f732 <USART_SetConfig+0x876>
 800f72c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f730:	e016      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f732:	2301      	movs	r3, #1
 800f734:	e014      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f736:	2380      	movs	r3, #128	@ 0x80
 800f738:	e012      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f73a:	2340      	movs	r3, #64	@ 0x40
 800f73c:	e010      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f73e:	2320      	movs	r3, #32
 800f740:	e00e      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f742:	2310      	movs	r3, #16
 800f744:	e00c      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f746:	230c      	movs	r3, #12
 800f748:	e00a      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f74a:	230a      	movs	r3, #10
 800f74c:	e008      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f74e:	2308      	movs	r3, #8
 800f750:	e006      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f752:	2306      	movs	r3, #6
 800f754:	e004      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f756:	2304      	movs	r3, #4
 800f758:	e002      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f75a:	2302      	movs	r3, #2
 800f75c:	e000      	b.n	800f760 <USART_SetConfig+0x8a4>
 800f75e:	2301      	movs	r3, #1
 800f760:	fbb2 f3f3 	udiv	r3, r2, r3
 800f764:	005a      	lsls	r2, r3, #1
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	085b      	lsrs	r3, r3, #1
 800f76c:	441a      	add	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	fbb2 f3f3 	udiv	r3, r2, r3
 800f776:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800f778:	e113      	b.n	800f9a2 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d044      	beq.n	800f80c <USART_SetConfig+0x950>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f786:	2b01      	cmp	r3, #1
 800f788:	d03e      	beq.n	800f808 <USART_SetConfig+0x94c>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d038      	beq.n	800f804 <USART_SetConfig+0x948>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f796:	2b03      	cmp	r3, #3
 800f798:	d032      	beq.n	800f800 <USART_SetConfig+0x944>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f79e:	2b04      	cmp	r3, #4
 800f7a0:	d02c      	beq.n	800f7fc <USART_SetConfig+0x940>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a6:	2b05      	cmp	r3, #5
 800f7a8:	d026      	beq.n	800f7f8 <USART_SetConfig+0x93c>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7ae:	2b06      	cmp	r3, #6
 800f7b0:	d020      	beq.n	800f7f4 <USART_SetConfig+0x938>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7b6:	2b07      	cmp	r3, #7
 800f7b8:	d01a      	beq.n	800f7f0 <USART_SetConfig+0x934>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7be:	2b08      	cmp	r3, #8
 800f7c0:	d014      	beq.n	800f7ec <USART_SetConfig+0x930>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7c6:	2b09      	cmp	r3, #9
 800f7c8:	d00e      	beq.n	800f7e8 <USART_SetConfig+0x92c>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7ce:	2b0a      	cmp	r3, #10
 800f7d0:	d008      	beq.n	800f7e4 <USART_SetConfig+0x928>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7d6:	2b0b      	cmp	r3, #11
 800f7d8:	d102      	bne.n	800f7e0 <USART_SetConfig+0x924>
 800f7da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f7de:	e016      	b.n	800f80e <USART_SetConfig+0x952>
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e014      	b.n	800f80e <USART_SetConfig+0x952>
 800f7e4:	2380      	movs	r3, #128	@ 0x80
 800f7e6:	e012      	b.n	800f80e <USART_SetConfig+0x952>
 800f7e8:	2340      	movs	r3, #64	@ 0x40
 800f7ea:	e010      	b.n	800f80e <USART_SetConfig+0x952>
 800f7ec:	2320      	movs	r3, #32
 800f7ee:	e00e      	b.n	800f80e <USART_SetConfig+0x952>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	e00c      	b.n	800f80e <USART_SetConfig+0x952>
 800f7f4:	230c      	movs	r3, #12
 800f7f6:	e00a      	b.n	800f80e <USART_SetConfig+0x952>
 800f7f8:	230a      	movs	r3, #10
 800f7fa:	e008      	b.n	800f80e <USART_SetConfig+0x952>
 800f7fc:	2308      	movs	r3, #8
 800f7fe:	e006      	b.n	800f80e <USART_SetConfig+0x952>
 800f800:	2306      	movs	r3, #6
 800f802:	e004      	b.n	800f80e <USART_SetConfig+0x952>
 800f804:	2304      	movs	r3, #4
 800f806:	e002      	b.n	800f80e <USART_SetConfig+0x952>
 800f808:	2302      	movs	r3, #2
 800f80a:	e000      	b.n	800f80e <USART_SetConfig+0x952>
 800f80c:	2301      	movs	r3, #1
 800f80e:	4a34      	ldr	r2, [pc, #208]	@ (800f8e0 <USART_SetConfig+0xa24>)
 800f810:	fbb2 f3f3 	udiv	r3, r2, r3
 800f814:	005a      	lsls	r2, r3, #1
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	085b      	lsrs	r3, r3, #1
 800f81c:	441a      	add	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	fbb2 f3f3 	udiv	r3, r2, r3
 800f826:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f828:	e0bb      	b.n	800f9a2 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d044      	beq.n	800f8bc <USART_SetConfig+0xa00>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f836:	2b01      	cmp	r3, #1
 800f838:	d03e      	beq.n	800f8b8 <USART_SetConfig+0x9fc>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d038      	beq.n	800f8b4 <USART_SetConfig+0x9f8>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f846:	2b03      	cmp	r3, #3
 800f848:	d032      	beq.n	800f8b0 <USART_SetConfig+0x9f4>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f84e:	2b04      	cmp	r3, #4
 800f850:	d02c      	beq.n	800f8ac <USART_SetConfig+0x9f0>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f856:	2b05      	cmp	r3, #5
 800f858:	d026      	beq.n	800f8a8 <USART_SetConfig+0x9ec>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f85e:	2b06      	cmp	r3, #6
 800f860:	d020      	beq.n	800f8a4 <USART_SetConfig+0x9e8>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f866:	2b07      	cmp	r3, #7
 800f868:	d01a      	beq.n	800f8a0 <USART_SetConfig+0x9e4>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f86e:	2b08      	cmp	r3, #8
 800f870:	d014      	beq.n	800f89c <USART_SetConfig+0x9e0>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f876:	2b09      	cmp	r3, #9
 800f878:	d00e      	beq.n	800f898 <USART_SetConfig+0x9dc>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f87e:	2b0a      	cmp	r3, #10
 800f880:	d008      	beq.n	800f894 <USART_SetConfig+0x9d8>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f886:	2b0b      	cmp	r3, #11
 800f888:	d102      	bne.n	800f890 <USART_SetConfig+0x9d4>
 800f88a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f88e:	e016      	b.n	800f8be <USART_SetConfig+0xa02>
 800f890:	2301      	movs	r3, #1
 800f892:	e014      	b.n	800f8be <USART_SetConfig+0xa02>
 800f894:	2380      	movs	r3, #128	@ 0x80
 800f896:	e012      	b.n	800f8be <USART_SetConfig+0xa02>
 800f898:	2340      	movs	r3, #64	@ 0x40
 800f89a:	e010      	b.n	800f8be <USART_SetConfig+0xa02>
 800f89c:	2320      	movs	r3, #32
 800f89e:	e00e      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8a0:	2310      	movs	r3, #16
 800f8a2:	e00c      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8a4:	230c      	movs	r3, #12
 800f8a6:	e00a      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8a8:	230a      	movs	r3, #10
 800f8aa:	e008      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8ac:	2308      	movs	r3, #8
 800f8ae:	e006      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8b0:	2306      	movs	r3, #6
 800f8b2:	e004      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8b4:	2304      	movs	r3, #4
 800f8b6:	e002      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	e000      	b.n	800f8be <USART_SetConfig+0xa02>
 800f8bc:	2301      	movs	r3, #1
 800f8be:	4a09      	ldr	r2, [pc, #36]	@ (800f8e4 <USART_SetConfig+0xa28>)
 800f8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8c4:	005a      	lsls	r2, r3, #1
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	085b      	lsrs	r3, r3, #1
 800f8cc:	441a      	add	r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f8d8:	e063      	b.n	800f9a2 <USART_SetConfig+0xae6>
 800f8da:	bf00      	nop
 800f8dc:	58024400 	.word	0x58024400
 800f8e0:	03d09000 	.word	0x03d09000
 800f8e4:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d044      	beq.n	800f97a <USART_SetConfig+0xabe>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d03e      	beq.n	800f976 <USART_SetConfig+0xaba>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8fc:	2b02      	cmp	r3, #2
 800f8fe:	d038      	beq.n	800f972 <USART_SetConfig+0xab6>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f904:	2b03      	cmp	r3, #3
 800f906:	d032      	beq.n	800f96e <USART_SetConfig+0xab2>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	d02c      	beq.n	800f96a <USART_SetConfig+0xaae>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f914:	2b05      	cmp	r3, #5
 800f916:	d026      	beq.n	800f966 <USART_SetConfig+0xaaa>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f91c:	2b06      	cmp	r3, #6
 800f91e:	d020      	beq.n	800f962 <USART_SetConfig+0xaa6>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f924:	2b07      	cmp	r3, #7
 800f926:	d01a      	beq.n	800f95e <USART_SetConfig+0xaa2>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f92c:	2b08      	cmp	r3, #8
 800f92e:	d014      	beq.n	800f95a <USART_SetConfig+0xa9e>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f934:	2b09      	cmp	r3, #9
 800f936:	d00e      	beq.n	800f956 <USART_SetConfig+0xa9a>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f93c:	2b0a      	cmp	r3, #10
 800f93e:	d008      	beq.n	800f952 <USART_SetConfig+0xa96>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f944:	2b0b      	cmp	r3, #11
 800f946:	d102      	bne.n	800f94e <USART_SetConfig+0xa92>
 800f948:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f94c:	e016      	b.n	800f97c <USART_SetConfig+0xac0>
 800f94e:	2301      	movs	r3, #1
 800f950:	e014      	b.n	800f97c <USART_SetConfig+0xac0>
 800f952:	2380      	movs	r3, #128	@ 0x80
 800f954:	e012      	b.n	800f97c <USART_SetConfig+0xac0>
 800f956:	2340      	movs	r3, #64	@ 0x40
 800f958:	e010      	b.n	800f97c <USART_SetConfig+0xac0>
 800f95a:	2320      	movs	r3, #32
 800f95c:	e00e      	b.n	800f97c <USART_SetConfig+0xac0>
 800f95e:	2310      	movs	r3, #16
 800f960:	e00c      	b.n	800f97c <USART_SetConfig+0xac0>
 800f962:	230c      	movs	r3, #12
 800f964:	e00a      	b.n	800f97c <USART_SetConfig+0xac0>
 800f966:	230a      	movs	r3, #10
 800f968:	e008      	b.n	800f97c <USART_SetConfig+0xac0>
 800f96a:	2308      	movs	r3, #8
 800f96c:	e006      	b.n	800f97c <USART_SetConfig+0xac0>
 800f96e:	2306      	movs	r3, #6
 800f970:	e004      	b.n	800f97c <USART_SetConfig+0xac0>
 800f972:	2304      	movs	r3, #4
 800f974:	e002      	b.n	800f97c <USART_SetConfig+0xac0>
 800f976:	2302      	movs	r3, #2
 800f978:	e000      	b.n	800f97c <USART_SetConfig+0xac0>
 800f97a:	2301      	movs	r3, #1
 800f97c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800f980:	fbb2 f3f3 	udiv	r3, r2, r3
 800f984:	005a      	lsls	r2, r3, #1
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	085b      	lsrs	r3, r3, #1
 800f98c:	441a      	add	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	fbb2 f3f3 	udiv	r3, r2, r3
 800f996:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f998:	e003      	b.n	800f9a2 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800f99a:	2301      	movs	r3, #1
 800f99c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800f9a0:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a4:	2b0f      	cmp	r3, #15
 800f9a6:	d916      	bls.n	800f9d6 <USART_SetConfig+0xb1a>
 800f9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9ae:	d212      	bcs.n	800f9d6 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	f023 030f 	bic.w	r3, r3, #15
 800f9b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9bc:	085b      	lsrs	r3, r3, #1
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	f003 0307 	and.w	r3, r3, #7
 800f9c4:	b29a      	uxth	r2, r3
 800f9c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f9d2:	60da      	str	r2, [r3, #12]
 800f9d4:	e002      	b.n	800f9dc <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800f9f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3738      	adds	r7, #56	@ 0x38
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af02      	add	r7, sp, #8
 800fa06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa0e:	f7f3 fe8b 	bl	8003728 <HAL_GetTick>
 800fa12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f003 0308 	and.w	r3, r3, #8
 800fa1e:	2b08      	cmp	r3, #8
 800fa20:	d10e      	bne.n	800fa40 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800fa22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f7ff fa0d 	bl	800ee50 <USART_WaitOnFlagUntilTimeout>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	e01e      	b.n	800fa7e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f003 0304 	and.w	r3, r3, #4
 800fa4a:	2b04      	cmp	r3, #4
 800fa4c:	d10e      	bne.n	800fa6c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800fa4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa52:	9300      	str	r3, [sp, #0]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7ff f9f7 	bl	800ee50 <USART_WaitOnFlagUntilTimeout>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa68:	2303      	movs	r3, #3
 800fa6a:	e008      	b.n	800fa7e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3710      	adds	r7, #16
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800fa86:	b480      	push	{r7}
 800fa88:	b085      	sub	sp, #20
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d101      	bne.n	800fa9c <HAL_USARTEx_EnableSlaveMode+0x16>
 800fa98:	2302      	movs	r3, #2
 800fa9a:	e043      	b.n	800fb24 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2202      	movs	r2, #2
 800faa8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f022 0201 	bic.w	r2, r2, #1
 800fac2:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	685a      	ldr	r2, [r3, #4]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	689a      	ldr	r2, [r3, #8]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fae2:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	685a      	ldr	r2, [r3, #4]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f042 0201 	orr.w	r2, r2, #1
 800faf2:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2201      	movs	r2, #1
 800fb06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f042 0201 	orr.w	r2, r2, #1
 800fb18:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b085      	sub	sp, #20
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d101      	bne.n	800fb48 <HAL_USARTEx_ConfigNSS+0x18>
 800fb44:	2302      	movs	r3, #2
 800fb46:	e02a      	b.n	800fb9e <HAL_USARTEx_ConfigNSS+0x6e>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2202      	movs	r2, #2
 800fb54:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f022 0201 	bic.w	r2, r2, #1
 800fb6e:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	f023 0108 	bic.w	r1, r3, #8
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	430a      	orrs	r2, r1
 800fb82:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2201      	movs	r2, #1
 800fb90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3714      	adds	r7, #20
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr

0800fbaa <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800fbaa:	b480      	push	{r7}
 800fbac:	b085      	sub	sp, #20
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d101      	bne.n	800fbc0 <HAL_USARTEx_DisableFifoMode+0x16>
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	e027      	b.n	800fc10 <HAL_USARTEx_DisableFifoMode+0x66>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2202      	movs	r2, #2
 800fbcc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f022 0201 	bic.w	r2, r2, #1
 800fbe6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fbee:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2201      	movs	r2, #1
 800fc02:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3714      	adds	r7, #20
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d101      	bne.n	800fc34 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800fc30:	2302      	movs	r3, #2
 800fc32:	e02d      	b.n	800fc90 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2201      	movs	r2, #1
 800fc38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2202      	movs	r2, #2
 800fc40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f022 0201 	bic.w	r2, r2, #1
 800fc5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	430a      	orrs	r2, r1
 800fc6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 f84f 	bl	800fd14 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d101      	bne.n	800fcb0 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800fcac:	2302      	movs	r3, #2
 800fcae:	e02d      	b.n	800fd0c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2202      	movs	r2, #2
 800fcbc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f022 0201 	bic.w	r2, r2, #1
 800fcd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	683a      	ldr	r2, [r7, #0]
 800fce8:	430a      	orrs	r2, r1
 800fcea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 f811 	bl	800fd14 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fd0a:	2300      	movs	r3, #0
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d106      	bne.n	800fd32 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2201      	movs	r2, #1
 800fd28:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd30:	e02f      	b.n	800fd92 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd32:	2310      	movs	r3, #16
 800fd34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd36:	2310      	movs	r3, #16
 800fd38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800fd40:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	f003 0307 	and.w	r3, r3, #7
 800fd48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800fd50:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	f003 0307 	and.w	r3, r3, #7
 800fd58:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd5a:	7bbb      	ldrb	r3, [r7, #14]
 800fd5c:	7b3a      	ldrb	r2, [r7, #12]
 800fd5e:	4910      	ldr	r1, [pc, #64]	@ (800fda0 <USARTEx_SetNbDataToProcess+0x8c>)
 800fd60:	5c8a      	ldrb	r2, [r1, r2]
 800fd62:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800fd66:	7b3a      	ldrb	r2, [r7, #12]
 800fd68:	490e      	ldr	r1, [pc, #56]	@ (800fda4 <USARTEx_SetNbDataToProcess+0x90>)
 800fd6a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd76:	7bfb      	ldrb	r3, [r7, #15]
 800fd78:	7b7a      	ldrb	r2, [r7, #13]
 800fd7a:	4909      	ldr	r1, [pc, #36]	@ (800fda0 <USARTEx_SetNbDataToProcess+0x8c>)
 800fd7c:	5c8a      	ldrb	r2, [r1, r2]
 800fd7e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800fd82:	7b7a      	ldrb	r2, [r7, #13]
 800fd84:	4907      	ldr	r1, [pc, #28]	@ (800fda4 <USARTEx_SetNbDataToProcess+0x90>)
 800fd86:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd88:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800fd92:	bf00      	nop
 800fd94:	3714      	adds	r7, #20
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	0801536c 	.word	0x0801536c
 800fda4:	08015374 	.word	0x08015374

0800fda8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fda8:	b084      	sub	sp, #16
 800fdaa:	b480      	push	{r7}
 800fdac:	b085      	sub	sp, #20
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
 800fdb2:	f107 001c 	add.w	r0, r7, #28
 800fdb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fdbe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fdc0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fdc2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fdc6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fdc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fdca:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fdce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	685a      	ldr	r2, [r3, #4]
 800fdda:	4b07      	ldr	r3, [pc, #28]	@ (800fdf8 <SDMMC_Init+0x50>)
 800fddc:	4013      	ands	r3, r2
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	431a      	orrs	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fde6:	2300      	movs	r3, #0
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	b004      	add	sp, #16
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop
 800fdf8:	ffc02c00 	.word	0xffc02c00

0800fdfc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	370c      	adds	r7, #12
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr

0800fe16 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fe16:	b480      	push	{r7}
 800fe18:	b083      	sub	sp, #12
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
 800fe1e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f043 0203 	orr.w	r2, r3, #3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	370c      	adds	r7, #12
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	b083      	sub	sp, #12
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f003 0303 	and.w	r3, r3, #3
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	370c      	adds	r7, #12
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
	...

0800fe78 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b085      	sub	sp, #20
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fe82:	2300      	movs	r3, #0
 800fe84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fe96:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800fe9c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800fea2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	68da      	ldr	r2, [r3, #12]
 800feae:	4b06      	ldr	r3, [pc, #24]	@ (800fec8 <SDMMC_SendCommand+0x50>)
 800feb0:	4013      	ands	r3, r2
 800feb2:	68fa      	ldr	r2, [r7, #12]
 800feb4:	431a      	orrs	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800feba:	2300      	movs	r3, #0
}
 800febc:	4618      	mov	r0, r3
 800febe:	3714      	adds	r7, #20
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	fffee0c0 	.word	0xfffee0c0

0800fecc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	b2db      	uxtb	r3, r3
}
 800feda:	4618      	mov	r0, r3
 800fedc:	370c      	adds	r7, #12
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr

0800fee6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fee6:	b480      	push	{r7}
 800fee8:	b085      	sub	sp, #20
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	3314      	adds	r3, #20
 800fef4:	461a      	mov	r2, r3
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	4413      	add	r3, r2
 800fefa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3714      	adds	r7, #20
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff16:	2300      	movs	r3, #0
 800ff18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	685a      	ldr	r2, [r3, #4]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ff32:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ff38:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ff3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	4313      	orrs	r3, r2
 800ff44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	431a      	orrs	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ff56:	2300      	movs	r3, #0

}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3714      	adds	r7, #20
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b088      	sub	sp, #32
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ff72:	2310      	movs	r3, #16
 800ff74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff86:	f107 0308 	add.w	r3, r7, #8
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7ff ff73 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ff92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff96:	2110      	movs	r1, #16
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 fa5f 	bl	801045c <SDMMC_GetCmdResp1>
 800ff9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffa0:	69fb      	ldr	r3, [r7, #28]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3720      	adds	r7, #32
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b088      	sub	sp, #32
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
 800ffb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ffb8:	2311      	movs	r3, #17
 800ffba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7ff ff50 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ffd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffdc:	2111      	movs	r1, #17
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 fa3c 	bl	801045c <SDMMC_GetCmdResp1>
 800ffe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffe6:	69fb      	ldr	r3, [r7, #28]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3720      	adds	r7, #32
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b088      	sub	sp, #32
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fffe:	2312      	movs	r3, #18
 8010000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010008:	2300      	movs	r3, #0
 801000a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801000c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010012:	f107 0308 	add.w	r3, r7, #8
 8010016:	4619      	mov	r1, r3
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f7ff ff2d 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801001e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010022:	2112      	movs	r1, #18
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f000 fa19 	bl	801045c <SDMMC_GetCmdResp1>
 801002a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801002c:	69fb      	ldr	r3, [r7, #28]
}
 801002e:	4618      	mov	r0, r3
 8010030:	3720      	adds	r7, #32
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b088      	sub	sp, #32
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010044:	2318      	movs	r3, #24
 8010046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801004c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801004e:	2300      	movs	r3, #0
 8010050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010058:	f107 0308 	add.w	r3, r7, #8
 801005c:	4619      	mov	r1, r3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7ff ff0a 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010068:	2118      	movs	r1, #24
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f9f6 	bl	801045c <SDMMC_GetCmdResp1>
 8010070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010072:	69fb      	ldr	r3, [r7, #28]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3720      	adds	r7, #32
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b088      	sub	sp, #32
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801008a:	2319      	movs	r3, #25
 801008c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801008e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010094:	2300      	movs	r3, #0
 8010096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010098:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801009c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801009e:	f107 0308 	add.w	r3, r7, #8
 80100a2:	4619      	mov	r1, r3
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff fee7 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80100aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100ae:	2119      	movs	r1, #25
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f9d3 	bl	801045c <SDMMC_GetCmdResp1>
 80100b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100b8:	69fb      	ldr	r3, [r7, #28]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3720      	adds	r7, #32
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
	...

080100c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80100cc:	2300      	movs	r3, #0
 80100ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80100d0:	230c      	movs	r3, #12
 80100d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100da:	2300      	movs	r3, #0
 80100dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100e2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100fc:	f107 0308 	add.w	r3, r7, #8
 8010100:	4619      	mov	r1, r3
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f7ff feb8 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010108:	4a0b      	ldr	r2, [pc, #44]	@ (8010138 <SDMMC_CmdStopTransfer+0x74>)
 801010a:	210c      	movs	r1, #12
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 f9a5 	bl	801045c <SDMMC_GetCmdResp1>
 8010112:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010126:	d101      	bne.n	801012c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010128:	2300      	movs	r3, #0
 801012a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801012c:	69fb      	ldr	r3, [r7, #28]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3720      	adds	r7, #32
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	05f5e100 	.word	0x05f5e100

0801013c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b088      	sub	sp, #32
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801014a:	2307      	movs	r3, #7
 801014c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801014e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010154:	2300      	movs	r3, #0
 8010156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801015c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801015e:	f107 0308 	add.w	r3, r7, #8
 8010162:	4619      	mov	r1, r3
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff fe87 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801016a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801016e:	2107      	movs	r1, #7
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 f973 	bl	801045c <SDMMC_GetCmdResp1>
 8010176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010178:	69fb      	ldr	r3, [r7, #28]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3720      	adds	r7, #32
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010182:	b580      	push	{r7, lr}
 8010184:	b088      	sub	sp, #32
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801018a:	2300      	movs	r3, #0
 801018c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801018e:	2300      	movs	r3, #0
 8010190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010192:	2300      	movs	r3, #0
 8010194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010196:	2300      	movs	r3, #0
 8010198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801019a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801019e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101a0:	f107 0308 	add.w	r3, r7, #8
 80101a4:	4619      	mov	r1, r3
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7ff fe66 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 fb97 	bl	80108e0 <SDMMC_GetCmdError>
 80101b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101b4:	69fb      	ldr	r3, [r7, #28]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3720      	adds	r7, #32
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b088      	sub	sp, #32
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80101c6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80101ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80101cc:	2308      	movs	r3, #8
 80101ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101d6:	2300      	movs	r3, #0
 80101d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101e0:	f107 0308 	add.w	r3, r7, #8
 80101e4:	4619      	mov	r1, r3
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f7ff fe46 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 fb29 	bl	8010844 <SDMMC_GetCmdResp7>
 80101f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101f4:	69fb      	ldr	r3, [r7, #28]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3720      	adds	r7, #32
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b088      	sub	sp, #32
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
 8010206:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801020c:	2337      	movs	r3, #55	@ 0x37
 801020e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010216:	2300      	movs	r3, #0
 8010218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801021a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801021e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010220:	f107 0308 	add.w	r3, r7, #8
 8010224:	4619      	mov	r1, r3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7ff fe26 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801022c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010230:	2137      	movs	r1, #55	@ 0x37
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f912 	bl	801045c <SDMMC_GetCmdResp1>
 8010238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801023a:	69fb      	ldr	r3, [r7, #28]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3720      	adds	r7, #32
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b088      	sub	sp, #32
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010252:	2329      	movs	r3, #41	@ 0x29
 8010254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801025a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801025c:	2300      	movs	r3, #0
 801025e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010266:	f107 0308 	add.w	r3, r7, #8
 801026a:	4619      	mov	r1, r3
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7ff fe03 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 fa2e 	bl	80106d4 <SDMMC_GetCmdResp3>
 8010278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801027a:	69fb      	ldr	r3, [r7, #28]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3720      	adds	r7, #32
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b088      	sub	sp, #32
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010292:	2306      	movs	r3, #6
 8010294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801029a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801029c:	2300      	movs	r3, #0
 801029e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102a6:	f107 0308 	add.w	r3, r7, #8
 80102aa:	4619      	mov	r1, r3
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff fde3 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80102b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102b6:	2106      	movs	r1, #6
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f8cf 	bl	801045c <SDMMC_GetCmdResp1>
 80102be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102c0:	69fb      	ldr	r3, [r7, #28]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3720      	adds	r7, #32
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b088      	sub	sp, #32
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80102d2:	2300      	movs	r3, #0
 80102d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80102d6:	2333      	movs	r3, #51	@ 0x33
 80102d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102e0:	2300      	movs	r3, #0
 80102e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102ea:	f107 0308 	add.w	r3, r7, #8
 80102ee:	4619      	mov	r1, r3
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f7ff fdc1 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80102f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102fa:	2133      	movs	r1, #51	@ 0x33
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 f8ad 	bl	801045c <SDMMC_GetCmdResp1>
 8010302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010304:	69fb      	ldr	r3, [r7, #28]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3720      	adds	r7, #32
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b088      	sub	sp, #32
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010316:	2300      	movs	r3, #0
 8010318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801031a:	2302      	movs	r3, #2
 801031c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801031e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010324:	2300      	movs	r3, #0
 8010326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801032c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801032e:	f107 0308 	add.w	r3, r7, #8
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff fd9f 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f980 	bl	8010640 <SDMMC_GetCmdResp2>
 8010340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010342:	69fb      	ldr	r3, [r7, #28]
}
 8010344:	4618      	mov	r0, r3
 8010346:	3720      	adds	r7, #32
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801035a:	2309      	movs	r3, #9
 801035c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801035e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010364:	2300      	movs	r3, #0
 8010366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801036c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801036e:	f107 0308 	add.w	r3, r7, #8
 8010372:	4619      	mov	r1, r3
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f7ff fd7f 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f000 f960 	bl	8010640 <SDMMC_GetCmdResp2>
 8010380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010382:	69fb      	ldr	r3, [r7, #28]
}
 8010384:	4618      	mov	r0, r3
 8010386:	3720      	adds	r7, #32
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b088      	sub	sp, #32
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010396:	2300      	movs	r3, #0
 8010398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801039a:	2303      	movs	r3, #3
 801039c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801039e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103a4:	2300      	movs	r3, #0
 80103a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103ae:	f107 0308 	add.w	r3, r7, #8
 80103b2:	4619      	mov	r1, r3
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff fd5f 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80103ba:	683a      	ldr	r2, [r7, #0]
 80103bc:	2103      	movs	r1, #3
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 f9c8 	bl	8010754 <SDMMC_GetCmdResp6>
 80103c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103c6:	69fb      	ldr	r3, [r7, #28]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3720      	adds	r7, #32
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b088      	sub	sp, #32
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80103de:	230d      	movs	r3, #13
 80103e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103e8:	2300      	movs	r3, #0
 80103ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103f2:	f107 0308 	add.w	r3, r7, #8
 80103f6:	4619      	mov	r1, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff fd3d 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80103fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010402:	210d      	movs	r1, #13
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 f829 	bl	801045c <SDMMC_GetCmdResp1>
 801040a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801040c:	69fb      	ldr	r3, [r7, #28]
}
 801040e:	4618      	mov	r0, r3
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010416:	b580      	push	{r7, lr}
 8010418:	b088      	sub	sp, #32
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801041e:	2300      	movs	r3, #0
 8010420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010422:	230d      	movs	r3, #13
 8010424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010426:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801042a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801042c:	2300      	movs	r3, #0
 801042e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010436:	f107 0308 	add.w	r3, r7, #8
 801043a:	4619      	mov	r1, r3
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7ff fd1b 	bl	800fe78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010446:	210d      	movs	r1, #13
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 f807 	bl	801045c <SDMMC_GetCmdResp1>
 801044e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010450:	69fb      	ldr	r3, [r7, #28]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3720      	adds	r7, #32
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
	...

0801045c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b088      	sub	sp, #32
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	460b      	mov	r3, r1
 8010466:	607a      	str	r2, [r7, #4]
 8010468:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801046a:	4b70      	ldr	r3, [pc, #448]	@ (801062c <SDMMC_GetCmdResp1+0x1d0>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	4a70      	ldr	r2, [pc, #448]	@ (8010630 <SDMMC_GetCmdResp1+0x1d4>)
 8010470:	fba2 2303 	umull	r2, r3, r2, r3
 8010474:	0a5a      	lsrs	r2, r3, #9
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	fb02 f303 	mul.w	r3, r2, r3
 801047c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	1e5a      	subs	r2, r3, #1
 8010482:	61fa      	str	r2, [r7, #28]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d102      	bne.n	801048e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010488:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801048c:	e0c9      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010492:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010494:	69ba      	ldr	r2, [r7, #24]
 8010496:	4b67      	ldr	r3, [pc, #412]	@ (8010634 <SDMMC_GetCmdResp1+0x1d8>)
 8010498:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801049a:	2b00      	cmp	r3, #0
 801049c:	d0ef      	beq.n	801047e <SDMMC_GetCmdResp1+0x22>
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d1ea      	bne.n	801047e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104ac:	f003 0304 	and.w	r3, r3, #4
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d004      	beq.n	80104be <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2204      	movs	r2, #4
 80104b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80104ba:	2304      	movs	r3, #4
 80104bc:	e0b1      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104c2:	f003 0301 	and.w	r3, r3, #1
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d004      	beq.n	80104d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2201      	movs	r2, #1
 80104ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80104d0:	2301      	movs	r3, #1
 80104d2:	e0a6      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	4a58      	ldr	r2, [pc, #352]	@ (8010638 <SDMMC_GetCmdResp1+0x1dc>)
 80104d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	f7ff fcf6 	bl	800fecc <SDMMC_GetCommandResponse>
 80104e0:	4603      	mov	r3, r0
 80104e2:	461a      	mov	r2, r3
 80104e4:	7afb      	ldrb	r3, [r7, #11]
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d001      	beq.n	80104ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80104ea:	2301      	movs	r3, #1
 80104ec:	e099      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80104ee:	2100      	movs	r1, #0
 80104f0:	68f8      	ldr	r0, [r7, #12]
 80104f2:	f7ff fcf8 	bl	800fee6 <SDMMC_GetResponse>
 80104f6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80104f8:	697a      	ldr	r2, [r7, #20]
 80104fa:	4b50      	ldr	r3, [pc, #320]	@ (801063c <SDMMC_GetCmdResp1+0x1e0>)
 80104fc:	4013      	ands	r3, r2
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010502:	2300      	movs	r3, #0
 8010504:	e08d      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	2b00      	cmp	r3, #0
 801050a:	da02      	bge.n	8010512 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801050c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010510:	e087      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010518:	2b00      	cmp	r3, #0
 801051a:	d001      	beq.n	8010520 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801051c:	2340      	movs	r3, #64	@ 0x40
 801051e:	e080      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801052a:	2380      	movs	r3, #128	@ 0x80
 801052c:	e079      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010534:	2b00      	cmp	r3, #0
 8010536:	d002      	beq.n	801053e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801053c:	e071      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801054c:	e069      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801055c:	e061      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010568:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801056c:	e059      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010574:	2b00      	cmp	r3, #0
 8010576:	d002      	beq.n	801057e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010578:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801057c:	e051      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010588:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801058c:	e049      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010598:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801059c:	e041      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d002      	beq.n	80105ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80105a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105ac:	e039      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d002      	beq.n	80105be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80105b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80105bc:	e031      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d002      	beq.n	80105ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80105c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80105cc:	e029      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d002      	beq.n	80105de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80105d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80105dc:	e021      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d002      	beq.n	80105ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80105e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80105ec:	e019      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80105f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80105fc:	e011      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010604:	2b00      	cmp	r3, #0
 8010606:	d002      	beq.n	801060e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010608:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801060c:	e009      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	f003 0308 	and.w	r3, r3, #8
 8010614:	2b00      	cmp	r3, #0
 8010616:	d002      	beq.n	801061e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010618:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801061c:	e001      	b.n	8010622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801061e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010622:	4618      	mov	r0, r3
 8010624:	3720      	adds	r7, #32
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	24000000 	.word	0x24000000
 8010630:	10624dd3 	.word	0x10624dd3
 8010634:	00200045 	.word	0x00200045
 8010638:	002000c5 	.word	0x002000c5
 801063c:	fdffe008 	.word	0xfdffe008

08010640 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010648:	4b1f      	ldr	r3, [pc, #124]	@ (80106c8 <SDMMC_GetCmdResp2+0x88>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a1f      	ldr	r2, [pc, #124]	@ (80106cc <SDMMC_GetCmdResp2+0x8c>)
 801064e:	fba2 2303 	umull	r2, r3, r2, r3
 8010652:	0a5b      	lsrs	r3, r3, #9
 8010654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010658:	fb02 f303 	mul.w	r3, r2, r3
 801065c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	1e5a      	subs	r2, r3, #1
 8010662:	60fa      	str	r2, [r7, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010668:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801066c:	e026      	b.n	80106bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010672:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801067a:	2b00      	cmp	r3, #0
 801067c:	d0ef      	beq.n	801065e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010684:	2b00      	cmp	r3, #0
 8010686:	d1ea      	bne.n	801065e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801068c:	f003 0304 	and.w	r3, r3, #4
 8010690:	2b00      	cmp	r3, #0
 8010692:	d004      	beq.n	801069e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2204      	movs	r2, #4
 8010698:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801069a:	2304      	movs	r3, #4
 801069c:	e00e      	b.n	80106bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106a2:	f003 0301 	and.w	r3, r3, #1
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d004      	beq.n	80106b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2201      	movs	r2, #1
 80106ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106b0:	2301      	movs	r3, #1
 80106b2:	e003      	b.n	80106bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4a06      	ldr	r2, [pc, #24]	@ (80106d0 <SDMMC_GetCmdResp2+0x90>)
 80106b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80106ba:	2300      	movs	r3, #0
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3714      	adds	r7, #20
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr
 80106c8:	24000000 	.word	0x24000000
 80106cc:	10624dd3 	.word	0x10624dd3
 80106d0:	002000c5 	.word	0x002000c5

080106d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b085      	sub	sp, #20
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80106dc:	4b1a      	ldr	r3, [pc, #104]	@ (8010748 <SDMMC_GetCmdResp3+0x74>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a1a      	ldr	r2, [pc, #104]	@ (801074c <SDMMC_GetCmdResp3+0x78>)
 80106e2:	fba2 2303 	umull	r2, r3, r2, r3
 80106e6:	0a5b      	lsrs	r3, r3, #9
 80106e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80106ec:	fb02 f303 	mul.w	r3, r2, r3
 80106f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	1e5a      	subs	r2, r3, #1
 80106f6:	60fa      	str	r2, [r7, #12]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d102      	bne.n	8010702 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010700:	e01b      	b.n	801073a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010706:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801070e:	2b00      	cmp	r3, #0
 8010710:	d0ef      	beq.n	80106f2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1ea      	bne.n	80106f2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010720:	f003 0304 	and.w	r3, r3, #4
 8010724:	2b00      	cmp	r3, #0
 8010726:	d004      	beq.n	8010732 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2204      	movs	r2, #4
 801072c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801072e:	2304      	movs	r3, #4
 8010730:	e003      	b.n	801073a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	4a06      	ldr	r2, [pc, #24]	@ (8010750 <SDMMC_GetCmdResp3+0x7c>)
 8010736:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	3714      	adds	r7, #20
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	24000000 	.word	0x24000000
 801074c:	10624dd3 	.word	0x10624dd3
 8010750:	002000c5 	.word	0x002000c5

08010754 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b088      	sub	sp, #32
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	460b      	mov	r3, r1
 801075e:	607a      	str	r2, [r7, #4]
 8010760:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010762:	4b35      	ldr	r3, [pc, #212]	@ (8010838 <SDMMC_GetCmdResp6+0xe4>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a35      	ldr	r2, [pc, #212]	@ (801083c <SDMMC_GetCmdResp6+0xe8>)
 8010768:	fba2 2303 	umull	r2, r3, r2, r3
 801076c:	0a5b      	lsrs	r3, r3, #9
 801076e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010772:	fb02 f303 	mul.w	r3, r2, r3
 8010776:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	1e5a      	subs	r2, r3, #1
 801077c:	61fa      	str	r2, [r7, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d102      	bne.n	8010788 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010782:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010786:	e052      	b.n	801082e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801078c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010794:	2b00      	cmp	r3, #0
 8010796:	d0ef      	beq.n	8010778 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1ea      	bne.n	8010778 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107a6:	f003 0304 	and.w	r3, r3, #4
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d004      	beq.n	80107b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2204      	movs	r2, #4
 80107b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107b4:	2304      	movs	r3, #4
 80107b6:	e03a      	b.n	801082e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107bc:	f003 0301 	and.w	r3, r3, #1
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d004      	beq.n	80107ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2201      	movs	r2, #1
 80107c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107ca:	2301      	movs	r3, #1
 80107cc:	e02f      	b.n	801082e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f7ff fb7c 	bl	800fecc <SDMMC_GetCommandResponse>
 80107d4:	4603      	mov	r3, r0
 80107d6:	461a      	mov	r2, r3
 80107d8:	7afb      	ldrb	r3, [r7, #11]
 80107da:	4293      	cmp	r3, r2
 80107dc:	d001      	beq.n	80107e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107de:	2301      	movs	r3, #1
 80107e0:	e025      	b.n	801082e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	4a16      	ldr	r2, [pc, #88]	@ (8010840 <SDMMC_GetCmdResp6+0xec>)
 80107e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80107e8:	2100      	movs	r1, #0
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f7ff fb7b 	bl	800fee6 <SDMMC_GetResponse>
 80107f0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d106      	bne.n	801080a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	0c1b      	lsrs	r3, r3, #16
 8010800:	b29a      	uxth	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010806:	2300      	movs	r3, #0
 8010808:	e011      	b.n	801082e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010810:	2b00      	cmp	r3, #0
 8010812:	d002      	beq.n	801081a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010818:	e009      	b.n	801082e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010820:	2b00      	cmp	r3, #0
 8010822:	d002      	beq.n	801082a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010828:	e001      	b.n	801082e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801082a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801082e:	4618      	mov	r0, r3
 8010830:	3720      	adds	r7, #32
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	24000000 	.word	0x24000000
 801083c:	10624dd3 	.word	0x10624dd3
 8010840:	002000c5 	.word	0x002000c5

08010844 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010844:	b480      	push	{r7}
 8010846:	b085      	sub	sp, #20
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801084c:	4b22      	ldr	r3, [pc, #136]	@ (80108d8 <SDMMC_GetCmdResp7+0x94>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4a22      	ldr	r2, [pc, #136]	@ (80108dc <SDMMC_GetCmdResp7+0x98>)
 8010852:	fba2 2303 	umull	r2, r3, r2, r3
 8010856:	0a5b      	lsrs	r3, r3, #9
 8010858:	f241 3288 	movw	r2, #5000	@ 0x1388
 801085c:	fb02 f303 	mul.w	r3, r2, r3
 8010860:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	1e5a      	subs	r2, r3, #1
 8010866:	60fa      	str	r2, [r7, #12]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d102      	bne.n	8010872 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801086c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010870:	e02c      	b.n	80108cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010876:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801087e:	2b00      	cmp	r3, #0
 8010880:	d0ef      	beq.n	8010862 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1ea      	bne.n	8010862 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010890:	f003 0304 	and.w	r3, r3, #4
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2204      	movs	r2, #4
 801089c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801089e:	2304      	movs	r3, #4
 80108a0:	e014      	b.n	80108cc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108a6:	f003 0301 	and.w	r3, r3, #1
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d004      	beq.n	80108b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2201      	movs	r2, #1
 80108b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108b4:	2301      	movs	r3, #1
 80108b6:	e009      	b.n	80108cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2240      	movs	r2, #64	@ 0x40
 80108c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80108ca:	2300      	movs	r3, #0

}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3714      	adds	r7, #20
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	24000000 	.word	0x24000000
 80108dc:	10624dd3 	.word	0x10624dd3

080108e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80108e8:	4b11      	ldr	r3, [pc, #68]	@ (8010930 <SDMMC_GetCmdError+0x50>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a11      	ldr	r2, [pc, #68]	@ (8010934 <SDMMC_GetCmdError+0x54>)
 80108ee:	fba2 2303 	umull	r2, r3, r2, r3
 80108f2:	0a5b      	lsrs	r3, r3, #9
 80108f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108f8:	fb02 f303 	mul.w	r3, r2, r3
 80108fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	1e5a      	subs	r2, r3, #1
 8010902:	60fa      	str	r2, [r7, #12]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d102      	bne.n	801090e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010908:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801090c:	e009      	b.n	8010922 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010916:	2b00      	cmp	r3, #0
 8010918:	d0f1      	beq.n	80108fe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4a06      	ldr	r2, [pc, #24]	@ (8010938 <SDMMC_GetCmdError+0x58>)
 801091e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3714      	adds	r7, #20
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	24000000 	.word	0x24000000
 8010934:	10624dd3 	.word	0x10624dd3
 8010938:	002000c5 	.word	0x002000c5

0801093c <MX_FATFS_Init>:
 801093c:	b580      	push	{r7, lr}
 801093e:	af00      	add	r7, sp, #0
 8010940:	4904      	ldr	r1, [pc, #16]	@ (8010954 <MX_FATFS_Init+0x18>)
 8010942:	4805      	ldr	r0, [pc, #20]	@ (8010958 <MX_FATFS_Init+0x1c>)
 8010944:	f000 f9e4 	bl	8010d10 <FATFS_LinkDriver>
 8010948:	4603      	mov	r3, r0
 801094a:	461a      	mov	r2, r3
 801094c:	4b03      	ldr	r3, [pc, #12]	@ (801095c <MX_FATFS_Init+0x20>)
 801094e:	701a      	strb	r2, [r3, #0]
 8010950:	bf00      	nop
 8010952:	bd80      	pop	{r7, pc}
 8010954:	24000bcc 	.word	0x24000bcc
 8010958:	0801537c 	.word	0x0801537c
 801095c:	24000bc8 	.word	0x24000bc8

08010960 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010966:	2300      	movs	r3, #0
 8010968:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801096a:	f000 f879 	bl	8010a60 <BSP_SD_IsDetected>
 801096e:	4603      	mov	r3, r0
 8010970:	2b01      	cmp	r3, #1
 8010972:	d001      	beq.n	8010978 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010974:	2302      	movs	r3, #2
 8010976:	e012      	b.n	801099e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010978:	480b      	ldr	r0, [pc, #44]	@ (80109a8 <BSP_SD_Init+0x48>)
 801097a:	f7f9 ff0d 	bl	800a798 <HAL_SD_Init>
 801097e:	4603      	mov	r3, r0
 8010980:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010982:	79fb      	ldrb	r3, [r7, #7]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d109      	bne.n	801099c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010988:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801098c:	4806      	ldr	r0, [pc, #24]	@ (80109a8 <BSP_SD_Init+0x48>)
 801098e:	f7fa fdc9 	bl	800b524 <HAL_SD_ConfigWideBusOperation>
 8010992:	4603      	mov	r3, r0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d001      	beq.n	801099c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801099c:	79fb      	ldrb	r3, [r7, #7]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	240003d4 	.word	0x240003d4

080109ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b088      	sub	sp, #32
 80109b0:	af02      	add	r7, sp, #8
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
 80109b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80109ba:	2300      	movs	r3, #0
 80109bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	68f9      	ldr	r1, [r7, #12]
 80109c8:	4806      	ldr	r0, [pc, #24]	@ (80109e4 <BSP_SD_ReadBlocks+0x38>)
 80109ca:	f7fa f805 	bl	800a9d8 <HAL_SD_ReadBlocks>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80109d4:	2301      	movs	r3, #1
 80109d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80109d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3718      	adds	r7, #24
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	240003d4 	.word	0x240003d4

080109e8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af02      	add	r7, sp, #8
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
 80109f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80109f6:	2300      	movs	r3, #0
 80109f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	68f9      	ldr	r1, [r7, #12]
 8010a04:	4806      	ldr	r0, [pc, #24]	@ (8010a20 <BSP_SD_WriteBlocks+0x38>)
 8010a06:	f7fa f971 	bl	800acec <HAL_SD_WriteBlocks>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d001      	beq.n	8010a14 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010a10:	2301      	movs	r3, #1
 8010a12:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3718      	adds	r7, #24
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	240003d4 	.word	0x240003d4

08010a24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010a28:	4805      	ldr	r0, [pc, #20]	@ (8010a40 <BSP_SD_GetCardState+0x1c>)
 8010a2a:	f7fa fe8d 	bl	800b748 <HAL_SD_GetCardState>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b04      	cmp	r3, #4
 8010a32:	bf14      	ite	ne
 8010a34:	2301      	movne	r3, #1
 8010a36:	2300      	moveq	r3, #0
 8010a38:	b2db      	uxtb	r3, r3
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	240003d4 	.word	0x240003d4

08010a44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010a4c:	6879      	ldr	r1, [r7, #4]
 8010a4e:	4803      	ldr	r0, [pc, #12]	@ (8010a5c <BSP_SD_GetCardInfo+0x18>)
 8010a50:	f7fa fd3c 	bl	800b4cc <HAL_SD_GetCardInfo>
}
 8010a54:	bf00      	nop
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	240003d4 	.word	0x240003d4

08010a60 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010a66:	2301      	movs	r3, #1
 8010a68:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010a6a:	f000 f80b 	bl	8010a84 <BSP_PlatformIsDetected>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d101      	bne.n	8010a78 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010a74:	2300      	movs	r3, #0
 8010a76:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010a78:	79fb      	ldrb	r3, [r7, #7]
 8010a7a:	b2db      	uxtb	r3, r3
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010a8e:	2180      	movs	r1, #128	@ 0x80
 8010a90:	4806      	ldr	r0, [pc, #24]	@ (8010aac <BSP_PlatformIsDetected+0x28>)
 8010a92:	f7f5 fa8f 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d001      	beq.n	8010aa0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	58020800 	.word	0x58020800

08010ab0 <SD_CheckStatus>:
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	71fb      	strb	r3, [r7, #7]
 8010aba:	4b0b      	ldr	r3, [pc, #44]	@ (8010ae8 <SD_CheckStatus+0x38>)
 8010abc:	2201      	movs	r2, #1
 8010abe:	701a      	strb	r2, [r3, #0]
 8010ac0:	f7ff ffb0 	bl	8010a24 <BSP_SD_GetCardState>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d107      	bne.n	8010ada <SD_CheckStatus+0x2a>
 8010aca:	4b07      	ldr	r3, [pc, #28]	@ (8010ae8 <SD_CheckStatus+0x38>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	f023 0301 	bic.w	r3, r3, #1
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	4b04      	ldr	r3, [pc, #16]	@ (8010ae8 <SD_CheckStatus+0x38>)
 8010ad8:	701a      	strb	r2, [r3, #0]
 8010ada:	4b03      	ldr	r3, [pc, #12]	@ (8010ae8 <SD_CheckStatus+0x38>)
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3708      	adds	r7, #8
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	2400000d 	.word	0x2400000d

08010aec <SD_initialize>:
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	4603      	mov	r3, r0
 8010af4:	71fb      	strb	r3, [r7, #7]
 8010af6:	4b0b      	ldr	r3, [pc, #44]	@ (8010b24 <SD_initialize+0x38>)
 8010af8:	2201      	movs	r2, #1
 8010afa:	701a      	strb	r2, [r3, #0]
 8010afc:	f7ff ff30 	bl	8010960 <BSP_SD_Init>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d107      	bne.n	8010b16 <SD_initialize+0x2a>
 8010b06:	79fb      	ldrb	r3, [r7, #7]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7ff ffd1 	bl	8010ab0 <SD_CheckStatus>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	461a      	mov	r2, r3
 8010b12:	4b04      	ldr	r3, [pc, #16]	@ (8010b24 <SD_initialize+0x38>)
 8010b14:	701a      	strb	r2, [r3, #0]
 8010b16:	4b03      	ldr	r3, [pc, #12]	@ (8010b24 <SD_initialize+0x38>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	2400000d 	.word	0x2400000d

08010b28 <SD_status>:
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	4603      	mov	r3, r0
 8010b30:	71fb      	strb	r3, [r7, #7]
 8010b32:	79fb      	ldrb	r3, [r7, #7]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7ff ffbb 	bl	8010ab0 <SD_CheckStatus>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <SD_read>:
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b086      	sub	sp, #24
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60b9      	str	r1, [r7, #8]
 8010b4c:	607a      	str	r2, [r7, #4]
 8010b4e:	603b      	str	r3, [r7, #0]
 8010b50:	4603      	mov	r3, r0
 8010b52:	73fb      	strb	r3, [r7, #15]
 8010b54:	2301      	movs	r3, #1
 8010b56:	75fb      	strb	r3, [r7, #23]
 8010b58:	f04f 33ff 	mov.w	r3, #4294967295
 8010b5c:	683a      	ldr	r2, [r7, #0]
 8010b5e:	6879      	ldr	r1, [r7, #4]
 8010b60:	68b8      	ldr	r0, [r7, #8]
 8010b62:	f7ff ff23 	bl	80109ac <BSP_SD_ReadBlocks>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d107      	bne.n	8010b7c <SD_read+0x38>
 8010b6c:	bf00      	nop
 8010b6e:	f7ff ff59 	bl	8010a24 <BSP_SD_GetCardState>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1fa      	bne.n	8010b6e <SD_read+0x2a>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	75fb      	strb	r3, [r7, #23]
 8010b7c:	7dfb      	ldrb	r3, [r7, #23]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3718      	adds	r7, #24
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <SD_write>:
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b086      	sub	sp, #24
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	607a      	str	r2, [r7, #4]
 8010b90:	603b      	str	r3, [r7, #0]
 8010b92:	4603      	mov	r3, r0
 8010b94:	73fb      	strb	r3, [r7, #15]
 8010b96:	2301      	movs	r3, #1
 8010b98:	75fb      	strb	r3, [r7, #23]
 8010b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b9e:	683a      	ldr	r2, [r7, #0]
 8010ba0:	6879      	ldr	r1, [r7, #4]
 8010ba2:	68b8      	ldr	r0, [r7, #8]
 8010ba4:	f7ff ff20 	bl	80109e8 <BSP_SD_WriteBlocks>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d107      	bne.n	8010bbe <SD_write+0x38>
 8010bae:	bf00      	nop
 8010bb0:	f7ff ff38 	bl	8010a24 <BSP_SD_GetCardState>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1fa      	bne.n	8010bb0 <SD_write+0x2a>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	75fb      	strb	r3, [r7, #23]
 8010bbe:	7dfb      	ldrb	r3, [r7, #23]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3718      	adds	r7, #24
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <SD_ioctl>:
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b08c      	sub	sp, #48	@ 0x30
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	4603      	mov	r3, r0
 8010bd0:	603a      	str	r2, [r7, #0]
 8010bd2:	71fb      	strb	r3, [r7, #7]
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	71bb      	strb	r3, [r7, #6]
 8010bd8:	2301      	movs	r3, #1
 8010bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010bde:	4b25      	ldr	r3, [pc, #148]	@ (8010c74 <SD_ioctl+0xac>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	f003 0301 	and.w	r3, r3, #1
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d001      	beq.n	8010bf0 <SD_ioctl+0x28>
 8010bec:	2303      	movs	r3, #3
 8010bee:	e03c      	b.n	8010c6a <SD_ioctl+0xa2>
 8010bf0:	79bb      	ldrb	r3, [r7, #6]
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	d834      	bhi.n	8010c60 <SD_ioctl+0x98>
 8010bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8010bfc <SD_ioctl+0x34>)
 8010bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfc:	08010c0d 	.word	0x08010c0d
 8010c00:	08010c15 	.word	0x08010c15
 8010c04:	08010c2d 	.word	0x08010c2d
 8010c08:	08010c47 	.word	0x08010c47
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010c12:	e028      	b.n	8010c66 <SD_ioctl+0x9e>
 8010c14:	f107 0308 	add.w	r3, r7, #8
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff ff13 	bl	8010a44 <BSP_SD_GetCardInfo>
 8010c1e:	6a3a      	ldr	r2, [r7, #32]
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	601a      	str	r2, [r3, #0]
 8010c24:	2300      	movs	r3, #0
 8010c26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010c2a:	e01c      	b.n	8010c66 <SD_ioctl+0x9e>
 8010c2c:	f107 0308 	add.w	r3, r7, #8
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff ff07 	bl	8010a44 <BSP_SD_GetCardInfo>
 8010c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	801a      	strh	r2, [r3, #0]
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010c44:	e00f      	b.n	8010c66 <SD_ioctl+0x9e>
 8010c46:	f107 0308 	add.w	r3, r7, #8
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff fefa 	bl	8010a44 <BSP_SD_GetCardInfo>
 8010c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c52:	0a5a      	lsrs	r2, r3, #9
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	601a      	str	r2, [r3, #0]
 8010c58:	2300      	movs	r3, #0
 8010c5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010c5e:	e002      	b.n	8010c66 <SD_ioctl+0x9e>
 8010c60:	2304      	movs	r3, #4
 8010c62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010c66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3730      	adds	r7, #48	@ 0x30
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	2400000d 	.word	0x2400000d

08010c78 <FATFS_LinkDriverEx>:
 8010c78:	b480      	push	{r7}
 8010c7a:	b087      	sub	sp, #28
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	4613      	mov	r3, r2
 8010c84:	71fb      	strb	r3, [r7, #7]
 8010c86:	2301      	movs	r3, #1
 8010c88:	75fb      	strb	r3, [r7, #23]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	75bb      	strb	r3, [r7, #22]
 8010c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010c90:	7a5b      	ldrb	r3, [r3, #9]
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d131      	bne.n	8010cfc <FATFS_LinkDriverEx+0x84>
 8010c98:	4b1c      	ldr	r3, [pc, #112]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010c9a:	7a5b      	ldrb	r3, [r3, #9]
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	5499      	strb	r1, [r3, r2]
 8010ca6:	4b19      	ldr	r3, [pc, #100]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010ca8:	7a5b      	ldrb	r3, [r3, #9]
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	4a17      	ldr	r2, [pc, #92]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	4413      	add	r3, r2
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	605a      	str	r2, [r3, #4]
 8010cb6:	4b15      	ldr	r3, [pc, #84]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010cb8:	7a5b      	ldrb	r3, [r3, #9]
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	4b13      	ldr	r3, [pc, #76]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010cc0:	4413      	add	r3, r2
 8010cc2:	79fa      	ldrb	r2, [r7, #7]
 8010cc4:	721a      	strb	r2, [r3, #8]
 8010cc6:	4b11      	ldr	r3, [pc, #68]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010cc8:	7a5b      	ldrb	r3, [r3, #9]
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	1c5a      	adds	r2, r3, #1
 8010cce:	b2d1      	uxtb	r1, r2
 8010cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8010d0c <FATFS_LinkDriverEx+0x94>)
 8010cd2:	7251      	strb	r1, [r2, #9]
 8010cd4:	75bb      	strb	r3, [r7, #22]
 8010cd6:	7dbb      	ldrb	r3, [r7, #22]
 8010cd8:	3330      	adds	r3, #48	@ 0x30
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	701a      	strb	r2, [r3, #0]
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	223a      	movs	r2, #58	@ 0x3a
 8010ce6:	701a      	strb	r2, [r3, #0]
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	3302      	adds	r3, #2
 8010cec:	222f      	movs	r2, #47	@ 0x2f
 8010cee:	701a      	strb	r2, [r3, #0]
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	3303      	adds	r3, #3
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	701a      	strb	r2, [r3, #0]
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	75fb      	strb	r3, [r7, #23]
 8010cfc:	7dfb      	ldrb	r3, [r7, #23]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	371c      	adds	r7, #28
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	24000bd0 	.word	0x24000bd0

08010d10 <FATFS_LinkDriver>:
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	6839      	ldr	r1, [r7, #0]
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7ff ffaa 	bl	8010c78 <FATFS_LinkDriverEx>
 8010d24:	4603      	mov	r3, r0
 8010d26:	4618      	mov	r0, r3
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <__cvt>:
 8010d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d30:	ed2d 8b02 	vpush	{d8}
 8010d34:	eeb0 8b40 	vmov.f64	d8, d0
 8010d38:	b085      	sub	sp, #20
 8010d3a:	4617      	mov	r7, r2
 8010d3c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010d3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d40:	ee18 2a90 	vmov	r2, s17
 8010d44:	f025 0520 	bic.w	r5, r5, #32
 8010d48:	2a00      	cmp	r2, #0
 8010d4a:	bfb6      	itet	lt
 8010d4c:	222d      	movlt	r2, #45	@ 0x2d
 8010d4e:	2200      	movge	r2, #0
 8010d50:	eeb1 8b40 	vneglt.f64	d8, d0
 8010d54:	2d46      	cmp	r5, #70	@ 0x46
 8010d56:	460c      	mov	r4, r1
 8010d58:	701a      	strb	r2, [r3, #0]
 8010d5a:	d004      	beq.n	8010d66 <__cvt+0x38>
 8010d5c:	2d45      	cmp	r5, #69	@ 0x45
 8010d5e:	d100      	bne.n	8010d62 <__cvt+0x34>
 8010d60:	3401      	adds	r4, #1
 8010d62:	2102      	movs	r1, #2
 8010d64:	e000      	b.n	8010d68 <__cvt+0x3a>
 8010d66:	2103      	movs	r1, #3
 8010d68:	ab03      	add	r3, sp, #12
 8010d6a:	9301      	str	r3, [sp, #4]
 8010d6c:	ab02      	add	r3, sp, #8
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	4622      	mov	r2, r4
 8010d72:	4633      	mov	r3, r6
 8010d74:	eeb0 0b48 	vmov.f64	d0, d8
 8010d78:	f001 f906 	bl	8011f88 <_dtoa_r>
 8010d7c:	2d47      	cmp	r5, #71	@ 0x47
 8010d7e:	d114      	bne.n	8010daa <__cvt+0x7c>
 8010d80:	07fb      	lsls	r3, r7, #31
 8010d82:	d50a      	bpl.n	8010d9a <__cvt+0x6c>
 8010d84:	1902      	adds	r2, r0, r4
 8010d86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8e:	bf08      	it	eq
 8010d90:	9203      	streq	r2, [sp, #12]
 8010d92:	2130      	movs	r1, #48	@ 0x30
 8010d94:	9b03      	ldr	r3, [sp, #12]
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d319      	bcc.n	8010dce <__cvt+0xa0>
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d9e:	1a1b      	subs	r3, r3, r0
 8010da0:	6013      	str	r3, [r2, #0]
 8010da2:	b005      	add	sp, #20
 8010da4:	ecbd 8b02 	vpop	{d8}
 8010da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010daa:	2d46      	cmp	r5, #70	@ 0x46
 8010dac:	eb00 0204 	add.w	r2, r0, r4
 8010db0:	d1e9      	bne.n	8010d86 <__cvt+0x58>
 8010db2:	7803      	ldrb	r3, [r0, #0]
 8010db4:	2b30      	cmp	r3, #48	@ 0x30
 8010db6:	d107      	bne.n	8010dc8 <__cvt+0x9a>
 8010db8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc0:	bf1c      	itt	ne
 8010dc2:	f1c4 0401 	rsbne	r4, r4, #1
 8010dc6:	6034      	strne	r4, [r6, #0]
 8010dc8:	6833      	ldr	r3, [r6, #0]
 8010dca:	441a      	add	r2, r3
 8010dcc:	e7db      	b.n	8010d86 <__cvt+0x58>
 8010dce:	1c5c      	adds	r4, r3, #1
 8010dd0:	9403      	str	r4, [sp, #12]
 8010dd2:	7019      	strb	r1, [r3, #0]
 8010dd4:	e7de      	b.n	8010d94 <__cvt+0x66>

08010dd6 <__exponent>:
 8010dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dd8:	2900      	cmp	r1, #0
 8010dda:	bfba      	itte	lt
 8010ddc:	4249      	neglt	r1, r1
 8010dde:	232d      	movlt	r3, #45	@ 0x2d
 8010de0:	232b      	movge	r3, #43	@ 0x2b
 8010de2:	2909      	cmp	r1, #9
 8010de4:	7002      	strb	r2, [r0, #0]
 8010de6:	7043      	strb	r3, [r0, #1]
 8010de8:	dd29      	ble.n	8010e3e <__exponent+0x68>
 8010dea:	f10d 0307 	add.w	r3, sp, #7
 8010dee:	461d      	mov	r5, r3
 8010df0:	270a      	movs	r7, #10
 8010df2:	461a      	mov	r2, r3
 8010df4:	fbb1 f6f7 	udiv	r6, r1, r7
 8010df8:	fb07 1416 	mls	r4, r7, r6, r1
 8010dfc:	3430      	adds	r4, #48	@ 0x30
 8010dfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010e02:	460c      	mov	r4, r1
 8010e04:	2c63      	cmp	r4, #99	@ 0x63
 8010e06:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	dcf1      	bgt.n	8010df2 <__exponent+0x1c>
 8010e0e:	3130      	adds	r1, #48	@ 0x30
 8010e10:	1e94      	subs	r4, r2, #2
 8010e12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010e16:	1c41      	adds	r1, r0, #1
 8010e18:	4623      	mov	r3, r4
 8010e1a:	42ab      	cmp	r3, r5
 8010e1c:	d30a      	bcc.n	8010e34 <__exponent+0x5e>
 8010e1e:	f10d 0309 	add.w	r3, sp, #9
 8010e22:	1a9b      	subs	r3, r3, r2
 8010e24:	42ac      	cmp	r4, r5
 8010e26:	bf88      	it	hi
 8010e28:	2300      	movhi	r3, #0
 8010e2a:	3302      	adds	r3, #2
 8010e2c:	4403      	add	r3, r0
 8010e2e:	1a18      	subs	r0, r3, r0
 8010e30:	b003      	add	sp, #12
 8010e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010e38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010e3c:	e7ed      	b.n	8010e1a <__exponent+0x44>
 8010e3e:	2330      	movs	r3, #48	@ 0x30
 8010e40:	3130      	adds	r1, #48	@ 0x30
 8010e42:	7083      	strb	r3, [r0, #2]
 8010e44:	70c1      	strb	r1, [r0, #3]
 8010e46:	1d03      	adds	r3, r0, #4
 8010e48:	e7f1      	b.n	8010e2e <__exponent+0x58>
 8010e4a:	0000      	movs	r0, r0
 8010e4c:	0000      	movs	r0, r0
	...

08010e50 <_printf_float>:
 8010e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e54:	b08d      	sub	sp, #52	@ 0x34
 8010e56:	460c      	mov	r4, r1
 8010e58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010e5c:	4616      	mov	r6, r2
 8010e5e:	461f      	mov	r7, r3
 8010e60:	4605      	mov	r5, r0
 8010e62:	f000 ff7d 	bl	8011d60 <_localeconv_r>
 8010e66:	f8d0 b000 	ldr.w	fp, [r0]
 8010e6a:	4658      	mov	r0, fp
 8010e6c:	f7ef faa0 	bl	80003b0 <strlen>
 8010e70:	2300      	movs	r3, #0
 8010e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e74:	f8d8 3000 	ldr.w	r3, [r8]
 8010e78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010e7c:	6822      	ldr	r2, [r4, #0]
 8010e7e:	9005      	str	r0, [sp, #20]
 8010e80:	3307      	adds	r3, #7
 8010e82:	f023 0307 	bic.w	r3, r3, #7
 8010e86:	f103 0108 	add.w	r1, r3, #8
 8010e8a:	f8c8 1000 	str.w	r1, [r8]
 8010e8e:	ed93 0b00 	vldr	d0, [r3]
 8010e92:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80110f0 <_printf_float+0x2a0>
 8010e96:	eeb0 7bc0 	vabs.f64	d7, d0
 8010e9a:	eeb4 7b46 	vcmp.f64	d7, d6
 8010e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010ea6:	dd24      	ble.n	8010ef2 <_printf_float+0xa2>
 8010ea8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	d502      	bpl.n	8010eb8 <_printf_float+0x68>
 8010eb2:	232d      	movs	r3, #45	@ 0x2d
 8010eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010eb8:	498f      	ldr	r1, [pc, #572]	@ (80110f8 <_printf_float+0x2a8>)
 8010eba:	4b90      	ldr	r3, [pc, #576]	@ (80110fc <_printf_float+0x2ac>)
 8010ebc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010ec0:	bf94      	ite	ls
 8010ec2:	4688      	movls	r8, r1
 8010ec4:	4698      	movhi	r8, r3
 8010ec6:	f022 0204 	bic.w	r2, r2, #4
 8010eca:	2303      	movs	r3, #3
 8010ecc:	6123      	str	r3, [r4, #16]
 8010ece:	6022      	str	r2, [r4, #0]
 8010ed0:	f04f 0a00 	mov.w	sl, #0
 8010ed4:	9700      	str	r7, [sp, #0]
 8010ed6:	4633      	mov	r3, r6
 8010ed8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010eda:	4621      	mov	r1, r4
 8010edc:	4628      	mov	r0, r5
 8010ede:	f000 f9d1 	bl	8011284 <_printf_common>
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	f040 8089 	bne.w	8010ffa <_printf_float+0x1aa>
 8010ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8010eec:	b00d      	add	sp, #52	@ 0x34
 8010eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef2:	eeb4 0b40 	vcmp.f64	d0, d0
 8010ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efa:	d709      	bvc.n	8010f10 <_printf_float+0xc0>
 8010efc:	ee10 3a90 	vmov	r3, s1
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	bfbc      	itt	lt
 8010f04:	232d      	movlt	r3, #45	@ 0x2d
 8010f06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010f0a:	497d      	ldr	r1, [pc, #500]	@ (8011100 <_printf_float+0x2b0>)
 8010f0c:	4b7d      	ldr	r3, [pc, #500]	@ (8011104 <_printf_float+0x2b4>)
 8010f0e:	e7d5      	b.n	8010ebc <_printf_float+0x6c>
 8010f10:	6863      	ldr	r3, [r4, #4]
 8010f12:	1c59      	adds	r1, r3, #1
 8010f14:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010f18:	d139      	bne.n	8010f8e <_printf_float+0x13e>
 8010f1a:	2306      	movs	r3, #6
 8010f1c:	6063      	str	r3, [r4, #4]
 8010f1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010f22:	2300      	movs	r3, #0
 8010f24:	6022      	str	r2, [r4, #0]
 8010f26:	9303      	str	r3, [sp, #12]
 8010f28:	ab0a      	add	r3, sp, #40	@ 0x28
 8010f2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010f2e:	ab09      	add	r3, sp, #36	@ 0x24
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	6861      	ldr	r1, [r4, #4]
 8010f34:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010f38:	4628      	mov	r0, r5
 8010f3a:	f7ff fef8 	bl	8010d2e <__cvt>
 8010f3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010f42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f44:	4680      	mov	r8, r0
 8010f46:	d129      	bne.n	8010f9c <_printf_float+0x14c>
 8010f48:	1cc8      	adds	r0, r1, #3
 8010f4a:	db02      	blt.n	8010f52 <_printf_float+0x102>
 8010f4c:	6863      	ldr	r3, [r4, #4]
 8010f4e:	4299      	cmp	r1, r3
 8010f50:	dd41      	ble.n	8010fd6 <_printf_float+0x186>
 8010f52:	f1a9 0902 	sub.w	r9, r9, #2
 8010f56:	fa5f f989 	uxtb.w	r9, r9
 8010f5a:	3901      	subs	r1, #1
 8010f5c:	464a      	mov	r2, r9
 8010f5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010f62:	9109      	str	r1, [sp, #36]	@ 0x24
 8010f64:	f7ff ff37 	bl	8010dd6 <__exponent>
 8010f68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f6a:	1813      	adds	r3, r2, r0
 8010f6c:	2a01      	cmp	r2, #1
 8010f6e:	4682      	mov	sl, r0
 8010f70:	6123      	str	r3, [r4, #16]
 8010f72:	dc02      	bgt.n	8010f7a <_printf_float+0x12a>
 8010f74:	6822      	ldr	r2, [r4, #0]
 8010f76:	07d2      	lsls	r2, r2, #31
 8010f78:	d501      	bpl.n	8010f7e <_printf_float+0x12e>
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	6123      	str	r3, [r4, #16]
 8010f7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d0a6      	beq.n	8010ed4 <_printf_float+0x84>
 8010f86:	232d      	movs	r3, #45	@ 0x2d
 8010f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f8c:	e7a2      	b.n	8010ed4 <_printf_float+0x84>
 8010f8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010f92:	d1c4      	bne.n	8010f1e <_printf_float+0xce>
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1c2      	bne.n	8010f1e <_printf_float+0xce>
 8010f98:	2301      	movs	r3, #1
 8010f9a:	e7bf      	b.n	8010f1c <_printf_float+0xcc>
 8010f9c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010fa0:	d9db      	bls.n	8010f5a <_printf_float+0x10a>
 8010fa2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010fa6:	d118      	bne.n	8010fda <_printf_float+0x18a>
 8010fa8:	2900      	cmp	r1, #0
 8010faa:	6863      	ldr	r3, [r4, #4]
 8010fac:	dd0b      	ble.n	8010fc6 <_printf_float+0x176>
 8010fae:	6121      	str	r1, [r4, #16]
 8010fb0:	b913      	cbnz	r3, 8010fb8 <_printf_float+0x168>
 8010fb2:	6822      	ldr	r2, [r4, #0]
 8010fb4:	07d0      	lsls	r0, r2, #31
 8010fb6:	d502      	bpl.n	8010fbe <_printf_float+0x16e>
 8010fb8:	3301      	adds	r3, #1
 8010fba:	440b      	add	r3, r1
 8010fbc:	6123      	str	r3, [r4, #16]
 8010fbe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010fc0:	f04f 0a00 	mov.w	sl, #0
 8010fc4:	e7db      	b.n	8010f7e <_printf_float+0x12e>
 8010fc6:	b913      	cbnz	r3, 8010fce <_printf_float+0x17e>
 8010fc8:	6822      	ldr	r2, [r4, #0]
 8010fca:	07d2      	lsls	r2, r2, #31
 8010fcc:	d501      	bpl.n	8010fd2 <_printf_float+0x182>
 8010fce:	3302      	adds	r3, #2
 8010fd0:	e7f4      	b.n	8010fbc <_printf_float+0x16c>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e7f2      	b.n	8010fbc <_printf_float+0x16c>
 8010fd6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8010fda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fdc:	4299      	cmp	r1, r3
 8010fde:	db05      	blt.n	8010fec <_printf_float+0x19c>
 8010fe0:	6823      	ldr	r3, [r4, #0]
 8010fe2:	6121      	str	r1, [r4, #16]
 8010fe4:	07d8      	lsls	r0, r3, #31
 8010fe6:	d5ea      	bpl.n	8010fbe <_printf_float+0x16e>
 8010fe8:	1c4b      	adds	r3, r1, #1
 8010fea:	e7e7      	b.n	8010fbc <_printf_float+0x16c>
 8010fec:	2900      	cmp	r1, #0
 8010fee:	bfd4      	ite	le
 8010ff0:	f1c1 0202 	rsble	r2, r1, #2
 8010ff4:	2201      	movgt	r2, #1
 8010ff6:	4413      	add	r3, r2
 8010ff8:	e7e0      	b.n	8010fbc <_printf_float+0x16c>
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	055a      	lsls	r2, r3, #21
 8010ffe:	d407      	bmi.n	8011010 <_printf_float+0x1c0>
 8011000:	6923      	ldr	r3, [r4, #16]
 8011002:	4642      	mov	r2, r8
 8011004:	4631      	mov	r1, r6
 8011006:	4628      	mov	r0, r5
 8011008:	47b8      	blx	r7
 801100a:	3001      	adds	r0, #1
 801100c:	d12a      	bne.n	8011064 <_printf_float+0x214>
 801100e:	e76b      	b.n	8010ee8 <_printf_float+0x98>
 8011010:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011014:	f240 80e0 	bls.w	80111d8 <_printf_float+0x388>
 8011018:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801101c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011024:	d133      	bne.n	801108e <_printf_float+0x23e>
 8011026:	4a38      	ldr	r2, [pc, #224]	@ (8011108 <_printf_float+0x2b8>)
 8011028:	2301      	movs	r3, #1
 801102a:	4631      	mov	r1, r6
 801102c:	4628      	mov	r0, r5
 801102e:	47b8      	blx	r7
 8011030:	3001      	adds	r0, #1
 8011032:	f43f af59 	beq.w	8010ee8 <_printf_float+0x98>
 8011036:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801103a:	4543      	cmp	r3, r8
 801103c:	db02      	blt.n	8011044 <_printf_float+0x1f4>
 801103e:	6823      	ldr	r3, [r4, #0]
 8011040:	07d8      	lsls	r0, r3, #31
 8011042:	d50f      	bpl.n	8011064 <_printf_float+0x214>
 8011044:	9b05      	ldr	r3, [sp, #20]
 8011046:	465a      	mov	r2, fp
 8011048:	4631      	mov	r1, r6
 801104a:	4628      	mov	r0, r5
 801104c:	47b8      	blx	r7
 801104e:	3001      	adds	r0, #1
 8011050:	f43f af4a 	beq.w	8010ee8 <_printf_float+0x98>
 8011054:	f04f 0900 	mov.w	r9, #0
 8011058:	f108 38ff 	add.w	r8, r8, #4294967295
 801105c:	f104 0a1a 	add.w	sl, r4, #26
 8011060:	45c8      	cmp	r8, r9
 8011062:	dc09      	bgt.n	8011078 <_printf_float+0x228>
 8011064:	6823      	ldr	r3, [r4, #0]
 8011066:	079b      	lsls	r3, r3, #30
 8011068:	f100 8107 	bmi.w	801127a <_printf_float+0x42a>
 801106c:	68e0      	ldr	r0, [r4, #12]
 801106e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011070:	4298      	cmp	r0, r3
 8011072:	bfb8      	it	lt
 8011074:	4618      	movlt	r0, r3
 8011076:	e739      	b.n	8010eec <_printf_float+0x9c>
 8011078:	2301      	movs	r3, #1
 801107a:	4652      	mov	r2, sl
 801107c:	4631      	mov	r1, r6
 801107e:	4628      	mov	r0, r5
 8011080:	47b8      	blx	r7
 8011082:	3001      	adds	r0, #1
 8011084:	f43f af30 	beq.w	8010ee8 <_printf_float+0x98>
 8011088:	f109 0901 	add.w	r9, r9, #1
 801108c:	e7e8      	b.n	8011060 <_printf_float+0x210>
 801108e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011090:	2b00      	cmp	r3, #0
 8011092:	dc3b      	bgt.n	801110c <_printf_float+0x2bc>
 8011094:	4a1c      	ldr	r2, [pc, #112]	@ (8011108 <_printf_float+0x2b8>)
 8011096:	2301      	movs	r3, #1
 8011098:	4631      	mov	r1, r6
 801109a:	4628      	mov	r0, r5
 801109c:	47b8      	blx	r7
 801109e:	3001      	adds	r0, #1
 80110a0:	f43f af22 	beq.w	8010ee8 <_printf_float+0x98>
 80110a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80110a8:	ea59 0303 	orrs.w	r3, r9, r3
 80110ac:	d102      	bne.n	80110b4 <_printf_float+0x264>
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	07d9      	lsls	r1, r3, #31
 80110b2:	d5d7      	bpl.n	8011064 <_printf_float+0x214>
 80110b4:	9b05      	ldr	r3, [sp, #20]
 80110b6:	465a      	mov	r2, fp
 80110b8:	4631      	mov	r1, r6
 80110ba:	4628      	mov	r0, r5
 80110bc:	47b8      	blx	r7
 80110be:	3001      	adds	r0, #1
 80110c0:	f43f af12 	beq.w	8010ee8 <_printf_float+0x98>
 80110c4:	f04f 0a00 	mov.w	sl, #0
 80110c8:	f104 0b1a 	add.w	fp, r4, #26
 80110cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110ce:	425b      	negs	r3, r3
 80110d0:	4553      	cmp	r3, sl
 80110d2:	dc01      	bgt.n	80110d8 <_printf_float+0x288>
 80110d4:	464b      	mov	r3, r9
 80110d6:	e794      	b.n	8011002 <_printf_float+0x1b2>
 80110d8:	2301      	movs	r3, #1
 80110da:	465a      	mov	r2, fp
 80110dc:	4631      	mov	r1, r6
 80110de:	4628      	mov	r0, r5
 80110e0:	47b8      	blx	r7
 80110e2:	3001      	adds	r0, #1
 80110e4:	f43f af00 	beq.w	8010ee8 <_printf_float+0x98>
 80110e8:	f10a 0a01 	add.w	sl, sl, #1
 80110ec:	e7ee      	b.n	80110cc <_printf_float+0x27c>
 80110ee:	bf00      	nop
 80110f0:	ffffffff 	.word	0xffffffff
 80110f4:	7fefffff 	.word	0x7fefffff
 80110f8:	08015390 	.word	0x08015390
 80110fc:	08015394 	.word	0x08015394
 8011100:	08015398 	.word	0x08015398
 8011104:	0801539c 	.word	0x0801539c
 8011108:	080153a0 	.word	0x080153a0
 801110c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801110e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011112:	4553      	cmp	r3, sl
 8011114:	bfa8      	it	ge
 8011116:	4653      	movge	r3, sl
 8011118:	2b00      	cmp	r3, #0
 801111a:	4699      	mov	r9, r3
 801111c:	dc37      	bgt.n	801118e <_printf_float+0x33e>
 801111e:	2300      	movs	r3, #0
 8011120:	9307      	str	r3, [sp, #28]
 8011122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011126:	f104 021a 	add.w	r2, r4, #26
 801112a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801112c:	9907      	ldr	r1, [sp, #28]
 801112e:	9306      	str	r3, [sp, #24]
 8011130:	eba3 0309 	sub.w	r3, r3, r9
 8011134:	428b      	cmp	r3, r1
 8011136:	dc31      	bgt.n	801119c <_printf_float+0x34c>
 8011138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801113a:	459a      	cmp	sl, r3
 801113c:	dc3b      	bgt.n	80111b6 <_printf_float+0x366>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	07da      	lsls	r2, r3, #31
 8011142:	d438      	bmi.n	80111b6 <_printf_float+0x366>
 8011144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011146:	ebaa 0903 	sub.w	r9, sl, r3
 801114a:	9b06      	ldr	r3, [sp, #24]
 801114c:	ebaa 0303 	sub.w	r3, sl, r3
 8011150:	4599      	cmp	r9, r3
 8011152:	bfa8      	it	ge
 8011154:	4699      	movge	r9, r3
 8011156:	f1b9 0f00 	cmp.w	r9, #0
 801115a:	dc34      	bgt.n	80111c6 <_printf_float+0x376>
 801115c:	f04f 0800 	mov.w	r8, #0
 8011160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011164:	f104 0b1a 	add.w	fp, r4, #26
 8011168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801116a:	ebaa 0303 	sub.w	r3, sl, r3
 801116e:	eba3 0309 	sub.w	r3, r3, r9
 8011172:	4543      	cmp	r3, r8
 8011174:	f77f af76 	ble.w	8011064 <_printf_float+0x214>
 8011178:	2301      	movs	r3, #1
 801117a:	465a      	mov	r2, fp
 801117c:	4631      	mov	r1, r6
 801117e:	4628      	mov	r0, r5
 8011180:	47b8      	blx	r7
 8011182:	3001      	adds	r0, #1
 8011184:	f43f aeb0 	beq.w	8010ee8 <_printf_float+0x98>
 8011188:	f108 0801 	add.w	r8, r8, #1
 801118c:	e7ec      	b.n	8011168 <_printf_float+0x318>
 801118e:	4642      	mov	r2, r8
 8011190:	4631      	mov	r1, r6
 8011192:	4628      	mov	r0, r5
 8011194:	47b8      	blx	r7
 8011196:	3001      	adds	r0, #1
 8011198:	d1c1      	bne.n	801111e <_printf_float+0x2ce>
 801119a:	e6a5      	b.n	8010ee8 <_printf_float+0x98>
 801119c:	2301      	movs	r3, #1
 801119e:	4631      	mov	r1, r6
 80111a0:	4628      	mov	r0, r5
 80111a2:	9206      	str	r2, [sp, #24]
 80111a4:	47b8      	blx	r7
 80111a6:	3001      	adds	r0, #1
 80111a8:	f43f ae9e 	beq.w	8010ee8 <_printf_float+0x98>
 80111ac:	9b07      	ldr	r3, [sp, #28]
 80111ae:	9a06      	ldr	r2, [sp, #24]
 80111b0:	3301      	adds	r3, #1
 80111b2:	9307      	str	r3, [sp, #28]
 80111b4:	e7b9      	b.n	801112a <_printf_float+0x2da>
 80111b6:	9b05      	ldr	r3, [sp, #20]
 80111b8:	465a      	mov	r2, fp
 80111ba:	4631      	mov	r1, r6
 80111bc:	4628      	mov	r0, r5
 80111be:	47b8      	blx	r7
 80111c0:	3001      	adds	r0, #1
 80111c2:	d1bf      	bne.n	8011144 <_printf_float+0x2f4>
 80111c4:	e690      	b.n	8010ee8 <_printf_float+0x98>
 80111c6:	9a06      	ldr	r2, [sp, #24]
 80111c8:	464b      	mov	r3, r9
 80111ca:	4442      	add	r2, r8
 80111cc:	4631      	mov	r1, r6
 80111ce:	4628      	mov	r0, r5
 80111d0:	47b8      	blx	r7
 80111d2:	3001      	adds	r0, #1
 80111d4:	d1c2      	bne.n	801115c <_printf_float+0x30c>
 80111d6:	e687      	b.n	8010ee8 <_printf_float+0x98>
 80111d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80111dc:	f1b9 0f01 	cmp.w	r9, #1
 80111e0:	dc01      	bgt.n	80111e6 <_printf_float+0x396>
 80111e2:	07db      	lsls	r3, r3, #31
 80111e4:	d536      	bpl.n	8011254 <_printf_float+0x404>
 80111e6:	2301      	movs	r3, #1
 80111e8:	4642      	mov	r2, r8
 80111ea:	4631      	mov	r1, r6
 80111ec:	4628      	mov	r0, r5
 80111ee:	47b8      	blx	r7
 80111f0:	3001      	adds	r0, #1
 80111f2:	f43f ae79 	beq.w	8010ee8 <_printf_float+0x98>
 80111f6:	9b05      	ldr	r3, [sp, #20]
 80111f8:	465a      	mov	r2, fp
 80111fa:	4631      	mov	r1, r6
 80111fc:	4628      	mov	r0, r5
 80111fe:	47b8      	blx	r7
 8011200:	3001      	adds	r0, #1
 8011202:	f43f ae71 	beq.w	8010ee8 <_printf_float+0x98>
 8011206:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801120a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011212:	f109 39ff 	add.w	r9, r9, #4294967295
 8011216:	d018      	beq.n	801124a <_printf_float+0x3fa>
 8011218:	464b      	mov	r3, r9
 801121a:	f108 0201 	add.w	r2, r8, #1
 801121e:	4631      	mov	r1, r6
 8011220:	4628      	mov	r0, r5
 8011222:	47b8      	blx	r7
 8011224:	3001      	adds	r0, #1
 8011226:	d10c      	bne.n	8011242 <_printf_float+0x3f2>
 8011228:	e65e      	b.n	8010ee8 <_printf_float+0x98>
 801122a:	2301      	movs	r3, #1
 801122c:	465a      	mov	r2, fp
 801122e:	4631      	mov	r1, r6
 8011230:	4628      	mov	r0, r5
 8011232:	47b8      	blx	r7
 8011234:	3001      	adds	r0, #1
 8011236:	f43f ae57 	beq.w	8010ee8 <_printf_float+0x98>
 801123a:	f108 0801 	add.w	r8, r8, #1
 801123e:	45c8      	cmp	r8, r9
 8011240:	dbf3      	blt.n	801122a <_printf_float+0x3da>
 8011242:	4653      	mov	r3, sl
 8011244:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011248:	e6dc      	b.n	8011004 <_printf_float+0x1b4>
 801124a:	f04f 0800 	mov.w	r8, #0
 801124e:	f104 0b1a 	add.w	fp, r4, #26
 8011252:	e7f4      	b.n	801123e <_printf_float+0x3ee>
 8011254:	2301      	movs	r3, #1
 8011256:	4642      	mov	r2, r8
 8011258:	e7e1      	b.n	801121e <_printf_float+0x3ce>
 801125a:	2301      	movs	r3, #1
 801125c:	464a      	mov	r2, r9
 801125e:	4631      	mov	r1, r6
 8011260:	4628      	mov	r0, r5
 8011262:	47b8      	blx	r7
 8011264:	3001      	adds	r0, #1
 8011266:	f43f ae3f 	beq.w	8010ee8 <_printf_float+0x98>
 801126a:	f108 0801 	add.w	r8, r8, #1
 801126e:	68e3      	ldr	r3, [r4, #12]
 8011270:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011272:	1a5b      	subs	r3, r3, r1
 8011274:	4543      	cmp	r3, r8
 8011276:	dcf0      	bgt.n	801125a <_printf_float+0x40a>
 8011278:	e6f8      	b.n	801106c <_printf_float+0x21c>
 801127a:	f04f 0800 	mov.w	r8, #0
 801127e:	f104 0919 	add.w	r9, r4, #25
 8011282:	e7f4      	b.n	801126e <_printf_float+0x41e>

08011284 <_printf_common>:
 8011284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011288:	4616      	mov	r6, r2
 801128a:	4698      	mov	r8, r3
 801128c:	688a      	ldr	r2, [r1, #8]
 801128e:	690b      	ldr	r3, [r1, #16]
 8011290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011294:	4293      	cmp	r3, r2
 8011296:	bfb8      	it	lt
 8011298:	4613      	movlt	r3, r2
 801129a:	6033      	str	r3, [r6, #0]
 801129c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80112a0:	4607      	mov	r7, r0
 80112a2:	460c      	mov	r4, r1
 80112a4:	b10a      	cbz	r2, 80112aa <_printf_common+0x26>
 80112a6:	3301      	adds	r3, #1
 80112a8:	6033      	str	r3, [r6, #0]
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	0699      	lsls	r1, r3, #26
 80112ae:	bf42      	ittt	mi
 80112b0:	6833      	ldrmi	r3, [r6, #0]
 80112b2:	3302      	addmi	r3, #2
 80112b4:	6033      	strmi	r3, [r6, #0]
 80112b6:	6825      	ldr	r5, [r4, #0]
 80112b8:	f015 0506 	ands.w	r5, r5, #6
 80112bc:	d106      	bne.n	80112cc <_printf_common+0x48>
 80112be:	f104 0a19 	add.w	sl, r4, #25
 80112c2:	68e3      	ldr	r3, [r4, #12]
 80112c4:	6832      	ldr	r2, [r6, #0]
 80112c6:	1a9b      	subs	r3, r3, r2
 80112c8:	42ab      	cmp	r3, r5
 80112ca:	dc26      	bgt.n	801131a <_printf_common+0x96>
 80112cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80112d0:	6822      	ldr	r2, [r4, #0]
 80112d2:	3b00      	subs	r3, #0
 80112d4:	bf18      	it	ne
 80112d6:	2301      	movne	r3, #1
 80112d8:	0692      	lsls	r2, r2, #26
 80112da:	d42b      	bmi.n	8011334 <_printf_common+0xb0>
 80112dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80112e0:	4641      	mov	r1, r8
 80112e2:	4638      	mov	r0, r7
 80112e4:	47c8      	blx	r9
 80112e6:	3001      	adds	r0, #1
 80112e8:	d01e      	beq.n	8011328 <_printf_common+0xa4>
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	6922      	ldr	r2, [r4, #16]
 80112ee:	f003 0306 	and.w	r3, r3, #6
 80112f2:	2b04      	cmp	r3, #4
 80112f4:	bf02      	ittt	eq
 80112f6:	68e5      	ldreq	r5, [r4, #12]
 80112f8:	6833      	ldreq	r3, [r6, #0]
 80112fa:	1aed      	subeq	r5, r5, r3
 80112fc:	68a3      	ldr	r3, [r4, #8]
 80112fe:	bf0c      	ite	eq
 8011300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011304:	2500      	movne	r5, #0
 8011306:	4293      	cmp	r3, r2
 8011308:	bfc4      	itt	gt
 801130a:	1a9b      	subgt	r3, r3, r2
 801130c:	18ed      	addgt	r5, r5, r3
 801130e:	2600      	movs	r6, #0
 8011310:	341a      	adds	r4, #26
 8011312:	42b5      	cmp	r5, r6
 8011314:	d11a      	bne.n	801134c <_printf_common+0xc8>
 8011316:	2000      	movs	r0, #0
 8011318:	e008      	b.n	801132c <_printf_common+0xa8>
 801131a:	2301      	movs	r3, #1
 801131c:	4652      	mov	r2, sl
 801131e:	4641      	mov	r1, r8
 8011320:	4638      	mov	r0, r7
 8011322:	47c8      	blx	r9
 8011324:	3001      	adds	r0, #1
 8011326:	d103      	bne.n	8011330 <_printf_common+0xac>
 8011328:	f04f 30ff 	mov.w	r0, #4294967295
 801132c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011330:	3501      	adds	r5, #1
 8011332:	e7c6      	b.n	80112c2 <_printf_common+0x3e>
 8011334:	18e1      	adds	r1, r4, r3
 8011336:	1c5a      	adds	r2, r3, #1
 8011338:	2030      	movs	r0, #48	@ 0x30
 801133a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801133e:	4422      	add	r2, r4
 8011340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011348:	3302      	adds	r3, #2
 801134a:	e7c7      	b.n	80112dc <_printf_common+0x58>
 801134c:	2301      	movs	r3, #1
 801134e:	4622      	mov	r2, r4
 8011350:	4641      	mov	r1, r8
 8011352:	4638      	mov	r0, r7
 8011354:	47c8      	blx	r9
 8011356:	3001      	adds	r0, #1
 8011358:	d0e6      	beq.n	8011328 <_printf_common+0xa4>
 801135a:	3601      	adds	r6, #1
 801135c:	e7d9      	b.n	8011312 <_printf_common+0x8e>
	...

08011360 <_printf_i>:
 8011360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011364:	7e0f      	ldrb	r7, [r1, #24]
 8011366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011368:	2f78      	cmp	r7, #120	@ 0x78
 801136a:	4691      	mov	r9, r2
 801136c:	4680      	mov	r8, r0
 801136e:	460c      	mov	r4, r1
 8011370:	469a      	mov	sl, r3
 8011372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011376:	d807      	bhi.n	8011388 <_printf_i+0x28>
 8011378:	2f62      	cmp	r7, #98	@ 0x62
 801137a:	d80a      	bhi.n	8011392 <_printf_i+0x32>
 801137c:	2f00      	cmp	r7, #0
 801137e:	f000 80d2 	beq.w	8011526 <_printf_i+0x1c6>
 8011382:	2f58      	cmp	r7, #88	@ 0x58
 8011384:	f000 80b9 	beq.w	80114fa <_printf_i+0x19a>
 8011388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801138c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011390:	e03a      	b.n	8011408 <_printf_i+0xa8>
 8011392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011396:	2b15      	cmp	r3, #21
 8011398:	d8f6      	bhi.n	8011388 <_printf_i+0x28>
 801139a:	a101      	add	r1, pc, #4	@ (adr r1, 80113a0 <_printf_i+0x40>)
 801139c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80113a0:	080113f9 	.word	0x080113f9
 80113a4:	0801140d 	.word	0x0801140d
 80113a8:	08011389 	.word	0x08011389
 80113ac:	08011389 	.word	0x08011389
 80113b0:	08011389 	.word	0x08011389
 80113b4:	08011389 	.word	0x08011389
 80113b8:	0801140d 	.word	0x0801140d
 80113bc:	08011389 	.word	0x08011389
 80113c0:	08011389 	.word	0x08011389
 80113c4:	08011389 	.word	0x08011389
 80113c8:	08011389 	.word	0x08011389
 80113cc:	0801150d 	.word	0x0801150d
 80113d0:	08011437 	.word	0x08011437
 80113d4:	080114c7 	.word	0x080114c7
 80113d8:	08011389 	.word	0x08011389
 80113dc:	08011389 	.word	0x08011389
 80113e0:	0801152f 	.word	0x0801152f
 80113e4:	08011389 	.word	0x08011389
 80113e8:	08011437 	.word	0x08011437
 80113ec:	08011389 	.word	0x08011389
 80113f0:	08011389 	.word	0x08011389
 80113f4:	080114cf 	.word	0x080114cf
 80113f8:	6833      	ldr	r3, [r6, #0]
 80113fa:	1d1a      	adds	r2, r3, #4
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	6032      	str	r2, [r6, #0]
 8011400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011408:	2301      	movs	r3, #1
 801140a:	e09d      	b.n	8011548 <_printf_i+0x1e8>
 801140c:	6833      	ldr	r3, [r6, #0]
 801140e:	6820      	ldr	r0, [r4, #0]
 8011410:	1d19      	adds	r1, r3, #4
 8011412:	6031      	str	r1, [r6, #0]
 8011414:	0606      	lsls	r6, r0, #24
 8011416:	d501      	bpl.n	801141c <_printf_i+0xbc>
 8011418:	681d      	ldr	r5, [r3, #0]
 801141a:	e003      	b.n	8011424 <_printf_i+0xc4>
 801141c:	0645      	lsls	r5, r0, #25
 801141e:	d5fb      	bpl.n	8011418 <_printf_i+0xb8>
 8011420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011424:	2d00      	cmp	r5, #0
 8011426:	da03      	bge.n	8011430 <_printf_i+0xd0>
 8011428:	232d      	movs	r3, #45	@ 0x2d
 801142a:	426d      	negs	r5, r5
 801142c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011430:	4859      	ldr	r0, [pc, #356]	@ (8011598 <_printf_i+0x238>)
 8011432:	230a      	movs	r3, #10
 8011434:	e011      	b.n	801145a <_printf_i+0xfa>
 8011436:	6821      	ldr	r1, [r4, #0]
 8011438:	6833      	ldr	r3, [r6, #0]
 801143a:	0608      	lsls	r0, r1, #24
 801143c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011440:	d402      	bmi.n	8011448 <_printf_i+0xe8>
 8011442:	0649      	lsls	r1, r1, #25
 8011444:	bf48      	it	mi
 8011446:	b2ad      	uxthmi	r5, r5
 8011448:	2f6f      	cmp	r7, #111	@ 0x6f
 801144a:	4853      	ldr	r0, [pc, #332]	@ (8011598 <_printf_i+0x238>)
 801144c:	6033      	str	r3, [r6, #0]
 801144e:	bf14      	ite	ne
 8011450:	230a      	movne	r3, #10
 8011452:	2308      	moveq	r3, #8
 8011454:	2100      	movs	r1, #0
 8011456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801145a:	6866      	ldr	r6, [r4, #4]
 801145c:	60a6      	str	r6, [r4, #8]
 801145e:	2e00      	cmp	r6, #0
 8011460:	bfa2      	ittt	ge
 8011462:	6821      	ldrge	r1, [r4, #0]
 8011464:	f021 0104 	bicge.w	r1, r1, #4
 8011468:	6021      	strge	r1, [r4, #0]
 801146a:	b90d      	cbnz	r5, 8011470 <_printf_i+0x110>
 801146c:	2e00      	cmp	r6, #0
 801146e:	d04b      	beq.n	8011508 <_printf_i+0x1a8>
 8011470:	4616      	mov	r6, r2
 8011472:	fbb5 f1f3 	udiv	r1, r5, r3
 8011476:	fb03 5711 	mls	r7, r3, r1, r5
 801147a:	5dc7      	ldrb	r7, [r0, r7]
 801147c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011480:	462f      	mov	r7, r5
 8011482:	42bb      	cmp	r3, r7
 8011484:	460d      	mov	r5, r1
 8011486:	d9f4      	bls.n	8011472 <_printf_i+0x112>
 8011488:	2b08      	cmp	r3, #8
 801148a:	d10b      	bne.n	80114a4 <_printf_i+0x144>
 801148c:	6823      	ldr	r3, [r4, #0]
 801148e:	07df      	lsls	r7, r3, #31
 8011490:	d508      	bpl.n	80114a4 <_printf_i+0x144>
 8011492:	6923      	ldr	r3, [r4, #16]
 8011494:	6861      	ldr	r1, [r4, #4]
 8011496:	4299      	cmp	r1, r3
 8011498:	bfde      	ittt	le
 801149a:	2330      	movle	r3, #48	@ 0x30
 801149c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80114a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80114a4:	1b92      	subs	r2, r2, r6
 80114a6:	6122      	str	r2, [r4, #16]
 80114a8:	f8cd a000 	str.w	sl, [sp]
 80114ac:	464b      	mov	r3, r9
 80114ae:	aa03      	add	r2, sp, #12
 80114b0:	4621      	mov	r1, r4
 80114b2:	4640      	mov	r0, r8
 80114b4:	f7ff fee6 	bl	8011284 <_printf_common>
 80114b8:	3001      	adds	r0, #1
 80114ba:	d14a      	bne.n	8011552 <_printf_i+0x1f2>
 80114bc:	f04f 30ff 	mov.w	r0, #4294967295
 80114c0:	b004      	add	sp, #16
 80114c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	f043 0320 	orr.w	r3, r3, #32
 80114cc:	6023      	str	r3, [r4, #0]
 80114ce:	4833      	ldr	r0, [pc, #204]	@ (801159c <_printf_i+0x23c>)
 80114d0:	2778      	movs	r7, #120	@ 0x78
 80114d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	6831      	ldr	r1, [r6, #0]
 80114da:	061f      	lsls	r7, r3, #24
 80114dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80114e0:	d402      	bmi.n	80114e8 <_printf_i+0x188>
 80114e2:	065f      	lsls	r7, r3, #25
 80114e4:	bf48      	it	mi
 80114e6:	b2ad      	uxthmi	r5, r5
 80114e8:	6031      	str	r1, [r6, #0]
 80114ea:	07d9      	lsls	r1, r3, #31
 80114ec:	bf44      	itt	mi
 80114ee:	f043 0320 	orrmi.w	r3, r3, #32
 80114f2:	6023      	strmi	r3, [r4, #0]
 80114f4:	b11d      	cbz	r5, 80114fe <_printf_i+0x19e>
 80114f6:	2310      	movs	r3, #16
 80114f8:	e7ac      	b.n	8011454 <_printf_i+0xf4>
 80114fa:	4827      	ldr	r0, [pc, #156]	@ (8011598 <_printf_i+0x238>)
 80114fc:	e7e9      	b.n	80114d2 <_printf_i+0x172>
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	f023 0320 	bic.w	r3, r3, #32
 8011504:	6023      	str	r3, [r4, #0]
 8011506:	e7f6      	b.n	80114f6 <_printf_i+0x196>
 8011508:	4616      	mov	r6, r2
 801150a:	e7bd      	b.n	8011488 <_printf_i+0x128>
 801150c:	6833      	ldr	r3, [r6, #0]
 801150e:	6825      	ldr	r5, [r4, #0]
 8011510:	6961      	ldr	r1, [r4, #20]
 8011512:	1d18      	adds	r0, r3, #4
 8011514:	6030      	str	r0, [r6, #0]
 8011516:	062e      	lsls	r6, r5, #24
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	d501      	bpl.n	8011520 <_printf_i+0x1c0>
 801151c:	6019      	str	r1, [r3, #0]
 801151e:	e002      	b.n	8011526 <_printf_i+0x1c6>
 8011520:	0668      	lsls	r0, r5, #25
 8011522:	d5fb      	bpl.n	801151c <_printf_i+0x1bc>
 8011524:	8019      	strh	r1, [r3, #0]
 8011526:	2300      	movs	r3, #0
 8011528:	6123      	str	r3, [r4, #16]
 801152a:	4616      	mov	r6, r2
 801152c:	e7bc      	b.n	80114a8 <_printf_i+0x148>
 801152e:	6833      	ldr	r3, [r6, #0]
 8011530:	1d1a      	adds	r2, r3, #4
 8011532:	6032      	str	r2, [r6, #0]
 8011534:	681e      	ldr	r6, [r3, #0]
 8011536:	6862      	ldr	r2, [r4, #4]
 8011538:	2100      	movs	r1, #0
 801153a:	4630      	mov	r0, r6
 801153c:	f7ee fee8 	bl	8000310 <memchr>
 8011540:	b108      	cbz	r0, 8011546 <_printf_i+0x1e6>
 8011542:	1b80      	subs	r0, r0, r6
 8011544:	6060      	str	r0, [r4, #4]
 8011546:	6863      	ldr	r3, [r4, #4]
 8011548:	6123      	str	r3, [r4, #16]
 801154a:	2300      	movs	r3, #0
 801154c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011550:	e7aa      	b.n	80114a8 <_printf_i+0x148>
 8011552:	6923      	ldr	r3, [r4, #16]
 8011554:	4632      	mov	r2, r6
 8011556:	4649      	mov	r1, r9
 8011558:	4640      	mov	r0, r8
 801155a:	47d0      	blx	sl
 801155c:	3001      	adds	r0, #1
 801155e:	d0ad      	beq.n	80114bc <_printf_i+0x15c>
 8011560:	6823      	ldr	r3, [r4, #0]
 8011562:	079b      	lsls	r3, r3, #30
 8011564:	d413      	bmi.n	801158e <_printf_i+0x22e>
 8011566:	68e0      	ldr	r0, [r4, #12]
 8011568:	9b03      	ldr	r3, [sp, #12]
 801156a:	4298      	cmp	r0, r3
 801156c:	bfb8      	it	lt
 801156e:	4618      	movlt	r0, r3
 8011570:	e7a6      	b.n	80114c0 <_printf_i+0x160>
 8011572:	2301      	movs	r3, #1
 8011574:	4632      	mov	r2, r6
 8011576:	4649      	mov	r1, r9
 8011578:	4640      	mov	r0, r8
 801157a:	47d0      	blx	sl
 801157c:	3001      	adds	r0, #1
 801157e:	d09d      	beq.n	80114bc <_printf_i+0x15c>
 8011580:	3501      	adds	r5, #1
 8011582:	68e3      	ldr	r3, [r4, #12]
 8011584:	9903      	ldr	r1, [sp, #12]
 8011586:	1a5b      	subs	r3, r3, r1
 8011588:	42ab      	cmp	r3, r5
 801158a:	dcf2      	bgt.n	8011572 <_printf_i+0x212>
 801158c:	e7eb      	b.n	8011566 <_printf_i+0x206>
 801158e:	2500      	movs	r5, #0
 8011590:	f104 0619 	add.w	r6, r4, #25
 8011594:	e7f5      	b.n	8011582 <_printf_i+0x222>
 8011596:	bf00      	nop
 8011598:	080153a2 	.word	0x080153a2
 801159c:	080153b3 	.word	0x080153b3

080115a0 <_scanf_float>:
 80115a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a4:	b087      	sub	sp, #28
 80115a6:	4617      	mov	r7, r2
 80115a8:	9303      	str	r3, [sp, #12]
 80115aa:	688b      	ldr	r3, [r1, #8]
 80115ac:	1e5a      	subs	r2, r3, #1
 80115ae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80115b2:	bf81      	itttt	hi
 80115b4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80115b8:	eb03 0b05 	addhi.w	fp, r3, r5
 80115bc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80115c0:	608b      	strhi	r3, [r1, #8]
 80115c2:	680b      	ldr	r3, [r1, #0]
 80115c4:	460a      	mov	r2, r1
 80115c6:	f04f 0500 	mov.w	r5, #0
 80115ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80115ce:	f842 3b1c 	str.w	r3, [r2], #28
 80115d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80115d6:	4680      	mov	r8, r0
 80115d8:	460c      	mov	r4, r1
 80115da:	bf98      	it	ls
 80115dc:	f04f 0b00 	movls.w	fp, #0
 80115e0:	9201      	str	r2, [sp, #4]
 80115e2:	4616      	mov	r6, r2
 80115e4:	46aa      	mov	sl, r5
 80115e6:	46a9      	mov	r9, r5
 80115e8:	9502      	str	r5, [sp, #8]
 80115ea:	68a2      	ldr	r2, [r4, #8]
 80115ec:	b152      	cbz	r2, 8011604 <_scanf_float+0x64>
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	2b4e      	cmp	r3, #78	@ 0x4e
 80115f4:	d864      	bhi.n	80116c0 <_scanf_float+0x120>
 80115f6:	2b40      	cmp	r3, #64	@ 0x40
 80115f8:	d83c      	bhi.n	8011674 <_scanf_float+0xd4>
 80115fa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80115fe:	b2c8      	uxtb	r0, r1
 8011600:	280e      	cmp	r0, #14
 8011602:	d93a      	bls.n	801167a <_scanf_float+0xda>
 8011604:	f1b9 0f00 	cmp.w	r9, #0
 8011608:	d003      	beq.n	8011612 <_scanf_float+0x72>
 801160a:	6823      	ldr	r3, [r4, #0]
 801160c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011616:	f1ba 0f01 	cmp.w	sl, #1
 801161a:	f200 8117 	bhi.w	801184c <_scanf_float+0x2ac>
 801161e:	9b01      	ldr	r3, [sp, #4]
 8011620:	429e      	cmp	r6, r3
 8011622:	f200 8108 	bhi.w	8011836 <_scanf_float+0x296>
 8011626:	2001      	movs	r0, #1
 8011628:	b007      	add	sp, #28
 801162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801162e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011632:	2a0d      	cmp	r2, #13
 8011634:	d8e6      	bhi.n	8011604 <_scanf_float+0x64>
 8011636:	a101      	add	r1, pc, #4	@ (adr r1, 801163c <_scanf_float+0x9c>)
 8011638:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801163c:	08011783 	.word	0x08011783
 8011640:	08011605 	.word	0x08011605
 8011644:	08011605 	.word	0x08011605
 8011648:	08011605 	.word	0x08011605
 801164c:	080117e3 	.word	0x080117e3
 8011650:	080117bb 	.word	0x080117bb
 8011654:	08011605 	.word	0x08011605
 8011658:	08011605 	.word	0x08011605
 801165c:	08011791 	.word	0x08011791
 8011660:	08011605 	.word	0x08011605
 8011664:	08011605 	.word	0x08011605
 8011668:	08011605 	.word	0x08011605
 801166c:	08011605 	.word	0x08011605
 8011670:	08011749 	.word	0x08011749
 8011674:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011678:	e7db      	b.n	8011632 <_scanf_float+0x92>
 801167a:	290e      	cmp	r1, #14
 801167c:	d8c2      	bhi.n	8011604 <_scanf_float+0x64>
 801167e:	a001      	add	r0, pc, #4	@ (adr r0, 8011684 <_scanf_float+0xe4>)
 8011680:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011684:	08011739 	.word	0x08011739
 8011688:	08011605 	.word	0x08011605
 801168c:	08011739 	.word	0x08011739
 8011690:	080117cf 	.word	0x080117cf
 8011694:	08011605 	.word	0x08011605
 8011698:	080116e1 	.word	0x080116e1
 801169c:	0801171f 	.word	0x0801171f
 80116a0:	0801171f 	.word	0x0801171f
 80116a4:	0801171f 	.word	0x0801171f
 80116a8:	0801171f 	.word	0x0801171f
 80116ac:	0801171f 	.word	0x0801171f
 80116b0:	0801171f 	.word	0x0801171f
 80116b4:	0801171f 	.word	0x0801171f
 80116b8:	0801171f 	.word	0x0801171f
 80116bc:	0801171f 	.word	0x0801171f
 80116c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80116c2:	d809      	bhi.n	80116d8 <_scanf_float+0x138>
 80116c4:	2b60      	cmp	r3, #96	@ 0x60
 80116c6:	d8b2      	bhi.n	801162e <_scanf_float+0x8e>
 80116c8:	2b54      	cmp	r3, #84	@ 0x54
 80116ca:	d07b      	beq.n	80117c4 <_scanf_float+0x224>
 80116cc:	2b59      	cmp	r3, #89	@ 0x59
 80116ce:	d199      	bne.n	8011604 <_scanf_float+0x64>
 80116d0:	2d07      	cmp	r5, #7
 80116d2:	d197      	bne.n	8011604 <_scanf_float+0x64>
 80116d4:	2508      	movs	r5, #8
 80116d6:	e02c      	b.n	8011732 <_scanf_float+0x192>
 80116d8:	2b74      	cmp	r3, #116	@ 0x74
 80116da:	d073      	beq.n	80117c4 <_scanf_float+0x224>
 80116dc:	2b79      	cmp	r3, #121	@ 0x79
 80116de:	e7f6      	b.n	80116ce <_scanf_float+0x12e>
 80116e0:	6821      	ldr	r1, [r4, #0]
 80116e2:	05c8      	lsls	r0, r1, #23
 80116e4:	d51b      	bpl.n	801171e <_scanf_float+0x17e>
 80116e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80116ea:	6021      	str	r1, [r4, #0]
 80116ec:	f109 0901 	add.w	r9, r9, #1
 80116f0:	f1bb 0f00 	cmp.w	fp, #0
 80116f4:	d003      	beq.n	80116fe <_scanf_float+0x15e>
 80116f6:	3201      	adds	r2, #1
 80116f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80116fc:	60a2      	str	r2, [r4, #8]
 80116fe:	68a3      	ldr	r3, [r4, #8]
 8011700:	3b01      	subs	r3, #1
 8011702:	60a3      	str	r3, [r4, #8]
 8011704:	6923      	ldr	r3, [r4, #16]
 8011706:	3301      	adds	r3, #1
 8011708:	6123      	str	r3, [r4, #16]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	3b01      	subs	r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	f340 8087 	ble.w	8011824 <_scanf_float+0x284>
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	3301      	adds	r3, #1
 801171a:	603b      	str	r3, [r7, #0]
 801171c:	e765      	b.n	80115ea <_scanf_float+0x4a>
 801171e:	eb1a 0105 	adds.w	r1, sl, r5
 8011722:	f47f af6f 	bne.w	8011604 <_scanf_float+0x64>
 8011726:	6822      	ldr	r2, [r4, #0]
 8011728:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801172c:	6022      	str	r2, [r4, #0]
 801172e:	460d      	mov	r5, r1
 8011730:	468a      	mov	sl, r1
 8011732:	f806 3b01 	strb.w	r3, [r6], #1
 8011736:	e7e2      	b.n	80116fe <_scanf_float+0x15e>
 8011738:	6822      	ldr	r2, [r4, #0]
 801173a:	0610      	lsls	r0, r2, #24
 801173c:	f57f af62 	bpl.w	8011604 <_scanf_float+0x64>
 8011740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011744:	6022      	str	r2, [r4, #0]
 8011746:	e7f4      	b.n	8011732 <_scanf_float+0x192>
 8011748:	f1ba 0f00 	cmp.w	sl, #0
 801174c:	d10e      	bne.n	801176c <_scanf_float+0x1cc>
 801174e:	f1b9 0f00 	cmp.w	r9, #0
 8011752:	d10e      	bne.n	8011772 <_scanf_float+0x1d2>
 8011754:	6822      	ldr	r2, [r4, #0]
 8011756:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801175a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801175e:	d108      	bne.n	8011772 <_scanf_float+0x1d2>
 8011760:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011764:	6022      	str	r2, [r4, #0]
 8011766:	f04f 0a01 	mov.w	sl, #1
 801176a:	e7e2      	b.n	8011732 <_scanf_float+0x192>
 801176c:	f1ba 0f02 	cmp.w	sl, #2
 8011770:	d055      	beq.n	801181e <_scanf_float+0x27e>
 8011772:	2d01      	cmp	r5, #1
 8011774:	d002      	beq.n	801177c <_scanf_float+0x1dc>
 8011776:	2d04      	cmp	r5, #4
 8011778:	f47f af44 	bne.w	8011604 <_scanf_float+0x64>
 801177c:	3501      	adds	r5, #1
 801177e:	b2ed      	uxtb	r5, r5
 8011780:	e7d7      	b.n	8011732 <_scanf_float+0x192>
 8011782:	f1ba 0f01 	cmp.w	sl, #1
 8011786:	f47f af3d 	bne.w	8011604 <_scanf_float+0x64>
 801178a:	f04f 0a02 	mov.w	sl, #2
 801178e:	e7d0      	b.n	8011732 <_scanf_float+0x192>
 8011790:	b97d      	cbnz	r5, 80117b2 <_scanf_float+0x212>
 8011792:	f1b9 0f00 	cmp.w	r9, #0
 8011796:	f47f af38 	bne.w	801160a <_scanf_float+0x6a>
 801179a:	6822      	ldr	r2, [r4, #0]
 801179c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80117a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80117a4:	f040 8101 	bne.w	80119aa <_scanf_float+0x40a>
 80117a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80117ac:	6022      	str	r2, [r4, #0]
 80117ae:	2501      	movs	r5, #1
 80117b0:	e7bf      	b.n	8011732 <_scanf_float+0x192>
 80117b2:	2d03      	cmp	r5, #3
 80117b4:	d0e2      	beq.n	801177c <_scanf_float+0x1dc>
 80117b6:	2d05      	cmp	r5, #5
 80117b8:	e7de      	b.n	8011778 <_scanf_float+0x1d8>
 80117ba:	2d02      	cmp	r5, #2
 80117bc:	f47f af22 	bne.w	8011604 <_scanf_float+0x64>
 80117c0:	2503      	movs	r5, #3
 80117c2:	e7b6      	b.n	8011732 <_scanf_float+0x192>
 80117c4:	2d06      	cmp	r5, #6
 80117c6:	f47f af1d 	bne.w	8011604 <_scanf_float+0x64>
 80117ca:	2507      	movs	r5, #7
 80117cc:	e7b1      	b.n	8011732 <_scanf_float+0x192>
 80117ce:	6822      	ldr	r2, [r4, #0]
 80117d0:	0591      	lsls	r1, r2, #22
 80117d2:	f57f af17 	bpl.w	8011604 <_scanf_float+0x64>
 80117d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80117da:	6022      	str	r2, [r4, #0]
 80117dc:	f8cd 9008 	str.w	r9, [sp, #8]
 80117e0:	e7a7      	b.n	8011732 <_scanf_float+0x192>
 80117e2:	6822      	ldr	r2, [r4, #0]
 80117e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80117e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80117ec:	d006      	beq.n	80117fc <_scanf_float+0x25c>
 80117ee:	0550      	lsls	r0, r2, #21
 80117f0:	f57f af08 	bpl.w	8011604 <_scanf_float+0x64>
 80117f4:	f1b9 0f00 	cmp.w	r9, #0
 80117f8:	f000 80d7 	beq.w	80119aa <_scanf_float+0x40a>
 80117fc:	0591      	lsls	r1, r2, #22
 80117fe:	bf58      	it	pl
 8011800:	9902      	ldrpl	r1, [sp, #8]
 8011802:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011806:	bf58      	it	pl
 8011808:	eba9 0101 	subpl.w	r1, r9, r1
 801180c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011810:	bf58      	it	pl
 8011812:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011816:	6022      	str	r2, [r4, #0]
 8011818:	f04f 0900 	mov.w	r9, #0
 801181c:	e789      	b.n	8011732 <_scanf_float+0x192>
 801181e:	f04f 0a03 	mov.w	sl, #3
 8011822:	e786      	b.n	8011732 <_scanf_float+0x192>
 8011824:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011828:	4639      	mov	r1, r7
 801182a:	4640      	mov	r0, r8
 801182c:	4798      	blx	r3
 801182e:	2800      	cmp	r0, #0
 8011830:	f43f aedb 	beq.w	80115ea <_scanf_float+0x4a>
 8011834:	e6e6      	b.n	8011604 <_scanf_float+0x64>
 8011836:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801183a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801183e:	463a      	mov	r2, r7
 8011840:	4640      	mov	r0, r8
 8011842:	4798      	blx	r3
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	3b01      	subs	r3, #1
 8011848:	6123      	str	r3, [r4, #16]
 801184a:	e6e8      	b.n	801161e <_scanf_float+0x7e>
 801184c:	1e6b      	subs	r3, r5, #1
 801184e:	2b06      	cmp	r3, #6
 8011850:	d824      	bhi.n	801189c <_scanf_float+0x2fc>
 8011852:	2d02      	cmp	r5, #2
 8011854:	d836      	bhi.n	80118c4 <_scanf_float+0x324>
 8011856:	9b01      	ldr	r3, [sp, #4]
 8011858:	429e      	cmp	r6, r3
 801185a:	f67f aee4 	bls.w	8011626 <_scanf_float+0x86>
 801185e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011866:	463a      	mov	r2, r7
 8011868:	4640      	mov	r0, r8
 801186a:	4798      	blx	r3
 801186c:	6923      	ldr	r3, [r4, #16]
 801186e:	3b01      	subs	r3, #1
 8011870:	6123      	str	r3, [r4, #16]
 8011872:	e7f0      	b.n	8011856 <_scanf_float+0x2b6>
 8011874:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011878:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801187c:	463a      	mov	r2, r7
 801187e:	4640      	mov	r0, r8
 8011880:	4798      	blx	r3
 8011882:	6923      	ldr	r3, [r4, #16]
 8011884:	3b01      	subs	r3, #1
 8011886:	6123      	str	r3, [r4, #16]
 8011888:	f10a 3aff 	add.w	sl, sl, #4294967295
 801188c:	fa5f fa8a 	uxtb.w	sl, sl
 8011890:	f1ba 0f02 	cmp.w	sl, #2
 8011894:	d1ee      	bne.n	8011874 <_scanf_float+0x2d4>
 8011896:	3d03      	subs	r5, #3
 8011898:	b2ed      	uxtb	r5, r5
 801189a:	1b76      	subs	r6, r6, r5
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	05da      	lsls	r2, r3, #23
 80118a0:	d530      	bpl.n	8011904 <_scanf_float+0x364>
 80118a2:	055b      	lsls	r3, r3, #21
 80118a4:	d511      	bpl.n	80118ca <_scanf_float+0x32a>
 80118a6:	9b01      	ldr	r3, [sp, #4]
 80118a8:	429e      	cmp	r6, r3
 80118aa:	f67f aebc 	bls.w	8011626 <_scanf_float+0x86>
 80118ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118b6:	463a      	mov	r2, r7
 80118b8:	4640      	mov	r0, r8
 80118ba:	4798      	blx	r3
 80118bc:	6923      	ldr	r3, [r4, #16]
 80118be:	3b01      	subs	r3, #1
 80118c0:	6123      	str	r3, [r4, #16]
 80118c2:	e7f0      	b.n	80118a6 <_scanf_float+0x306>
 80118c4:	46aa      	mov	sl, r5
 80118c6:	46b3      	mov	fp, r6
 80118c8:	e7de      	b.n	8011888 <_scanf_float+0x2e8>
 80118ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80118ce:	6923      	ldr	r3, [r4, #16]
 80118d0:	2965      	cmp	r1, #101	@ 0x65
 80118d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80118da:	6123      	str	r3, [r4, #16]
 80118dc:	d00c      	beq.n	80118f8 <_scanf_float+0x358>
 80118de:	2945      	cmp	r1, #69	@ 0x45
 80118e0:	d00a      	beq.n	80118f8 <_scanf_float+0x358>
 80118e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118e6:	463a      	mov	r2, r7
 80118e8:	4640      	mov	r0, r8
 80118ea:	4798      	blx	r3
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80118f2:	3b01      	subs	r3, #1
 80118f4:	1eb5      	subs	r5, r6, #2
 80118f6:	6123      	str	r3, [r4, #16]
 80118f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118fc:	463a      	mov	r2, r7
 80118fe:	4640      	mov	r0, r8
 8011900:	4798      	blx	r3
 8011902:	462e      	mov	r6, r5
 8011904:	6822      	ldr	r2, [r4, #0]
 8011906:	f012 0210 	ands.w	r2, r2, #16
 801190a:	d001      	beq.n	8011910 <_scanf_float+0x370>
 801190c:	2000      	movs	r0, #0
 801190e:	e68b      	b.n	8011628 <_scanf_float+0x88>
 8011910:	7032      	strb	r2, [r6, #0]
 8011912:	6823      	ldr	r3, [r4, #0]
 8011914:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801191c:	d11a      	bne.n	8011954 <_scanf_float+0x3b4>
 801191e:	9b02      	ldr	r3, [sp, #8]
 8011920:	454b      	cmp	r3, r9
 8011922:	eba3 0209 	sub.w	r2, r3, r9
 8011926:	d121      	bne.n	801196c <_scanf_float+0x3cc>
 8011928:	9901      	ldr	r1, [sp, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	4640      	mov	r0, r8
 801192e:	f002 fbe1 	bl	80140f4 <_strtod_r>
 8011932:	9b03      	ldr	r3, [sp, #12]
 8011934:	6821      	ldr	r1, [r4, #0]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f011 0f02 	tst.w	r1, #2
 801193c:	f103 0204 	add.w	r2, r3, #4
 8011940:	d01f      	beq.n	8011982 <_scanf_float+0x3e2>
 8011942:	9903      	ldr	r1, [sp, #12]
 8011944:	600a      	str	r2, [r1, #0]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	ed83 0b00 	vstr	d0, [r3]
 801194c:	68e3      	ldr	r3, [r4, #12]
 801194e:	3301      	adds	r3, #1
 8011950:	60e3      	str	r3, [r4, #12]
 8011952:	e7db      	b.n	801190c <_scanf_float+0x36c>
 8011954:	9b04      	ldr	r3, [sp, #16]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d0e6      	beq.n	8011928 <_scanf_float+0x388>
 801195a:	9905      	ldr	r1, [sp, #20]
 801195c:	230a      	movs	r3, #10
 801195e:	3101      	adds	r1, #1
 8011960:	4640      	mov	r0, r8
 8011962:	f002 fc47 	bl	80141f4 <_strtol_r>
 8011966:	9b04      	ldr	r3, [sp, #16]
 8011968:	9e05      	ldr	r6, [sp, #20]
 801196a:	1ac2      	subs	r2, r0, r3
 801196c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011970:	429e      	cmp	r6, r3
 8011972:	bf28      	it	cs
 8011974:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011978:	490d      	ldr	r1, [pc, #52]	@ (80119b0 <_scanf_float+0x410>)
 801197a:	4630      	mov	r0, r6
 801197c:	f000 f8f0 	bl	8011b60 <siprintf>
 8011980:	e7d2      	b.n	8011928 <_scanf_float+0x388>
 8011982:	f011 0f04 	tst.w	r1, #4
 8011986:	9903      	ldr	r1, [sp, #12]
 8011988:	600a      	str	r2, [r1, #0]
 801198a:	d1dc      	bne.n	8011946 <_scanf_float+0x3a6>
 801198c:	eeb4 0b40 	vcmp.f64	d0, d0
 8011990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011994:	681d      	ldr	r5, [r3, #0]
 8011996:	d705      	bvc.n	80119a4 <_scanf_float+0x404>
 8011998:	4806      	ldr	r0, [pc, #24]	@ (80119b4 <_scanf_float+0x414>)
 801199a:	f000 fa67 	bl	8011e6c <nanf>
 801199e:	ed85 0a00 	vstr	s0, [r5]
 80119a2:	e7d3      	b.n	801194c <_scanf_float+0x3ac>
 80119a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80119a8:	e7f9      	b.n	801199e <_scanf_float+0x3fe>
 80119aa:	f04f 0900 	mov.w	r9, #0
 80119ae:	e630      	b.n	8011612 <_scanf_float+0x72>
 80119b0:	080153c4 	.word	0x080153c4
 80119b4:	0801575d 	.word	0x0801575d

080119b8 <std>:
 80119b8:	2300      	movs	r3, #0
 80119ba:	b510      	push	{r4, lr}
 80119bc:	4604      	mov	r4, r0
 80119be:	e9c0 3300 	strd	r3, r3, [r0]
 80119c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119c6:	6083      	str	r3, [r0, #8]
 80119c8:	8181      	strh	r1, [r0, #12]
 80119ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80119cc:	81c2      	strh	r2, [r0, #14]
 80119ce:	6183      	str	r3, [r0, #24]
 80119d0:	4619      	mov	r1, r3
 80119d2:	2208      	movs	r2, #8
 80119d4:	305c      	adds	r0, #92	@ 0x5c
 80119d6:	f000 f9bb 	bl	8011d50 <memset>
 80119da:	4b0d      	ldr	r3, [pc, #52]	@ (8011a10 <std+0x58>)
 80119dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80119de:	4b0d      	ldr	r3, [pc, #52]	@ (8011a14 <std+0x5c>)
 80119e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80119e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011a18 <std+0x60>)
 80119e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80119e6:	4b0d      	ldr	r3, [pc, #52]	@ (8011a1c <std+0x64>)
 80119e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80119ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011a20 <std+0x68>)
 80119ec:	6224      	str	r4, [r4, #32]
 80119ee:	429c      	cmp	r4, r3
 80119f0:	d006      	beq.n	8011a00 <std+0x48>
 80119f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80119f6:	4294      	cmp	r4, r2
 80119f8:	d002      	beq.n	8011a00 <std+0x48>
 80119fa:	33d0      	adds	r3, #208	@ 0xd0
 80119fc:	429c      	cmp	r4, r3
 80119fe:	d105      	bne.n	8011a0c <std+0x54>
 8011a00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a08:	f000 ba1e 	b.w	8011e48 <__retarget_lock_init_recursive>
 8011a0c:	bd10      	pop	{r4, pc}
 8011a0e:	bf00      	nop
 8011a10:	08011ba1 	.word	0x08011ba1
 8011a14:	08011bc3 	.word	0x08011bc3
 8011a18:	08011bfb 	.word	0x08011bfb
 8011a1c:	08011c1f 	.word	0x08011c1f
 8011a20:	24000bdc 	.word	0x24000bdc

08011a24 <stdio_exit_handler>:
 8011a24:	4a02      	ldr	r2, [pc, #8]	@ (8011a30 <stdio_exit_handler+0xc>)
 8011a26:	4903      	ldr	r1, [pc, #12]	@ (8011a34 <stdio_exit_handler+0x10>)
 8011a28:	4803      	ldr	r0, [pc, #12]	@ (8011a38 <stdio_exit_handler+0x14>)
 8011a2a:	f000 b869 	b.w	8011b00 <_fwalk_sglue>
 8011a2e:	bf00      	nop
 8011a30:	24000010 	.word	0x24000010
 8011a34:	08014835 	.word	0x08014835
 8011a38:	24000020 	.word	0x24000020

08011a3c <cleanup_stdio>:
 8011a3c:	6841      	ldr	r1, [r0, #4]
 8011a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8011a70 <cleanup_stdio+0x34>)
 8011a40:	4299      	cmp	r1, r3
 8011a42:	b510      	push	{r4, lr}
 8011a44:	4604      	mov	r4, r0
 8011a46:	d001      	beq.n	8011a4c <cleanup_stdio+0x10>
 8011a48:	f002 fef4 	bl	8014834 <_fflush_r>
 8011a4c:	68a1      	ldr	r1, [r4, #8]
 8011a4e:	4b09      	ldr	r3, [pc, #36]	@ (8011a74 <cleanup_stdio+0x38>)
 8011a50:	4299      	cmp	r1, r3
 8011a52:	d002      	beq.n	8011a5a <cleanup_stdio+0x1e>
 8011a54:	4620      	mov	r0, r4
 8011a56:	f002 feed 	bl	8014834 <_fflush_r>
 8011a5a:	68e1      	ldr	r1, [r4, #12]
 8011a5c:	4b06      	ldr	r3, [pc, #24]	@ (8011a78 <cleanup_stdio+0x3c>)
 8011a5e:	4299      	cmp	r1, r3
 8011a60:	d004      	beq.n	8011a6c <cleanup_stdio+0x30>
 8011a62:	4620      	mov	r0, r4
 8011a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a68:	f002 bee4 	b.w	8014834 <_fflush_r>
 8011a6c:	bd10      	pop	{r4, pc}
 8011a6e:	bf00      	nop
 8011a70:	24000bdc 	.word	0x24000bdc
 8011a74:	24000c44 	.word	0x24000c44
 8011a78:	24000cac 	.word	0x24000cac

08011a7c <global_stdio_init.part.0>:
 8011a7c:	b510      	push	{r4, lr}
 8011a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8011aac <global_stdio_init.part.0+0x30>)
 8011a80:	4c0b      	ldr	r4, [pc, #44]	@ (8011ab0 <global_stdio_init.part.0+0x34>)
 8011a82:	4a0c      	ldr	r2, [pc, #48]	@ (8011ab4 <global_stdio_init.part.0+0x38>)
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	4620      	mov	r0, r4
 8011a88:	2200      	movs	r2, #0
 8011a8a:	2104      	movs	r1, #4
 8011a8c:	f7ff ff94 	bl	80119b8 <std>
 8011a90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a94:	2201      	movs	r2, #1
 8011a96:	2109      	movs	r1, #9
 8011a98:	f7ff ff8e 	bl	80119b8 <std>
 8011a9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aa6:	2112      	movs	r1, #18
 8011aa8:	f7ff bf86 	b.w	80119b8 <std>
 8011aac:	24000d14 	.word	0x24000d14
 8011ab0:	24000bdc 	.word	0x24000bdc
 8011ab4:	08011a25 	.word	0x08011a25

08011ab8 <__sfp_lock_acquire>:
 8011ab8:	4801      	ldr	r0, [pc, #4]	@ (8011ac0 <__sfp_lock_acquire+0x8>)
 8011aba:	f000 b9c6 	b.w	8011e4a <__retarget_lock_acquire_recursive>
 8011abe:	bf00      	nop
 8011ac0:	24000d1d 	.word	0x24000d1d

08011ac4 <__sfp_lock_release>:
 8011ac4:	4801      	ldr	r0, [pc, #4]	@ (8011acc <__sfp_lock_release+0x8>)
 8011ac6:	f000 b9c1 	b.w	8011e4c <__retarget_lock_release_recursive>
 8011aca:	bf00      	nop
 8011acc:	24000d1d 	.word	0x24000d1d

08011ad0 <__sinit>:
 8011ad0:	b510      	push	{r4, lr}
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	f7ff fff0 	bl	8011ab8 <__sfp_lock_acquire>
 8011ad8:	6a23      	ldr	r3, [r4, #32]
 8011ada:	b11b      	cbz	r3, 8011ae4 <__sinit+0x14>
 8011adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ae0:	f7ff bff0 	b.w	8011ac4 <__sfp_lock_release>
 8011ae4:	4b04      	ldr	r3, [pc, #16]	@ (8011af8 <__sinit+0x28>)
 8011ae6:	6223      	str	r3, [r4, #32]
 8011ae8:	4b04      	ldr	r3, [pc, #16]	@ (8011afc <__sinit+0x2c>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d1f5      	bne.n	8011adc <__sinit+0xc>
 8011af0:	f7ff ffc4 	bl	8011a7c <global_stdio_init.part.0>
 8011af4:	e7f2      	b.n	8011adc <__sinit+0xc>
 8011af6:	bf00      	nop
 8011af8:	08011a3d 	.word	0x08011a3d
 8011afc:	24000d14 	.word	0x24000d14

08011b00 <_fwalk_sglue>:
 8011b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b04:	4607      	mov	r7, r0
 8011b06:	4688      	mov	r8, r1
 8011b08:	4614      	mov	r4, r2
 8011b0a:	2600      	movs	r6, #0
 8011b0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b10:	f1b9 0901 	subs.w	r9, r9, #1
 8011b14:	d505      	bpl.n	8011b22 <_fwalk_sglue+0x22>
 8011b16:	6824      	ldr	r4, [r4, #0]
 8011b18:	2c00      	cmp	r4, #0
 8011b1a:	d1f7      	bne.n	8011b0c <_fwalk_sglue+0xc>
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b22:	89ab      	ldrh	r3, [r5, #12]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d907      	bls.n	8011b38 <_fwalk_sglue+0x38>
 8011b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	d003      	beq.n	8011b38 <_fwalk_sglue+0x38>
 8011b30:	4629      	mov	r1, r5
 8011b32:	4638      	mov	r0, r7
 8011b34:	47c0      	blx	r8
 8011b36:	4306      	orrs	r6, r0
 8011b38:	3568      	adds	r5, #104	@ 0x68
 8011b3a:	e7e9      	b.n	8011b10 <_fwalk_sglue+0x10>

08011b3c <iprintf>:
 8011b3c:	b40f      	push	{r0, r1, r2, r3}
 8011b3e:	b507      	push	{r0, r1, r2, lr}
 8011b40:	4906      	ldr	r1, [pc, #24]	@ (8011b5c <iprintf+0x20>)
 8011b42:	ab04      	add	r3, sp, #16
 8011b44:	6808      	ldr	r0, [r1, #0]
 8011b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b4a:	6881      	ldr	r1, [r0, #8]
 8011b4c:	9301      	str	r3, [sp, #4]
 8011b4e:	f002 fcd5 	bl	80144fc <_vfiprintf_r>
 8011b52:	b003      	add	sp, #12
 8011b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b58:	b004      	add	sp, #16
 8011b5a:	4770      	bx	lr
 8011b5c:	2400001c 	.word	0x2400001c

08011b60 <siprintf>:
 8011b60:	b40e      	push	{r1, r2, r3}
 8011b62:	b500      	push	{lr}
 8011b64:	b09c      	sub	sp, #112	@ 0x70
 8011b66:	ab1d      	add	r3, sp, #116	@ 0x74
 8011b68:	9002      	str	r0, [sp, #8]
 8011b6a:	9006      	str	r0, [sp, #24]
 8011b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011b70:	4809      	ldr	r0, [pc, #36]	@ (8011b98 <siprintf+0x38>)
 8011b72:	9107      	str	r1, [sp, #28]
 8011b74:	9104      	str	r1, [sp, #16]
 8011b76:	4909      	ldr	r1, [pc, #36]	@ (8011b9c <siprintf+0x3c>)
 8011b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b7c:	9105      	str	r1, [sp, #20]
 8011b7e:	6800      	ldr	r0, [r0, #0]
 8011b80:	9301      	str	r3, [sp, #4]
 8011b82:	a902      	add	r1, sp, #8
 8011b84:	f002 fb94 	bl	80142b0 <_svfiprintf_r>
 8011b88:	9b02      	ldr	r3, [sp, #8]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	701a      	strb	r2, [r3, #0]
 8011b8e:	b01c      	add	sp, #112	@ 0x70
 8011b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b94:	b003      	add	sp, #12
 8011b96:	4770      	bx	lr
 8011b98:	2400001c 	.word	0x2400001c
 8011b9c:	ffff0208 	.word	0xffff0208

08011ba0 <__sread>:
 8011ba0:	b510      	push	{r4, lr}
 8011ba2:	460c      	mov	r4, r1
 8011ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ba8:	f000 f900 	bl	8011dac <_read_r>
 8011bac:	2800      	cmp	r0, #0
 8011bae:	bfab      	itete	ge
 8011bb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8011bb4:	181b      	addge	r3, r3, r0
 8011bb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011bba:	bfac      	ite	ge
 8011bbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011bbe:	81a3      	strhlt	r3, [r4, #12]
 8011bc0:	bd10      	pop	{r4, pc}

08011bc2 <__swrite>:
 8011bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc6:	461f      	mov	r7, r3
 8011bc8:	898b      	ldrh	r3, [r1, #12]
 8011bca:	05db      	lsls	r3, r3, #23
 8011bcc:	4605      	mov	r5, r0
 8011bce:	460c      	mov	r4, r1
 8011bd0:	4616      	mov	r6, r2
 8011bd2:	d505      	bpl.n	8011be0 <__swrite+0x1e>
 8011bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bd8:	2302      	movs	r3, #2
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f000 f8d4 	bl	8011d88 <_lseek_r>
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011be6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011bea:	81a3      	strh	r3, [r4, #12]
 8011bec:	4632      	mov	r2, r6
 8011bee:	463b      	mov	r3, r7
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf6:	f000 b8eb 	b.w	8011dd0 <_write_r>

08011bfa <__sseek>:
 8011bfa:	b510      	push	{r4, lr}
 8011bfc:	460c      	mov	r4, r1
 8011bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c02:	f000 f8c1 	bl	8011d88 <_lseek_r>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	89a3      	ldrh	r3, [r4, #12]
 8011c0a:	bf15      	itete	ne
 8011c0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011c0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011c12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011c16:	81a3      	strheq	r3, [r4, #12]
 8011c18:	bf18      	it	ne
 8011c1a:	81a3      	strhne	r3, [r4, #12]
 8011c1c:	bd10      	pop	{r4, pc}

08011c1e <__sclose>:
 8011c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c22:	f000 b8a1 	b.w	8011d68 <_close_r>

08011c26 <__swbuf_r>:
 8011c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c28:	460e      	mov	r6, r1
 8011c2a:	4614      	mov	r4, r2
 8011c2c:	4605      	mov	r5, r0
 8011c2e:	b118      	cbz	r0, 8011c38 <__swbuf_r+0x12>
 8011c30:	6a03      	ldr	r3, [r0, #32]
 8011c32:	b90b      	cbnz	r3, 8011c38 <__swbuf_r+0x12>
 8011c34:	f7ff ff4c 	bl	8011ad0 <__sinit>
 8011c38:	69a3      	ldr	r3, [r4, #24]
 8011c3a:	60a3      	str	r3, [r4, #8]
 8011c3c:	89a3      	ldrh	r3, [r4, #12]
 8011c3e:	071a      	lsls	r2, r3, #28
 8011c40:	d501      	bpl.n	8011c46 <__swbuf_r+0x20>
 8011c42:	6923      	ldr	r3, [r4, #16]
 8011c44:	b943      	cbnz	r3, 8011c58 <__swbuf_r+0x32>
 8011c46:	4621      	mov	r1, r4
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f000 f82b 	bl	8011ca4 <__swsetup_r>
 8011c4e:	b118      	cbz	r0, 8011c58 <__swbuf_r+0x32>
 8011c50:	f04f 37ff 	mov.w	r7, #4294967295
 8011c54:	4638      	mov	r0, r7
 8011c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	6922      	ldr	r2, [r4, #16]
 8011c5c:	1a98      	subs	r0, r3, r2
 8011c5e:	6963      	ldr	r3, [r4, #20]
 8011c60:	b2f6      	uxtb	r6, r6
 8011c62:	4283      	cmp	r3, r0
 8011c64:	4637      	mov	r7, r6
 8011c66:	dc05      	bgt.n	8011c74 <__swbuf_r+0x4e>
 8011c68:	4621      	mov	r1, r4
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	f002 fde2 	bl	8014834 <_fflush_r>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d1ed      	bne.n	8011c50 <__swbuf_r+0x2a>
 8011c74:	68a3      	ldr	r3, [r4, #8]
 8011c76:	3b01      	subs	r3, #1
 8011c78:	60a3      	str	r3, [r4, #8]
 8011c7a:	6823      	ldr	r3, [r4, #0]
 8011c7c:	1c5a      	adds	r2, r3, #1
 8011c7e:	6022      	str	r2, [r4, #0]
 8011c80:	701e      	strb	r6, [r3, #0]
 8011c82:	6962      	ldr	r2, [r4, #20]
 8011c84:	1c43      	adds	r3, r0, #1
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d004      	beq.n	8011c94 <__swbuf_r+0x6e>
 8011c8a:	89a3      	ldrh	r3, [r4, #12]
 8011c8c:	07db      	lsls	r3, r3, #31
 8011c8e:	d5e1      	bpl.n	8011c54 <__swbuf_r+0x2e>
 8011c90:	2e0a      	cmp	r6, #10
 8011c92:	d1df      	bne.n	8011c54 <__swbuf_r+0x2e>
 8011c94:	4621      	mov	r1, r4
 8011c96:	4628      	mov	r0, r5
 8011c98:	f002 fdcc 	bl	8014834 <_fflush_r>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d0d9      	beq.n	8011c54 <__swbuf_r+0x2e>
 8011ca0:	e7d6      	b.n	8011c50 <__swbuf_r+0x2a>
	...

08011ca4 <__swsetup_r>:
 8011ca4:	b538      	push	{r3, r4, r5, lr}
 8011ca6:	4b29      	ldr	r3, [pc, #164]	@ (8011d4c <__swsetup_r+0xa8>)
 8011ca8:	4605      	mov	r5, r0
 8011caa:	6818      	ldr	r0, [r3, #0]
 8011cac:	460c      	mov	r4, r1
 8011cae:	b118      	cbz	r0, 8011cb8 <__swsetup_r+0x14>
 8011cb0:	6a03      	ldr	r3, [r0, #32]
 8011cb2:	b90b      	cbnz	r3, 8011cb8 <__swsetup_r+0x14>
 8011cb4:	f7ff ff0c 	bl	8011ad0 <__sinit>
 8011cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cbc:	0719      	lsls	r1, r3, #28
 8011cbe:	d422      	bmi.n	8011d06 <__swsetup_r+0x62>
 8011cc0:	06da      	lsls	r2, r3, #27
 8011cc2:	d407      	bmi.n	8011cd4 <__swsetup_r+0x30>
 8011cc4:	2209      	movs	r2, #9
 8011cc6:	602a      	str	r2, [r5, #0]
 8011cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ccc:	81a3      	strh	r3, [r4, #12]
 8011cce:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd2:	e033      	b.n	8011d3c <__swsetup_r+0x98>
 8011cd4:	0758      	lsls	r0, r3, #29
 8011cd6:	d512      	bpl.n	8011cfe <__swsetup_r+0x5a>
 8011cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cda:	b141      	cbz	r1, 8011cee <__swsetup_r+0x4a>
 8011cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ce0:	4299      	cmp	r1, r3
 8011ce2:	d002      	beq.n	8011cea <__swsetup_r+0x46>
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	f000 fea5 	bl	8012a34 <_free_r>
 8011cea:	2300      	movs	r3, #0
 8011cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011cf4:	81a3      	strh	r3, [r4, #12]
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	6063      	str	r3, [r4, #4]
 8011cfa:	6923      	ldr	r3, [r4, #16]
 8011cfc:	6023      	str	r3, [r4, #0]
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	f043 0308 	orr.w	r3, r3, #8
 8011d04:	81a3      	strh	r3, [r4, #12]
 8011d06:	6923      	ldr	r3, [r4, #16]
 8011d08:	b94b      	cbnz	r3, 8011d1e <__swsetup_r+0x7a>
 8011d0a:	89a3      	ldrh	r3, [r4, #12]
 8011d0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d14:	d003      	beq.n	8011d1e <__swsetup_r+0x7a>
 8011d16:	4621      	mov	r1, r4
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f002 fdd9 	bl	80148d0 <__smakebuf_r>
 8011d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d22:	f013 0201 	ands.w	r2, r3, #1
 8011d26:	d00a      	beq.n	8011d3e <__swsetup_r+0x9a>
 8011d28:	2200      	movs	r2, #0
 8011d2a:	60a2      	str	r2, [r4, #8]
 8011d2c:	6962      	ldr	r2, [r4, #20]
 8011d2e:	4252      	negs	r2, r2
 8011d30:	61a2      	str	r2, [r4, #24]
 8011d32:	6922      	ldr	r2, [r4, #16]
 8011d34:	b942      	cbnz	r2, 8011d48 <__swsetup_r+0xa4>
 8011d36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d3a:	d1c5      	bne.n	8011cc8 <__swsetup_r+0x24>
 8011d3c:	bd38      	pop	{r3, r4, r5, pc}
 8011d3e:	0799      	lsls	r1, r3, #30
 8011d40:	bf58      	it	pl
 8011d42:	6962      	ldrpl	r2, [r4, #20]
 8011d44:	60a2      	str	r2, [r4, #8]
 8011d46:	e7f4      	b.n	8011d32 <__swsetup_r+0x8e>
 8011d48:	2000      	movs	r0, #0
 8011d4a:	e7f7      	b.n	8011d3c <__swsetup_r+0x98>
 8011d4c:	2400001c 	.word	0x2400001c

08011d50 <memset>:
 8011d50:	4402      	add	r2, r0
 8011d52:	4603      	mov	r3, r0
 8011d54:	4293      	cmp	r3, r2
 8011d56:	d100      	bne.n	8011d5a <memset+0xa>
 8011d58:	4770      	bx	lr
 8011d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d5e:	e7f9      	b.n	8011d54 <memset+0x4>

08011d60 <_localeconv_r>:
 8011d60:	4800      	ldr	r0, [pc, #0]	@ (8011d64 <_localeconv_r+0x4>)
 8011d62:	4770      	bx	lr
 8011d64:	2400015c 	.word	0x2400015c

08011d68 <_close_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	4d06      	ldr	r5, [pc, #24]	@ (8011d84 <_close_r+0x1c>)
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4604      	mov	r4, r0
 8011d70:	4608      	mov	r0, r1
 8011d72:	602b      	str	r3, [r5, #0]
 8011d74:	f7f1 fb46 	bl	8003404 <_close>
 8011d78:	1c43      	adds	r3, r0, #1
 8011d7a:	d102      	bne.n	8011d82 <_close_r+0x1a>
 8011d7c:	682b      	ldr	r3, [r5, #0]
 8011d7e:	b103      	cbz	r3, 8011d82 <_close_r+0x1a>
 8011d80:	6023      	str	r3, [r4, #0]
 8011d82:	bd38      	pop	{r3, r4, r5, pc}
 8011d84:	24000d18 	.word	0x24000d18

08011d88 <_lseek_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4d07      	ldr	r5, [pc, #28]	@ (8011da8 <_lseek_r+0x20>)
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	4608      	mov	r0, r1
 8011d90:	4611      	mov	r1, r2
 8011d92:	2200      	movs	r2, #0
 8011d94:	602a      	str	r2, [r5, #0]
 8011d96:	461a      	mov	r2, r3
 8011d98:	f7f1 fb5b 	bl	8003452 <_lseek>
 8011d9c:	1c43      	adds	r3, r0, #1
 8011d9e:	d102      	bne.n	8011da6 <_lseek_r+0x1e>
 8011da0:	682b      	ldr	r3, [r5, #0]
 8011da2:	b103      	cbz	r3, 8011da6 <_lseek_r+0x1e>
 8011da4:	6023      	str	r3, [r4, #0]
 8011da6:	bd38      	pop	{r3, r4, r5, pc}
 8011da8:	24000d18 	.word	0x24000d18

08011dac <_read_r>:
 8011dac:	b538      	push	{r3, r4, r5, lr}
 8011dae:	4d07      	ldr	r5, [pc, #28]	@ (8011dcc <_read_r+0x20>)
 8011db0:	4604      	mov	r4, r0
 8011db2:	4608      	mov	r0, r1
 8011db4:	4611      	mov	r1, r2
 8011db6:	2200      	movs	r2, #0
 8011db8:	602a      	str	r2, [r5, #0]
 8011dba:	461a      	mov	r2, r3
 8011dbc:	f7f1 fb05 	bl	80033ca <_read>
 8011dc0:	1c43      	adds	r3, r0, #1
 8011dc2:	d102      	bne.n	8011dca <_read_r+0x1e>
 8011dc4:	682b      	ldr	r3, [r5, #0]
 8011dc6:	b103      	cbz	r3, 8011dca <_read_r+0x1e>
 8011dc8:	6023      	str	r3, [r4, #0]
 8011dca:	bd38      	pop	{r3, r4, r5, pc}
 8011dcc:	24000d18 	.word	0x24000d18

08011dd0 <_write_r>:
 8011dd0:	b538      	push	{r3, r4, r5, lr}
 8011dd2:	4d07      	ldr	r5, [pc, #28]	@ (8011df0 <_write_r+0x20>)
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	4608      	mov	r0, r1
 8011dd8:	4611      	mov	r1, r2
 8011dda:	2200      	movs	r2, #0
 8011ddc:	602a      	str	r2, [r5, #0]
 8011dde:	461a      	mov	r2, r3
 8011de0:	f7ee fec2 	bl	8000b68 <_write>
 8011de4:	1c43      	adds	r3, r0, #1
 8011de6:	d102      	bne.n	8011dee <_write_r+0x1e>
 8011de8:	682b      	ldr	r3, [r5, #0]
 8011dea:	b103      	cbz	r3, 8011dee <_write_r+0x1e>
 8011dec:	6023      	str	r3, [r4, #0]
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	24000d18 	.word	0x24000d18

08011df4 <__errno>:
 8011df4:	4b01      	ldr	r3, [pc, #4]	@ (8011dfc <__errno+0x8>)
 8011df6:	6818      	ldr	r0, [r3, #0]
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	2400001c 	.word	0x2400001c

08011e00 <__libc_init_array>:
 8011e00:	b570      	push	{r4, r5, r6, lr}
 8011e02:	4d0d      	ldr	r5, [pc, #52]	@ (8011e38 <__libc_init_array+0x38>)
 8011e04:	4c0d      	ldr	r4, [pc, #52]	@ (8011e3c <__libc_init_array+0x3c>)
 8011e06:	1b64      	subs	r4, r4, r5
 8011e08:	10a4      	asrs	r4, r4, #2
 8011e0a:	2600      	movs	r6, #0
 8011e0c:	42a6      	cmp	r6, r4
 8011e0e:	d109      	bne.n	8011e24 <__libc_init_array+0x24>
 8011e10:	4d0b      	ldr	r5, [pc, #44]	@ (8011e40 <__libc_init_array+0x40>)
 8011e12:	4c0c      	ldr	r4, [pc, #48]	@ (8011e44 <__libc_init_array+0x44>)
 8011e14:	f003 fa1e 	bl	8015254 <_init>
 8011e18:	1b64      	subs	r4, r4, r5
 8011e1a:	10a4      	asrs	r4, r4, #2
 8011e1c:	2600      	movs	r6, #0
 8011e1e:	42a6      	cmp	r6, r4
 8011e20:	d105      	bne.n	8011e2e <__libc_init_array+0x2e>
 8011e22:	bd70      	pop	{r4, r5, r6, pc}
 8011e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e28:	4798      	blx	r3
 8011e2a:	3601      	adds	r6, #1
 8011e2c:	e7ee      	b.n	8011e0c <__libc_init_array+0xc>
 8011e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e32:	4798      	blx	r3
 8011e34:	3601      	adds	r6, #1
 8011e36:	e7f2      	b.n	8011e1e <__libc_init_array+0x1e>
 8011e38:	080157c8 	.word	0x080157c8
 8011e3c:	080157c8 	.word	0x080157c8
 8011e40:	080157c8 	.word	0x080157c8
 8011e44:	080157cc 	.word	0x080157cc

08011e48 <__retarget_lock_init_recursive>:
 8011e48:	4770      	bx	lr

08011e4a <__retarget_lock_acquire_recursive>:
 8011e4a:	4770      	bx	lr

08011e4c <__retarget_lock_release_recursive>:
 8011e4c:	4770      	bx	lr

08011e4e <memcpy>:
 8011e4e:	440a      	add	r2, r1
 8011e50:	4291      	cmp	r1, r2
 8011e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e56:	d100      	bne.n	8011e5a <memcpy+0xc>
 8011e58:	4770      	bx	lr
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e64:	4291      	cmp	r1, r2
 8011e66:	d1f9      	bne.n	8011e5c <memcpy+0xe>
 8011e68:	bd10      	pop	{r4, pc}
	...

08011e6c <nanf>:
 8011e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011e74 <nanf+0x8>
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	7fc00000 	.word	0x7fc00000

08011e78 <quorem>:
 8011e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	6903      	ldr	r3, [r0, #16]
 8011e7e:	690c      	ldr	r4, [r1, #16]
 8011e80:	42a3      	cmp	r3, r4
 8011e82:	4607      	mov	r7, r0
 8011e84:	db7e      	blt.n	8011f84 <quorem+0x10c>
 8011e86:	3c01      	subs	r4, #1
 8011e88:	f101 0814 	add.w	r8, r1, #20
 8011e8c:	00a3      	lsls	r3, r4, #2
 8011e8e:	f100 0514 	add.w	r5, r0, #20
 8011e92:	9300      	str	r3, [sp, #0]
 8011e94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e98:	9301      	str	r3, [sp, #4]
 8011e9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011eaa:	fbb2 f6f3 	udiv	r6, r2, r3
 8011eae:	d32e      	bcc.n	8011f0e <quorem+0x96>
 8011eb0:	f04f 0a00 	mov.w	sl, #0
 8011eb4:	46c4      	mov	ip, r8
 8011eb6:	46ae      	mov	lr, r5
 8011eb8:	46d3      	mov	fp, sl
 8011eba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011ebe:	b298      	uxth	r0, r3
 8011ec0:	fb06 a000 	mla	r0, r6, r0, sl
 8011ec4:	0c02      	lsrs	r2, r0, #16
 8011ec6:	0c1b      	lsrs	r3, r3, #16
 8011ec8:	fb06 2303 	mla	r3, r6, r3, r2
 8011ecc:	f8de 2000 	ldr.w	r2, [lr]
 8011ed0:	b280      	uxth	r0, r0
 8011ed2:	b292      	uxth	r2, r2
 8011ed4:	1a12      	subs	r2, r2, r0
 8011ed6:	445a      	add	r2, fp
 8011ed8:	f8de 0000 	ldr.w	r0, [lr]
 8011edc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011ee6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011eea:	b292      	uxth	r2, r2
 8011eec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011ef0:	45e1      	cmp	r9, ip
 8011ef2:	f84e 2b04 	str.w	r2, [lr], #4
 8011ef6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011efa:	d2de      	bcs.n	8011eba <quorem+0x42>
 8011efc:	9b00      	ldr	r3, [sp, #0]
 8011efe:	58eb      	ldr	r3, [r5, r3]
 8011f00:	b92b      	cbnz	r3, 8011f0e <quorem+0x96>
 8011f02:	9b01      	ldr	r3, [sp, #4]
 8011f04:	3b04      	subs	r3, #4
 8011f06:	429d      	cmp	r5, r3
 8011f08:	461a      	mov	r2, r3
 8011f0a:	d32f      	bcc.n	8011f6c <quorem+0xf4>
 8011f0c:	613c      	str	r4, [r7, #16]
 8011f0e:	4638      	mov	r0, r7
 8011f10:	f001 f954 	bl	80131bc <__mcmp>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	db25      	blt.n	8011f64 <quorem+0xec>
 8011f18:	4629      	mov	r1, r5
 8011f1a:	2000      	movs	r0, #0
 8011f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f20:	f8d1 c000 	ldr.w	ip, [r1]
 8011f24:	fa1f fe82 	uxth.w	lr, r2
 8011f28:	fa1f f38c 	uxth.w	r3, ip
 8011f2c:	eba3 030e 	sub.w	r3, r3, lr
 8011f30:	4403      	add	r3, r0
 8011f32:	0c12      	lsrs	r2, r2, #16
 8011f34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011f38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f42:	45c1      	cmp	r9, r8
 8011f44:	f841 3b04 	str.w	r3, [r1], #4
 8011f48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f4c:	d2e6      	bcs.n	8011f1c <quorem+0xa4>
 8011f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f56:	b922      	cbnz	r2, 8011f62 <quorem+0xea>
 8011f58:	3b04      	subs	r3, #4
 8011f5a:	429d      	cmp	r5, r3
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	d30b      	bcc.n	8011f78 <quorem+0x100>
 8011f60:	613c      	str	r4, [r7, #16]
 8011f62:	3601      	adds	r6, #1
 8011f64:	4630      	mov	r0, r6
 8011f66:	b003      	add	sp, #12
 8011f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f6c:	6812      	ldr	r2, [r2, #0]
 8011f6e:	3b04      	subs	r3, #4
 8011f70:	2a00      	cmp	r2, #0
 8011f72:	d1cb      	bne.n	8011f0c <quorem+0x94>
 8011f74:	3c01      	subs	r4, #1
 8011f76:	e7c6      	b.n	8011f06 <quorem+0x8e>
 8011f78:	6812      	ldr	r2, [r2, #0]
 8011f7a:	3b04      	subs	r3, #4
 8011f7c:	2a00      	cmp	r2, #0
 8011f7e:	d1ef      	bne.n	8011f60 <quorem+0xe8>
 8011f80:	3c01      	subs	r4, #1
 8011f82:	e7ea      	b.n	8011f5a <quorem+0xe2>
 8011f84:	2000      	movs	r0, #0
 8011f86:	e7ee      	b.n	8011f66 <quorem+0xee>

08011f88 <_dtoa_r>:
 8011f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8c:	ed2d 8b02 	vpush	{d8}
 8011f90:	69c7      	ldr	r7, [r0, #28]
 8011f92:	b091      	sub	sp, #68	@ 0x44
 8011f94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011f98:	ec55 4b10 	vmov	r4, r5, d0
 8011f9c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011f9e:	9107      	str	r1, [sp, #28]
 8011fa0:	4681      	mov	r9, r0
 8011fa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fa4:	930d      	str	r3, [sp, #52]	@ 0x34
 8011fa6:	b97f      	cbnz	r7, 8011fc8 <_dtoa_r+0x40>
 8011fa8:	2010      	movs	r0, #16
 8011faa:	f000 fd8d 	bl	8012ac8 <malloc>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	f8c9 001c 	str.w	r0, [r9, #28]
 8011fb4:	b920      	cbnz	r0, 8011fc0 <_dtoa_r+0x38>
 8011fb6:	4ba0      	ldr	r3, [pc, #640]	@ (8012238 <_dtoa_r+0x2b0>)
 8011fb8:	21ef      	movs	r1, #239	@ 0xef
 8011fba:	48a0      	ldr	r0, [pc, #640]	@ (801223c <_dtoa_r+0x2b4>)
 8011fbc:	f002 fd2c 	bl	8014a18 <__assert_func>
 8011fc0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011fc4:	6007      	str	r7, [r0, #0]
 8011fc6:	60c7      	str	r7, [r0, #12]
 8011fc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011fcc:	6819      	ldr	r1, [r3, #0]
 8011fce:	b159      	cbz	r1, 8011fe8 <_dtoa_r+0x60>
 8011fd0:	685a      	ldr	r2, [r3, #4]
 8011fd2:	604a      	str	r2, [r1, #4]
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	4093      	lsls	r3, r2
 8011fd8:	608b      	str	r3, [r1, #8]
 8011fda:	4648      	mov	r0, r9
 8011fdc:	f000 fe6a 	bl	8012cb4 <_Bfree>
 8011fe0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	601a      	str	r2, [r3, #0]
 8011fe8:	1e2b      	subs	r3, r5, #0
 8011fea:	bfbb      	ittet	lt
 8011fec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011ff0:	9303      	strlt	r3, [sp, #12]
 8011ff2:	2300      	movge	r3, #0
 8011ff4:	2201      	movlt	r2, #1
 8011ff6:	bfac      	ite	ge
 8011ff8:	6033      	strge	r3, [r6, #0]
 8011ffa:	6032      	strlt	r2, [r6, #0]
 8011ffc:	4b90      	ldr	r3, [pc, #576]	@ (8012240 <_dtoa_r+0x2b8>)
 8011ffe:	9e03      	ldr	r6, [sp, #12]
 8012000:	43b3      	bics	r3, r6
 8012002:	d110      	bne.n	8012026 <_dtoa_r+0x9e>
 8012004:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012006:	f242 730f 	movw	r3, #9999	@ 0x270f
 801200a:	6013      	str	r3, [r2, #0]
 801200c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012010:	4323      	orrs	r3, r4
 8012012:	f000 84de 	beq.w	80129d2 <_dtoa_r+0xa4a>
 8012016:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012018:	4f8a      	ldr	r7, [pc, #552]	@ (8012244 <_dtoa_r+0x2bc>)
 801201a:	2b00      	cmp	r3, #0
 801201c:	f000 84e0 	beq.w	80129e0 <_dtoa_r+0xa58>
 8012020:	1cfb      	adds	r3, r7, #3
 8012022:	f000 bcdb 	b.w	80129dc <_dtoa_r+0xa54>
 8012026:	ed9d 8b02 	vldr	d8, [sp, #8]
 801202a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012032:	d10a      	bne.n	801204a <_dtoa_r+0xc2>
 8012034:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012036:	2301      	movs	r3, #1
 8012038:	6013      	str	r3, [r2, #0]
 801203a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801203c:	b113      	cbz	r3, 8012044 <_dtoa_r+0xbc>
 801203e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012040:	4b81      	ldr	r3, [pc, #516]	@ (8012248 <_dtoa_r+0x2c0>)
 8012042:	6013      	str	r3, [r2, #0]
 8012044:	4f81      	ldr	r7, [pc, #516]	@ (801224c <_dtoa_r+0x2c4>)
 8012046:	f000 bccb 	b.w	80129e0 <_dtoa_r+0xa58>
 801204a:	aa0e      	add	r2, sp, #56	@ 0x38
 801204c:	a90f      	add	r1, sp, #60	@ 0x3c
 801204e:	4648      	mov	r0, r9
 8012050:	eeb0 0b48 	vmov.f64	d0, d8
 8012054:	f001 f9d2 	bl	80133fc <__d2b>
 8012058:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801205c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801205e:	9001      	str	r0, [sp, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d045      	beq.n	80120f0 <_dtoa_r+0x168>
 8012064:	eeb0 7b48 	vmov.f64	d7, d8
 8012068:	ee18 1a90 	vmov	r1, s17
 801206c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012070:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012074:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012078:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801207c:	2500      	movs	r5, #0
 801207e:	ee07 1a90 	vmov	s15, r1
 8012082:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012086:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012220 <_dtoa_r+0x298>
 801208a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801208e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012228 <_dtoa_r+0x2a0>
 8012092:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012096:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012230 <_dtoa_r+0x2a8>
 801209a:	ee07 3a90 	vmov	s15, r3
 801209e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80120a2:	eeb0 7b46 	vmov.f64	d7, d6
 80120a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80120aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80120ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80120b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b6:	ee16 8a90 	vmov	r8, s13
 80120ba:	d508      	bpl.n	80120ce <_dtoa_r+0x146>
 80120bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80120c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80120c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c8:	bf18      	it	ne
 80120ca:	f108 38ff 	addne.w	r8, r8, #4294967295
 80120ce:	f1b8 0f16 	cmp.w	r8, #22
 80120d2:	d82b      	bhi.n	801212c <_dtoa_r+0x1a4>
 80120d4:	495e      	ldr	r1, [pc, #376]	@ (8012250 <_dtoa_r+0x2c8>)
 80120d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80120da:	ed91 7b00 	vldr	d7, [r1]
 80120de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80120e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e6:	d501      	bpl.n	80120ec <_dtoa_r+0x164>
 80120e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80120ec:	2100      	movs	r1, #0
 80120ee:	e01e      	b.n	801212e <_dtoa_r+0x1a6>
 80120f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120f2:	4413      	add	r3, r2
 80120f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80120f8:	2920      	cmp	r1, #32
 80120fa:	bfc1      	itttt	gt
 80120fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012100:	408e      	lslgt	r6, r1
 8012102:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012106:	fa24 f101 	lsrgt.w	r1, r4, r1
 801210a:	bfd6      	itet	le
 801210c:	f1c1 0120 	rsble	r1, r1, #32
 8012110:	4331      	orrgt	r1, r6
 8012112:	fa04 f101 	lslle.w	r1, r4, r1
 8012116:	ee07 1a90 	vmov	s15, r1
 801211a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801211e:	3b01      	subs	r3, #1
 8012120:	ee17 1a90 	vmov	r1, s15
 8012124:	2501      	movs	r5, #1
 8012126:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801212a:	e7a8      	b.n	801207e <_dtoa_r+0xf6>
 801212c:	2101      	movs	r1, #1
 801212e:	1ad2      	subs	r2, r2, r3
 8012130:	1e53      	subs	r3, r2, #1
 8012132:	9306      	str	r3, [sp, #24]
 8012134:	bf45      	ittet	mi
 8012136:	f1c2 0301 	rsbmi	r3, r2, #1
 801213a:	9305      	strmi	r3, [sp, #20]
 801213c:	2300      	movpl	r3, #0
 801213e:	2300      	movmi	r3, #0
 8012140:	bf4c      	ite	mi
 8012142:	9306      	strmi	r3, [sp, #24]
 8012144:	9305      	strpl	r3, [sp, #20]
 8012146:	f1b8 0f00 	cmp.w	r8, #0
 801214a:	910c      	str	r1, [sp, #48]	@ 0x30
 801214c:	db18      	blt.n	8012180 <_dtoa_r+0x1f8>
 801214e:	9b06      	ldr	r3, [sp, #24]
 8012150:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012154:	4443      	add	r3, r8
 8012156:	9306      	str	r3, [sp, #24]
 8012158:	2300      	movs	r3, #0
 801215a:	9a07      	ldr	r2, [sp, #28]
 801215c:	2a09      	cmp	r2, #9
 801215e:	d849      	bhi.n	80121f4 <_dtoa_r+0x26c>
 8012160:	2a05      	cmp	r2, #5
 8012162:	bfc4      	itt	gt
 8012164:	3a04      	subgt	r2, #4
 8012166:	9207      	strgt	r2, [sp, #28]
 8012168:	9a07      	ldr	r2, [sp, #28]
 801216a:	f1a2 0202 	sub.w	r2, r2, #2
 801216e:	bfcc      	ite	gt
 8012170:	2400      	movgt	r4, #0
 8012172:	2401      	movle	r4, #1
 8012174:	2a03      	cmp	r2, #3
 8012176:	d848      	bhi.n	801220a <_dtoa_r+0x282>
 8012178:	e8df f002 	tbb	[pc, r2]
 801217c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012180:	9b05      	ldr	r3, [sp, #20]
 8012182:	2200      	movs	r2, #0
 8012184:	eba3 0308 	sub.w	r3, r3, r8
 8012188:	9305      	str	r3, [sp, #20]
 801218a:	920a      	str	r2, [sp, #40]	@ 0x28
 801218c:	f1c8 0300 	rsb	r3, r8, #0
 8012190:	e7e3      	b.n	801215a <_dtoa_r+0x1d2>
 8012192:	2200      	movs	r2, #0
 8012194:	9208      	str	r2, [sp, #32]
 8012196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012198:	2a00      	cmp	r2, #0
 801219a:	dc39      	bgt.n	8012210 <_dtoa_r+0x288>
 801219c:	f04f 0b01 	mov.w	fp, #1
 80121a0:	46da      	mov	sl, fp
 80121a2:	465a      	mov	r2, fp
 80121a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80121a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80121ac:	2100      	movs	r1, #0
 80121ae:	2004      	movs	r0, #4
 80121b0:	f100 0614 	add.w	r6, r0, #20
 80121b4:	4296      	cmp	r6, r2
 80121b6:	d930      	bls.n	801221a <_dtoa_r+0x292>
 80121b8:	6079      	str	r1, [r7, #4]
 80121ba:	4648      	mov	r0, r9
 80121bc:	9304      	str	r3, [sp, #16]
 80121be:	f000 fd39 	bl	8012c34 <_Balloc>
 80121c2:	9b04      	ldr	r3, [sp, #16]
 80121c4:	4607      	mov	r7, r0
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d146      	bne.n	8012258 <_dtoa_r+0x2d0>
 80121ca:	4b22      	ldr	r3, [pc, #136]	@ (8012254 <_dtoa_r+0x2cc>)
 80121cc:	4602      	mov	r2, r0
 80121ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80121d2:	e6f2      	b.n	8011fba <_dtoa_r+0x32>
 80121d4:	2201      	movs	r2, #1
 80121d6:	e7dd      	b.n	8012194 <_dtoa_r+0x20c>
 80121d8:	2200      	movs	r2, #0
 80121da:	9208      	str	r2, [sp, #32]
 80121dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121de:	eb08 0b02 	add.w	fp, r8, r2
 80121e2:	f10b 0a01 	add.w	sl, fp, #1
 80121e6:	4652      	mov	r2, sl
 80121e8:	2a01      	cmp	r2, #1
 80121ea:	bfb8      	it	lt
 80121ec:	2201      	movlt	r2, #1
 80121ee:	e7db      	b.n	80121a8 <_dtoa_r+0x220>
 80121f0:	2201      	movs	r2, #1
 80121f2:	e7f2      	b.n	80121da <_dtoa_r+0x252>
 80121f4:	2401      	movs	r4, #1
 80121f6:	2200      	movs	r2, #0
 80121f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80121fc:	f04f 3bff 	mov.w	fp, #4294967295
 8012200:	2100      	movs	r1, #0
 8012202:	46da      	mov	sl, fp
 8012204:	2212      	movs	r2, #18
 8012206:	9109      	str	r1, [sp, #36]	@ 0x24
 8012208:	e7ce      	b.n	80121a8 <_dtoa_r+0x220>
 801220a:	2201      	movs	r2, #1
 801220c:	9208      	str	r2, [sp, #32]
 801220e:	e7f5      	b.n	80121fc <_dtoa_r+0x274>
 8012210:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012214:	46da      	mov	sl, fp
 8012216:	465a      	mov	r2, fp
 8012218:	e7c6      	b.n	80121a8 <_dtoa_r+0x220>
 801221a:	3101      	adds	r1, #1
 801221c:	0040      	lsls	r0, r0, #1
 801221e:	e7c7      	b.n	80121b0 <_dtoa_r+0x228>
 8012220:	636f4361 	.word	0x636f4361
 8012224:	3fd287a7 	.word	0x3fd287a7
 8012228:	8b60c8b3 	.word	0x8b60c8b3
 801222c:	3fc68a28 	.word	0x3fc68a28
 8012230:	509f79fb 	.word	0x509f79fb
 8012234:	3fd34413 	.word	0x3fd34413
 8012238:	080153d6 	.word	0x080153d6
 801223c:	080153ed 	.word	0x080153ed
 8012240:	7ff00000 	.word	0x7ff00000
 8012244:	080153d2 	.word	0x080153d2
 8012248:	080153a1 	.word	0x080153a1
 801224c:	080153a0 	.word	0x080153a0
 8012250:	080154e8 	.word	0x080154e8
 8012254:	08015445 	.word	0x08015445
 8012258:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801225c:	f1ba 0f0e 	cmp.w	sl, #14
 8012260:	6010      	str	r0, [r2, #0]
 8012262:	d86f      	bhi.n	8012344 <_dtoa_r+0x3bc>
 8012264:	2c00      	cmp	r4, #0
 8012266:	d06d      	beq.n	8012344 <_dtoa_r+0x3bc>
 8012268:	f1b8 0f00 	cmp.w	r8, #0
 801226c:	f340 80c2 	ble.w	80123f4 <_dtoa_r+0x46c>
 8012270:	4aca      	ldr	r2, [pc, #808]	@ (801259c <_dtoa_r+0x614>)
 8012272:	f008 010f 	and.w	r1, r8, #15
 8012276:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801227a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801227e:	ed92 7b00 	vldr	d7, [r2]
 8012282:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012286:	f000 80a9 	beq.w	80123dc <_dtoa_r+0x454>
 801228a:	4ac5      	ldr	r2, [pc, #788]	@ (80125a0 <_dtoa_r+0x618>)
 801228c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012290:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012294:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012298:	f001 010f 	and.w	r1, r1, #15
 801229c:	2203      	movs	r2, #3
 801229e:	48c0      	ldr	r0, [pc, #768]	@ (80125a0 <_dtoa_r+0x618>)
 80122a0:	2900      	cmp	r1, #0
 80122a2:	f040 809d 	bne.w	80123e0 <_dtoa_r+0x458>
 80122a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80122aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80122ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122b8:	2900      	cmp	r1, #0
 80122ba:	f000 80c1 	beq.w	8012440 <_dtoa_r+0x4b8>
 80122be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80122c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80122c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ca:	f140 80b9 	bpl.w	8012440 <_dtoa_r+0x4b8>
 80122ce:	f1ba 0f00 	cmp.w	sl, #0
 80122d2:	f000 80b5 	beq.w	8012440 <_dtoa_r+0x4b8>
 80122d6:	f1bb 0f00 	cmp.w	fp, #0
 80122da:	dd31      	ble.n	8012340 <_dtoa_r+0x3b8>
 80122dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80122e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80122e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80122ec:	9104      	str	r1, [sp, #16]
 80122ee:	3201      	adds	r2, #1
 80122f0:	465c      	mov	r4, fp
 80122f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80122f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80122fa:	ee07 2a90 	vmov	s15, r2
 80122fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012302:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012306:	ee15 2a90 	vmov	r2, s11
 801230a:	ec51 0b15 	vmov	r0, r1, d5
 801230e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012312:	2c00      	cmp	r4, #0
 8012314:	f040 8098 	bne.w	8012448 <_dtoa_r+0x4c0>
 8012318:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801231c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012320:	ec41 0b17 	vmov	d7, r0, r1
 8012324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232c:	f300 8261 	bgt.w	80127f2 <_dtoa_r+0x86a>
 8012330:	eeb1 7b47 	vneg.f64	d7, d7
 8012334:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801233c:	f100 80f5 	bmi.w	801252a <_dtoa_r+0x5a2>
 8012340:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012344:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012346:	2a00      	cmp	r2, #0
 8012348:	f2c0 812c 	blt.w	80125a4 <_dtoa_r+0x61c>
 801234c:	f1b8 0f0e 	cmp.w	r8, #14
 8012350:	f300 8128 	bgt.w	80125a4 <_dtoa_r+0x61c>
 8012354:	4b91      	ldr	r3, [pc, #580]	@ (801259c <_dtoa_r+0x614>)
 8012356:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801235a:	ed93 6b00 	vldr	d6, [r3]
 801235e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012360:	2b00      	cmp	r3, #0
 8012362:	da03      	bge.n	801236c <_dtoa_r+0x3e4>
 8012364:	f1ba 0f00 	cmp.w	sl, #0
 8012368:	f340 80d2 	ble.w	8012510 <_dtoa_r+0x588>
 801236c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012370:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012374:	463e      	mov	r6, r7
 8012376:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801237a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801237e:	ee15 3a10 	vmov	r3, s10
 8012382:	3330      	adds	r3, #48	@ 0x30
 8012384:	f806 3b01 	strb.w	r3, [r6], #1
 8012388:	1bf3      	subs	r3, r6, r7
 801238a:	459a      	cmp	sl, r3
 801238c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012390:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012394:	f040 80f8 	bne.w	8012588 <_dtoa_r+0x600>
 8012398:	ee37 7b07 	vadd.f64	d7, d7, d7
 801239c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80123a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a4:	f300 80dd 	bgt.w	8012562 <_dtoa_r+0x5da>
 80123a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80123ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b0:	d104      	bne.n	80123bc <_dtoa_r+0x434>
 80123b2:	ee15 3a10 	vmov	r3, s10
 80123b6:	07db      	lsls	r3, r3, #31
 80123b8:	f100 80d3 	bmi.w	8012562 <_dtoa_r+0x5da>
 80123bc:	9901      	ldr	r1, [sp, #4]
 80123be:	4648      	mov	r0, r9
 80123c0:	f000 fc78 	bl	8012cb4 <_Bfree>
 80123c4:	2300      	movs	r3, #0
 80123c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123c8:	7033      	strb	r3, [r6, #0]
 80123ca:	f108 0301 	add.w	r3, r8, #1
 80123ce:	6013      	str	r3, [r2, #0]
 80123d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	f000 8304 	beq.w	80129e0 <_dtoa_r+0xa58>
 80123d8:	601e      	str	r6, [r3, #0]
 80123da:	e301      	b.n	80129e0 <_dtoa_r+0xa58>
 80123dc:	2202      	movs	r2, #2
 80123de:	e75e      	b.n	801229e <_dtoa_r+0x316>
 80123e0:	07cc      	lsls	r4, r1, #31
 80123e2:	d504      	bpl.n	80123ee <_dtoa_r+0x466>
 80123e4:	ed90 6b00 	vldr	d6, [r0]
 80123e8:	3201      	adds	r2, #1
 80123ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80123ee:	1049      	asrs	r1, r1, #1
 80123f0:	3008      	adds	r0, #8
 80123f2:	e755      	b.n	80122a0 <_dtoa_r+0x318>
 80123f4:	d022      	beq.n	801243c <_dtoa_r+0x4b4>
 80123f6:	f1c8 0100 	rsb	r1, r8, #0
 80123fa:	4a68      	ldr	r2, [pc, #416]	@ (801259c <_dtoa_r+0x614>)
 80123fc:	f001 000f 	and.w	r0, r1, #15
 8012400:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012404:	ed92 7b00 	vldr	d7, [r2]
 8012408:	ee28 7b07 	vmul.f64	d7, d8, d7
 801240c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012410:	4863      	ldr	r0, [pc, #396]	@ (80125a0 <_dtoa_r+0x618>)
 8012412:	1109      	asrs	r1, r1, #4
 8012414:	2400      	movs	r4, #0
 8012416:	2202      	movs	r2, #2
 8012418:	b929      	cbnz	r1, 8012426 <_dtoa_r+0x49e>
 801241a:	2c00      	cmp	r4, #0
 801241c:	f43f af49 	beq.w	80122b2 <_dtoa_r+0x32a>
 8012420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012424:	e745      	b.n	80122b2 <_dtoa_r+0x32a>
 8012426:	07ce      	lsls	r6, r1, #31
 8012428:	d505      	bpl.n	8012436 <_dtoa_r+0x4ae>
 801242a:	ed90 6b00 	vldr	d6, [r0]
 801242e:	3201      	adds	r2, #1
 8012430:	2401      	movs	r4, #1
 8012432:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012436:	1049      	asrs	r1, r1, #1
 8012438:	3008      	adds	r0, #8
 801243a:	e7ed      	b.n	8012418 <_dtoa_r+0x490>
 801243c:	2202      	movs	r2, #2
 801243e:	e738      	b.n	80122b2 <_dtoa_r+0x32a>
 8012440:	f8cd 8010 	str.w	r8, [sp, #16]
 8012444:	4654      	mov	r4, sl
 8012446:	e754      	b.n	80122f2 <_dtoa_r+0x36a>
 8012448:	4a54      	ldr	r2, [pc, #336]	@ (801259c <_dtoa_r+0x614>)
 801244a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801244e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012452:	9a08      	ldr	r2, [sp, #32]
 8012454:	ec41 0b17 	vmov	d7, r0, r1
 8012458:	443c      	add	r4, r7
 801245a:	b34a      	cbz	r2, 80124b0 <_dtoa_r+0x528>
 801245c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012460:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012464:	463e      	mov	r6, r7
 8012466:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801246a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801246e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012472:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012476:	ee14 2a90 	vmov	r2, s9
 801247a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801247e:	3230      	adds	r2, #48	@ 0x30
 8012480:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248c:	f806 2b01 	strb.w	r2, [r6], #1
 8012490:	d438      	bmi.n	8012504 <_dtoa_r+0x57c>
 8012492:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012496:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249e:	d462      	bmi.n	8012566 <_dtoa_r+0x5de>
 80124a0:	42a6      	cmp	r6, r4
 80124a2:	f43f af4d 	beq.w	8012340 <_dtoa_r+0x3b8>
 80124a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80124aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80124ae:	e7e0      	b.n	8012472 <_dtoa_r+0x4ea>
 80124b0:	4621      	mov	r1, r4
 80124b2:	463e      	mov	r6, r7
 80124b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80124b8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80124bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80124c0:	ee14 2a90 	vmov	r2, s9
 80124c4:	3230      	adds	r2, #48	@ 0x30
 80124c6:	f806 2b01 	strb.w	r2, [r6], #1
 80124ca:	42a6      	cmp	r6, r4
 80124cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80124d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80124d4:	d119      	bne.n	801250a <_dtoa_r+0x582>
 80124d6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80124da:	ee37 4b05 	vadd.f64	d4, d7, d5
 80124de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80124e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e6:	dc3e      	bgt.n	8012566 <_dtoa_r+0x5de>
 80124e8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80124ec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80124f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f4:	f57f af24 	bpl.w	8012340 <_dtoa_r+0x3b8>
 80124f8:	460e      	mov	r6, r1
 80124fa:	3901      	subs	r1, #1
 80124fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012500:	2b30      	cmp	r3, #48	@ 0x30
 8012502:	d0f9      	beq.n	80124f8 <_dtoa_r+0x570>
 8012504:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012508:	e758      	b.n	80123bc <_dtoa_r+0x434>
 801250a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801250e:	e7d5      	b.n	80124bc <_dtoa_r+0x534>
 8012510:	d10b      	bne.n	801252a <_dtoa_r+0x5a2>
 8012512:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012516:	ee26 6b07 	vmul.f64	d6, d6, d7
 801251a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801251e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012526:	f2c0 8161 	blt.w	80127ec <_dtoa_r+0x864>
 801252a:	2400      	movs	r4, #0
 801252c:	4625      	mov	r5, r4
 801252e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012530:	43db      	mvns	r3, r3
 8012532:	9304      	str	r3, [sp, #16]
 8012534:	463e      	mov	r6, r7
 8012536:	f04f 0800 	mov.w	r8, #0
 801253a:	4621      	mov	r1, r4
 801253c:	4648      	mov	r0, r9
 801253e:	f000 fbb9 	bl	8012cb4 <_Bfree>
 8012542:	2d00      	cmp	r5, #0
 8012544:	d0de      	beq.n	8012504 <_dtoa_r+0x57c>
 8012546:	f1b8 0f00 	cmp.w	r8, #0
 801254a:	d005      	beq.n	8012558 <_dtoa_r+0x5d0>
 801254c:	45a8      	cmp	r8, r5
 801254e:	d003      	beq.n	8012558 <_dtoa_r+0x5d0>
 8012550:	4641      	mov	r1, r8
 8012552:	4648      	mov	r0, r9
 8012554:	f000 fbae 	bl	8012cb4 <_Bfree>
 8012558:	4629      	mov	r1, r5
 801255a:	4648      	mov	r0, r9
 801255c:	f000 fbaa 	bl	8012cb4 <_Bfree>
 8012560:	e7d0      	b.n	8012504 <_dtoa_r+0x57c>
 8012562:	f8cd 8010 	str.w	r8, [sp, #16]
 8012566:	4633      	mov	r3, r6
 8012568:	461e      	mov	r6, r3
 801256a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801256e:	2a39      	cmp	r2, #57	@ 0x39
 8012570:	d106      	bne.n	8012580 <_dtoa_r+0x5f8>
 8012572:	429f      	cmp	r7, r3
 8012574:	d1f8      	bne.n	8012568 <_dtoa_r+0x5e0>
 8012576:	9a04      	ldr	r2, [sp, #16]
 8012578:	3201      	adds	r2, #1
 801257a:	9204      	str	r2, [sp, #16]
 801257c:	2230      	movs	r2, #48	@ 0x30
 801257e:	703a      	strb	r2, [r7, #0]
 8012580:	781a      	ldrb	r2, [r3, #0]
 8012582:	3201      	adds	r2, #1
 8012584:	701a      	strb	r2, [r3, #0]
 8012586:	e7bd      	b.n	8012504 <_dtoa_r+0x57c>
 8012588:	ee27 7b04 	vmul.f64	d7, d7, d4
 801258c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012594:	f47f aeef 	bne.w	8012376 <_dtoa_r+0x3ee>
 8012598:	e710      	b.n	80123bc <_dtoa_r+0x434>
 801259a:	bf00      	nop
 801259c:	080154e8 	.word	0x080154e8
 80125a0:	080154c0 	.word	0x080154c0
 80125a4:	9908      	ldr	r1, [sp, #32]
 80125a6:	2900      	cmp	r1, #0
 80125a8:	f000 80e3 	beq.w	8012772 <_dtoa_r+0x7ea>
 80125ac:	9907      	ldr	r1, [sp, #28]
 80125ae:	2901      	cmp	r1, #1
 80125b0:	f300 80c8 	bgt.w	8012744 <_dtoa_r+0x7bc>
 80125b4:	2d00      	cmp	r5, #0
 80125b6:	f000 80c1 	beq.w	801273c <_dtoa_r+0x7b4>
 80125ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80125be:	9e05      	ldr	r6, [sp, #20]
 80125c0:	461c      	mov	r4, r3
 80125c2:	9304      	str	r3, [sp, #16]
 80125c4:	9b05      	ldr	r3, [sp, #20]
 80125c6:	4413      	add	r3, r2
 80125c8:	9305      	str	r3, [sp, #20]
 80125ca:	9b06      	ldr	r3, [sp, #24]
 80125cc:	2101      	movs	r1, #1
 80125ce:	4413      	add	r3, r2
 80125d0:	4648      	mov	r0, r9
 80125d2:	9306      	str	r3, [sp, #24]
 80125d4:	f000 fc6c 	bl	8012eb0 <__i2b>
 80125d8:	9b04      	ldr	r3, [sp, #16]
 80125da:	4605      	mov	r5, r0
 80125dc:	b166      	cbz	r6, 80125f8 <_dtoa_r+0x670>
 80125de:	9a06      	ldr	r2, [sp, #24]
 80125e0:	2a00      	cmp	r2, #0
 80125e2:	dd09      	ble.n	80125f8 <_dtoa_r+0x670>
 80125e4:	42b2      	cmp	r2, r6
 80125e6:	9905      	ldr	r1, [sp, #20]
 80125e8:	bfa8      	it	ge
 80125ea:	4632      	movge	r2, r6
 80125ec:	1a89      	subs	r1, r1, r2
 80125ee:	9105      	str	r1, [sp, #20]
 80125f0:	9906      	ldr	r1, [sp, #24]
 80125f2:	1ab6      	subs	r6, r6, r2
 80125f4:	1a8a      	subs	r2, r1, r2
 80125f6:	9206      	str	r2, [sp, #24]
 80125f8:	b1fb      	cbz	r3, 801263a <_dtoa_r+0x6b2>
 80125fa:	9a08      	ldr	r2, [sp, #32]
 80125fc:	2a00      	cmp	r2, #0
 80125fe:	f000 80bc 	beq.w	801277a <_dtoa_r+0x7f2>
 8012602:	b19c      	cbz	r4, 801262c <_dtoa_r+0x6a4>
 8012604:	4629      	mov	r1, r5
 8012606:	4622      	mov	r2, r4
 8012608:	4648      	mov	r0, r9
 801260a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801260c:	f000 fd10 	bl	8013030 <__pow5mult>
 8012610:	9a01      	ldr	r2, [sp, #4]
 8012612:	4601      	mov	r1, r0
 8012614:	4605      	mov	r5, r0
 8012616:	4648      	mov	r0, r9
 8012618:	f000 fc60 	bl	8012edc <__multiply>
 801261c:	9901      	ldr	r1, [sp, #4]
 801261e:	9004      	str	r0, [sp, #16]
 8012620:	4648      	mov	r0, r9
 8012622:	f000 fb47 	bl	8012cb4 <_Bfree>
 8012626:	9a04      	ldr	r2, [sp, #16]
 8012628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801262a:	9201      	str	r2, [sp, #4]
 801262c:	1b1a      	subs	r2, r3, r4
 801262e:	d004      	beq.n	801263a <_dtoa_r+0x6b2>
 8012630:	9901      	ldr	r1, [sp, #4]
 8012632:	4648      	mov	r0, r9
 8012634:	f000 fcfc 	bl	8013030 <__pow5mult>
 8012638:	9001      	str	r0, [sp, #4]
 801263a:	2101      	movs	r1, #1
 801263c:	4648      	mov	r0, r9
 801263e:	f000 fc37 	bl	8012eb0 <__i2b>
 8012642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012644:	4604      	mov	r4, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	f000 81d0 	beq.w	80129ec <_dtoa_r+0xa64>
 801264c:	461a      	mov	r2, r3
 801264e:	4601      	mov	r1, r0
 8012650:	4648      	mov	r0, r9
 8012652:	f000 fced 	bl	8013030 <__pow5mult>
 8012656:	9b07      	ldr	r3, [sp, #28]
 8012658:	2b01      	cmp	r3, #1
 801265a:	4604      	mov	r4, r0
 801265c:	f300 8095 	bgt.w	801278a <_dtoa_r+0x802>
 8012660:	9b02      	ldr	r3, [sp, #8]
 8012662:	2b00      	cmp	r3, #0
 8012664:	f040 808b 	bne.w	801277e <_dtoa_r+0x7f6>
 8012668:	9b03      	ldr	r3, [sp, #12]
 801266a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801266e:	2a00      	cmp	r2, #0
 8012670:	f040 8087 	bne.w	8012782 <_dtoa_r+0x7fa>
 8012674:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012678:	0d12      	lsrs	r2, r2, #20
 801267a:	0512      	lsls	r2, r2, #20
 801267c:	2a00      	cmp	r2, #0
 801267e:	f000 8082 	beq.w	8012786 <_dtoa_r+0x7fe>
 8012682:	9b05      	ldr	r3, [sp, #20]
 8012684:	3301      	adds	r3, #1
 8012686:	9305      	str	r3, [sp, #20]
 8012688:	9b06      	ldr	r3, [sp, #24]
 801268a:	3301      	adds	r3, #1
 801268c:	9306      	str	r3, [sp, #24]
 801268e:	2301      	movs	r3, #1
 8012690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012694:	2b00      	cmp	r3, #0
 8012696:	f000 81af 	beq.w	80129f8 <_dtoa_r+0xa70>
 801269a:	6922      	ldr	r2, [r4, #16]
 801269c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80126a0:	6910      	ldr	r0, [r2, #16]
 80126a2:	f000 fbb9 	bl	8012e18 <__hi0bits>
 80126a6:	f1c0 0020 	rsb	r0, r0, #32
 80126aa:	9b06      	ldr	r3, [sp, #24]
 80126ac:	4418      	add	r0, r3
 80126ae:	f010 001f 	ands.w	r0, r0, #31
 80126b2:	d076      	beq.n	80127a2 <_dtoa_r+0x81a>
 80126b4:	f1c0 0220 	rsb	r2, r0, #32
 80126b8:	2a04      	cmp	r2, #4
 80126ba:	dd69      	ble.n	8012790 <_dtoa_r+0x808>
 80126bc:	9b05      	ldr	r3, [sp, #20]
 80126be:	f1c0 001c 	rsb	r0, r0, #28
 80126c2:	4403      	add	r3, r0
 80126c4:	9305      	str	r3, [sp, #20]
 80126c6:	9b06      	ldr	r3, [sp, #24]
 80126c8:	4406      	add	r6, r0
 80126ca:	4403      	add	r3, r0
 80126cc:	9306      	str	r3, [sp, #24]
 80126ce:	9b05      	ldr	r3, [sp, #20]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	dd05      	ble.n	80126e0 <_dtoa_r+0x758>
 80126d4:	9901      	ldr	r1, [sp, #4]
 80126d6:	461a      	mov	r2, r3
 80126d8:	4648      	mov	r0, r9
 80126da:	f000 fd03 	bl	80130e4 <__lshift>
 80126de:	9001      	str	r0, [sp, #4]
 80126e0:	9b06      	ldr	r3, [sp, #24]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	dd05      	ble.n	80126f2 <_dtoa_r+0x76a>
 80126e6:	4621      	mov	r1, r4
 80126e8:	461a      	mov	r2, r3
 80126ea:	4648      	mov	r0, r9
 80126ec:	f000 fcfa 	bl	80130e4 <__lshift>
 80126f0:	4604      	mov	r4, r0
 80126f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d056      	beq.n	80127a6 <_dtoa_r+0x81e>
 80126f8:	9801      	ldr	r0, [sp, #4]
 80126fa:	4621      	mov	r1, r4
 80126fc:	f000 fd5e 	bl	80131bc <__mcmp>
 8012700:	2800      	cmp	r0, #0
 8012702:	da50      	bge.n	80127a6 <_dtoa_r+0x81e>
 8012704:	f108 33ff 	add.w	r3, r8, #4294967295
 8012708:	9304      	str	r3, [sp, #16]
 801270a:	9901      	ldr	r1, [sp, #4]
 801270c:	2300      	movs	r3, #0
 801270e:	220a      	movs	r2, #10
 8012710:	4648      	mov	r0, r9
 8012712:	f000 faf1 	bl	8012cf8 <__multadd>
 8012716:	9b08      	ldr	r3, [sp, #32]
 8012718:	9001      	str	r0, [sp, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	f000 816e 	beq.w	80129fc <_dtoa_r+0xa74>
 8012720:	4629      	mov	r1, r5
 8012722:	2300      	movs	r3, #0
 8012724:	220a      	movs	r2, #10
 8012726:	4648      	mov	r0, r9
 8012728:	f000 fae6 	bl	8012cf8 <__multadd>
 801272c:	f1bb 0f00 	cmp.w	fp, #0
 8012730:	4605      	mov	r5, r0
 8012732:	dc64      	bgt.n	80127fe <_dtoa_r+0x876>
 8012734:	9b07      	ldr	r3, [sp, #28]
 8012736:	2b02      	cmp	r3, #2
 8012738:	dc3e      	bgt.n	80127b8 <_dtoa_r+0x830>
 801273a:	e060      	b.n	80127fe <_dtoa_r+0x876>
 801273c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801273e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012742:	e73c      	b.n	80125be <_dtoa_r+0x636>
 8012744:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012748:	42a3      	cmp	r3, r4
 801274a:	bfbf      	itttt	lt
 801274c:	1ae2      	sublt	r2, r4, r3
 801274e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012750:	189b      	addlt	r3, r3, r2
 8012752:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012754:	bfae      	itee	ge
 8012756:	1b1c      	subge	r4, r3, r4
 8012758:	4623      	movlt	r3, r4
 801275a:	2400      	movlt	r4, #0
 801275c:	f1ba 0f00 	cmp.w	sl, #0
 8012760:	bfb5      	itete	lt
 8012762:	9a05      	ldrlt	r2, [sp, #20]
 8012764:	9e05      	ldrge	r6, [sp, #20]
 8012766:	eba2 060a 	sublt.w	r6, r2, sl
 801276a:	4652      	movge	r2, sl
 801276c:	bfb8      	it	lt
 801276e:	2200      	movlt	r2, #0
 8012770:	e727      	b.n	80125c2 <_dtoa_r+0x63a>
 8012772:	9e05      	ldr	r6, [sp, #20]
 8012774:	9d08      	ldr	r5, [sp, #32]
 8012776:	461c      	mov	r4, r3
 8012778:	e730      	b.n	80125dc <_dtoa_r+0x654>
 801277a:	461a      	mov	r2, r3
 801277c:	e758      	b.n	8012630 <_dtoa_r+0x6a8>
 801277e:	2300      	movs	r3, #0
 8012780:	e786      	b.n	8012690 <_dtoa_r+0x708>
 8012782:	9b02      	ldr	r3, [sp, #8]
 8012784:	e784      	b.n	8012690 <_dtoa_r+0x708>
 8012786:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012788:	e783      	b.n	8012692 <_dtoa_r+0x70a>
 801278a:	2300      	movs	r3, #0
 801278c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801278e:	e784      	b.n	801269a <_dtoa_r+0x712>
 8012790:	d09d      	beq.n	80126ce <_dtoa_r+0x746>
 8012792:	9b05      	ldr	r3, [sp, #20]
 8012794:	321c      	adds	r2, #28
 8012796:	4413      	add	r3, r2
 8012798:	9305      	str	r3, [sp, #20]
 801279a:	9b06      	ldr	r3, [sp, #24]
 801279c:	4416      	add	r6, r2
 801279e:	4413      	add	r3, r2
 80127a0:	e794      	b.n	80126cc <_dtoa_r+0x744>
 80127a2:	4602      	mov	r2, r0
 80127a4:	e7f5      	b.n	8012792 <_dtoa_r+0x80a>
 80127a6:	f1ba 0f00 	cmp.w	sl, #0
 80127aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80127ae:	46d3      	mov	fp, sl
 80127b0:	dc21      	bgt.n	80127f6 <_dtoa_r+0x86e>
 80127b2:	9b07      	ldr	r3, [sp, #28]
 80127b4:	2b02      	cmp	r3, #2
 80127b6:	dd1e      	ble.n	80127f6 <_dtoa_r+0x86e>
 80127b8:	f1bb 0f00 	cmp.w	fp, #0
 80127bc:	f47f aeb7 	bne.w	801252e <_dtoa_r+0x5a6>
 80127c0:	4621      	mov	r1, r4
 80127c2:	465b      	mov	r3, fp
 80127c4:	2205      	movs	r2, #5
 80127c6:	4648      	mov	r0, r9
 80127c8:	f000 fa96 	bl	8012cf8 <__multadd>
 80127cc:	4601      	mov	r1, r0
 80127ce:	4604      	mov	r4, r0
 80127d0:	9801      	ldr	r0, [sp, #4]
 80127d2:	f000 fcf3 	bl	80131bc <__mcmp>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	f77f aea9 	ble.w	801252e <_dtoa_r+0x5a6>
 80127dc:	463e      	mov	r6, r7
 80127de:	2331      	movs	r3, #49	@ 0x31
 80127e0:	f806 3b01 	strb.w	r3, [r6], #1
 80127e4:	9b04      	ldr	r3, [sp, #16]
 80127e6:	3301      	adds	r3, #1
 80127e8:	9304      	str	r3, [sp, #16]
 80127ea:	e6a4      	b.n	8012536 <_dtoa_r+0x5ae>
 80127ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80127f0:	4654      	mov	r4, sl
 80127f2:	4625      	mov	r5, r4
 80127f4:	e7f2      	b.n	80127dc <_dtoa_r+0x854>
 80127f6:	9b08      	ldr	r3, [sp, #32]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f000 8103 	beq.w	8012a04 <_dtoa_r+0xa7c>
 80127fe:	2e00      	cmp	r6, #0
 8012800:	dd05      	ble.n	801280e <_dtoa_r+0x886>
 8012802:	4629      	mov	r1, r5
 8012804:	4632      	mov	r2, r6
 8012806:	4648      	mov	r0, r9
 8012808:	f000 fc6c 	bl	80130e4 <__lshift>
 801280c:	4605      	mov	r5, r0
 801280e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012810:	2b00      	cmp	r3, #0
 8012812:	d058      	beq.n	80128c6 <_dtoa_r+0x93e>
 8012814:	6869      	ldr	r1, [r5, #4]
 8012816:	4648      	mov	r0, r9
 8012818:	f000 fa0c 	bl	8012c34 <_Balloc>
 801281c:	4606      	mov	r6, r0
 801281e:	b928      	cbnz	r0, 801282c <_dtoa_r+0x8a4>
 8012820:	4b82      	ldr	r3, [pc, #520]	@ (8012a2c <_dtoa_r+0xaa4>)
 8012822:	4602      	mov	r2, r0
 8012824:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012828:	f7ff bbc7 	b.w	8011fba <_dtoa_r+0x32>
 801282c:	692a      	ldr	r2, [r5, #16]
 801282e:	3202      	adds	r2, #2
 8012830:	0092      	lsls	r2, r2, #2
 8012832:	f105 010c 	add.w	r1, r5, #12
 8012836:	300c      	adds	r0, #12
 8012838:	f7ff fb09 	bl	8011e4e <memcpy>
 801283c:	2201      	movs	r2, #1
 801283e:	4631      	mov	r1, r6
 8012840:	4648      	mov	r0, r9
 8012842:	f000 fc4f 	bl	80130e4 <__lshift>
 8012846:	1c7b      	adds	r3, r7, #1
 8012848:	9305      	str	r3, [sp, #20]
 801284a:	eb07 030b 	add.w	r3, r7, fp
 801284e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012850:	9b02      	ldr	r3, [sp, #8]
 8012852:	f003 0301 	and.w	r3, r3, #1
 8012856:	46a8      	mov	r8, r5
 8012858:	9308      	str	r3, [sp, #32]
 801285a:	4605      	mov	r5, r0
 801285c:	9b05      	ldr	r3, [sp, #20]
 801285e:	9801      	ldr	r0, [sp, #4]
 8012860:	4621      	mov	r1, r4
 8012862:	f103 3bff 	add.w	fp, r3, #4294967295
 8012866:	f7ff fb07 	bl	8011e78 <quorem>
 801286a:	4641      	mov	r1, r8
 801286c:	9002      	str	r0, [sp, #8]
 801286e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012872:	9801      	ldr	r0, [sp, #4]
 8012874:	f000 fca2 	bl	80131bc <__mcmp>
 8012878:	462a      	mov	r2, r5
 801287a:	9006      	str	r0, [sp, #24]
 801287c:	4621      	mov	r1, r4
 801287e:	4648      	mov	r0, r9
 8012880:	f000 fcb8 	bl	80131f4 <__mdiff>
 8012884:	68c2      	ldr	r2, [r0, #12]
 8012886:	4606      	mov	r6, r0
 8012888:	b9fa      	cbnz	r2, 80128ca <_dtoa_r+0x942>
 801288a:	4601      	mov	r1, r0
 801288c:	9801      	ldr	r0, [sp, #4]
 801288e:	f000 fc95 	bl	80131bc <__mcmp>
 8012892:	4602      	mov	r2, r0
 8012894:	4631      	mov	r1, r6
 8012896:	4648      	mov	r0, r9
 8012898:	920a      	str	r2, [sp, #40]	@ 0x28
 801289a:	f000 fa0b 	bl	8012cb4 <_Bfree>
 801289e:	9b07      	ldr	r3, [sp, #28]
 80128a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128a2:	9e05      	ldr	r6, [sp, #20]
 80128a4:	ea43 0102 	orr.w	r1, r3, r2
 80128a8:	9b08      	ldr	r3, [sp, #32]
 80128aa:	4319      	orrs	r1, r3
 80128ac:	d10f      	bne.n	80128ce <_dtoa_r+0x946>
 80128ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80128b2:	d028      	beq.n	8012906 <_dtoa_r+0x97e>
 80128b4:	9b06      	ldr	r3, [sp, #24]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	dd02      	ble.n	80128c0 <_dtoa_r+0x938>
 80128ba:	9b02      	ldr	r3, [sp, #8]
 80128bc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80128c0:	f88b a000 	strb.w	sl, [fp]
 80128c4:	e639      	b.n	801253a <_dtoa_r+0x5b2>
 80128c6:	4628      	mov	r0, r5
 80128c8:	e7bd      	b.n	8012846 <_dtoa_r+0x8be>
 80128ca:	2201      	movs	r2, #1
 80128cc:	e7e2      	b.n	8012894 <_dtoa_r+0x90c>
 80128ce:	9b06      	ldr	r3, [sp, #24]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	db04      	blt.n	80128de <_dtoa_r+0x956>
 80128d4:	9907      	ldr	r1, [sp, #28]
 80128d6:	430b      	orrs	r3, r1
 80128d8:	9908      	ldr	r1, [sp, #32]
 80128da:	430b      	orrs	r3, r1
 80128dc:	d120      	bne.n	8012920 <_dtoa_r+0x998>
 80128de:	2a00      	cmp	r2, #0
 80128e0:	ddee      	ble.n	80128c0 <_dtoa_r+0x938>
 80128e2:	9901      	ldr	r1, [sp, #4]
 80128e4:	2201      	movs	r2, #1
 80128e6:	4648      	mov	r0, r9
 80128e8:	f000 fbfc 	bl	80130e4 <__lshift>
 80128ec:	4621      	mov	r1, r4
 80128ee:	9001      	str	r0, [sp, #4]
 80128f0:	f000 fc64 	bl	80131bc <__mcmp>
 80128f4:	2800      	cmp	r0, #0
 80128f6:	dc03      	bgt.n	8012900 <_dtoa_r+0x978>
 80128f8:	d1e2      	bne.n	80128c0 <_dtoa_r+0x938>
 80128fa:	f01a 0f01 	tst.w	sl, #1
 80128fe:	d0df      	beq.n	80128c0 <_dtoa_r+0x938>
 8012900:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012904:	d1d9      	bne.n	80128ba <_dtoa_r+0x932>
 8012906:	2339      	movs	r3, #57	@ 0x39
 8012908:	f88b 3000 	strb.w	r3, [fp]
 801290c:	4633      	mov	r3, r6
 801290e:	461e      	mov	r6, r3
 8012910:	3b01      	subs	r3, #1
 8012912:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012916:	2a39      	cmp	r2, #57	@ 0x39
 8012918:	d053      	beq.n	80129c2 <_dtoa_r+0xa3a>
 801291a:	3201      	adds	r2, #1
 801291c:	701a      	strb	r2, [r3, #0]
 801291e:	e60c      	b.n	801253a <_dtoa_r+0x5b2>
 8012920:	2a00      	cmp	r2, #0
 8012922:	dd07      	ble.n	8012934 <_dtoa_r+0x9ac>
 8012924:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012928:	d0ed      	beq.n	8012906 <_dtoa_r+0x97e>
 801292a:	f10a 0301 	add.w	r3, sl, #1
 801292e:	f88b 3000 	strb.w	r3, [fp]
 8012932:	e602      	b.n	801253a <_dtoa_r+0x5b2>
 8012934:	9b05      	ldr	r3, [sp, #20]
 8012936:	9a05      	ldr	r2, [sp, #20]
 8012938:	f803 ac01 	strb.w	sl, [r3, #-1]
 801293c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801293e:	4293      	cmp	r3, r2
 8012940:	d029      	beq.n	8012996 <_dtoa_r+0xa0e>
 8012942:	9901      	ldr	r1, [sp, #4]
 8012944:	2300      	movs	r3, #0
 8012946:	220a      	movs	r2, #10
 8012948:	4648      	mov	r0, r9
 801294a:	f000 f9d5 	bl	8012cf8 <__multadd>
 801294e:	45a8      	cmp	r8, r5
 8012950:	9001      	str	r0, [sp, #4]
 8012952:	f04f 0300 	mov.w	r3, #0
 8012956:	f04f 020a 	mov.w	r2, #10
 801295a:	4641      	mov	r1, r8
 801295c:	4648      	mov	r0, r9
 801295e:	d107      	bne.n	8012970 <_dtoa_r+0x9e8>
 8012960:	f000 f9ca 	bl	8012cf8 <__multadd>
 8012964:	4680      	mov	r8, r0
 8012966:	4605      	mov	r5, r0
 8012968:	9b05      	ldr	r3, [sp, #20]
 801296a:	3301      	adds	r3, #1
 801296c:	9305      	str	r3, [sp, #20]
 801296e:	e775      	b.n	801285c <_dtoa_r+0x8d4>
 8012970:	f000 f9c2 	bl	8012cf8 <__multadd>
 8012974:	4629      	mov	r1, r5
 8012976:	4680      	mov	r8, r0
 8012978:	2300      	movs	r3, #0
 801297a:	220a      	movs	r2, #10
 801297c:	4648      	mov	r0, r9
 801297e:	f000 f9bb 	bl	8012cf8 <__multadd>
 8012982:	4605      	mov	r5, r0
 8012984:	e7f0      	b.n	8012968 <_dtoa_r+0x9e0>
 8012986:	f1bb 0f00 	cmp.w	fp, #0
 801298a:	bfcc      	ite	gt
 801298c:	465e      	movgt	r6, fp
 801298e:	2601      	movle	r6, #1
 8012990:	443e      	add	r6, r7
 8012992:	f04f 0800 	mov.w	r8, #0
 8012996:	9901      	ldr	r1, [sp, #4]
 8012998:	2201      	movs	r2, #1
 801299a:	4648      	mov	r0, r9
 801299c:	f000 fba2 	bl	80130e4 <__lshift>
 80129a0:	4621      	mov	r1, r4
 80129a2:	9001      	str	r0, [sp, #4]
 80129a4:	f000 fc0a 	bl	80131bc <__mcmp>
 80129a8:	2800      	cmp	r0, #0
 80129aa:	dcaf      	bgt.n	801290c <_dtoa_r+0x984>
 80129ac:	d102      	bne.n	80129b4 <_dtoa_r+0xa2c>
 80129ae:	f01a 0f01 	tst.w	sl, #1
 80129b2:	d1ab      	bne.n	801290c <_dtoa_r+0x984>
 80129b4:	4633      	mov	r3, r6
 80129b6:	461e      	mov	r6, r3
 80129b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129bc:	2a30      	cmp	r2, #48	@ 0x30
 80129be:	d0fa      	beq.n	80129b6 <_dtoa_r+0xa2e>
 80129c0:	e5bb      	b.n	801253a <_dtoa_r+0x5b2>
 80129c2:	429f      	cmp	r7, r3
 80129c4:	d1a3      	bne.n	801290e <_dtoa_r+0x986>
 80129c6:	9b04      	ldr	r3, [sp, #16]
 80129c8:	3301      	adds	r3, #1
 80129ca:	9304      	str	r3, [sp, #16]
 80129cc:	2331      	movs	r3, #49	@ 0x31
 80129ce:	703b      	strb	r3, [r7, #0]
 80129d0:	e5b3      	b.n	801253a <_dtoa_r+0x5b2>
 80129d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80129d4:	4f16      	ldr	r7, [pc, #88]	@ (8012a30 <_dtoa_r+0xaa8>)
 80129d6:	b11b      	cbz	r3, 80129e0 <_dtoa_r+0xa58>
 80129d8:	f107 0308 	add.w	r3, r7, #8
 80129dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80129de:	6013      	str	r3, [r2, #0]
 80129e0:	4638      	mov	r0, r7
 80129e2:	b011      	add	sp, #68	@ 0x44
 80129e4:	ecbd 8b02 	vpop	{d8}
 80129e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ec:	9b07      	ldr	r3, [sp, #28]
 80129ee:	2b01      	cmp	r3, #1
 80129f0:	f77f ae36 	ble.w	8012660 <_dtoa_r+0x6d8>
 80129f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129f8:	2001      	movs	r0, #1
 80129fa:	e656      	b.n	80126aa <_dtoa_r+0x722>
 80129fc:	f1bb 0f00 	cmp.w	fp, #0
 8012a00:	f77f aed7 	ble.w	80127b2 <_dtoa_r+0x82a>
 8012a04:	463e      	mov	r6, r7
 8012a06:	9801      	ldr	r0, [sp, #4]
 8012a08:	4621      	mov	r1, r4
 8012a0a:	f7ff fa35 	bl	8011e78 <quorem>
 8012a0e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012a12:	f806 ab01 	strb.w	sl, [r6], #1
 8012a16:	1bf2      	subs	r2, r6, r7
 8012a18:	4593      	cmp	fp, r2
 8012a1a:	ddb4      	ble.n	8012986 <_dtoa_r+0x9fe>
 8012a1c:	9901      	ldr	r1, [sp, #4]
 8012a1e:	2300      	movs	r3, #0
 8012a20:	220a      	movs	r2, #10
 8012a22:	4648      	mov	r0, r9
 8012a24:	f000 f968 	bl	8012cf8 <__multadd>
 8012a28:	9001      	str	r0, [sp, #4]
 8012a2a:	e7ec      	b.n	8012a06 <_dtoa_r+0xa7e>
 8012a2c:	08015445 	.word	0x08015445
 8012a30:	080153c9 	.word	0x080153c9

08012a34 <_free_r>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	4605      	mov	r5, r0
 8012a38:	2900      	cmp	r1, #0
 8012a3a:	d041      	beq.n	8012ac0 <_free_r+0x8c>
 8012a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a40:	1f0c      	subs	r4, r1, #4
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	bfb8      	it	lt
 8012a46:	18e4      	addlt	r4, r4, r3
 8012a48:	f000 f8e8 	bl	8012c1c <__malloc_lock>
 8012a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8012ac4 <_free_r+0x90>)
 8012a4e:	6813      	ldr	r3, [r2, #0]
 8012a50:	b933      	cbnz	r3, 8012a60 <_free_r+0x2c>
 8012a52:	6063      	str	r3, [r4, #4]
 8012a54:	6014      	str	r4, [r2, #0]
 8012a56:	4628      	mov	r0, r5
 8012a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a5c:	f000 b8e4 	b.w	8012c28 <__malloc_unlock>
 8012a60:	42a3      	cmp	r3, r4
 8012a62:	d908      	bls.n	8012a76 <_free_r+0x42>
 8012a64:	6820      	ldr	r0, [r4, #0]
 8012a66:	1821      	adds	r1, r4, r0
 8012a68:	428b      	cmp	r3, r1
 8012a6a:	bf01      	itttt	eq
 8012a6c:	6819      	ldreq	r1, [r3, #0]
 8012a6e:	685b      	ldreq	r3, [r3, #4]
 8012a70:	1809      	addeq	r1, r1, r0
 8012a72:	6021      	streq	r1, [r4, #0]
 8012a74:	e7ed      	b.n	8012a52 <_free_r+0x1e>
 8012a76:	461a      	mov	r2, r3
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	b10b      	cbz	r3, 8012a80 <_free_r+0x4c>
 8012a7c:	42a3      	cmp	r3, r4
 8012a7e:	d9fa      	bls.n	8012a76 <_free_r+0x42>
 8012a80:	6811      	ldr	r1, [r2, #0]
 8012a82:	1850      	adds	r0, r2, r1
 8012a84:	42a0      	cmp	r0, r4
 8012a86:	d10b      	bne.n	8012aa0 <_free_r+0x6c>
 8012a88:	6820      	ldr	r0, [r4, #0]
 8012a8a:	4401      	add	r1, r0
 8012a8c:	1850      	adds	r0, r2, r1
 8012a8e:	4283      	cmp	r3, r0
 8012a90:	6011      	str	r1, [r2, #0]
 8012a92:	d1e0      	bne.n	8012a56 <_free_r+0x22>
 8012a94:	6818      	ldr	r0, [r3, #0]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	6053      	str	r3, [r2, #4]
 8012a9a:	4408      	add	r0, r1
 8012a9c:	6010      	str	r0, [r2, #0]
 8012a9e:	e7da      	b.n	8012a56 <_free_r+0x22>
 8012aa0:	d902      	bls.n	8012aa8 <_free_r+0x74>
 8012aa2:	230c      	movs	r3, #12
 8012aa4:	602b      	str	r3, [r5, #0]
 8012aa6:	e7d6      	b.n	8012a56 <_free_r+0x22>
 8012aa8:	6820      	ldr	r0, [r4, #0]
 8012aaa:	1821      	adds	r1, r4, r0
 8012aac:	428b      	cmp	r3, r1
 8012aae:	bf04      	itt	eq
 8012ab0:	6819      	ldreq	r1, [r3, #0]
 8012ab2:	685b      	ldreq	r3, [r3, #4]
 8012ab4:	6063      	str	r3, [r4, #4]
 8012ab6:	bf04      	itt	eq
 8012ab8:	1809      	addeq	r1, r1, r0
 8012aba:	6021      	streq	r1, [r4, #0]
 8012abc:	6054      	str	r4, [r2, #4]
 8012abe:	e7ca      	b.n	8012a56 <_free_r+0x22>
 8012ac0:	bd38      	pop	{r3, r4, r5, pc}
 8012ac2:	bf00      	nop
 8012ac4:	24000d24 	.word	0x24000d24

08012ac8 <malloc>:
 8012ac8:	4b02      	ldr	r3, [pc, #8]	@ (8012ad4 <malloc+0xc>)
 8012aca:	4601      	mov	r1, r0
 8012acc:	6818      	ldr	r0, [r3, #0]
 8012ace:	f000 b825 	b.w	8012b1c <_malloc_r>
 8012ad2:	bf00      	nop
 8012ad4:	2400001c 	.word	0x2400001c

08012ad8 <sbrk_aligned>:
 8012ad8:	b570      	push	{r4, r5, r6, lr}
 8012ada:	4e0f      	ldr	r6, [pc, #60]	@ (8012b18 <sbrk_aligned+0x40>)
 8012adc:	460c      	mov	r4, r1
 8012ade:	6831      	ldr	r1, [r6, #0]
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	b911      	cbnz	r1, 8012aea <sbrk_aligned+0x12>
 8012ae4:	f001 ff7e 	bl	80149e4 <_sbrk_r>
 8012ae8:	6030      	str	r0, [r6, #0]
 8012aea:	4621      	mov	r1, r4
 8012aec:	4628      	mov	r0, r5
 8012aee:	f001 ff79 	bl	80149e4 <_sbrk_r>
 8012af2:	1c43      	adds	r3, r0, #1
 8012af4:	d103      	bne.n	8012afe <sbrk_aligned+0x26>
 8012af6:	f04f 34ff 	mov.w	r4, #4294967295
 8012afa:	4620      	mov	r0, r4
 8012afc:	bd70      	pop	{r4, r5, r6, pc}
 8012afe:	1cc4      	adds	r4, r0, #3
 8012b00:	f024 0403 	bic.w	r4, r4, #3
 8012b04:	42a0      	cmp	r0, r4
 8012b06:	d0f8      	beq.n	8012afa <sbrk_aligned+0x22>
 8012b08:	1a21      	subs	r1, r4, r0
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f001 ff6a 	bl	80149e4 <_sbrk_r>
 8012b10:	3001      	adds	r0, #1
 8012b12:	d1f2      	bne.n	8012afa <sbrk_aligned+0x22>
 8012b14:	e7ef      	b.n	8012af6 <sbrk_aligned+0x1e>
 8012b16:	bf00      	nop
 8012b18:	24000d20 	.word	0x24000d20

08012b1c <_malloc_r>:
 8012b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b20:	1ccd      	adds	r5, r1, #3
 8012b22:	f025 0503 	bic.w	r5, r5, #3
 8012b26:	3508      	adds	r5, #8
 8012b28:	2d0c      	cmp	r5, #12
 8012b2a:	bf38      	it	cc
 8012b2c:	250c      	movcc	r5, #12
 8012b2e:	2d00      	cmp	r5, #0
 8012b30:	4606      	mov	r6, r0
 8012b32:	db01      	blt.n	8012b38 <_malloc_r+0x1c>
 8012b34:	42a9      	cmp	r1, r5
 8012b36:	d904      	bls.n	8012b42 <_malloc_r+0x26>
 8012b38:	230c      	movs	r3, #12
 8012b3a:	6033      	str	r3, [r6, #0]
 8012b3c:	2000      	movs	r0, #0
 8012b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c18 <_malloc_r+0xfc>
 8012b46:	f000 f869 	bl	8012c1c <__malloc_lock>
 8012b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8012b4e:	461c      	mov	r4, r3
 8012b50:	bb44      	cbnz	r4, 8012ba4 <_malloc_r+0x88>
 8012b52:	4629      	mov	r1, r5
 8012b54:	4630      	mov	r0, r6
 8012b56:	f7ff ffbf 	bl	8012ad8 <sbrk_aligned>
 8012b5a:	1c43      	adds	r3, r0, #1
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	d158      	bne.n	8012c12 <_malloc_r+0xf6>
 8012b60:	f8d8 4000 	ldr.w	r4, [r8]
 8012b64:	4627      	mov	r7, r4
 8012b66:	2f00      	cmp	r7, #0
 8012b68:	d143      	bne.n	8012bf2 <_malloc_r+0xd6>
 8012b6a:	2c00      	cmp	r4, #0
 8012b6c:	d04b      	beq.n	8012c06 <_malloc_r+0xea>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	4639      	mov	r1, r7
 8012b72:	4630      	mov	r0, r6
 8012b74:	eb04 0903 	add.w	r9, r4, r3
 8012b78:	f001 ff34 	bl	80149e4 <_sbrk_r>
 8012b7c:	4581      	cmp	r9, r0
 8012b7e:	d142      	bne.n	8012c06 <_malloc_r+0xea>
 8012b80:	6821      	ldr	r1, [r4, #0]
 8012b82:	1a6d      	subs	r5, r5, r1
 8012b84:	4629      	mov	r1, r5
 8012b86:	4630      	mov	r0, r6
 8012b88:	f7ff ffa6 	bl	8012ad8 <sbrk_aligned>
 8012b8c:	3001      	adds	r0, #1
 8012b8e:	d03a      	beq.n	8012c06 <_malloc_r+0xea>
 8012b90:	6823      	ldr	r3, [r4, #0]
 8012b92:	442b      	add	r3, r5
 8012b94:	6023      	str	r3, [r4, #0]
 8012b96:	f8d8 3000 	ldr.w	r3, [r8]
 8012b9a:	685a      	ldr	r2, [r3, #4]
 8012b9c:	bb62      	cbnz	r2, 8012bf8 <_malloc_r+0xdc>
 8012b9e:	f8c8 7000 	str.w	r7, [r8]
 8012ba2:	e00f      	b.n	8012bc4 <_malloc_r+0xa8>
 8012ba4:	6822      	ldr	r2, [r4, #0]
 8012ba6:	1b52      	subs	r2, r2, r5
 8012ba8:	d420      	bmi.n	8012bec <_malloc_r+0xd0>
 8012baa:	2a0b      	cmp	r2, #11
 8012bac:	d917      	bls.n	8012bde <_malloc_r+0xc2>
 8012bae:	1961      	adds	r1, r4, r5
 8012bb0:	42a3      	cmp	r3, r4
 8012bb2:	6025      	str	r5, [r4, #0]
 8012bb4:	bf18      	it	ne
 8012bb6:	6059      	strne	r1, [r3, #4]
 8012bb8:	6863      	ldr	r3, [r4, #4]
 8012bba:	bf08      	it	eq
 8012bbc:	f8c8 1000 	streq.w	r1, [r8]
 8012bc0:	5162      	str	r2, [r4, r5]
 8012bc2:	604b      	str	r3, [r1, #4]
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f000 f82f 	bl	8012c28 <__malloc_unlock>
 8012bca:	f104 000b 	add.w	r0, r4, #11
 8012bce:	1d23      	adds	r3, r4, #4
 8012bd0:	f020 0007 	bic.w	r0, r0, #7
 8012bd4:	1ac2      	subs	r2, r0, r3
 8012bd6:	bf1c      	itt	ne
 8012bd8:	1a1b      	subne	r3, r3, r0
 8012bda:	50a3      	strne	r3, [r4, r2]
 8012bdc:	e7af      	b.n	8012b3e <_malloc_r+0x22>
 8012bde:	6862      	ldr	r2, [r4, #4]
 8012be0:	42a3      	cmp	r3, r4
 8012be2:	bf0c      	ite	eq
 8012be4:	f8c8 2000 	streq.w	r2, [r8]
 8012be8:	605a      	strne	r2, [r3, #4]
 8012bea:	e7eb      	b.n	8012bc4 <_malloc_r+0xa8>
 8012bec:	4623      	mov	r3, r4
 8012bee:	6864      	ldr	r4, [r4, #4]
 8012bf0:	e7ae      	b.n	8012b50 <_malloc_r+0x34>
 8012bf2:	463c      	mov	r4, r7
 8012bf4:	687f      	ldr	r7, [r7, #4]
 8012bf6:	e7b6      	b.n	8012b66 <_malloc_r+0x4a>
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	42a3      	cmp	r3, r4
 8012bfe:	d1fb      	bne.n	8012bf8 <_malloc_r+0xdc>
 8012c00:	2300      	movs	r3, #0
 8012c02:	6053      	str	r3, [r2, #4]
 8012c04:	e7de      	b.n	8012bc4 <_malloc_r+0xa8>
 8012c06:	230c      	movs	r3, #12
 8012c08:	6033      	str	r3, [r6, #0]
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f000 f80c 	bl	8012c28 <__malloc_unlock>
 8012c10:	e794      	b.n	8012b3c <_malloc_r+0x20>
 8012c12:	6005      	str	r5, [r0, #0]
 8012c14:	e7d6      	b.n	8012bc4 <_malloc_r+0xa8>
 8012c16:	bf00      	nop
 8012c18:	24000d24 	.word	0x24000d24

08012c1c <__malloc_lock>:
 8012c1c:	4801      	ldr	r0, [pc, #4]	@ (8012c24 <__malloc_lock+0x8>)
 8012c1e:	f7ff b914 	b.w	8011e4a <__retarget_lock_acquire_recursive>
 8012c22:	bf00      	nop
 8012c24:	24000d1c 	.word	0x24000d1c

08012c28 <__malloc_unlock>:
 8012c28:	4801      	ldr	r0, [pc, #4]	@ (8012c30 <__malloc_unlock+0x8>)
 8012c2a:	f7ff b90f 	b.w	8011e4c <__retarget_lock_release_recursive>
 8012c2e:	bf00      	nop
 8012c30:	24000d1c 	.word	0x24000d1c

08012c34 <_Balloc>:
 8012c34:	b570      	push	{r4, r5, r6, lr}
 8012c36:	69c6      	ldr	r6, [r0, #28]
 8012c38:	4604      	mov	r4, r0
 8012c3a:	460d      	mov	r5, r1
 8012c3c:	b976      	cbnz	r6, 8012c5c <_Balloc+0x28>
 8012c3e:	2010      	movs	r0, #16
 8012c40:	f7ff ff42 	bl	8012ac8 <malloc>
 8012c44:	4602      	mov	r2, r0
 8012c46:	61e0      	str	r0, [r4, #28]
 8012c48:	b920      	cbnz	r0, 8012c54 <_Balloc+0x20>
 8012c4a:	4b18      	ldr	r3, [pc, #96]	@ (8012cac <_Balloc+0x78>)
 8012c4c:	4818      	ldr	r0, [pc, #96]	@ (8012cb0 <_Balloc+0x7c>)
 8012c4e:	216b      	movs	r1, #107	@ 0x6b
 8012c50:	f001 fee2 	bl	8014a18 <__assert_func>
 8012c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c58:	6006      	str	r6, [r0, #0]
 8012c5a:	60c6      	str	r6, [r0, #12]
 8012c5c:	69e6      	ldr	r6, [r4, #28]
 8012c5e:	68f3      	ldr	r3, [r6, #12]
 8012c60:	b183      	cbz	r3, 8012c84 <_Balloc+0x50>
 8012c62:	69e3      	ldr	r3, [r4, #28]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c6a:	b9b8      	cbnz	r0, 8012c9c <_Balloc+0x68>
 8012c6c:	2101      	movs	r1, #1
 8012c6e:	fa01 f605 	lsl.w	r6, r1, r5
 8012c72:	1d72      	adds	r2, r6, #5
 8012c74:	0092      	lsls	r2, r2, #2
 8012c76:	4620      	mov	r0, r4
 8012c78:	f001 feec 	bl	8014a54 <_calloc_r>
 8012c7c:	b160      	cbz	r0, 8012c98 <_Balloc+0x64>
 8012c7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c82:	e00e      	b.n	8012ca2 <_Balloc+0x6e>
 8012c84:	2221      	movs	r2, #33	@ 0x21
 8012c86:	2104      	movs	r1, #4
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f001 fee3 	bl	8014a54 <_calloc_r>
 8012c8e:	69e3      	ldr	r3, [r4, #28]
 8012c90:	60f0      	str	r0, [r6, #12]
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d1e4      	bne.n	8012c62 <_Balloc+0x2e>
 8012c98:	2000      	movs	r0, #0
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}
 8012c9c:	6802      	ldr	r2, [r0, #0]
 8012c9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ca8:	e7f7      	b.n	8012c9a <_Balloc+0x66>
 8012caa:	bf00      	nop
 8012cac:	080153d6 	.word	0x080153d6
 8012cb0:	08015456 	.word	0x08015456

08012cb4 <_Bfree>:
 8012cb4:	b570      	push	{r4, r5, r6, lr}
 8012cb6:	69c6      	ldr	r6, [r0, #28]
 8012cb8:	4605      	mov	r5, r0
 8012cba:	460c      	mov	r4, r1
 8012cbc:	b976      	cbnz	r6, 8012cdc <_Bfree+0x28>
 8012cbe:	2010      	movs	r0, #16
 8012cc0:	f7ff ff02 	bl	8012ac8 <malloc>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	61e8      	str	r0, [r5, #28]
 8012cc8:	b920      	cbnz	r0, 8012cd4 <_Bfree+0x20>
 8012cca:	4b09      	ldr	r3, [pc, #36]	@ (8012cf0 <_Bfree+0x3c>)
 8012ccc:	4809      	ldr	r0, [pc, #36]	@ (8012cf4 <_Bfree+0x40>)
 8012cce:	218f      	movs	r1, #143	@ 0x8f
 8012cd0:	f001 fea2 	bl	8014a18 <__assert_func>
 8012cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cd8:	6006      	str	r6, [r0, #0]
 8012cda:	60c6      	str	r6, [r0, #12]
 8012cdc:	b13c      	cbz	r4, 8012cee <_Bfree+0x3a>
 8012cde:	69eb      	ldr	r3, [r5, #28]
 8012ce0:	6862      	ldr	r2, [r4, #4]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ce8:	6021      	str	r1, [r4, #0]
 8012cea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012cee:	bd70      	pop	{r4, r5, r6, pc}
 8012cf0:	080153d6 	.word	0x080153d6
 8012cf4:	08015456 	.word	0x08015456

08012cf8 <__multadd>:
 8012cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cfc:	690d      	ldr	r5, [r1, #16]
 8012cfe:	4607      	mov	r7, r0
 8012d00:	460c      	mov	r4, r1
 8012d02:	461e      	mov	r6, r3
 8012d04:	f101 0c14 	add.w	ip, r1, #20
 8012d08:	2000      	movs	r0, #0
 8012d0a:	f8dc 3000 	ldr.w	r3, [ip]
 8012d0e:	b299      	uxth	r1, r3
 8012d10:	fb02 6101 	mla	r1, r2, r1, r6
 8012d14:	0c1e      	lsrs	r6, r3, #16
 8012d16:	0c0b      	lsrs	r3, r1, #16
 8012d18:	fb02 3306 	mla	r3, r2, r6, r3
 8012d1c:	b289      	uxth	r1, r1
 8012d1e:	3001      	adds	r0, #1
 8012d20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d24:	4285      	cmp	r5, r0
 8012d26:	f84c 1b04 	str.w	r1, [ip], #4
 8012d2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d2e:	dcec      	bgt.n	8012d0a <__multadd+0x12>
 8012d30:	b30e      	cbz	r6, 8012d76 <__multadd+0x7e>
 8012d32:	68a3      	ldr	r3, [r4, #8]
 8012d34:	42ab      	cmp	r3, r5
 8012d36:	dc19      	bgt.n	8012d6c <__multadd+0x74>
 8012d38:	6861      	ldr	r1, [r4, #4]
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	3101      	adds	r1, #1
 8012d3e:	f7ff ff79 	bl	8012c34 <_Balloc>
 8012d42:	4680      	mov	r8, r0
 8012d44:	b928      	cbnz	r0, 8012d52 <__multadd+0x5a>
 8012d46:	4602      	mov	r2, r0
 8012d48:	4b0c      	ldr	r3, [pc, #48]	@ (8012d7c <__multadd+0x84>)
 8012d4a:	480d      	ldr	r0, [pc, #52]	@ (8012d80 <__multadd+0x88>)
 8012d4c:	21ba      	movs	r1, #186	@ 0xba
 8012d4e:	f001 fe63 	bl	8014a18 <__assert_func>
 8012d52:	6922      	ldr	r2, [r4, #16]
 8012d54:	3202      	adds	r2, #2
 8012d56:	f104 010c 	add.w	r1, r4, #12
 8012d5a:	0092      	lsls	r2, r2, #2
 8012d5c:	300c      	adds	r0, #12
 8012d5e:	f7ff f876 	bl	8011e4e <memcpy>
 8012d62:	4621      	mov	r1, r4
 8012d64:	4638      	mov	r0, r7
 8012d66:	f7ff ffa5 	bl	8012cb4 <_Bfree>
 8012d6a:	4644      	mov	r4, r8
 8012d6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d70:	3501      	adds	r5, #1
 8012d72:	615e      	str	r6, [r3, #20]
 8012d74:	6125      	str	r5, [r4, #16]
 8012d76:	4620      	mov	r0, r4
 8012d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d7c:	08015445 	.word	0x08015445
 8012d80:	08015456 	.word	0x08015456

08012d84 <__s2b>:
 8012d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d88:	460c      	mov	r4, r1
 8012d8a:	4615      	mov	r5, r2
 8012d8c:	461f      	mov	r7, r3
 8012d8e:	2209      	movs	r2, #9
 8012d90:	3308      	adds	r3, #8
 8012d92:	4606      	mov	r6, r0
 8012d94:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d98:	2100      	movs	r1, #0
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	db09      	blt.n	8012db4 <__s2b+0x30>
 8012da0:	4630      	mov	r0, r6
 8012da2:	f7ff ff47 	bl	8012c34 <_Balloc>
 8012da6:	b940      	cbnz	r0, 8012dba <__s2b+0x36>
 8012da8:	4602      	mov	r2, r0
 8012daa:	4b19      	ldr	r3, [pc, #100]	@ (8012e10 <__s2b+0x8c>)
 8012dac:	4819      	ldr	r0, [pc, #100]	@ (8012e14 <__s2b+0x90>)
 8012dae:	21d3      	movs	r1, #211	@ 0xd3
 8012db0:	f001 fe32 	bl	8014a18 <__assert_func>
 8012db4:	0052      	lsls	r2, r2, #1
 8012db6:	3101      	adds	r1, #1
 8012db8:	e7f0      	b.n	8012d9c <__s2b+0x18>
 8012dba:	9b08      	ldr	r3, [sp, #32]
 8012dbc:	6143      	str	r3, [r0, #20]
 8012dbe:	2d09      	cmp	r5, #9
 8012dc0:	f04f 0301 	mov.w	r3, #1
 8012dc4:	6103      	str	r3, [r0, #16]
 8012dc6:	dd16      	ble.n	8012df6 <__s2b+0x72>
 8012dc8:	f104 0909 	add.w	r9, r4, #9
 8012dcc:	46c8      	mov	r8, r9
 8012dce:	442c      	add	r4, r5
 8012dd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012dd4:	4601      	mov	r1, r0
 8012dd6:	3b30      	subs	r3, #48	@ 0x30
 8012dd8:	220a      	movs	r2, #10
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f7ff ff8c 	bl	8012cf8 <__multadd>
 8012de0:	45a0      	cmp	r8, r4
 8012de2:	d1f5      	bne.n	8012dd0 <__s2b+0x4c>
 8012de4:	f1a5 0408 	sub.w	r4, r5, #8
 8012de8:	444c      	add	r4, r9
 8012dea:	1b2d      	subs	r5, r5, r4
 8012dec:	1963      	adds	r3, r4, r5
 8012dee:	42bb      	cmp	r3, r7
 8012df0:	db04      	blt.n	8012dfc <__s2b+0x78>
 8012df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012df6:	340a      	adds	r4, #10
 8012df8:	2509      	movs	r5, #9
 8012dfa:	e7f6      	b.n	8012dea <__s2b+0x66>
 8012dfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e00:	4601      	mov	r1, r0
 8012e02:	3b30      	subs	r3, #48	@ 0x30
 8012e04:	220a      	movs	r2, #10
 8012e06:	4630      	mov	r0, r6
 8012e08:	f7ff ff76 	bl	8012cf8 <__multadd>
 8012e0c:	e7ee      	b.n	8012dec <__s2b+0x68>
 8012e0e:	bf00      	nop
 8012e10:	08015445 	.word	0x08015445
 8012e14:	08015456 	.word	0x08015456

08012e18 <__hi0bits>:
 8012e18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	bf36      	itet	cc
 8012e20:	0403      	lslcc	r3, r0, #16
 8012e22:	2000      	movcs	r0, #0
 8012e24:	2010      	movcc	r0, #16
 8012e26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012e2a:	bf3c      	itt	cc
 8012e2c:	021b      	lslcc	r3, r3, #8
 8012e2e:	3008      	addcc	r0, #8
 8012e30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e34:	bf3c      	itt	cc
 8012e36:	011b      	lslcc	r3, r3, #4
 8012e38:	3004      	addcc	r0, #4
 8012e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e3e:	bf3c      	itt	cc
 8012e40:	009b      	lslcc	r3, r3, #2
 8012e42:	3002      	addcc	r0, #2
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	db05      	blt.n	8012e54 <__hi0bits+0x3c>
 8012e48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012e4c:	f100 0001 	add.w	r0, r0, #1
 8012e50:	bf08      	it	eq
 8012e52:	2020      	moveq	r0, #32
 8012e54:	4770      	bx	lr

08012e56 <__lo0bits>:
 8012e56:	6803      	ldr	r3, [r0, #0]
 8012e58:	4602      	mov	r2, r0
 8012e5a:	f013 0007 	ands.w	r0, r3, #7
 8012e5e:	d00b      	beq.n	8012e78 <__lo0bits+0x22>
 8012e60:	07d9      	lsls	r1, r3, #31
 8012e62:	d421      	bmi.n	8012ea8 <__lo0bits+0x52>
 8012e64:	0798      	lsls	r0, r3, #30
 8012e66:	bf49      	itett	mi
 8012e68:	085b      	lsrmi	r3, r3, #1
 8012e6a:	089b      	lsrpl	r3, r3, #2
 8012e6c:	2001      	movmi	r0, #1
 8012e6e:	6013      	strmi	r3, [r2, #0]
 8012e70:	bf5c      	itt	pl
 8012e72:	6013      	strpl	r3, [r2, #0]
 8012e74:	2002      	movpl	r0, #2
 8012e76:	4770      	bx	lr
 8012e78:	b299      	uxth	r1, r3
 8012e7a:	b909      	cbnz	r1, 8012e80 <__lo0bits+0x2a>
 8012e7c:	0c1b      	lsrs	r3, r3, #16
 8012e7e:	2010      	movs	r0, #16
 8012e80:	b2d9      	uxtb	r1, r3
 8012e82:	b909      	cbnz	r1, 8012e88 <__lo0bits+0x32>
 8012e84:	3008      	adds	r0, #8
 8012e86:	0a1b      	lsrs	r3, r3, #8
 8012e88:	0719      	lsls	r1, r3, #28
 8012e8a:	bf04      	itt	eq
 8012e8c:	091b      	lsreq	r3, r3, #4
 8012e8e:	3004      	addeq	r0, #4
 8012e90:	0799      	lsls	r1, r3, #30
 8012e92:	bf04      	itt	eq
 8012e94:	089b      	lsreq	r3, r3, #2
 8012e96:	3002      	addeq	r0, #2
 8012e98:	07d9      	lsls	r1, r3, #31
 8012e9a:	d403      	bmi.n	8012ea4 <__lo0bits+0x4e>
 8012e9c:	085b      	lsrs	r3, r3, #1
 8012e9e:	f100 0001 	add.w	r0, r0, #1
 8012ea2:	d003      	beq.n	8012eac <__lo0bits+0x56>
 8012ea4:	6013      	str	r3, [r2, #0]
 8012ea6:	4770      	bx	lr
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	4770      	bx	lr
 8012eac:	2020      	movs	r0, #32
 8012eae:	4770      	bx	lr

08012eb0 <__i2b>:
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	460c      	mov	r4, r1
 8012eb4:	2101      	movs	r1, #1
 8012eb6:	f7ff febd 	bl	8012c34 <_Balloc>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	b928      	cbnz	r0, 8012eca <__i2b+0x1a>
 8012ebe:	4b05      	ldr	r3, [pc, #20]	@ (8012ed4 <__i2b+0x24>)
 8012ec0:	4805      	ldr	r0, [pc, #20]	@ (8012ed8 <__i2b+0x28>)
 8012ec2:	f240 1145 	movw	r1, #325	@ 0x145
 8012ec6:	f001 fda7 	bl	8014a18 <__assert_func>
 8012eca:	2301      	movs	r3, #1
 8012ecc:	6144      	str	r4, [r0, #20]
 8012ece:	6103      	str	r3, [r0, #16]
 8012ed0:	bd10      	pop	{r4, pc}
 8012ed2:	bf00      	nop
 8012ed4:	08015445 	.word	0x08015445
 8012ed8:	08015456 	.word	0x08015456

08012edc <__multiply>:
 8012edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee0:	4614      	mov	r4, r2
 8012ee2:	690a      	ldr	r2, [r1, #16]
 8012ee4:	6923      	ldr	r3, [r4, #16]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	bfa8      	it	ge
 8012eea:	4623      	movge	r3, r4
 8012eec:	460f      	mov	r7, r1
 8012eee:	bfa4      	itt	ge
 8012ef0:	460c      	movge	r4, r1
 8012ef2:	461f      	movge	r7, r3
 8012ef4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012ef8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012efc:	68a3      	ldr	r3, [r4, #8]
 8012efe:	6861      	ldr	r1, [r4, #4]
 8012f00:	eb0a 0609 	add.w	r6, sl, r9
 8012f04:	42b3      	cmp	r3, r6
 8012f06:	b085      	sub	sp, #20
 8012f08:	bfb8      	it	lt
 8012f0a:	3101      	addlt	r1, #1
 8012f0c:	f7ff fe92 	bl	8012c34 <_Balloc>
 8012f10:	b930      	cbnz	r0, 8012f20 <__multiply+0x44>
 8012f12:	4602      	mov	r2, r0
 8012f14:	4b44      	ldr	r3, [pc, #272]	@ (8013028 <__multiply+0x14c>)
 8012f16:	4845      	ldr	r0, [pc, #276]	@ (801302c <__multiply+0x150>)
 8012f18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012f1c:	f001 fd7c 	bl	8014a18 <__assert_func>
 8012f20:	f100 0514 	add.w	r5, r0, #20
 8012f24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f28:	462b      	mov	r3, r5
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	4543      	cmp	r3, r8
 8012f2e:	d321      	bcc.n	8012f74 <__multiply+0x98>
 8012f30:	f107 0114 	add.w	r1, r7, #20
 8012f34:	f104 0214 	add.w	r2, r4, #20
 8012f38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012f3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012f40:	9302      	str	r3, [sp, #8]
 8012f42:	1b13      	subs	r3, r2, r4
 8012f44:	3b15      	subs	r3, #21
 8012f46:	f023 0303 	bic.w	r3, r3, #3
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	f104 0715 	add.w	r7, r4, #21
 8012f50:	42ba      	cmp	r2, r7
 8012f52:	bf38      	it	cc
 8012f54:	2304      	movcc	r3, #4
 8012f56:	9301      	str	r3, [sp, #4]
 8012f58:	9b02      	ldr	r3, [sp, #8]
 8012f5a:	9103      	str	r1, [sp, #12]
 8012f5c:	428b      	cmp	r3, r1
 8012f5e:	d80c      	bhi.n	8012f7a <__multiply+0x9e>
 8012f60:	2e00      	cmp	r6, #0
 8012f62:	dd03      	ble.n	8012f6c <__multiply+0x90>
 8012f64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d05b      	beq.n	8013024 <__multiply+0x148>
 8012f6c:	6106      	str	r6, [r0, #16]
 8012f6e:	b005      	add	sp, #20
 8012f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f74:	f843 2b04 	str.w	r2, [r3], #4
 8012f78:	e7d8      	b.n	8012f2c <__multiply+0x50>
 8012f7a:	f8b1 a000 	ldrh.w	sl, [r1]
 8012f7e:	f1ba 0f00 	cmp.w	sl, #0
 8012f82:	d024      	beq.n	8012fce <__multiply+0xf2>
 8012f84:	f104 0e14 	add.w	lr, r4, #20
 8012f88:	46a9      	mov	r9, r5
 8012f8a:	f04f 0c00 	mov.w	ip, #0
 8012f8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f92:	f8d9 3000 	ldr.w	r3, [r9]
 8012f96:	fa1f fb87 	uxth.w	fp, r7
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012fa0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012fa4:	f8d9 7000 	ldr.w	r7, [r9]
 8012fa8:	4463      	add	r3, ip
 8012faa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012fae:	fb0a c70b 	mla	r7, sl, fp, ip
 8012fb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012fbc:	4572      	cmp	r2, lr
 8012fbe:	f849 3b04 	str.w	r3, [r9], #4
 8012fc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012fc6:	d8e2      	bhi.n	8012f8e <__multiply+0xb2>
 8012fc8:	9b01      	ldr	r3, [sp, #4]
 8012fca:	f845 c003 	str.w	ip, [r5, r3]
 8012fce:	9b03      	ldr	r3, [sp, #12]
 8012fd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012fd4:	3104      	adds	r1, #4
 8012fd6:	f1b9 0f00 	cmp.w	r9, #0
 8012fda:	d021      	beq.n	8013020 <__multiply+0x144>
 8012fdc:	682b      	ldr	r3, [r5, #0]
 8012fde:	f104 0c14 	add.w	ip, r4, #20
 8012fe2:	46ae      	mov	lr, r5
 8012fe4:	f04f 0a00 	mov.w	sl, #0
 8012fe8:	f8bc b000 	ldrh.w	fp, [ip]
 8012fec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012ff0:	fb09 770b 	mla	r7, r9, fp, r7
 8012ff4:	4457      	add	r7, sl
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012ffc:	f84e 3b04 	str.w	r3, [lr], #4
 8013000:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013004:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013008:	f8be 3000 	ldrh.w	r3, [lr]
 801300c:	fb09 330a 	mla	r3, r9, sl, r3
 8013010:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013014:	4562      	cmp	r2, ip
 8013016:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801301a:	d8e5      	bhi.n	8012fe8 <__multiply+0x10c>
 801301c:	9f01      	ldr	r7, [sp, #4]
 801301e:	51eb      	str	r3, [r5, r7]
 8013020:	3504      	adds	r5, #4
 8013022:	e799      	b.n	8012f58 <__multiply+0x7c>
 8013024:	3e01      	subs	r6, #1
 8013026:	e79b      	b.n	8012f60 <__multiply+0x84>
 8013028:	08015445 	.word	0x08015445
 801302c:	08015456 	.word	0x08015456

08013030 <__pow5mult>:
 8013030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013034:	4615      	mov	r5, r2
 8013036:	f012 0203 	ands.w	r2, r2, #3
 801303a:	4607      	mov	r7, r0
 801303c:	460e      	mov	r6, r1
 801303e:	d007      	beq.n	8013050 <__pow5mult+0x20>
 8013040:	4c25      	ldr	r4, [pc, #148]	@ (80130d8 <__pow5mult+0xa8>)
 8013042:	3a01      	subs	r2, #1
 8013044:	2300      	movs	r3, #0
 8013046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801304a:	f7ff fe55 	bl	8012cf8 <__multadd>
 801304e:	4606      	mov	r6, r0
 8013050:	10ad      	asrs	r5, r5, #2
 8013052:	d03d      	beq.n	80130d0 <__pow5mult+0xa0>
 8013054:	69fc      	ldr	r4, [r7, #28]
 8013056:	b97c      	cbnz	r4, 8013078 <__pow5mult+0x48>
 8013058:	2010      	movs	r0, #16
 801305a:	f7ff fd35 	bl	8012ac8 <malloc>
 801305e:	4602      	mov	r2, r0
 8013060:	61f8      	str	r0, [r7, #28]
 8013062:	b928      	cbnz	r0, 8013070 <__pow5mult+0x40>
 8013064:	4b1d      	ldr	r3, [pc, #116]	@ (80130dc <__pow5mult+0xac>)
 8013066:	481e      	ldr	r0, [pc, #120]	@ (80130e0 <__pow5mult+0xb0>)
 8013068:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801306c:	f001 fcd4 	bl	8014a18 <__assert_func>
 8013070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013074:	6004      	str	r4, [r0, #0]
 8013076:	60c4      	str	r4, [r0, #12]
 8013078:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801307c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013080:	b94c      	cbnz	r4, 8013096 <__pow5mult+0x66>
 8013082:	f240 2171 	movw	r1, #625	@ 0x271
 8013086:	4638      	mov	r0, r7
 8013088:	f7ff ff12 	bl	8012eb0 <__i2b>
 801308c:	2300      	movs	r3, #0
 801308e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013092:	4604      	mov	r4, r0
 8013094:	6003      	str	r3, [r0, #0]
 8013096:	f04f 0900 	mov.w	r9, #0
 801309a:	07eb      	lsls	r3, r5, #31
 801309c:	d50a      	bpl.n	80130b4 <__pow5mult+0x84>
 801309e:	4631      	mov	r1, r6
 80130a0:	4622      	mov	r2, r4
 80130a2:	4638      	mov	r0, r7
 80130a4:	f7ff ff1a 	bl	8012edc <__multiply>
 80130a8:	4631      	mov	r1, r6
 80130aa:	4680      	mov	r8, r0
 80130ac:	4638      	mov	r0, r7
 80130ae:	f7ff fe01 	bl	8012cb4 <_Bfree>
 80130b2:	4646      	mov	r6, r8
 80130b4:	106d      	asrs	r5, r5, #1
 80130b6:	d00b      	beq.n	80130d0 <__pow5mult+0xa0>
 80130b8:	6820      	ldr	r0, [r4, #0]
 80130ba:	b938      	cbnz	r0, 80130cc <__pow5mult+0x9c>
 80130bc:	4622      	mov	r2, r4
 80130be:	4621      	mov	r1, r4
 80130c0:	4638      	mov	r0, r7
 80130c2:	f7ff ff0b 	bl	8012edc <__multiply>
 80130c6:	6020      	str	r0, [r4, #0]
 80130c8:	f8c0 9000 	str.w	r9, [r0]
 80130cc:	4604      	mov	r4, r0
 80130ce:	e7e4      	b.n	801309a <__pow5mult+0x6a>
 80130d0:	4630      	mov	r0, r6
 80130d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130d6:	bf00      	nop
 80130d8:	080154b0 	.word	0x080154b0
 80130dc:	080153d6 	.word	0x080153d6
 80130e0:	08015456 	.word	0x08015456

080130e4 <__lshift>:
 80130e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130e8:	460c      	mov	r4, r1
 80130ea:	6849      	ldr	r1, [r1, #4]
 80130ec:	6923      	ldr	r3, [r4, #16]
 80130ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130f2:	68a3      	ldr	r3, [r4, #8]
 80130f4:	4607      	mov	r7, r0
 80130f6:	4691      	mov	r9, r2
 80130f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130fc:	f108 0601 	add.w	r6, r8, #1
 8013100:	42b3      	cmp	r3, r6
 8013102:	db0b      	blt.n	801311c <__lshift+0x38>
 8013104:	4638      	mov	r0, r7
 8013106:	f7ff fd95 	bl	8012c34 <_Balloc>
 801310a:	4605      	mov	r5, r0
 801310c:	b948      	cbnz	r0, 8013122 <__lshift+0x3e>
 801310e:	4602      	mov	r2, r0
 8013110:	4b28      	ldr	r3, [pc, #160]	@ (80131b4 <__lshift+0xd0>)
 8013112:	4829      	ldr	r0, [pc, #164]	@ (80131b8 <__lshift+0xd4>)
 8013114:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013118:	f001 fc7e 	bl	8014a18 <__assert_func>
 801311c:	3101      	adds	r1, #1
 801311e:	005b      	lsls	r3, r3, #1
 8013120:	e7ee      	b.n	8013100 <__lshift+0x1c>
 8013122:	2300      	movs	r3, #0
 8013124:	f100 0114 	add.w	r1, r0, #20
 8013128:	f100 0210 	add.w	r2, r0, #16
 801312c:	4618      	mov	r0, r3
 801312e:	4553      	cmp	r3, sl
 8013130:	db33      	blt.n	801319a <__lshift+0xb6>
 8013132:	6920      	ldr	r0, [r4, #16]
 8013134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013138:	f104 0314 	add.w	r3, r4, #20
 801313c:	f019 091f 	ands.w	r9, r9, #31
 8013140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013144:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013148:	d02b      	beq.n	80131a2 <__lshift+0xbe>
 801314a:	f1c9 0e20 	rsb	lr, r9, #32
 801314e:	468a      	mov	sl, r1
 8013150:	2200      	movs	r2, #0
 8013152:	6818      	ldr	r0, [r3, #0]
 8013154:	fa00 f009 	lsl.w	r0, r0, r9
 8013158:	4310      	orrs	r0, r2
 801315a:	f84a 0b04 	str.w	r0, [sl], #4
 801315e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013162:	459c      	cmp	ip, r3
 8013164:	fa22 f20e 	lsr.w	r2, r2, lr
 8013168:	d8f3      	bhi.n	8013152 <__lshift+0x6e>
 801316a:	ebac 0304 	sub.w	r3, ip, r4
 801316e:	3b15      	subs	r3, #21
 8013170:	f023 0303 	bic.w	r3, r3, #3
 8013174:	3304      	adds	r3, #4
 8013176:	f104 0015 	add.w	r0, r4, #21
 801317a:	4584      	cmp	ip, r0
 801317c:	bf38      	it	cc
 801317e:	2304      	movcc	r3, #4
 8013180:	50ca      	str	r2, [r1, r3]
 8013182:	b10a      	cbz	r2, 8013188 <__lshift+0xa4>
 8013184:	f108 0602 	add.w	r6, r8, #2
 8013188:	3e01      	subs	r6, #1
 801318a:	4638      	mov	r0, r7
 801318c:	612e      	str	r6, [r5, #16]
 801318e:	4621      	mov	r1, r4
 8013190:	f7ff fd90 	bl	8012cb4 <_Bfree>
 8013194:	4628      	mov	r0, r5
 8013196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801319a:	f842 0f04 	str.w	r0, [r2, #4]!
 801319e:	3301      	adds	r3, #1
 80131a0:	e7c5      	b.n	801312e <__lshift+0x4a>
 80131a2:	3904      	subs	r1, #4
 80131a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80131a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80131ac:	459c      	cmp	ip, r3
 80131ae:	d8f9      	bhi.n	80131a4 <__lshift+0xc0>
 80131b0:	e7ea      	b.n	8013188 <__lshift+0xa4>
 80131b2:	bf00      	nop
 80131b4:	08015445 	.word	0x08015445
 80131b8:	08015456 	.word	0x08015456

080131bc <__mcmp>:
 80131bc:	690a      	ldr	r2, [r1, #16]
 80131be:	4603      	mov	r3, r0
 80131c0:	6900      	ldr	r0, [r0, #16]
 80131c2:	1a80      	subs	r0, r0, r2
 80131c4:	b530      	push	{r4, r5, lr}
 80131c6:	d10e      	bne.n	80131e6 <__mcmp+0x2a>
 80131c8:	3314      	adds	r3, #20
 80131ca:	3114      	adds	r1, #20
 80131cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80131d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80131d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80131d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80131dc:	4295      	cmp	r5, r2
 80131de:	d003      	beq.n	80131e8 <__mcmp+0x2c>
 80131e0:	d205      	bcs.n	80131ee <__mcmp+0x32>
 80131e2:	f04f 30ff 	mov.w	r0, #4294967295
 80131e6:	bd30      	pop	{r4, r5, pc}
 80131e8:	42a3      	cmp	r3, r4
 80131ea:	d3f3      	bcc.n	80131d4 <__mcmp+0x18>
 80131ec:	e7fb      	b.n	80131e6 <__mcmp+0x2a>
 80131ee:	2001      	movs	r0, #1
 80131f0:	e7f9      	b.n	80131e6 <__mcmp+0x2a>
	...

080131f4 <__mdiff>:
 80131f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f8:	4689      	mov	r9, r1
 80131fa:	4606      	mov	r6, r0
 80131fc:	4611      	mov	r1, r2
 80131fe:	4648      	mov	r0, r9
 8013200:	4614      	mov	r4, r2
 8013202:	f7ff ffdb 	bl	80131bc <__mcmp>
 8013206:	1e05      	subs	r5, r0, #0
 8013208:	d112      	bne.n	8013230 <__mdiff+0x3c>
 801320a:	4629      	mov	r1, r5
 801320c:	4630      	mov	r0, r6
 801320e:	f7ff fd11 	bl	8012c34 <_Balloc>
 8013212:	4602      	mov	r2, r0
 8013214:	b928      	cbnz	r0, 8013222 <__mdiff+0x2e>
 8013216:	4b3f      	ldr	r3, [pc, #252]	@ (8013314 <__mdiff+0x120>)
 8013218:	f240 2137 	movw	r1, #567	@ 0x237
 801321c:	483e      	ldr	r0, [pc, #248]	@ (8013318 <__mdiff+0x124>)
 801321e:	f001 fbfb 	bl	8014a18 <__assert_func>
 8013222:	2301      	movs	r3, #1
 8013224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013228:	4610      	mov	r0, r2
 801322a:	b003      	add	sp, #12
 801322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013230:	bfbc      	itt	lt
 8013232:	464b      	movlt	r3, r9
 8013234:	46a1      	movlt	r9, r4
 8013236:	4630      	mov	r0, r6
 8013238:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801323c:	bfba      	itte	lt
 801323e:	461c      	movlt	r4, r3
 8013240:	2501      	movlt	r5, #1
 8013242:	2500      	movge	r5, #0
 8013244:	f7ff fcf6 	bl	8012c34 <_Balloc>
 8013248:	4602      	mov	r2, r0
 801324a:	b918      	cbnz	r0, 8013254 <__mdiff+0x60>
 801324c:	4b31      	ldr	r3, [pc, #196]	@ (8013314 <__mdiff+0x120>)
 801324e:	f240 2145 	movw	r1, #581	@ 0x245
 8013252:	e7e3      	b.n	801321c <__mdiff+0x28>
 8013254:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013258:	6926      	ldr	r6, [r4, #16]
 801325a:	60c5      	str	r5, [r0, #12]
 801325c:	f109 0310 	add.w	r3, r9, #16
 8013260:	f109 0514 	add.w	r5, r9, #20
 8013264:	f104 0e14 	add.w	lr, r4, #20
 8013268:	f100 0b14 	add.w	fp, r0, #20
 801326c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013270:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013274:	9301      	str	r3, [sp, #4]
 8013276:	46d9      	mov	r9, fp
 8013278:	f04f 0c00 	mov.w	ip, #0
 801327c:	9b01      	ldr	r3, [sp, #4]
 801327e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013282:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013286:	9301      	str	r3, [sp, #4]
 8013288:	fa1f f38a 	uxth.w	r3, sl
 801328c:	4619      	mov	r1, r3
 801328e:	b283      	uxth	r3, r0
 8013290:	1acb      	subs	r3, r1, r3
 8013292:	0c00      	lsrs	r0, r0, #16
 8013294:	4463      	add	r3, ip
 8013296:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801329a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801329e:	b29b      	uxth	r3, r3
 80132a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80132a4:	4576      	cmp	r6, lr
 80132a6:	f849 3b04 	str.w	r3, [r9], #4
 80132aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80132ae:	d8e5      	bhi.n	801327c <__mdiff+0x88>
 80132b0:	1b33      	subs	r3, r6, r4
 80132b2:	3b15      	subs	r3, #21
 80132b4:	f023 0303 	bic.w	r3, r3, #3
 80132b8:	3415      	adds	r4, #21
 80132ba:	3304      	adds	r3, #4
 80132bc:	42a6      	cmp	r6, r4
 80132be:	bf38      	it	cc
 80132c0:	2304      	movcc	r3, #4
 80132c2:	441d      	add	r5, r3
 80132c4:	445b      	add	r3, fp
 80132c6:	461e      	mov	r6, r3
 80132c8:	462c      	mov	r4, r5
 80132ca:	4544      	cmp	r4, r8
 80132cc:	d30e      	bcc.n	80132ec <__mdiff+0xf8>
 80132ce:	f108 0103 	add.w	r1, r8, #3
 80132d2:	1b49      	subs	r1, r1, r5
 80132d4:	f021 0103 	bic.w	r1, r1, #3
 80132d8:	3d03      	subs	r5, #3
 80132da:	45a8      	cmp	r8, r5
 80132dc:	bf38      	it	cc
 80132de:	2100      	movcc	r1, #0
 80132e0:	440b      	add	r3, r1
 80132e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80132e6:	b191      	cbz	r1, 801330e <__mdiff+0x11a>
 80132e8:	6117      	str	r7, [r2, #16]
 80132ea:	e79d      	b.n	8013228 <__mdiff+0x34>
 80132ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80132f0:	46e6      	mov	lr, ip
 80132f2:	0c08      	lsrs	r0, r1, #16
 80132f4:	fa1c fc81 	uxtah	ip, ip, r1
 80132f8:	4471      	add	r1, lr
 80132fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80132fe:	b289      	uxth	r1, r1
 8013300:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013304:	f846 1b04 	str.w	r1, [r6], #4
 8013308:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801330c:	e7dd      	b.n	80132ca <__mdiff+0xd6>
 801330e:	3f01      	subs	r7, #1
 8013310:	e7e7      	b.n	80132e2 <__mdiff+0xee>
 8013312:	bf00      	nop
 8013314:	08015445 	.word	0x08015445
 8013318:	08015456 	.word	0x08015456

0801331c <__ulp>:
 801331c:	b082      	sub	sp, #8
 801331e:	ed8d 0b00 	vstr	d0, [sp]
 8013322:	9a01      	ldr	r2, [sp, #4]
 8013324:	4b0f      	ldr	r3, [pc, #60]	@ (8013364 <__ulp+0x48>)
 8013326:	4013      	ands	r3, r2
 8013328:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801332c:	2b00      	cmp	r3, #0
 801332e:	dc08      	bgt.n	8013342 <__ulp+0x26>
 8013330:	425b      	negs	r3, r3
 8013332:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013336:	ea4f 5223 	mov.w	r2, r3, asr #20
 801333a:	da04      	bge.n	8013346 <__ulp+0x2a>
 801333c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013340:	4113      	asrs	r3, r2
 8013342:	2200      	movs	r2, #0
 8013344:	e008      	b.n	8013358 <__ulp+0x3c>
 8013346:	f1a2 0314 	sub.w	r3, r2, #20
 801334a:	2b1e      	cmp	r3, #30
 801334c:	bfda      	itte	le
 801334e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013352:	40da      	lsrle	r2, r3
 8013354:	2201      	movgt	r2, #1
 8013356:	2300      	movs	r3, #0
 8013358:	4619      	mov	r1, r3
 801335a:	4610      	mov	r0, r2
 801335c:	ec41 0b10 	vmov	d0, r0, r1
 8013360:	b002      	add	sp, #8
 8013362:	4770      	bx	lr
 8013364:	7ff00000 	.word	0x7ff00000

08013368 <__b2d>:
 8013368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801336c:	6906      	ldr	r6, [r0, #16]
 801336e:	f100 0814 	add.w	r8, r0, #20
 8013372:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013376:	1f37      	subs	r7, r6, #4
 8013378:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801337c:	4610      	mov	r0, r2
 801337e:	f7ff fd4b 	bl	8012e18 <__hi0bits>
 8013382:	f1c0 0320 	rsb	r3, r0, #32
 8013386:	280a      	cmp	r0, #10
 8013388:	600b      	str	r3, [r1, #0]
 801338a:	491b      	ldr	r1, [pc, #108]	@ (80133f8 <__b2d+0x90>)
 801338c:	dc15      	bgt.n	80133ba <__b2d+0x52>
 801338e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013392:	fa22 f30c 	lsr.w	r3, r2, ip
 8013396:	45b8      	cmp	r8, r7
 8013398:	ea43 0501 	orr.w	r5, r3, r1
 801339c:	bf34      	ite	cc
 801339e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133a2:	2300      	movcs	r3, #0
 80133a4:	3015      	adds	r0, #21
 80133a6:	fa02 f000 	lsl.w	r0, r2, r0
 80133aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80133ae:	4303      	orrs	r3, r0
 80133b0:	461c      	mov	r4, r3
 80133b2:	ec45 4b10 	vmov	d0, r4, r5
 80133b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ba:	45b8      	cmp	r8, r7
 80133bc:	bf3a      	itte	cc
 80133be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80133c6:	2300      	movcs	r3, #0
 80133c8:	380b      	subs	r0, #11
 80133ca:	d012      	beq.n	80133f2 <__b2d+0x8a>
 80133cc:	f1c0 0120 	rsb	r1, r0, #32
 80133d0:	fa23 f401 	lsr.w	r4, r3, r1
 80133d4:	4082      	lsls	r2, r0
 80133d6:	4322      	orrs	r2, r4
 80133d8:	4547      	cmp	r7, r8
 80133da:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80133de:	bf8c      	ite	hi
 80133e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80133e4:	2200      	movls	r2, #0
 80133e6:	4083      	lsls	r3, r0
 80133e8:	40ca      	lsrs	r2, r1
 80133ea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80133ee:	4313      	orrs	r3, r2
 80133f0:	e7de      	b.n	80133b0 <__b2d+0x48>
 80133f2:	ea42 0501 	orr.w	r5, r2, r1
 80133f6:	e7db      	b.n	80133b0 <__b2d+0x48>
 80133f8:	3ff00000 	.word	0x3ff00000

080133fc <__d2b>:
 80133fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013400:	460f      	mov	r7, r1
 8013402:	2101      	movs	r1, #1
 8013404:	ec59 8b10 	vmov	r8, r9, d0
 8013408:	4616      	mov	r6, r2
 801340a:	f7ff fc13 	bl	8012c34 <_Balloc>
 801340e:	4604      	mov	r4, r0
 8013410:	b930      	cbnz	r0, 8013420 <__d2b+0x24>
 8013412:	4602      	mov	r2, r0
 8013414:	4b23      	ldr	r3, [pc, #140]	@ (80134a4 <__d2b+0xa8>)
 8013416:	4824      	ldr	r0, [pc, #144]	@ (80134a8 <__d2b+0xac>)
 8013418:	f240 310f 	movw	r1, #783	@ 0x30f
 801341c:	f001 fafc 	bl	8014a18 <__assert_func>
 8013420:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013424:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013428:	b10d      	cbz	r5, 801342e <__d2b+0x32>
 801342a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801342e:	9301      	str	r3, [sp, #4]
 8013430:	f1b8 0300 	subs.w	r3, r8, #0
 8013434:	d023      	beq.n	801347e <__d2b+0x82>
 8013436:	4668      	mov	r0, sp
 8013438:	9300      	str	r3, [sp, #0]
 801343a:	f7ff fd0c 	bl	8012e56 <__lo0bits>
 801343e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013442:	b1d0      	cbz	r0, 801347a <__d2b+0x7e>
 8013444:	f1c0 0320 	rsb	r3, r0, #32
 8013448:	fa02 f303 	lsl.w	r3, r2, r3
 801344c:	430b      	orrs	r3, r1
 801344e:	40c2      	lsrs	r2, r0
 8013450:	6163      	str	r3, [r4, #20]
 8013452:	9201      	str	r2, [sp, #4]
 8013454:	9b01      	ldr	r3, [sp, #4]
 8013456:	61a3      	str	r3, [r4, #24]
 8013458:	2b00      	cmp	r3, #0
 801345a:	bf0c      	ite	eq
 801345c:	2201      	moveq	r2, #1
 801345e:	2202      	movne	r2, #2
 8013460:	6122      	str	r2, [r4, #16]
 8013462:	b1a5      	cbz	r5, 801348e <__d2b+0x92>
 8013464:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013468:	4405      	add	r5, r0
 801346a:	603d      	str	r5, [r7, #0]
 801346c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013470:	6030      	str	r0, [r6, #0]
 8013472:	4620      	mov	r0, r4
 8013474:	b003      	add	sp, #12
 8013476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801347a:	6161      	str	r1, [r4, #20]
 801347c:	e7ea      	b.n	8013454 <__d2b+0x58>
 801347e:	a801      	add	r0, sp, #4
 8013480:	f7ff fce9 	bl	8012e56 <__lo0bits>
 8013484:	9b01      	ldr	r3, [sp, #4]
 8013486:	6163      	str	r3, [r4, #20]
 8013488:	3020      	adds	r0, #32
 801348a:	2201      	movs	r2, #1
 801348c:	e7e8      	b.n	8013460 <__d2b+0x64>
 801348e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013492:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013496:	6038      	str	r0, [r7, #0]
 8013498:	6918      	ldr	r0, [r3, #16]
 801349a:	f7ff fcbd 	bl	8012e18 <__hi0bits>
 801349e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80134a2:	e7e5      	b.n	8013470 <__d2b+0x74>
 80134a4:	08015445 	.word	0x08015445
 80134a8:	08015456 	.word	0x08015456

080134ac <__ratio>:
 80134ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b0:	4688      	mov	r8, r1
 80134b2:	4669      	mov	r1, sp
 80134b4:	4681      	mov	r9, r0
 80134b6:	f7ff ff57 	bl	8013368 <__b2d>
 80134ba:	a901      	add	r1, sp, #4
 80134bc:	4640      	mov	r0, r8
 80134be:	ec55 4b10 	vmov	r4, r5, d0
 80134c2:	f7ff ff51 	bl	8013368 <__b2d>
 80134c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80134ca:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80134ce:	1ad2      	subs	r2, r2, r3
 80134d0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80134d4:	1a5b      	subs	r3, r3, r1
 80134d6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80134da:	ec57 6b10 	vmov	r6, r7, d0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	bfd6      	itet	le
 80134e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80134e6:	462a      	movgt	r2, r5
 80134e8:	463a      	movle	r2, r7
 80134ea:	46ab      	mov	fp, r5
 80134ec:	46a2      	mov	sl, r4
 80134ee:	bfce      	itee	gt
 80134f0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80134f4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80134f8:	ee00 3a90 	vmovle	s1, r3
 80134fc:	ec4b ab17 	vmov	d7, sl, fp
 8013500:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013504:	b003      	add	sp, #12
 8013506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801350a <__copybits>:
 801350a:	3901      	subs	r1, #1
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	1149      	asrs	r1, r1, #5
 8013510:	6914      	ldr	r4, [r2, #16]
 8013512:	3101      	adds	r1, #1
 8013514:	f102 0314 	add.w	r3, r2, #20
 8013518:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801351c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013520:	1f05      	subs	r5, r0, #4
 8013522:	42a3      	cmp	r3, r4
 8013524:	d30c      	bcc.n	8013540 <__copybits+0x36>
 8013526:	1aa3      	subs	r3, r4, r2
 8013528:	3b11      	subs	r3, #17
 801352a:	f023 0303 	bic.w	r3, r3, #3
 801352e:	3211      	adds	r2, #17
 8013530:	42a2      	cmp	r2, r4
 8013532:	bf88      	it	hi
 8013534:	2300      	movhi	r3, #0
 8013536:	4418      	add	r0, r3
 8013538:	2300      	movs	r3, #0
 801353a:	4288      	cmp	r0, r1
 801353c:	d305      	bcc.n	801354a <__copybits+0x40>
 801353e:	bd70      	pop	{r4, r5, r6, pc}
 8013540:	f853 6b04 	ldr.w	r6, [r3], #4
 8013544:	f845 6f04 	str.w	r6, [r5, #4]!
 8013548:	e7eb      	b.n	8013522 <__copybits+0x18>
 801354a:	f840 3b04 	str.w	r3, [r0], #4
 801354e:	e7f4      	b.n	801353a <__copybits+0x30>

08013550 <__any_on>:
 8013550:	f100 0214 	add.w	r2, r0, #20
 8013554:	6900      	ldr	r0, [r0, #16]
 8013556:	114b      	asrs	r3, r1, #5
 8013558:	4298      	cmp	r0, r3
 801355a:	b510      	push	{r4, lr}
 801355c:	db11      	blt.n	8013582 <__any_on+0x32>
 801355e:	dd0a      	ble.n	8013576 <__any_on+0x26>
 8013560:	f011 011f 	ands.w	r1, r1, #31
 8013564:	d007      	beq.n	8013576 <__any_on+0x26>
 8013566:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801356a:	fa24 f001 	lsr.w	r0, r4, r1
 801356e:	fa00 f101 	lsl.w	r1, r0, r1
 8013572:	428c      	cmp	r4, r1
 8013574:	d10b      	bne.n	801358e <__any_on+0x3e>
 8013576:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801357a:	4293      	cmp	r3, r2
 801357c:	d803      	bhi.n	8013586 <__any_on+0x36>
 801357e:	2000      	movs	r0, #0
 8013580:	bd10      	pop	{r4, pc}
 8013582:	4603      	mov	r3, r0
 8013584:	e7f7      	b.n	8013576 <__any_on+0x26>
 8013586:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801358a:	2900      	cmp	r1, #0
 801358c:	d0f5      	beq.n	801357a <__any_on+0x2a>
 801358e:	2001      	movs	r0, #1
 8013590:	e7f6      	b.n	8013580 <__any_on+0x30>

08013592 <sulp>:
 8013592:	b570      	push	{r4, r5, r6, lr}
 8013594:	4604      	mov	r4, r0
 8013596:	460d      	mov	r5, r1
 8013598:	4616      	mov	r6, r2
 801359a:	ec45 4b10 	vmov	d0, r4, r5
 801359e:	f7ff febd 	bl	801331c <__ulp>
 80135a2:	b17e      	cbz	r6, 80135c4 <sulp+0x32>
 80135a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	dd09      	ble.n	80135c4 <sulp+0x32>
 80135b0:	051b      	lsls	r3, r3, #20
 80135b2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80135b6:	2000      	movs	r0, #0
 80135b8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80135bc:	ec41 0b17 	vmov	d7, r0, r1
 80135c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80135c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080135c8 <_strtod_l>:
 80135c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135cc:	ed2d 8b0a 	vpush	{d8-d12}
 80135d0:	b097      	sub	sp, #92	@ 0x5c
 80135d2:	4688      	mov	r8, r1
 80135d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80135d6:	2200      	movs	r2, #0
 80135d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80135da:	9005      	str	r0, [sp, #20]
 80135dc:	f04f 0a00 	mov.w	sl, #0
 80135e0:	f04f 0b00 	mov.w	fp, #0
 80135e4:	460a      	mov	r2, r1
 80135e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80135e8:	7811      	ldrb	r1, [r2, #0]
 80135ea:	292b      	cmp	r1, #43	@ 0x2b
 80135ec:	d04c      	beq.n	8013688 <_strtod_l+0xc0>
 80135ee:	d839      	bhi.n	8013664 <_strtod_l+0x9c>
 80135f0:	290d      	cmp	r1, #13
 80135f2:	d833      	bhi.n	801365c <_strtod_l+0x94>
 80135f4:	2908      	cmp	r1, #8
 80135f6:	d833      	bhi.n	8013660 <_strtod_l+0x98>
 80135f8:	2900      	cmp	r1, #0
 80135fa:	d03c      	beq.n	8013676 <_strtod_l+0xae>
 80135fc:	2200      	movs	r2, #0
 80135fe:	9208      	str	r2, [sp, #32]
 8013600:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013602:	782a      	ldrb	r2, [r5, #0]
 8013604:	2a30      	cmp	r2, #48	@ 0x30
 8013606:	f040 80b5 	bne.w	8013774 <_strtod_l+0x1ac>
 801360a:	786a      	ldrb	r2, [r5, #1]
 801360c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013610:	2a58      	cmp	r2, #88	@ 0x58
 8013612:	d170      	bne.n	80136f6 <_strtod_l+0x12e>
 8013614:	9302      	str	r3, [sp, #8]
 8013616:	9b08      	ldr	r3, [sp, #32]
 8013618:	9301      	str	r3, [sp, #4]
 801361a:	ab12      	add	r3, sp, #72	@ 0x48
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	4a8b      	ldr	r2, [pc, #556]	@ (801384c <_strtod_l+0x284>)
 8013620:	9805      	ldr	r0, [sp, #20]
 8013622:	ab13      	add	r3, sp, #76	@ 0x4c
 8013624:	a911      	add	r1, sp, #68	@ 0x44
 8013626:	f001 fa91 	bl	8014b4c <__gethex>
 801362a:	f010 060f 	ands.w	r6, r0, #15
 801362e:	4604      	mov	r4, r0
 8013630:	d005      	beq.n	801363e <_strtod_l+0x76>
 8013632:	2e06      	cmp	r6, #6
 8013634:	d12a      	bne.n	801368c <_strtod_l+0xc4>
 8013636:	3501      	adds	r5, #1
 8013638:	2300      	movs	r3, #0
 801363a:	9511      	str	r5, [sp, #68]	@ 0x44
 801363c:	9308      	str	r3, [sp, #32]
 801363e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013640:	2b00      	cmp	r3, #0
 8013642:	f040 852f 	bne.w	80140a4 <_strtod_l+0xadc>
 8013646:	9b08      	ldr	r3, [sp, #32]
 8013648:	ec4b ab10 	vmov	d0, sl, fp
 801364c:	b1cb      	cbz	r3, 8013682 <_strtod_l+0xba>
 801364e:	eeb1 0b40 	vneg.f64	d0, d0
 8013652:	b017      	add	sp, #92	@ 0x5c
 8013654:	ecbd 8b0a 	vpop	{d8-d12}
 8013658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801365c:	2920      	cmp	r1, #32
 801365e:	d1cd      	bne.n	80135fc <_strtod_l+0x34>
 8013660:	3201      	adds	r2, #1
 8013662:	e7c0      	b.n	80135e6 <_strtod_l+0x1e>
 8013664:	292d      	cmp	r1, #45	@ 0x2d
 8013666:	d1c9      	bne.n	80135fc <_strtod_l+0x34>
 8013668:	2101      	movs	r1, #1
 801366a:	9108      	str	r1, [sp, #32]
 801366c:	1c51      	adds	r1, r2, #1
 801366e:	9111      	str	r1, [sp, #68]	@ 0x44
 8013670:	7852      	ldrb	r2, [r2, #1]
 8013672:	2a00      	cmp	r2, #0
 8013674:	d1c4      	bne.n	8013600 <_strtod_l+0x38>
 8013676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013678:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801367c:	2b00      	cmp	r3, #0
 801367e:	f040 850f 	bne.w	80140a0 <_strtod_l+0xad8>
 8013682:	ec4b ab10 	vmov	d0, sl, fp
 8013686:	e7e4      	b.n	8013652 <_strtod_l+0x8a>
 8013688:	2100      	movs	r1, #0
 801368a:	e7ee      	b.n	801366a <_strtod_l+0xa2>
 801368c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801368e:	b13a      	cbz	r2, 80136a0 <_strtod_l+0xd8>
 8013690:	2135      	movs	r1, #53	@ 0x35
 8013692:	a814      	add	r0, sp, #80	@ 0x50
 8013694:	f7ff ff39 	bl	801350a <__copybits>
 8013698:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801369a:	9805      	ldr	r0, [sp, #20]
 801369c:	f7ff fb0a 	bl	8012cb4 <_Bfree>
 80136a0:	1e73      	subs	r3, r6, #1
 80136a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80136a4:	2b04      	cmp	r3, #4
 80136a6:	d806      	bhi.n	80136b6 <_strtod_l+0xee>
 80136a8:	e8df f003 	tbb	[pc, r3]
 80136ac:	201d0314 	.word	0x201d0314
 80136b0:	14          	.byte	0x14
 80136b1:	00          	.byte	0x00
 80136b2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80136b6:	05e3      	lsls	r3, r4, #23
 80136b8:	bf48      	it	mi
 80136ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80136be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80136c2:	0d1b      	lsrs	r3, r3, #20
 80136c4:	051b      	lsls	r3, r3, #20
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1b9      	bne.n	801363e <_strtod_l+0x76>
 80136ca:	f7fe fb93 	bl	8011df4 <__errno>
 80136ce:	2322      	movs	r3, #34	@ 0x22
 80136d0:	6003      	str	r3, [r0, #0]
 80136d2:	e7b4      	b.n	801363e <_strtod_l+0x76>
 80136d4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80136d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80136dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80136e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80136e4:	e7e7      	b.n	80136b6 <_strtod_l+0xee>
 80136e6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8013854 <_strtod_l+0x28c>
 80136ea:	e7e4      	b.n	80136b6 <_strtod_l+0xee>
 80136ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80136f0:	f04f 3aff 	mov.w	sl, #4294967295
 80136f4:	e7df      	b.n	80136b6 <_strtod_l+0xee>
 80136f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80136f8:	1c5a      	adds	r2, r3, #1
 80136fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80136fc:	785b      	ldrb	r3, [r3, #1]
 80136fe:	2b30      	cmp	r3, #48	@ 0x30
 8013700:	d0f9      	beq.n	80136f6 <_strtod_l+0x12e>
 8013702:	2b00      	cmp	r3, #0
 8013704:	d09b      	beq.n	801363e <_strtod_l+0x76>
 8013706:	2301      	movs	r3, #1
 8013708:	2600      	movs	r6, #0
 801370a:	9307      	str	r3, [sp, #28]
 801370c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801370e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013710:	46b1      	mov	r9, r6
 8013712:	4635      	mov	r5, r6
 8013714:	220a      	movs	r2, #10
 8013716:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013718:	7804      	ldrb	r4, [r0, #0]
 801371a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801371e:	b2d9      	uxtb	r1, r3
 8013720:	2909      	cmp	r1, #9
 8013722:	d929      	bls.n	8013778 <_strtod_l+0x1b0>
 8013724:	494a      	ldr	r1, [pc, #296]	@ (8013850 <_strtod_l+0x288>)
 8013726:	2201      	movs	r2, #1
 8013728:	f001 f928 	bl	801497c <strncmp>
 801372c:	b378      	cbz	r0, 801378e <_strtod_l+0x1c6>
 801372e:	2000      	movs	r0, #0
 8013730:	4622      	mov	r2, r4
 8013732:	462b      	mov	r3, r5
 8013734:	4607      	mov	r7, r0
 8013736:	9006      	str	r0, [sp, #24]
 8013738:	2a65      	cmp	r2, #101	@ 0x65
 801373a:	d001      	beq.n	8013740 <_strtod_l+0x178>
 801373c:	2a45      	cmp	r2, #69	@ 0x45
 801373e:	d117      	bne.n	8013770 <_strtod_l+0x1a8>
 8013740:	b91b      	cbnz	r3, 801374a <_strtod_l+0x182>
 8013742:	9b07      	ldr	r3, [sp, #28]
 8013744:	4303      	orrs	r3, r0
 8013746:	d096      	beq.n	8013676 <_strtod_l+0xae>
 8013748:	2300      	movs	r3, #0
 801374a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801374e:	f108 0201 	add.w	r2, r8, #1
 8013752:	9211      	str	r2, [sp, #68]	@ 0x44
 8013754:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013758:	2a2b      	cmp	r2, #43	@ 0x2b
 801375a:	d06b      	beq.n	8013834 <_strtod_l+0x26c>
 801375c:	2a2d      	cmp	r2, #45	@ 0x2d
 801375e:	d071      	beq.n	8013844 <_strtod_l+0x27c>
 8013760:	f04f 0e00 	mov.w	lr, #0
 8013764:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013768:	2c09      	cmp	r4, #9
 801376a:	d979      	bls.n	8013860 <_strtod_l+0x298>
 801376c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013770:	2400      	movs	r4, #0
 8013772:	e094      	b.n	801389e <_strtod_l+0x2d6>
 8013774:	2300      	movs	r3, #0
 8013776:	e7c7      	b.n	8013708 <_strtod_l+0x140>
 8013778:	2d08      	cmp	r5, #8
 801377a:	f100 0001 	add.w	r0, r0, #1
 801377e:	bfd4      	ite	le
 8013780:	fb02 3909 	mlale	r9, r2, r9, r3
 8013784:	fb02 3606 	mlagt	r6, r2, r6, r3
 8013788:	3501      	adds	r5, #1
 801378a:	9011      	str	r0, [sp, #68]	@ 0x44
 801378c:	e7c3      	b.n	8013716 <_strtod_l+0x14e>
 801378e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013790:	1c5a      	adds	r2, r3, #1
 8013792:	9211      	str	r2, [sp, #68]	@ 0x44
 8013794:	785a      	ldrb	r2, [r3, #1]
 8013796:	b375      	cbz	r5, 80137f6 <_strtod_l+0x22e>
 8013798:	4607      	mov	r7, r0
 801379a:	462b      	mov	r3, r5
 801379c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80137a0:	2909      	cmp	r1, #9
 80137a2:	d913      	bls.n	80137cc <_strtod_l+0x204>
 80137a4:	2101      	movs	r1, #1
 80137a6:	9106      	str	r1, [sp, #24]
 80137a8:	e7c6      	b.n	8013738 <_strtod_l+0x170>
 80137aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137ac:	1c5a      	adds	r2, r3, #1
 80137ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80137b0:	785a      	ldrb	r2, [r3, #1]
 80137b2:	3001      	adds	r0, #1
 80137b4:	2a30      	cmp	r2, #48	@ 0x30
 80137b6:	d0f8      	beq.n	80137aa <_strtod_l+0x1e2>
 80137b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80137bc:	2b08      	cmp	r3, #8
 80137be:	f200 8476 	bhi.w	80140ae <_strtod_l+0xae6>
 80137c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80137c6:	4607      	mov	r7, r0
 80137c8:	2000      	movs	r0, #0
 80137ca:	4603      	mov	r3, r0
 80137cc:	3a30      	subs	r2, #48	@ 0x30
 80137ce:	f100 0101 	add.w	r1, r0, #1
 80137d2:	d023      	beq.n	801381c <_strtod_l+0x254>
 80137d4:	440f      	add	r7, r1
 80137d6:	eb00 0c03 	add.w	ip, r0, r3
 80137da:	4619      	mov	r1, r3
 80137dc:	240a      	movs	r4, #10
 80137de:	4561      	cmp	r1, ip
 80137e0:	d10b      	bne.n	80137fa <_strtod_l+0x232>
 80137e2:	1c5c      	adds	r4, r3, #1
 80137e4:	4403      	add	r3, r0
 80137e6:	2b08      	cmp	r3, #8
 80137e8:	4404      	add	r4, r0
 80137ea:	dc11      	bgt.n	8013810 <_strtod_l+0x248>
 80137ec:	230a      	movs	r3, #10
 80137ee:	fb03 2909 	mla	r9, r3, r9, r2
 80137f2:	2100      	movs	r1, #0
 80137f4:	e013      	b.n	801381e <_strtod_l+0x256>
 80137f6:	4628      	mov	r0, r5
 80137f8:	e7dc      	b.n	80137b4 <_strtod_l+0x1ec>
 80137fa:	2908      	cmp	r1, #8
 80137fc:	f101 0101 	add.w	r1, r1, #1
 8013800:	dc02      	bgt.n	8013808 <_strtod_l+0x240>
 8013802:	fb04 f909 	mul.w	r9, r4, r9
 8013806:	e7ea      	b.n	80137de <_strtod_l+0x216>
 8013808:	2910      	cmp	r1, #16
 801380a:	bfd8      	it	le
 801380c:	4366      	mulle	r6, r4
 801380e:	e7e6      	b.n	80137de <_strtod_l+0x216>
 8013810:	2b0f      	cmp	r3, #15
 8013812:	dcee      	bgt.n	80137f2 <_strtod_l+0x22a>
 8013814:	230a      	movs	r3, #10
 8013816:	fb03 2606 	mla	r6, r3, r6, r2
 801381a:	e7ea      	b.n	80137f2 <_strtod_l+0x22a>
 801381c:	461c      	mov	r4, r3
 801381e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013820:	1c5a      	adds	r2, r3, #1
 8013822:	9211      	str	r2, [sp, #68]	@ 0x44
 8013824:	785a      	ldrb	r2, [r3, #1]
 8013826:	4608      	mov	r0, r1
 8013828:	4623      	mov	r3, r4
 801382a:	e7b7      	b.n	801379c <_strtod_l+0x1d4>
 801382c:	2301      	movs	r3, #1
 801382e:	2700      	movs	r7, #0
 8013830:	9306      	str	r3, [sp, #24]
 8013832:	e786      	b.n	8013742 <_strtod_l+0x17a>
 8013834:	f04f 0e00 	mov.w	lr, #0
 8013838:	f108 0202 	add.w	r2, r8, #2
 801383c:	9211      	str	r2, [sp, #68]	@ 0x44
 801383e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013842:	e78f      	b.n	8013764 <_strtod_l+0x19c>
 8013844:	f04f 0e01 	mov.w	lr, #1
 8013848:	e7f6      	b.n	8013838 <_strtod_l+0x270>
 801384a:	bf00      	nop
 801384c:	080155c8 	.word	0x080155c8
 8013850:	080155b0 	.word	0x080155b0
 8013854:	7ff00000 	.word	0x7ff00000
 8013858:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801385a:	1c54      	adds	r4, r2, #1
 801385c:	9411      	str	r4, [sp, #68]	@ 0x44
 801385e:	7852      	ldrb	r2, [r2, #1]
 8013860:	2a30      	cmp	r2, #48	@ 0x30
 8013862:	d0f9      	beq.n	8013858 <_strtod_l+0x290>
 8013864:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8013868:	2c08      	cmp	r4, #8
 801386a:	d881      	bhi.n	8013770 <_strtod_l+0x1a8>
 801386c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013870:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013872:	9209      	str	r2, [sp, #36]	@ 0x24
 8013874:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013876:	1c51      	adds	r1, r2, #1
 8013878:	9111      	str	r1, [sp, #68]	@ 0x44
 801387a:	7852      	ldrb	r2, [r2, #1]
 801387c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013880:	2c09      	cmp	r4, #9
 8013882:	d938      	bls.n	80138f6 <_strtod_l+0x32e>
 8013884:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013886:	1b0c      	subs	r4, r1, r4
 8013888:	2c08      	cmp	r4, #8
 801388a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801388e:	dc02      	bgt.n	8013896 <_strtod_l+0x2ce>
 8013890:	4564      	cmp	r4, ip
 8013892:	bfa8      	it	ge
 8013894:	4664      	movge	r4, ip
 8013896:	f1be 0f00 	cmp.w	lr, #0
 801389a:	d000      	beq.n	801389e <_strtod_l+0x2d6>
 801389c:	4264      	negs	r4, r4
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d14e      	bne.n	8013940 <_strtod_l+0x378>
 80138a2:	9b07      	ldr	r3, [sp, #28]
 80138a4:	4318      	orrs	r0, r3
 80138a6:	f47f aeca 	bne.w	801363e <_strtod_l+0x76>
 80138aa:	9b06      	ldr	r3, [sp, #24]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f47f aee2 	bne.w	8013676 <_strtod_l+0xae>
 80138b2:	2a69      	cmp	r2, #105	@ 0x69
 80138b4:	d027      	beq.n	8013906 <_strtod_l+0x33e>
 80138b6:	dc24      	bgt.n	8013902 <_strtod_l+0x33a>
 80138b8:	2a49      	cmp	r2, #73	@ 0x49
 80138ba:	d024      	beq.n	8013906 <_strtod_l+0x33e>
 80138bc:	2a4e      	cmp	r2, #78	@ 0x4e
 80138be:	f47f aeda 	bne.w	8013676 <_strtod_l+0xae>
 80138c2:	4997      	ldr	r1, [pc, #604]	@ (8013b20 <_strtod_l+0x558>)
 80138c4:	a811      	add	r0, sp, #68	@ 0x44
 80138c6:	f001 fb63 	bl	8014f90 <__match>
 80138ca:	2800      	cmp	r0, #0
 80138cc:	f43f aed3 	beq.w	8013676 <_strtod_l+0xae>
 80138d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	2b28      	cmp	r3, #40	@ 0x28
 80138d6:	d12d      	bne.n	8013934 <_strtod_l+0x36c>
 80138d8:	4992      	ldr	r1, [pc, #584]	@ (8013b24 <_strtod_l+0x55c>)
 80138da:	aa14      	add	r2, sp, #80	@ 0x50
 80138dc:	a811      	add	r0, sp, #68	@ 0x44
 80138de:	f001 fb6b 	bl	8014fb8 <__hexnan>
 80138e2:	2805      	cmp	r0, #5
 80138e4:	d126      	bne.n	8013934 <_strtod_l+0x36c>
 80138e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80138e8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80138ec:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80138f0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80138f4:	e6a3      	b.n	801363e <_strtod_l+0x76>
 80138f6:	240a      	movs	r4, #10
 80138f8:	fb04 2c0c 	mla	ip, r4, ip, r2
 80138fc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013900:	e7b8      	b.n	8013874 <_strtod_l+0x2ac>
 8013902:	2a6e      	cmp	r2, #110	@ 0x6e
 8013904:	e7db      	b.n	80138be <_strtod_l+0x2f6>
 8013906:	4988      	ldr	r1, [pc, #544]	@ (8013b28 <_strtod_l+0x560>)
 8013908:	a811      	add	r0, sp, #68	@ 0x44
 801390a:	f001 fb41 	bl	8014f90 <__match>
 801390e:	2800      	cmp	r0, #0
 8013910:	f43f aeb1 	beq.w	8013676 <_strtod_l+0xae>
 8013914:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013916:	4985      	ldr	r1, [pc, #532]	@ (8013b2c <_strtod_l+0x564>)
 8013918:	3b01      	subs	r3, #1
 801391a:	a811      	add	r0, sp, #68	@ 0x44
 801391c:	9311      	str	r3, [sp, #68]	@ 0x44
 801391e:	f001 fb37 	bl	8014f90 <__match>
 8013922:	b910      	cbnz	r0, 801392a <_strtod_l+0x362>
 8013924:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013926:	3301      	adds	r3, #1
 8013928:	9311      	str	r3, [sp, #68]	@ 0x44
 801392a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013b40 <_strtod_l+0x578>
 801392e:	f04f 0a00 	mov.w	sl, #0
 8013932:	e684      	b.n	801363e <_strtod_l+0x76>
 8013934:	487e      	ldr	r0, [pc, #504]	@ (8013b30 <_strtod_l+0x568>)
 8013936:	f001 f867 	bl	8014a08 <nan>
 801393a:	ec5b ab10 	vmov	sl, fp, d0
 801393e:	e67e      	b.n	801363e <_strtod_l+0x76>
 8013940:	ee07 9a90 	vmov	s15, r9
 8013944:	1be2      	subs	r2, r4, r7
 8013946:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801394a:	2d00      	cmp	r5, #0
 801394c:	bf08      	it	eq
 801394e:	461d      	moveq	r5, r3
 8013950:	2b10      	cmp	r3, #16
 8013952:	9209      	str	r2, [sp, #36]	@ 0x24
 8013954:	461a      	mov	r2, r3
 8013956:	bfa8      	it	ge
 8013958:	2210      	movge	r2, #16
 801395a:	2b09      	cmp	r3, #9
 801395c:	ec5b ab17 	vmov	sl, fp, d7
 8013960:	dc15      	bgt.n	801398e <_strtod_l+0x3c6>
 8013962:	1be1      	subs	r1, r4, r7
 8013964:	2900      	cmp	r1, #0
 8013966:	f43f ae6a 	beq.w	801363e <_strtod_l+0x76>
 801396a:	eba4 0107 	sub.w	r1, r4, r7
 801396e:	dd72      	ble.n	8013a56 <_strtod_l+0x48e>
 8013970:	2916      	cmp	r1, #22
 8013972:	dc59      	bgt.n	8013a28 <_strtod_l+0x460>
 8013974:	4b6f      	ldr	r3, [pc, #444]	@ (8013b34 <_strtod_l+0x56c>)
 8013976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801397c:	ed93 7b00 	vldr	d7, [r3]
 8013980:	ec4b ab16 	vmov	d6, sl, fp
 8013984:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013988:	ec5b ab17 	vmov	sl, fp, d7
 801398c:	e657      	b.n	801363e <_strtod_l+0x76>
 801398e:	4969      	ldr	r1, [pc, #420]	@ (8013b34 <_strtod_l+0x56c>)
 8013990:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013994:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013998:	ee06 6a90 	vmov	s13, r6
 801399c:	2b0f      	cmp	r3, #15
 801399e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80139a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80139a6:	ec5b ab16 	vmov	sl, fp, d6
 80139aa:	ddda      	ble.n	8013962 <_strtod_l+0x39a>
 80139ac:	1a9a      	subs	r2, r3, r2
 80139ae:	1be1      	subs	r1, r4, r7
 80139b0:	440a      	add	r2, r1
 80139b2:	2a00      	cmp	r2, #0
 80139b4:	f340 8094 	ble.w	8013ae0 <_strtod_l+0x518>
 80139b8:	f012 000f 	ands.w	r0, r2, #15
 80139bc:	d00a      	beq.n	80139d4 <_strtod_l+0x40c>
 80139be:	495d      	ldr	r1, [pc, #372]	@ (8013b34 <_strtod_l+0x56c>)
 80139c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80139c4:	ed91 7b00 	vldr	d7, [r1]
 80139c8:	ec4b ab16 	vmov	d6, sl, fp
 80139cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139d0:	ec5b ab17 	vmov	sl, fp, d7
 80139d4:	f032 020f 	bics.w	r2, r2, #15
 80139d8:	d073      	beq.n	8013ac2 <_strtod_l+0x4fa>
 80139da:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80139de:	dd47      	ble.n	8013a70 <_strtod_l+0x4a8>
 80139e0:	2400      	movs	r4, #0
 80139e2:	4625      	mov	r5, r4
 80139e4:	9407      	str	r4, [sp, #28]
 80139e6:	4626      	mov	r6, r4
 80139e8:	9a05      	ldr	r2, [sp, #20]
 80139ea:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013b40 <_strtod_l+0x578>
 80139ee:	2322      	movs	r3, #34	@ 0x22
 80139f0:	6013      	str	r3, [r2, #0]
 80139f2:	f04f 0a00 	mov.w	sl, #0
 80139f6:	9b07      	ldr	r3, [sp, #28]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f43f ae20 	beq.w	801363e <_strtod_l+0x76>
 80139fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013a00:	9805      	ldr	r0, [sp, #20]
 8013a02:	f7ff f957 	bl	8012cb4 <_Bfree>
 8013a06:	9805      	ldr	r0, [sp, #20]
 8013a08:	4631      	mov	r1, r6
 8013a0a:	f7ff f953 	bl	8012cb4 <_Bfree>
 8013a0e:	9805      	ldr	r0, [sp, #20]
 8013a10:	4629      	mov	r1, r5
 8013a12:	f7ff f94f 	bl	8012cb4 <_Bfree>
 8013a16:	9907      	ldr	r1, [sp, #28]
 8013a18:	9805      	ldr	r0, [sp, #20]
 8013a1a:	f7ff f94b 	bl	8012cb4 <_Bfree>
 8013a1e:	9805      	ldr	r0, [sp, #20]
 8013a20:	4621      	mov	r1, r4
 8013a22:	f7ff f947 	bl	8012cb4 <_Bfree>
 8013a26:	e60a      	b.n	801363e <_strtod_l+0x76>
 8013a28:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013a2c:	1be0      	subs	r0, r4, r7
 8013a2e:	4281      	cmp	r1, r0
 8013a30:	dbbc      	blt.n	80139ac <_strtod_l+0x3e4>
 8013a32:	4a40      	ldr	r2, [pc, #256]	@ (8013b34 <_strtod_l+0x56c>)
 8013a34:	f1c3 030f 	rsb	r3, r3, #15
 8013a38:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013a3c:	ed91 7b00 	vldr	d7, [r1]
 8013a40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a42:	ec4b ab16 	vmov	d6, sl, fp
 8013a46:	1acb      	subs	r3, r1, r3
 8013a48:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013a4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a50:	ed92 6b00 	vldr	d6, [r2]
 8013a54:	e796      	b.n	8013984 <_strtod_l+0x3bc>
 8013a56:	3116      	adds	r1, #22
 8013a58:	dba8      	blt.n	80139ac <_strtod_l+0x3e4>
 8013a5a:	4b36      	ldr	r3, [pc, #216]	@ (8013b34 <_strtod_l+0x56c>)
 8013a5c:	1b3c      	subs	r4, r7, r4
 8013a5e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013a62:	ed94 7b00 	vldr	d7, [r4]
 8013a66:	ec4b ab16 	vmov	d6, sl, fp
 8013a6a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a6e:	e78b      	b.n	8013988 <_strtod_l+0x3c0>
 8013a70:	2000      	movs	r0, #0
 8013a72:	ec4b ab17 	vmov	d7, sl, fp
 8013a76:	4e30      	ldr	r6, [pc, #192]	@ (8013b38 <_strtod_l+0x570>)
 8013a78:	1112      	asrs	r2, r2, #4
 8013a7a:	4601      	mov	r1, r0
 8013a7c:	2a01      	cmp	r2, #1
 8013a7e:	dc23      	bgt.n	8013ac8 <_strtod_l+0x500>
 8013a80:	b108      	cbz	r0, 8013a86 <_strtod_l+0x4be>
 8013a82:	ec5b ab17 	vmov	sl, fp, d7
 8013a86:	4a2c      	ldr	r2, [pc, #176]	@ (8013b38 <_strtod_l+0x570>)
 8013a88:	482c      	ldr	r0, [pc, #176]	@ (8013b3c <_strtod_l+0x574>)
 8013a8a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013a8e:	ed92 7b00 	vldr	d7, [r2]
 8013a92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013a96:	ec4b ab16 	vmov	d6, sl, fp
 8013a9a:	4a29      	ldr	r2, [pc, #164]	@ (8013b40 <_strtod_l+0x578>)
 8013a9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013aa0:	ee17 1a90 	vmov	r1, s15
 8013aa4:	400a      	ands	r2, r1
 8013aa6:	4282      	cmp	r2, r0
 8013aa8:	ec5b ab17 	vmov	sl, fp, d7
 8013aac:	d898      	bhi.n	80139e0 <_strtod_l+0x418>
 8013aae:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013ab2:	4282      	cmp	r2, r0
 8013ab4:	bf86      	itte	hi
 8013ab6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013b44 <_strtod_l+0x57c>
 8013aba:	f04f 3aff 	movhi.w	sl, #4294967295
 8013abe:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	9206      	str	r2, [sp, #24]
 8013ac6:	e076      	b.n	8013bb6 <_strtod_l+0x5ee>
 8013ac8:	f012 0f01 	tst.w	r2, #1
 8013acc:	d004      	beq.n	8013ad8 <_strtod_l+0x510>
 8013ace:	ed96 6b00 	vldr	d6, [r6]
 8013ad2:	2001      	movs	r0, #1
 8013ad4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ad8:	3101      	adds	r1, #1
 8013ada:	1052      	asrs	r2, r2, #1
 8013adc:	3608      	adds	r6, #8
 8013ade:	e7cd      	b.n	8013a7c <_strtod_l+0x4b4>
 8013ae0:	d0ef      	beq.n	8013ac2 <_strtod_l+0x4fa>
 8013ae2:	4252      	negs	r2, r2
 8013ae4:	f012 000f 	ands.w	r0, r2, #15
 8013ae8:	d00a      	beq.n	8013b00 <_strtod_l+0x538>
 8013aea:	4912      	ldr	r1, [pc, #72]	@ (8013b34 <_strtod_l+0x56c>)
 8013aec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013af0:	ed91 7b00 	vldr	d7, [r1]
 8013af4:	ec4b ab16 	vmov	d6, sl, fp
 8013af8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013afc:	ec5b ab17 	vmov	sl, fp, d7
 8013b00:	1112      	asrs	r2, r2, #4
 8013b02:	d0de      	beq.n	8013ac2 <_strtod_l+0x4fa>
 8013b04:	2a1f      	cmp	r2, #31
 8013b06:	dd1f      	ble.n	8013b48 <_strtod_l+0x580>
 8013b08:	2400      	movs	r4, #0
 8013b0a:	4625      	mov	r5, r4
 8013b0c:	9407      	str	r4, [sp, #28]
 8013b0e:	4626      	mov	r6, r4
 8013b10:	9a05      	ldr	r2, [sp, #20]
 8013b12:	2322      	movs	r3, #34	@ 0x22
 8013b14:	f04f 0a00 	mov.w	sl, #0
 8013b18:	f04f 0b00 	mov.w	fp, #0
 8013b1c:	6013      	str	r3, [r2, #0]
 8013b1e:	e76a      	b.n	80139f6 <_strtod_l+0x42e>
 8013b20:	0801539d 	.word	0x0801539d
 8013b24:	080155b4 	.word	0x080155b4
 8013b28:	08015395 	.word	0x08015395
 8013b2c:	080153cc 	.word	0x080153cc
 8013b30:	0801575d 	.word	0x0801575d
 8013b34:	080154e8 	.word	0x080154e8
 8013b38:	080154c0 	.word	0x080154c0
 8013b3c:	7ca00000 	.word	0x7ca00000
 8013b40:	7ff00000 	.word	0x7ff00000
 8013b44:	7fefffff 	.word	0x7fefffff
 8013b48:	f012 0110 	ands.w	r1, r2, #16
 8013b4c:	bf18      	it	ne
 8013b4e:	216a      	movne	r1, #106	@ 0x6a
 8013b50:	9106      	str	r1, [sp, #24]
 8013b52:	ec4b ab17 	vmov	d7, sl, fp
 8013b56:	49b0      	ldr	r1, [pc, #704]	@ (8013e18 <_strtod_l+0x850>)
 8013b58:	2000      	movs	r0, #0
 8013b5a:	07d6      	lsls	r6, r2, #31
 8013b5c:	d504      	bpl.n	8013b68 <_strtod_l+0x5a0>
 8013b5e:	ed91 6b00 	vldr	d6, [r1]
 8013b62:	2001      	movs	r0, #1
 8013b64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b68:	1052      	asrs	r2, r2, #1
 8013b6a:	f101 0108 	add.w	r1, r1, #8
 8013b6e:	d1f4      	bne.n	8013b5a <_strtod_l+0x592>
 8013b70:	b108      	cbz	r0, 8013b76 <_strtod_l+0x5ae>
 8013b72:	ec5b ab17 	vmov	sl, fp, d7
 8013b76:	9a06      	ldr	r2, [sp, #24]
 8013b78:	b1b2      	cbz	r2, 8013ba8 <_strtod_l+0x5e0>
 8013b7a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013b7e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013b82:	2a00      	cmp	r2, #0
 8013b84:	4658      	mov	r0, fp
 8013b86:	dd0f      	ble.n	8013ba8 <_strtod_l+0x5e0>
 8013b88:	2a1f      	cmp	r2, #31
 8013b8a:	dd55      	ble.n	8013c38 <_strtod_l+0x670>
 8013b8c:	2a34      	cmp	r2, #52	@ 0x34
 8013b8e:	bfde      	ittt	le
 8013b90:	f04f 32ff 	movle.w	r2, #4294967295
 8013b94:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013b98:	408a      	lslle	r2, r1
 8013b9a:	f04f 0a00 	mov.w	sl, #0
 8013b9e:	bfcc      	ite	gt
 8013ba0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013ba4:	ea02 0b00 	andle.w	fp, r2, r0
 8013ba8:	ec4b ab17 	vmov	d7, sl, fp
 8013bac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb4:	d0a8      	beq.n	8013b08 <_strtod_l+0x540>
 8013bb6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013bb8:	9805      	ldr	r0, [sp, #20]
 8013bba:	f8cd 9000 	str.w	r9, [sp]
 8013bbe:	462a      	mov	r2, r5
 8013bc0:	f7ff f8e0 	bl	8012d84 <__s2b>
 8013bc4:	9007      	str	r0, [sp, #28]
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	f43f af0a 	beq.w	80139e0 <_strtod_l+0x418>
 8013bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bce:	1b3f      	subs	r7, r7, r4
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	bfb4      	ite	lt
 8013bd4:	463b      	movlt	r3, r7
 8013bd6:	2300      	movge	r3, #0
 8013bd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bdc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8013e08 <_strtod_l+0x840>
 8013be0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013be4:	2400      	movs	r4, #0
 8013be6:	930d      	str	r3, [sp, #52]	@ 0x34
 8013be8:	4625      	mov	r5, r4
 8013bea:	9b07      	ldr	r3, [sp, #28]
 8013bec:	9805      	ldr	r0, [sp, #20]
 8013bee:	6859      	ldr	r1, [r3, #4]
 8013bf0:	f7ff f820 	bl	8012c34 <_Balloc>
 8013bf4:	4606      	mov	r6, r0
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	f43f aef6 	beq.w	80139e8 <_strtod_l+0x420>
 8013bfc:	9b07      	ldr	r3, [sp, #28]
 8013bfe:	691a      	ldr	r2, [r3, #16]
 8013c00:	ec4b ab19 	vmov	d9, sl, fp
 8013c04:	3202      	adds	r2, #2
 8013c06:	f103 010c 	add.w	r1, r3, #12
 8013c0a:	0092      	lsls	r2, r2, #2
 8013c0c:	300c      	adds	r0, #12
 8013c0e:	f7fe f91e 	bl	8011e4e <memcpy>
 8013c12:	eeb0 0b49 	vmov.f64	d0, d9
 8013c16:	9805      	ldr	r0, [sp, #20]
 8013c18:	aa14      	add	r2, sp, #80	@ 0x50
 8013c1a:	a913      	add	r1, sp, #76	@ 0x4c
 8013c1c:	f7ff fbee 	bl	80133fc <__d2b>
 8013c20:	9012      	str	r0, [sp, #72]	@ 0x48
 8013c22:	2800      	cmp	r0, #0
 8013c24:	f43f aee0 	beq.w	80139e8 <_strtod_l+0x420>
 8013c28:	9805      	ldr	r0, [sp, #20]
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	f7ff f940 	bl	8012eb0 <__i2b>
 8013c30:	4605      	mov	r5, r0
 8013c32:	b940      	cbnz	r0, 8013c46 <_strtod_l+0x67e>
 8013c34:	2500      	movs	r5, #0
 8013c36:	e6d7      	b.n	80139e8 <_strtod_l+0x420>
 8013c38:	f04f 31ff 	mov.w	r1, #4294967295
 8013c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8013c40:	ea02 0a0a 	and.w	sl, r2, sl
 8013c44:	e7b0      	b.n	8013ba8 <_strtod_l+0x5e0>
 8013c46:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013c48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013c4a:	2f00      	cmp	r7, #0
 8013c4c:	bfab      	itete	ge
 8013c4e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013c50:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013c52:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013c56:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013c5a:	bfac      	ite	ge
 8013c5c:	eb07 0903 	addge.w	r9, r7, r3
 8013c60:	eba3 0807 	sublt.w	r8, r3, r7
 8013c64:	9b06      	ldr	r3, [sp, #24]
 8013c66:	1aff      	subs	r7, r7, r3
 8013c68:	4417      	add	r7, r2
 8013c6a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013c6e:	4a6b      	ldr	r2, [pc, #428]	@ (8013e1c <_strtod_l+0x854>)
 8013c70:	3f01      	subs	r7, #1
 8013c72:	4297      	cmp	r7, r2
 8013c74:	da51      	bge.n	8013d1a <_strtod_l+0x752>
 8013c76:	1bd1      	subs	r1, r2, r7
 8013c78:	291f      	cmp	r1, #31
 8013c7a:	eba3 0301 	sub.w	r3, r3, r1
 8013c7e:	f04f 0201 	mov.w	r2, #1
 8013c82:	dc3e      	bgt.n	8013d02 <_strtod_l+0x73a>
 8013c84:	408a      	lsls	r2, r1
 8013c86:	920c      	str	r2, [sp, #48]	@ 0x30
 8013c88:	2200      	movs	r2, #0
 8013c8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013c8c:	eb09 0703 	add.w	r7, r9, r3
 8013c90:	4498      	add	r8, r3
 8013c92:	9b06      	ldr	r3, [sp, #24]
 8013c94:	45b9      	cmp	r9, r7
 8013c96:	4498      	add	r8, r3
 8013c98:	464b      	mov	r3, r9
 8013c9a:	bfa8      	it	ge
 8013c9c:	463b      	movge	r3, r7
 8013c9e:	4543      	cmp	r3, r8
 8013ca0:	bfa8      	it	ge
 8013ca2:	4643      	movge	r3, r8
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	bfc2      	ittt	gt
 8013ca8:	1aff      	subgt	r7, r7, r3
 8013caa:	eba8 0803 	subgt.w	r8, r8, r3
 8013cae:	eba9 0903 	subgt.w	r9, r9, r3
 8013cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	dd16      	ble.n	8013ce6 <_strtod_l+0x71e>
 8013cb8:	4629      	mov	r1, r5
 8013cba:	9805      	ldr	r0, [sp, #20]
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	f7ff f9b7 	bl	8013030 <__pow5mult>
 8013cc2:	4605      	mov	r5, r0
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	d0b5      	beq.n	8013c34 <_strtod_l+0x66c>
 8013cc8:	4601      	mov	r1, r0
 8013cca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013ccc:	9805      	ldr	r0, [sp, #20]
 8013cce:	f7ff f905 	bl	8012edc <__multiply>
 8013cd2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	f43f ae87 	beq.w	80139e8 <_strtod_l+0x420>
 8013cda:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013cdc:	9805      	ldr	r0, [sp, #20]
 8013cde:	f7fe ffe9 	bl	8012cb4 <_Bfree>
 8013ce2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ce4:	9312      	str	r3, [sp, #72]	@ 0x48
 8013ce6:	2f00      	cmp	r7, #0
 8013ce8:	dc1b      	bgt.n	8013d22 <_strtod_l+0x75a>
 8013cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	dd21      	ble.n	8013d34 <_strtod_l+0x76c>
 8013cf0:	4631      	mov	r1, r6
 8013cf2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013cf4:	9805      	ldr	r0, [sp, #20]
 8013cf6:	f7ff f99b 	bl	8013030 <__pow5mult>
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	b9d0      	cbnz	r0, 8013d34 <_strtod_l+0x76c>
 8013cfe:	2600      	movs	r6, #0
 8013d00:	e672      	b.n	80139e8 <_strtod_l+0x420>
 8013d02:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8013d06:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8013d0a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013d0e:	37e2      	adds	r7, #226	@ 0xe2
 8013d10:	fa02 f107 	lsl.w	r1, r2, r7
 8013d14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013d16:	920c      	str	r2, [sp, #48]	@ 0x30
 8013d18:	e7b8      	b.n	8013c8c <_strtod_l+0x6c4>
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013d1e:	2201      	movs	r2, #1
 8013d20:	e7f9      	b.n	8013d16 <_strtod_l+0x74e>
 8013d22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013d24:	9805      	ldr	r0, [sp, #20]
 8013d26:	463a      	mov	r2, r7
 8013d28:	f7ff f9dc 	bl	80130e4 <__lshift>
 8013d2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d1db      	bne.n	8013cea <_strtod_l+0x722>
 8013d32:	e659      	b.n	80139e8 <_strtod_l+0x420>
 8013d34:	f1b8 0f00 	cmp.w	r8, #0
 8013d38:	dd07      	ble.n	8013d4a <_strtod_l+0x782>
 8013d3a:	4631      	mov	r1, r6
 8013d3c:	9805      	ldr	r0, [sp, #20]
 8013d3e:	4642      	mov	r2, r8
 8013d40:	f7ff f9d0 	bl	80130e4 <__lshift>
 8013d44:	4606      	mov	r6, r0
 8013d46:	2800      	cmp	r0, #0
 8013d48:	d0d9      	beq.n	8013cfe <_strtod_l+0x736>
 8013d4a:	f1b9 0f00 	cmp.w	r9, #0
 8013d4e:	dd08      	ble.n	8013d62 <_strtod_l+0x79a>
 8013d50:	4629      	mov	r1, r5
 8013d52:	9805      	ldr	r0, [sp, #20]
 8013d54:	464a      	mov	r2, r9
 8013d56:	f7ff f9c5 	bl	80130e4 <__lshift>
 8013d5a:	4605      	mov	r5, r0
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f43f ae43 	beq.w	80139e8 <_strtod_l+0x420>
 8013d62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013d64:	9805      	ldr	r0, [sp, #20]
 8013d66:	4632      	mov	r2, r6
 8013d68:	f7ff fa44 	bl	80131f4 <__mdiff>
 8013d6c:	4604      	mov	r4, r0
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	f43f ae3a 	beq.w	80139e8 <_strtod_l+0x420>
 8013d74:	2300      	movs	r3, #0
 8013d76:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013d7a:	60c3      	str	r3, [r0, #12]
 8013d7c:	4629      	mov	r1, r5
 8013d7e:	f7ff fa1d 	bl	80131bc <__mcmp>
 8013d82:	2800      	cmp	r0, #0
 8013d84:	da4e      	bge.n	8013e24 <_strtod_l+0x85c>
 8013d86:	ea58 080a 	orrs.w	r8, r8, sl
 8013d8a:	d174      	bne.n	8013e76 <_strtod_l+0x8ae>
 8013d8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d170      	bne.n	8013e76 <_strtod_l+0x8ae>
 8013d94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d98:	0d1b      	lsrs	r3, r3, #20
 8013d9a:	051b      	lsls	r3, r3, #20
 8013d9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013da0:	d969      	bls.n	8013e76 <_strtod_l+0x8ae>
 8013da2:	6963      	ldr	r3, [r4, #20]
 8013da4:	b913      	cbnz	r3, 8013dac <_strtod_l+0x7e4>
 8013da6:	6923      	ldr	r3, [r4, #16]
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	dd64      	ble.n	8013e76 <_strtod_l+0x8ae>
 8013dac:	4621      	mov	r1, r4
 8013dae:	2201      	movs	r2, #1
 8013db0:	9805      	ldr	r0, [sp, #20]
 8013db2:	f7ff f997 	bl	80130e4 <__lshift>
 8013db6:	4629      	mov	r1, r5
 8013db8:	4604      	mov	r4, r0
 8013dba:	f7ff f9ff 	bl	80131bc <__mcmp>
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	dd59      	ble.n	8013e76 <_strtod_l+0x8ae>
 8013dc2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013dc6:	9a06      	ldr	r2, [sp, #24]
 8013dc8:	0d1b      	lsrs	r3, r3, #20
 8013dca:	051b      	lsls	r3, r3, #20
 8013dcc:	2a00      	cmp	r2, #0
 8013dce:	d070      	beq.n	8013eb2 <_strtod_l+0x8ea>
 8013dd0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013dd4:	d86d      	bhi.n	8013eb2 <_strtod_l+0x8ea>
 8013dd6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013dda:	f67f ae99 	bls.w	8013b10 <_strtod_l+0x548>
 8013dde:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8013e10 <_strtod_l+0x848>
 8013de2:	ec4b ab16 	vmov	d6, sl, fp
 8013de6:	4b0e      	ldr	r3, [pc, #56]	@ (8013e20 <_strtod_l+0x858>)
 8013de8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013dec:	ee17 2a90 	vmov	r2, s15
 8013df0:	4013      	ands	r3, r2
 8013df2:	ec5b ab17 	vmov	sl, fp, d7
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	f47f ae01 	bne.w	80139fe <_strtod_l+0x436>
 8013dfc:	9a05      	ldr	r2, [sp, #20]
 8013dfe:	2322      	movs	r3, #34	@ 0x22
 8013e00:	6013      	str	r3, [r2, #0]
 8013e02:	e5fc      	b.n	80139fe <_strtod_l+0x436>
 8013e04:	f3af 8000 	nop.w
 8013e08:	ffc00000 	.word	0xffc00000
 8013e0c:	41dfffff 	.word	0x41dfffff
 8013e10:	00000000 	.word	0x00000000
 8013e14:	39500000 	.word	0x39500000
 8013e18:	080155e0 	.word	0x080155e0
 8013e1c:	fffffc02 	.word	0xfffffc02
 8013e20:	7ff00000 	.word	0x7ff00000
 8013e24:	46d9      	mov	r9, fp
 8013e26:	d15d      	bne.n	8013ee4 <_strtod_l+0x91c>
 8013e28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e2c:	f1b8 0f00 	cmp.w	r8, #0
 8013e30:	d02a      	beq.n	8013e88 <_strtod_l+0x8c0>
 8013e32:	4aab      	ldr	r2, [pc, #684]	@ (80140e0 <_strtod_l+0xb18>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d12a      	bne.n	8013e8e <_strtod_l+0x8c6>
 8013e38:	9b06      	ldr	r3, [sp, #24]
 8013e3a:	4652      	mov	r2, sl
 8013e3c:	b1fb      	cbz	r3, 8013e7e <_strtod_l+0x8b6>
 8013e3e:	4ba9      	ldr	r3, [pc, #676]	@ (80140e4 <_strtod_l+0xb1c>)
 8013e40:	ea0b 0303 	and.w	r3, fp, r3
 8013e44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013e48:	f04f 31ff 	mov.w	r1, #4294967295
 8013e4c:	d81a      	bhi.n	8013e84 <_strtod_l+0x8bc>
 8013e4e:	0d1b      	lsrs	r3, r3, #20
 8013e50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013e54:	fa01 f303 	lsl.w	r3, r1, r3
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d118      	bne.n	8013e8e <_strtod_l+0x8c6>
 8013e5c:	4ba2      	ldr	r3, [pc, #648]	@ (80140e8 <_strtod_l+0xb20>)
 8013e5e:	4599      	cmp	r9, r3
 8013e60:	d102      	bne.n	8013e68 <_strtod_l+0x8a0>
 8013e62:	3201      	adds	r2, #1
 8013e64:	f43f adc0 	beq.w	80139e8 <_strtod_l+0x420>
 8013e68:	4b9e      	ldr	r3, [pc, #632]	@ (80140e4 <_strtod_l+0xb1c>)
 8013e6a:	ea09 0303 	and.w	r3, r9, r3
 8013e6e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013e72:	f04f 0a00 	mov.w	sl, #0
 8013e76:	9b06      	ldr	r3, [sp, #24]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d1b0      	bne.n	8013dde <_strtod_l+0x816>
 8013e7c:	e5bf      	b.n	80139fe <_strtod_l+0x436>
 8013e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e82:	e7e9      	b.n	8013e58 <_strtod_l+0x890>
 8013e84:	460b      	mov	r3, r1
 8013e86:	e7e7      	b.n	8013e58 <_strtod_l+0x890>
 8013e88:	ea53 030a 	orrs.w	r3, r3, sl
 8013e8c:	d099      	beq.n	8013dc2 <_strtod_l+0x7fa>
 8013e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e90:	b1c3      	cbz	r3, 8013ec4 <_strtod_l+0x8fc>
 8013e92:	ea13 0f09 	tst.w	r3, r9
 8013e96:	d0ee      	beq.n	8013e76 <_strtod_l+0x8ae>
 8013e98:	9a06      	ldr	r2, [sp, #24]
 8013e9a:	4650      	mov	r0, sl
 8013e9c:	4659      	mov	r1, fp
 8013e9e:	f1b8 0f00 	cmp.w	r8, #0
 8013ea2:	d013      	beq.n	8013ecc <_strtod_l+0x904>
 8013ea4:	f7ff fb75 	bl	8013592 <sulp>
 8013ea8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8013eac:	ec5b ab17 	vmov	sl, fp, d7
 8013eb0:	e7e1      	b.n	8013e76 <_strtod_l+0x8ae>
 8013eb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013eb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013eba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013ebe:	f04f 3aff 	mov.w	sl, #4294967295
 8013ec2:	e7d8      	b.n	8013e76 <_strtod_l+0x8ae>
 8013ec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ec6:	ea13 0f0a 	tst.w	r3, sl
 8013eca:	e7e4      	b.n	8013e96 <_strtod_l+0x8ce>
 8013ecc:	f7ff fb61 	bl	8013592 <sulp>
 8013ed0:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013ed4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013edc:	ec5b ab10 	vmov	sl, fp, d0
 8013ee0:	d1c9      	bne.n	8013e76 <_strtod_l+0x8ae>
 8013ee2:	e615      	b.n	8013b10 <_strtod_l+0x548>
 8013ee4:	4629      	mov	r1, r5
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7ff fae0 	bl	80134ac <__ratio>
 8013eec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013ef0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef8:	d85d      	bhi.n	8013fb6 <_strtod_l+0x9ee>
 8013efa:	f1b8 0f00 	cmp.w	r8, #0
 8013efe:	d164      	bne.n	8013fca <_strtod_l+0xa02>
 8013f00:	f1ba 0f00 	cmp.w	sl, #0
 8013f04:	d14b      	bne.n	8013f9e <_strtod_l+0x9d6>
 8013f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f0a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d160      	bne.n	8013fd4 <_strtod_l+0xa0c>
 8013f12:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8013f16:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f1e:	d401      	bmi.n	8013f24 <_strtod_l+0x95c>
 8013f20:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013f24:	eeb1 ab48 	vneg.f64	d10, d8
 8013f28:	486e      	ldr	r0, [pc, #440]	@ (80140e4 <_strtod_l+0xb1c>)
 8013f2a:	4970      	ldr	r1, [pc, #448]	@ (80140ec <_strtod_l+0xb24>)
 8013f2c:	ea09 0700 	and.w	r7, r9, r0
 8013f30:	428f      	cmp	r7, r1
 8013f32:	ec53 2b1a 	vmov	r2, r3, d10
 8013f36:	d17d      	bne.n	8014034 <_strtod_l+0xa6c>
 8013f38:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8013f3c:	ec4b ab1c 	vmov	d12, sl, fp
 8013f40:	eeb0 0b4c 	vmov.f64	d0, d12
 8013f44:	f7ff f9ea 	bl	801331c <__ulp>
 8013f48:	4866      	ldr	r0, [pc, #408]	@ (80140e4 <_strtod_l+0xb1c>)
 8013f4a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013f4e:	ee1c 3a90 	vmov	r3, s25
 8013f52:	4a67      	ldr	r2, [pc, #412]	@ (80140f0 <_strtod_l+0xb28>)
 8013f54:	ea03 0100 	and.w	r1, r3, r0
 8013f58:	4291      	cmp	r1, r2
 8013f5a:	ec5b ab1c 	vmov	sl, fp, d12
 8013f5e:	d93c      	bls.n	8013fda <_strtod_l+0xa12>
 8013f60:	ee19 2a90 	vmov	r2, s19
 8013f64:	4b60      	ldr	r3, [pc, #384]	@ (80140e8 <_strtod_l+0xb20>)
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d104      	bne.n	8013f74 <_strtod_l+0x9ac>
 8013f6a:	ee19 3a10 	vmov	r3, s18
 8013f6e:	3301      	adds	r3, #1
 8013f70:	f43f ad3a 	beq.w	80139e8 <_strtod_l+0x420>
 8013f74:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80140e8 <_strtod_l+0xb20>
 8013f78:	f04f 3aff 	mov.w	sl, #4294967295
 8013f7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013f7e:	9805      	ldr	r0, [sp, #20]
 8013f80:	f7fe fe98 	bl	8012cb4 <_Bfree>
 8013f84:	9805      	ldr	r0, [sp, #20]
 8013f86:	4631      	mov	r1, r6
 8013f88:	f7fe fe94 	bl	8012cb4 <_Bfree>
 8013f8c:	9805      	ldr	r0, [sp, #20]
 8013f8e:	4629      	mov	r1, r5
 8013f90:	f7fe fe90 	bl	8012cb4 <_Bfree>
 8013f94:	9805      	ldr	r0, [sp, #20]
 8013f96:	4621      	mov	r1, r4
 8013f98:	f7fe fe8c 	bl	8012cb4 <_Bfree>
 8013f9c:	e625      	b.n	8013bea <_strtod_l+0x622>
 8013f9e:	f1ba 0f01 	cmp.w	sl, #1
 8013fa2:	d103      	bne.n	8013fac <_strtod_l+0x9e4>
 8013fa4:	f1bb 0f00 	cmp.w	fp, #0
 8013fa8:	f43f adb2 	beq.w	8013b10 <_strtod_l+0x548>
 8013fac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013fb0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013fb4:	e7b8      	b.n	8013f28 <_strtod_l+0x960>
 8013fb6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013fba:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013fbe:	f1b8 0f00 	cmp.w	r8, #0
 8013fc2:	d0af      	beq.n	8013f24 <_strtod_l+0x95c>
 8013fc4:	eeb0 ab48 	vmov.f64	d10, d8
 8013fc8:	e7ae      	b.n	8013f28 <_strtod_l+0x960>
 8013fca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8013fce:	eeb0 8b4a 	vmov.f64	d8, d10
 8013fd2:	e7a9      	b.n	8013f28 <_strtod_l+0x960>
 8013fd4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013fd8:	e7a6      	b.n	8013f28 <_strtod_l+0x960>
 8013fda:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013fde:	9b06      	ldr	r3, [sp, #24]
 8013fe0:	46d9      	mov	r9, fp
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d1ca      	bne.n	8013f7c <_strtod_l+0x9b4>
 8013fe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013fea:	0d1b      	lsrs	r3, r3, #20
 8013fec:	051b      	lsls	r3, r3, #20
 8013fee:	429f      	cmp	r7, r3
 8013ff0:	d1c4      	bne.n	8013f7c <_strtod_l+0x9b4>
 8013ff2:	ec51 0b18 	vmov	r0, r1, d8
 8013ff6:	f7ec fbb7 	bl	8000768 <__aeabi_d2lz>
 8013ffa:	f7ec fb6f 	bl	80006dc <__aeabi_l2d>
 8013ffe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8014002:	ec41 0b17 	vmov	d7, r0, r1
 8014006:	ea49 090a 	orr.w	r9, r9, sl
 801400a:	ea59 0908 	orrs.w	r9, r9, r8
 801400e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8014012:	d03c      	beq.n	801408e <_strtod_l+0xac6>
 8014014:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80140c8 <_strtod_l+0xb00>
 8014018:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801401c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014020:	f53f aced 	bmi.w	80139fe <_strtod_l+0x436>
 8014024:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80140d0 <_strtod_l+0xb08>
 8014028:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014030:	dda4      	ble.n	8013f7c <_strtod_l+0x9b4>
 8014032:	e4e4      	b.n	80139fe <_strtod_l+0x436>
 8014034:	9906      	ldr	r1, [sp, #24]
 8014036:	b1e1      	cbz	r1, 8014072 <_strtod_l+0xaaa>
 8014038:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801403c:	d819      	bhi.n	8014072 <_strtod_l+0xaaa>
 801403e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014046:	d811      	bhi.n	801406c <_strtod_l+0xaa4>
 8014048:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801404c:	ee18 3a10 	vmov	r3, s16
 8014050:	2b01      	cmp	r3, #1
 8014052:	bf38      	it	cc
 8014054:	2301      	movcc	r3, #1
 8014056:	ee08 3a10 	vmov	s16, r3
 801405a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801405e:	f1b8 0f00 	cmp.w	r8, #0
 8014062:	d111      	bne.n	8014088 <_strtod_l+0xac0>
 8014064:	eeb1 7b48 	vneg.f64	d7, d8
 8014068:	ec53 2b17 	vmov	r2, r3, d7
 801406c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8014070:	1bcb      	subs	r3, r1, r7
 8014072:	eeb0 0b49 	vmov.f64	d0, d9
 8014076:	ec43 2b1a 	vmov	d10, r2, r3
 801407a:	f7ff f94f 	bl	801331c <__ulp>
 801407e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8014082:	ec5b ab19 	vmov	sl, fp, d9
 8014086:	e7aa      	b.n	8013fde <_strtod_l+0xa16>
 8014088:	eeb0 7b48 	vmov.f64	d7, d8
 801408c:	e7ec      	b.n	8014068 <_strtod_l+0xaa0>
 801408e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80140d8 <_strtod_l+0xb10>
 8014092:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409a:	f57f af6f 	bpl.w	8013f7c <_strtod_l+0x9b4>
 801409e:	e4ae      	b.n	80139fe <_strtod_l+0x436>
 80140a0:	2300      	movs	r3, #0
 80140a2:	9308      	str	r3, [sp, #32]
 80140a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80140a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80140a8:	6013      	str	r3, [r2, #0]
 80140aa:	f7ff bacc 	b.w	8013646 <_strtod_l+0x7e>
 80140ae:	2a65      	cmp	r2, #101	@ 0x65
 80140b0:	f43f abbc 	beq.w	801382c <_strtod_l+0x264>
 80140b4:	2a45      	cmp	r2, #69	@ 0x45
 80140b6:	f43f abb9 	beq.w	801382c <_strtod_l+0x264>
 80140ba:	2301      	movs	r3, #1
 80140bc:	9306      	str	r3, [sp, #24]
 80140be:	f7ff bbf0 	b.w	80138a2 <_strtod_l+0x2da>
 80140c2:	bf00      	nop
 80140c4:	f3af 8000 	nop.w
 80140c8:	94a03595 	.word	0x94a03595
 80140cc:	3fdfffff 	.word	0x3fdfffff
 80140d0:	35afe535 	.word	0x35afe535
 80140d4:	3fe00000 	.word	0x3fe00000
 80140d8:	94a03595 	.word	0x94a03595
 80140dc:	3fcfffff 	.word	0x3fcfffff
 80140e0:	000fffff 	.word	0x000fffff
 80140e4:	7ff00000 	.word	0x7ff00000
 80140e8:	7fefffff 	.word	0x7fefffff
 80140ec:	7fe00000 	.word	0x7fe00000
 80140f0:	7c9fffff 	.word	0x7c9fffff

080140f4 <_strtod_r>:
 80140f4:	4b01      	ldr	r3, [pc, #4]	@ (80140fc <_strtod_r+0x8>)
 80140f6:	f7ff ba67 	b.w	80135c8 <_strtod_l>
 80140fa:	bf00      	nop
 80140fc:	2400006c 	.word	0x2400006c

08014100 <_strtol_l.constprop.0>:
 8014100:	2b24      	cmp	r3, #36	@ 0x24
 8014102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014106:	4686      	mov	lr, r0
 8014108:	4690      	mov	r8, r2
 801410a:	d801      	bhi.n	8014110 <_strtol_l.constprop.0+0x10>
 801410c:	2b01      	cmp	r3, #1
 801410e:	d106      	bne.n	801411e <_strtol_l.constprop.0+0x1e>
 8014110:	f7fd fe70 	bl	8011df4 <__errno>
 8014114:	2316      	movs	r3, #22
 8014116:	6003      	str	r3, [r0, #0]
 8014118:	2000      	movs	r0, #0
 801411a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801411e:	4834      	ldr	r0, [pc, #208]	@ (80141f0 <_strtol_l.constprop.0+0xf0>)
 8014120:	460d      	mov	r5, r1
 8014122:	462a      	mov	r2, r5
 8014124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014128:	5d06      	ldrb	r6, [r0, r4]
 801412a:	f016 0608 	ands.w	r6, r6, #8
 801412e:	d1f8      	bne.n	8014122 <_strtol_l.constprop.0+0x22>
 8014130:	2c2d      	cmp	r4, #45	@ 0x2d
 8014132:	d12d      	bne.n	8014190 <_strtol_l.constprop.0+0x90>
 8014134:	782c      	ldrb	r4, [r5, #0]
 8014136:	2601      	movs	r6, #1
 8014138:	1c95      	adds	r5, r2, #2
 801413a:	f033 0210 	bics.w	r2, r3, #16
 801413e:	d109      	bne.n	8014154 <_strtol_l.constprop.0+0x54>
 8014140:	2c30      	cmp	r4, #48	@ 0x30
 8014142:	d12a      	bne.n	801419a <_strtol_l.constprop.0+0x9a>
 8014144:	782a      	ldrb	r2, [r5, #0]
 8014146:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801414a:	2a58      	cmp	r2, #88	@ 0x58
 801414c:	d125      	bne.n	801419a <_strtol_l.constprop.0+0x9a>
 801414e:	786c      	ldrb	r4, [r5, #1]
 8014150:	2310      	movs	r3, #16
 8014152:	3502      	adds	r5, #2
 8014154:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014158:	f10c 3cff 	add.w	ip, ip, #4294967295
 801415c:	2200      	movs	r2, #0
 801415e:	fbbc f9f3 	udiv	r9, ip, r3
 8014162:	4610      	mov	r0, r2
 8014164:	fb03 ca19 	mls	sl, r3, r9, ip
 8014168:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801416c:	2f09      	cmp	r7, #9
 801416e:	d81b      	bhi.n	80141a8 <_strtol_l.constprop.0+0xa8>
 8014170:	463c      	mov	r4, r7
 8014172:	42a3      	cmp	r3, r4
 8014174:	dd27      	ble.n	80141c6 <_strtol_l.constprop.0+0xc6>
 8014176:	1c57      	adds	r7, r2, #1
 8014178:	d007      	beq.n	801418a <_strtol_l.constprop.0+0x8a>
 801417a:	4581      	cmp	r9, r0
 801417c:	d320      	bcc.n	80141c0 <_strtol_l.constprop.0+0xc0>
 801417e:	d101      	bne.n	8014184 <_strtol_l.constprop.0+0x84>
 8014180:	45a2      	cmp	sl, r4
 8014182:	db1d      	blt.n	80141c0 <_strtol_l.constprop.0+0xc0>
 8014184:	fb00 4003 	mla	r0, r0, r3, r4
 8014188:	2201      	movs	r2, #1
 801418a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801418e:	e7eb      	b.n	8014168 <_strtol_l.constprop.0+0x68>
 8014190:	2c2b      	cmp	r4, #43	@ 0x2b
 8014192:	bf04      	itt	eq
 8014194:	782c      	ldrbeq	r4, [r5, #0]
 8014196:	1c95      	addeq	r5, r2, #2
 8014198:	e7cf      	b.n	801413a <_strtol_l.constprop.0+0x3a>
 801419a:	2b00      	cmp	r3, #0
 801419c:	d1da      	bne.n	8014154 <_strtol_l.constprop.0+0x54>
 801419e:	2c30      	cmp	r4, #48	@ 0x30
 80141a0:	bf0c      	ite	eq
 80141a2:	2308      	moveq	r3, #8
 80141a4:	230a      	movne	r3, #10
 80141a6:	e7d5      	b.n	8014154 <_strtol_l.constprop.0+0x54>
 80141a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80141ac:	2f19      	cmp	r7, #25
 80141ae:	d801      	bhi.n	80141b4 <_strtol_l.constprop.0+0xb4>
 80141b0:	3c37      	subs	r4, #55	@ 0x37
 80141b2:	e7de      	b.n	8014172 <_strtol_l.constprop.0+0x72>
 80141b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80141b8:	2f19      	cmp	r7, #25
 80141ba:	d804      	bhi.n	80141c6 <_strtol_l.constprop.0+0xc6>
 80141bc:	3c57      	subs	r4, #87	@ 0x57
 80141be:	e7d8      	b.n	8014172 <_strtol_l.constprop.0+0x72>
 80141c0:	f04f 32ff 	mov.w	r2, #4294967295
 80141c4:	e7e1      	b.n	801418a <_strtol_l.constprop.0+0x8a>
 80141c6:	1c53      	adds	r3, r2, #1
 80141c8:	d108      	bne.n	80141dc <_strtol_l.constprop.0+0xdc>
 80141ca:	2322      	movs	r3, #34	@ 0x22
 80141cc:	f8ce 3000 	str.w	r3, [lr]
 80141d0:	4660      	mov	r0, ip
 80141d2:	f1b8 0f00 	cmp.w	r8, #0
 80141d6:	d0a0      	beq.n	801411a <_strtol_l.constprop.0+0x1a>
 80141d8:	1e69      	subs	r1, r5, #1
 80141da:	e006      	b.n	80141ea <_strtol_l.constprop.0+0xea>
 80141dc:	b106      	cbz	r6, 80141e0 <_strtol_l.constprop.0+0xe0>
 80141de:	4240      	negs	r0, r0
 80141e0:	f1b8 0f00 	cmp.w	r8, #0
 80141e4:	d099      	beq.n	801411a <_strtol_l.constprop.0+0x1a>
 80141e6:	2a00      	cmp	r2, #0
 80141e8:	d1f6      	bne.n	80141d8 <_strtol_l.constprop.0+0xd8>
 80141ea:	f8c8 1000 	str.w	r1, [r8]
 80141ee:	e794      	b.n	801411a <_strtol_l.constprop.0+0x1a>
 80141f0:	08015609 	.word	0x08015609

080141f4 <_strtol_r>:
 80141f4:	f7ff bf84 	b.w	8014100 <_strtol_l.constprop.0>

080141f8 <__ssputs_r>:
 80141f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141fc:	688e      	ldr	r6, [r1, #8]
 80141fe:	461f      	mov	r7, r3
 8014200:	42be      	cmp	r6, r7
 8014202:	680b      	ldr	r3, [r1, #0]
 8014204:	4682      	mov	sl, r0
 8014206:	460c      	mov	r4, r1
 8014208:	4690      	mov	r8, r2
 801420a:	d82d      	bhi.n	8014268 <__ssputs_r+0x70>
 801420c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014210:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014214:	d026      	beq.n	8014264 <__ssputs_r+0x6c>
 8014216:	6965      	ldr	r5, [r4, #20]
 8014218:	6909      	ldr	r1, [r1, #16]
 801421a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801421e:	eba3 0901 	sub.w	r9, r3, r1
 8014222:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014226:	1c7b      	adds	r3, r7, #1
 8014228:	444b      	add	r3, r9
 801422a:	106d      	asrs	r5, r5, #1
 801422c:	429d      	cmp	r5, r3
 801422e:	bf38      	it	cc
 8014230:	461d      	movcc	r5, r3
 8014232:	0553      	lsls	r3, r2, #21
 8014234:	d527      	bpl.n	8014286 <__ssputs_r+0x8e>
 8014236:	4629      	mov	r1, r5
 8014238:	f7fe fc70 	bl	8012b1c <_malloc_r>
 801423c:	4606      	mov	r6, r0
 801423e:	b360      	cbz	r0, 801429a <__ssputs_r+0xa2>
 8014240:	6921      	ldr	r1, [r4, #16]
 8014242:	464a      	mov	r2, r9
 8014244:	f7fd fe03 	bl	8011e4e <memcpy>
 8014248:	89a3      	ldrh	r3, [r4, #12]
 801424a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801424e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014252:	81a3      	strh	r3, [r4, #12]
 8014254:	6126      	str	r6, [r4, #16]
 8014256:	6165      	str	r5, [r4, #20]
 8014258:	444e      	add	r6, r9
 801425a:	eba5 0509 	sub.w	r5, r5, r9
 801425e:	6026      	str	r6, [r4, #0]
 8014260:	60a5      	str	r5, [r4, #8]
 8014262:	463e      	mov	r6, r7
 8014264:	42be      	cmp	r6, r7
 8014266:	d900      	bls.n	801426a <__ssputs_r+0x72>
 8014268:	463e      	mov	r6, r7
 801426a:	6820      	ldr	r0, [r4, #0]
 801426c:	4632      	mov	r2, r6
 801426e:	4641      	mov	r1, r8
 8014270:	f000 fb6a 	bl	8014948 <memmove>
 8014274:	68a3      	ldr	r3, [r4, #8]
 8014276:	1b9b      	subs	r3, r3, r6
 8014278:	60a3      	str	r3, [r4, #8]
 801427a:	6823      	ldr	r3, [r4, #0]
 801427c:	4433      	add	r3, r6
 801427e:	6023      	str	r3, [r4, #0]
 8014280:	2000      	movs	r0, #0
 8014282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014286:	462a      	mov	r2, r5
 8014288:	f000 ff43 	bl	8015112 <_realloc_r>
 801428c:	4606      	mov	r6, r0
 801428e:	2800      	cmp	r0, #0
 8014290:	d1e0      	bne.n	8014254 <__ssputs_r+0x5c>
 8014292:	6921      	ldr	r1, [r4, #16]
 8014294:	4650      	mov	r0, sl
 8014296:	f7fe fbcd 	bl	8012a34 <_free_r>
 801429a:	230c      	movs	r3, #12
 801429c:	f8ca 3000 	str.w	r3, [sl]
 80142a0:	89a3      	ldrh	r3, [r4, #12]
 80142a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142a6:	81a3      	strh	r3, [r4, #12]
 80142a8:	f04f 30ff 	mov.w	r0, #4294967295
 80142ac:	e7e9      	b.n	8014282 <__ssputs_r+0x8a>
	...

080142b0 <_svfiprintf_r>:
 80142b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b4:	4698      	mov	r8, r3
 80142b6:	898b      	ldrh	r3, [r1, #12]
 80142b8:	061b      	lsls	r3, r3, #24
 80142ba:	b09d      	sub	sp, #116	@ 0x74
 80142bc:	4607      	mov	r7, r0
 80142be:	460d      	mov	r5, r1
 80142c0:	4614      	mov	r4, r2
 80142c2:	d510      	bpl.n	80142e6 <_svfiprintf_r+0x36>
 80142c4:	690b      	ldr	r3, [r1, #16]
 80142c6:	b973      	cbnz	r3, 80142e6 <_svfiprintf_r+0x36>
 80142c8:	2140      	movs	r1, #64	@ 0x40
 80142ca:	f7fe fc27 	bl	8012b1c <_malloc_r>
 80142ce:	6028      	str	r0, [r5, #0]
 80142d0:	6128      	str	r0, [r5, #16]
 80142d2:	b930      	cbnz	r0, 80142e2 <_svfiprintf_r+0x32>
 80142d4:	230c      	movs	r3, #12
 80142d6:	603b      	str	r3, [r7, #0]
 80142d8:	f04f 30ff 	mov.w	r0, #4294967295
 80142dc:	b01d      	add	sp, #116	@ 0x74
 80142de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e2:	2340      	movs	r3, #64	@ 0x40
 80142e4:	616b      	str	r3, [r5, #20]
 80142e6:	2300      	movs	r3, #0
 80142e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80142ea:	2320      	movs	r3, #32
 80142ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80142f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80142f4:	2330      	movs	r3, #48	@ 0x30
 80142f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014494 <_svfiprintf_r+0x1e4>
 80142fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80142fe:	f04f 0901 	mov.w	r9, #1
 8014302:	4623      	mov	r3, r4
 8014304:	469a      	mov	sl, r3
 8014306:	f813 2b01 	ldrb.w	r2, [r3], #1
 801430a:	b10a      	cbz	r2, 8014310 <_svfiprintf_r+0x60>
 801430c:	2a25      	cmp	r2, #37	@ 0x25
 801430e:	d1f9      	bne.n	8014304 <_svfiprintf_r+0x54>
 8014310:	ebba 0b04 	subs.w	fp, sl, r4
 8014314:	d00b      	beq.n	801432e <_svfiprintf_r+0x7e>
 8014316:	465b      	mov	r3, fp
 8014318:	4622      	mov	r2, r4
 801431a:	4629      	mov	r1, r5
 801431c:	4638      	mov	r0, r7
 801431e:	f7ff ff6b 	bl	80141f8 <__ssputs_r>
 8014322:	3001      	adds	r0, #1
 8014324:	f000 80a7 	beq.w	8014476 <_svfiprintf_r+0x1c6>
 8014328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801432a:	445a      	add	r2, fp
 801432c:	9209      	str	r2, [sp, #36]	@ 0x24
 801432e:	f89a 3000 	ldrb.w	r3, [sl]
 8014332:	2b00      	cmp	r3, #0
 8014334:	f000 809f 	beq.w	8014476 <_svfiprintf_r+0x1c6>
 8014338:	2300      	movs	r3, #0
 801433a:	f04f 32ff 	mov.w	r2, #4294967295
 801433e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014342:	f10a 0a01 	add.w	sl, sl, #1
 8014346:	9304      	str	r3, [sp, #16]
 8014348:	9307      	str	r3, [sp, #28]
 801434a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801434e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014350:	4654      	mov	r4, sl
 8014352:	2205      	movs	r2, #5
 8014354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014358:	484e      	ldr	r0, [pc, #312]	@ (8014494 <_svfiprintf_r+0x1e4>)
 801435a:	f7eb ffd9 	bl	8000310 <memchr>
 801435e:	9a04      	ldr	r2, [sp, #16]
 8014360:	b9d8      	cbnz	r0, 801439a <_svfiprintf_r+0xea>
 8014362:	06d0      	lsls	r0, r2, #27
 8014364:	bf44      	itt	mi
 8014366:	2320      	movmi	r3, #32
 8014368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801436c:	0711      	lsls	r1, r2, #28
 801436e:	bf44      	itt	mi
 8014370:	232b      	movmi	r3, #43	@ 0x2b
 8014372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014376:	f89a 3000 	ldrb.w	r3, [sl]
 801437a:	2b2a      	cmp	r3, #42	@ 0x2a
 801437c:	d015      	beq.n	80143aa <_svfiprintf_r+0xfa>
 801437e:	9a07      	ldr	r2, [sp, #28]
 8014380:	4654      	mov	r4, sl
 8014382:	2000      	movs	r0, #0
 8014384:	f04f 0c0a 	mov.w	ip, #10
 8014388:	4621      	mov	r1, r4
 801438a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801438e:	3b30      	subs	r3, #48	@ 0x30
 8014390:	2b09      	cmp	r3, #9
 8014392:	d94b      	bls.n	801442c <_svfiprintf_r+0x17c>
 8014394:	b1b0      	cbz	r0, 80143c4 <_svfiprintf_r+0x114>
 8014396:	9207      	str	r2, [sp, #28]
 8014398:	e014      	b.n	80143c4 <_svfiprintf_r+0x114>
 801439a:	eba0 0308 	sub.w	r3, r0, r8
 801439e:	fa09 f303 	lsl.w	r3, r9, r3
 80143a2:	4313      	orrs	r3, r2
 80143a4:	9304      	str	r3, [sp, #16]
 80143a6:	46a2      	mov	sl, r4
 80143a8:	e7d2      	b.n	8014350 <_svfiprintf_r+0xa0>
 80143aa:	9b03      	ldr	r3, [sp, #12]
 80143ac:	1d19      	adds	r1, r3, #4
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	9103      	str	r1, [sp, #12]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	bfbb      	ittet	lt
 80143b6:	425b      	neglt	r3, r3
 80143b8:	f042 0202 	orrlt.w	r2, r2, #2
 80143bc:	9307      	strge	r3, [sp, #28]
 80143be:	9307      	strlt	r3, [sp, #28]
 80143c0:	bfb8      	it	lt
 80143c2:	9204      	strlt	r2, [sp, #16]
 80143c4:	7823      	ldrb	r3, [r4, #0]
 80143c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80143c8:	d10a      	bne.n	80143e0 <_svfiprintf_r+0x130>
 80143ca:	7863      	ldrb	r3, [r4, #1]
 80143cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80143ce:	d132      	bne.n	8014436 <_svfiprintf_r+0x186>
 80143d0:	9b03      	ldr	r3, [sp, #12]
 80143d2:	1d1a      	adds	r2, r3, #4
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	9203      	str	r2, [sp, #12]
 80143d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80143dc:	3402      	adds	r4, #2
 80143de:	9305      	str	r3, [sp, #20]
 80143e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80144a4 <_svfiprintf_r+0x1f4>
 80143e4:	7821      	ldrb	r1, [r4, #0]
 80143e6:	2203      	movs	r2, #3
 80143e8:	4650      	mov	r0, sl
 80143ea:	f7eb ff91 	bl	8000310 <memchr>
 80143ee:	b138      	cbz	r0, 8014400 <_svfiprintf_r+0x150>
 80143f0:	9b04      	ldr	r3, [sp, #16]
 80143f2:	eba0 000a 	sub.w	r0, r0, sl
 80143f6:	2240      	movs	r2, #64	@ 0x40
 80143f8:	4082      	lsls	r2, r0
 80143fa:	4313      	orrs	r3, r2
 80143fc:	3401      	adds	r4, #1
 80143fe:	9304      	str	r3, [sp, #16]
 8014400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014404:	4824      	ldr	r0, [pc, #144]	@ (8014498 <_svfiprintf_r+0x1e8>)
 8014406:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801440a:	2206      	movs	r2, #6
 801440c:	f7eb ff80 	bl	8000310 <memchr>
 8014410:	2800      	cmp	r0, #0
 8014412:	d036      	beq.n	8014482 <_svfiprintf_r+0x1d2>
 8014414:	4b21      	ldr	r3, [pc, #132]	@ (801449c <_svfiprintf_r+0x1ec>)
 8014416:	bb1b      	cbnz	r3, 8014460 <_svfiprintf_r+0x1b0>
 8014418:	9b03      	ldr	r3, [sp, #12]
 801441a:	3307      	adds	r3, #7
 801441c:	f023 0307 	bic.w	r3, r3, #7
 8014420:	3308      	adds	r3, #8
 8014422:	9303      	str	r3, [sp, #12]
 8014424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014426:	4433      	add	r3, r6
 8014428:	9309      	str	r3, [sp, #36]	@ 0x24
 801442a:	e76a      	b.n	8014302 <_svfiprintf_r+0x52>
 801442c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014430:	460c      	mov	r4, r1
 8014432:	2001      	movs	r0, #1
 8014434:	e7a8      	b.n	8014388 <_svfiprintf_r+0xd8>
 8014436:	2300      	movs	r3, #0
 8014438:	3401      	adds	r4, #1
 801443a:	9305      	str	r3, [sp, #20]
 801443c:	4619      	mov	r1, r3
 801443e:	f04f 0c0a 	mov.w	ip, #10
 8014442:	4620      	mov	r0, r4
 8014444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014448:	3a30      	subs	r2, #48	@ 0x30
 801444a:	2a09      	cmp	r2, #9
 801444c:	d903      	bls.n	8014456 <_svfiprintf_r+0x1a6>
 801444e:	2b00      	cmp	r3, #0
 8014450:	d0c6      	beq.n	80143e0 <_svfiprintf_r+0x130>
 8014452:	9105      	str	r1, [sp, #20]
 8014454:	e7c4      	b.n	80143e0 <_svfiprintf_r+0x130>
 8014456:	fb0c 2101 	mla	r1, ip, r1, r2
 801445a:	4604      	mov	r4, r0
 801445c:	2301      	movs	r3, #1
 801445e:	e7f0      	b.n	8014442 <_svfiprintf_r+0x192>
 8014460:	ab03      	add	r3, sp, #12
 8014462:	9300      	str	r3, [sp, #0]
 8014464:	462a      	mov	r2, r5
 8014466:	4b0e      	ldr	r3, [pc, #56]	@ (80144a0 <_svfiprintf_r+0x1f0>)
 8014468:	a904      	add	r1, sp, #16
 801446a:	4638      	mov	r0, r7
 801446c:	f7fc fcf0 	bl	8010e50 <_printf_float>
 8014470:	1c42      	adds	r2, r0, #1
 8014472:	4606      	mov	r6, r0
 8014474:	d1d6      	bne.n	8014424 <_svfiprintf_r+0x174>
 8014476:	89ab      	ldrh	r3, [r5, #12]
 8014478:	065b      	lsls	r3, r3, #25
 801447a:	f53f af2d 	bmi.w	80142d8 <_svfiprintf_r+0x28>
 801447e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014480:	e72c      	b.n	80142dc <_svfiprintf_r+0x2c>
 8014482:	ab03      	add	r3, sp, #12
 8014484:	9300      	str	r3, [sp, #0]
 8014486:	462a      	mov	r2, r5
 8014488:	4b05      	ldr	r3, [pc, #20]	@ (80144a0 <_svfiprintf_r+0x1f0>)
 801448a:	a904      	add	r1, sp, #16
 801448c:	4638      	mov	r0, r7
 801448e:	f7fc ff67 	bl	8011360 <_printf_i>
 8014492:	e7ed      	b.n	8014470 <_svfiprintf_r+0x1c0>
 8014494:	08015709 	.word	0x08015709
 8014498:	08015713 	.word	0x08015713
 801449c:	08010e51 	.word	0x08010e51
 80144a0:	080141f9 	.word	0x080141f9
 80144a4:	0801570f 	.word	0x0801570f

080144a8 <__sfputc_r>:
 80144a8:	6893      	ldr	r3, [r2, #8]
 80144aa:	3b01      	subs	r3, #1
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	b410      	push	{r4}
 80144b0:	6093      	str	r3, [r2, #8]
 80144b2:	da08      	bge.n	80144c6 <__sfputc_r+0x1e>
 80144b4:	6994      	ldr	r4, [r2, #24]
 80144b6:	42a3      	cmp	r3, r4
 80144b8:	db01      	blt.n	80144be <__sfputc_r+0x16>
 80144ba:	290a      	cmp	r1, #10
 80144bc:	d103      	bne.n	80144c6 <__sfputc_r+0x1e>
 80144be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144c2:	f7fd bbb0 	b.w	8011c26 <__swbuf_r>
 80144c6:	6813      	ldr	r3, [r2, #0]
 80144c8:	1c58      	adds	r0, r3, #1
 80144ca:	6010      	str	r0, [r2, #0]
 80144cc:	7019      	strb	r1, [r3, #0]
 80144ce:	4608      	mov	r0, r1
 80144d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144d4:	4770      	bx	lr

080144d6 <__sfputs_r>:
 80144d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144d8:	4606      	mov	r6, r0
 80144da:	460f      	mov	r7, r1
 80144dc:	4614      	mov	r4, r2
 80144de:	18d5      	adds	r5, r2, r3
 80144e0:	42ac      	cmp	r4, r5
 80144e2:	d101      	bne.n	80144e8 <__sfputs_r+0x12>
 80144e4:	2000      	movs	r0, #0
 80144e6:	e007      	b.n	80144f8 <__sfputs_r+0x22>
 80144e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ec:	463a      	mov	r2, r7
 80144ee:	4630      	mov	r0, r6
 80144f0:	f7ff ffda 	bl	80144a8 <__sfputc_r>
 80144f4:	1c43      	adds	r3, r0, #1
 80144f6:	d1f3      	bne.n	80144e0 <__sfputs_r+0xa>
 80144f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144fc <_vfiprintf_r>:
 80144fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014500:	460d      	mov	r5, r1
 8014502:	b09d      	sub	sp, #116	@ 0x74
 8014504:	4614      	mov	r4, r2
 8014506:	4698      	mov	r8, r3
 8014508:	4606      	mov	r6, r0
 801450a:	b118      	cbz	r0, 8014514 <_vfiprintf_r+0x18>
 801450c:	6a03      	ldr	r3, [r0, #32]
 801450e:	b90b      	cbnz	r3, 8014514 <_vfiprintf_r+0x18>
 8014510:	f7fd fade 	bl	8011ad0 <__sinit>
 8014514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014516:	07d9      	lsls	r1, r3, #31
 8014518:	d405      	bmi.n	8014526 <_vfiprintf_r+0x2a>
 801451a:	89ab      	ldrh	r3, [r5, #12]
 801451c:	059a      	lsls	r2, r3, #22
 801451e:	d402      	bmi.n	8014526 <_vfiprintf_r+0x2a>
 8014520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014522:	f7fd fc92 	bl	8011e4a <__retarget_lock_acquire_recursive>
 8014526:	89ab      	ldrh	r3, [r5, #12]
 8014528:	071b      	lsls	r3, r3, #28
 801452a:	d501      	bpl.n	8014530 <_vfiprintf_r+0x34>
 801452c:	692b      	ldr	r3, [r5, #16]
 801452e:	b99b      	cbnz	r3, 8014558 <_vfiprintf_r+0x5c>
 8014530:	4629      	mov	r1, r5
 8014532:	4630      	mov	r0, r6
 8014534:	f7fd fbb6 	bl	8011ca4 <__swsetup_r>
 8014538:	b170      	cbz	r0, 8014558 <_vfiprintf_r+0x5c>
 801453a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801453c:	07dc      	lsls	r4, r3, #31
 801453e:	d504      	bpl.n	801454a <_vfiprintf_r+0x4e>
 8014540:	f04f 30ff 	mov.w	r0, #4294967295
 8014544:	b01d      	add	sp, #116	@ 0x74
 8014546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801454a:	89ab      	ldrh	r3, [r5, #12]
 801454c:	0598      	lsls	r0, r3, #22
 801454e:	d4f7      	bmi.n	8014540 <_vfiprintf_r+0x44>
 8014550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014552:	f7fd fc7b 	bl	8011e4c <__retarget_lock_release_recursive>
 8014556:	e7f3      	b.n	8014540 <_vfiprintf_r+0x44>
 8014558:	2300      	movs	r3, #0
 801455a:	9309      	str	r3, [sp, #36]	@ 0x24
 801455c:	2320      	movs	r3, #32
 801455e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014562:	f8cd 800c 	str.w	r8, [sp, #12]
 8014566:	2330      	movs	r3, #48	@ 0x30
 8014568:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014718 <_vfiprintf_r+0x21c>
 801456c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014570:	f04f 0901 	mov.w	r9, #1
 8014574:	4623      	mov	r3, r4
 8014576:	469a      	mov	sl, r3
 8014578:	f813 2b01 	ldrb.w	r2, [r3], #1
 801457c:	b10a      	cbz	r2, 8014582 <_vfiprintf_r+0x86>
 801457e:	2a25      	cmp	r2, #37	@ 0x25
 8014580:	d1f9      	bne.n	8014576 <_vfiprintf_r+0x7a>
 8014582:	ebba 0b04 	subs.w	fp, sl, r4
 8014586:	d00b      	beq.n	80145a0 <_vfiprintf_r+0xa4>
 8014588:	465b      	mov	r3, fp
 801458a:	4622      	mov	r2, r4
 801458c:	4629      	mov	r1, r5
 801458e:	4630      	mov	r0, r6
 8014590:	f7ff ffa1 	bl	80144d6 <__sfputs_r>
 8014594:	3001      	adds	r0, #1
 8014596:	f000 80a7 	beq.w	80146e8 <_vfiprintf_r+0x1ec>
 801459a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801459c:	445a      	add	r2, fp
 801459e:	9209      	str	r2, [sp, #36]	@ 0x24
 80145a0:	f89a 3000 	ldrb.w	r3, [sl]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	f000 809f 	beq.w	80146e8 <_vfiprintf_r+0x1ec>
 80145aa:	2300      	movs	r3, #0
 80145ac:	f04f 32ff 	mov.w	r2, #4294967295
 80145b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145b4:	f10a 0a01 	add.w	sl, sl, #1
 80145b8:	9304      	str	r3, [sp, #16]
 80145ba:	9307      	str	r3, [sp, #28]
 80145bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80145c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80145c2:	4654      	mov	r4, sl
 80145c4:	2205      	movs	r2, #5
 80145c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145ca:	4853      	ldr	r0, [pc, #332]	@ (8014718 <_vfiprintf_r+0x21c>)
 80145cc:	f7eb fea0 	bl	8000310 <memchr>
 80145d0:	9a04      	ldr	r2, [sp, #16]
 80145d2:	b9d8      	cbnz	r0, 801460c <_vfiprintf_r+0x110>
 80145d4:	06d1      	lsls	r1, r2, #27
 80145d6:	bf44      	itt	mi
 80145d8:	2320      	movmi	r3, #32
 80145da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145de:	0713      	lsls	r3, r2, #28
 80145e0:	bf44      	itt	mi
 80145e2:	232b      	movmi	r3, #43	@ 0x2b
 80145e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145e8:	f89a 3000 	ldrb.w	r3, [sl]
 80145ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80145ee:	d015      	beq.n	801461c <_vfiprintf_r+0x120>
 80145f0:	9a07      	ldr	r2, [sp, #28]
 80145f2:	4654      	mov	r4, sl
 80145f4:	2000      	movs	r0, #0
 80145f6:	f04f 0c0a 	mov.w	ip, #10
 80145fa:	4621      	mov	r1, r4
 80145fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014600:	3b30      	subs	r3, #48	@ 0x30
 8014602:	2b09      	cmp	r3, #9
 8014604:	d94b      	bls.n	801469e <_vfiprintf_r+0x1a2>
 8014606:	b1b0      	cbz	r0, 8014636 <_vfiprintf_r+0x13a>
 8014608:	9207      	str	r2, [sp, #28]
 801460a:	e014      	b.n	8014636 <_vfiprintf_r+0x13a>
 801460c:	eba0 0308 	sub.w	r3, r0, r8
 8014610:	fa09 f303 	lsl.w	r3, r9, r3
 8014614:	4313      	orrs	r3, r2
 8014616:	9304      	str	r3, [sp, #16]
 8014618:	46a2      	mov	sl, r4
 801461a:	e7d2      	b.n	80145c2 <_vfiprintf_r+0xc6>
 801461c:	9b03      	ldr	r3, [sp, #12]
 801461e:	1d19      	adds	r1, r3, #4
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	9103      	str	r1, [sp, #12]
 8014624:	2b00      	cmp	r3, #0
 8014626:	bfbb      	ittet	lt
 8014628:	425b      	neglt	r3, r3
 801462a:	f042 0202 	orrlt.w	r2, r2, #2
 801462e:	9307      	strge	r3, [sp, #28]
 8014630:	9307      	strlt	r3, [sp, #28]
 8014632:	bfb8      	it	lt
 8014634:	9204      	strlt	r2, [sp, #16]
 8014636:	7823      	ldrb	r3, [r4, #0]
 8014638:	2b2e      	cmp	r3, #46	@ 0x2e
 801463a:	d10a      	bne.n	8014652 <_vfiprintf_r+0x156>
 801463c:	7863      	ldrb	r3, [r4, #1]
 801463e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014640:	d132      	bne.n	80146a8 <_vfiprintf_r+0x1ac>
 8014642:	9b03      	ldr	r3, [sp, #12]
 8014644:	1d1a      	adds	r2, r3, #4
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	9203      	str	r2, [sp, #12]
 801464a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801464e:	3402      	adds	r4, #2
 8014650:	9305      	str	r3, [sp, #20]
 8014652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014728 <_vfiprintf_r+0x22c>
 8014656:	7821      	ldrb	r1, [r4, #0]
 8014658:	2203      	movs	r2, #3
 801465a:	4650      	mov	r0, sl
 801465c:	f7eb fe58 	bl	8000310 <memchr>
 8014660:	b138      	cbz	r0, 8014672 <_vfiprintf_r+0x176>
 8014662:	9b04      	ldr	r3, [sp, #16]
 8014664:	eba0 000a 	sub.w	r0, r0, sl
 8014668:	2240      	movs	r2, #64	@ 0x40
 801466a:	4082      	lsls	r2, r0
 801466c:	4313      	orrs	r3, r2
 801466e:	3401      	adds	r4, #1
 8014670:	9304      	str	r3, [sp, #16]
 8014672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014676:	4829      	ldr	r0, [pc, #164]	@ (801471c <_vfiprintf_r+0x220>)
 8014678:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801467c:	2206      	movs	r2, #6
 801467e:	f7eb fe47 	bl	8000310 <memchr>
 8014682:	2800      	cmp	r0, #0
 8014684:	d03f      	beq.n	8014706 <_vfiprintf_r+0x20a>
 8014686:	4b26      	ldr	r3, [pc, #152]	@ (8014720 <_vfiprintf_r+0x224>)
 8014688:	bb1b      	cbnz	r3, 80146d2 <_vfiprintf_r+0x1d6>
 801468a:	9b03      	ldr	r3, [sp, #12]
 801468c:	3307      	adds	r3, #7
 801468e:	f023 0307 	bic.w	r3, r3, #7
 8014692:	3308      	adds	r3, #8
 8014694:	9303      	str	r3, [sp, #12]
 8014696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014698:	443b      	add	r3, r7
 801469a:	9309      	str	r3, [sp, #36]	@ 0x24
 801469c:	e76a      	b.n	8014574 <_vfiprintf_r+0x78>
 801469e:	fb0c 3202 	mla	r2, ip, r2, r3
 80146a2:	460c      	mov	r4, r1
 80146a4:	2001      	movs	r0, #1
 80146a6:	e7a8      	b.n	80145fa <_vfiprintf_r+0xfe>
 80146a8:	2300      	movs	r3, #0
 80146aa:	3401      	adds	r4, #1
 80146ac:	9305      	str	r3, [sp, #20]
 80146ae:	4619      	mov	r1, r3
 80146b0:	f04f 0c0a 	mov.w	ip, #10
 80146b4:	4620      	mov	r0, r4
 80146b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146ba:	3a30      	subs	r2, #48	@ 0x30
 80146bc:	2a09      	cmp	r2, #9
 80146be:	d903      	bls.n	80146c8 <_vfiprintf_r+0x1cc>
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d0c6      	beq.n	8014652 <_vfiprintf_r+0x156>
 80146c4:	9105      	str	r1, [sp, #20]
 80146c6:	e7c4      	b.n	8014652 <_vfiprintf_r+0x156>
 80146c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80146cc:	4604      	mov	r4, r0
 80146ce:	2301      	movs	r3, #1
 80146d0:	e7f0      	b.n	80146b4 <_vfiprintf_r+0x1b8>
 80146d2:	ab03      	add	r3, sp, #12
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	462a      	mov	r2, r5
 80146d8:	4b12      	ldr	r3, [pc, #72]	@ (8014724 <_vfiprintf_r+0x228>)
 80146da:	a904      	add	r1, sp, #16
 80146dc:	4630      	mov	r0, r6
 80146de:	f7fc fbb7 	bl	8010e50 <_printf_float>
 80146e2:	4607      	mov	r7, r0
 80146e4:	1c78      	adds	r0, r7, #1
 80146e6:	d1d6      	bne.n	8014696 <_vfiprintf_r+0x19a>
 80146e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80146ea:	07d9      	lsls	r1, r3, #31
 80146ec:	d405      	bmi.n	80146fa <_vfiprintf_r+0x1fe>
 80146ee:	89ab      	ldrh	r3, [r5, #12]
 80146f0:	059a      	lsls	r2, r3, #22
 80146f2:	d402      	bmi.n	80146fa <_vfiprintf_r+0x1fe>
 80146f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146f6:	f7fd fba9 	bl	8011e4c <__retarget_lock_release_recursive>
 80146fa:	89ab      	ldrh	r3, [r5, #12]
 80146fc:	065b      	lsls	r3, r3, #25
 80146fe:	f53f af1f 	bmi.w	8014540 <_vfiprintf_r+0x44>
 8014702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014704:	e71e      	b.n	8014544 <_vfiprintf_r+0x48>
 8014706:	ab03      	add	r3, sp, #12
 8014708:	9300      	str	r3, [sp, #0]
 801470a:	462a      	mov	r2, r5
 801470c:	4b05      	ldr	r3, [pc, #20]	@ (8014724 <_vfiprintf_r+0x228>)
 801470e:	a904      	add	r1, sp, #16
 8014710:	4630      	mov	r0, r6
 8014712:	f7fc fe25 	bl	8011360 <_printf_i>
 8014716:	e7e4      	b.n	80146e2 <_vfiprintf_r+0x1e6>
 8014718:	08015709 	.word	0x08015709
 801471c:	08015713 	.word	0x08015713
 8014720:	08010e51 	.word	0x08010e51
 8014724:	080144d7 	.word	0x080144d7
 8014728:	0801570f 	.word	0x0801570f

0801472c <__sflush_r>:
 801472c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014734:	0716      	lsls	r6, r2, #28
 8014736:	4605      	mov	r5, r0
 8014738:	460c      	mov	r4, r1
 801473a:	d454      	bmi.n	80147e6 <__sflush_r+0xba>
 801473c:	684b      	ldr	r3, [r1, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	dc02      	bgt.n	8014748 <__sflush_r+0x1c>
 8014742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014744:	2b00      	cmp	r3, #0
 8014746:	dd48      	ble.n	80147da <__sflush_r+0xae>
 8014748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801474a:	2e00      	cmp	r6, #0
 801474c:	d045      	beq.n	80147da <__sflush_r+0xae>
 801474e:	2300      	movs	r3, #0
 8014750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014754:	682f      	ldr	r7, [r5, #0]
 8014756:	6a21      	ldr	r1, [r4, #32]
 8014758:	602b      	str	r3, [r5, #0]
 801475a:	d030      	beq.n	80147be <__sflush_r+0x92>
 801475c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801475e:	89a3      	ldrh	r3, [r4, #12]
 8014760:	0759      	lsls	r1, r3, #29
 8014762:	d505      	bpl.n	8014770 <__sflush_r+0x44>
 8014764:	6863      	ldr	r3, [r4, #4]
 8014766:	1ad2      	subs	r2, r2, r3
 8014768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801476a:	b10b      	cbz	r3, 8014770 <__sflush_r+0x44>
 801476c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801476e:	1ad2      	subs	r2, r2, r3
 8014770:	2300      	movs	r3, #0
 8014772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014774:	6a21      	ldr	r1, [r4, #32]
 8014776:	4628      	mov	r0, r5
 8014778:	47b0      	blx	r6
 801477a:	1c43      	adds	r3, r0, #1
 801477c:	89a3      	ldrh	r3, [r4, #12]
 801477e:	d106      	bne.n	801478e <__sflush_r+0x62>
 8014780:	6829      	ldr	r1, [r5, #0]
 8014782:	291d      	cmp	r1, #29
 8014784:	d82b      	bhi.n	80147de <__sflush_r+0xb2>
 8014786:	4a2a      	ldr	r2, [pc, #168]	@ (8014830 <__sflush_r+0x104>)
 8014788:	410a      	asrs	r2, r1
 801478a:	07d6      	lsls	r6, r2, #31
 801478c:	d427      	bmi.n	80147de <__sflush_r+0xb2>
 801478e:	2200      	movs	r2, #0
 8014790:	6062      	str	r2, [r4, #4]
 8014792:	04d9      	lsls	r1, r3, #19
 8014794:	6922      	ldr	r2, [r4, #16]
 8014796:	6022      	str	r2, [r4, #0]
 8014798:	d504      	bpl.n	80147a4 <__sflush_r+0x78>
 801479a:	1c42      	adds	r2, r0, #1
 801479c:	d101      	bne.n	80147a2 <__sflush_r+0x76>
 801479e:	682b      	ldr	r3, [r5, #0]
 80147a0:	b903      	cbnz	r3, 80147a4 <__sflush_r+0x78>
 80147a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80147a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147a6:	602f      	str	r7, [r5, #0]
 80147a8:	b1b9      	cbz	r1, 80147da <__sflush_r+0xae>
 80147aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147ae:	4299      	cmp	r1, r3
 80147b0:	d002      	beq.n	80147b8 <__sflush_r+0x8c>
 80147b2:	4628      	mov	r0, r5
 80147b4:	f7fe f93e 	bl	8012a34 <_free_r>
 80147b8:	2300      	movs	r3, #0
 80147ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80147bc:	e00d      	b.n	80147da <__sflush_r+0xae>
 80147be:	2301      	movs	r3, #1
 80147c0:	4628      	mov	r0, r5
 80147c2:	47b0      	blx	r6
 80147c4:	4602      	mov	r2, r0
 80147c6:	1c50      	adds	r0, r2, #1
 80147c8:	d1c9      	bne.n	801475e <__sflush_r+0x32>
 80147ca:	682b      	ldr	r3, [r5, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d0c6      	beq.n	801475e <__sflush_r+0x32>
 80147d0:	2b1d      	cmp	r3, #29
 80147d2:	d001      	beq.n	80147d8 <__sflush_r+0xac>
 80147d4:	2b16      	cmp	r3, #22
 80147d6:	d11e      	bne.n	8014816 <__sflush_r+0xea>
 80147d8:	602f      	str	r7, [r5, #0]
 80147da:	2000      	movs	r0, #0
 80147dc:	e022      	b.n	8014824 <__sflush_r+0xf8>
 80147de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147e2:	b21b      	sxth	r3, r3
 80147e4:	e01b      	b.n	801481e <__sflush_r+0xf2>
 80147e6:	690f      	ldr	r7, [r1, #16]
 80147e8:	2f00      	cmp	r7, #0
 80147ea:	d0f6      	beq.n	80147da <__sflush_r+0xae>
 80147ec:	0793      	lsls	r3, r2, #30
 80147ee:	680e      	ldr	r6, [r1, #0]
 80147f0:	bf08      	it	eq
 80147f2:	694b      	ldreq	r3, [r1, #20]
 80147f4:	600f      	str	r7, [r1, #0]
 80147f6:	bf18      	it	ne
 80147f8:	2300      	movne	r3, #0
 80147fa:	eba6 0807 	sub.w	r8, r6, r7
 80147fe:	608b      	str	r3, [r1, #8]
 8014800:	f1b8 0f00 	cmp.w	r8, #0
 8014804:	dde9      	ble.n	80147da <__sflush_r+0xae>
 8014806:	6a21      	ldr	r1, [r4, #32]
 8014808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801480a:	4643      	mov	r3, r8
 801480c:	463a      	mov	r2, r7
 801480e:	4628      	mov	r0, r5
 8014810:	47b0      	blx	r6
 8014812:	2800      	cmp	r0, #0
 8014814:	dc08      	bgt.n	8014828 <__sflush_r+0xfc>
 8014816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801481a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801481e:	81a3      	strh	r3, [r4, #12]
 8014820:	f04f 30ff 	mov.w	r0, #4294967295
 8014824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014828:	4407      	add	r7, r0
 801482a:	eba8 0800 	sub.w	r8, r8, r0
 801482e:	e7e7      	b.n	8014800 <__sflush_r+0xd4>
 8014830:	dfbffffe 	.word	0xdfbffffe

08014834 <_fflush_r>:
 8014834:	b538      	push	{r3, r4, r5, lr}
 8014836:	690b      	ldr	r3, [r1, #16]
 8014838:	4605      	mov	r5, r0
 801483a:	460c      	mov	r4, r1
 801483c:	b913      	cbnz	r3, 8014844 <_fflush_r+0x10>
 801483e:	2500      	movs	r5, #0
 8014840:	4628      	mov	r0, r5
 8014842:	bd38      	pop	{r3, r4, r5, pc}
 8014844:	b118      	cbz	r0, 801484e <_fflush_r+0x1a>
 8014846:	6a03      	ldr	r3, [r0, #32]
 8014848:	b90b      	cbnz	r3, 801484e <_fflush_r+0x1a>
 801484a:	f7fd f941 	bl	8011ad0 <__sinit>
 801484e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d0f3      	beq.n	801483e <_fflush_r+0xa>
 8014856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014858:	07d0      	lsls	r0, r2, #31
 801485a:	d404      	bmi.n	8014866 <_fflush_r+0x32>
 801485c:	0599      	lsls	r1, r3, #22
 801485e:	d402      	bmi.n	8014866 <_fflush_r+0x32>
 8014860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014862:	f7fd faf2 	bl	8011e4a <__retarget_lock_acquire_recursive>
 8014866:	4628      	mov	r0, r5
 8014868:	4621      	mov	r1, r4
 801486a:	f7ff ff5f 	bl	801472c <__sflush_r>
 801486e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014870:	07da      	lsls	r2, r3, #31
 8014872:	4605      	mov	r5, r0
 8014874:	d4e4      	bmi.n	8014840 <_fflush_r+0xc>
 8014876:	89a3      	ldrh	r3, [r4, #12]
 8014878:	059b      	lsls	r3, r3, #22
 801487a:	d4e1      	bmi.n	8014840 <_fflush_r+0xc>
 801487c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801487e:	f7fd fae5 	bl	8011e4c <__retarget_lock_release_recursive>
 8014882:	e7dd      	b.n	8014840 <_fflush_r+0xc>

08014884 <__swhatbuf_r>:
 8014884:	b570      	push	{r4, r5, r6, lr}
 8014886:	460c      	mov	r4, r1
 8014888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801488c:	2900      	cmp	r1, #0
 801488e:	b096      	sub	sp, #88	@ 0x58
 8014890:	4615      	mov	r5, r2
 8014892:	461e      	mov	r6, r3
 8014894:	da0d      	bge.n	80148b2 <__swhatbuf_r+0x2e>
 8014896:	89a3      	ldrh	r3, [r4, #12]
 8014898:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801489c:	f04f 0100 	mov.w	r1, #0
 80148a0:	bf14      	ite	ne
 80148a2:	2340      	movne	r3, #64	@ 0x40
 80148a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80148a8:	2000      	movs	r0, #0
 80148aa:	6031      	str	r1, [r6, #0]
 80148ac:	602b      	str	r3, [r5, #0]
 80148ae:	b016      	add	sp, #88	@ 0x58
 80148b0:	bd70      	pop	{r4, r5, r6, pc}
 80148b2:	466a      	mov	r2, sp
 80148b4:	f000 f874 	bl	80149a0 <_fstat_r>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	dbec      	blt.n	8014896 <__swhatbuf_r+0x12>
 80148bc:	9901      	ldr	r1, [sp, #4]
 80148be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80148c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80148c6:	4259      	negs	r1, r3
 80148c8:	4159      	adcs	r1, r3
 80148ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80148ce:	e7eb      	b.n	80148a8 <__swhatbuf_r+0x24>

080148d0 <__smakebuf_r>:
 80148d0:	898b      	ldrh	r3, [r1, #12]
 80148d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148d4:	079d      	lsls	r5, r3, #30
 80148d6:	4606      	mov	r6, r0
 80148d8:	460c      	mov	r4, r1
 80148da:	d507      	bpl.n	80148ec <__smakebuf_r+0x1c>
 80148dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80148e0:	6023      	str	r3, [r4, #0]
 80148e2:	6123      	str	r3, [r4, #16]
 80148e4:	2301      	movs	r3, #1
 80148e6:	6163      	str	r3, [r4, #20]
 80148e8:	b003      	add	sp, #12
 80148ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ec:	ab01      	add	r3, sp, #4
 80148ee:	466a      	mov	r2, sp
 80148f0:	f7ff ffc8 	bl	8014884 <__swhatbuf_r>
 80148f4:	9f00      	ldr	r7, [sp, #0]
 80148f6:	4605      	mov	r5, r0
 80148f8:	4639      	mov	r1, r7
 80148fa:	4630      	mov	r0, r6
 80148fc:	f7fe f90e 	bl	8012b1c <_malloc_r>
 8014900:	b948      	cbnz	r0, 8014916 <__smakebuf_r+0x46>
 8014902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014906:	059a      	lsls	r2, r3, #22
 8014908:	d4ee      	bmi.n	80148e8 <__smakebuf_r+0x18>
 801490a:	f023 0303 	bic.w	r3, r3, #3
 801490e:	f043 0302 	orr.w	r3, r3, #2
 8014912:	81a3      	strh	r3, [r4, #12]
 8014914:	e7e2      	b.n	80148dc <__smakebuf_r+0xc>
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	6020      	str	r0, [r4, #0]
 801491a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801491e:	81a3      	strh	r3, [r4, #12]
 8014920:	9b01      	ldr	r3, [sp, #4]
 8014922:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014926:	b15b      	cbz	r3, 8014940 <__smakebuf_r+0x70>
 8014928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801492c:	4630      	mov	r0, r6
 801492e:	f000 f849 	bl	80149c4 <_isatty_r>
 8014932:	b128      	cbz	r0, 8014940 <__smakebuf_r+0x70>
 8014934:	89a3      	ldrh	r3, [r4, #12]
 8014936:	f023 0303 	bic.w	r3, r3, #3
 801493a:	f043 0301 	orr.w	r3, r3, #1
 801493e:	81a3      	strh	r3, [r4, #12]
 8014940:	89a3      	ldrh	r3, [r4, #12]
 8014942:	431d      	orrs	r5, r3
 8014944:	81a5      	strh	r5, [r4, #12]
 8014946:	e7cf      	b.n	80148e8 <__smakebuf_r+0x18>

08014948 <memmove>:
 8014948:	4288      	cmp	r0, r1
 801494a:	b510      	push	{r4, lr}
 801494c:	eb01 0402 	add.w	r4, r1, r2
 8014950:	d902      	bls.n	8014958 <memmove+0x10>
 8014952:	4284      	cmp	r4, r0
 8014954:	4623      	mov	r3, r4
 8014956:	d807      	bhi.n	8014968 <memmove+0x20>
 8014958:	1e43      	subs	r3, r0, #1
 801495a:	42a1      	cmp	r1, r4
 801495c:	d008      	beq.n	8014970 <memmove+0x28>
 801495e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014966:	e7f8      	b.n	801495a <memmove+0x12>
 8014968:	4402      	add	r2, r0
 801496a:	4601      	mov	r1, r0
 801496c:	428a      	cmp	r2, r1
 801496e:	d100      	bne.n	8014972 <memmove+0x2a>
 8014970:	bd10      	pop	{r4, pc}
 8014972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801497a:	e7f7      	b.n	801496c <memmove+0x24>

0801497c <strncmp>:
 801497c:	b510      	push	{r4, lr}
 801497e:	b16a      	cbz	r2, 801499c <strncmp+0x20>
 8014980:	3901      	subs	r1, #1
 8014982:	1884      	adds	r4, r0, r2
 8014984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014988:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801498c:	429a      	cmp	r2, r3
 801498e:	d103      	bne.n	8014998 <strncmp+0x1c>
 8014990:	42a0      	cmp	r0, r4
 8014992:	d001      	beq.n	8014998 <strncmp+0x1c>
 8014994:	2a00      	cmp	r2, #0
 8014996:	d1f5      	bne.n	8014984 <strncmp+0x8>
 8014998:	1ad0      	subs	r0, r2, r3
 801499a:	bd10      	pop	{r4, pc}
 801499c:	4610      	mov	r0, r2
 801499e:	e7fc      	b.n	801499a <strncmp+0x1e>

080149a0 <_fstat_r>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	4d07      	ldr	r5, [pc, #28]	@ (80149c0 <_fstat_r+0x20>)
 80149a4:	2300      	movs	r3, #0
 80149a6:	4604      	mov	r4, r0
 80149a8:	4608      	mov	r0, r1
 80149aa:	4611      	mov	r1, r2
 80149ac:	602b      	str	r3, [r5, #0]
 80149ae:	f7ee fd35 	bl	800341c <_fstat>
 80149b2:	1c43      	adds	r3, r0, #1
 80149b4:	d102      	bne.n	80149bc <_fstat_r+0x1c>
 80149b6:	682b      	ldr	r3, [r5, #0]
 80149b8:	b103      	cbz	r3, 80149bc <_fstat_r+0x1c>
 80149ba:	6023      	str	r3, [r4, #0]
 80149bc:	bd38      	pop	{r3, r4, r5, pc}
 80149be:	bf00      	nop
 80149c0:	24000d18 	.word	0x24000d18

080149c4 <_isatty_r>:
 80149c4:	b538      	push	{r3, r4, r5, lr}
 80149c6:	4d06      	ldr	r5, [pc, #24]	@ (80149e0 <_isatty_r+0x1c>)
 80149c8:	2300      	movs	r3, #0
 80149ca:	4604      	mov	r4, r0
 80149cc:	4608      	mov	r0, r1
 80149ce:	602b      	str	r3, [r5, #0]
 80149d0:	f7ee fd34 	bl	800343c <_isatty>
 80149d4:	1c43      	adds	r3, r0, #1
 80149d6:	d102      	bne.n	80149de <_isatty_r+0x1a>
 80149d8:	682b      	ldr	r3, [r5, #0]
 80149da:	b103      	cbz	r3, 80149de <_isatty_r+0x1a>
 80149dc:	6023      	str	r3, [r4, #0]
 80149de:	bd38      	pop	{r3, r4, r5, pc}
 80149e0:	24000d18 	.word	0x24000d18

080149e4 <_sbrk_r>:
 80149e4:	b538      	push	{r3, r4, r5, lr}
 80149e6:	4d06      	ldr	r5, [pc, #24]	@ (8014a00 <_sbrk_r+0x1c>)
 80149e8:	2300      	movs	r3, #0
 80149ea:	4604      	mov	r4, r0
 80149ec:	4608      	mov	r0, r1
 80149ee:	602b      	str	r3, [r5, #0]
 80149f0:	f7ee fd3c 	bl	800346c <_sbrk>
 80149f4:	1c43      	adds	r3, r0, #1
 80149f6:	d102      	bne.n	80149fe <_sbrk_r+0x1a>
 80149f8:	682b      	ldr	r3, [r5, #0]
 80149fa:	b103      	cbz	r3, 80149fe <_sbrk_r+0x1a>
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	bd38      	pop	{r3, r4, r5, pc}
 8014a00:	24000d18 	.word	0x24000d18
 8014a04:	00000000 	.word	0x00000000

08014a08 <nan>:
 8014a08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014a10 <nan+0x8>
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop
 8014a10:	00000000 	.word	0x00000000
 8014a14:	7ff80000 	.word	0x7ff80000

08014a18 <__assert_func>:
 8014a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a1a:	4614      	mov	r4, r2
 8014a1c:	461a      	mov	r2, r3
 8014a1e:	4b09      	ldr	r3, [pc, #36]	@ (8014a44 <__assert_func+0x2c>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4605      	mov	r5, r0
 8014a24:	68d8      	ldr	r0, [r3, #12]
 8014a26:	b954      	cbnz	r4, 8014a3e <__assert_func+0x26>
 8014a28:	4b07      	ldr	r3, [pc, #28]	@ (8014a48 <__assert_func+0x30>)
 8014a2a:	461c      	mov	r4, r3
 8014a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a30:	9100      	str	r1, [sp, #0]
 8014a32:	462b      	mov	r3, r5
 8014a34:	4905      	ldr	r1, [pc, #20]	@ (8014a4c <__assert_func+0x34>)
 8014a36:	f000 fba7 	bl	8015188 <fiprintf>
 8014a3a:	f000 fbb7 	bl	80151ac <abort>
 8014a3e:	4b04      	ldr	r3, [pc, #16]	@ (8014a50 <__assert_func+0x38>)
 8014a40:	e7f4      	b.n	8014a2c <__assert_func+0x14>
 8014a42:	bf00      	nop
 8014a44:	2400001c 	.word	0x2400001c
 8014a48:	0801575d 	.word	0x0801575d
 8014a4c:	0801572f 	.word	0x0801572f
 8014a50:	08015722 	.word	0x08015722

08014a54 <_calloc_r>:
 8014a54:	b570      	push	{r4, r5, r6, lr}
 8014a56:	fba1 5402 	umull	r5, r4, r1, r2
 8014a5a:	b93c      	cbnz	r4, 8014a6c <_calloc_r+0x18>
 8014a5c:	4629      	mov	r1, r5
 8014a5e:	f7fe f85d 	bl	8012b1c <_malloc_r>
 8014a62:	4606      	mov	r6, r0
 8014a64:	b928      	cbnz	r0, 8014a72 <_calloc_r+0x1e>
 8014a66:	2600      	movs	r6, #0
 8014a68:	4630      	mov	r0, r6
 8014a6a:	bd70      	pop	{r4, r5, r6, pc}
 8014a6c:	220c      	movs	r2, #12
 8014a6e:	6002      	str	r2, [r0, #0]
 8014a70:	e7f9      	b.n	8014a66 <_calloc_r+0x12>
 8014a72:	462a      	mov	r2, r5
 8014a74:	4621      	mov	r1, r4
 8014a76:	f7fd f96b 	bl	8011d50 <memset>
 8014a7a:	e7f5      	b.n	8014a68 <_calloc_r+0x14>

08014a7c <rshift>:
 8014a7c:	6903      	ldr	r3, [r0, #16]
 8014a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014a8a:	f100 0414 	add.w	r4, r0, #20
 8014a8e:	dd45      	ble.n	8014b1c <rshift+0xa0>
 8014a90:	f011 011f 	ands.w	r1, r1, #31
 8014a94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014a98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014a9c:	d10c      	bne.n	8014ab8 <rshift+0x3c>
 8014a9e:	f100 0710 	add.w	r7, r0, #16
 8014aa2:	4629      	mov	r1, r5
 8014aa4:	42b1      	cmp	r1, r6
 8014aa6:	d334      	bcc.n	8014b12 <rshift+0x96>
 8014aa8:	1a9b      	subs	r3, r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	1eea      	subs	r2, r5, #3
 8014aae:	4296      	cmp	r6, r2
 8014ab0:	bf38      	it	cc
 8014ab2:	2300      	movcc	r3, #0
 8014ab4:	4423      	add	r3, r4
 8014ab6:	e015      	b.n	8014ae4 <rshift+0x68>
 8014ab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014abc:	f1c1 0820 	rsb	r8, r1, #32
 8014ac0:	40cf      	lsrs	r7, r1
 8014ac2:	f105 0e04 	add.w	lr, r5, #4
 8014ac6:	46a1      	mov	r9, r4
 8014ac8:	4576      	cmp	r6, lr
 8014aca:	46f4      	mov	ip, lr
 8014acc:	d815      	bhi.n	8014afa <rshift+0x7e>
 8014ace:	1a9a      	subs	r2, r3, r2
 8014ad0:	0092      	lsls	r2, r2, #2
 8014ad2:	3a04      	subs	r2, #4
 8014ad4:	3501      	adds	r5, #1
 8014ad6:	42ae      	cmp	r6, r5
 8014ad8:	bf38      	it	cc
 8014ada:	2200      	movcc	r2, #0
 8014adc:	18a3      	adds	r3, r4, r2
 8014ade:	50a7      	str	r7, [r4, r2]
 8014ae0:	b107      	cbz	r7, 8014ae4 <rshift+0x68>
 8014ae2:	3304      	adds	r3, #4
 8014ae4:	1b1a      	subs	r2, r3, r4
 8014ae6:	42a3      	cmp	r3, r4
 8014ae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014aec:	bf08      	it	eq
 8014aee:	2300      	moveq	r3, #0
 8014af0:	6102      	str	r2, [r0, #16]
 8014af2:	bf08      	it	eq
 8014af4:	6143      	streq	r3, [r0, #20]
 8014af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014afa:	f8dc c000 	ldr.w	ip, [ip]
 8014afe:	fa0c fc08 	lsl.w	ip, ip, r8
 8014b02:	ea4c 0707 	orr.w	r7, ip, r7
 8014b06:	f849 7b04 	str.w	r7, [r9], #4
 8014b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014b0e:	40cf      	lsrs	r7, r1
 8014b10:	e7da      	b.n	8014ac8 <rshift+0x4c>
 8014b12:	f851 cb04 	ldr.w	ip, [r1], #4
 8014b16:	f847 cf04 	str.w	ip, [r7, #4]!
 8014b1a:	e7c3      	b.n	8014aa4 <rshift+0x28>
 8014b1c:	4623      	mov	r3, r4
 8014b1e:	e7e1      	b.n	8014ae4 <rshift+0x68>

08014b20 <__hexdig_fun>:
 8014b20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014b24:	2b09      	cmp	r3, #9
 8014b26:	d802      	bhi.n	8014b2e <__hexdig_fun+0xe>
 8014b28:	3820      	subs	r0, #32
 8014b2a:	b2c0      	uxtb	r0, r0
 8014b2c:	4770      	bx	lr
 8014b2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014b32:	2b05      	cmp	r3, #5
 8014b34:	d801      	bhi.n	8014b3a <__hexdig_fun+0x1a>
 8014b36:	3847      	subs	r0, #71	@ 0x47
 8014b38:	e7f7      	b.n	8014b2a <__hexdig_fun+0xa>
 8014b3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014b3e:	2b05      	cmp	r3, #5
 8014b40:	d801      	bhi.n	8014b46 <__hexdig_fun+0x26>
 8014b42:	3827      	subs	r0, #39	@ 0x27
 8014b44:	e7f1      	b.n	8014b2a <__hexdig_fun+0xa>
 8014b46:	2000      	movs	r0, #0
 8014b48:	4770      	bx	lr
	...

08014b4c <__gethex>:
 8014b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b50:	b085      	sub	sp, #20
 8014b52:	468a      	mov	sl, r1
 8014b54:	9302      	str	r3, [sp, #8]
 8014b56:	680b      	ldr	r3, [r1, #0]
 8014b58:	9001      	str	r0, [sp, #4]
 8014b5a:	4690      	mov	r8, r2
 8014b5c:	1c9c      	adds	r4, r3, #2
 8014b5e:	46a1      	mov	r9, r4
 8014b60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014b64:	2830      	cmp	r0, #48	@ 0x30
 8014b66:	d0fa      	beq.n	8014b5e <__gethex+0x12>
 8014b68:	eba9 0303 	sub.w	r3, r9, r3
 8014b6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014b70:	f7ff ffd6 	bl	8014b20 <__hexdig_fun>
 8014b74:	4605      	mov	r5, r0
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d168      	bne.n	8014c4c <__gethex+0x100>
 8014b7a:	49a0      	ldr	r1, [pc, #640]	@ (8014dfc <__gethex+0x2b0>)
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	4648      	mov	r0, r9
 8014b80:	f7ff fefc 	bl	801497c <strncmp>
 8014b84:	4607      	mov	r7, r0
 8014b86:	2800      	cmp	r0, #0
 8014b88:	d167      	bne.n	8014c5a <__gethex+0x10e>
 8014b8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014b8e:	4626      	mov	r6, r4
 8014b90:	f7ff ffc6 	bl	8014b20 <__hexdig_fun>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	d062      	beq.n	8014c5e <__gethex+0x112>
 8014b98:	4623      	mov	r3, r4
 8014b9a:	7818      	ldrb	r0, [r3, #0]
 8014b9c:	2830      	cmp	r0, #48	@ 0x30
 8014b9e:	4699      	mov	r9, r3
 8014ba0:	f103 0301 	add.w	r3, r3, #1
 8014ba4:	d0f9      	beq.n	8014b9a <__gethex+0x4e>
 8014ba6:	f7ff ffbb 	bl	8014b20 <__hexdig_fun>
 8014baa:	fab0 f580 	clz	r5, r0
 8014bae:	096d      	lsrs	r5, r5, #5
 8014bb0:	f04f 0b01 	mov.w	fp, #1
 8014bb4:	464a      	mov	r2, r9
 8014bb6:	4616      	mov	r6, r2
 8014bb8:	3201      	adds	r2, #1
 8014bba:	7830      	ldrb	r0, [r6, #0]
 8014bbc:	f7ff ffb0 	bl	8014b20 <__hexdig_fun>
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	d1f8      	bne.n	8014bb6 <__gethex+0x6a>
 8014bc4:	498d      	ldr	r1, [pc, #564]	@ (8014dfc <__gethex+0x2b0>)
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	4630      	mov	r0, r6
 8014bca:	f7ff fed7 	bl	801497c <strncmp>
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d13f      	bne.n	8014c52 <__gethex+0x106>
 8014bd2:	b944      	cbnz	r4, 8014be6 <__gethex+0x9a>
 8014bd4:	1c74      	adds	r4, r6, #1
 8014bd6:	4622      	mov	r2, r4
 8014bd8:	4616      	mov	r6, r2
 8014bda:	3201      	adds	r2, #1
 8014bdc:	7830      	ldrb	r0, [r6, #0]
 8014bde:	f7ff ff9f 	bl	8014b20 <__hexdig_fun>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d1f8      	bne.n	8014bd8 <__gethex+0x8c>
 8014be6:	1ba4      	subs	r4, r4, r6
 8014be8:	00a7      	lsls	r7, r4, #2
 8014bea:	7833      	ldrb	r3, [r6, #0]
 8014bec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014bf0:	2b50      	cmp	r3, #80	@ 0x50
 8014bf2:	d13e      	bne.n	8014c72 <__gethex+0x126>
 8014bf4:	7873      	ldrb	r3, [r6, #1]
 8014bf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8014bf8:	d033      	beq.n	8014c62 <__gethex+0x116>
 8014bfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8014bfc:	d034      	beq.n	8014c68 <__gethex+0x11c>
 8014bfe:	1c71      	adds	r1, r6, #1
 8014c00:	2400      	movs	r4, #0
 8014c02:	7808      	ldrb	r0, [r1, #0]
 8014c04:	f7ff ff8c 	bl	8014b20 <__hexdig_fun>
 8014c08:	1e43      	subs	r3, r0, #1
 8014c0a:	b2db      	uxtb	r3, r3
 8014c0c:	2b18      	cmp	r3, #24
 8014c0e:	d830      	bhi.n	8014c72 <__gethex+0x126>
 8014c10:	f1a0 0210 	sub.w	r2, r0, #16
 8014c14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014c18:	f7ff ff82 	bl	8014b20 <__hexdig_fun>
 8014c1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014c20:	fa5f fc8c 	uxtb.w	ip, ip
 8014c24:	f1bc 0f18 	cmp.w	ip, #24
 8014c28:	f04f 030a 	mov.w	r3, #10
 8014c2c:	d91e      	bls.n	8014c6c <__gethex+0x120>
 8014c2e:	b104      	cbz	r4, 8014c32 <__gethex+0xe6>
 8014c30:	4252      	negs	r2, r2
 8014c32:	4417      	add	r7, r2
 8014c34:	f8ca 1000 	str.w	r1, [sl]
 8014c38:	b1ed      	cbz	r5, 8014c76 <__gethex+0x12a>
 8014c3a:	f1bb 0f00 	cmp.w	fp, #0
 8014c3e:	bf0c      	ite	eq
 8014c40:	2506      	moveq	r5, #6
 8014c42:	2500      	movne	r5, #0
 8014c44:	4628      	mov	r0, r5
 8014c46:	b005      	add	sp, #20
 8014c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4c:	2500      	movs	r5, #0
 8014c4e:	462c      	mov	r4, r5
 8014c50:	e7b0      	b.n	8014bb4 <__gethex+0x68>
 8014c52:	2c00      	cmp	r4, #0
 8014c54:	d1c7      	bne.n	8014be6 <__gethex+0x9a>
 8014c56:	4627      	mov	r7, r4
 8014c58:	e7c7      	b.n	8014bea <__gethex+0x9e>
 8014c5a:	464e      	mov	r6, r9
 8014c5c:	462f      	mov	r7, r5
 8014c5e:	2501      	movs	r5, #1
 8014c60:	e7c3      	b.n	8014bea <__gethex+0x9e>
 8014c62:	2400      	movs	r4, #0
 8014c64:	1cb1      	adds	r1, r6, #2
 8014c66:	e7cc      	b.n	8014c02 <__gethex+0xb6>
 8014c68:	2401      	movs	r4, #1
 8014c6a:	e7fb      	b.n	8014c64 <__gethex+0x118>
 8014c6c:	fb03 0002 	mla	r0, r3, r2, r0
 8014c70:	e7ce      	b.n	8014c10 <__gethex+0xc4>
 8014c72:	4631      	mov	r1, r6
 8014c74:	e7de      	b.n	8014c34 <__gethex+0xe8>
 8014c76:	eba6 0309 	sub.w	r3, r6, r9
 8014c7a:	3b01      	subs	r3, #1
 8014c7c:	4629      	mov	r1, r5
 8014c7e:	2b07      	cmp	r3, #7
 8014c80:	dc0a      	bgt.n	8014c98 <__gethex+0x14c>
 8014c82:	9801      	ldr	r0, [sp, #4]
 8014c84:	f7fd ffd6 	bl	8012c34 <_Balloc>
 8014c88:	4604      	mov	r4, r0
 8014c8a:	b940      	cbnz	r0, 8014c9e <__gethex+0x152>
 8014c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8014e00 <__gethex+0x2b4>)
 8014c8e:	4602      	mov	r2, r0
 8014c90:	21e4      	movs	r1, #228	@ 0xe4
 8014c92:	485c      	ldr	r0, [pc, #368]	@ (8014e04 <__gethex+0x2b8>)
 8014c94:	f7ff fec0 	bl	8014a18 <__assert_func>
 8014c98:	3101      	adds	r1, #1
 8014c9a:	105b      	asrs	r3, r3, #1
 8014c9c:	e7ef      	b.n	8014c7e <__gethex+0x132>
 8014c9e:	f100 0a14 	add.w	sl, r0, #20
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	4655      	mov	r5, sl
 8014ca6:	469b      	mov	fp, r3
 8014ca8:	45b1      	cmp	r9, r6
 8014caa:	d337      	bcc.n	8014d1c <__gethex+0x1d0>
 8014cac:	f845 bb04 	str.w	fp, [r5], #4
 8014cb0:	eba5 050a 	sub.w	r5, r5, sl
 8014cb4:	10ad      	asrs	r5, r5, #2
 8014cb6:	6125      	str	r5, [r4, #16]
 8014cb8:	4658      	mov	r0, fp
 8014cba:	f7fe f8ad 	bl	8012e18 <__hi0bits>
 8014cbe:	016d      	lsls	r5, r5, #5
 8014cc0:	f8d8 6000 	ldr.w	r6, [r8]
 8014cc4:	1a2d      	subs	r5, r5, r0
 8014cc6:	42b5      	cmp	r5, r6
 8014cc8:	dd54      	ble.n	8014d74 <__gethex+0x228>
 8014cca:	1bad      	subs	r5, r5, r6
 8014ccc:	4629      	mov	r1, r5
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f7fe fc3e 	bl	8013550 <__any_on>
 8014cd4:	4681      	mov	r9, r0
 8014cd6:	b178      	cbz	r0, 8014cf8 <__gethex+0x1ac>
 8014cd8:	1e6b      	subs	r3, r5, #1
 8014cda:	1159      	asrs	r1, r3, #5
 8014cdc:	f003 021f 	and.w	r2, r3, #31
 8014ce0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014ce4:	f04f 0901 	mov.w	r9, #1
 8014ce8:	fa09 f202 	lsl.w	r2, r9, r2
 8014cec:	420a      	tst	r2, r1
 8014cee:	d003      	beq.n	8014cf8 <__gethex+0x1ac>
 8014cf0:	454b      	cmp	r3, r9
 8014cf2:	dc36      	bgt.n	8014d62 <__gethex+0x216>
 8014cf4:	f04f 0902 	mov.w	r9, #2
 8014cf8:	4629      	mov	r1, r5
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	f7ff febe 	bl	8014a7c <rshift>
 8014d00:	442f      	add	r7, r5
 8014d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014d06:	42bb      	cmp	r3, r7
 8014d08:	da42      	bge.n	8014d90 <__gethex+0x244>
 8014d0a:	9801      	ldr	r0, [sp, #4]
 8014d0c:	4621      	mov	r1, r4
 8014d0e:	f7fd ffd1 	bl	8012cb4 <_Bfree>
 8014d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d14:	2300      	movs	r3, #0
 8014d16:	6013      	str	r3, [r2, #0]
 8014d18:	25a3      	movs	r5, #163	@ 0xa3
 8014d1a:	e793      	b.n	8014c44 <__gethex+0xf8>
 8014d1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014d20:	2a2e      	cmp	r2, #46	@ 0x2e
 8014d22:	d012      	beq.n	8014d4a <__gethex+0x1fe>
 8014d24:	2b20      	cmp	r3, #32
 8014d26:	d104      	bne.n	8014d32 <__gethex+0x1e6>
 8014d28:	f845 bb04 	str.w	fp, [r5], #4
 8014d2c:	f04f 0b00 	mov.w	fp, #0
 8014d30:	465b      	mov	r3, fp
 8014d32:	7830      	ldrb	r0, [r6, #0]
 8014d34:	9303      	str	r3, [sp, #12]
 8014d36:	f7ff fef3 	bl	8014b20 <__hexdig_fun>
 8014d3a:	9b03      	ldr	r3, [sp, #12]
 8014d3c:	f000 000f 	and.w	r0, r0, #15
 8014d40:	4098      	lsls	r0, r3
 8014d42:	ea4b 0b00 	orr.w	fp, fp, r0
 8014d46:	3304      	adds	r3, #4
 8014d48:	e7ae      	b.n	8014ca8 <__gethex+0x15c>
 8014d4a:	45b1      	cmp	r9, r6
 8014d4c:	d8ea      	bhi.n	8014d24 <__gethex+0x1d8>
 8014d4e:	492b      	ldr	r1, [pc, #172]	@ (8014dfc <__gethex+0x2b0>)
 8014d50:	9303      	str	r3, [sp, #12]
 8014d52:	2201      	movs	r2, #1
 8014d54:	4630      	mov	r0, r6
 8014d56:	f7ff fe11 	bl	801497c <strncmp>
 8014d5a:	9b03      	ldr	r3, [sp, #12]
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	d1e1      	bne.n	8014d24 <__gethex+0x1d8>
 8014d60:	e7a2      	b.n	8014ca8 <__gethex+0x15c>
 8014d62:	1ea9      	subs	r1, r5, #2
 8014d64:	4620      	mov	r0, r4
 8014d66:	f7fe fbf3 	bl	8013550 <__any_on>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d0c2      	beq.n	8014cf4 <__gethex+0x1a8>
 8014d6e:	f04f 0903 	mov.w	r9, #3
 8014d72:	e7c1      	b.n	8014cf8 <__gethex+0x1ac>
 8014d74:	da09      	bge.n	8014d8a <__gethex+0x23e>
 8014d76:	1b75      	subs	r5, r6, r5
 8014d78:	4621      	mov	r1, r4
 8014d7a:	9801      	ldr	r0, [sp, #4]
 8014d7c:	462a      	mov	r2, r5
 8014d7e:	f7fe f9b1 	bl	80130e4 <__lshift>
 8014d82:	1b7f      	subs	r7, r7, r5
 8014d84:	4604      	mov	r4, r0
 8014d86:	f100 0a14 	add.w	sl, r0, #20
 8014d8a:	f04f 0900 	mov.w	r9, #0
 8014d8e:	e7b8      	b.n	8014d02 <__gethex+0x1b6>
 8014d90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014d94:	42bd      	cmp	r5, r7
 8014d96:	dd6f      	ble.n	8014e78 <__gethex+0x32c>
 8014d98:	1bed      	subs	r5, r5, r7
 8014d9a:	42ae      	cmp	r6, r5
 8014d9c:	dc34      	bgt.n	8014e08 <__gethex+0x2bc>
 8014d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014da2:	2b02      	cmp	r3, #2
 8014da4:	d022      	beq.n	8014dec <__gethex+0x2a0>
 8014da6:	2b03      	cmp	r3, #3
 8014da8:	d024      	beq.n	8014df4 <__gethex+0x2a8>
 8014daa:	2b01      	cmp	r3, #1
 8014dac:	d115      	bne.n	8014dda <__gethex+0x28e>
 8014dae:	42ae      	cmp	r6, r5
 8014db0:	d113      	bne.n	8014dda <__gethex+0x28e>
 8014db2:	2e01      	cmp	r6, #1
 8014db4:	d10b      	bne.n	8014dce <__gethex+0x282>
 8014db6:	9a02      	ldr	r2, [sp, #8]
 8014db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014dbc:	6013      	str	r3, [r2, #0]
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	6123      	str	r3, [r4, #16]
 8014dc2:	f8ca 3000 	str.w	r3, [sl]
 8014dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dc8:	2562      	movs	r5, #98	@ 0x62
 8014dca:	601c      	str	r4, [r3, #0]
 8014dcc:	e73a      	b.n	8014c44 <__gethex+0xf8>
 8014dce:	1e71      	subs	r1, r6, #1
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f7fe fbbd 	bl	8013550 <__any_on>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	d1ed      	bne.n	8014db6 <__gethex+0x26a>
 8014dda:	9801      	ldr	r0, [sp, #4]
 8014ddc:	4621      	mov	r1, r4
 8014dde:	f7fd ff69 	bl	8012cb4 <_Bfree>
 8014de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014de4:	2300      	movs	r3, #0
 8014de6:	6013      	str	r3, [r2, #0]
 8014de8:	2550      	movs	r5, #80	@ 0x50
 8014dea:	e72b      	b.n	8014c44 <__gethex+0xf8>
 8014dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1f3      	bne.n	8014dda <__gethex+0x28e>
 8014df2:	e7e0      	b.n	8014db6 <__gethex+0x26a>
 8014df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1dd      	bne.n	8014db6 <__gethex+0x26a>
 8014dfa:	e7ee      	b.n	8014dda <__gethex+0x28e>
 8014dfc:	080155b0 	.word	0x080155b0
 8014e00:	08015445 	.word	0x08015445
 8014e04:	0801575e 	.word	0x0801575e
 8014e08:	1e6f      	subs	r7, r5, #1
 8014e0a:	f1b9 0f00 	cmp.w	r9, #0
 8014e0e:	d130      	bne.n	8014e72 <__gethex+0x326>
 8014e10:	b127      	cbz	r7, 8014e1c <__gethex+0x2d0>
 8014e12:	4639      	mov	r1, r7
 8014e14:	4620      	mov	r0, r4
 8014e16:	f7fe fb9b 	bl	8013550 <__any_on>
 8014e1a:	4681      	mov	r9, r0
 8014e1c:	117a      	asrs	r2, r7, #5
 8014e1e:	2301      	movs	r3, #1
 8014e20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014e24:	f007 071f 	and.w	r7, r7, #31
 8014e28:	40bb      	lsls	r3, r7
 8014e2a:	4213      	tst	r3, r2
 8014e2c:	4629      	mov	r1, r5
 8014e2e:	4620      	mov	r0, r4
 8014e30:	bf18      	it	ne
 8014e32:	f049 0902 	orrne.w	r9, r9, #2
 8014e36:	f7ff fe21 	bl	8014a7c <rshift>
 8014e3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014e3e:	1b76      	subs	r6, r6, r5
 8014e40:	2502      	movs	r5, #2
 8014e42:	f1b9 0f00 	cmp.w	r9, #0
 8014e46:	d047      	beq.n	8014ed8 <__gethex+0x38c>
 8014e48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014e4c:	2b02      	cmp	r3, #2
 8014e4e:	d015      	beq.n	8014e7c <__gethex+0x330>
 8014e50:	2b03      	cmp	r3, #3
 8014e52:	d017      	beq.n	8014e84 <__gethex+0x338>
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d109      	bne.n	8014e6c <__gethex+0x320>
 8014e58:	f019 0f02 	tst.w	r9, #2
 8014e5c:	d006      	beq.n	8014e6c <__gethex+0x320>
 8014e5e:	f8da 3000 	ldr.w	r3, [sl]
 8014e62:	ea49 0903 	orr.w	r9, r9, r3
 8014e66:	f019 0f01 	tst.w	r9, #1
 8014e6a:	d10e      	bne.n	8014e8a <__gethex+0x33e>
 8014e6c:	f045 0510 	orr.w	r5, r5, #16
 8014e70:	e032      	b.n	8014ed8 <__gethex+0x38c>
 8014e72:	f04f 0901 	mov.w	r9, #1
 8014e76:	e7d1      	b.n	8014e1c <__gethex+0x2d0>
 8014e78:	2501      	movs	r5, #1
 8014e7a:	e7e2      	b.n	8014e42 <__gethex+0x2f6>
 8014e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e7e:	f1c3 0301 	rsb	r3, r3, #1
 8014e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d0f0      	beq.n	8014e6c <__gethex+0x320>
 8014e8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014e8e:	f104 0314 	add.w	r3, r4, #20
 8014e92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014e96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014e9a:	f04f 0c00 	mov.w	ip, #0
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014ea8:	d01b      	beq.n	8014ee2 <__gethex+0x396>
 8014eaa:	3201      	adds	r2, #1
 8014eac:	6002      	str	r2, [r0, #0]
 8014eae:	2d02      	cmp	r5, #2
 8014eb0:	f104 0314 	add.w	r3, r4, #20
 8014eb4:	d13c      	bne.n	8014f30 <__gethex+0x3e4>
 8014eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8014eba:	3a01      	subs	r2, #1
 8014ebc:	42b2      	cmp	r2, r6
 8014ebe:	d109      	bne.n	8014ed4 <__gethex+0x388>
 8014ec0:	1171      	asrs	r1, r6, #5
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ec8:	f006 061f 	and.w	r6, r6, #31
 8014ecc:	fa02 f606 	lsl.w	r6, r2, r6
 8014ed0:	421e      	tst	r6, r3
 8014ed2:	d13a      	bne.n	8014f4a <__gethex+0x3fe>
 8014ed4:	f045 0520 	orr.w	r5, r5, #32
 8014ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eda:	601c      	str	r4, [r3, #0]
 8014edc:	9b02      	ldr	r3, [sp, #8]
 8014ede:	601f      	str	r7, [r3, #0]
 8014ee0:	e6b0      	b.n	8014c44 <__gethex+0xf8>
 8014ee2:	4299      	cmp	r1, r3
 8014ee4:	f843 cc04 	str.w	ip, [r3, #-4]
 8014ee8:	d8d9      	bhi.n	8014e9e <__gethex+0x352>
 8014eea:	68a3      	ldr	r3, [r4, #8]
 8014eec:	459b      	cmp	fp, r3
 8014eee:	db17      	blt.n	8014f20 <__gethex+0x3d4>
 8014ef0:	6861      	ldr	r1, [r4, #4]
 8014ef2:	9801      	ldr	r0, [sp, #4]
 8014ef4:	3101      	adds	r1, #1
 8014ef6:	f7fd fe9d 	bl	8012c34 <_Balloc>
 8014efa:	4681      	mov	r9, r0
 8014efc:	b918      	cbnz	r0, 8014f06 <__gethex+0x3ba>
 8014efe:	4b1a      	ldr	r3, [pc, #104]	@ (8014f68 <__gethex+0x41c>)
 8014f00:	4602      	mov	r2, r0
 8014f02:	2184      	movs	r1, #132	@ 0x84
 8014f04:	e6c5      	b.n	8014c92 <__gethex+0x146>
 8014f06:	6922      	ldr	r2, [r4, #16]
 8014f08:	3202      	adds	r2, #2
 8014f0a:	f104 010c 	add.w	r1, r4, #12
 8014f0e:	0092      	lsls	r2, r2, #2
 8014f10:	300c      	adds	r0, #12
 8014f12:	f7fc ff9c 	bl	8011e4e <memcpy>
 8014f16:	4621      	mov	r1, r4
 8014f18:	9801      	ldr	r0, [sp, #4]
 8014f1a:	f7fd fecb 	bl	8012cb4 <_Bfree>
 8014f1e:	464c      	mov	r4, r9
 8014f20:	6923      	ldr	r3, [r4, #16]
 8014f22:	1c5a      	adds	r2, r3, #1
 8014f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014f28:	6122      	str	r2, [r4, #16]
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	615a      	str	r2, [r3, #20]
 8014f2e:	e7be      	b.n	8014eae <__gethex+0x362>
 8014f30:	6922      	ldr	r2, [r4, #16]
 8014f32:	455a      	cmp	r2, fp
 8014f34:	dd0b      	ble.n	8014f4e <__gethex+0x402>
 8014f36:	2101      	movs	r1, #1
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f7ff fd9f 	bl	8014a7c <rshift>
 8014f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f42:	3701      	adds	r7, #1
 8014f44:	42bb      	cmp	r3, r7
 8014f46:	f6ff aee0 	blt.w	8014d0a <__gethex+0x1be>
 8014f4a:	2501      	movs	r5, #1
 8014f4c:	e7c2      	b.n	8014ed4 <__gethex+0x388>
 8014f4e:	f016 061f 	ands.w	r6, r6, #31
 8014f52:	d0fa      	beq.n	8014f4a <__gethex+0x3fe>
 8014f54:	4453      	add	r3, sl
 8014f56:	f1c6 0620 	rsb	r6, r6, #32
 8014f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014f5e:	f7fd ff5b 	bl	8012e18 <__hi0bits>
 8014f62:	42b0      	cmp	r0, r6
 8014f64:	dbe7      	blt.n	8014f36 <__gethex+0x3ea>
 8014f66:	e7f0      	b.n	8014f4a <__gethex+0x3fe>
 8014f68:	08015445 	.word	0x08015445

08014f6c <L_shift>:
 8014f6c:	f1c2 0208 	rsb	r2, r2, #8
 8014f70:	0092      	lsls	r2, r2, #2
 8014f72:	b570      	push	{r4, r5, r6, lr}
 8014f74:	f1c2 0620 	rsb	r6, r2, #32
 8014f78:	6843      	ldr	r3, [r0, #4]
 8014f7a:	6804      	ldr	r4, [r0, #0]
 8014f7c:	fa03 f506 	lsl.w	r5, r3, r6
 8014f80:	432c      	orrs	r4, r5
 8014f82:	40d3      	lsrs	r3, r2
 8014f84:	6004      	str	r4, [r0, #0]
 8014f86:	f840 3f04 	str.w	r3, [r0, #4]!
 8014f8a:	4288      	cmp	r0, r1
 8014f8c:	d3f4      	bcc.n	8014f78 <L_shift+0xc>
 8014f8e:	bd70      	pop	{r4, r5, r6, pc}

08014f90 <__match>:
 8014f90:	b530      	push	{r4, r5, lr}
 8014f92:	6803      	ldr	r3, [r0, #0]
 8014f94:	3301      	adds	r3, #1
 8014f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f9a:	b914      	cbnz	r4, 8014fa2 <__match+0x12>
 8014f9c:	6003      	str	r3, [r0, #0]
 8014f9e:	2001      	movs	r0, #1
 8014fa0:	bd30      	pop	{r4, r5, pc}
 8014fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014faa:	2d19      	cmp	r5, #25
 8014fac:	bf98      	it	ls
 8014fae:	3220      	addls	r2, #32
 8014fb0:	42a2      	cmp	r2, r4
 8014fb2:	d0f0      	beq.n	8014f96 <__match+0x6>
 8014fb4:	2000      	movs	r0, #0
 8014fb6:	e7f3      	b.n	8014fa0 <__match+0x10>

08014fb8 <__hexnan>:
 8014fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fbc:	680b      	ldr	r3, [r1, #0]
 8014fbe:	6801      	ldr	r1, [r0, #0]
 8014fc0:	115e      	asrs	r6, r3, #5
 8014fc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014fc6:	f013 031f 	ands.w	r3, r3, #31
 8014fca:	b087      	sub	sp, #28
 8014fcc:	bf18      	it	ne
 8014fce:	3604      	addne	r6, #4
 8014fd0:	2500      	movs	r5, #0
 8014fd2:	1f37      	subs	r7, r6, #4
 8014fd4:	4682      	mov	sl, r0
 8014fd6:	4690      	mov	r8, r2
 8014fd8:	9301      	str	r3, [sp, #4]
 8014fda:	f846 5c04 	str.w	r5, [r6, #-4]
 8014fde:	46b9      	mov	r9, r7
 8014fe0:	463c      	mov	r4, r7
 8014fe2:	9502      	str	r5, [sp, #8]
 8014fe4:	46ab      	mov	fp, r5
 8014fe6:	784a      	ldrb	r2, [r1, #1]
 8014fe8:	1c4b      	adds	r3, r1, #1
 8014fea:	9303      	str	r3, [sp, #12]
 8014fec:	b342      	cbz	r2, 8015040 <__hexnan+0x88>
 8014fee:	4610      	mov	r0, r2
 8014ff0:	9105      	str	r1, [sp, #20]
 8014ff2:	9204      	str	r2, [sp, #16]
 8014ff4:	f7ff fd94 	bl	8014b20 <__hexdig_fun>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d151      	bne.n	80150a0 <__hexnan+0xe8>
 8014ffc:	9a04      	ldr	r2, [sp, #16]
 8014ffe:	9905      	ldr	r1, [sp, #20]
 8015000:	2a20      	cmp	r2, #32
 8015002:	d818      	bhi.n	8015036 <__hexnan+0x7e>
 8015004:	9b02      	ldr	r3, [sp, #8]
 8015006:	459b      	cmp	fp, r3
 8015008:	dd13      	ble.n	8015032 <__hexnan+0x7a>
 801500a:	454c      	cmp	r4, r9
 801500c:	d206      	bcs.n	801501c <__hexnan+0x64>
 801500e:	2d07      	cmp	r5, #7
 8015010:	dc04      	bgt.n	801501c <__hexnan+0x64>
 8015012:	462a      	mov	r2, r5
 8015014:	4649      	mov	r1, r9
 8015016:	4620      	mov	r0, r4
 8015018:	f7ff ffa8 	bl	8014f6c <L_shift>
 801501c:	4544      	cmp	r4, r8
 801501e:	d952      	bls.n	80150c6 <__hexnan+0x10e>
 8015020:	2300      	movs	r3, #0
 8015022:	f1a4 0904 	sub.w	r9, r4, #4
 8015026:	f844 3c04 	str.w	r3, [r4, #-4]
 801502a:	f8cd b008 	str.w	fp, [sp, #8]
 801502e:	464c      	mov	r4, r9
 8015030:	461d      	mov	r5, r3
 8015032:	9903      	ldr	r1, [sp, #12]
 8015034:	e7d7      	b.n	8014fe6 <__hexnan+0x2e>
 8015036:	2a29      	cmp	r2, #41	@ 0x29
 8015038:	d157      	bne.n	80150ea <__hexnan+0x132>
 801503a:	3102      	adds	r1, #2
 801503c:	f8ca 1000 	str.w	r1, [sl]
 8015040:	f1bb 0f00 	cmp.w	fp, #0
 8015044:	d051      	beq.n	80150ea <__hexnan+0x132>
 8015046:	454c      	cmp	r4, r9
 8015048:	d206      	bcs.n	8015058 <__hexnan+0xa0>
 801504a:	2d07      	cmp	r5, #7
 801504c:	dc04      	bgt.n	8015058 <__hexnan+0xa0>
 801504e:	462a      	mov	r2, r5
 8015050:	4649      	mov	r1, r9
 8015052:	4620      	mov	r0, r4
 8015054:	f7ff ff8a 	bl	8014f6c <L_shift>
 8015058:	4544      	cmp	r4, r8
 801505a:	d936      	bls.n	80150ca <__hexnan+0x112>
 801505c:	f1a8 0204 	sub.w	r2, r8, #4
 8015060:	4623      	mov	r3, r4
 8015062:	f853 1b04 	ldr.w	r1, [r3], #4
 8015066:	f842 1f04 	str.w	r1, [r2, #4]!
 801506a:	429f      	cmp	r7, r3
 801506c:	d2f9      	bcs.n	8015062 <__hexnan+0xaa>
 801506e:	1b3b      	subs	r3, r7, r4
 8015070:	f023 0303 	bic.w	r3, r3, #3
 8015074:	3304      	adds	r3, #4
 8015076:	3401      	adds	r4, #1
 8015078:	3e03      	subs	r6, #3
 801507a:	42b4      	cmp	r4, r6
 801507c:	bf88      	it	hi
 801507e:	2304      	movhi	r3, #4
 8015080:	4443      	add	r3, r8
 8015082:	2200      	movs	r2, #0
 8015084:	f843 2b04 	str.w	r2, [r3], #4
 8015088:	429f      	cmp	r7, r3
 801508a:	d2fb      	bcs.n	8015084 <__hexnan+0xcc>
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	b91b      	cbnz	r3, 8015098 <__hexnan+0xe0>
 8015090:	4547      	cmp	r7, r8
 8015092:	d128      	bne.n	80150e6 <__hexnan+0x12e>
 8015094:	2301      	movs	r3, #1
 8015096:	603b      	str	r3, [r7, #0]
 8015098:	2005      	movs	r0, #5
 801509a:	b007      	add	sp, #28
 801509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a0:	3501      	adds	r5, #1
 80150a2:	2d08      	cmp	r5, #8
 80150a4:	f10b 0b01 	add.w	fp, fp, #1
 80150a8:	dd06      	ble.n	80150b8 <__hexnan+0x100>
 80150aa:	4544      	cmp	r4, r8
 80150ac:	d9c1      	bls.n	8015032 <__hexnan+0x7a>
 80150ae:	2300      	movs	r3, #0
 80150b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80150b4:	2501      	movs	r5, #1
 80150b6:	3c04      	subs	r4, #4
 80150b8:	6822      	ldr	r2, [r4, #0]
 80150ba:	f000 000f 	and.w	r0, r0, #15
 80150be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80150c2:	6020      	str	r0, [r4, #0]
 80150c4:	e7b5      	b.n	8015032 <__hexnan+0x7a>
 80150c6:	2508      	movs	r5, #8
 80150c8:	e7b3      	b.n	8015032 <__hexnan+0x7a>
 80150ca:	9b01      	ldr	r3, [sp, #4]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d0dd      	beq.n	801508c <__hexnan+0xd4>
 80150d0:	f1c3 0320 	rsb	r3, r3, #32
 80150d4:	f04f 32ff 	mov.w	r2, #4294967295
 80150d8:	40da      	lsrs	r2, r3
 80150da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80150de:	4013      	ands	r3, r2
 80150e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80150e4:	e7d2      	b.n	801508c <__hexnan+0xd4>
 80150e6:	3f04      	subs	r7, #4
 80150e8:	e7d0      	b.n	801508c <__hexnan+0xd4>
 80150ea:	2004      	movs	r0, #4
 80150ec:	e7d5      	b.n	801509a <__hexnan+0xe2>

080150ee <__ascii_mbtowc>:
 80150ee:	b082      	sub	sp, #8
 80150f0:	b901      	cbnz	r1, 80150f4 <__ascii_mbtowc+0x6>
 80150f2:	a901      	add	r1, sp, #4
 80150f4:	b142      	cbz	r2, 8015108 <__ascii_mbtowc+0x1a>
 80150f6:	b14b      	cbz	r3, 801510c <__ascii_mbtowc+0x1e>
 80150f8:	7813      	ldrb	r3, [r2, #0]
 80150fa:	600b      	str	r3, [r1, #0]
 80150fc:	7812      	ldrb	r2, [r2, #0]
 80150fe:	1e10      	subs	r0, r2, #0
 8015100:	bf18      	it	ne
 8015102:	2001      	movne	r0, #1
 8015104:	b002      	add	sp, #8
 8015106:	4770      	bx	lr
 8015108:	4610      	mov	r0, r2
 801510a:	e7fb      	b.n	8015104 <__ascii_mbtowc+0x16>
 801510c:	f06f 0001 	mvn.w	r0, #1
 8015110:	e7f8      	b.n	8015104 <__ascii_mbtowc+0x16>

08015112 <_realloc_r>:
 8015112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015116:	4680      	mov	r8, r0
 8015118:	4615      	mov	r5, r2
 801511a:	460c      	mov	r4, r1
 801511c:	b921      	cbnz	r1, 8015128 <_realloc_r+0x16>
 801511e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015122:	4611      	mov	r1, r2
 8015124:	f7fd bcfa 	b.w	8012b1c <_malloc_r>
 8015128:	b92a      	cbnz	r2, 8015136 <_realloc_r+0x24>
 801512a:	f7fd fc83 	bl	8012a34 <_free_r>
 801512e:	2400      	movs	r4, #0
 8015130:	4620      	mov	r0, r4
 8015132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015136:	f000 f840 	bl	80151ba <_malloc_usable_size_r>
 801513a:	4285      	cmp	r5, r0
 801513c:	4606      	mov	r6, r0
 801513e:	d802      	bhi.n	8015146 <_realloc_r+0x34>
 8015140:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015144:	d8f4      	bhi.n	8015130 <_realloc_r+0x1e>
 8015146:	4629      	mov	r1, r5
 8015148:	4640      	mov	r0, r8
 801514a:	f7fd fce7 	bl	8012b1c <_malloc_r>
 801514e:	4607      	mov	r7, r0
 8015150:	2800      	cmp	r0, #0
 8015152:	d0ec      	beq.n	801512e <_realloc_r+0x1c>
 8015154:	42b5      	cmp	r5, r6
 8015156:	462a      	mov	r2, r5
 8015158:	4621      	mov	r1, r4
 801515a:	bf28      	it	cs
 801515c:	4632      	movcs	r2, r6
 801515e:	f7fc fe76 	bl	8011e4e <memcpy>
 8015162:	4621      	mov	r1, r4
 8015164:	4640      	mov	r0, r8
 8015166:	f7fd fc65 	bl	8012a34 <_free_r>
 801516a:	463c      	mov	r4, r7
 801516c:	e7e0      	b.n	8015130 <_realloc_r+0x1e>

0801516e <__ascii_wctomb>:
 801516e:	4603      	mov	r3, r0
 8015170:	4608      	mov	r0, r1
 8015172:	b141      	cbz	r1, 8015186 <__ascii_wctomb+0x18>
 8015174:	2aff      	cmp	r2, #255	@ 0xff
 8015176:	d904      	bls.n	8015182 <__ascii_wctomb+0x14>
 8015178:	228a      	movs	r2, #138	@ 0x8a
 801517a:	601a      	str	r2, [r3, #0]
 801517c:	f04f 30ff 	mov.w	r0, #4294967295
 8015180:	4770      	bx	lr
 8015182:	700a      	strb	r2, [r1, #0]
 8015184:	2001      	movs	r0, #1
 8015186:	4770      	bx	lr

08015188 <fiprintf>:
 8015188:	b40e      	push	{r1, r2, r3}
 801518a:	b503      	push	{r0, r1, lr}
 801518c:	4601      	mov	r1, r0
 801518e:	ab03      	add	r3, sp, #12
 8015190:	4805      	ldr	r0, [pc, #20]	@ (80151a8 <fiprintf+0x20>)
 8015192:	f853 2b04 	ldr.w	r2, [r3], #4
 8015196:	6800      	ldr	r0, [r0, #0]
 8015198:	9301      	str	r3, [sp, #4]
 801519a:	f7ff f9af 	bl	80144fc <_vfiprintf_r>
 801519e:	b002      	add	sp, #8
 80151a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80151a4:	b003      	add	sp, #12
 80151a6:	4770      	bx	lr
 80151a8:	2400001c 	.word	0x2400001c

080151ac <abort>:
 80151ac:	b508      	push	{r3, lr}
 80151ae:	2006      	movs	r0, #6
 80151b0:	f000 f834 	bl	801521c <raise>
 80151b4:	2001      	movs	r0, #1
 80151b6:	f7ee f8fd 	bl	80033b4 <_exit>

080151ba <_malloc_usable_size_r>:
 80151ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151be:	1f18      	subs	r0, r3, #4
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	bfbc      	itt	lt
 80151c4:	580b      	ldrlt	r3, [r1, r0]
 80151c6:	18c0      	addlt	r0, r0, r3
 80151c8:	4770      	bx	lr

080151ca <_raise_r>:
 80151ca:	291f      	cmp	r1, #31
 80151cc:	b538      	push	{r3, r4, r5, lr}
 80151ce:	4605      	mov	r5, r0
 80151d0:	460c      	mov	r4, r1
 80151d2:	d904      	bls.n	80151de <_raise_r+0x14>
 80151d4:	2316      	movs	r3, #22
 80151d6:	6003      	str	r3, [r0, #0]
 80151d8:	f04f 30ff 	mov.w	r0, #4294967295
 80151dc:	bd38      	pop	{r3, r4, r5, pc}
 80151de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80151e0:	b112      	cbz	r2, 80151e8 <_raise_r+0x1e>
 80151e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80151e6:	b94b      	cbnz	r3, 80151fc <_raise_r+0x32>
 80151e8:	4628      	mov	r0, r5
 80151ea:	f000 f831 	bl	8015250 <_getpid_r>
 80151ee:	4622      	mov	r2, r4
 80151f0:	4601      	mov	r1, r0
 80151f2:	4628      	mov	r0, r5
 80151f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151f8:	f000 b818 	b.w	801522c <_kill_r>
 80151fc:	2b01      	cmp	r3, #1
 80151fe:	d00a      	beq.n	8015216 <_raise_r+0x4c>
 8015200:	1c59      	adds	r1, r3, #1
 8015202:	d103      	bne.n	801520c <_raise_r+0x42>
 8015204:	2316      	movs	r3, #22
 8015206:	6003      	str	r3, [r0, #0]
 8015208:	2001      	movs	r0, #1
 801520a:	e7e7      	b.n	80151dc <_raise_r+0x12>
 801520c:	2100      	movs	r1, #0
 801520e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015212:	4620      	mov	r0, r4
 8015214:	4798      	blx	r3
 8015216:	2000      	movs	r0, #0
 8015218:	e7e0      	b.n	80151dc <_raise_r+0x12>
	...

0801521c <raise>:
 801521c:	4b02      	ldr	r3, [pc, #8]	@ (8015228 <raise+0xc>)
 801521e:	4601      	mov	r1, r0
 8015220:	6818      	ldr	r0, [r3, #0]
 8015222:	f7ff bfd2 	b.w	80151ca <_raise_r>
 8015226:	bf00      	nop
 8015228:	2400001c 	.word	0x2400001c

0801522c <_kill_r>:
 801522c:	b538      	push	{r3, r4, r5, lr}
 801522e:	4d07      	ldr	r5, [pc, #28]	@ (801524c <_kill_r+0x20>)
 8015230:	2300      	movs	r3, #0
 8015232:	4604      	mov	r4, r0
 8015234:	4608      	mov	r0, r1
 8015236:	4611      	mov	r1, r2
 8015238:	602b      	str	r3, [r5, #0]
 801523a:	f7ee f8ab 	bl	8003394 <_kill>
 801523e:	1c43      	adds	r3, r0, #1
 8015240:	d102      	bne.n	8015248 <_kill_r+0x1c>
 8015242:	682b      	ldr	r3, [r5, #0]
 8015244:	b103      	cbz	r3, 8015248 <_kill_r+0x1c>
 8015246:	6023      	str	r3, [r4, #0]
 8015248:	bd38      	pop	{r3, r4, r5, pc}
 801524a:	bf00      	nop
 801524c:	24000d18 	.word	0x24000d18

08015250 <_getpid_r>:
 8015250:	f7ee b898 	b.w	8003384 <_getpid>

08015254 <_init>:
 8015254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015256:	bf00      	nop
 8015258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801525a:	bc08      	pop	{r3}
 801525c:	469e      	mov	lr, r3
 801525e:	4770      	bx	lr

08015260 <_fini>:
 8015260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015262:	bf00      	nop
 8015264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015266:	bc08      	pop	{r3}
 8015268:	469e      	mov	lr, r3
 801526a:	4770      	bx	lr
