
AerosentinelArgusRev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff04  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080101b0  080101b0  000111b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010260  08010260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010268  08010268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801026c  0801026c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  08010270  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011d0  24000104  08010374  00012104  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240012d4  08010374  000122d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025eaf  00000000  00000000  00012132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f6a  00000000  00000000  00037fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d18  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001664  00000000  00000000  0003ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003653f  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b1d7  00000000  00000000  0007680b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00146d71  00000000  00000000  000a19e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e8753  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b5c  00000000  00000000  001e8798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  001f02f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000104 	.word	0x24000104
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08010198 	.word	0x08010198

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000108 	.word	0x24000108
 80002e8:	08010198 	.word	0x08010198

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 fbb6 	bl	8000d50 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 f84a 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f816 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fac4 	bl	8000b78 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f0:	f000 f888 	bl	8000704 <MX_I2C1_Init>
  MX_I2C4_Init();
 80005f4:	f000 f906 	bl	8000804 <MX_I2C4_Init>
  MX_SDMMC1_MMC_Init();
 80005f8:	f000 f944 	bl	8000884 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 80005fc:	f000 f966 	bl	80008cc <MX_SPI1_Init>
  MX_SPI4_Init();
 8000600:	f000 f9ba 	bl	8000978 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8000604:	f000 fa0e 	bl	8000a24 <MX_USART2_UART_Init>
  MX_USART3_Init();
 8000608:	f000 fa58 	bl	8000abc <MX_USART3_Init>
  MX_I2C2_Init();
 800060c:	f000 f8ba 	bl	8000784 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000610:	f00f f898 	bl	800f744 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x38>

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09c      	sub	sp, #112	@ 0x70
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000622:	224c      	movs	r2, #76	@ 0x4c
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f00f fd8a 	bl	8010140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2220      	movs	r2, #32
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00f fd84 	bl	8010140 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000638:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <SystemClock_Config+0xe4>)
 800063a:	f04f 32ff 	mov.w	r2, #4294967295
 800063e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000642:	2002      	movs	r0, #2
 8000644:	f003 ff4a 	bl	80044dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <SystemClock_Config+0xe8>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a2b      	ldr	r2, [pc, #172]	@ (8000700 <SystemClock_Config+0xe8>)
 8000652:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <SystemClock_Config+0xe8>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000664:	bf00      	nop
 8000666:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <SystemClock_Config+0xe8>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800066e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000672:	d1f8      	bne.n	8000666 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000674:	2321      	movs	r3, #33	@ 0x21
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	2302      	movs	r3, #2
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068a:	2304      	movs	r3, #4
 800068c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 11;
 800068e:	230b      	movs	r3, #11
 8000690:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800069e:	230c      	movs	r3, #12
 80006a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 ff5e 	bl	8004570 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ba:	f000 fb75 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	233f      	movs	r3, #63	@ 0x3f
 80006c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006da:	2340      	movs	r3, #64	@ 0x40
 80006dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fb76 	bl	8004dd4 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80006ee:	f000 fb5b 	bl	8000da8 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3770      	adds	r7, #112	@ 0x70
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58024400 	.word	0x58024400
 8000700:	58024800 	.word	0x58024800

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_I2C1_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_I2C1_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x008080C1;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <MX_I2C1_Init+0x7c>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_I2C1_Init+0x74>)
 800071c:	2201      	movs	r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073e:	480e      	ldr	r0, [pc, #56]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000740:	f001 fba4 	bl	8001e8c <HAL_I2C_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 fb2d 	bl	8000da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000752:	f001 fc37 	bl	8001fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 fb24 	bl	8000da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_I2C1_Init+0x74>)
 8000764:	f001 fc79 	bl	800205a <HAL_I2CEx_ConfigDigitalFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 fb1b 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	24000120 	.word	0x24000120
 800077c:	40005400 	.word	0x40005400
 8000780:	008080c1 	.word	0x008080c1

08000784 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_I2C2_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <MX_I2C2_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x008080C1;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_I2C2_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	@ (8000800 <MX_I2C2_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_I2C2_Init+0x74>)
 800079c:	2201      	movs	r2, #1
 800079e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007c0:	f001 fb64 	bl	8001e8c <HAL_I2C_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007ca:	f000 faed 	bl	8000da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007d2:	f001 fbf7 	bl	8001fc4 <HAL_I2CEx_ConfigAnalogFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 fae4 	bl	8000da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007e4:	f001 fc39 	bl	800205a <HAL_I2CEx_ConfigDigitalFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 fadb 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24000174 	.word	0x24000174
 80007fc:	40005800 	.word	0x40005800
 8000800:	008080c1 	.word	0x008080c1

08000804 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_I2C4_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <MX_I2C4_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x008080C1;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <MX_I2C4_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_I2C4_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_I2C4_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_I2C4_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000840:	f001 fb24 	bl	8001e8c <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 faad 	bl	8000da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000852:	f001 fbb7 	bl	8001fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 faa4 	bl	8000da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_I2C4_Init+0x74>)
 8000864:	f001 fbf9 	bl	800205a <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 fa9b 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	240001c8 	.word	0x240001c8
 800087c:	58001c00 	.word	0x58001c00
 8000880:	008080c1 	.word	0x008080c1

08000884 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_SDMMC1_MMC_Init+0x40>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <MX_SDMMC1_MMC_Init+0x44>)
 800088c:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <MX_SDMMC1_MMC_Init+0x40>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_SDMMC1_MMC_Init+0x40>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_SDMMC1_MMC_Init+0x40>)
 800089c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008a0:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_SDMMC1_MMC_Init+0x40>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_SDMMC1_MMC_Init+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_SDMMC1_MMC_Init+0x40>)
 80008b0:	f001 fc1f 	bl	80020f2 <HAL_MMC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 80008ba:	f000 fa75 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2400021c 	.word	0x2400021c
 80008c8:	52007000 	.word	0x52007000

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <MX_SPI1_Init+0xa4>)
 80008d2:	4a28      	ldr	r2, [pc, #160]	@ (8000974 <MX_SPI1_Init+0xa8>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_SPI1_Init+0xa4>)
 80008d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <MX_SPI1_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_SPI1_Init+0xa4>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_SPI1_Init+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_SPI1_Init+0xa4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <MX_SPI1_Init+0xa4>)
 80008f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_SPI1_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_SPI1_Init+0xa4>)
 800091e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000922:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_SPI1_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_SPI1_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_SPI1_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_SPI1_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_SPI1_Init+0xa4>)
 800095c:	f007 f9d0 	bl	8007d00 <HAL_SPI_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000966:	f000 fa1f 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	24000490 	.word	0x24000490
 8000974:	40013000 	.word	0x40013000

08000978 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 800097e:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <MX_SPI4_Init+0xa8>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 8000984:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000988:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b24      	ldr	r3, [pc, #144]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 8000992:	2203      	movs	r2, #3
 8000994:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_SPI4_Init+0xa4>)
 8000a08:	f007 f97a 	bl	8007d00 <HAL_SPI_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000a12:	f000 f9c9 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	24000518 	.word	0x24000518
 8000a20:	40013400 	.word	0x40013400

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <MX_USART2_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a6e:	f007 fa86 	bl	8007f7e <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f996 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a80:	f008 fb93 	bl	80091aa <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f98d 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a92:	f008 fbc8 	bl	8009226 <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f984 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000aa2:	f008 fb49 	bl	8009138 <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f97c 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	240005a0 	.word	0x240005a0
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b74 <MX_USART3_Init+0xb8>)
 8000ac4:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000ada:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000ae0:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000ae6:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000aec:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000b04:	481a      	ldr	r0, [pc, #104]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000b06:	f008 fc1b 	bl	8009340 <HAL_USART_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8000b10:	f000 f94a 	bl	8000da8 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000b18:	f009 fb42 	bl	800a1a0 <HAL_USARTEx_SetTxFifoThreshold>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000b22:	f000 f941 	bl	8000da8 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4811      	ldr	r0, [pc, #68]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000b2a:	f009 fb77 	bl	800a21c <HAL_USARTEx_SetRxFifoThreshold>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f000 f938 	bl	8000da8 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000b3c:	f009 faba 	bl	800a0b4 <HAL_USARTEx_ConfigNSS>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8000b46:	f000 f92f 	bl	8000da8 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000b4a:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000b4c:	f009 faef 	bl	800a12e <HAL_USARTEx_DisableFifoMode>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8000b56:	f000 f927 	bl	8000da8 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART3_Init+0xb4>)
 8000b5c:	f009 fa55 	bl	800a00a <HAL_USARTEx_EnableSlaveMode>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8000b66:	f000 f91f 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	24000634 	.word	0x24000634
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	@ 0x30
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b94:	4a69      	ldr	r2, [pc, #420]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b9e:	4b67      	ldr	r3, [pc, #412]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000ba0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	4b63      	ldr	r3, [pc, #396]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb2:	4a62      	ldr	r2, [pc, #392]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bbc:	4b5f      	ldr	r3, [pc, #380]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b5c      	ldr	r3, [pc, #368]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd0:	4a5a      	ldr	r2, [pc, #360]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bda:	4b58      	ldr	r3, [pc, #352]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b54      	ldr	r3, [pc, #336]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bee:	4a53      	ldr	r2, [pc, #332]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bf8:	4b50      	ldr	r3, [pc, #320]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000bfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000c08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c16:	4b49      	ldr	r3, [pc, #292]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000c18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b45      	ldr	r3, [pc, #276]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c2a:	4a44      	ldr	r2, [pc, #272]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c34:	4b41      	ldr	r3, [pc, #260]	@ (8000d3c <MX_GPIO_Init+0x1c4>)
 8000c36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2188      	movs	r1, #136	@ 0x88
 8000c46:	483e      	ldr	r0, [pc, #248]	@ (8000d40 <MX_GPIO_Init+0x1c8>)
 8000c48:	f001 f906 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	483c      	ldr	r0, [pc, #240]	@ (8000d44 <MX_GPIO_Init+0x1cc>)
 8000c52:	f001 f901 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|HEARTBEAT_Pin|BNO055_2_RST_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f248 0114 	movw	r1, #32788	@ 0x8014
 8000c5c:	483a      	ldr	r0, [pc, #232]	@ (8000d48 <MX_GPIO_Init+0x1d0>)
 8000c5e:	f001 f8fb 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC1_RST_Pin|BNO055_1_RST_Pin|GPS_RST_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f248 0118 	movw	r1, #32792	@ 0x8018
 8000c68:	4838      	ldr	r0, [pc, #224]	@ (8000d4c <MX_GPIO_Init+0x1d4>)
 8000c6a:	f001 f8f5 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin LED2_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|LED2_Pin;
 8000c6e:	2388      	movs	r3, #136	@ 0x88
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	482e      	ldr	r0, [pc, #184]	@ (8000d40 <MX_GPIO_Init+0x1c8>)
 8000c86:	f000 ff37 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4828      	ldr	r0, [pc, #160]	@ (8000d44 <MX_GPIO_Init+0x1cc>)
 8000ca2:	f000 ff29 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT2_Pin */
  GPIO_InitStruct.Pin = SPI1_INT2_Pin;
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000caa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI1_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4822      	ldr	r0, [pc, #136]	@ (8000d44 <MX_GPIO_Init+0x1cc>)
 8000cbc:	f000 ff1c 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_INT1_Pin MPL311_INT1_Pin MPL311_INT2_Pin */
  GPIO_InitStruct.Pin = SPI1_INT1_Pin|MPL311_INT1_Pin|MPL311_INT2_Pin;
 8000cc0:	f246 0301 	movw	r3, #24577	@ 0x6001
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481c      	ldr	r0, [pc, #112]	@ (8000d48 <MX_GPIO_Init+0x1d0>)
 8000cd8:	f000 ff0e 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin HEARTBEAT_Pin BNO055_2_RST_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|HEARTBEAT_Pin|BNO055_2_RST_Pin;
 8000cdc:	f248 0314 	movw	r3, #32788	@ 0x8014
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4814      	ldr	r0, [pc, #80]	@ (8000d48 <MX_GPIO_Init+0x1d0>)
 8000cf6:	f000 feff 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_RST_Pin BNO055_1_RST_Pin GPS_RST_Pin */
  GPIO_InitStruct.Pin = SDMMC1_RST_Pin|BNO055_1_RST_Pin|GPS_RST_Pin;
 8000cfa:	f248 0318 	movw	r3, #32792	@ 0x8018
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <MX_GPIO_Init+0x1d4>)
 8000d14:	f000 fef0 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO055_1_INT_Pin */
  GPIO_InitStruct.Pin = BNO055_1_INT_Pin;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BNO055_1_INT_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_GPIO_Init+0x1d4>)
 8000d2e:	f000 fee3 	bl	8001af8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	@ 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58021000 	.word	0x58021000
 8000d44:	58020800 	.word	0x58020800
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58020c00 	.word	0x58020c00

08000d50 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d62:	f000 fe51 	bl	8001a08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d72:	231f      	movs	r3, #31
 8000d74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d76:	2387      	movs	r3, #135	@ 0x87
 8000d78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d86:	2301      	movs	r3, #1
 8000d88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d92:	463b      	mov	r3, r7
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fe6f 	bl	8001a78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d9a:	2004      	movs	r0, #4
 8000d9c:	f000 fe4c 	bl	8001a38 <HAL_MPU_Enable>

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dc0:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	58024400 	.word	0x58024400

08000de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0be      	sub	sp, #248	@ 0xf8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	22c0      	movs	r2, #192	@ 0xc0
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00f f999 	bl	8010140 <memset>
  if(hi2c->Instance==I2C1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a73      	ldr	r2, [pc, #460]	@ (8000fe0 <HAL_I2C_MspInit+0x1f8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d146      	bne.n	8000ea6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e18:	f04f 0208 	mov.w	r2, #8
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 fb5c 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e3a:	f7ff ffb5 	bl	8000da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	4b69      	ldr	r3, [pc, #420]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000e40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e44:	4a67      	ldr	r2, [pc, #412]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e4e:	4b65      	ldr	r3, [pc, #404]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5c:	23c0      	movs	r3, #192	@ 0xc0
 8000e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e62:	2312      	movs	r3, #18
 8000e64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e74:	2304      	movs	r3, #4
 8000e76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4859      	ldr	r0, [pc, #356]	@ (8000fe8 <HAL_I2C_MspInit+0x200>)
 8000e82:	f000 fe39 	bl	8001af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e86:	4b57      	ldr	r3, [pc, #348]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000e88:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e8c:	4a55      	ldr	r2, [pc, #340]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000e8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e92:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e96:	4b53      	ldr	r3, [pc, #332]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000e98:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000ea4:	e098      	b.n	8000fd8 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a50      	ldr	r2, [pc, #320]	@ (8000fec <HAL_I2C_MspInit+0x204>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d147      	bne.n	8000f40 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000eb0:	f04f 0208 	mov.w	r2, #8
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 fb10 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000ed2:	f7ff ff69 	bl	8000da8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b43      	ldr	r3, [pc, #268]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000ed8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000edc:	4a41      	ldr	r2, [pc, #260]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000ee8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ef4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4833      	ldr	r0, [pc, #204]	@ (8000fe8 <HAL_I2C_MspInit+0x200>)
 8000f1c:	f000 fdec 	bl	8001af8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f20:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000f22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f26:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000f28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f2c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f30:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000f32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
}
 8000f3e:	e04b      	b.n	8000fd8 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff0 <HAL_I2C_MspInit+0x208>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d146      	bne.n	8000fd8 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f4a:	f04f 0210 	mov.w	r2, #16
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 fac3 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000f6c:	f7ff ff1c 	bl	8000da8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f76:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f96:	2312      	movs	r3, #18
 8000f98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <HAL_I2C_MspInit+0x20c>)
 8000fb6:	f000 fd9f 	bl	8001af8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000fbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_I2C_MspInit+0x1fc>)
 8000fcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	37f8      	adds	r7, #248	@ 0xf8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58020400 	.word	0x58020400
 8000fec:	40005800 	.word	0x40005800
 8000ff0:	58001c00 	.word	0x58001c00
 8000ff4:	58020c00 	.word	0x58020c00

08000ff8 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0bc      	sub	sp, #240	@ 0xf0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	22c0      	movs	r2, #192	@ 0xc0
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f00f f891 	bl	8010140 <memset>
  if(hmmc->Instance==SDMMC1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_MMC_MspInit+0x158>)
 8001024:	4293      	cmp	r3, r2
 8001026:	f040 808f 	bne.w	8001148 <HAL_MMC_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800102a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001036:	2300      	movs	r3, #0
 8001038:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fa54 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 800104a:	f7ff fead 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 8001050:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001054:	4a3f      	ldr	r2, [pc, #252]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 8001056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800105a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800105e:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 8001060:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 800106e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001072:	4a38      	ldr	r2, [pc, #224]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800107c:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 800107e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 800108c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001090:	4a30      	ldr	r2, [pc, #192]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800109a:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 800109c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 80010aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010ae:	4a29      	ldr	r2, [pc, #164]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010b8:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <HAL_MMC_MspInit+0x15c>)
 80010ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80010c6:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 80010ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010e0:	230c      	movs	r3, #12
 80010e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ea:	4619      	mov	r1, r3
 80010ec:	481a      	ldr	r0, [pc, #104]	@ (8001158 <HAL_MMC_MspInit+0x160>)
 80010ee:	f000 fd03 	bl	8001af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800110a:	230c      	movs	r3, #12
 800110c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001110:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001114:	4619      	mov	r1, r3
 8001116:	4811      	ldr	r0, [pc, #68]	@ (800115c <HAL_MMC_MspInit+0x164>)
 8001118:	f000 fcee 	bl	8001af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800111c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001120:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001136:	230c      	movs	r3, #12
 8001138:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <HAL_MMC_MspInit+0x168>)
 8001144:	f000 fcd8 	bl	8001af8 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001148:	bf00      	nop
 800114a:	37f0      	adds	r7, #240	@ 0xf0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	52007000 	.word	0x52007000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020800 	.word	0x58020800
 800115c:	58020c00 	.word	0x58020c00
 8001160:	58020400 	.word	0x58020400

08001164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0bc      	sub	sp, #240	@ 0xf0
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	22c0      	movs	r2, #192	@ 0xc0
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00e ffdb 	bl	8010140 <memset>
  if(hspi->Instance==SPI1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a4c      	ldr	r2, [pc, #304]	@ (80012c0 <HAL_SPI_MspInit+0x15c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d145      	bne.n	8001220 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001194:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 f99f 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80011b4:	f7ff fdf8 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011b8:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 80011ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80011be:	4a41      	ldr	r2, [pc, #260]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 80011c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80011c8:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 80011ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80011ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 80011d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011dc:	4a39      	ldr	r2, [pc, #228]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 80011e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23e0      	movs	r3, #224	@ 0xe0
 80011f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120c:	2305      	movs	r3, #5
 800120e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001216:	4619      	mov	r1, r3
 8001218:	482b      	ldr	r0, [pc, #172]	@ (80012c8 <HAL_SPI_MspInit+0x164>)
 800121a:	f000 fc6d 	bl	8001af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800121e:	e04a      	b.n	80012b6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a29      	ldr	r2, [pc, #164]	@ (80012cc <HAL_SPI_MspInit+0x168>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d145      	bne.n	80012b6 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800122a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f004 f953 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 800124c:	f7ff fdac 	bl	8000da8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 8001252:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001256:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 8001258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800125c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 8001262:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 8001270:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001274:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_SPI_MspInit+0x160>)
 8001280:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800128c:	2364      	movs	r3, #100	@ 0x64
 800128e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80012a4:	2305      	movs	r3, #5
 80012a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <HAL_SPI_MspInit+0x16c>)
 80012b2:	f000 fc21 	bl	8001af8 <HAL_GPIO_Init>
}
 80012b6:	bf00      	nop
 80012b8:	37f0      	adds	r7, #240	@ 0xf0
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40013000 	.word	0x40013000
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020000 	.word	0x58020000
 80012cc:	40013400 	.word	0x40013400
 80012d0:	58021000 	.word	0x58021000

080012d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0ba      	sub	sp, #232	@ 0xe8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	22c0      	movs	r2, #192	@ 0xc0
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00e ff23 	bl	8010140 <memset>
  if(huart->Instance==USART2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <HAL_UART_MspInit+0xc4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d145      	bne.n	8001390 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001304:	f04f 0202 	mov.w	r2, #2
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f004 f8e6 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001326:	f7ff fd3f 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <HAL_UART_MspInit+0xc8>)
 800132c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001330:	4a1a      	ldr	r2, [pc, #104]	@ (800139c <HAL_UART_MspInit+0xc8>)
 8001332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001336:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <HAL_UART_MspInit+0xc8>)
 800133c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <HAL_UART_MspInit+0xc8>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800134e:	4a13      	ldr	r2, [pc, #76]	@ (800139c <HAL_UART_MspInit+0xc8>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001358:	4b10      	ldr	r3, [pc, #64]	@ (800139c <HAL_UART_MspInit+0xc8>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001366:	2360      	movs	r3, #96	@ 0x60
 8001368:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137e:	2307      	movs	r3, #7
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <HAL_UART_MspInit+0xcc>)
 800138c:	f000 fbb4 	bl	8001af8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001390:	bf00      	nop
 8001392:	37e8      	adds	r7, #232	@ 0xe8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40004400 	.word	0x40004400
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020c00 	.word	0x58020c00

080013a4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0bc      	sub	sp, #240	@ 0xf0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	22c0      	movs	r2, #192	@ 0xc0
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00e febb 	bl	8010140 <memset>
  if(husart->Instance==USART3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a39      	ldr	r2, [pc, #228]	@ (80014b4 <HAL_USART_MspInit+0x110>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d16b      	bne.n	80014ac <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d4:	f04f 0202 	mov.w	r2, #2
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 f87e 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 80013f6:	f7ff fcd7 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 80013fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001400:	4a2d      	ldr	r2, [pc, #180]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 8001402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001406:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800140a:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 800140c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 800141a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800141e:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 800142a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 8001438:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800143c:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_USART_MspInit+0x114>)
 8001448:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800146e:	2307      	movs	r3, #7
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001478:	4619      	mov	r1, r3
 800147a:	4810      	ldr	r0, [pc, #64]	@ (80014bc <HAL_USART_MspInit+0x118>)
 800147c:	f000 fb3c 	bl	8001af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001480:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8001484:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800149a:	2307      	movs	r3, #7
 800149c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <HAL_USART_MspInit+0x11c>)
 80014a8:	f000 fb26 	bl	8001af8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	37f0      	adds	r7, #240	@ 0xf0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40004800 	.word	0x40004800
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58020400 	.word	0x58020400
 80014c0:	58020c00 	.word	0x58020c00

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 f921 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <OTG_HS_IRQHandler+0x10>)
 800152a:	f001 fe4c 	bl	80031c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24000b78 	.word	0x24000b78

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800153c:	4b32      	ldr	r3, [pc, #200]	@ (8001608 <SystemInit+0xd0>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001542:	4a31      	ldr	r2, [pc, #196]	@ (8001608 <SystemInit+0xd0>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154c:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <SystemInit+0xd4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	2b02      	cmp	r3, #2
 8001556:	d807      	bhi.n	8001568 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001558:	4b2c      	ldr	r3, [pc, #176]	@ (800160c <SystemInit+0xd4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 030f 	bic.w	r3, r3, #15
 8001560:	4a2a      	ldr	r2, [pc, #168]	@ (800160c <SystemInit+0xd4>)
 8001562:	f043 0303 	orr.w	r3, r3, #3
 8001566:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <SystemInit+0xd8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a28      	ldr	r2, [pc, #160]	@ (8001610 <SystemInit+0xd8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001574:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <SystemInit+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <SystemInit+0xd8>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4924      	ldr	r1, [pc, #144]	@ (8001610 <SystemInit+0xd8>)
 8001580:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <SystemInit+0xdc>)
 8001582:	4013      	ands	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <SystemInit+0xd4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <SystemInit+0xd4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 030f 	bic.w	r3, r3, #15
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <SystemInit+0xd4>)
 800159c:	f043 0303 	orr.w	r3, r3, #3
 80015a0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <SystemInit+0xd8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015a8:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <SystemInit+0xd8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <SystemInit+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b4:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <SystemInit+0xd8>)
 80015b6:	4a18      	ldr	r2, [pc, #96]	@ (8001618 <SystemInit+0xe0>)
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <SystemInit+0xd8>)
 80015bc:	4a17      	ldr	r2, [pc, #92]	@ (800161c <SystemInit+0xe4>)
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <SystemInit+0xd8>)
 80015c2:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <SystemInit+0xe8>)
 80015c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <SystemInit+0xd8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <SystemInit+0xd8>)
 80015ce:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <SystemInit+0xe8>)
 80015d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <SystemInit+0xd8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <SystemInit+0xd8>)
 80015da:	4a11      	ldr	r2, [pc, #68]	@ (8001620 <SystemInit+0xe8>)
 80015dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <SystemInit+0xd8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <SystemInit+0xd8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <SystemInit+0xd8>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f0:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <SystemInit+0xd8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <SystemInit+0xec>)
 80015f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00
 800160c:	52002000 	.word	0x52002000
 8001610:	58024400 	.word	0x58024400
 8001614:	eaf6ed7f 	.word	0xeaf6ed7f
 8001618:	02020200 	.word	0x02020200
 800161c:	01ff0000 	.word	0x01ff0000
 8001620:	01010280 	.word	0x01010280
 8001624:	52004000 	.word	0x52004000

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800162c:	f7ff ff84 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001632:	490d      	ldr	r1, [pc, #52]	@ (8001668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001648:	4c0a      	ldr	r4, [pc, #40]	@ (8001674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001656:	f00e fd7b 	bl	8010150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7fe ffbf 	bl	80005dc <main>
  bx  lr
 800165e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001664:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001668:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 800166c:	08010270 	.word	0x08010270
  ldr r2, =_sbss
 8001670:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8001674:	240012d4 	.word	0x240012d4

08001678 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 f980 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001688:	f003 fd5a 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_Init+0x68>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	4913      	ldr	r1, [pc, #76]	@ (80016e8 <HAL_Init+0x6c>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016a6:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HAL_Init+0x6c>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <HAL_Init+0x70>)
 80016be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_Init+0x74>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c6:	200f      	movs	r0, #15
 80016c8:	f000 f814 	bl	80016f4 <HAL_InitTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e002      	b.n	80016dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016d6:	f7ff fb6d 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	58024400 	.word	0x58024400
 80016e8:	080101f4 	.word	0x080101f4
 80016ec:	24000004 	.word	0x24000004
 80016f0:	24000000 	.word	0x24000000

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_InitTick+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e021      	b.n	800174c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_InitTick+0x64>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_InitTick+0x60>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f965 	bl	80019ee <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 f92f 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	@ (800175c <HAL_InitTick+0x68>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2400000c 	.word	0x2400000c
 8001758:	24000000 	.word	0x24000000
 800175c:	24000008 	.word	0x24000008

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2400000c 	.word	0x2400000c
 8001784:	24000694 	.word	0x24000694

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	24000694 	.word	0x24000694

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2400000c 	.word	0x2400000c

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	05fa0000 	.word	0x05fa0000

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	@ (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff40 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff90 	bl	80018dc <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5f 	bl	8001888 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff33 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffa4 	bl	8001944 <SysTick_Config>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a0c:	f3bf 8f5f 	dmb	sy
}
 8001a10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <HAL_MPU_Disable+0x28>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <HAL_MPU_Disable+0x28>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_MPU_Disable+0x2c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	e000ed90 	.word	0xe000ed90

08001a38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_MPU_Enable+0x38>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_MPU_Enable+0x3c>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	4a09      	ldr	r2, [pc, #36]	@ (8001a74 <HAL_MPU_Enable+0x3c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a56:	f3bf 8f4f 	dsb	sy
}
 8001a5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a5c:	f3bf 8f6f 	isb	sy
}
 8001a60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed90 	.word	0xe000ed90
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	785a      	ldrb	r2, [r3, #1]
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7b1b      	ldrb	r3, [r3, #12]
 8001aa0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7adb      	ldrb	r3, [r3, #11]
 8001aa6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7a9b      	ldrb	r3, [r3, #10]
 8001aae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ab0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7b5b      	ldrb	r3, [r3, #13]
 8001ab6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ab8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7b9b      	ldrb	r3, [r3, #14]
 8001abe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ac0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7bdb      	ldrb	r3, [r3, #15]
 8001ac6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ac8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7a5b      	ldrb	r3, [r3, #9]
 8001ace:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7a1b      	ldrb	r3, [r3, #8]
 8001ad6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ad8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ae2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae4:	6113      	str	r3, [r2, #16]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed90 	.word	0xe000ed90

08001af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b06:	4b89      	ldr	r3, [pc, #548]	@ (8001d2c <HAL_GPIO_Init+0x234>)
 8001b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b0a:	e194      	b.n	8001e36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8186 	beq.w	8001e30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d005      	beq.n	8001b3c <HAL_GPIO_Init+0x44>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d130      	bne.n	8001b9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b72:	2201      	movs	r2, #1
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f003 0201 	and.w	r2, r3, #1
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d017      	beq.n	8001bda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d123      	bne.n	8001c2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	69b9      	ldr	r1, [r7, #24]
 8001c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0203 	and.w	r2, r3, #3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80e0 	beq.w	8001e30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c70:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <HAL_GPIO_Init+0x238>)
 8001c72:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001c76:	4a2e      	ldr	r2, [pc, #184]	@ (8001d30 <HAL_GPIO_Init+0x238>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001c80:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <HAL_GPIO_Init+0x238>)
 8001c82:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a29      	ldr	r2, [pc, #164]	@ (8001d34 <HAL_GPIO_Init+0x23c>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a20      	ldr	r2, [pc, #128]	@ (8001d38 <HAL_GPIO_Init+0x240>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d052      	beq.n	8001d60 <HAL_GPIO_Init+0x268>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d3c <HAL_GPIO_Init+0x244>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <HAL_GPIO_Init+0x248>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02b      	beq.n	8001d22 <HAL_GPIO_Init+0x22a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <HAL_GPIO_Init+0x24c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x226>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d48 <HAL_GPIO_Init+0x250>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x222>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_GPIO_Init+0x254>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x21e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <HAL_GPIO_Init+0x258>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x21a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a19      	ldr	r2, [pc, #100]	@ (8001d54 <HAL_GPIO_Init+0x25c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x216>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a18      	ldr	r2, [pc, #96]	@ (8001d58 <HAL_GPIO_Init+0x260>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x212>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	@ (8001d5c <HAL_GPIO_Init+0x264>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x20e>
 8001d02:	2309      	movs	r3, #9
 8001d04:	e02d      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d06:	230a      	movs	r3, #10
 8001d08:	e02b      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	e029      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d0e:	2307      	movs	r3, #7
 8001d10:	e027      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e025      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e023      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e021      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e01f      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e01d      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e01b      	b.n	8001d62 <HAL_GPIO_Init+0x26a>
 8001d2a:	bf00      	nop
 8001d2c:	58000080 	.word	0x58000080
 8001d30:	58024400 	.word	0x58024400
 8001d34:	58000400 	.word	0x58000400
 8001d38:	58020000 	.word	0x58020000
 8001d3c:	58020400 	.word	0x58020400
 8001d40:	58020800 	.word	0x58020800
 8001d44:	58020c00 	.word	0x58020c00
 8001d48:	58021000 	.word	0x58021000
 8001d4c:	58021400 	.word	0x58021400
 8001d50:	58021800 	.word	0x58021800
 8001d54:	58021c00 	.word	0x58021c00
 8001d58:	58022000 	.word	0x58022000
 8001d5c:	58022400 	.word	0x58022400
 8001d60:	2300      	movs	r3, #0
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	f002 0203 	and.w	r2, r2, #3
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d72:	4938      	ldr	r1, [pc, #224]	@ (8001e54 <HAL_GPIO_Init+0x35c>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3301      	adds	r3, #1
 8001e34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f ae63 	bne.w	8001b0c <HAL_GPIO_Init+0x14>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3724      	adds	r7, #36	@ 0x24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	58000400 	.word	0x58000400

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e74:	e003      	b.n	8001e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e08b      	b.n	8001fb6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe ff98 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2224      	movs	r2, #36	@ 0x24
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001edc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	e006      	b.n	8001f14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d108      	bne.n	8001f2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	e007      	b.n	8001f3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_I2C_Init+0x134>)
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69d9      	ldr	r1, [r3, #28]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	02008000 	.word	0x02008000

08001fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d138      	bne.n	800204c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e032      	b.n	800204e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	@ 0x24
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002016:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b20      	cmp	r3, #32
 800206e:	d139      	bne.n	80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800207a:	2302      	movs	r3, #2
 800207c:	e033      	b.n	80020e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2224      	movs	r2, #36	@ 0x24
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e031      	b.n	8002168 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe ff6e 	bl	8000ff8 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2203      	movs	r2, #3
 8002120:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f823 	bl	8002170 <HAL_MMC_InitCard>
 800212a:	4603      	mov	r3, r0
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e019      	b.n	8002168 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fb46 	bl	80027e8 <HAL_MMC_ConfigWideBusOperation>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b08d      	sub	sp, #52	@ 0x34
 8002174:	af02      	add	r7, sp, #8
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8002188:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f004 fb6a 	bl	8006868 <HAL_RCCEx_GetPeriphCLKFreq>
 8002194:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e070      	b.n	8002292 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	4a39      	ldr	r2, [pc, #228]	@ (800229c <HAL_MMC_InitCard+0x12c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681c      	ldr	r4, [r3, #0]
 80021c2:	466a      	mov	r2, sp
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d6:	4620      	mov	r0, r4
 80021d8:	f008 f8a8 	bl	800a32c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f008 f8da 	bl	800a39a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80021fe:	4a28      	ldr	r2, [pc, #160]	@ (80022a0 <HAL_MMC_InitCard+0x130>)
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	3301      	adds	r3, #1
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fac9 	bl	80017a0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fcb4 	bl	8002b7c <MMC_PowerON>
 8002214:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00b      	beq.n	8002234 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e02e      	b.n	8002292 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fba3 	bl	8002980 <MMC_InitCard>
 800223a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e01b      	b.n	8002292 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002262:	4618      	mov	r0, r3
 8002264:	f008 f92e 	bl	800a4c4 <SDMMC_CmdBlockLength>
 8002268:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00f      	beq.n	8002290 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0b      	ldr	r2, [pc, #44]	@ (80022a4 <HAL_MMC_InitCard+0x134>)
 8002276:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	372c      	adds	r7, #44	@ 0x2c
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}
 800229a:	bf00      	nop
 800229c:	014f8b59 	.word	0x014f8b59
 80022a0:	00012110 	.word	0x00012110
 80022a4:	1fe00fff 	.word	0x1fe00fff

080022a8 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	0f9b      	lsrs	r3, r3, #30
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	0e1b      	lsrs	r3, r3, #24
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	b2da      	uxtb	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230c:	0d1b      	lsrs	r3, r3, #20
 800230e:	b29a      	uxth	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	b2da      	uxtb	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	0bdb      	lsrs	r3, r3, #15
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	b2da      	uxtb	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	0b9b      	lsrs	r3, r3, #14
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	0b1b      	lsrs	r3, r3, #12
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8002374:	f107 010c 	add.w	r1, r7, #12
 8002378:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800237c:	22d4      	movs	r2, #212	@ 0xd4
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fc4c 	bl	8002c1c <MMC_ReadExtCSD>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e129      	b.n	80025e2 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	2b00      	cmp	r3, #0
 8002394:	d163      	bne.n	800245e <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023a6:	0f92      	lsrs	r2, r2, #30
 80023a8:	431a      	orrs	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b2:	0edb      	lsrs	r3, r3, #27
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	0e1b      	lsrs	r3, r3, #24
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	0d5b      	lsrs	r3, r3, #21
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	0c9b      	lsrs	r3, r3, #18
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	0bdb      	lsrs	r3, r3, #15
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	b2da      	uxtb	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7e1b      	ldrb	r3, [r3, #24]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	3302      	adds	r3, #2
 800241e:	2201      	movs	r2, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002428:	fb03 f202 	mul.w	r2, r3, r2
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	7a1b      	ldrb	r3, [r3, #8]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	2201      	movs	r2, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	649a      	str	r2, [r3, #72]	@ 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800244a:	0a52      	lsrs	r2, r2, #9
 800244c:	fb03 f202 	mul.w	r2, r3, r2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245a:	651a      	str	r2, [r3, #80]	@ 0x50
 800245c:	e023      	b.n	80024a6 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10f      	bne.n	8002486 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247a:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	651a      	str	r2, [r3, #80]	@ 0x50
 8002484:	e00f      	b.n	80024a6 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a58      	ldr	r2, [pc, #352]	@ (80025ec <HAL_MMC_GetCardCSD+0x344>)
 800248c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002492:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e09d      	b.n	80025e2 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024aa:	0b9b      	lsrs	r3, r3, #14
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	09db      	lsrs	r3, r3, #7
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024de:	0fdb      	lsrs	r3, r3, #31
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	0f5b      	lsrs	r3, r3, #29
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	b2da      	uxtb	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250e:	0d9b      	lsrs	r3, r3, #22
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	b2da      	uxtb	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002520:	0d5b      	lsrs	r3, r3, #21
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	b2da      	uxtb	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002550:	0bdb      	lsrs	r3, r3, #15
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002564:	0b9b      	lsrs	r3, r3, #14
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002578:	0b5b      	lsrs	r3, r3, #13
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258c:	0b1b      	lsrs	r3, r3, #12
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a0:	0a9b      	lsrs	r3, r3, #10
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	1fe00fff 	.word	0x1fe00fff

080025f0 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08e      	sub	sp, #56	@ 0x38
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff f8c4 	bl	8001788 <HAL_GetTick>
 8002600:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0de      	b.n	80027d6 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 80d7 	bne.w	80027d4 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2203      	movs	r2, #3
 8002630:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8002646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800264a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800264c:	2390      	movs	r3, #144	@ 0x90
 800264e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002650:	2302      	movs	r3, #2
 8002652:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f107 0210 	add.w	r2, r7, #16
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f007 ff00 	bl	800a46c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800267a:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f008 f84c 	bl	800a720 <SDMMC_CmdSendEXTCSD>
 8002688:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 800268a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268c:	2b00      	cmp	r3, #0
 800268e:	d045      	beq.n	800271c <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a52      	ldr	r2, [pc, #328]	@ (80027e0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800269c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269e:	431a      	orrs	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e092      	b.n	80027d6 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80026be:	2300      	movs	r3, #0
 80026c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c2:	e00d      	b.n	80026e0 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f007 fe59 	bl	800a380 <SDMMC_ReadFIFO>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d2:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	3304      	adds	r3, #4
 80026d8:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < 8U; count++)
 80026da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026dc:	3301      	adds	r3, #1
 80026de:	637b      	str	r3, [r7, #52]	@ 0x34
 80026e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e2:	2b07      	cmp	r3, #7
 80026e4:	d9ee      	bls.n	80026c4 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80026e6:	f7ff f84f 	bl	8001788 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d902      	bls.n	80026fc <HAL_MMC_GetCardExtCSD+0x10c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a37      	ldr	r2, [pc, #220]	@ (80027e0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002702:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002708:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e05c      	b.n	80027d6 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002722:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0c2      	beq.n	80026b0 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002738:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a24      	ldr	r2, [pc, #144]	@ (80027e0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800274e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002754:	f043 0208 	orr.w	r2, r3, #8
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e036      	b.n	80027d6 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00f      	beq.n	8002796 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a19      	ldr	r2, [pc, #100]	@ (80027e0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002782:	f043 0202 	orr.w	r2, r3, #2
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e01f      	b.n	80027d6 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00f      	beq.n	80027c4 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80027aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e008      	b.n	80027d6 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a06      	ldr	r2, [pc, #24]	@ (80027e4 <HAL_MMC_GetCardExtCSD+0x1f4>)
 80027ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3738      	adds	r7, #56	@ 0x38
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	1fe00fff 	.word	0x1fe00fff
 80027e4:	18000f3a 	.word	0x18000f3a

080027e8 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b08c      	sub	sp, #48	@ 0x30
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d014      	beq.n	8002836 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 800281a:	2204      	movs	r2, #4
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 faf0 	bl	8002e04 <MMC_PwrClassUpdate>
 8002824:	6238      	str	r0, [r7, #32]
 8002826:	e00c      	b.n	8002842 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8002828:	2202      	movs	r2, #2
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fae9 	bl	8002e04 <MMC_PwrClassUpdate>
 8002832:	6238      	str	r0, [r7, #32]
 8002834:	e005      	b.n	8002842 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8002836:	2201      	movs	r2, #1
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fae2 	bl	8002e04 <MMC_PwrClassUpdate>
 8002840:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d17b      	bne.n	8002940 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800284e:	d107      	bne.n	8002860 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4946      	ldr	r1, [pc, #280]	@ (8002970 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8002856:	4618      	mov	r0, r3
 8002858:	f007 ff3f 	bl	800a6da <SDMMC_CmdSwitch>
 800285c:	6238      	str	r0, [r7, #32]
 800285e:	e019      	b.n	8002894 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002866:	d107      	bne.n	8002878 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4941      	ldr	r1, [pc, #260]	@ (8002974 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 800286e:	4618      	mov	r0, r3
 8002870:	f007 ff33 	bl	800a6da <SDMMC_CmdSwitch>
 8002874:	6238      	str	r0, [r7, #32]
 8002876:	e00d      	b.n	8002894 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	493d      	ldr	r1, [pc, #244]	@ (8002978 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8002884:	4618      	mov	r0, r3
 8002886:	f007 ff28 	bl	800a6da <SDMMC_CmdSwitch>
 800288a:	6238      	str	r0, [r7, #32]
 800288c:	e002      	b.n	8002894 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 800288e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002892:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d152      	bne.n	8002940 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800289a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f007 fed1 	bl	800a654 <SDMMC_CmdSendStatus>
 80028b2:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d112      	bne.n	80028e0 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f007 fdc0 	bl	800a446 <SDMMC_GetResponse>
 80028c6:	61f8      	str	r0, [r7, #28]
        count--;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	3b01      	subs	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <HAL_MMC_ConfigWideBusOperation+0xfa>
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e0      	bne.n	80028a0 <HAL_MMC_ConfigWideBusOperation+0xb8>
 80028de:	e000      	b.n	80028e2 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 80028e0:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d025      	beq.n	8002934 <HAL_MMC_ConfigWideBusOperation+0x14c>
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d122      	bne.n	8002934 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80028f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028fc:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 80028fe:	e01f      	b.n	8002940 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f107 0408 	add.w	r4, r7, #8
 8002906:	1d1d      	adds	r5, r3, #4
 8002908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681c      	ldr	r4, [r3, #0]
 8002918:	466a      	mov	r2, sp
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002922:	e882 0003 	stmia.w	r2, {r0, r1}
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292c:	4620      	mov	r0, r4
 800292e:	f007 fcfd 	bl	800a32c <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8002932:	e005      	b.n	8002940 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 800293a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800293e:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <HAL_MMC_ConfigWideBusOperation+0x194>)
 8002954:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3728      	adds	r7, #40	@ 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bdb0      	pop	{r4, r5, r7, pc}
 8002970:	03b70200 	.word	0x03b70200
 8002974:	03b70100 	.word	0x03b70100
 8002978:	03b70000 	.word	0x03b70000
 800297c:	1fe00fff 	.word	0x1fe00fff

08002980 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b096      	sub	sp, #88	@ 0x58
 8002984:	af02      	add	r7, sp, #8
 8002986:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8002988:	2302      	movs	r3, #2
 800298a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f007 fd12 	bl	800a3bc <SDMMC_GetPowerState>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 800299e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029a2:	e0e6      	b.n	8002b72 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f007 fdef 	bl	800a58c <SDMMC_CmdSendCID>
 80029ae:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80029b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MMC_InitCard+0x3a>
  {
    return errorstate;
 80029b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b8:	e0db      	b.n	8002b72 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f007 fd40 	bl	800a446 <SDMMC_GetResponse>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	665a      	str	r2, [r3, #100]	@ 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2104      	movs	r1, #4
 80029d2:	4618      	mov	r0, r3
 80029d4:	f007 fd37 	bl	800a446 <SDMMC_GetResponse>
 80029d8:	4602      	mov	r2, r0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2108      	movs	r1, #8
 80029e4:	4618      	mov	r0, r3
 80029e6:	f007 fd2e 	bl	800a446 <SDMMC_GetResponse>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	210c      	movs	r1, #12
 80029f6:	4618      	mov	r0, r3
 80029f8:	f007 fd25 	bl	800a446 <SDMMC_GetResponse>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f007 fdfc 	bl	800a60a <SDMMC_CmdSetRelAddMmc>
 8002a12:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MMC_InitCard+0x9e>
  {
    return errorstate;
 8002a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a1c:	e0a9      	b.n	8002b72 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8002a1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f007 fdc9 	bl	800a5ca <SDMMC_CmdSendCSD>
 8002a38:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8002a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a42:	e096      	b.n	8002b72 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f007 fcfb 	bl	800a446 <SDMMC_GetResponse>
 8002a50:	4602      	mov	r2, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f007 fcf2 	bl	800a446 <SDMMC_GetResponse>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f007 fce9 	bl	800a446 <SDMMC_GetResponse>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	210c      	movs	r1, #12
 8002a80:	4618      	mov	r0, r3
 8002a82:	f007 fce0 	bl	800a446 <SDMMC_GetResponse>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2104      	movs	r1, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f007 fcd7 	bl	800a446 <SDMMC_GetResponse>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	0d1a      	lsrs	r2, r3, #20
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f007 fd2c 	bl	800a50a <SDMMC_CmdSelDesel>
 8002ab2:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MMC_InitCard+0x13e>
  {
    return errorstate;
 8002aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002abc:	e059      	b.n	8002b72 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fbef 	bl	80022a8 <HAL_MMC_GetCardCSD>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad4:	e04d      	b.n	8002b72 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f007 fdb6 	bl	800a654 <SDMMC_CmdSendStatus>
 8002ae8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	635a      	str	r2, [r3, #52]	@ 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3374      	adds	r3, #116	@ 0x74
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fd72 	bl	80025f0 <HAL_MMC_GetCardExtCSD>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b16:	e02c      	b.n	8002b72 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	f007 fd95 	bl	800a654 <SDMMC_CmdSendStatus>
 8002b2a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f107 0408 	add.w	r4, r7, #8
 8002b44:	1d1d      	adds	r5, r3, #4
 8002b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b4a:	682b      	ldr	r3, [r5, #0]
 8002b4c:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681c      	ldr	r4, [r3, #0]
 8002b56:	466a      	mov	r2, sp
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b60:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f007 fbde 	bl	800a32c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3750      	adds	r7, #80	@ 0x50
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b7c <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f007 fcdb 	bl	800a550 <SDMMC_CmdGoIdleState>
 8002b9a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d027      	beq.n	8002bf2 <MMC_PowerON+0x76>
  {
    return errorstate;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	e034      	b.n	8002c10 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	60ba      	str	r2, [r7, #8]
 8002bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8002bb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb8:	e02a      	b.n	8002c10 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4916      	ldr	r1, [pc, #88]	@ (8002c18 <MMC_PowerON+0x9c>)
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f007 fd6a 	bl	800a69a <SDMMC_CmdOpCondition>
 8002bc6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002bce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002bd2:	e01d      	b.n	8002c10 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f007 fc33 	bl	800a446 <SDMMC_GetResponse>
 8002be0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	0fdb      	lsrs	r3, r3, #31
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <MMC_PowerON+0x72>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <MMC_PowerON+0x74>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0d6      	beq.n	8002ba6 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	0e1b      	lsrs	r3, r3, #24
 8002bfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bfe:	d103      	bne.n	8002c08 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c06:	e002      	b.n	8002c0e <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	c0ff8000 	.word	0xc0ff8000

08002c1c <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b090      	sub	sp, #64	@ 0x40
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7fe fdac 	bl	8001788 <HAL_GetTick>
 8002c30:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8002c4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c4e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002c50:	2390      	movs	r3, #144	@ 0x90
 8002c52:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f107 0214 	add.w	r2, r7, #20
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f007 fbfe 	bl	800a46c <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f007 fd52 	bl	800a720 <SDMMC_CmdSendEXTCSD>
 8002c7c:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d04e      	beq.n	8002d22 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5c      	ldr	r2, [pc, #368]	@ (8002dfc <MMC_ReadExtCSD+0x1e0>)
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	431a      	orrs	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0a6      	b.n	8002df2 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01c      	beq.n	8002cec <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb6:	e013      	b.n	8002ce0 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f007 fb5f 	bl	800a380 <SDMMC_ReadFIFO>
 8002cc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8002cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc8:	4413      	add	r3, r2
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	0892      	lsrs	r2, r2, #2
 8002cce:	b292      	uxth	r2, r2
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d102      	bne.n	8002cda <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cd8:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8002cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cdc:	3301      	adds	r3, #1
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce2:	2b07      	cmp	r3, #7
 8002ce4:	d9e8      	bls.n	8002cb8 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	3308      	adds	r3, #8
 8002cea:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8002cec:	f7fe fd4c 	bl	8001788 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d902      	bls.n	8002d02 <MMC_ReadExtCSD+0xe6>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3d      	ldr	r2, [pc, #244]	@ (8002dfc <MMC_ReadExtCSD+0x1e0>)
 8002d08:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e067      	b.n	8002df2 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d28:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0b9      	beq.n	8002ca4 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00f      	beq.n	8002d5e <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2e      	ldr	r2, [pc, #184]	@ (8002dfc <MMC_ReadExtCSD+0x1e0>)
 8002d44:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	f043 0208 	orr.w	r2, r3, #8
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e049      	b.n	8002df2 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00f      	beq.n	8002d8c <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a22      	ldr	r2, [pc, #136]	@ (8002dfc <MMC_ReadExtCSD+0x1e0>)
 8002d72:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00f      	beq.n	8002dba <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <MMC_ReadExtCSD+0x1e0>)
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e01b      	b.n	8002df2 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f007 fc44 	bl	800a654 <SDMMC_CmdSendStatus>
 8002dcc:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a06      	ldr	r2, [pc, #24]	@ (8002e00 <MMC_ReadExtCSD+0x1e4>)
 8002de6:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3740      	adds	r7, #64	@ 0x40
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	1fe00fff 	.word	0x1fe00fff
 8002e00:	18000f3a 	.word	0x18000f3a

08002e04 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e1e:	d004      	beq.n	8002e2a <MMC_PwrClassUpdate+0x26>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e26:	f040 8085 	bne.w	8002f34 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8002e2e:	f107 0114 	add.w	r1, r7, #20
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	22bb      	movs	r2, #187	@ 0xbb
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff feef 	bl	8002c1c <MMC_ReadExtCSD>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002e44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e002      	b.n	8002e52 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	0e1b      	lsrs	r3, r3, #24
 8002e50:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d105      	bne.n	8002e64 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002e5e:	0e1b      	lsrs	r3, r3, #24
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	e00e      	b.n	8002e82 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d106      	bne.n	8002e78 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	e004      	b.n	8002e82 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e7e:	0e1b      	lsrs	r3, r3, #24
 8002e80:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d155      	bne.n	8002f34 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e8e:	d102      	bne.n	8002e96 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4053      	eors	r3, r2
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d047      	beq.n	8002f34 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002eb0:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <MMC_PwrClassUpdate+0x13c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f007 fc10 	bl	800a6da <SDMMC_CmdSwitch>
 8002eba:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d138      	bne.n	8002f34 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8002ec2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f007 fbbd 	bl	800a654 <SDMMC_CmdSendStatus>
 8002eda:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d112      	bne.n	8002f08 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f007 faac 	bl	800a446 <SDMMC_GetResponse>
 8002eee:	6238      	str	r0, [r7, #32]
            count--;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <MMC_PwrClassUpdate+0x106>
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e0      	bne.n	8002ec8 <MMC_PwrClassUpdate+0xc4>
 8002f06:	e000      	b.n	8002f0a <MMC_PwrClassUpdate+0x106>
              break;
 8002f08:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <MMC_PwrClassUpdate+0x124>
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8002f20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002f24:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8002f26:	e005      	b.n	8002f34 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8002f2e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8002f34:	69fb      	ldr	r3, [r7, #28]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3728      	adds	r7, #40	@ 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	03bb0000 	.word	0x03bb0000

08002f44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0fe      	b.n	8003154 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f00c fd90 	bl	800fa90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2203      	movs	r2, #3
 8002f74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f007 fec2 	bl	800ad06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7c1a      	ldrb	r2, [r3, #16]
 8002f8a:	f88d 2000 	strb.w	r2, [sp]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f92:	f007 fd93 	bl	800aabc <USB_CoreInit>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0d5      	b.n	8003154 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f007 feba 	bl	800ad28 <USB_SetCurrentMode>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0c6      	b.n	8003154 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e04a      	b.n	8003062 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3315      	adds	r3, #21
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3314      	adds	r3, #20
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	b298      	uxth	r0, r3
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	332e      	adds	r3, #46	@ 0x2e
 8003008:	4602      	mov	r2, r0
 800300a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3318      	adds	r3, #24
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	331c      	adds	r3, #28
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	3320      	adds	r3, #32
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3324      	adds	r3, #36	@ 0x24
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	3301      	adds	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	791b      	ldrb	r3, [r3, #4]
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	429a      	cmp	r2, r3
 800306a:	d3af      	bcc.n	8002fcc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e044      	b.n	80030fc <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	3301      	adds	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	791b      	ldrb	r3, [r3, #4]
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3b5      	bcc.n	8003072 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7c1a      	ldrb	r2, [r3, #16]
 800310e:	f88d 2000 	strb.w	r2, [sp]
 8003112:	3304      	adds	r3, #4
 8003114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003116:	f007 fe53 	bl	800adc0 <USB_DevInit>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e013      	b.n	8003154 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7b1b      	ldrb	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f001 f99a 	bl	800447c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f008 fe92 	bl	800be76 <USB_DevDisconnect>

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_PCD_Start+0x1c>
 8003174:	2302      	movs	r3, #2
 8003176:	e022      	b.n	80031be <HAL_PCD_Start+0x62>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f007 fd9d 	bl	800ace4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f008 fe40 	bl	800be34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031c6:	b590      	push	{r4, r7, lr}
 80031c8:	b08d      	sub	sp, #52	@ 0x34
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f008 fefe 	bl	800bfde <USB_GetMode>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 84b9 	bne.w	8003b5c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f008 fe62 	bl	800beb8 <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 84af 	beq.w	8003b5a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f008 fe4f 	bl	800beb8 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d107      	bne.n	8003234 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f002 0202 	and.w	r2, r2, #2
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f008 fe3d 	bl	800beb8 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d161      	bne.n	800330c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0210 	bic.w	r2, r2, #16
 8003256:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	0c5b      	lsrs	r3, r3, #17
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	2b02      	cmp	r3, #2
 8003282:	d124      	bne.n	80032ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d035      	beq.n	80032fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800329a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	6a38      	ldr	r0, [r7, #32]
 80032a4:	f008 fc74 	bl	800bb90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b4:	441a      	add	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c6:	441a      	add	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	615a      	str	r2, [r3, #20]
 80032cc:	e016      	b.n	80032fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	0c5b      	lsrs	r3, r3, #17
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d110      	bne.n	80032fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032e0:	2208      	movs	r2, #8
 80032e2:	4619      	mov	r1, r3
 80032e4:	6a38      	ldr	r0, [r7, #32]
 80032e6:	f008 fc53 	bl	800bb90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f6:	441a      	add	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0210 	orr.w	r2, r2, #16
 800330a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f008 fdd1 	bl	800beb8 <USB_ReadInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800331c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003320:	f040 80a7 	bne.w	8003472 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f008 fdd6 	bl	800bede <USB_ReadDevAllOutEpInterrupt>
 8003332:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003334:	e099      	b.n	800346a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 808e 	beq.w	800345e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f008 fdfa 	bl	800bf46 <USB_ReadDevOutEPInterrupt>
 8003352:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336a:	461a      	mov	r2, r3
 800336c:	2301      	movs	r3, #1
 800336e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fefc 	bl	8004170 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338e:	461a      	mov	r2, r3
 8003390:	2308      	movs	r3, #8
 8003392:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 ffd2 	bl	8004340 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b2:	461a      	mov	r2, r3
 80033b4:	2310      	movs	r3, #16
 80033b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d030      	beq.n	8003424 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ca:	2b80      	cmp	r3, #128	@ 0x80
 80033cc:	d109      	bne.n	80033e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	78db      	ldrb	r3, [r3, #3]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d108      	bne.n	8003412 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2200      	movs	r2, #0
 8003404:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	b2db      	uxtb	r3, r3
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f00c fc63 	bl	800fcd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341e:	461a      	mov	r2, r3
 8003420:	2302      	movs	r3, #2
 8003422:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	2320      	movs	r3, #32
 800343e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800345c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	3301      	adds	r3, #1
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f af62 	bne.w	8003336 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f008 fd1e 	bl	800beb8 <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003482:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003486:	f040 80db 	bne.w	8003640 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f008 fd3f 	bl	800bf12 <USB_ReadDevAllInEpInterrupt>
 8003494:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800349a:	e0cd      	b.n	8003638 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80c2 	beq.w	800362c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f008 fd65 	bl	800bf82 <USB_ReadDevInEPInterrupt>
 80034b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d057      	beq.n	8003574 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69f9      	ldr	r1, [r7, #28]
 80034e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034e4:	4013      	ands	r3, r2
 80034e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f4:	461a      	mov	r2, r3
 80034f6:	2301      	movs	r3, #1
 80034f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	799b      	ldrb	r3, [r3, #6]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d132      	bne.n	8003568 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3320      	adds	r3, #32
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4403      	add	r3, r0
 8003522:	331c      	adds	r3, #28
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4419      	add	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4403      	add	r3, r0
 8003536:	3320      	adds	r3, #32
 8003538:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <HAL_PCD_IRQHandler+0x3a2>
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3324      	adds	r3, #36	@ 0x24
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003560:	461a      	mov	r2, r3
 8003562:	2101      	movs	r1, #1
 8003564:	f008 fd6e 	bl	800c044 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f00c fb2d 	bl	800fbce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358a:	461a      	mov	r2, r3
 800358c:	2308      	movs	r3, #8
 800358e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a6:	461a      	mov	r2, r3
 80035a8:	2310      	movs	r3, #16
 80035aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035c2:	461a      	mov	r2, r3
 80035c4:	2340      	movs	r3, #64	@ 0x40
 80035c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d023      	beq.n	800361a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035d4:	6a38      	ldr	r0, [r7, #32]
 80035d6:	f007 fd51 	bl	800b07c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	3310      	adds	r3, #16
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	3304      	adds	r3, #4
 80035ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	78db      	ldrb	r3, [r3, #3]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f00c fb7a 	bl	800fcfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003614:	461a      	mov	r2, r3
 8003616:	2302      	movs	r3, #2
 8003618:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fd15 	bl	8004056 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	3301      	adds	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	f47f af2e 	bne.w	800349c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f008 fc37 	bl	800beb8 <USB_ReadInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003654:	d122      	bne.n	800369c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800367c:	2100      	movs	r1, #0
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 ff20 	bl	80044c4 <HAL_PCDEx_LPM_Callback>
 8003684:	e002      	b.n	800368c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f00c fb18 	bl	800fcbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800369a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f008 fc09 	bl	800beb8 <USB_ReadInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036b0:	d112      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d102      	bne.n	80036c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f00c fad4 	bl	800fc70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f008 fbeb 	bl	800beb8 <USB_ReadInterrupts>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ec:	d121      	bne.n	8003732 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80036fc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003704:	2b00      	cmp	r3, #0
 8003706:	d111      	bne.n	800372c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003722:	2101      	movs	r1, #1
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fecd 	bl	80044c4 <HAL_PCDEx_LPM_Callback>
 800372a:	e002      	b.n	8003732 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f00c fa9f 	bl	800fc70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f008 fbbe 	bl	800beb8 <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003746:	f040 80b7 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2110      	movs	r1, #16
 8003764:	4618      	mov	r0, r3
 8003766:	f007 fc89 	bl	800b07c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800376e:	e046      	b.n	80037fe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377c:	461a      	mov	r2, r3
 800377e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003782:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800379e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	3301      	adds	r3, #1
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	791b      	ldrb	r3, [r3, #4]
 8003802:	461a      	mov	r2, r3
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	4293      	cmp	r3, r2
 8003808:	d3b2      	bcc.n	8003770 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003818:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800381c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7bdb      	ldrb	r3, [r3, #15]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003836:	f043 030b 	orr.w	r3, r3, #11
 800383a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800384c:	f043 030b 	orr.w	r3, r3, #11
 8003850:	6453      	str	r3, [r2, #68]	@ 0x44
 8003852:	e015      	b.n	8003880 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003862:	4619      	mov	r1, r3
 8003864:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003868:	4313      	orrs	r3, r2
 800386a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800387a:	f043 030b 	orr.w	r3, r3, #11
 800387e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800388e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003892:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038a2:	461a      	mov	r2, r3
 80038a4:	f008 fbce 	bl	800c044 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f008 fafb 	bl	800beb8 <USB_ReadInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038cc:	d123      	bne.n	8003916 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f008 fb92 	bl	800bffc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f007 fc46 	bl	800b16e <USB_GetDevSpeed>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681c      	ldr	r4, [r3, #0]
 80038ee:	f001 fda1 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 80038f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038f8:	461a      	mov	r2, r3
 80038fa:	4620      	mov	r0, r4
 80038fc:	f007 f950 	bl	800aba0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f00c f98c 	bl	800fc1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003914:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f008 facc 	bl	800beb8 <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d10a      	bne.n	8003940 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f00c f969 	bl	800fc02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f002 0208 	and.w	r2, r2, #8
 800393e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f008 fab7 	bl	800beb8 <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	2b80      	cmp	r3, #128	@ 0x80
 8003952:	d123      	bne.n	800399c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003960:	2301      	movs	r3, #1
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
 8003964:	e014      	b.n	8003990 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fb08 	bl	8003f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	3301      	adds	r3, #1
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	791b      	ldrb	r3, [r3, #4]
 8003994:	461a      	mov	r2, r3
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	4293      	cmp	r3, r2
 800399a:	d3e4      	bcc.n	8003966 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f008 fa89 	bl	800beb8 <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b0:	d13c      	bne.n	8003a2c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b6:	e02b      	b.n	8003a10 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3318      	adds	r3, #24
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d115      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da12      	bge.n	8003a0a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	3317      	adds	r3, #23
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fac8 	bl	8003f9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	791b      	ldrb	r3, [r3, #4]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d3cd      	bcc.n	80039b8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f008 fa41 	bl	800beb8 <USB_ReadInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a40:	d156      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a42:	2301      	movs	r3, #1
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a46:	e045      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d12e      	bne.n	8003ace <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da2b      	bge.n	8003ace <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a82:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d121      	bne.n	8003ace <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aca:	6053      	str	r3, [r2, #4]
            break;
 8003acc:	e008      	b.n	8003ae0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	791b      	ldrb	r3, [r3, #4]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d3b3      	bcc.n	8003a48 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f008 f9df 	bl	800beb8 <USB_ReadInterrupts>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d10a      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f00c f90a 	bl	800fd20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f008 f9c9 	bl	800beb8 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d115      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f00c f8fa 	bl	800fd3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
 8003b58:	e000      	b.n	8003b5c <HAL_PCD_IRQHandler+0x996>
      return;
 8003b5a:	bf00      	nop
    }
  }
}
 8003b5c:	3734      	adds	r7, #52	@ 0x34
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd90      	pop	{r4, r7, pc}

08003b62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_PCD_SetAddress+0x1a>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e012      	b.n	8003ba2 <HAL_PCD_SetAddress+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f008 f928 	bl	800bde8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	4608      	mov	r0, r1
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4603      	mov	r3, r0
 8003bba:	70fb      	strb	r3, [r7, #3]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	803b      	strh	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da0f      	bge.n	8003bf0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 020f 	and.w	r2, r3, #15
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3310      	adds	r3, #16
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	705a      	strb	r2, [r3, #1]
 8003bee:	e00f      	b.n	8003c10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c1c:	883a      	ldrh	r2, [r7, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	78ba      	ldrb	r2, [r7, #2]
 8003c26:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c3a:	78bb      	ldrb	r3, [r7, #2]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d102      	bne.n	8003c46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_PCD_EP_Open+0xaa>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e00e      	b.n	8003c72 <HAL_PCD_EP_Open+0xc8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f007 faa8 	bl	800b1b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c70:	7afb      	ldrb	r3, [r7, #11]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da0f      	bge.n	8003cae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	705a      	strb	r2, [r3, #1]
 8003cac:	e00f      	b.n	8003cce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_PCD_EP_Close+0x6e>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e00e      	b.n	8003d06 <HAL_PCD_EP_Close+0x8c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f007 fae6 	bl	800b2c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	799b      	ldrb	r3, [r3, #6]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	799b      	ldrb	r3, [r3, #6]
 8003d72:	461a      	mov	r2, r3
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	f007 fb83 	bl	800b480 <USB_EPStartXfer>

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 020f 	and.w	r2, r3, #15
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2201      	movs	r2, #1
 8003df2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df4:	7afb      	ldrb	r3, [r7, #11]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	799b      	ldrb	r3, [r3, #6]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d102      	bne.n	8003e0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	799b      	ldrb	r3, [r3, #6]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6979      	ldr	r1, [r7, #20]
 8003e1a:	f007 fb31 	bl	800b480 <USB_EPStartXfer>

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	7912      	ldrb	r2, [r2, #4]
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e04f      	b.n	8003ee6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da0f      	bge.n	8003e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	3310      	adds	r3, #16
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	705a      	strb	r2, [r3, #1]
 8003e6c:	e00d      	b.n	8003e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_PCD_EP_SetStall+0x82>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e01d      	b.n	8003ee6 <HAL_PCD_EP_SetStall+0xbe>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f007 fec1 	bl	800bc40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7999      	ldrb	r1, [r3, #6]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f008 f8b4 	bl	800c044 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	7912      	ldrb	r2, [r2, #4]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e042      	b.n	8003f92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da0f      	bge.n	8003f34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 020f 	and.w	r2, r3, #15
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	3310      	adds	r3, #16
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	705a      	strb	r2, [r3, #1]
 8003f32:	e00f      	b.n	8003f54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	f003 020f 	and.w	r2, r3, #15
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_PCD_EP_ClrStall+0x86>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e00e      	b.n	8003f92 <HAL_PCD_EP_ClrStall+0xa4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f007 feca 	bl	800bd1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da0c      	bge.n	8003fc8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e00c      	b.n	8003fe2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	f003 020f 	and.w	r2, r3, #15
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4413      	add	r3, r2
 8003fde:	3304      	adds	r3, #4
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f007 fce9 	bl	800b9c0 <USB_EPStopXfer>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_Flush+0x1a>
 8004012:	2302      	movs	r3, #2
 8004014:	e01b      	b.n	800404e <HAL_PCD_EP_Flush+0x52>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800401e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004022:	2b00      	cmp	r3, #0
 8004024:	da09      	bge.n	800403a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f007 f822 	bl	800b07c <USB_FlushTxFifo>
 8004038:	e004      	b.n	8004044 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f007 f84e 	bl	800b0e0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b08a      	sub	sp, #40	@ 0x28
 800405a:	af02      	add	r7, sp, #8
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	3310      	adds	r3, #16
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d901      	bls.n	800408e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e06b      	b.n	8004166 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d902      	bls.n	80040aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3303      	adds	r3, #3
 80040ae:	089b      	lsrs	r3, r3, #2
 80040b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040b2:	e02a      	b.n	800410a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d902      	bls.n	80040d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3303      	adds	r3, #3
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68d9      	ldr	r1, [r3, #12]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4603      	mov	r3, r0
 80040ec:	6978      	ldr	r0, [r7, #20]
 80040ee:	f007 fd11 	bl	800bb14 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	441a      	add	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d809      	bhi.n	8004134 <PCD_WriteEmptyTxFifo+0xde>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004128:	429a      	cmp	r2, r3
 800412a:	d203      	bcs.n	8004134 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1bf      	bne.n	80040b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	d811      	bhi.n	8004164 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	2201      	movs	r2, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	43db      	mvns	r3, r3
 800415a:	6939      	ldr	r1, [r7, #16]
 800415c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004160:	4013      	ands	r3, r2
 8004162:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	333c      	adds	r3, #60	@ 0x3c
 8004188:	3304      	adds	r3, #4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	799b      	ldrb	r3, [r3, #6]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d17b      	bne.n	800429e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	4a61      	ldr	r2, [pc, #388]	@ (8004338 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	f240 80b9 	bls.w	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80b3 	beq.w	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d2:	461a      	mov	r2, r3
 80041d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d8:	6093      	str	r3, [r2, #8]
 80041da:	e0a7      	b.n	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	2320      	movs	r3, #32
 80041f6:	6093      	str	r3, [r2, #8]
 80041f8:	e098      	b.n	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 8093 	bne.w	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4a4b      	ldr	r2, [pc, #300]	@ (8004338 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d90f      	bls.n	800422e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004224:	461a      	mov	r2, r3
 8004226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422a:	6093      	str	r3, [r2, #8]
 800422c:	e07e      	b.n	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	3304      	adds	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	0159      	lsls	r1, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	440b      	add	r3, r1
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d114      	bne.n	8004290 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004278:	461a      	mov	r2, r3
 800427a:	2101      	movs	r1, #1
 800427c:	f007 fee2 	bl	800c044 <USB_EP0_OutStart>
 8004280:	e006      	b.n	8004290 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	441a      	add	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f00b fc7e 	bl	800fb98 <HAL_PCD_DataOutStageCallback>
 800429c:	e046      	b.n	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	4a26      	ldr	r2, [pc, #152]	@ (800433c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d124      	bne.n	80042f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042bc:	461a      	mov	r2, r3
 80042be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042c2:	6093      	str	r3, [r2, #8]
 80042c4:	e032      	b.n	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042dc:	461a      	mov	r2, r3
 80042de:	2320      	movs	r3, #32
 80042e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f00b fc55 	bl	800fb98 <HAL_PCD_DataOutStageCallback>
 80042ee:	e01d      	b.n	800432c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d114      	bne.n	8004320 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004318:	461a      	mov	r2, r3
 800431a:	2100      	movs	r1, #0
 800431c:	f007 fe92 	bl	800c044 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f00b fc36 	bl	800fb98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	4f54300a 	.word	0x4f54300a
 800433c:	4f54310a 	.word	0x4f54310a

08004340 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	333c      	adds	r3, #60	@ 0x3c
 8004358:	3304      	adds	r3, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d90e      	bls.n	8004394 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	461a      	mov	r2, r3
 800438e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004392:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f00b fbed 	bl	800fb74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d90c      	bls.n	80043bc <PCD_EP_OutSetupPacket_int+0x7c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	799b      	ldrb	r3, [r3, #6]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d108      	bne.n	80043bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043b4:	461a      	mov	r2, r3
 80043b6:	2101      	movs	r1, #1
 80043b8:	f007 fe44 	bl	800c044 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	4f54300a 	.word	0x4f54300a

080043cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
 80043d8:	4613      	mov	r3, r2
 80043da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d107      	bne.n	80043fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043ea:	883b      	ldrh	r3, [r7, #0]
 80043ec:	0419      	lsls	r1, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80043f8:	e028      	b.n	800444c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4413      	add	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e00d      	b.n	800442a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	3340      	adds	r3, #64	@ 0x40
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	4413      	add	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	3301      	adds	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	3b01      	subs	r3, #1
 8004430:	429a      	cmp	r2, r3
 8004432:	d3ec      	bcc.n	800440e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004434:	883b      	ldrh	r3, [r7, #0]
 8004436:	0418      	lsls	r0, r3, #16
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6819      	ldr	r1, [r3, #0]
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	3b01      	subs	r3, #1
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	4302      	orrs	r2, r0
 8004444:	3340      	adds	r3, #64	@ 0x40
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044aa:	4b05      	ldr	r3, [pc, #20]	@ (80044c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	10000003 	.word	0x10000003

080044c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044e4:	4b19      	ldr	r3, [pc, #100]	@ (800454c <HAL_PWREx_ConfigSupply+0x70>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d00a      	beq.n	8004506 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044f0:	4b16      	ldr	r3, [pc, #88]	@ (800454c <HAL_PWREx_ConfigSupply+0x70>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d001      	beq.n	8004502 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e01f      	b.n	8004542 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	e01d      	b.n	8004542 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004506:	4b11      	ldr	r3, [pc, #68]	@ (800454c <HAL_PWREx_ConfigSupply+0x70>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 0207 	bic.w	r2, r3, #7
 800450e:	490f      	ldr	r1, [pc, #60]	@ (800454c <HAL_PWREx_ConfigSupply+0x70>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4313      	orrs	r3, r2
 8004514:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004516:	f7fd f937 	bl	8001788 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800451c:	e009      	b.n	8004532 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800451e:	f7fd f933 	bl	8001788 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800452c:	d901      	bls.n	8004532 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e007      	b.n	8004542 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004532:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_PWREx_ConfigSupply+0x70>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800453a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800453e:	d1ee      	bne.n	800451e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	58024800 	.word	0x58024800

08004550 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004554:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a04      	ldr	r2, [pc, #16]	@ (800456c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800455a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800455e:	60d3      	str	r3, [r2, #12]
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	58024800 	.word	0x58024800

08004570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	@ 0x30
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f000 bc1f 	b.w	8004dc2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80b3 	beq.w	80046f8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004592:	4b95      	ldr	r3, [pc, #596]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800459c:	4b92      	ldr	r3, [pc, #584]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d007      	beq.n	80045b8 <HAL_RCC_OscConfig+0x48>
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	2b18      	cmp	r3, #24
 80045ac:	d112      	bne.n	80045d4 <HAL_RCC_OscConfig+0x64>
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d10d      	bne.n	80045d4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	4b8b      	ldr	r3, [pc, #556]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8098 	beq.w	80046f6 <HAL_RCC_OscConfig+0x186>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 8093 	bne.w	80046f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e3f6      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045dc:	d106      	bne.n	80045ec <HAL_RCC_OscConfig+0x7c>
 80045de:	4b82      	ldr	r3, [pc, #520]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a81      	ldr	r2, [pc, #516]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e058      	b.n	800469e <HAL_RCC_OscConfig+0x12e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d112      	bne.n	800461a <HAL_RCC_OscConfig+0xaa>
 80045f4:	4b7c      	ldr	r3, [pc, #496]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a7b      	ldr	r2, [pc, #492]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b79      	ldr	r3, [pc, #484]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a78      	ldr	r2, [pc, #480]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004606:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	4b76      	ldr	r3, [pc, #472]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a75      	ldr	r2, [pc, #468]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	e041      	b.n	800469e <HAL_RCC_OscConfig+0x12e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004622:	d112      	bne.n	800464a <HAL_RCC_OscConfig+0xda>
 8004624:	4b70      	ldr	r3, [pc, #448]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6f      	ldr	r2, [pc, #444]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800462a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b6d      	ldr	r3, [pc, #436]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a6c      	ldr	r2, [pc, #432]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004636:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b6a      	ldr	r3, [pc, #424]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a69      	ldr	r2, [pc, #420]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e029      	b.n	800469e <HAL_RCC_OscConfig+0x12e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004652:	d112      	bne.n	800467a <HAL_RCC_OscConfig+0x10a>
 8004654:	4b64      	ldr	r3, [pc, #400]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a63      	ldr	r2, [pc, #396]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800465a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4b61      	ldr	r3, [pc, #388]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a60      	ldr	r2, [pc, #384]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b5e      	ldr	r3, [pc, #376]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5d      	ldr	r2, [pc, #372]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e011      	b.n	800469e <HAL_RCC_OscConfig+0x12e>
 800467a:	4b5b      	ldr	r3, [pc, #364]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5a      	ldr	r2, [pc, #360]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b58      	ldr	r3, [pc, #352]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a57      	ldr	r2, [pc, #348]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800468c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	4b55      	ldr	r3, [pc, #340]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a54      	ldr	r2, [pc, #336]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004698:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800469c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d013      	beq.n	80046ce <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fd f86f 	bl	8001788 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ae:	f7fd f86b 	bl	8001788 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b64      	cmp	r3, #100	@ 0x64
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e380      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046c0:	4b49      	ldr	r3, [pc, #292]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x13e>
 80046cc:	e014      	b.n	80046f8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd f85b 	bl	8001788 <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d6:	f7fd f857 	bl	8001788 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b64      	cmp	r3, #100	@ 0x64
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e36c      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046e8:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x166>
 80046f4:	e000      	b.n	80046f8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 808c 	beq.w	800481e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	4b38      	ldr	r3, [pc, #224]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800470e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004710:	4b35      	ldr	r3, [pc, #212]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <HAL_RCC_OscConfig+0x1bc>
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2b18      	cmp	r3, #24
 8004720:	d137      	bne.n	8004792 <HAL_RCC_OscConfig+0x222>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d132      	bne.n	8004792 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800472c:	4b2e      	ldr	r3, [pc, #184]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_OscConfig+0x1d4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e33e      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004744:	4b28      	ldr	r3, [pc, #160]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f023 0219 	bic.w	r2, r3, #25
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4925      	ldr	r1, [pc, #148]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fd f817 	bl	8001788 <HAL_GetTick>
 800475a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475e:	f7fd f813 	bl	8001788 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e328      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477c:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	061b      	lsls	r3, r3, #24
 800478a:	4917      	ldr	r1, [pc, #92]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004790:	e045      	b.n	800481e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d028      	beq.n	80047ec <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800479a:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 0219 	bic.w	r2, r3, #25
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4910      	ldr	r1, [pc, #64]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fc ffec 	bl	8001788 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b4:	f7fc ffe8 	bl	8001788 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e2fd      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c6:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	061b      	lsls	r3, r3, #24
 80047e0:	4901      	ldr	r1, [pc, #4]	@ (80047e8 <HAL_RCC_OscConfig+0x278>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
 80047e6:	e01a      	b.n	800481e <HAL_RCC_OscConfig+0x2ae>
 80047e8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ec:	4b97      	ldr	r3, [pc, #604]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a96      	ldr	r2, [pc, #600]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fc ffc6 	bl	8001788 <HAL_GetTick>
 80047fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004800:	f7fc ffc2 	bl	8001788 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e2d7      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004812:	4b8e      	ldr	r3, [pc, #568]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d06a      	beq.n	8004900 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482a:	4b88      	ldr	r3, [pc, #544]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004832:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004834:	4b85      	ldr	r3, [pc, #532]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d007      	beq.n	8004850 <HAL_RCC_OscConfig+0x2e0>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b18      	cmp	r3, #24
 8004844:	d11b      	bne.n	800487e <HAL_RCC_OscConfig+0x30e>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d116      	bne.n	800487e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004850:	4b7e      	ldr	r3, [pc, #504]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_OscConfig+0x2f8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	2b80      	cmp	r3, #128	@ 0x80
 8004862:	d001      	beq.n	8004868 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e2ac      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004868:	4b78      	ldr	r3, [pc, #480]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	4975      	ldr	r1, [pc, #468]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800487c:	e040      	b.n	8004900 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d023      	beq.n	80048ce <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004886:	4b71      	ldr	r3, [pc, #452]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a70      	ldr	r2, [pc, #448]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800488c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fc ff79 	bl	8001788 <HAL_GetTick>
 8004896:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800489a:	f7fc ff75 	bl	8001788 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e28a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ac:	4b67      	ldr	r3, [pc, #412]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048b8:	4b64      	ldr	r3, [pc, #400]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	061b      	lsls	r3, r3, #24
 80048c6:	4961      	ldr	r1, [pc, #388]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
 80048cc:	e018      	b.n	8004900 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048ce:	4b5f      	ldr	r3, [pc, #380]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80048d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fc ff55 	bl	8001788 <HAL_GetTick>
 80048de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048e2:	f7fc ff51 	bl	8001788 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e266      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048f4:	4b55      	ldr	r3, [pc, #340]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d036      	beq.n	800497a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d019      	beq.n	8004948 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004914:	4b4d      	ldr	r3, [pc, #308]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004918:	4a4c      	ldr	r2, [pc, #304]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fc ff32 	bl	8001788 <HAL_GetTick>
 8004924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7fc ff2e 	bl	8001788 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e243      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800493a:	4b44      	ldr	r3, [pc, #272]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800493c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x3b8>
 8004946:	e018      	b.n	800497a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004948:	4b40      	ldr	r3, [pc, #256]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800494a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800494c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800494e:	f023 0301 	bic.w	r3, r3, #1
 8004952:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fc ff18 	bl	8001788 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495c:	f7fc ff14 	bl	8001788 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e229      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800496e:	4b37      	ldr	r3, [pc, #220]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d036      	beq.n	80049f4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d019      	beq.n	80049c2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800498e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2e      	ldr	r2, [pc, #184]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004998:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800499a:	f7fc fef5 	bl	8001788 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a2:	f7fc fef1 	bl	8001788 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e206      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b4:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x432>
 80049c0:	e018      	b.n	80049f4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049c2:	4b22      	ldr	r3, [pc, #136]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a21      	ldr	r2, [pc, #132]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80049c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049ce:	f7fc fedb 	bl	8001788 <HAL_GetTick>
 80049d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049d6:	f7fc fed7 	bl	8001788 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e1ec      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049e8:	4b18      	ldr	r3, [pc, #96]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f0      	bne.n	80049d6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 80af 	beq.w	8004b60 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a02:	4b13      	ldr	r3, [pc, #76]	@ (8004a50 <HAL_RCC_OscConfig+0x4e0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <HAL_RCC_OscConfig+0x4e0>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a0e:	f7fc febb 	bl	8001788 <HAL_GetTick>
 8004a12:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a16:	f7fc feb7 	bl	8001788 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b64      	cmp	r3, #100	@ 0x64
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e1cc      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a28:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <HAL_RCC_OscConfig+0x4e0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4e4>
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a40:	4a02      	ldr	r2, [pc, #8]	@ (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a48:	e05b      	b.n	8004b02 <HAL_RCC_OscConfig+0x592>
 8004a4a:	bf00      	nop
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	58024800 	.word	0x58024800
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d112      	bne.n	8004a82 <HAL_RCC_OscConfig+0x512>
 8004a5c:	4b9d      	ldr	r3, [pc, #628]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a60:	4a9c      	ldr	r2, [pc, #624]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a68:	4b9a      	ldr	r3, [pc, #616]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6c:	4a99      	ldr	r2, [pc, #612]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a74:	4b97      	ldr	r3, [pc, #604]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	4a96      	ldr	r2, [pc, #600]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a7a:	f023 0304 	bic.w	r3, r3, #4
 8004a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a80:	e03f      	b.n	8004b02 <HAL_RCC_OscConfig+0x592>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d112      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x540>
 8004a8a:	4b92      	ldr	r3, [pc, #584]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8e:	4a91      	ldr	r2, [pc, #580]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a96:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9a:	4a8e      	ldr	r2, [pc, #568]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	4a8b      	ldr	r2, [pc, #556]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aae:	e028      	b.n	8004b02 <HAL_RCC_OscConfig+0x592>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b85      	cmp	r3, #133	@ 0x85
 8004ab6:	d112      	bne.n	8004ade <HAL_RCC_OscConfig+0x56e>
 8004ab8:	4b86      	ldr	r3, [pc, #536]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abc:	4a85      	ldr	r2, [pc, #532]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004abe:	f043 0304 	orr.w	r3, r3, #4
 8004ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac4:	4b83      	ldr	r3, [pc, #524]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac8:	4a82      	ldr	r2, [pc, #520]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad0:	4b80      	ldr	r3, [pc, #512]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad4:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8004adc:	e011      	b.n	8004b02 <HAL_RCC_OscConfig+0x592>
 8004ade:	4b7d      	ldr	r3, [pc, #500]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aea:	4b7a      	ldr	r3, [pc, #488]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	4a79      	ldr	r2, [pc, #484]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004af0:	f023 0304 	bic.w	r3, r3, #4
 8004af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004af6:	4b77      	ldr	r3, [pc, #476]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	4a76      	ldr	r2, [pc, #472]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d015      	beq.n	8004b36 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fc fe3d 	bl	8001788 <HAL_GetTick>
 8004b0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fc fe39 	bl	8001788 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e14c      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b28:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ee      	beq.n	8004b12 <HAL_RCC_OscConfig+0x5a2>
 8004b34:	e014      	b.n	8004b60 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fc fe27 	bl	8001788 <HAL_GetTick>
 8004b3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fc fe23 	bl	8001788 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e136      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b54:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ee      	bne.n	8004b3e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 812b 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b72:	2b18      	cmp	r3, #24
 8004b74:	f000 80bb 	beq.w	8004cee <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	f040 8095 	bne.w	8004cac <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b82:	4b54      	ldr	r3, [pc, #336]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a53      	ldr	r2, [pc, #332]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004b88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fc fdfb 	bl	8001788 <HAL_GetTick>
 8004b92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fc fdf7 	bl	8001788 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e10c      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb4:	4b47      	ldr	r3, [pc, #284]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004bb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bb8:	4b47      	ldr	r3, [pc, #284]	@ (8004cd8 <HAL_RCC_OscConfig+0x768>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	4942      	ldr	r1, [pc, #264]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	3b01      	subs	r3, #1
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	061b      	lsls	r3, r3, #24
 8004bfa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bfe:	4935      	ldr	r1, [pc, #212]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c04:	4b33      	ldr	r3, [pc, #204]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	4a32      	ldr	r2, [pc, #200]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c10:	4b30      	ldr	r3, [pc, #192]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c14:	4b31      	ldr	r3, [pc, #196]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c1c:	00d2      	lsls	r2, r2, #3
 8004c1e:	492d      	ldr	r1, [pc, #180]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c24:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	f023 020c 	bic.w	r2, r3, #12
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	4928      	ldr	r1, [pc, #160]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c36:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f023 0202 	bic.w	r2, r3, #2
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c42:	4924      	ldr	r1, [pc, #144]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c48:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	4a21      	ldr	r2, [pc, #132]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c60:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c6c:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	4a18      	ldr	r2, [pc, #96]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c78:	4b16      	ldr	r3, [pc, #88]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a15      	ldr	r2, [pc, #84]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc fd80 	bl	8001788 <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fc fd7c 	bl	8001788 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e091      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x71c>
 8004caa:	e089      	b.n	8004dc0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cac:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a08      	ldr	r2, [pc, #32]	@ (8004cd4 <HAL_RCC_OscConfig+0x764>)
 8004cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fc fd66 	bl	8001788 <HAL_GetTick>
 8004cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cbe:	e00f      	b.n	8004ce0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fc fd62 	bl	8001788 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d908      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e077      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	fffffc0c 	.word	0xfffffc0c
 8004cdc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e9      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x750>
 8004cec:	e068      	b.n	8004dc0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cee:	4b37      	ldr	r3, [pc, #220]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cf4:	4b35      	ldr	r3, [pc, #212]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d031      	beq.n	8004d66 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d12a      	bne.n	8004d66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d122      	bne.n	8004d66 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d11a      	bne.n	8004d66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	0a5b      	lsrs	r3, r3, #9
 8004d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d111      	bne.n	8004d66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d108      	bne.n	8004d66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	0e1b      	lsrs	r3, r3, #24
 8004d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e02b      	b.n	8004dc2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d6a:	4b18      	ldr	r3, [pc, #96]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6e:	08db      	lsrs	r3, r3, #3
 8004d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d74:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d01f      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d80:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	4a11      	ldr	r2, [pc, #68]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d8c:	f7fc fcfc 	bl	8001788 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d92:	bf00      	nop
 8004d94:	f7fc fcf8 	bl	8001788 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d0f9      	beq.n	8004d94 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004da0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da4:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <HAL_RCC_OscConfig+0x860>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dac:	00d2      	lsls	r2, r2, #3
 8004dae:	4907      	ldr	r1, [pc, #28]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004db4:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	4a04      	ldr	r2, [pc, #16]	@ (8004dcc <HAL_RCC_OscConfig+0x85c>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3730      	adds	r7, #48	@ 0x30
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	ffff0007 	.word	0xffff0007

08004dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e19c      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b8a      	ldr	r3, [pc, #552]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d910      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b87      	ldr	r3, [pc, #540]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 020f 	bic.w	r2, r3, #15
 8004dfe:	4985      	ldr	r1, [pc, #532]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b83      	ldr	r3, [pc, #524]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e184      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d010      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	4b7b      	ldr	r3, [pc, #492]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d908      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e34:	4b78      	ldr	r3, [pc, #480]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	4975      	ldr	r1, [pc, #468]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d010      	beq.n	8004e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	4b70      	ldr	r3, [pc, #448]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d908      	bls.n	8004e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e62:	4b6d      	ldr	r3, [pc, #436]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	496a      	ldr	r1, [pc, #424]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	4b64      	ldr	r3, [pc, #400]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d908      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e90:	4b61      	ldr	r3, [pc, #388]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	495e      	ldr	r1, [pc, #376]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	4b59      	ldr	r3, [pc, #356]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d908      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ebe:	4b56      	ldr	r3, [pc, #344]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4953      	ldr	r1, [pc, #332]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d908      	bls.n	8004efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eec:	4b4a      	ldr	r3, [pc, #296]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f023 020f 	bic.w	r2, r3, #15
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4947      	ldr	r1, [pc, #284]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d055      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f0a:	4b43      	ldr	r3, [pc, #268]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4940      	ldr	r1, [pc, #256]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f24:	4b3c      	ldr	r3, [pc, #240]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d121      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0f6      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f3c:	4b36      	ldr	r3, [pc, #216]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0ea      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f54:	4b30      	ldr	r3, [pc, #192]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0de      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f64:	4b2c      	ldr	r3, [pc, #176]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0d6      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f74:	4b28      	ldr	r3, [pc, #160]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f023 0207 	bic.w	r2, r3, #7
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4925      	ldr	r1, [pc, #148]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fc fbff 	bl	8001788 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8e:	f7fc fbfb 	bl	8001788 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0be      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d1eb      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	4b14      	ldr	r3, [pc, #80]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d208      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd2:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f023 020f 	bic.w	r2, r3, #15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	490e      	ldr	r1, [pc, #56]	@ (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d214      	bcs.n	800501c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b08      	ldr	r3, [pc, #32]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f023 020f 	bic.w	r2, r3, #15
 8004ffa:	4906      	ldr	r1, [pc, #24]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <HAL_RCC_ClockConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e086      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
 8005014:	52002000 	.word	0x52002000
 8005018:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	4b3f      	ldr	r3, [pc, #252]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005034:	429a      	cmp	r2, r3
 8005036:	d208      	bcs.n	800504a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005038:	4b3c      	ldr	r3, [pc, #240]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4939      	ldr	r1, [pc, #228]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005046:	4313      	orrs	r3, r2
 8005048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d010      	beq.n	8005078 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	4b34      	ldr	r3, [pc, #208]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005062:	429a      	cmp	r2, r3
 8005064:	d208      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005066:	4b31      	ldr	r3, [pc, #196]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	492e      	ldr	r1, [pc, #184]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005074:	4313      	orrs	r3, r2
 8005076:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005090:	429a      	cmp	r2, r3
 8005092:	d208      	bcs.n	80050a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005094:	4b25      	ldr	r3, [pc, #148]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	4922      	ldr	r1, [pc, #136]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050be:	429a      	cmp	r2, r3
 80050c0:	d208      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050c2:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4917      	ldr	r1, [pc, #92]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80050d4:	f000 f834 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b14      	ldr	r3, [pc, #80]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	4912      	ldr	r1, [pc, #72]	@ (8005130 <HAL_RCC_ClockConfig+0x35c>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80050f2:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <HAL_RCC_ClockConfig+0x358>)
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005130 <HAL_RCC_ClockConfig+0x35c>)
 80050fc:	5cd3      	ldrb	r3, [r2, r3]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	4a0a      	ldr	r2, [pc, #40]	@ (8005134 <HAL_RCC_ClockConfig+0x360>)
 800510a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800510c:	4a0a      	ldr	r2, [pc, #40]	@ (8005138 <HAL_RCC_ClockConfig+0x364>)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005112:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <HAL_RCC_ClockConfig+0x368>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fc faec 	bl	80016f4 <HAL_InitTick>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
 8005130:	080101f4 	.word	0x080101f4
 8005134:	24000004 	.word	0x24000004
 8005138:	24000000 	.word	0x24000000
 800513c:	24000008 	.word	0x24000008

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	@ 0x24
 8005144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005146:	4bb3      	ldr	r3, [pc, #716]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800514e:	2b18      	cmp	r3, #24
 8005150:	f200 8155 	bhi.w	80053fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005154:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	080051c1 	.word	0x080051c1
 8005160:	080053ff 	.word	0x080053ff
 8005164:	080053ff 	.word	0x080053ff
 8005168:	080053ff 	.word	0x080053ff
 800516c:	080053ff 	.word	0x080053ff
 8005170:	080053ff 	.word	0x080053ff
 8005174:	080053ff 	.word	0x080053ff
 8005178:	080053ff 	.word	0x080053ff
 800517c:	080051e7 	.word	0x080051e7
 8005180:	080053ff 	.word	0x080053ff
 8005184:	080053ff 	.word	0x080053ff
 8005188:	080053ff 	.word	0x080053ff
 800518c:	080053ff 	.word	0x080053ff
 8005190:	080053ff 	.word	0x080053ff
 8005194:	080053ff 	.word	0x080053ff
 8005198:	080053ff 	.word	0x080053ff
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080053ff 	.word	0x080053ff
 80051a4:	080053ff 	.word	0x080053ff
 80051a8:	080053ff 	.word	0x080053ff
 80051ac:	080053ff 	.word	0x080053ff
 80051b0:	080053ff 	.word	0x080053ff
 80051b4:	080053ff 	.word	0x080053ff
 80051b8:	080053ff 	.word	0x080053ff
 80051bc:	080051f3 	.word	0x080051f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c0:	4b94      	ldr	r3, [pc, #592]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051cc:	4b91      	ldr	r3, [pc, #580]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a90      	ldr	r2, [pc, #576]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051de:	e111      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051e2:	61bb      	str	r3, [r7, #24]
      break;
 80051e4:	e10e      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051e6:	4b8d      	ldr	r3, [pc, #564]	@ (800541c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051e8:	61bb      	str	r3, [r7, #24]
      break;
 80051ea:	e10b      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051ee:	61bb      	str	r3, [r7, #24]
      break;
 80051f0:	e108      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051f2:	4b88      	ldr	r3, [pc, #544]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051fc:	4b85      	ldr	r3, [pc, #532]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005206:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005208:	4b82      	ldr	r3, [pc, #520]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005212:	4b80      	ldr	r3, [pc, #512]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80e1 	beq.w	80053f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b02      	cmp	r3, #2
 800523a:	f000 8083 	beq.w	8005344 <HAL_RCC_GetSysClockFreq+0x204>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b02      	cmp	r3, #2
 8005242:	f200 80a1 	bhi.w	8005388 <HAL_RCC_GetSysClockFreq+0x248>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x114>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d056      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005252:	e099      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005254:	4b6f      	ldr	r3, [pc, #444]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02d      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005260:	4b6c      	ldr	r3, [pc, #432]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	08db      	lsrs	r3, r3, #3
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	4a6b      	ldr	r2, [pc, #428]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b62      	ldr	r3, [pc, #392]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a02 	vldr	s12, [r7, #8]
 800529e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052ba:	e087      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005428 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b51      	ldr	r3, [pc, #324]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a02 	vldr	s12, [r7, #8]
 80052e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052fe:	e065      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800542c <HAL_RCC_GetSysClockFreq+0x2ec>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b40      	ldr	r3, [pc, #256]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a02 	vldr	s12, [r7, #8]
 8005326:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005342:	e043      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005430 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b2f      	ldr	r3, [pc, #188]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a02 	vldr	s12, [r7, #8]
 800536a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005386:	e021      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800542c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b1e      	ldr	r3, [pc, #120]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053cc:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	0a5b      	lsrs	r3, r3, #9
 80053d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d6:	3301      	adds	r3, #1
 80053d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f0:	ee17 3a90 	vmov	r3, s15
 80053f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053f6:	e005      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
      break;
 80053fc:	e002      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053fe:	4b07      	ldr	r3, [pc, #28]	@ (800541c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005400:	61bb      	str	r3, [r7, #24]
      break;
 8005402:	bf00      	nop
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	@ 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	03d09000 	.word	0x03d09000
 800541c:	003d0900 	.word	0x003d0900
 8005420:	02dc6c00 	.word	0x02dc6c00
 8005424:	46000000 	.word	0x46000000
 8005428:	4c742400 	.word	0x4c742400
 800542c:	4a742400 	.word	0x4a742400
 8005430:	4c371b00 	.word	0x4c371b00

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800543a:	f7ff fe81 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800543e:	4602      	mov	r2, r0
 8005440:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x50>)
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	490f      	ldr	r1, [pc, #60]	@ (8005488 <HAL_RCC_GetHCLKFreq+0x54>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005458:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x50>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <HAL_RCC_GetHCLKFreq+0x54>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <HAL_RCC_GetHCLKFreq+0x58>)
 8005470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005472:	4a07      	ldr	r2, [pc, #28]	@ (8005490 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005478:	4b04      	ldr	r3, [pc, #16]	@ (800548c <HAL_RCC_GetHCLKFreq+0x58>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	58024400 	.word	0x58024400
 8005488:	080101f4 	.word	0x080101f4
 800548c:	24000004 	.word	0x24000004
 8005490:	24000000 	.word	0x24000000

08005494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005498:	f7ff ffcc 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4904      	ldr	r1, [pc, #16]	@ (80054bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	58024400 	.word	0x58024400
 80054bc:	080101f4 	.word	0x080101f4

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80054c4:	f7ff ffb6 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4904      	ldr	r1, [pc, #16]	@ (80054e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024400 	.word	0x58024400
 80054e8:	080101f4 	.word	0x080101f4

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f0:	b0c8      	sub	sp, #288	@ 0x120
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005510:	2500      	movs	r5, #0
 8005512:	ea54 0305 	orrs.w	r3, r4, r5
 8005516:	d049      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800551c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800551e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005528:	d828      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800552a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800552e:	d01a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005534:	d822      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800553a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800553e:	d007      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005540:	e01c      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005542:	4ba7      	ldr	r3, [pc, #668]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	4aa6      	ldr	r2, [pc, #664]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800554c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800554e:	e01a      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005554:	3308      	adds	r3, #8
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f002 fa6d 	bl	8007a38 <RCCEx_PLL2_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005564:	e00f      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800556a:	3328      	adds	r3, #40	@ 0x28
 800556c:	2102      	movs	r1, #2
 800556e:	4618      	mov	r0, r3
 8005570:	f002 fb14 	bl	8007b9c <RCCEx_PLL3_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800557a:	e004      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005582:	e000      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005586:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800558e:	4b94      	ldr	r3, [pc, #592]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005592:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800559a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559c:	4a90      	ldr	r2, [pc, #576]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559e:	430b      	orrs	r3, r1
 80055a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80055b8:	f04f 0900 	mov.w	r9, #0
 80055bc:	ea58 0309 	orrs.w	r3, r8, r9
 80055c0:	d047      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80055c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d82a      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055cc:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e9 	.word	0x080055e9
 80055d8:	080055f7 	.word	0x080055f7
 80055dc:	0800560d 	.word	0x0800560d
 80055e0:	0800562b 	.word	0x0800562b
 80055e4:	0800562b 	.word	0x0800562b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e8:	4b7d      	ldr	r3, [pc, #500]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	4a7c      	ldr	r2, [pc, #496]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055f4:	e01a      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055fa:	3308      	adds	r3, #8
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f002 fa1a 	bl	8007a38 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800560a:	e00f      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800560c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005610:	3328      	adds	r3, #40	@ 0x28
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f002 fac1 	bl	8007b9c <RCCEx_PLL3_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005620:	e004      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800562a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005634:	4b6a      	ldr	r3, [pc, #424]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	f023 0107 	bic.w	r1, r3, #7
 800563c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	4a67      	ldr	r2, [pc, #412]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005644:	430b      	orrs	r3, r1
 8005646:	6513      	str	r3, [r2, #80]	@ 0x50
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800564e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800565e:	f04f 0b00 	mov.w	fp, #0
 8005662:	ea5a 030b 	orrs.w	r3, sl, fp
 8005666:	d054      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800566c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005672:	d036      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005674:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005678:	d82f      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800567a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567e:	d032      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005684:	d829      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005686:	2bc0      	cmp	r3, #192	@ 0xc0
 8005688:	d02f      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800568a:	2bc0      	cmp	r3, #192	@ 0xc0
 800568c:	d825      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800568e:	2b80      	cmp	r3, #128	@ 0x80
 8005690:	d018      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005692:	2b80      	cmp	r3, #128	@ 0x80
 8005694:	d821      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	d007      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800569e:	e01c      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a0:	4b4f      	ldr	r3, [pc, #316]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	4a4e      	ldr	r2, [pc, #312]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056ac:	e01e      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b2:	3308      	adds	r3, #8
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 f9be 	bl	8007a38 <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056c2:	e013      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056c8:	3328      	adds	r3, #40	@ 0x28
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 fa65 	bl	8007b9c <RCCEx_PLL3_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056d8:	e008      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056e0:	e004      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80056ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80056f4:	4b3a      	ldr	r3, [pc, #232]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005702:	4a37      	ldr	r2, [pc, #220]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005704:	430b      	orrs	r3, r1
 8005706:	6513      	str	r3, [r2, #80]	@ 0x50
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800570e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800571e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005728:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800572c:	460b      	mov	r3, r1
 800572e:	4313      	orrs	r3, r2
 8005730:	d05c      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005738:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800573c:	d03b      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800573e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005742:	d834      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005748:	d037      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800574a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800574e:	d82e      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005750:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005754:	d033      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005756:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800575a:	d828      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005760:	d01a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005766:	d822      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800576c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005770:	d007      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005772:	e01c      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005774:	4b1a      	ldr	r3, [pc, #104]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	4a19      	ldr	r2, [pc, #100]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800577a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800577e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005780:	e01e      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005786:	3308      	adds	r3, #8
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f002 f954 	bl	8007a38 <RCCEx_PLL2_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005796:	e013      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579c:	3328      	adds	r3, #40	@ 0x28
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f002 f9fb 	bl	8007b9c <RCCEx_PLL3_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057ac:	e008      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057b4:	e004      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057b6:	bf00      	nop
 80057b8:	e002      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10d      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80057c8:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057cc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d6:	4a02      	ldr	r2, [pc, #8]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057d8:	430b      	orrs	r3, r1
 80057da:	6513      	str	r3, [r2, #80]	@ 0x50
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x300>
 80057de:	bf00      	nop
 80057e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80057f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005802:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d03a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005812:	2b30      	cmp	r3, #48	@ 0x30
 8005814:	d01f      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005816:	2b30      	cmp	r3, #48	@ 0x30
 8005818:	d819      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800581a:	2b20      	cmp	r3, #32
 800581c:	d00c      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800581e:	2b20      	cmp	r3, #32
 8005820:	d815      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d019      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005826:	2b10      	cmp	r3, #16
 8005828:	d111      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582a:	4bae      	ldr	r3, [pc, #696]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800582c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582e:	4aad      	ldr	r2, [pc, #692]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005834:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005836:	e011      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583c:	3308      	adds	r3, #8
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f002 f8f9 	bl	8007a38 <RCCEx_PLL2_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800584c:	e006      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005854:	e002      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800585a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005864:	4b9f      	ldr	r3, [pc, #636]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005868:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	4a9c      	ldr	r2, [pc, #624]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005874:	430b      	orrs	r3, r1
 8005876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005878:	e003      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800587e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800588e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005892:	2300      	movs	r3, #0
 8005894:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005898:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800589c:	460b      	mov	r3, r1
 800589e:	4313      	orrs	r3, r2
 80058a0:	d051      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ac:	d035      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80058ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058b2:	d82e      	bhi.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058b8:	d031      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80058ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058be:	d828      	bhi.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c4:	d01a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80058c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ca:	d822      	bhi.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80058d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d4:	d007      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80058d6:	e01c      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d8:	4b82      	ldr	r3, [pc, #520]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	4a81      	ldr	r2, [pc, #516]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058e4:	e01c      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ea:	3308      	adds	r3, #8
 80058ec:	2100      	movs	r1, #0
 80058ee:	4618      	mov	r0, r3
 80058f0:	f002 f8a2 	bl	8007a38 <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058fa:	e011      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005900:	3328      	adds	r3, #40	@ 0x28
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f002 f949 	bl	8007b9c <RCCEx_PLL3_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005910:	e006      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005918:	e002      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800591a:	bf00      	nop
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800591e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005928:	4b6e      	ldr	r3, [pc, #440]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800592a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005936:	4a6b      	ldr	r2, [pc, #428]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005938:	430b      	orrs	r3, r1
 800593a:	6513      	str	r3, [r2, #80]	@ 0x50
 800593c:	e003      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005942:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800595c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005960:	460b      	mov	r3, r1
 8005962:	4313      	orrs	r3, r2
 8005964:	d053      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800596c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005970:	d033      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005972:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005976:	d82c      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005978:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800597c:	d02f      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800597e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005982:	d826      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005988:	d02b      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800598a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800598e:	d820      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005994:	d012      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800599a:	d81a      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d022      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a4:	d115      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059aa:	3308      	adds	r3, #8
 80059ac:	2101      	movs	r1, #1
 80059ae:	4618      	mov	r0, r3
 80059b0:	f002 f842 	bl	8007a38 <RCCEx_PLL2_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059ba:	e015      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c0:	3328      	adds	r3, #40	@ 0x28
 80059c2:	2101      	movs	r1, #1
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 f8e9 	bl	8007b9c <RCCEx_PLL3_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059d0:	e00a      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059d8:	e006      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059da:	bf00      	nop
 80059dc:	e004      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059f0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059fe:	4a39      	ldr	r2, [pc, #228]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a04:	e003      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a24:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d060      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a36:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a3a:	d039      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005a3c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a40:	d832      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a46:	d035      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a4c:	d82c      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a52:	d031      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a58:	d826      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a5e:	d02d      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005a60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a64:	d820      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a6a:	d012      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a70:	d81a      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d024      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a7a:	d115      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a80:	3308      	adds	r3, #8
 8005a82:	2101      	movs	r1, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 ffd7 	bl	8007a38 <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a90:	e017      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a96:	3328      	adds	r3, #40	@ 0x28
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f002 f87e 	bl	8007b9c <RCCEx_PLL3_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aa6:	e00c      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005aae:	e008      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e006      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ab4:	bf00      	nop
 8005ab6:	e004      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ab8:	bf00      	nop
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005abc:	bf00      	nop
 8005abe:	e000      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ada:	4a02      	ldr	r2, [pc, #8]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ae0:	e006      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005ae2:	bf00      	nop
 8005ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b00:	2300      	movs	r3, #0
 8005b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	d037      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b1a:	d00e      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b20:	d816      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b2a:	d111      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2c:	4bc4      	ldr	r3, [pc, #784]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	4ac3      	ldr	r2, [pc, #780]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b38:	e00f      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b3e:	3308      	adds	r3, #8
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 ff78 	bl	8007a38 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b4e:	e004      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b62:	4bb7      	ldr	r3, [pc, #732]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b70:	4ab3      	ldr	r2, [pc, #716]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b72:	430b      	orrs	r3, r1
 8005b74:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b76:	e003      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	d039      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d81c      	bhi.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005baa:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb0:	08005bed 	.word	0x08005bed
 8005bb4:	08005bc1 	.word	0x08005bc1
 8005bb8:	08005bcf 	.word	0x08005bcf
 8005bbc:	08005bed 	.word	0x08005bed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc0:	4b9f      	ldr	r3, [pc, #636]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	4a9e      	ldr	r2, [pc, #632]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bcc:	e00f      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 ff2e 	bl	8007a38 <RCCEx_PLL2_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005be2:	e004      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005bea:	e000      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bf6:	4b92      	ldr	r3, [pc, #584]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfa:	f023 0103 	bic.w	r1, r3, #3
 8005bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c04:	4a8e      	ldr	r2, [pc, #568]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c0a:	e003      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c24:	2300      	movs	r3, #0
 8005c26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f000 8099 	beq.w	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c36:	4b83      	ldr	r3, [pc, #524]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a82      	ldr	r2, [pc, #520]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c42:	f7fb fda1 	bl	8001788 <HAL_GetTick>
 8005c46:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c4a:	e00b      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fb fd9c 	bl	8001788 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b64      	cmp	r3, #100	@ 0x64
 8005c5a:	d903      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c62:	e005      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c64:	4b77      	ldr	r3, [pc, #476]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ed      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005c70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d173      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c78:	4b71      	ldr	r3, [pc, #452]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c84:	4053      	eors	r3, r2
 8005c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d015      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c9a:	4b69      	ldr	r3, [pc, #420]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9e:	4a68      	ldr	r2, [pc, #416]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca6:	4b66      	ldr	r3, [pc, #408]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005caa:	4a65      	ldr	r2, [pc, #404]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cb2:	4a63      	ldr	r2, [pc, #396]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc6:	d118      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fb fd5e 	bl	8001788 <HAL_GetTick>
 8005ccc:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cd0:	e00d      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fb fd59 	bl	8001788 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d903      	bls.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005cec:	e005      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cee:	4b54      	ldr	r3, [pc, #336]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0eb      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005cfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d129      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d12:	d10e      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005d14:	4b4a      	ldr	r3, [pc, #296]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d24:	091a      	lsrs	r2, r3, #4
 8005d26:	4b48      	ldr	r3, [pc, #288]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	4a45      	ldr	r2, [pc, #276]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	6113      	str	r3, [r2, #16]
 8005d30:	e005      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005d32:	4b43      	ldr	r3, [pc, #268]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4a42      	ldr	r2, [pc, #264]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d3c:	6113      	str	r3, [r2, #16]
 8005d3e:	4b40      	ldr	r3, [pc, #256]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d54:	e008      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f002 0301 	and.w	r3, r2, #1
 8005d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f000 8090 	beq.w	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d92:	2b28      	cmp	r3, #40	@ 0x28
 8005d94:	d870      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005e81 	.word	0x08005e81
 8005da0:	08005e79 	.word	0x08005e79
 8005da4:	08005e79 	.word	0x08005e79
 8005da8:	08005e79 	.word	0x08005e79
 8005dac:	08005e79 	.word	0x08005e79
 8005db0:	08005e79 	.word	0x08005e79
 8005db4:	08005e79 	.word	0x08005e79
 8005db8:	08005e79 	.word	0x08005e79
 8005dbc:	08005e4d 	.word	0x08005e4d
 8005dc0:	08005e79 	.word	0x08005e79
 8005dc4:	08005e79 	.word	0x08005e79
 8005dc8:	08005e79 	.word	0x08005e79
 8005dcc:	08005e79 	.word	0x08005e79
 8005dd0:	08005e79 	.word	0x08005e79
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005e79 	.word	0x08005e79
 8005ddc:	08005e63 	.word	0x08005e63
 8005de0:	08005e79 	.word	0x08005e79
 8005de4:	08005e79 	.word	0x08005e79
 8005de8:	08005e79 	.word	0x08005e79
 8005dec:	08005e79 	.word	0x08005e79
 8005df0:	08005e79 	.word	0x08005e79
 8005df4:	08005e79 	.word	0x08005e79
 8005df8:	08005e79 	.word	0x08005e79
 8005dfc:	08005e81 	.word	0x08005e81
 8005e00:	08005e79 	.word	0x08005e79
 8005e04:	08005e79 	.word	0x08005e79
 8005e08:	08005e79 	.word	0x08005e79
 8005e0c:	08005e79 	.word	0x08005e79
 8005e10:	08005e79 	.word	0x08005e79
 8005e14:	08005e79 	.word	0x08005e79
 8005e18:	08005e79 	.word	0x08005e79
 8005e1c:	08005e81 	.word	0x08005e81
 8005e20:	08005e79 	.word	0x08005e79
 8005e24:	08005e79 	.word	0x08005e79
 8005e28:	08005e79 	.word	0x08005e79
 8005e2c:	08005e79 	.word	0x08005e79
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005e79 	.word	0x08005e79
 8005e38:	08005e79 	.word	0x08005e79
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	58024400 	.word	0x58024400
 8005e44:	58024800 	.word	0x58024800
 8005e48:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e50:	3308      	adds	r3, #8
 8005e52:	2101      	movs	r1, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 fdef 	bl	8007a38 <RCCEx_PLL2_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e60:	e00f      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e66:	3328      	adds	r3, #40	@ 0x28
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fe96 	bl	8007b9c <RCCEx_PLL3_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e76:	e004      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e7e:	e000      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e8a:	4bc0      	ldr	r3, [pc, #768]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e9a:	4abc      	ldr	r2, [pc, #752]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ea0:	e003      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ea6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f002 0302 	and.w	r3, r2, #2
 8005eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ec0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d043      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	d824      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f29 	.word	0x08005f29
 8005ee0:	08005ef5 	.word	0x08005ef5
 8005ee4:	08005f0b 	.word	0x08005f0b
 8005ee8:	08005f29 	.word	0x08005f29
 8005eec:	08005f29 	.word	0x08005f29
 8005ef0:	08005f29 	.word	0x08005f29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ef8:	3308      	adds	r3, #8
 8005efa:	2101      	movs	r1, #1
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fd9b 	bl	8007a38 <RCCEx_PLL2_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f08:	e00f      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f0e:	3328      	adds	r3, #40	@ 0x28
 8005f10:	2101      	movs	r1, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 fe42 	bl	8007b9c <RCCEx_PLL3_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f1e:	e004      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f26:	e000      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10b      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f32:	4b96      	ldr	r3, [pc, #600]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f36:	f023 0107 	bic.w	r1, r3, #7
 8005f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f42:	4a92      	ldr	r2, [pc, #584]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f48:	e003      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f002 0304 	and.w	r3, r2, #4
 8005f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f62:	2300      	movs	r3, #0
 8005f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f68:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	d043      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d824      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005f9d 	.word	0x08005f9d
 8005f8c:	08005fb3 	.word	0x08005fb3
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 fd47 	bl	8007a38 <RCCEx_PLL2_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fb0:	e00f      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb6:	3328      	adds	r3, #40	@ 0x28
 8005fb8:	2101      	movs	r1, #1
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fdee 	bl	8007b9c <RCCEx_PLL3_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fc6:	e004      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fda:	4b6c      	ldr	r3, [pc, #432]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	f023 0107 	bic.w	r1, r3, #7
 8005fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fea:	4a68      	ldr	r2, [pc, #416]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ff6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f002 0320 	and.w	r3, r2, #32
 8006006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800600a:	2300      	movs	r3, #0
 800600c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d055      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800601a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800601e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006026:	d033      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602c:	d82c      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d02f      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d826      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800603a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800603e:	d02b      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006044:	d820      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604a:	d012      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d81a      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d022      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800605a:	d115      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800605c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006060:	3308      	adds	r3, #8
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fce7 	bl	8007a38 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006070:	e015      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006076:	3328      	adds	r3, #40	@ 0x28
 8006078:	2102      	movs	r1, #2
 800607a:	4618      	mov	r0, r3
 800607c:	f001 fd8e 	bl	8007b9c <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006086:	e00a      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800608e:	e006      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006090:	bf00      	nop
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a6:	4b39      	ldr	r3, [pc, #228]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b6:	4a35      	ldr	r2, [pc, #212]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d058      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060f2:	d033      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80060f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060f8:	d82c      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fe:	d02f      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006104:	d826      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800610a:	d02b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800610c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006110:	d820      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006116:	d012      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800611c:	d81a      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d022      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006126:	d115      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800612c:	3308      	adds	r3, #8
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f001 fc81 	bl	8007a38 <RCCEx_PLL2_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800613c:	e015      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800613e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006142:	3328      	adds	r3, #40	@ 0x28
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f001 fd28 	bl	8007b9c <RCCEx_PLL3_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006152:	e00a      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800615a:	e006      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800615c:	bf00      	nop
 800615e:	e004      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006160:	bf00      	nop
 8006162:	e002      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006164:	bf00      	nop
 8006166:	e000      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10e      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006176:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800617a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800617e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006182:	4a02      	ldr	r2, [pc, #8]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006184:	430b      	orrs	r3, r1
 8006186:	6593      	str	r3, [r2, #88]	@ 0x58
 8006188:	e006      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006194:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061a8:	2300      	movs	r3, #0
 80061aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d055      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061c4:	d033      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80061c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061ca:	d82c      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80061cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d0:	d02f      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80061d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d6:	d826      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80061d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061dc:	d02b      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80061de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061e2:	d820      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80061e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e8:	d012      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80061ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ee:	d81a      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d022      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80061f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f8:	d115      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fe:	3308      	adds	r3, #8
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fc18 	bl	8007a38 <RCCEx_PLL2_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800620e:	e015      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006214:	3328      	adds	r3, #40	@ 0x28
 8006216:	2102      	movs	r1, #2
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fcbf 	bl	8007b9c <RCCEx_PLL3_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006224:	e00a      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800622c:	e006      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800622e:	bf00      	nop
 8006230:	e004      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006232:	bf00      	nop
 8006234:	e002      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800623a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006244:	4ba1      	ldr	r3, [pc, #644]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006248:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800624c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006250:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006254:	4a9d      	ldr	r2, [pc, #628]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006256:	430b      	orrs	r3, r1
 8006258:	6593      	str	r3, [r2, #88]	@ 0x58
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006260:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f002 0308 	and.w	r3, r2, #8
 8006270:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800627a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	d01e      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006290:	d10c      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006296:	3328      	adds	r3, #40	@ 0x28
 8006298:	2102      	movs	r1, #2
 800629a:	4618      	mov	r0, r3
 800629c:	f001 fc7e 	bl	8007b9c <RCCEx_PLL3_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062ac:	4b87      	ldr	r3, [pc, #540]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062bc:	4a83      	ldr	r2, [pc, #524]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f002 0310 	and.w	r3, r2, #16
 80062ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d01e      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ee:	d10c      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062f4:	3328      	adds	r3, #40	@ 0x28
 80062f6:	2102      	movs	r1, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fc4f 	bl	8007b9c <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800630a:	4b70      	ldr	r3, [pc, #448]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800631a:	4a6c      	ldr	r2, [pc, #432]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800631c:	430b      	orrs	r3, r1
 800631e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800632c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006336:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d03e      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800634c:	d022      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800634e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006352:	d81b      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800635c:	d00b      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800635e:	e015      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006364:	3308      	adds	r3, #8
 8006366:	2100      	movs	r1, #0
 8006368:	4618      	mov	r0, r3
 800636a:	f001 fb65 	bl	8007a38 <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006374:	e00f      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800637a:	3328      	adds	r3, #40	@ 0x28
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fc0c 	bl	8007b9c <RCCEx_PLL3_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800638a:	e004      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006396:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800639e:	4b4b      	ldr	r3, [pc, #300]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063ae:	4a47      	ldr	r2, [pc, #284]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063cc:	2300      	movs	r3, #0
 80063ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d03b      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063e6:	d01f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80063e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063ec:	d818      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80063ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80063f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063f8:	d007      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80063fa:	e011      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fc:	4b33      	ldr	r3, [pc, #204]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	4a32      	ldr	r2, [pc, #200]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006408:	e00f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800640e:	3328      	adds	r3, #40	@ 0x28
 8006410:	2101      	movs	r1, #1
 8006412:	4618      	mov	r0, r3
 8006414:	f001 fbc2 	bl	8007b9c <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800641e:	e004      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006432:	4b26      	ldr	r3, [pc, #152]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006436:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800643a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	4a22      	ldr	r2, [pc, #136]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006444:	430b      	orrs	r3, r1
 8006446:	6553      	str	r3, [r2, #84]	@ 0x54
 8006448:	e003      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800644e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800645e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006460:	2300      	movs	r3, #0
 8006462:	677b      	str	r3, [r7, #116]	@ 0x74
 8006464:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006468:	460b      	mov	r3, r1
 800646a:	4313      	orrs	r3, r2
 800646c:	d034      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800646e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647c:	d007      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800647e:	e011      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	4a11      	ldr	r2, [pc, #68]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800648c:	e00e      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800648e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006492:	3308      	adds	r3, #8
 8006494:	2102      	movs	r1, #2
 8006496:	4618      	mov	r0, r3
 8006498:	f001 face 	bl	8007a38 <RCCEx_PLL2_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064a2:	e003      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c2:	4a02      	ldr	r2, [pc, #8]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064c8:	e006      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80064ca:	bf00      	nop
 80064cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e6:	2300      	movs	r3, #0
 80064e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d00c      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f8:	3328      	adds	r3, #40	@ 0x28
 80064fa:	2102      	movs	r1, #2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 fb4d 	bl	8007b9c <RCCEx_PLL3_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800650e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800651a:	663b      	str	r3, [r7, #96]	@ 0x60
 800651c:	2300      	movs	r3, #0
 800651e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006520:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006524:	460b      	mov	r3, r1
 8006526:	4313      	orrs	r3, r2
 8006528:	d038      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800652a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006536:	d018      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800653c:	d811      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800653e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006542:	d014      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006548:	d80b      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d011      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800654e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006552:	d106      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4bc3      	ldr	r3, [pc, #780]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006558:	4ac2      	ldr	r2, [pc, #776]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006560:	e008      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800657c:	4bb9      	ldr	r3, [pc, #740]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658c:	4ab5      	ldr	r2, [pc, #724]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6553      	str	r3, [r2, #84]	@ 0x54
 8006592:	e003      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006598:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800659c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065aa:	2300      	movs	r3, #0
 80065ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065b8:	4baa      	ldr	r3, [pc, #680]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065c6:	4aa7      	ldr	r2, [pc, #668]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80065d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80065da:	2300      	movs	r3, #0
 80065dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80065de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065e2:	460b      	mov	r3, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	d009      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065e8:	4b9e      	ldr	r3, [pc, #632]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80065f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f6:	4a9b      	ldr	r2, [pc, #620]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800660a:	2300      	movs	r3, #0
 800660c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006618:	4b92      	ldr	r3, [pc, #584]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800661a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006626:	4a8f      	ldr	r2, [pc, #572]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006628:	430b      	orrs	r3, r1
 800662a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800662c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006638:	643b      	str	r3, [r7, #64]	@ 0x40
 800663a:	2300      	movs	r3, #0
 800663c:	647b      	str	r3, [r7, #68]	@ 0x44
 800663e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d00e      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006648:	4b86      	ldr	r3, [pc, #536]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4a85      	ldr	r2, [pc, #532]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800664e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006652:	6113      	str	r3, [r2, #16]
 8006654:	4b83      	ldr	r3, [pc, #524]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006656:	6919      	ldr	r1, [r3, #16]
 8006658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800665c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006660:	4a80      	ldr	r2, [pc, #512]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006662:	430b      	orrs	r3, r1
 8006664:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006678:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800667c:	460b      	mov	r3, r1
 800667e:	4313      	orrs	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006682:	4b78      	ldr	r3, [pc, #480]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006686:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800668a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800668e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006690:	4a74      	ldr	r2, [pc, #464]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006692:	430b      	orrs	r3, r1
 8006694:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066a4:	2300      	movs	r3, #0
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066ac:	460b      	mov	r3, r1
 80066ae:	4313      	orrs	r3, r2
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066c2:	4a68      	ldr	r2, [pc, #416]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	2100      	movs	r1, #0
 80066d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066de:	460b      	mov	r3, r1
 80066e0:	4313      	orrs	r3, r2
 80066e2:	d011      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066e8:	3308      	adds	r3, #8
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 f9a3 	bl	8007a38 <RCCEx_PLL2_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80066f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006700:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006704:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	2100      	movs	r1, #0
 8006712:	6239      	str	r1, [r7, #32]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	627b      	str	r3, [r7, #36]	@ 0x24
 800671a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d011      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006728:	3308      	adds	r3, #8
 800672a:	2101      	movs	r1, #1
 800672c:	4618      	mov	r0, r3
 800672e:	f001 f983 	bl	8007a38 <RCCEx_PLL2_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006738:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006744:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	2100      	movs	r1, #0
 8006752:	61b9      	str	r1, [r7, #24]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800675e:	460b      	mov	r3, r1
 8006760:	4313      	orrs	r3, r2
 8006762:	d011      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006768:	3308      	adds	r3, #8
 800676a:	2102      	movs	r1, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f001 f963 	bl	8007a38 <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006778:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006784:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	2100      	movs	r1, #0
 8006792:	6139      	str	r1, [r7, #16]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800679e:	460b      	mov	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	d011      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a8:	3328      	adds	r3, #40	@ 0x28
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 f9f5 	bl	8007b9c <RCCEx_PLL3_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80067b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	2100      	movs	r1, #0
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067de:	460b      	mov	r3, r1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	d011      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e8:	3328      	adds	r3, #40	@ 0x28
 80067ea:	2101      	movs	r1, #1
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 f9d5 	bl	8007b9c <RCCEx_PLL3_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80067f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006804:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	2100      	movs	r1, #0
 8006812:	6039      	str	r1, [r7, #0]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	607b      	str	r3, [r7, #4]
 800681a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d011      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006828:	3328      	adds	r3, #40	@ 0x28
 800682a:	2102      	movs	r1, #2
 800682c:	4618      	mov	r0, r3
 800682e:	f001 f9b5 	bl	8007b9c <RCCEx_PLL3_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006848:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
}
 8006856:	4618      	mov	r0, r3
 8006858:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400

08006868 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b090      	sub	sp, #64	@ 0x40
 800686c:	af00      	add	r7, sp, #0
 800686e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006876:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800687a:	430b      	orrs	r3, r1
 800687c:	f040 8094 	bne.w	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006880:	4b97      	ldr	r3, [pc, #604]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	2b04      	cmp	r3, #4
 800688e:	f200 8087 	bhi.w	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006892:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068ad 	.word	0x080068ad
 800689c:	080068d5 	.word	0x080068d5
 80068a0:	080068fd 	.word	0x080068fd
 80068a4:	08006999 	.word	0x08006999
 80068a8:	08006925 	.word	0x08006925
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068ac:	4b8c      	ldr	r3, [pc, #560]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068b8:	d108      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 ff68 	bl	8007794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c8:	f000 bc97 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068d0:	f000 bc93 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068d4:	4b82      	ldr	r3, [pc, #520]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068e0:	d108      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e2:	f107 0318 	add.w	r3, r7, #24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fcac 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f0:	f000 bc83 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f8:	f000 bc7f 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068fc:	4b78      	ldr	r3, [pc, #480]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006908:	d108      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800690a:	f107 030c 	add.w	r3, r7, #12
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fdec 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006918:	f000 bc6f 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006920:	f000 bc6b 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006924:	4b6e      	ldr	r3, [pc, #440]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006928:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800692e:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b04      	cmp	r3, #4
 8006938:	d10c      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800693a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006940:	4b67      	ldr	r3, [pc, #412]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	08db      	lsrs	r3, r3, #3
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	4a66      	ldr	r2, [pc, #408]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006952:	e01f      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006954:	4b62      	ldr	r3, [pc, #392]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006960:	d106      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006968:	d102      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800696a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800696e:	e011      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006970:	4b5b      	ldr	r3, [pc, #364]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800697c:	d106      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800697e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006984:	d102      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006986:	4b59      	ldr	r3, [pc, #356]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800698a:	e003      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006990:	f000 bc33 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006994:	f000 bc31 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006998:	4b55      	ldr	r3, [pc, #340]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	f000 bc2d 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a4:	f000 bc29 	b.w	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80069a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80069b0:	430b      	orrs	r3, r1
 80069b2:	f040 809f 	bne.w	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80069b6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80069be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c6:	d04d      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ce:	f200 8084 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d6:	d07d      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	2bc0      	cmp	r3, #192	@ 0xc0
 80069dc:	d87d      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	2b80      	cmp	r3, #128	@ 0x80
 80069e2:	d02d      	beq.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	2b80      	cmp	r3, #128	@ 0x80
 80069e8:	d877      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	2b40      	cmp	r3, #64	@ 0x40
 80069f4:	d012      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80069f6:	e070      	b.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069f8:	4b39      	ldr	r3, [pc, #228]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a04:	d107      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fec2 	bl	8007794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a14:	e3f1      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a1a:	e3ee      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a1c:	4b30      	ldr	r3, [pc, #192]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2a:	f107 0318 	add.w	r3, r7, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fc08 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a38:	e3df      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a3e:	e3dc      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a40:	4b27      	ldr	r3, [pc, #156]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fd4a 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a5c:	e3cd      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a62:	e3ca      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a64:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d10c      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a80:	4b17      	ldr	r3, [pc, #92]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a92:	e01e      	b.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a94:	4b12      	ldr	r3, [pc, #72]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aa0:	d106      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa8:	d102      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aae:	e010      	b.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006abc:	d106      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ac4:	d102      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ac6:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aca:	e002      	b.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ad0:	e393      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006ad2:	e392      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ad4:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad8:	e38f      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ade:	e38c      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	03d09000 	.word	0x03d09000
 8006ae8:	003d0900 	.word	0x003d0900
 8006aec:	02dc6c00 	.word	0x02dc6c00
 8006af0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006afc:	430b      	orrs	r3, r1
 8006afe:	f040 809c 	bne.w	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8006b02:	4b9e      	ldr	r3, [pc, #632]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b06:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006b0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b12:	d054      	beq.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1a:	f200 808b 	bhi.w	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b24:	f000 8083 	beq.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b2e:	f200 8081 	bhi.w	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b38:	d02f      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b40:	d878      	bhi.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b4e:	d012      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006b50:	e070      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b52:	4b8a      	ldr	r3, [pc, #552]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fe15 	bl	8007794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b6e:	e344      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b74:	e341      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b76:	4b81      	ldr	r3, [pc, #516]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b82:	d107      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b84:	f107 0318 	add.w	r3, r7, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fb5b 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b92:	e332      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b98:	e32f      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b9a:	4b78      	ldr	r3, [pc, #480]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba6:	d107      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba8:	f107 030c 	add.w	r3, r7, #12
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fc9d 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bb6:	e320      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bbc:	e31d      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d10c      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d109      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bda:	4b68      	ldr	r3, [pc, #416]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	08db      	lsrs	r3, r3, #3
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	4a66      	ldr	r2, [pc, #408]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006be6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bec:	e01e      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bee:	4b63      	ldr	r3, [pc, #396]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfa:	d106      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c02:	d102      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c04:	4b5f      	ldr	r3, [pc, #380]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c08:	e010      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c16:	d106      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c1e:	d102      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c20:	4b59      	ldr	r3, [pc, #356]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c24:	e002      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8006c2a:	e2e6      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c2c:	e2e5      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c2e:	4b57      	ldr	r3, [pc, #348]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c32:	e2e2      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c38:	e2df      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006c42:	430b      	orrs	r3, r1
 8006c44:	f040 80a7 	bne.w	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006c48:	4b4c      	ldr	r3, [pc, #304]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006c50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c58:	d055      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c60:	f200 8096 	bhi.w	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c6a:	f000 8084 	beq.w	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c74:	f200 808c 	bhi.w	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c7e:	d030      	beq.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c86:	f200 8083 	bhi.w	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c96:	d012      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006c98:	e07a      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c9a:	4b38      	ldr	r3, [pc, #224]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fd71 	bl	8007794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cb6:	e2a0      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cbc:	e29d      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cca:	d107      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ccc:	f107 0318 	add.w	r3, r7, #24
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fab7 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cda:	e28e      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce0:	e28b      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce2:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cee:	d107      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf0:	f107 030c 	add.w	r3, r7, #12
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fbf9 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cfe:	e27c      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d04:	e279      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d06:	4b1d      	ldr	r3, [pc, #116]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d10:	4b1a      	ldr	r3, [pc, #104]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d10c      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d22:	4b16      	ldr	r3, [pc, #88]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	08db      	lsrs	r3, r3, #3
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	4a14      	ldr	r2, [pc, #80]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d34:	e01e      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d36:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d42:	d106      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d50:	e010      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d52:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d66:	d102      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d68:	4b07      	ldr	r3, [pc, #28]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d72:	e242      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006d74:	e241      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d76:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7a:	e23e      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006d7c:	58024400 	.word	0x58024400
 8006d80:	03d09000 	.word	0x03d09000
 8006d84:	003d0900 	.word	0x003d0900
 8006d88:	02dc6c00 	.word	0x02dc6c00
 8006d8c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d94:	e231      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d9a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	f040 8085 	bne.w	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006da4:	4b9c      	ldr	r3, [pc, #624]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006dac:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006db4:	d06b      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dbc:	d874      	bhi.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dc4:	d056      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dcc:	d86c      	bhi.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dd4:	d03b      	beq.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ddc:	d864      	bhi.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006de4:	d021      	beq.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dec:	d85c      	bhi.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dfa:	d004      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006dfc:	e054      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006dfe:	f7fe fb49 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8006e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e04:	e1f9      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e06:	4b84      	ldr	r3, [pc, #528]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e12:	d107      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e14:	f107 0318 	add.w	r3, r7, #24
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fa13 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e22:	e1ea      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e28:	e1e7      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e36:	d107      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e38:	f107 030c 	add.w	r3, r7, #12
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fb55 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e46:	e1d8      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4c:	e1d5      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e4e:	4b72      	ldr	r3, [pc, #456]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d109      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	08db      	lsrs	r3, r3, #3
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	4a6d      	ldr	r2, [pc, #436]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e66:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e6c:	e1c5      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e72:	e1c2      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e74:	4b68      	ldr	r3, [pc, #416]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e80:	d102      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006e82:	4b67      	ldr	r3, [pc, #412]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e86:	e1b8      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8c:	e1b5      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e8e:	4b62      	ldr	r3, [pc, #392]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e9a:	d102      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006e9c:	4b61      	ldr	r3, [pc, #388]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea0:	e1ab      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea6:	e1a8      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eac:	e1a5      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	d173      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006eba:	4b57      	ldr	r3, [pc, #348]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ec2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eca:	d02f      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed2:	d863      	bhi.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee0:	d012      	beq.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006ee2:	e05b      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ef0:	d107      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef2:	f107 0318 	add.w	r3, r7, #24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 f9a4 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f00:	e17b      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f06:	e178      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f08:	4b43      	ldr	r3, [pc, #268]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f14:	d107      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f16:	f107 030c 	add.w	r3, r7, #12
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fae6 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f24:	e169      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f2a:	e166      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f36:	4b38      	ldr	r3, [pc, #224]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d10c      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f48:	4b33      	ldr	r3, [pc, #204]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	08db      	lsrs	r3, r3, #3
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	4a32      	ldr	r2, [pc, #200]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
 8006f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f5a:	e01e      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f68:	d106      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f70:	d102      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f72:	4b2b      	ldr	r3, [pc, #172]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f76:	e010      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f78:	4b27      	ldr	r3, [pc, #156]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f84:	d106      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f8c:	d102      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f8e:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f92:	e002      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f98:	e12f      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f9a:	e12e      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa0:	e12b      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006faa:	430b      	orrs	r3, r1
 8006fac:	d13c      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006fae:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc4:	d012      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006fc6:	e023      	b.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fc8:	4b13      	ldr	r3, [pc, #76]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd4:	d107      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fbda 	bl	8007794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe4:	e109      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fea:	e106      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ff8:	d107      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ffa:	f107 0318 	add.w	r3, r7, #24
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f920 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007008:	e0f7      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800700e:	e0f4      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007014:	e0f1      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
 800701c:	03d09000 	.word	0x03d09000
 8007020:	003d0900 	.word	0x003d0900
 8007024:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800702c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007030:	430b      	orrs	r3, r1
 8007032:	f040 8091 	bne.w	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007036:	4b73      	ldr	r3, [pc, #460]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800703e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007042:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007046:	f000 8081 	beq.w	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007050:	d87f      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007058:	d06b      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007060:	d877      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007068:	d056      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800706a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007070:	d86f      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007078:	d03b      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007080:	d867      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007088:	d021      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007090:	d85f      	bhi.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800709e:	d004      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80070a0:	e057      	b.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80070a2:	f000 f8b9 	bl	8007218 <HAL_RCCEx_GetD3PCLK1Freq>
 80070a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070a8:	e0a7      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070aa:	4b56      	ldr	r3, [pc, #344]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070b6:	d107      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b8:	f107 0318 	add.w	r3, r7, #24
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f8c1 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c6:	e098      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070cc:	e095      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070da:	d107      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070dc:	f107 030c 	add.w	r3, r7, #12
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fa03 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ea:	e086      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f0:	e083      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070f2:	4b44      	ldr	r3, [pc, #272]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d109      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070fe:	4b41      	ldr	r3, [pc, #260]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	08db      	lsrs	r3, r3, #3
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	4a3f      	ldr	r2, [pc, #252]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800710a:	fa22 f303 	lsr.w	r3, r2, r3
 800710e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007110:	e073      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007116:	e070      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007118:	4b3a      	ldr	r3, [pc, #232]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007124:	d102      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8007126:	4b39      	ldr	r3, [pc, #228]	@ (800720c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800712a:	e066      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007130:	e063      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007132:	4b34      	ldr	r3, [pc, #208]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800713e:	d102      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007140:	4b33      	ldr	r3, [pc, #204]	@ (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007144:	e059      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714a:	e056      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800714c:	4b31      	ldr	r3, [pc, #196]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007150:	e053      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007156:	e050      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800715c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007160:	430b      	orrs	r3, r1
 8007162:	d148      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007164:	4b27      	ldr	r3, [pc, #156]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007168:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800716c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007174:	d02a      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800717c:	d838      	bhi.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800718a:	d00d      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800718c:	e030      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800718e:	4b1d      	ldr	r3, [pc, #116]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800719a:	d102      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800719c:	4b1c      	ldr	r3, [pc, #112]	@ (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a0:	e02b      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a6:	e028      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071a8:	4b16      	ldr	r3, [pc, #88]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071b4:	d107      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 faea 	bl	8007794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c4:	e019      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ca:	e016      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071d8:	d107      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071da:	f107 0318 	add.w	r3, r7, #24
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f830 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e8:	e007      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ee:	e004      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f4:	e001      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80071fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3740      	adds	r7, #64	@ 0x40
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	58024400 	.word	0x58024400
 8007208:	03d09000 	.word	0x03d09000
 800720c:	003d0900 	.word	0x003d0900
 8007210:	02dc6c00 	.word	0x02dc6c00
 8007214:	00bb8000 	.word	0x00bb8000

08007218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800721c:	f7fe f90a 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8007220:	4602      	mov	r2, r0
 8007222:	4b06      	ldr	r3, [pc, #24]	@ (800723c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	091b      	lsrs	r3, r3, #4
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	4904      	ldr	r1, [pc, #16]	@ (8007240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007238:	4618      	mov	r0, r3
 800723a:	bd80      	pop	{r7, pc}
 800723c:	58024400 	.word	0x58024400
 8007240:	080101f4 	.word	0x080101f4

08007244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007244:	b480      	push	{r7}
 8007246:	b089      	sub	sp, #36	@ 0x24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800724c:	4ba1      	ldr	r3, [pc, #644]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007256:	4b9f      	ldr	r3, [pc, #636]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725a:	0b1b      	lsrs	r3, r3, #12
 800725c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007262:	4b9c      	ldr	r3, [pc, #624]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007266:	091b      	lsrs	r3, r3, #4
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800726e:	4b99      	ldr	r3, [pc, #612]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007272:	08db      	lsrs	r3, r3, #3
 8007274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8111 	beq.w	80074b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b02      	cmp	r3, #2
 8007296:	f000 8083 	beq.w	80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b02      	cmp	r3, #2
 800729e:	f200 80a1 	bhi.w	80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d056      	beq.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072ae:	e099      	b.n	80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072b0:	4b88      	ldr	r3, [pc, #544]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d02d      	beq.n	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072bc:	4b85      	ldr	r3, [pc, #532]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	08db      	lsrs	r3, r3, #3
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	4a84      	ldr	r2, [pc, #528]	@ (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
 80072cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e6:	4b7b      	ldr	r3, [pc, #492]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007312:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007316:	e087      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732a:	4b6a      	ldr	r3, [pc, #424]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733a:	ed97 6a03 	vldr	s12, [r7, #12]
 800733e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735a:	e065      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800736a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736e:	4b59      	ldr	r3, [pc, #356]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007382:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800739e:	e043      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b2:	4b48      	ldr	r3, [pc, #288]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e2:	e021      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f6:	4b37      	ldr	r3, [pc, #220]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007406:	ed97 6a03 	vldr	s12, [r7, #12]
 800740a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800740e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800741a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007428:	4b2a      	ldr	r3, [pc, #168]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800742a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742c:	0a5b      	lsrs	r3, r3, #9
 800742e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800743e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007442:	edd7 6a07 	vldr	s13, [r7, #28]
 8007446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800744a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744e:	ee17 2a90 	vmov	r2, s15
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007456:	4b1f      	ldr	r3, [pc, #124]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007468:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800746c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007470:	edd7 6a07 	vldr	s13, [r7, #28]
 8007474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800747c:	ee17 2a90 	vmov	r2, s15
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007484:	4b13      	ldr	r3, [pc, #76]	@ (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800749a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749e:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074aa:	ee17 2a90 	vmov	r2, s15
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074b2:	e008      	b.n	80074c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	609a      	str	r2, [r3, #8]
}
 80074c6:	bf00      	nop
 80074c8:	3724      	adds	r7, #36	@ 0x24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	58024400 	.word	0x58024400
 80074d8:	03d09000 	.word	0x03d09000
 80074dc:	46000000 	.word	0x46000000
 80074e0:	4c742400 	.word	0x4c742400
 80074e4:	4a742400 	.word	0x4a742400
 80074e8:	4c371b00 	.word	0x4c371b00

080074ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b089      	sub	sp, #36	@ 0x24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074f4:	4ba1      	ldr	r3, [pc, #644]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80074fe:	4b9f      	ldr	r3, [pc, #636]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007502:	0d1b      	lsrs	r3, r3, #20
 8007504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800750a:	4b9c      	ldr	r3, [pc, #624]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007516:	4b99      	ldr	r3, [pc, #612]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751a:	08db      	lsrs	r3, r3, #3
 800751c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8111 	beq.w	800775c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b02      	cmp	r3, #2
 800753e:	f000 8083 	beq.w	8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b02      	cmp	r3, #2
 8007546:	f200 80a1 	bhi.w	800768c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d056      	beq.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007556:	e099      	b.n	800768c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007558:	4b88      	ldr	r3, [pc, #544]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02d      	beq.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007564:	4b85      	ldr	r3, [pc, #532]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	4a84      	ldr	r2, [pc, #528]	@ (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758e:	4b7b      	ldr	r3, [pc, #492]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759e:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075be:	e087      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d2:	4b6a      	ldr	r3, [pc, #424]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007602:	e065      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800778c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007616:	4b59      	ldr	r3, [pc, #356]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007626:	ed97 6a03 	vldr	s12, [r7, #12]
 800762a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800762e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800763a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007646:	e043      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765a:	4b48      	ldr	r3, [pc, #288]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766a:	ed97 6a03 	vldr	s12, [r7, #12]
 800766e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800767e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800768a:	e021      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007696:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800778c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800769a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769e:	4b37      	ldr	r3, [pc, #220]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80076d0:	4b2a      	ldr	r3, [pc, #168]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d4:	0a5b      	lsrs	r3, r3, #9
 80076d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f6:	ee17 2a90 	vmov	r2, s15
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80076fe:	4b1f      	ldr	r3, [pc, #124]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007718:	edd7 6a07 	vldr	s13, [r7, #28]
 800771c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007724:	ee17 2a90 	vmov	r2, s15
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800772c:	4b13      	ldr	r3, [pc, #76]	@ (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007730:	0e1b      	lsrs	r3, r3, #24
 8007732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007746:	edd7 6a07 	vldr	s13, [r7, #28]
 800774a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007752:	ee17 2a90 	vmov	r2, s15
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800775a:	e008      	b.n	800776e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	609a      	str	r2, [r3, #8]
}
 800776e:	bf00      	nop
 8007770:	3724      	adds	r7, #36	@ 0x24
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	58024400 	.word	0x58024400
 8007780:	03d09000 	.word	0x03d09000
 8007784:	46000000 	.word	0x46000000
 8007788:	4c742400 	.word	0x4c742400
 800778c:	4a742400 	.word	0x4a742400
 8007790:	4c371b00 	.word	0x4c371b00

08007794 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007794:	b480      	push	{r7}
 8007796:	b089      	sub	sp, #36	@ 0x24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800779c:	4ba0      	ldr	r3, [pc, #640]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80077a6:	4b9e      	ldr	r3, [pc, #632]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077aa:	091b      	lsrs	r3, r3, #4
 80077ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80077b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077bc:	4b98      	ldr	r3, [pc, #608]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c0:	08db      	lsrs	r3, r3, #3
 80077c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	fb02 f303 	mul.w	r3, r2, r3
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 8111 	beq.w	8007a02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	f000 8083 	beq.w	80078ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	f200 80a1 	bhi.w	8007932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d056      	beq.n	80078aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80077fc:	e099      	b.n	8007932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077fe:	4b88      	ldr	r3, [pc, #544]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02d      	beq.n	8007866 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800780a:	4b85      	ldr	r3, [pc, #532]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	08db      	lsrs	r3, r3, #3
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	4a83      	ldr	r2, [pc, #524]	@ (8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007816:	fa22 f303 	lsr.w	r3, r2, r3
 800781a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007834:	4b7a      	ldr	r3, [pc, #488]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783c:	ee07 3a90 	vmov	s15, r3
 8007840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007844:	ed97 6a03 	vldr	s12, [r7, #12]
 8007848:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800784c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800785c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007860:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007864:	e087      	b.n	8007976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007870:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007878:	4b69      	ldr	r3, [pc, #420]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007888:	ed97 6a03 	vldr	s12, [r7, #12]
 800788c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007898:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800789c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078a8:	e065      	b.n	8007976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	ee07 3a90 	vmov	s15, r3
 80078b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007a30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80078b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078bc:	4b58      	ldr	r3, [pc, #352]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ec:	e043      	b.n	8007976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	ee07 3a90 	vmov	s15, r3
 80078f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80078fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007900:	4b47      	ldr	r3, [pc, #284]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007910:	ed97 6a03 	vldr	s12, [r7, #12]
 8007914:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007920:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007930:	e021      	b.n	8007976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	ee07 3a90 	vmov	s15, r3
 8007938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007944:	4b36      	ldr	r3, [pc, #216]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007954:	ed97 6a03 	vldr	s12, [r7, #12]
 8007958:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800795c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007974:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007976:	4b2a      	ldr	r3, [pc, #168]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	0a5b      	lsrs	r3, r3, #9
 800797c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007980:	ee07 3a90 	vmov	s15, r3
 8007984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800798c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007990:	edd7 6a07 	vldr	s13, [r7, #28]
 8007994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800799c:	ee17 2a90 	vmov	r2, s15
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80079a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	0c1b      	lsrs	r3, r3, #16
 80079aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079be:	edd7 6a07 	vldr	s13, [r7, #28]
 80079c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ca:	ee17 2a90 	vmov	r2, s15
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80079d2:	4b13      	ldr	r3, [pc, #76]	@ (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d6:	0e1b      	lsrs	r3, r3, #24
 80079d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f8:	ee17 2a90 	vmov	r2, s15
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a00:	e008      	b.n	8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	609a      	str	r2, [r3, #8]
}
 8007a14:	bf00      	nop
 8007a16:	3724      	adds	r7, #36	@ 0x24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	58024400 	.word	0x58024400
 8007a24:	03d09000 	.word	0x03d09000
 8007a28:	46000000 	.word	0x46000000
 8007a2c:	4c742400 	.word	0x4c742400
 8007a30:	4a742400 	.word	0x4a742400
 8007a34:	4c371b00 	.word	0x4c371b00

08007a38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a46:	4b53      	ldr	r3, [pc, #332]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d101      	bne.n	8007a56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e099      	b.n	8007b8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a56:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a4e      	ldr	r2, [pc, #312]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007a5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a62:	f7f9 fe91 	bl	8001788 <HAL_GetTick>
 8007a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a68:	e008      	b.n	8007a7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a6a:	f7f9 fe8d 	bl	8001788 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e086      	b.n	8007b8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a7c:	4b45      	ldr	r3, [pc, #276]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f0      	bne.n	8007a6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a88:	4b42      	ldr	r3, [pc, #264]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	031b      	lsls	r3, r3, #12
 8007a96:	493f      	ldr	r1, [pc, #252]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	025b      	lsls	r3, r3, #9
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	061b      	lsls	r3, r3, #24
 8007ac8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007acc:	4931      	ldr	r1, [pc, #196]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ad2:	4b30      	ldr	r3, [pc, #192]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	492d      	ldr	r1, [pc, #180]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	f023 0220 	bic.w	r2, r3, #32
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	4928      	ldr	r1, [pc, #160]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007af6:	4b27      	ldr	r3, [pc, #156]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	4a26      	ldr	r2, [pc, #152]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	f023 0310 	bic.w	r3, r3, #16
 8007b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b02:	4b24      	ldr	r3, [pc, #144]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b06:	4b24      	ldr	r3, [pc, #144]	@ (8007b98 <RCCEx_PLL2_Config+0x160>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	69d2      	ldr	r2, [r2, #28]
 8007b0e:	00d2      	lsls	r2, r2, #3
 8007b10:	4920      	ldr	r1, [pc, #128]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b16:	4b1f      	ldr	r3, [pc, #124]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	f043 0310 	orr.w	r3, r3, #16
 8007b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b28:	4b1a      	ldr	r3, [pc, #104]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	4a19      	ldr	r2, [pc, #100]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b34:	e00f      	b.n	8007b56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d106      	bne.n	8007b4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b3c:	4b15      	ldr	r3, [pc, #84]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	4a14      	ldr	r2, [pc, #80]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b48:	e005      	b.n	8007b56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b4a:	4b12      	ldr	r3, [pc, #72]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4e:	4a11      	ldr	r2, [pc, #68]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b56:	4b0f      	ldr	r3, [pc, #60]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b62:	f7f9 fe11 	bl	8001788 <HAL_GetTick>
 8007b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b68:	e008      	b.n	8007b7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b6a:	f7f9 fe0d 	bl	8001788 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e006      	b.n	8007b8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b7c:	4b05      	ldr	r3, [pc, #20]	@ (8007b94 <RCCEx_PLL2_Config+0x15c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0f0      	beq.n	8007b6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	58024400 	.word	0x58024400
 8007b98:	ffff0007 	.word	0xffff0007

08007b9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007baa:	4b53      	ldr	r3, [pc, #332]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d101      	bne.n	8007bba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e099      	b.n	8007cee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bba:	4b4f      	ldr	r3, [pc, #316]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc6:	f7f9 fddf 	bl	8001788 <HAL_GetTick>
 8007bca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bcc:	e008      	b.n	8007be0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bce:	f7f9 fddb 	bl	8001788 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e086      	b.n	8007cee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007be0:	4b45      	ldr	r3, [pc, #276]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f0      	bne.n	8007bce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bec:	4b42      	ldr	r3, [pc, #264]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	051b      	lsls	r3, r3, #20
 8007bfa:	493f      	ldr	r1, [pc, #252]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	025b      	lsls	r3, r3, #9
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	041b      	lsls	r3, r3, #16
 8007c1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	061b      	lsls	r3, r3, #24
 8007c2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c30:	4931      	ldr	r1, [pc, #196]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c36:	4b30      	ldr	r3, [pc, #192]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	492d      	ldr	r1, [pc, #180]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c48:	4b2b      	ldr	r3, [pc, #172]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	4928      	ldr	r1, [pc, #160]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c5a:	4b27      	ldr	r3, [pc, #156]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	4a26      	ldr	r2, [pc, #152]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c66:	4b24      	ldr	r3, [pc, #144]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c6a:	4b24      	ldr	r3, [pc, #144]	@ (8007cfc <RCCEx_PLL3_Config+0x160>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	69d2      	ldr	r2, [r2, #28]
 8007c72:	00d2      	lsls	r2, r2, #3
 8007c74:	4920      	ldr	r1, [pc, #128]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	4a19      	ldr	r2, [pc, #100]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007c92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c98:	e00f      	b.n	8007cba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d106      	bne.n	8007cae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ca0:	4b15      	ldr	r3, [pc, #84]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca4:	4a14      	ldr	r2, [pc, #80]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007ca6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cac:	e005      	b.n	8007cba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cae:	4b12      	ldr	r3, [pc, #72]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	4a11      	ldr	r2, [pc, #68]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cba:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cc6:	f7f9 fd5f 	bl	8001788 <HAL_GetTick>
 8007cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ccc:	e008      	b.n	8007ce0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cce:	f7f9 fd5b 	bl	8001788 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e006      	b.n	8007cee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ce0:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <RCCEx_PLL3_Config+0x15c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0f0      	beq.n	8007cce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	58024400 	.word	0x58024400
 8007cfc:	ffff0007 	.word	0xffff0007

08007d00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e10f      	b.n	8007f32 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a87      	ldr	r2, [pc, #540]	@ (8007f3c <HAL_SPI_Init+0x23c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00f      	beq.n	8007d42 <HAL_SPI_Init+0x42>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a86      	ldr	r2, [pc, #536]	@ (8007f40 <HAL_SPI_Init+0x240>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00a      	beq.n	8007d42 <HAL_SPI_Init+0x42>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a84      	ldr	r2, [pc, #528]	@ (8007f44 <HAL_SPI_Init+0x244>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d005      	beq.n	8007d42 <HAL_SPI_Init+0x42>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d901      	bls.n	8007d42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e0f7      	b.n	8007f32 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f900 	bl	8007f48 <SPI_GetPacketSize>
 8007d48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8007f3c <HAL_SPI_Init+0x23c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00c      	beq.n	8007d6e <HAL_SPI_Init+0x6e>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a79      	ldr	r2, [pc, #484]	@ (8007f40 <HAL_SPI_Init+0x240>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d007      	beq.n	8007d6e <HAL_SPI_Init+0x6e>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a78      	ldr	r2, [pc, #480]	@ (8007f44 <HAL_SPI_Init+0x244>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d002      	beq.n	8007d6e <HAL_SPI_Init+0x6e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d811      	bhi.n	8007d92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d72:	4a72      	ldr	r2, [pc, #456]	@ (8007f3c <HAL_SPI_Init+0x23c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d009      	beq.n	8007d8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a70      	ldr	r2, [pc, #448]	@ (8007f40 <HAL_SPI_Init+0x240>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d004      	beq.n	8007d8c <HAL_SPI_Init+0x8c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6f      	ldr	r2, [pc, #444]	@ (8007f44 <HAL_SPI_Init+0x244>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d104      	bne.n	8007d96 <HAL_SPI_Init+0x96>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d901      	bls.n	8007d96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e0cd      	b.n	8007f32 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7f9 f9da 	bl	8001164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007dd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ddc:	d119      	bne.n	8007e12 <HAL_SPI_Init+0x112>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007de6:	d103      	bne.n	8007df0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10c      	bne.n	8007e12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e00:	d107      	bne.n	8007e12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00f      	beq.n	8007e3e <HAL_SPI_Init+0x13e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b06      	cmp	r3, #6
 8007e24:	d90b      	bls.n	8007e3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	e007      	b.n	8007e4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69da      	ldr	r2, [r3, #28]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	431a      	orrs	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e60:	ea42 0103 	orr.w	r1, r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eae:	ea42 0103 	orr.w	r1, r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d113      	bne.n	8007eee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007eec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0201 	bic.w	r2, r2, #1
 8007efc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40013000 	.word	0x40013000
 8007f40:	40003800 	.word	0x40003800
 8007f44:	40003c00 	.word	0x40003c00

08007f48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	3307      	adds	r3, #7
 8007f66:	08db      	lsrs	r3, r3, #3
 8007f68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e042      	b.n	8008016 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7f9 f996 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	@ 0x24
 8007fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0201 	bic.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fe95 	bl	8008cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f826 	bl	8008020 <UART_SetConfig>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e01b      	b.n	8008016 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ffc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 ff14 	bl	8008e3c <UART_CheckIdleState>
 8008014:	4603      	mov	r3, r0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008024:	b092      	sub	sp, #72	@ 0x48
 8008026:	af00      	add	r7, sp, #0
 8008028:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	431a      	orrs	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	431a      	orrs	r2, r3
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	4313      	orrs	r3, r2
 8008046:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	4bbe      	ldr	r3, [pc, #760]	@ (8008348 <UART_SetConfig+0x328>)
 8008050:	4013      	ands	r3, r2
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	6812      	ldr	r2, [r2, #0]
 8008056:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008058:	430b      	orrs	r3, r1
 800805a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4ab3      	ldr	r2, [pc, #716]	@ (800834c <UART_SetConfig+0x32c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008088:	4313      	orrs	r3, r2
 800808a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	4baf      	ldr	r3, [pc, #700]	@ (8008350 <UART_SetConfig+0x330>)
 8008094:	4013      	ands	r3, r2
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800809c:	430b      	orrs	r3, r1
 800809e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	f023 010f 	bic.w	r1, r3, #15
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4aa6      	ldr	r2, [pc, #664]	@ (8008354 <UART_SetConfig+0x334>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d177      	bne.n	80081b0 <UART_SetConfig+0x190>
 80080c0:	4ba5      	ldr	r3, [pc, #660]	@ (8008358 <UART_SetConfig+0x338>)
 80080c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080c8:	2b28      	cmp	r3, #40	@ 0x28
 80080ca:	d86d      	bhi.n	80081a8 <UART_SetConfig+0x188>
 80080cc:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <UART_SetConfig+0xb4>)
 80080ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	08008179 	.word	0x08008179
 80080d8:	080081a9 	.word	0x080081a9
 80080dc:	080081a9 	.word	0x080081a9
 80080e0:	080081a9 	.word	0x080081a9
 80080e4:	080081a9 	.word	0x080081a9
 80080e8:	080081a9 	.word	0x080081a9
 80080ec:	080081a9 	.word	0x080081a9
 80080f0:	080081a9 	.word	0x080081a9
 80080f4:	08008181 	.word	0x08008181
 80080f8:	080081a9 	.word	0x080081a9
 80080fc:	080081a9 	.word	0x080081a9
 8008100:	080081a9 	.word	0x080081a9
 8008104:	080081a9 	.word	0x080081a9
 8008108:	080081a9 	.word	0x080081a9
 800810c:	080081a9 	.word	0x080081a9
 8008110:	080081a9 	.word	0x080081a9
 8008114:	08008189 	.word	0x08008189
 8008118:	080081a9 	.word	0x080081a9
 800811c:	080081a9 	.word	0x080081a9
 8008120:	080081a9 	.word	0x080081a9
 8008124:	080081a9 	.word	0x080081a9
 8008128:	080081a9 	.word	0x080081a9
 800812c:	080081a9 	.word	0x080081a9
 8008130:	080081a9 	.word	0x080081a9
 8008134:	08008191 	.word	0x08008191
 8008138:	080081a9 	.word	0x080081a9
 800813c:	080081a9 	.word	0x080081a9
 8008140:	080081a9 	.word	0x080081a9
 8008144:	080081a9 	.word	0x080081a9
 8008148:	080081a9 	.word	0x080081a9
 800814c:	080081a9 	.word	0x080081a9
 8008150:	080081a9 	.word	0x080081a9
 8008154:	08008199 	.word	0x08008199
 8008158:	080081a9 	.word	0x080081a9
 800815c:	080081a9 	.word	0x080081a9
 8008160:	080081a9 	.word	0x080081a9
 8008164:	080081a9 	.word	0x080081a9
 8008168:	080081a9 	.word	0x080081a9
 800816c:	080081a9 	.word	0x080081a9
 8008170:	080081a9 	.word	0x080081a9
 8008174:	080081a1 	.word	0x080081a1
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817e:	e326      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008180:	2304      	movs	r3, #4
 8008182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008186:	e322      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008188:	2308      	movs	r3, #8
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818e:	e31e      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008190:	2310      	movs	r3, #16
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008196:	e31a      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008198:	2320      	movs	r3, #32
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e316      	b.n	80087ce <UART_SetConfig+0x7ae>
 80081a0:	2340      	movs	r3, #64	@ 0x40
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e312      	b.n	80087ce <UART_SetConfig+0x7ae>
 80081a8:	2380      	movs	r3, #128	@ 0x80
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ae:	e30e      	b.n	80087ce <UART_SetConfig+0x7ae>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a69      	ldr	r2, [pc, #420]	@ (800835c <UART_SetConfig+0x33c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d130      	bne.n	800821c <UART_SetConfig+0x1fc>
 80081ba:	4b67      	ldr	r3, [pc, #412]	@ (8008358 <UART_SetConfig+0x338>)
 80081bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	d826      	bhi.n	8008214 <UART_SetConfig+0x1f4>
 80081c6:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <UART_SetConfig+0x1ac>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	080081ed 	.word	0x080081ed
 80081d4:	080081f5 	.word	0x080081f5
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	08008205 	.word	0x08008205
 80081e0:	0800820d 	.word	0x0800820d
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ea:	e2f0      	b.n	80087ce <UART_SetConfig+0x7ae>
 80081ec:	2304      	movs	r3, #4
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f2:	e2ec      	b.n	80087ce <UART_SetConfig+0x7ae>
 80081f4:	2308      	movs	r3, #8
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e2e8      	b.n	80087ce <UART_SetConfig+0x7ae>
 80081fc:	2310      	movs	r3, #16
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e2e4      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008204:	2320      	movs	r3, #32
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e2e0      	b.n	80087ce <UART_SetConfig+0x7ae>
 800820c:	2340      	movs	r3, #64	@ 0x40
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e2dc      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008214:	2380      	movs	r3, #128	@ 0x80
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821a:	e2d8      	b.n	80087ce <UART_SetConfig+0x7ae>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a4f      	ldr	r2, [pc, #316]	@ (8008360 <UART_SetConfig+0x340>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d130      	bne.n	8008288 <UART_SetConfig+0x268>
 8008226:	4b4c      	ldr	r3, [pc, #304]	@ (8008358 <UART_SetConfig+0x338>)
 8008228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b05      	cmp	r3, #5
 8008230:	d826      	bhi.n	8008280 <UART_SetConfig+0x260>
 8008232:	a201      	add	r2, pc, #4	@ (adr r2, 8008238 <UART_SetConfig+0x218>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008251 	.word	0x08008251
 800823c:	08008259 	.word	0x08008259
 8008240:	08008261 	.word	0x08008261
 8008244:	08008269 	.word	0x08008269
 8008248:	08008271 	.word	0x08008271
 800824c:	08008279 	.word	0x08008279
 8008250:	2300      	movs	r3, #0
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e2ba      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e2b6      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e2b2      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e2ae      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008270:	2320      	movs	r3, #32
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e2aa      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008278:	2340      	movs	r3, #64	@ 0x40
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e2a6      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008280:	2380      	movs	r3, #128	@ 0x80
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e2a2      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a35      	ldr	r2, [pc, #212]	@ (8008364 <UART_SetConfig+0x344>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d130      	bne.n	80082f4 <UART_SetConfig+0x2d4>
 8008292:	4b31      	ldr	r3, [pc, #196]	@ (8008358 <UART_SetConfig+0x338>)
 8008294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b05      	cmp	r3, #5
 800829c:	d826      	bhi.n	80082ec <UART_SetConfig+0x2cc>
 800829e:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <UART_SetConfig+0x284>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082bd 	.word	0x080082bd
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082cd 	.word	0x080082cd
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e284      	b.n	80087ce <UART_SetConfig+0x7ae>
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e280      	b.n	80087ce <UART_SetConfig+0x7ae>
 80082cc:	2308      	movs	r3, #8
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e27c      	b.n	80087ce <UART_SetConfig+0x7ae>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e278      	b.n	80087ce <UART_SetConfig+0x7ae>
 80082dc:	2320      	movs	r3, #32
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e274      	b.n	80087ce <UART_SetConfig+0x7ae>
 80082e4:	2340      	movs	r3, #64	@ 0x40
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e270      	b.n	80087ce <UART_SetConfig+0x7ae>
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e26c      	b.n	80087ce <UART_SetConfig+0x7ae>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008368 <UART_SetConfig+0x348>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d142      	bne.n	8008384 <UART_SetConfig+0x364>
 80082fe:	4b16      	ldr	r3, [pc, #88]	@ (8008358 <UART_SetConfig+0x338>)
 8008300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b05      	cmp	r3, #5
 8008308:	d838      	bhi.n	800837c <UART_SetConfig+0x35c>
 800830a:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <UART_SetConfig+0x2f0>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008329 	.word	0x08008329
 8008314:	08008331 	.word	0x08008331
 8008318:	08008339 	.word	0x08008339
 800831c:	08008341 	.word	0x08008341
 8008320:	0800836d 	.word	0x0800836d
 8008324:	08008375 	.word	0x08008375
 8008328:	2300      	movs	r3, #0
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e24e      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008330:	2304      	movs	r3, #4
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e24a      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008338:	2308      	movs	r3, #8
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e246      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008340:	2310      	movs	r3, #16
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e242      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008348:	cfff69f3 	.word	0xcfff69f3
 800834c:	58000c00 	.word	0x58000c00
 8008350:	11fff4ff 	.word	0x11fff4ff
 8008354:	40011000 	.word	0x40011000
 8008358:	58024400 	.word	0x58024400
 800835c:	40004400 	.word	0x40004400
 8008360:	40004800 	.word	0x40004800
 8008364:	40004c00 	.word	0x40004c00
 8008368:	40005000 	.word	0x40005000
 800836c:	2320      	movs	r3, #32
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008372:	e22c      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008374:	2340      	movs	r3, #64	@ 0x40
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e228      	b.n	80087ce <UART_SetConfig+0x7ae>
 800837c:	2380      	movs	r3, #128	@ 0x80
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e224      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4ab1      	ldr	r2, [pc, #708]	@ (8008650 <UART_SetConfig+0x630>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d176      	bne.n	800847c <UART_SetConfig+0x45c>
 800838e:	4bb1      	ldr	r3, [pc, #708]	@ (8008654 <UART_SetConfig+0x634>)
 8008390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008396:	2b28      	cmp	r3, #40	@ 0x28
 8008398:	d86c      	bhi.n	8008474 <UART_SetConfig+0x454>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0x380>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	08008445 	.word	0x08008445
 80083a4:	08008475 	.word	0x08008475
 80083a8:	08008475 	.word	0x08008475
 80083ac:	08008475 	.word	0x08008475
 80083b0:	08008475 	.word	0x08008475
 80083b4:	08008475 	.word	0x08008475
 80083b8:	08008475 	.word	0x08008475
 80083bc:	08008475 	.word	0x08008475
 80083c0:	0800844d 	.word	0x0800844d
 80083c4:	08008475 	.word	0x08008475
 80083c8:	08008475 	.word	0x08008475
 80083cc:	08008475 	.word	0x08008475
 80083d0:	08008475 	.word	0x08008475
 80083d4:	08008475 	.word	0x08008475
 80083d8:	08008475 	.word	0x08008475
 80083dc:	08008475 	.word	0x08008475
 80083e0:	08008455 	.word	0x08008455
 80083e4:	08008475 	.word	0x08008475
 80083e8:	08008475 	.word	0x08008475
 80083ec:	08008475 	.word	0x08008475
 80083f0:	08008475 	.word	0x08008475
 80083f4:	08008475 	.word	0x08008475
 80083f8:	08008475 	.word	0x08008475
 80083fc:	08008475 	.word	0x08008475
 8008400:	0800845d 	.word	0x0800845d
 8008404:	08008475 	.word	0x08008475
 8008408:	08008475 	.word	0x08008475
 800840c:	08008475 	.word	0x08008475
 8008410:	08008475 	.word	0x08008475
 8008414:	08008475 	.word	0x08008475
 8008418:	08008475 	.word	0x08008475
 800841c:	08008475 	.word	0x08008475
 8008420:	08008465 	.word	0x08008465
 8008424:	08008475 	.word	0x08008475
 8008428:	08008475 	.word	0x08008475
 800842c:	08008475 	.word	0x08008475
 8008430:	08008475 	.word	0x08008475
 8008434:	08008475 	.word	0x08008475
 8008438:	08008475 	.word	0x08008475
 800843c:	08008475 	.word	0x08008475
 8008440:	0800846d 	.word	0x0800846d
 8008444:	2301      	movs	r3, #1
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844a:	e1c0      	b.n	80087ce <UART_SetConfig+0x7ae>
 800844c:	2304      	movs	r3, #4
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008452:	e1bc      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008454:	2308      	movs	r3, #8
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845a:	e1b8      	b.n	80087ce <UART_SetConfig+0x7ae>
 800845c:	2310      	movs	r3, #16
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e1b4      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008464:	2320      	movs	r3, #32
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e1b0      	b.n	80087ce <UART_SetConfig+0x7ae>
 800846c:	2340      	movs	r3, #64	@ 0x40
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e1ac      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008474:	2380      	movs	r3, #128	@ 0x80
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e1a8      	b.n	80087ce <UART_SetConfig+0x7ae>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a75      	ldr	r2, [pc, #468]	@ (8008658 <UART_SetConfig+0x638>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d130      	bne.n	80084e8 <UART_SetConfig+0x4c8>
 8008486:	4b73      	ldr	r3, [pc, #460]	@ (8008654 <UART_SetConfig+0x634>)
 8008488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	2b05      	cmp	r3, #5
 8008490:	d826      	bhi.n	80084e0 <UART_SetConfig+0x4c0>
 8008492:	a201      	add	r2, pc, #4	@ (adr r2, 8008498 <UART_SetConfig+0x478>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084b9 	.word	0x080084b9
 80084a0:	080084c1 	.word	0x080084c1
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084d1 	.word	0x080084d1
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b6:	e18a      	b.n	80087ce <UART_SetConfig+0x7ae>
 80084b8:	2304      	movs	r3, #4
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084be:	e186      	b.n	80087ce <UART_SetConfig+0x7ae>
 80084c0:	2308      	movs	r3, #8
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c6:	e182      	b.n	80087ce <UART_SetConfig+0x7ae>
 80084c8:	2310      	movs	r3, #16
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e17e      	b.n	80087ce <UART_SetConfig+0x7ae>
 80084d0:	2320      	movs	r3, #32
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e17a      	b.n	80087ce <UART_SetConfig+0x7ae>
 80084d8:	2340      	movs	r3, #64	@ 0x40
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e176      	b.n	80087ce <UART_SetConfig+0x7ae>
 80084e0:	2380      	movs	r3, #128	@ 0x80
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e6:	e172      	b.n	80087ce <UART_SetConfig+0x7ae>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a5b      	ldr	r2, [pc, #364]	@ (800865c <UART_SetConfig+0x63c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d130      	bne.n	8008554 <UART_SetConfig+0x534>
 80084f2:	4b58      	ldr	r3, [pc, #352]	@ (8008654 <UART_SetConfig+0x634>)
 80084f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d826      	bhi.n	800854c <UART_SetConfig+0x52c>
 80084fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008504 <UART_SetConfig+0x4e4>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	0800851d 	.word	0x0800851d
 8008508:	08008525 	.word	0x08008525
 800850c:	0800852d 	.word	0x0800852d
 8008510:	08008535 	.word	0x08008535
 8008514:	0800853d 	.word	0x0800853d
 8008518:	08008545 	.word	0x08008545
 800851c:	2300      	movs	r3, #0
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e154      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008524:	2304      	movs	r3, #4
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e150      	b.n	80087ce <UART_SetConfig+0x7ae>
 800852c:	2308      	movs	r3, #8
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e14c      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008534:	2310      	movs	r3, #16
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e148      	b.n	80087ce <UART_SetConfig+0x7ae>
 800853c:	2320      	movs	r3, #32
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e144      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008544:	2340      	movs	r3, #64	@ 0x40
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e140      	b.n	80087ce <UART_SetConfig+0x7ae>
 800854c:	2380      	movs	r3, #128	@ 0x80
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e13c      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a41      	ldr	r2, [pc, #260]	@ (8008660 <UART_SetConfig+0x640>)
 800855a:	4293      	cmp	r3, r2
 800855c:	f040 8082 	bne.w	8008664 <UART_SetConfig+0x644>
 8008560:	4b3c      	ldr	r3, [pc, #240]	@ (8008654 <UART_SetConfig+0x634>)
 8008562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008568:	2b28      	cmp	r3, #40	@ 0x28
 800856a:	d86d      	bhi.n	8008648 <UART_SetConfig+0x628>
 800856c:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <UART_SetConfig+0x554>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	08008619 	.word	0x08008619
 8008578:	08008649 	.word	0x08008649
 800857c:	08008649 	.word	0x08008649
 8008580:	08008649 	.word	0x08008649
 8008584:	08008649 	.word	0x08008649
 8008588:	08008649 	.word	0x08008649
 800858c:	08008649 	.word	0x08008649
 8008590:	08008649 	.word	0x08008649
 8008594:	08008621 	.word	0x08008621
 8008598:	08008649 	.word	0x08008649
 800859c:	08008649 	.word	0x08008649
 80085a0:	08008649 	.word	0x08008649
 80085a4:	08008649 	.word	0x08008649
 80085a8:	08008649 	.word	0x08008649
 80085ac:	08008649 	.word	0x08008649
 80085b0:	08008649 	.word	0x08008649
 80085b4:	08008629 	.word	0x08008629
 80085b8:	08008649 	.word	0x08008649
 80085bc:	08008649 	.word	0x08008649
 80085c0:	08008649 	.word	0x08008649
 80085c4:	08008649 	.word	0x08008649
 80085c8:	08008649 	.word	0x08008649
 80085cc:	08008649 	.word	0x08008649
 80085d0:	08008649 	.word	0x08008649
 80085d4:	08008631 	.word	0x08008631
 80085d8:	08008649 	.word	0x08008649
 80085dc:	08008649 	.word	0x08008649
 80085e0:	08008649 	.word	0x08008649
 80085e4:	08008649 	.word	0x08008649
 80085e8:	08008649 	.word	0x08008649
 80085ec:	08008649 	.word	0x08008649
 80085f0:	08008649 	.word	0x08008649
 80085f4:	08008639 	.word	0x08008639
 80085f8:	08008649 	.word	0x08008649
 80085fc:	08008649 	.word	0x08008649
 8008600:	08008649 	.word	0x08008649
 8008604:	08008649 	.word	0x08008649
 8008608:	08008649 	.word	0x08008649
 800860c:	08008649 	.word	0x08008649
 8008610:	08008649 	.word	0x08008649
 8008614:	08008641 	.word	0x08008641
 8008618:	2301      	movs	r3, #1
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e0d6      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008620:	2304      	movs	r3, #4
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e0d2      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008628:	2308      	movs	r3, #8
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e0ce      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008630:	2310      	movs	r3, #16
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008636:	e0ca      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008638:	2320      	movs	r3, #32
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863e:	e0c6      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008640:	2340      	movs	r3, #64	@ 0x40
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e0c2      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008648:	2380      	movs	r3, #128	@ 0x80
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e0be      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008650:	40011400 	.word	0x40011400
 8008654:	58024400 	.word	0x58024400
 8008658:	40007800 	.word	0x40007800
 800865c:	40007c00 	.word	0x40007c00
 8008660:	40011800 	.word	0x40011800
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4aad      	ldr	r2, [pc, #692]	@ (8008920 <UART_SetConfig+0x900>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d176      	bne.n	800875c <UART_SetConfig+0x73c>
 800866e:	4bad      	ldr	r3, [pc, #692]	@ (8008924 <UART_SetConfig+0x904>)
 8008670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008676:	2b28      	cmp	r3, #40	@ 0x28
 8008678:	d86c      	bhi.n	8008754 <UART_SetConfig+0x734>
 800867a:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <UART_SetConfig+0x660>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	08008725 	.word	0x08008725
 8008684:	08008755 	.word	0x08008755
 8008688:	08008755 	.word	0x08008755
 800868c:	08008755 	.word	0x08008755
 8008690:	08008755 	.word	0x08008755
 8008694:	08008755 	.word	0x08008755
 8008698:	08008755 	.word	0x08008755
 800869c:	08008755 	.word	0x08008755
 80086a0:	0800872d 	.word	0x0800872d
 80086a4:	08008755 	.word	0x08008755
 80086a8:	08008755 	.word	0x08008755
 80086ac:	08008755 	.word	0x08008755
 80086b0:	08008755 	.word	0x08008755
 80086b4:	08008755 	.word	0x08008755
 80086b8:	08008755 	.word	0x08008755
 80086bc:	08008755 	.word	0x08008755
 80086c0:	08008735 	.word	0x08008735
 80086c4:	08008755 	.word	0x08008755
 80086c8:	08008755 	.word	0x08008755
 80086cc:	08008755 	.word	0x08008755
 80086d0:	08008755 	.word	0x08008755
 80086d4:	08008755 	.word	0x08008755
 80086d8:	08008755 	.word	0x08008755
 80086dc:	08008755 	.word	0x08008755
 80086e0:	0800873d 	.word	0x0800873d
 80086e4:	08008755 	.word	0x08008755
 80086e8:	08008755 	.word	0x08008755
 80086ec:	08008755 	.word	0x08008755
 80086f0:	08008755 	.word	0x08008755
 80086f4:	08008755 	.word	0x08008755
 80086f8:	08008755 	.word	0x08008755
 80086fc:	08008755 	.word	0x08008755
 8008700:	08008745 	.word	0x08008745
 8008704:	08008755 	.word	0x08008755
 8008708:	08008755 	.word	0x08008755
 800870c:	08008755 	.word	0x08008755
 8008710:	08008755 	.word	0x08008755
 8008714:	08008755 	.word	0x08008755
 8008718:	08008755 	.word	0x08008755
 800871c:	08008755 	.word	0x08008755
 8008720:	0800874d 	.word	0x0800874d
 8008724:	2301      	movs	r3, #1
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872a:	e050      	b.n	80087ce <UART_SetConfig+0x7ae>
 800872c:	2304      	movs	r3, #4
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008732:	e04c      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008734:	2308      	movs	r3, #8
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873a:	e048      	b.n	80087ce <UART_SetConfig+0x7ae>
 800873c:	2310      	movs	r3, #16
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008742:	e044      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008744:	2320      	movs	r3, #32
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874a:	e040      	b.n	80087ce <UART_SetConfig+0x7ae>
 800874c:	2340      	movs	r3, #64	@ 0x40
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008752:	e03c      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008754:	2380      	movs	r3, #128	@ 0x80
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875a:	e038      	b.n	80087ce <UART_SetConfig+0x7ae>
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a71      	ldr	r2, [pc, #452]	@ (8008928 <UART_SetConfig+0x908>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d130      	bne.n	80087c8 <UART_SetConfig+0x7a8>
 8008766:	4b6f      	ldr	r3, [pc, #444]	@ (8008924 <UART_SetConfig+0x904>)
 8008768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	2b05      	cmp	r3, #5
 8008770:	d826      	bhi.n	80087c0 <UART_SetConfig+0x7a0>
 8008772:	a201      	add	r2, pc, #4	@ (adr r2, 8008778 <UART_SetConfig+0x758>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	08008791 	.word	0x08008791
 800877c:	08008799 	.word	0x08008799
 8008780:	080087a1 	.word	0x080087a1
 8008784:	080087a9 	.word	0x080087a9
 8008788:	080087b1 	.word	0x080087b1
 800878c:	080087b9 	.word	0x080087b9
 8008790:	2302      	movs	r3, #2
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e01a      	b.n	80087ce <UART_SetConfig+0x7ae>
 8008798:	2304      	movs	r3, #4
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879e:	e016      	b.n	80087ce <UART_SetConfig+0x7ae>
 80087a0:	2308      	movs	r3, #8
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a6:	e012      	b.n	80087ce <UART_SetConfig+0x7ae>
 80087a8:	2310      	movs	r3, #16
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ae:	e00e      	b.n	80087ce <UART_SetConfig+0x7ae>
 80087b0:	2320      	movs	r3, #32
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b6:	e00a      	b.n	80087ce <UART_SetConfig+0x7ae>
 80087b8:	2340      	movs	r3, #64	@ 0x40
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087be:	e006      	b.n	80087ce <UART_SetConfig+0x7ae>
 80087c0:	2380      	movs	r3, #128	@ 0x80
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c6:	e002      	b.n	80087ce <UART_SetConfig+0x7ae>
 80087c8:	2380      	movs	r3, #128	@ 0x80
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a55      	ldr	r2, [pc, #340]	@ (8008928 <UART_SetConfig+0x908>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	f040 80f8 	bne.w	80089ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087de:	2b20      	cmp	r3, #32
 80087e0:	dc46      	bgt.n	8008870 <UART_SetConfig+0x850>
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	db75      	blt.n	80088d2 <UART_SetConfig+0x8b2>
 80087e6:	3b02      	subs	r3, #2
 80087e8:	2b1e      	cmp	r3, #30
 80087ea:	d872      	bhi.n	80088d2 <UART_SetConfig+0x8b2>
 80087ec:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <UART_SetConfig+0x7d4>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	08008877 	.word	0x08008877
 80087f8:	080088d3 	.word	0x080088d3
 80087fc:	0800887f 	.word	0x0800887f
 8008800:	080088d3 	.word	0x080088d3
 8008804:	080088d3 	.word	0x080088d3
 8008808:	080088d3 	.word	0x080088d3
 800880c:	0800888f 	.word	0x0800888f
 8008810:	080088d3 	.word	0x080088d3
 8008814:	080088d3 	.word	0x080088d3
 8008818:	080088d3 	.word	0x080088d3
 800881c:	080088d3 	.word	0x080088d3
 8008820:	080088d3 	.word	0x080088d3
 8008824:	080088d3 	.word	0x080088d3
 8008828:	080088d3 	.word	0x080088d3
 800882c:	0800889f 	.word	0x0800889f
 8008830:	080088d3 	.word	0x080088d3
 8008834:	080088d3 	.word	0x080088d3
 8008838:	080088d3 	.word	0x080088d3
 800883c:	080088d3 	.word	0x080088d3
 8008840:	080088d3 	.word	0x080088d3
 8008844:	080088d3 	.word	0x080088d3
 8008848:	080088d3 	.word	0x080088d3
 800884c:	080088d3 	.word	0x080088d3
 8008850:	080088d3 	.word	0x080088d3
 8008854:	080088d3 	.word	0x080088d3
 8008858:	080088d3 	.word	0x080088d3
 800885c:	080088d3 	.word	0x080088d3
 8008860:	080088d3 	.word	0x080088d3
 8008864:	080088d3 	.word	0x080088d3
 8008868:	080088d3 	.word	0x080088d3
 800886c:	080088c5 	.word	0x080088c5
 8008870:	2b40      	cmp	r3, #64	@ 0x40
 8008872:	d02a      	beq.n	80088ca <UART_SetConfig+0x8aa>
 8008874:	e02d      	b.n	80088d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008876:	f7fe fccf 	bl	8007218 <HAL_RCCEx_GetD3PCLK1Freq>
 800887a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800887c:	e02f      	b.n	80088de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fcde 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888c:	e027      	b.n	80088de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888e:	f107 0318 	add.w	r3, r7, #24
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fe2a 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889c:	e01f      	b.n	80088de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889e:	4b21      	ldr	r3, [pc, #132]	@ (8008924 <UART_SetConfig+0x904>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d009      	beq.n	80088be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008924 <UART_SetConfig+0x904>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	08db      	lsrs	r3, r3, #3
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	4a1d      	ldr	r2, [pc, #116]	@ (800892c <UART_SetConfig+0x90c>)
 80088b6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088bc:	e00f      	b.n	80088de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80088be:	4b1b      	ldr	r3, [pc, #108]	@ (800892c <UART_SetConfig+0x90c>)
 80088c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c2:	e00c      	b.n	80088de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008930 <UART_SetConfig+0x910>)
 80088c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c8:	e009      	b.n	80088de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d0:	e005      	b.n	80088de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 81ee 	beq.w	8008cc2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ea:	4a12      	ldr	r2, [pc, #72]	@ (8008934 <UART_SetConfig+0x914>)
 80088ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	4613      	mov	r3, r2
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	4413      	add	r3, r2
 8008904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008906:	429a      	cmp	r2, r3
 8008908:	d305      	bcc.n	8008916 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008912:	429a      	cmp	r2, r3
 8008914:	d910      	bls.n	8008938 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800891c:	e1d1      	b.n	8008cc2 <UART_SetConfig+0xca2>
 800891e:	bf00      	nop
 8008920:	40011c00 	.word	0x40011c00
 8008924:	58024400 	.word	0x58024400
 8008928:	58000c00 	.word	0x58000c00
 800892c:	03d09000 	.word	0x03d09000
 8008930:	003d0900 	.word	0x003d0900
 8008934:	08010204 	.word	0x08010204
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893a:	2200      	movs	r2, #0
 800893c:	60bb      	str	r3, [r7, #8]
 800893e:	60fa      	str	r2, [r7, #12]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008944:	4ac0      	ldr	r2, [pc, #768]	@ (8008c48 <UART_SetConfig+0xc28>)
 8008946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800894a:	b29b      	uxth	r3, r3
 800894c:	2200      	movs	r2, #0
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	607a      	str	r2, [r7, #4]
 8008952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800895a:	f7f7 fcc7 	bl	80002ec <__aeabi_uldivmod>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	f04f 0200 	mov.w	r2, #0
 800896a:	f04f 0300 	mov.w	r3, #0
 800896e:	020b      	lsls	r3, r1, #8
 8008970:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008974:	0202      	lsls	r2, r0, #8
 8008976:	6979      	ldr	r1, [r7, #20]
 8008978:	6849      	ldr	r1, [r1, #4]
 800897a:	0849      	lsrs	r1, r1, #1
 800897c:	2000      	movs	r0, #0
 800897e:	460c      	mov	r4, r1
 8008980:	4605      	mov	r5, r0
 8008982:	eb12 0804 	adds.w	r8, r2, r4
 8008986:	eb43 0905 	adc.w	r9, r3, r5
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	469a      	mov	sl, r3
 8008992:	4693      	mov	fp, r2
 8008994:	4652      	mov	r2, sl
 8008996:	465b      	mov	r3, fp
 8008998:	4640      	mov	r0, r8
 800899a:	4649      	mov	r1, r9
 800899c:	f7f7 fca6 	bl	80002ec <__aeabi_uldivmod>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4613      	mov	r3, r2
 80089a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ae:	d308      	bcc.n	80089c2 <UART_SetConfig+0x9a2>
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089b6:	d204      	bcs.n	80089c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089be:	60da      	str	r2, [r3, #12]
 80089c0:	e17f      	b.n	8008cc2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089c8:	e17b      	b.n	8008cc2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089d2:	f040 80bd 	bne.w	8008b50 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80089d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089da:	2b20      	cmp	r3, #32
 80089dc:	dc48      	bgt.n	8008a70 <UART_SetConfig+0xa50>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	db7b      	blt.n	8008ada <UART_SetConfig+0xaba>
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d879      	bhi.n	8008ada <UART_SetConfig+0xaba>
 80089e6:	a201      	add	r2, pc, #4	@ (adr r2, 80089ec <UART_SetConfig+0x9cc>)
 80089e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ec:	08008a77 	.word	0x08008a77
 80089f0:	08008a7f 	.word	0x08008a7f
 80089f4:	08008adb 	.word	0x08008adb
 80089f8:	08008adb 	.word	0x08008adb
 80089fc:	08008a87 	.word	0x08008a87
 8008a00:	08008adb 	.word	0x08008adb
 8008a04:	08008adb 	.word	0x08008adb
 8008a08:	08008adb 	.word	0x08008adb
 8008a0c:	08008a97 	.word	0x08008a97
 8008a10:	08008adb 	.word	0x08008adb
 8008a14:	08008adb 	.word	0x08008adb
 8008a18:	08008adb 	.word	0x08008adb
 8008a1c:	08008adb 	.word	0x08008adb
 8008a20:	08008adb 	.word	0x08008adb
 8008a24:	08008adb 	.word	0x08008adb
 8008a28:	08008adb 	.word	0x08008adb
 8008a2c:	08008aa7 	.word	0x08008aa7
 8008a30:	08008adb 	.word	0x08008adb
 8008a34:	08008adb 	.word	0x08008adb
 8008a38:	08008adb 	.word	0x08008adb
 8008a3c:	08008adb 	.word	0x08008adb
 8008a40:	08008adb 	.word	0x08008adb
 8008a44:	08008adb 	.word	0x08008adb
 8008a48:	08008adb 	.word	0x08008adb
 8008a4c:	08008adb 	.word	0x08008adb
 8008a50:	08008adb 	.word	0x08008adb
 8008a54:	08008adb 	.word	0x08008adb
 8008a58:	08008adb 	.word	0x08008adb
 8008a5c:	08008adb 	.word	0x08008adb
 8008a60:	08008adb 	.word	0x08008adb
 8008a64:	08008adb 	.word	0x08008adb
 8008a68:	08008adb 	.word	0x08008adb
 8008a6c:	08008acd 	.word	0x08008acd
 8008a70:	2b40      	cmp	r3, #64	@ 0x40
 8008a72:	d02e      	beq.n	8008ad2 <UART_SetConfig+0xab2>
 8008a74:	e031      	b.n	8008ada <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a76:	f7fc fd0d 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8008a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a7c:	e033      	b.n	8008ae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a7e:	f7fc fd1f 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8008a82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a84:	e02f      	b.n	8008ae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fbda 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a94:	e027      	b.n	8008ae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fd26 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa4:	e01f      	b.n	8008ae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa6:	4b69      	ldr	r3, [pc, #420]	@ (8008c4c <UART_SetConfig+0xc2c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d009      	beq.n	8008ac6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ab2:	4b66      	ldr	r3, [pc, #408]	@ (8008c4c <UART_SetConfig+0xc2c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	08db      	lsrs	r3, r3, #3
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	4a64      	ldr	r2, [pc, #400]	@ (8008c50 <UART_SetConfig+0xc30>)
 8008abe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac4:	e00f      	b.n	8008ae6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008ac6:	4b62      	ldr	r3, [pc, #392]	@ (8008c50 <UART_SetConfig+0xc30>)
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aca:	e00c      	b.n	8008ae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008acc:	4b61      	ldr	r3, [pc, #388]	@ (8008c54 <UART_SetConfig+0xc34>)
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e009      	b.n	8008ae6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad8:	e005      	b.n	8008ae6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 80ea 	beq.w	8008cc2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af2:	4a55      	ldr	r2, [pc, #340]	@ (8008c48 <UART_SetConfig+0xc28>)
 8008af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b00:	005a      	lsls	r2, r3, #1
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	085b      	lsrs	r3, r3, #1
 8008b08:	441a      	add	r2, r3
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	2b0f      	cmp	r3, #15
 8008b18:	d916      	bls.n	8008b48 <UART_SetConfig+0xb28>
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b20:	d212      	bcs.n	8008b48 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f023 030f 	bic.w	r3, r3, #15
 8008b2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	085b      	lsrs	r3, r3, #1
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008b44:	60da      	str	r2, [r3, #12]
 8008b46:	e0bc      	b.n	8008cc2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b4e:	e0b8      	b.n	8008cc2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	dc4b      	bgt.n	8008bf0 <UART_SetConfig+0xbd0>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f2c0 8087 	blt.w	8008c6c <UART_SetConfig+0xc4c>
 8008b5e:	2b20      	cmp	r3, #32
 8008b60:	f200 8084 	bhi.w	8008c6c <UART_SetConfig+0xc4c>
 8008b64:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <UART_SetConfig+0xb4c>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008bf7 	.word	0x08008bf7
 8008b70:	08008bff 	.word	0x08008bff
 8008b74:	08008c6d 	.word	0x08008c6d
 8008b78:	08008c6d 	.word	0x08008c6d
 8008b7c:	08008c07 	.word	0x08008c07
 8008b80:	08008c6d 	.word	0x08008c6d
 8008b84:	08008c6d 	.word	0x08008c6d
 8008b88:	08008c6d 	.word	0x08008c6d
 8008b8c:	08008c17 	.word	0x08008c17
 8008b90:	08008c6d 	.word	0x08008c6d
 8008b94:	08008c6d 	.word	0x08008c6d
 8008b98:	08008c6d 	.word	0x08008c6d
 8008b9c:	08008c6d 	.word	0x08008c6d
 8008ba0:	08008c6d 	.word	0x08008c6d
 8008ba4:	08008c6d 	.word	0x08008c6d
 8008ba8:	08008c6d 	.word	0x08008c6d
 8008bac:	08008c27 	.word	0x08008c27
 8008bb0:	08008c6d 	.word	0x08008c6d
 8008bb4:	08008c6d 	.word	0x08008c6d
 8008bb8:	08008c6d 	.word	0x08008c6d
 8008bbc:	08008c6d 	.word	0x08008c6d
 8008bc0:	08008c6d 	.word	0x08008c6d
 8008bc4:	08008c6d 	.word	0x08008c6d
 8008bc8:	08008c6d 	.word	0x08008c6d
 8008bcc:	08008c6d 	.word	0x08008c6d
 8008bd0:	08008c6d 	.word	0x08008c6d
 8008bd4:	08008c6d 	.word	0x08008c6d
 8008bd8:	08008c6d 	.word	0x08008c6d
 8008bdc:	08008c6d 	.word	0x08008c6d
 8008be0:	08008c6d 	.word	0x08008c6d
 8008be4:	08008c6d 	.word	0x08008c6d
 8008be8:	08008c6d 	.word	0x08008c6d
 8008bec:	08008c5f 	.word	0x08008c5f
 8008bf0:	2b40      	cmp	r3, #64	@ 0x40
 8008bf2:	d037      	beq.n	8008c64 <UART_SetConfig+0xc44>
 8008bf4:	e03a      	b.n	8008c6c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf6:	f7fc fc4d 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8008bfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bfc:	e03c      	b.n	8008c78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bfe:	f7fc fc5f 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8008c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c04:	e038      	b.n	8008c78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fb1a 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c14:	e030      	b.n	8008c78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c16:	f107 0318 	add.w	r3, r7, #24
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fc66 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c24:	e028      	b.n	8008c78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c26:	4b09      	ldr	r3, [pc, #36]	@ (8008c4c <UART_SetConfig+0xc2c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d012      	beq.n	8008c58 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c32:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <UART_SetConfig+0xc2c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	08db      	lsrs	r3, r3, #3
 8008c38:	f003 0303 	and.w	r3, r3, #3
 8008c3c:	4a04      	ldr	r2, [pc, #16]	@ (8008c50 <UART_SetConfig+0xc30>)
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c44:	e018      	b.n	8008c78 <UART_SetConfig+0xc58>
 8008c46:	bf00      	nop
 8008c48:	08010204 	.word	0x08010204
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	03d09000 	.word	0x03d09000
 8008c54:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008c58:	4b24      	ldr	r3, [pc, #144]	@ (8008cec <UART_SetConfig+0xccc>)
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5c:	e00c      	b.n	8008c78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c5e:	4b24      	ldr	r3, [pc, #144]	@ (8008cf0 <UART_SetConfig+0xcd0>)
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c62:	e009      	b.n	8008c78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c6a:	e005      	b.n	8008c78 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c76:	bf00      	nop
    }

    if (pclk != 0U)
 8008c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d021      	beq.n	8008cc2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c82:	4a1c      	ldr	r2, [pc, #112]	@ (8008cf4 <UART_SetConfig+0xcd4>)
 8008c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	085b      	lsrs	r3, r3, #1
 8008c96:	441a      	add	r2, r3
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	2b0f      	cmp	r3, #15
 8008ca6:	d909      	bls.n	8008cbc <UART_SetConfig+0xc9c>
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cae:	d205      	bcs.n	8008cbc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	e002      	b.n	8008cc2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008cde:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3748      	adds	r7, #72	@ 0x48
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cec:	03d09000 	.word	0x03d09000
 8008cf0:	003d0900 	.word	0x003d0900
 8008cf4:	08010204 	.word	0x08010204

08008cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8c:	f003 0310 	and.w	r3, r3, #16
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01a      	beq.n	8008e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008df6:	d10a      	bne.n	8008e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  }
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b098      	sub	sp, #96	@ 0x60
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e4c:	f7f8 fc9c 	bl	8001788 <HAL_GetTick>
 8008e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d12f      	bne.n	8008ec0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f88e 	bl	8008f90 <UART_WaitOnFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d022      	beq.n	8008ec0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	e853 3f00 	ldrex	r3, [r3]
 8008e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ea0:	e841 2300 	strex	r3, r2, [r1]
 8008ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1e6      	bne.n	8008e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e063      	b.n	8008f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0304 	and.w	r3, r3, #4
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d149      	bne.n	8008f62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ece:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f857 	bl	8008f90 <UART_WaitOnFlagUntilTimeout>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d03c      	beq.n	8008f62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f06:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e6      	bne.n	8008ee8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f3a:	61fa      	str	r2, [r7, #28]
 8008f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	69b9      	ldr	r1, [r7, #24]
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	617b      	str	r3, [r7, #20]
   return(result);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e5      	bne.n	8008f1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e012      	b.n	8008f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3758      	adds	r7, #88	@ 0x58
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa0:	e04f      	b.n	8009042 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa8:	d04b      	beq.n	8009042 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008faa:	f7f8 fbed 	bl	8001788 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d302      	bcc.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e04e      	b.n	8009062 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d037      	beq.n	8009042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b80      	cmp	r3, #128	@ 0x80
 8008fd6:	d034      	beq.n	8009042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b40      	cmp	r3, #64	@ 0x40
 8008fdc:	d031      	beq.n	8009042 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	f003 0308 	and.w	r3, r3, #8
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d110      	bne.n	800900e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2208      	movs	r2, #8
 8008ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 f839 	bl	800906c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e029      	b.n	8009062 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800901c:	d111      	bne.n	8009042 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f81f 	bl	800906c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2220      	movs	r2, #32
 8009032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e00f      	b.n	8009062 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69da      	ldr	r2, [r3, #28]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4013      	ands	r3, r2
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	429a      	cmp	r2, r3
 8009050:	bf0c      	ite	eq
 8009052:	2301      	moveq	r3, #1
 8009054:	2300      	movne	r3, #0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	429a      	cmp	r2, r3
 800905e:	d0a0      	beq.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b095      	sub	sp, #84	@ 0x54
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009092:	643b      	str	r3, [r7, #64]	@ 0x40
 8009094:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e6      	bne.n	8009074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3308      	adds	r3, #8
 80090ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009134 <UART_EndRxTransfer+0xc8>)
 80090ba:	4013      	ands	r3, r2
 80090bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3308      	adds	r3, #8
 80090c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e5      	bne.n	80090a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d118      	bne.n	8009114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f023 0310 	bic.w	r3, r3, #16
 80090f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6979      	ldr	r1, [r7, #20]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	613b      	str	r3, [r7, #16]
   return(result);
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e6      	bne.n	80090e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009128:	bf00      	nop
 800912a:	3754      	adds	r7, #84	@ 0x54
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	effffffe 	.word	0xeffffffe

08009138 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009146:	2b01      	cmp	r3, #1
 8009148:	d101      	bne.n	800914e <HAL_UARTEx_DisableFifoMode+0x16>
 800914a:	2302      	movs	r3, #2
 800914c:	e027      	b.n	800919e <HAL_UARTEx_DisableFifoMode+0x66>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2224      	movs	r2, #36	@ 0x24
 800915a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0201 	bic.w	r2, r2, #1
 8009174:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800917c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091be:	2302      	movs	r3, #2
 80091c0:	e02d      	b.n	800921e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2224      	movs	r2, #36	@ 0x24
 80091ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0201 	bic.w	r2, r2, #1
 80091e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f850 	bl	80092a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009236:	2b01      	cmp	r3, #1
 8009238:	d101      	bne.n	800923e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800923a:	2302      	movs	r3, #2
 800923c:	e02d      	b.n	800929a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2224      	movs	r2, #36	@ 0x24
 800924a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0201 	bic.w	r2, r2, #1
 8009264:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f812 	bl	80092a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2220      	movs	r2, #32
 800928c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d108      	bne.n	80092c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092c4:	e031      	b.n	800932a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092c6:	2310      	movs	r3, #16
 80092c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092ca:	2310      	movs	r3, #16
 80092cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	0e5b      	lsrs	r3, r3, #25
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	0f5b      	lsrs	r3, r3, #29
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	7b3a      	ldrb	r2, [r7, #12]
 80092f2:	4911      	ldr	r1, [pc, #68]	@ (8009338 <UARTEx_SetNbDataToProcess+0x94>)
 80092f4:	5c8a      	ldrb	r2, [r1, r2]
 80092f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092fa:	7b3a      	ldrb	r2, [r7, #12]
 80092fc:	490f      	ldr	r1, [pc, #60]	@ (800933c <UARTEx_SetNbDataToProcess+0x98>)
 80092fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009300:	fb93 f3f2 	sdiv	r3, r3, r2
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	7b7a      	ldrb	r2, [r7, #13]
 8009310:	4909      	ldr	r1, [pc, #36]	@ (8009338 <UARTEx_SetNbDataToProcess+0x94>)
 8009312:	5c8a      	ldrb	r2, [r1, r2]
 8009314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009318:	7b7a      	ldrb	r2, [r7, #13]
 800931a:	4908      	ldr	r1, [pc, #32]	@ (800933c <UARTEx_SetNbDataToProcess+0x98>)
 800931c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800931e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800932a:	bf00      	nop
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	0801021c 	.word	0x0801021c
 800933c:	08010224 	.word	0x08010224

08009340 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e03c      	b.n	80093cc <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7f8 f81c 	bl	80013a4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0201 	bic.w	r2, r2, #1
 8009382:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f85b 	bl	8009440 <USART_SetConfig>
 800938a:	4603      	mov	r3, r0
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e01b      	b.n	80093cc <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093a2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093b2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fddd 	bl	8009f84 <USART_CheckIdleState>
 80093ca:	4603      	mov	r3, r0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	4613      	mov	r3, r2
 80093e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80093e4:	e018      	b.n	8009418 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d014      	beq.n	8009418 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ee:	f7f8 f9cb 	bl	8001788 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d302      	bcc.n	8009404 <USART_WaitOnFlagUntilTimeout+0x30>
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d109      	bne.n	8009418 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e00f      	b.n	8009438 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69da      	ldr	r2, [r3, #28]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4013      	ands	r3, r2
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	429a      	cmp	r2, r3
 8009426:	bf0c      	ite	eq
 8009428:	2301      	moveq	r3, #1
 800942a:	2300      	movne	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	79fb      	ldrb	r3, [r7, #7]
 8009432:	429a      	cmp	r2, r3
 8009434:	d0d7      	beq.n	80093e6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08e      	sub	sp, #56	@ 0x38
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800944e:	2300      	movs	r3, #0
 8009450:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	4313      	orrs	r3, r2
 8009462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4bc9      	ldr	r3, [pc, #804]	@ (8009794 <USART_SetConfig+0x354>)
 8009470:	4013      	ands	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6812      	ldr	r2, [r2, #0]
 8009476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009478:	430b      	orrs	r3, r1
 800947a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800947c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009488:	4313      	orrs	r3, r2
 800948a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	699a      	ldr	r2, [r3, #24]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	4313      	orrs	r3, r2
 8009496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009498:	4313      	orrs	r3, r2
 800949a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094a2:	4313      	orrs	r3, r2
 80094a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	4bba      	ldr	r3, [pc, #744]	@ (8009798 <USART_SetConfig+0x358>)
 80094ae:	4013      	ands	r3, r2
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6812      	ldr	r2, [r2, #0]
 80094b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094b6:	430b      	orrs	r3, r1
 80094b8:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	f023 010f 	bic.w	r1, r3, #15
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4ab1      	ldr	r2, [pc, #708]	@ (800979c <USART_SetConfig+0x35c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d176      	bne.n	80095c8 <USART_SetConfig+0x188>
 80094da:	4bb1      	ldr	r3, [pc, #708]	@ (80097a0 <USART_SetConfig+0x360>)
 80094dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094e2:	2b28      	cmp	r3, #40	@ 0x28
 80094e4:	d86c      	bhi.n	80095c0 <USART_SetConfig+0x180>
 80094e6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <USART_SetConfig+0xac>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009591 	.word	0x08009591
 80094f0:	080095c1 	.word	0x080095c1
 80094f4:	080095c1 	.word	0x080095c1
 80094f8:	080095c1 	.word	0x080095c1
 80094fc:	080095c1 	.word	0x080095c1
 8009500:	080095c1 	.word	0x080095c1
 8009504:	080095c1 	.word	0x080095c1
 8009508:	080095c1 	.word	0x080095c1
 800950c:	08009599 	.word	0x08009599
 8009510:	080095c1 	.word	0x080095c1
 8009514:	080095c1 	.word	0x080095c1
 8009518:	080095c1 	.word	0x080095c1
 800951c:	080095c1 	.word	0x080095c1
 8009520:	080095c1 	.word	0x080095c1
 8009524:	080095c1 	.word	0x080095c1
 8009528:	080095c1 	.word	0x080095c1
 800952c:	080095a1 	.word	0x080095a1
 8009530:	080095c1 	.word	0x080095c1
 8009534:	080095c1 	.word	0x080095c1
 8009538:	080095c1 	.word	0x080095c1
 800953c:	080095c1 	.word	0x080095c1
 8009540:	080095c1 	.word	0x080095c1
 8009544:	080095c1 	.word	0x080095c1
 8009548:	080095c1 	.word	0x080095c1
 800954c:	080095a9 	.word	0x080095a9
 8009550:	080095c1 	.word	0x080095c1
 8009554:	080095c1 	.word	0x080095c1
 8009558:	080095c1 	.word	0x080095c1
 800955c:	080095c1 	.word	0x080095c1
 8009560:	080095c1 	.word	0x080095c1
 8009564:	080095c1 	.word	0x080095c1
 8009568:	080095c1 	.word	0x080095c1
 800956c:	080095b1 	.word	0x080095b1
 8009570:	080095c1 	.word	0x080095c1
 8009574:	080095c1 	.word	0x080095c1
 8009578:	080095c1 	.word	0x080095c1
 800957c:	080095c1 	.word	0x080095c1
 8009580:	080095c1 	.word	0x080095c1
 8009584:	080095c1 	.word	0x080095c1
 8009588:	080095c1 	.word	0x080095c1
 800958c:	080095b9 	.word	0x080095b9
 8009590:	2301      	movs	r3, #1
 8009592:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009596:	e18e      	b.n	80098b6 <USART_SetConfig+0x476>
 8009598:	2302      	movs	r3, #2
 800959a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800959e:	e18a      	b.n	80098b6 <USART_SetConfig+0x476>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80095a6:	e186      	b.n	80098b6 <USART_SetConfig+0x476>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80095ae:	e182      	b.n	80098b6 <USART_SetConfig+0x476>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80095b6:	e17e      	b.n	80098b6 <USART_SetConfig+0x476>
 80095b8:	2320      	movs	r3, #32
 80095ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80095be:	e17a      	b.n	80098b6 <USART_SetConfig+0x476>
 80095c0:	2340      	movs	r3, #64	@ 0x40
 80095c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80095c6:	e176      	b.n	80098b6 <USART_SetConfig+0x476>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a75      	ldr	r2, [pc, #468]	@ (80097a4 <USART_SetConfig+0x364>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d130      	bne.n	8009634 <USART_SetConfig+0x1f4>
 80095d2:	4b73      	ldr	r3, [pc, #460]	@ (80097a0 <USART_SetConfig+0x360>)
 80095d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d826      	bhi.n	800962c <USART_SetConfig+0x1ec>
 80095de:	a201      	add	r2, pc, #4	@ (adr r2, 80095e4 <USART_SetConfig+0x1a4>)
 80095e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e4:	080095fd 	.word	0x080095fd
 80095e8:	08009605 	.word	0x08009605
 80095ec:	0800960d 	.word	0x0800960d
 80095f0:	08009615 	.word	0x08009615
 80095f4:	0800961d 	.word	0x0800961d
 80095f8:	08009625 	.word	0x08009625
 80095fc:	2300      	movs	r3, #0
 80095fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009602:	e158      	b.n	80098b6 <USART_SetConfig+0x476>
 8009604:	2302      	movs	r3, #2
 8009606:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800960a:	e154      	b.n	80098b6 <USART_SetConfig+0x476>
 800960c:	2304      	movs	r3, #4
 800960e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009612:	e150      	b.n	80098b6 <USART_SetConfig+0x476>
 8009614:	2308      	movs	r3, #8
 8009616:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800961a:	e14c      	b.n	80098b6 <USART_SetConfig+0x476>
 800961c:	2310      	movs	r3, #16
 800961e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009622:	e148      	b.n	80098b6 <USART_SetConfig+0x476>
 8009624:	2320      	movs	r3, #32
 8009626:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800962a:	e144      	b.n	80098b6 <USART_SetConfig+0x476>
 800962c:	2340      	movs	r3, #64	@ 0x40
 800962e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009632:	e140      	b.n	80098b6 <USART_SetConfig+0x476>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a5b      	ldr	r2, [pc, #364]	@ (80097a8 <USART_SetConfig+0x368>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d130      	bne.n	80096a0 <USART_SetConfig+0x260>
 800963e:	4b58      	ldr	r3, [pc, #352]	@ (80097a0 <USART_SetConfig+0x360>)
 8009640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b05      	cmp	r3, #5
 8009648:	d826      	bhi.n	8009698 <USART_SetConfig+0x258>
 800964a:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <USART_SetConfig+0x210>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	08009669 	.word	0x08009669
 8009654:	08009671 	.word	0x08009671
 8009658:	08009679 	.word	0x08009679
 800965c:	08009681 	.word	0x08009681
 8009660:	08009689 	.word	0x08009689
 8009664:	08009691 	.word	0x08009691
 8009668:	2300      	movs	r3, #0
 800966a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800966e:	e122      	b.n	80098b6 <USART_SetConfig+0x476>
 8009670:	2302      	movs	r3, #2
 8009672:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009676:	e11e      	b.n	80098b6 <USART_SetConfig+0x476>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800967e:	e11a      	b.n	80098b6 <USART_SetConfig+0x476>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009686:	e116      	b.n	80098b6 <USART_SetConfig+0x476>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800968e:	e112      	b.n	80098b6 <USART_SetConfig+0x476>
 8009690:	2320      	movs	r3, #32
 8009692:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009696:	e10e      	b.n	80098b6 <USART_SetConfig+0x476>
 8009698:	2340      	movs	r3, #64	@ 0x40
 800969a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800969e:	e10a      	b.n	80098b6 <USART_SetConfig+0x476>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a41      	ldr	r2, [pc, #260]	@ (80097ac <USART_SetConfig+0x36c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	f040 8086 	bne.w	80097b8 <USART_SetConfig+0x378>
 80096ac:	4b3c      	ldr	r3, [pc, #240]	@ (80097a0 <USART_SetConfig+0x360>)
 80096ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096b4:	2b28      	cmp	r3, #40	@ 0x28
 80096b6:	d87b      	bhi.n	80097b0 <USART_SetConfig+0x370>
 80096b8:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <USART_SetConfig+0x280>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	08009765 	.word	0x08009765
 80096c4:	080097b1 	.word	0x080097b1
 80096c8:	080097b1 	.word	0x080097b1
 80096cc:	080097b1 	.word	0x080097b1
 80096d0:	080097b1 	.word	0x080097b1
 80096d4:	080097b1 	.word	0x080097b1
 80096d8:	080097b1 	.word	0x080097b1
 80096dc:	080097b1 	.word	0x080097b1
 80096e0:	0800976d 	.word	0x0800976d
 80096e4:	080097b1 	.word	0x080097b1
 80096e8:	080097b1 	.word	0x080097b1
 80096ec:	080097b1 	.word	0x080097b1
 80096f0:	080097b1 	.word	0x080097b1
 80096f4:	080097b1 	.word	0x080097b1
 80096f8:	080097b1 	.word	0x080097b1
 80096fc:	080097b1 	.word	0x080097b1
 8009700:	08009775 	.word	0x08009775
 8009704:	080097b1 	.word	0x080097b1
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097b1 	.word	0x080097b1
 8009710:	080097b1 	.word	0x080097b1
 8009714:	080097b1 	.word	0x080097b1
 8009718:	080097b1 	.word	0x080097b1
 800971c:	080097b1 	.word	0x080097b1
 8009720:	0800977d 	.word	0x0800977d
 8009724:	080097b1 	.word	0x080097b1
 8009728:	080097b1 	.word	0x080097b1
 800972c:	080097b1 	.word	0x080097b1
 8009730:	080097b1 	.word	0x080097b1
 8009734:	080097b1 	.word	0x080097b1
 8009738:	080097b1 	.word	0x080097b1
 800973c:	080097b1 	.word	0x080097b1
 8009740:	08009785 	.word	0x08009785
 8009744:	080097b1 	.word	0x080097b1
 8009748:	080097b1 	.word	0x080097b1
 800974c:	080097b1 	.word	0x080097b1
 8009750:	080097b1 	.word	0x080097b1
 8009754:	080097b1 	.word	0x080097b1
 8009758:	080097b1 	.word	0x080097b1
 800975c:	080097b1 	.word	0x080097b1
 8009760:	0800978d 	.word	0x0800978d
 8009764:	2301      	movs	r3, #1
 8009766:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800976a:	e0a4      	b.n	80098b6 <USART_SetConfig+0x476>
 800976c:	2302      	movs	r3, #2
 800976e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009772:	e0a0      	b.n	80098b6 <USART_SetConfig+0x476>
 8009774:	2304      	movs	r3, #4
 8009776:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800977a:	e09c      	b.n	80098b6 <USART_SetConfig+0x476>
 800977c:	2308      	movs	r3, #8
 800977e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009782:	e098      	b.n	80098b6 <USART_SetConfig+0x476>
 8009784:	2310      	movs	r3, #16
 8009786:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800978a:	e094      	b.n	80098b6 <USART_SetConfig+0x476>
 800978c:	2320      	movs	r3, #32
 800978e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009792:	e090      	b.n	80098b6 <USART_SetConfig+0x476>
 8009794:	cfff69f3 	.word	0xcfff69f3
 8009798:	ffffc0f6 	.word	0xffffc0f6
 800979c:	40011000 	.word	0x40011000
 80097a0:	58024400 	.word	0x58024400
 80097a4:	40004400 	.word	0x40004400
 80097a8:	40004800 	.word	0x40004800
 80097ac:	40011400 	.word	0x40011400
 80097b0:	2340      	movs	r3, #64	@ 0x40
 80097b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80097b6:	e07e      	b.n	80098b6 <USART_SetConfig+0x476>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4ab5      	ldr	r2, [pc, #724]	@ (8009a94 <USART_SetConfig+0x654>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d176      	bne.n	80098b0 <USART_SetConfig+0x470>
 80097c2:	4bb5      	ldr	r3, [pc, #724]	@ (8009a98 <USART_SetConfig+0x658>)
 80097c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097ca:	2b28      	cmp	r3, #40	@ 0x28
 80097cc:	d86c      	bhi.n	80098a8 <USART_SetConfig+0x468>
 80097ce:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <USART_SetConfig+0x394>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009879 	.word	0x08009879
 80097d8:	080098a9 	.word	0x080098a9
 80097dc:	080098a9 	.word	0x080098a9
 80097e0:	080098a9 	.word	0x080098a9
 80097e4:	080098a9 	.word	0x080098a9
 80097e8:	080098a9 	.word	0x080098a9
 80097ec:	080098a9 	.word	0x080098a9
 80097f0:	080098a9 	.word	0x080098a9
 80097f4:	08009881 	.word	0x08009881
 80097f8:	080098a9 	.word	0x080098a9
 80097fc:	080098a9 	.word	0x080098a9
 8009800:	080098a9 	.word	0x080098a9
 8009804:	080098a9 	.word	0x080098a9
 8009808:	080098a9 	.word	0x080098a9
 800980c:	080098a9 	.word	0x080098a9
 8009810:	080098a9 	.word	0x080098a9
 8009814:	08009889 	.word	0x08009889
 8009818:	080098a9 	.word	0x080098a9
 800981c:	080098a9 	.word	0x080098a9
 8009820:	080098a9 	.word	0x080098a9
 8009824:	080098a9 	.word	0x080098a9
 8009828:	080098a9 	.word	0x080098a9
 800982c:	080098a9 	.word	0x080098a9
 8009830:	080098a9 	.word	0x080098a9
 8009834:	08009891 	.word	0x08009891
 8009838:	080098a9 	.word	0x080098a9
 800983c:	080098a9 	.word	0x080098a9
 8009840:	080098a9 	.word	0x080098a9
 8009844:	080098a9 	.word	0x080098a9
 8009848:	080098a9 	.word	0x080098a9
 800984c:	080098a9 	.word	0x080098a9
 8009850:	080098a9 	.word	0x080098a9
 8009854:	08009899 	.word	0x08009899
 8009858:	080098a9 	.word	0x080098a9
 800985c:	080098a9 	.word	0x080098a9
 8009860:	080098a9 	.word	0x080098a9
 8009864:	080098a9 	.word	0x080098a9
 8009868:	080098a9 	.word	0x080098a9
 800986c:	080098a9 	.word	0x080098a9
 8009870:	080098a9 	.word	0x080098a9
 8009874:	080098a1 	.word	0x080098a1
 8009878:	2301      	movs	r3, #1
 800987a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800987e:	e01a      	b.n	80098b6 <USART_SetConfig+0x476>
 8009880:	2302      	movs	r3, #2
 8009882:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009886:	e016      	b.n	80098b6 <USART_SetConfig+0x476>
 8009888:	2304      	movs	r3, #4
 800988a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800988e:	e012      	b.n	80098b6 <USART_SetConfig+0x476>
 8009890:	2308      	movs	r3, #8
 8009892:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009896:	e00e      	b.n	80098b6 <USART_SetConfig+0x476>
 8009898:	2310      	movs	r3, #16
 800989a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800989e:	e00a      	b.n	80098b6 <USART_SetConfig+0x476>
 80098a0:	2320      	movs	r3, #32
 80098a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80098a6:	e006      	b.n	80098b6 <USART_SetConfig+0x476>
 80098a8:	2340      	movs	r3, #64	@ 0x40
 80098aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80098ae:	e002      	b.n	80098b6 <USART_SetConfig+0x476>
 80098b0:	2340      	movs	r3, #64	@ 0x40
 80098b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 80098b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	f200 832f 	bhi.w	8009f1e <USART_SetConfig+0xade>
 80098c0:	a201      	add	r2, pc, #4	@ (adr r2, 80098c8 <USART_SetConfig+0x488>)
 80098c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c6:	bf00      	nop
 80098c8:	0800994d 	.word	0x0800994d
 80098cc:	08009a03 	.word	0x08009a03
 80098d0:	08009ac3 	.word	0x08009ac3
 80098d4:	08009f1f 	.word	0x08009f1f
 80098d8:	08009b7d 	.word	0x08009b7d
 80098dc:	08009f1f 	.word	0x08009f1f
 80098e0:	08009f1f 	.word	0x08009f1f
 80098e4:	08009f1f 	.word	0x08009f1f
 80098e8:	08009c37 	.word	0x08009c37
 80098ec:	08009f1f 	.word	0x08009f1f
 80098f0:	08009f1f 	.word	0x08009f1f
 80098f4:	08009f1f 	.word	0x08009f1f
 80098f8:	08009f1f 	.word	0x08009f1f
 80098fc:	08009f1f 	.word	0x08009f1f
 8009900:	08009f1f 	.word	0x08009f1f
 8009904:	08009f1f 	.word	0x08009f1f
 8009908:	08009daf 	.word	0x08009daf
 800990c:	08009f1f 	.word	0x08009f1f
 8009910:	08009f1f 	.word	0x08009f1f
 8009914:	08009f1f 	.word	0x08009f1f
 8009918:	08009f1f 	.word	0x08009f1f
 800991c:	08009f1f 	.word	0x08009f1f
 8009920:	08009f1f 	.word	0x08009f1f
 8009924:	08009f1f 	.word	0x08009f1f
 8009928:	08009f1f 	.word	0x08009f1f
 800992c:	08009f1f 	.word	0x08009f1f
 8009930:	08009f1f 	.word	0x08009f1f
 8009934:	08009f1f 	.word	0x08009f1f
 8009938:	08009f1f 	.word	0x08009f1f
 800993c:	08009f1f 	.word	0x08009f1f
 8009940:	08009f1f 	.word	0x08009f1f
 8009944:	08009f1f 	.word	0x08009f1f
 8009948:	08009e6d 	.word	0x08009e6d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800994c:	f7fb fda2 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8009950:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009956:	2b00      	cmp	r3, #0
 8009958:	d044      	beq.n	80099e4 <USART_SetConfig+0x5a4>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995e:	2b01      	cmp	r3, #1
 8009960:	d03e      	beq.n	80099e0 <USART_SetConfig+0x5a0>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009966:	2b02      	cmp	r3, #2
 8009968:	d038      	beq.n	80099dc <USART_SetConfig+0x59c>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996e:	2b03      	cmp	r3, #3
 8009970:	d032      	beq.n	80099d8 <USART_SetConfig+0x598>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009976:	2b04      	cmp	r3, #4
 8009978:	d02c      	beq.n	80099d4 <USART_SetConfig+0x594>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997e:	2b05      	cmp	r3, #5
 8009980:	d026      	beq.n	80099d0 <USART_SetConfig+0x590>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009986:	2b06      	cmp	r3, #6
 8009988:	d020      	beq.n	80099cc <USART_SetConfig+0x58c>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800998e:	2b07      	cmp	r3, #7
 8009990:	d01a      	beq.n	80099c8 <USART_SetConfig+0x588>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009996:	2b08      	cmp	r3, #8
 8009998:	d014      	beq.n	80099c4 <USART_SetConfig+0x584>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999e:	2b09      	cmp	r3, #9
 80099a0:	d00e      	beq.n	80099c0 <USART_SetConfig+0x580>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a6:	2b0a      	cmp	r3, #10
 80099a8:	d008      	beq.n	80099bc <USART_SetConfig+0x57c>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ae:	2b0b      	cmp	r3, #11
 80099b0:	d102      	bne.n	80099b8 <USART_SetConfig+0x578>
 80099b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099b6:	e016      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e014      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099bc:	2380      	movs	r3, #128	@ 0x80
 80099be:	e012      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099c0:	2340      	movs	r3, #64	@ 0x40
 80099c2:	e010      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099c4:	2320      	movs	r3, #32
 80099c6:	e00e      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099c8:	2310      	movs	r3, #16
 80099ca:	e00c      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099cc:	230c      	movs	r3, #12
 80099ce:	e00a      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099d0:	230a      	movs	r3, #10
 80099d2:	e008      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099d4:	2308      	movs	r3, #8
 80099d6:	e006      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099d8:	2306      	movs	r3, #6
 80099da:	e004      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099dc:	2304      	movs	r3, #4
 80099de:	e002      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e000      	b.n	80099e6 <USART_SetConfig+0x5a6>
 80099e4:	2301      	movs	r3, #1
 80099e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ec:	005a      	lsls	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	085b      	lsrs	r3, r3, #1
 80099f4:	441a      	add	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009a00:	e291      	b.n	8009f26 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a02:	f7fb fd5d 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8009a06:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d049      	beq.n	8009aa4 <USART_SetConfig+0x664>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d043      	beq.n	8009aa0 <USART_SetConfig+0x660>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d03d      	beq.n	8009a9c <USART_SetConfig+0x65c>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d032      	beq.n	8009a8e <USART_SetConfig+0x64e>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d02c      	beq.n	8009a8a <USART_SetConfig+0x64a>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a34:	2b05      	cmp	r3, #5
 8009a36:	d026      	beq.n	8009a86 <USART_SetConfig+0x646>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3c:	2b06      	cmp	r3, #6
 8009a3e:	d020      	beq.n	8009a82 <USART_SetConfig+0x642>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a44:	2b07      	cmp	r3, #7
 8009a46:	d01a      	beq.n	8009a7e <USART_SetConfig+0x63e>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4c:	2b08      	cmp	r3, #8
 8009a4e:	d014      	beq.n	8009a7a <USART_SetConfig+0x63a>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a54:	2b09      	cmp	r3, #9
 8009a56:	d00e      	beq.n	8009a76 <USART_SetConfig+0x636>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a5c:	2b0a      	cmp	r3, #10
 8009a5e:	d008      	beq.n	8009a72 <USART_SetConfig+0x632>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a64:	2b0b      	cmp	r3, #11
 8009a66:	d102      	bne.n	8009a6e <USART_SetConfig+0x62e>
 8009a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a6c:	e01b      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e019      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a72:	2380      	movs	r3, #128	@ 0x80
 8009a74:	e017      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a76:	2340      	movs	r3, #64	@ 0x40
 8009a78:	e015      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a7a:	2320      	movs	r3, #32
 8009a7c:	e013      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a7e:	2310      	movs	r3, #16
 8009a80:	e011      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a82:	230c      	movs	r3, #12
 8009a84:	e00f      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a86:	230a      	movs	r3, #10
 8009a88:	e00d      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	e00b      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a8e:	2306      	movs	r3, #6
 8009a90:	e009      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009a92:	bf00      	nop
 8009a94:	40011c00 	.word	0x40011c00
 8009a98:	58024400 	.word	0x58024400
 8009a9c:	2304      	movs	r3, #4
 8009a9e:	e002      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e000      	b.n	8009aa6 <USART_SetConfig+0x666>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aac:	005a      	lsls	r2, r3, #1
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	441a      	add	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009ac0:	e231      	b.n	8009f26 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac2:	f107 0318 	add.w	r3, r7, #24
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fd fbbc 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d044      	beq.n	8009b60 <USART_SetConfig+0x720>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d03e      	beq.n	8009b5c <USART_SetConfig+0x71c>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d038      	beq.n	8009b58 <USART_SetConfig+0x718>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d032      	beq.n	8009b54 <USART_SetConfig+0x714>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af2:	2b04      	cmp	r3, #4
 8009af4:	d02c      	beq.n	8009b50 <USART_SetConfig+0x710>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d026      	beq.n	8009b4c <USART_SetConfig+0x70c>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b02:	2b06      	cmp	r3, #6
 8009b04:	d020      	beq.n	8009b48 <USART_SetConfig+0x708>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0a:	2b07      	cmp	r3, #7
 8009b0c:	d01a      	beq.n	8009b44 <USART_SetConfig+0x704>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	d014      	beq.n	8009b40 <USART_SetConfig+0x700>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	2b09      	cmp	r3, #9
 8009b1c:	d00e      	beq.n	8009b3c <USART_SetConfig+0x6fc>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b22:	2b0a      	cmp	r3, #10
 8009b24:	d008      	beq.n	8009b38 <USART_SetConfig+0x6f8>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2a:	2b0b      	cmp	r3, #11
 8009b2c:	d102      	bne.n	8009b34 <USART_SetConfig+0x6f4>
 8009b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b32:	e016      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b34:	2301      	movs	r3, #1
 8009b36:	e014      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b38:	2380      	movs	r3, #128	@ 0x80
 8009b3a:	e012      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b3c:	2340      	movs	r3, #64	@ 0x40
 8009b3e:	e010      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b40:	2320      	movs	r3, #32
 8009b42:	e00e      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b44:	2310      	movs	r3, #16
 8009b46:	e00c      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b48:	230c      	movs	r3, #12
 8009b4a:	e00a      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b4c:	230a      	movs	r3, #10
 8009b4e:	e008      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b50:	2308      	movs	r3, #8
 8009b52:	e006      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b54:	2306      	movs	r3, #6
 8009b56:	e004      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	e002      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e000      	b.n	8009b62 <USART_SetConfig+0x722>
 8009b60:	2301      	movs	r3, #1
 8009b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b66:	005a      	lsls	r2, r3, #1
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	085b      	lsrs	r3, r3, #1
 8009b6e:	441a      	add	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8009b7a:	e1d4      	b.n	8009f26 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fd fcb3 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d044      	beq.n	8009c1a <USART_SetConfig+0x7da>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d03e      	beq.n	8009c16 <USART_SetConfig+0x7d6>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d038      	beq.n	8009c12 <USART_SetConfig+0x7d2>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba4:	2b03      	cmp	r3, #3
 8009ba6:	d032      	beq.n	8009c0e <USART_SetConfig+0x7ce>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d02c      	beq.n	8009c0a <USART_SetConfig+0x7ca>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb4:	2b05      	cmp	r3, #5
 8009bb6:	d026      	beq.n	8009c06 <USART_SetConfig+0x7c6>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bbc:	2b06      	cmp	r3, #6
 8009bbe:	d020      	beq.n	8009c02 <USART_SetConfig+0x7c2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	2b07      	cmp	r3, #7
 8009bc6:	d01a      	beq.n	8009bfe <USART_SetConfig+0x7be>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d014      	beq.n	8009bfa <USART_SetConfig+0x7ba>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd4:	2b09      	cmp	r3, #9
 8009bd6:	d00e      	beq.n	8009bf6 <USART_SetConfig+0x7b6>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bdc:	2b0a      	cmp	r3, #10
 8009bde:	d008      	beq.n	8009bf2 <USART_SetConfig+0x7b2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be4:	2b0b      	cmp	r3, #11
 8009be6:	d102      	bne.n	8009bee <USART_SetConfig+0x7ae>
 8009be8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bec:	e016      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e014      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009bf2:	2380      	movs	r3, #128	@ 0x80
 8009bf4:	e012      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009bf6:	2340      	movs	r3, #64	@ 0x40
 8009bf8:	e010      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009bfa:	2320      	movs	r3, #32
 8009bfc:	e00e      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009bfe:	2310      	movs	r3, #16
 8009c00:	e00c      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009c02:	230c      	movs	r3, #12
 8009c04:	e00a      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009c06:	230a      	movs	r3, #10
 8009c08:	e008      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009c0a:	2308      	movs	r3, #8
 8009c0c:	e006      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009c0e:	2306      	movs	r3, #6
 8009c10:	e004      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009c12:	2304      	movs	r3, #4
 8009c14:	e002      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009c16:	2302      	movs	r3, #2
 8009c18:	e000      	b.n	8009c1c <USART_SetConfig+0x7dc>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c20:	005a      	lsls	r2, r3, #1
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	085b      	lsrs	r3, r3, #1
 8009c28:	441a      	add	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c32:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8009c34:	e177      	b.n	8009f26 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c36:	4b8a      	ldr	r3, [pc, #552]	@ (8009e60 <USART_SetConfig+0xa20>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d05d      	beq.n	8009cfe <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 8009c42:	4b87      	ldr	r3, [pc, #540]	@ (8009e60 <USART_SetConfig+0xa20>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	08db      	lsrs	r3, r3, #3
 8009c48:	f003 0303 	and.w	r3, r3, #3
 8009c4c:	4a85      	ldr	r2, [pc, #532]	@ (8009e64 <USART_SetConfig+0xa24>)
 8009c4e:	40da      	lsrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d044      	beq.n	8009ce2 <USART_SetConfig+0x8a2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d03e      	beq.n	8009cde <USART_SetConfig+0x89e>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d038      	beq.n	8009cda <USART_SetConfig+0x89a>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d032      	beq.n	8009cd6 <USART_SetConfig+0x896>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d02c      	beq.n	8009cd2 <USART_SetConfig+0x892>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7c:	2b05      	cmp	r3, #5
 8009c7e:	d026      	beq.n	8009cce <USART_SetConfig+0x88e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c84:	2b06      	cmp	r3, #6
 8009c86:	d020      	beq.n	8009cca <USART_SetConfig+0x88a>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8c:	2b07      	cmp	r3, #7
 8009c8e:	d01a      	beq.n	8009cc6 <USART_SetConfig+0x886>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c94:	2b08      	cmp	r3, #8
 8009c96:	d014      	beq.n	8009cc2 <USART_SetConfig+0x882>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	d00e      	beq.n	8009cbe <USART_SetConfig+0x87e>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca4:	2b0a      	cmp	r3, #10
 8009ca6:	d008      	beq.n	8009cba <USART_SetConfig+0x87a>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cac:	2b0b      	cmp	r3, #11
 8009cae:	d102      	bne.n	8009cb6 <USART_SetConfig+0x876>
 8009cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cb4:	e016      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e014      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cba:	2380      	movs	r3, #128	@ 0x80
 8009cbc:	e012      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cbe:	2340      	movs	r3, #64	@ 0x40
 8009cc0:	e010      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cc2:	2320      	movs	r3, #32
 8009cc4:	e00e      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	e00c      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	e00a      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cce:	230a      	movs	r3, #10
 8009cd0:	e008      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cd2:	2308      	movs	r3, #8
 8009cd4:	e006      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cd6:	2306      	movs	r3, #6
 8009cd8:	e004      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cda:	2304      	movs	r3, #4
 8009cdc:	e002      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e000      	b.n	8009ce4 <USART_SetConfig+0x8a4>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce8:	005a      	lsls	r2, r3, #1
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	085b      	lsrs	r3, r3, #1
 8009cf0:	441a      	add	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfa:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8009cfc:	e113      	b.n	8009f26 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d044      	beq.n	8009d90 <USART_SetConfig+0x950>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d03e      	beq.n	8009d8c <USART_SetConfig+0x94c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d038      	beq.n	8009d88 <USART_SetConfig+0x948>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d032      	beq.n	8009d84 <USART_SetConfig+0x944>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d02c      	beq.n	8009d80 <USART_SetConfig+0x940>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d026      	beq.n	8009d7c <USART_SetConfig+0x93c>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d32:	2b06      	cmp	r3, #6
 8009d34:	d020      	beq.n	8009d78 <USART_SetConfig+0x938>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d3a:	2b07      	cmp	r3, #7
 8009d3c:	d01a      	beq.n	8009d74 <USART_SetConfig+0x934>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d014      	beq.n	8009d70 <USART_SetConfig+0x930>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4a:	2b09      	cmp	r3, #9
 8009d4c:	d00e      	beq.n	8009d6c <USART_SetConfig+0x92c>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d52:	2b0a      	cmp	r3, #10
 8009d54:	d008      	beq.n	8009d68 <USART_SetConfig+0x928>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5a:	2b0b      	cmp	r3, #11
 8009d5c:	d102      	bne.n	8009d64 <USART_SetConfig+0x924>
 8009d5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d62:	e016      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d64:	2301      	movs	r3, #1
 8009d66:	e014      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d68:	2380      	movs	r3, #128	@ 0x80
 8009d6a:	e012      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d6c:	2340      	movs	r3, #64	@ 0x40
 8009d6e:	e010      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d70:	2320      	movs	r3, #32
 8009d72:	e00e      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d74:	2310      	movs	r3, #16
 8009d76:	e00c      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d78:	230c      	movs	r3, #12
 8009d7a:	e00a      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d7c:	230a      	movs	r3, #10
 8009d7e:	e008      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d80:	2308      	movs	r3, #8
 8009d82:	e006      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d84:	2306      	movs	r3, #6
 8009d86:	e004      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d88:	2304      	movs	r3, #4
 8009d8a:	e002      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	e000      	b.n	8009d92 <USART_SetConfig+0x952>
 8009d90:	2301      	movs	r3, #1
 8009d92:	4a34      	ldr	r2, [pc, #208]	@ (8009e64 <USART_SetConfig+0xa24>)
 8009d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d98:	005a      	lsls	r2, r3, #1
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	085b      	lsrs	r3, r3, #1
 8009da0:	441a      	add	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009daa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009dac:	e0bb      	b.n	8009f26 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d044      	beq.n	8009e40 <USART_SetConfig+0xa00>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d03e      	beq.n	8009e3c <USART_SetConfig+0x9fc>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d038      	beq.n	8009e38 <USART_SetConfig+0x9f8>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d032      	beq.n	8009e34 <USART_SetConfig+0x9f4>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d02c      	beq.n	8009e30 <USART_SetConfig+0x9f0>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d026      	beq.n	8009e2c <USART_SetConfig+0x9ec>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de2:	2b06      	cmp	r3, #6
 8009de4:	d020      	beq.n	8009e28 <USART_SetConfig+0x9e8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dea:	2b07      	cmp	r3, #7
 8009dec:	d01a      	beq.n	8009e24 <USART_SetConfig+0x9e4>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	d014      	beq.n	8009e20 <USART_SetConfig+0x9e0>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfa:	2b09      	cmp	r3, #9
 8009dfc:	d00e      	beq.n	8009e1c <USART_SetConfig+0x9dc>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e02:	2b0a      	cmp	r3, #10
 8009e04:	d008      	beq.n	8009e18 <USART_SetConfig+0x9d8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0a:	2b0b      	cmp	r3, #11
 8009e0c:	d102      	bne.n	8009e14 <USART_SetConfig+0x9d4>
 8009e0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e12:	e016      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e014      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e18:	2380      	movs	r3, #128	@ 0x80
 8009e1a:	e012      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e1c:	2340      	movs	r3, #64	@ 0x40
 8009e1e:	e010      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e20:	2320      	movs	r3, #32
 8009e22:	e00e      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e24:	2310      	movs	r3, #16
 8009e26:	e00c      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e28:	230c      	movs	r3, #12
 8009e2a:	e00a      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e2c:	230a      	movs	r3, #10
 8009e2e:	e008      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e30:	2308      	movs	r3, #8
 8009e32:	e006      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e34:	2306      	movs	r3, #6
 8009e36:	e004      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e38:	2304      	movs	r3, #4
 8009e3a:	e002      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e000      	b.n	8009e42 <USART_SetConfig+0xa02>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4a09      	ldr	r2, [pc, #36]	@ (8009e68 <USART_SetConfig+0xa28>)
 8009e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e48:	005a      	lsls	r2, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	085b      	lsrs	r3, r3, #1
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009e5c:	e063      	b.n	8009f26 <USART_SetConfig+0xae6>
 8009e5e:	bf00      	nop
 8009e60:	58024400 	.word	0x58024400
 8009e64:	03d09000 	.word	0x03d09000
 8009e68:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d044      	beq.n	8009efe <USART_SetConfig+0xabe>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d03e      	beq.n	8009efa <USART_SetConfig+0xaba>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d038      	beq.n	8009ef6 <USART_SetConfig+0xab6>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d032      	beq.n	8009ef2 <USART_SetConfig+0xab2>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d02c      	beq.n	8009eee <USART_SetConfig+0xaae>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	d026      	beq.n	8009eea <USART_SetConfig+0xaaa>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea0:	2b06      	cmp	r3, #6
 8009ea2:	d020      	beq.n	8009ee6 <USART_SetConfig+0xaa6>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea8:	2b07      	cmp	r3, #7
 8009eaa:	d01a      	beq.n	8009ee2 <USART_SetConfig+0xaa2>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	d014      	beq.n	8009ede <USART_SetConfig+0xa9e>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	2b09      	cmp	r3, #9
 8009eba:	d00e      	beq.n	8009eda <USART_SetConfig+0xa9a>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec0:	2b0a      	cmp	r3, #10
 8009ec2:	d008      	beq.n	8009ed6 <USART_SetConfig+0xa96>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec8:	2b0b      	cmp	r3, #11
 8009eca:	d102      	bne.n	8009ed2 <USART_SetConfig+0xa92>
 8009ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ed0:	e016      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e014      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009ed6:	2380      	movs	r3, #128	@ 0x80
 8009ed8:	e012      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009eda:	2340      	movs	r3, #64	@ 0x40
 8009edc:	e010      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009ede:	2320      	movs	r3, #32
 8009ee0:	e00e      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009ee2:	2310      	movs	r3, #16
 8009ee4:	e00c      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	e00a      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009eea:	230a      	movs	r3, #10
 8009eec:	e008      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009eee:	2308      	movs	r3, #8
 8009ef0:	e006      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009ef2:	2306      	movs	r3, #6
 8009ef4:	e004      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009ef6:	2304      	movs	r3, #4
 8009ef8:	e002      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009efa:	2302      	movs	r3, #2
 8009efc:	e000      	b.n	8009f00 <USART_SetConfig+0xac0>
 8009efe:	2301      	movs	r3, #1
 8009f00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f08:	005a      	lsls	r2, r3, #1
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	085b      	lsrs	r3, r3, #1
 8009f10:	441a      	add	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009f1c:	e003      	b.n	8009f26 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 8009f24:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	2b0f      	cmp	r3, #15
 8009f2a:	d916      	bls.n	8009f5a <USART_SetConfig+0xb1a>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f32:	d212      	bcs.n	8009f5a <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	f023 030f 	bic.w	r3, r3, #15
 8009f3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	085b      	lsrs	r3, r3, #1
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f003 0307 	and.w	r3, r3, #7
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009f56:	60da      	str	r2, [r3, #12]
 8009f58:	e002      	b.n	8009f60 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8009f78:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3738      	adds	r7, #56	@ 0x38
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f92:	f7f7 fbf9 	bl	8001788 <HAL_GetTick>
 8009f96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0308 	and.w	r3, r3, #8
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d10e      	bne.n	8009fc4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff fa0d 	bl	80093d4 <USART_WaitOnFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e01e      	b.n	800a002 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0304 	and.w	r3, r3, #4
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d10e      	bne.n	8009ff0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff f9f7 	bl	80093d4 <USART_WaitOnFlagUntilTimeout>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e008      	b.n	800a002 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <HAL_USARTEx_EnableSlaveMode+0x16>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e043      	b.n	800a0a8 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0201 	bic.w	r2, r2, #1
 800a046:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a066:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f042 0201 	orr.w	r2, r2, #1
 800a076:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f042 0201 	orr.w	r2, r2, #1
 800a09c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d101      	bne.n	800a0cc <HAL_USARTEx_ConfigNSS+0x18>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	e02a      	b.n	800a122 <HAL_USARTEx_ConfigNSS+0x6e>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f023 0108 	bic.w	r1, r3, #8
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d101      	bne.n	800a144 <HAL_USARTEx_DisableFifoMode+0x16>
 800a140:	2302      	movs	r3, #2
 800a142:	e027      	b.n	800a194 <HAL_USARTEx_DisableFifoMode+0x66>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f022 0201 	bic.w	r2, r2, #1
 800a16a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a172:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e02d      	b.n	800a214 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0201 	bic.w	r2, r2, #1
 800a1de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f84f 	bl	800a298 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d101      	bne.n	800a234 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800a230:	2302      	movs	r3, #2
 800a232:	e02d      	b.n	800a290 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2202      	movs	r2, #2
 800a240:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 0201 	bic.w	r2, r2, #1
 800a25a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f811 	bl	800a298 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2b4:	e02f      	b.n	800a316 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2b6:	2310      	movs	r3, #16
 800a2b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2ba:	2310      	movs	r3, #16
 800a2bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800a2c4:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	f003 0307 	and.w	r3, r3, #7
 800a2cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800a2d4:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	f003 0307 	and.w	r3, r3, #7
 800a2dc:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	7b3a      	ldrb	r2, [r7, #12]
 800a2e2:	4910      	ldr	r1, [pc, #64]	@ (800a324 <USARTEx_SetNbDataToProcess+0x8c>)
 800a2e4:	5c8a      	ldrb	r2, [r1, r2]
 800a2e6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800a2ea:	7b3a      	ldrb	r2, [r7, #12]
 800a2ec:	490e      	ldr	r1, [pc, #56]	@ (800a328 <USARTEx_SetNbDataToProcess+0x90>)
 800a2ee:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	7b7a      	ldrb	r2, [r7, #13]
 800a2fe:	4909      	ldr	r1, [pc, #36]	@ (800a324 <USARTEx_SetNbDataToProcess+0x8c>)
 800a300:	5c8a      	ldrb	r2, [r1, r2]
 800a302:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800a306:	7b7a      	ldrb	r2, [r7, #13]
 800a308:	4907      	ldr	r1, [pc, #28]	@ (800a328 <USARTEx_SetNbDataToProcess+0x90>)
 800a30a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a30c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a310:	b29a      	uxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	0801022c 	.word	0x0801022c
 800a328:	08010234 	.word	0x08010234

0800a32c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a32c:	b084      	sub	sp, #16
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	f107 001c 	add.w	r0, r7, #28
 800a33a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a342:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a344:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a346:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a34a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a34e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a352:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <SDMMC_Init+0x50>)
 800a360:	4013      	ands	r3, r2
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	431a      	orrs	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	b004      	add	sp, #16
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	ffc02c00 	.word	0xffc02c00

0800a380 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f043 0203 	orr.w	r2, r3, #3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0303 	and.w	r3, r3, #3
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a3f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a3fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a402:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	4b06      	ldr	r3, [pc, #24]	@ (800a428 <SDMMC_SendCommand+0x50>)
 800a410:	4013      	ands	r3, r2
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	fffee0c0 	.word	0xfffee0c0

0800a42c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	b2db      	uxtb	r3, r3
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3314      	adds	r3, #20
 800a454:	461a      	mov	r2, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	4413      	add	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a492:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a498:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a49e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0

}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a4d2:	2310      	movs	r3, #16
 800a4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4e6:	f107 0308 	add.w	r3, r7, #8
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ff73 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a4f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4f6:	2110      	movs	r1, #16
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f935 	bl	800a768 <SDMMC_GetCmdResp1>
 800a4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a500:	69fb      	ldr	r3, [r7, #28]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3720      	adds	r7, #32
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b088      	sub	sp, #32
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a518:	2307      	movs	r3, #7
 800a51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a51c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a522:	2300      	movs	r3, #0
 800a524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a52a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a52c:	f107 0308 	add.w	r3, r7, #8
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff ff50 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a53c:	2107      	movs	r1, #7
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f912 	bl	800a768 <SDMMC_GetCmdResp1>
 800a544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a546:	69fb      	ldr	r3, [r7, #28]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3720      	adds	r7, #32
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a560:	2300      	movs	r3, #0
 800a562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a564:	2300      	movs	r3, #0
 800a566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a56c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff ff2f 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa70 	bl	800aa60 <SDMMC_GetCmdError>
 800a580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a582:	69fb      	ldr	r3, [r7, #28]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3720      	adds	r7, #32
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a598:	2302      	movs	r3, #2
 800a59a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a59c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5ac:	f107 0308 	add.w	r3, r7, #8
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff ff10 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f9c7 	bl	800a94c <SDMMC_GetCmdResp2>
 800a5be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c0:	69fb      	ldr	r3, [r7, #28]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3720      	adds	r7, #32
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b088      	sub	sp, #32
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a5d8:	2309      	movs	r3, #9
 800a5da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a5dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5ec:	f107 0308 	add.w	r3, r7, #8
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff fef0 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f9a7 	bl	800a94c <SDMMC_GetCmdResp2>
 800a5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a600:	69fb      	ldr	r3, [r7, #28]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b088      	sub	sp, #32
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800a616:	887b      	ldrh	r3, [r7, #2]
 800a618:	041b      	lsls	r3, r3, #16
 800a61a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a61c:	2303      	movs	r3, #3
 800a61e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a626:	2300      	movs	r3, #0
 800a628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a62a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a62e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a630:	f107 0308 	add.w	r3, r7, #8
 800a634:	4619      	mov	r1, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff fece 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800a63c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a640:	2103      	movs	r1, #3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f890 	bl	800a768 <SDMMC_GetCmdResp1>
 800a648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a64a:	69fb      	ldr	r3, [r7, #28]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a662:	230d      	movs	r3, #13
 800a664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a66a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a674:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a676:	f107 0308 	add.w	r3, r7, #8
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff feab 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a682:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a686:	210d      	movs	r1, #13
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f86d 	bl	800a768 <SDMMC_GetCmdResp1>
 800a68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a690:	69fb      	ldr	r3, [r7, #28]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6bc:	f107 0308 	add.w	r3, r7, #8
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff fe88 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f989 	bl	800a9e0 <SDMMC_GetCmdResp3>
 800a6ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3720      	adds	r7, #32
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b088      	sub	sp, #32
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800a6e8:	2306      	movs	r3, #6
 800a6ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fe68 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800a708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a70c:	2106      	movs	r1, #6
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f82a 	bl	800a768 <SDMMC_GetCmdResp1>
 800a714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a716:	69fb      	ldr	r3, [r7, #28]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a72e:	2308      	movs	r3, #8
 800a730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a732:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a73c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a742:	f107 0308 	add.w	r3, r7, #8
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff fe45 	bl	800a3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800a74e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a752:	2108      	movs	r1, #8
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f807 	bl	800a768 <SDMMC_GetCmdResp1>
 800a75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a75c:	69fb      	ldr	r3, [r7, #28]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3720      	adds	r7, #32
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	460b      	mov	r3, r1
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a776:	4b70      	ldr	r3, [pc, #448]	@ (800a938 <SDMMC_GetCmdResp1+0x1d0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a70      	ldr	r2, [pc, #448]	@ (800a93c <SDMMC_GetCmdResp1+0x1d4>)
 800a77c:	fba2 2303 	umull	r2, r3, r2, r3
 800a780:	0a5a      	lsrs	r2, r3, #9
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	fb02 f303 	mul.w	r3, r2, r3
 800a788:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	1e5a      	subs	r2, r3, #1
 800a78e:	61fa      	str	r2, [r7, #28]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d102      	bne.n	800a79a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a794:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a798:	e0c9      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a79e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	4b67      	ldr	r3, [pc, #412]	@ (800a940 <SDMMC_GetCmdResp1+0x1d8>)
 800a7a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0ef      	beq.n	800a78a <SDMMC_GetCmdResp1+0x22>
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1ea      	bne.n	800a78a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7c6:	2304      	movs	r3, #4
 800a7c8:	e0b1      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e0a6      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4a58      	ldr	r2, [pc, #352]	@ (800a944 <SDMMC_GetCmdResp1+0x1dc>)
 800a7e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff fe20 	bl	800a42c <SDMMC_GetCommandResponse>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d001      	beq.n	800a7fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e099      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7ff fe22 	bl	800a446 <SDMMC_GetResponse>
 800a802:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	4b50      	ldr	r3, [pc, #320]	@ (800a948 <SDMMC_GetCmdResp1+0x1e0>)
 800a808:	4013      	ands	r3, r2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a80e:	2300      	movs	r3, #0
 800a810:	e08d      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	da02      	bge.n	800a81e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a818:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a81c:	e087      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a828:	2340      	movs	r3, #64	@ 0x40
 800a82a:	e080      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a836:	2380      	movs	r3, #128	@ 0x80
 800a838:	e079      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a848:	e071      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a858:	e069      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a868:	e061      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a874:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a878:	e059      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a888:	e051      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a898:	e049      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a8a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a8a8:	e041      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a8b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8b8:	e039      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a8c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a8c8:	e031      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a8d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a8d8:	e029      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a8e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8e8:	e021      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a8f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a8f8:	e019      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a904:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a908:	e011      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a914:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a918:	e009      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f003 0308 	and.w	r3, r3, #8
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a924:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a928:	e001      	b.n	800a92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a92a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	24000000 	.word	0x24000000
 800a93c:	10624dd3 	.word	0x10624dd3
 800a940:	00200045 	.word	0x00200045
 800a944:	002000c5 	.word	0x002000c5
 800a948:	fdffe008 	.word	0xfdffe008

0800a94c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a954:	4b1f      	ldr	r3, [pc, #124]	@ (800a9d4 <SDMMC_GetCmdResp2+0x88>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1f      	ldr	r2, [pc, #124]	@ (800a9d8 <SDMMC_GetCmdResp2+0x8c>)
 800a95a:	fba2 2303 	umull	r2, r3, r2, r3
 800a95e:	0a5b      	lsrs	r3, r3, #9
 800a960:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a964:	fb02 f303 	mul.w	r3, r2, r3
 800a968:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	1e5a      	subs	r2, r3, #1
 800a96e:	60fa      	str	r2, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a974:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a978:	e026      	b.n	800a9c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a97e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a986:	2b00      	cmp	r3, #0
 800a988:	d0ef      	beq.n	800a96a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1ea      	bne.n	800a96a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a998:	f003 0304 	and.w	r3, r3, #4
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d004      	beq.n	800a9aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9a6:	2304      	movs	r3, #4
 800a9a8:	e00e      	b.n	800a9c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e003      	b.n	800a9c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a06      	ldr	r2, [pc, #24]	@ (800a9dc <SDMMC_GetCmdResp2+0x90>)
 800a9c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	24000000 	.word	0x24000000
 800a9d8:	10624dd3 	.word	0x10624dd3
 800a9dc:	002000c5 	.word	0x002000c5

0800a9e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a9e8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa54 <SDMMC_GetCmdResp3+0x74>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a1a      	ldr	r2, [pc, #104]	@ (800aa58 <SDMMC_GetCmdResp3+0x78>)
 800a9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f2:	0a5b      	lsrs	r3, r3, #9
 800a9f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9f8:	fb02 f303 	mul.w	r3, r2, r3
 800a9fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1e5a      	subs	r2, r3, #1
 800aa02:	60fa      	str	r2, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d102      	bne.n	800aa0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa0c:	e01b      	b.n	800aa46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0ef      	beq.n	800a9fe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1ea      	bne.n	800a9fe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2204      	movs	r2, #4
 800aa38:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa3a:	2304      	movs	r3, #4
 800aa3c:	e003      	b.n	800aa46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a06      	ldr	r2, [pc, #24]	@ (800aa5c <SDMMC_GetCmdResp3+0x7c>)
 800aa42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	24000000 	.word	0x24000000
 800aa58:	10624dd3 	.word	0x10624dd3
 800aa5c:	002000c5 	.word	0x002000c5

0800aa60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aa68:	4b11      	ldr	r3, [pc, #68]	@ (800aab0 <SDMMC_GetCmdError+0x50>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a11      	ldr	r2, [pc, #68]	@ (800aab4 <SDMMC_GetCmdError+0x54>)
 800aa6e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa72:	0a5b      	lsrs	r3, r3, #9
 800aa74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa78:	fb02 f303 	mul.w	r3, r2, r3
 800aa7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	1e5a      	subs	r2, r3, #1
 800aa82:	60fa      	str	r2, [r7, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa8c:	e009      	b.n	800aaa2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0f1      	beq.n	800aa7e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a06      	ldr	r2, [pc, #24]	@ (800aab8 <SDMMC_GetCmdError+0x58>)
 800aa9e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	24000000 	.word	0x24000000
 800aab4:	10624dd3 	.word	0x10624dd3
 800aab8:	002000c5 	.word	0x002000c5

0800aabc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aabc:	b084      	sub	sp, #16
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	f107 001c 	add.w	r0, r7, #28
 800aaca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aace:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d121      	bne.n	800ab1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aada:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	4b2c      	ldr	r3, [pc, #176]	@ (800ab98 <USB_CoreInit+0xdc>)
 800aae8:	4013      	ands	r3, r2
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aafa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d105      	bne.n	800ab0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f001 faf6 	bl	800c100 <USB_CoreReset>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
 800ab18:	e01b      	b.n	800ab52 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 faea 	bl	800c100 <USB_CoreReset>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d106      	bne.n	800ab46 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab44:	e005      	b.n	800ab52 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab52:	7fbb      	ldrb	r3, [r7, #30]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d116      	bne.n	800ab86 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab66:	4b0d      	ldr	r3, [pc, #52]	@ (800ab9c <USB_CoreInit+0xe0>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f043 0206 	orr.w	r2, r3, #6
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f043 0220 	orr.w	r2, r3, #32
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab92:	b004      	add	sp, #16
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	ffbdffbf 	.word	0xffbdffbf
 800ab9c:	03ee0000 	.word	0x03ee0000

0800aba0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d165      	bne.n	800ac80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	4a41      	ldr	r2, [pc, #260]	@ (800acbc <USB_SetTurnaroundTime+0x11c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d906      	bls.n	800abca <USB_SetTurnaroundTime+0x2a>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	4a40      	ldr	r2, [pc, #256]	@ (800acc0 <USB_SetTurnaroundTime+0x120>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d202      	bcs.n	800abca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800abc4:	230f      	movs	r3, #15
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	e062      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	4a3c      	ldr	r2, [pc, #240]	@ (800acc0 <USB_SetTurnaroundTime+0x120>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d306      	bcc.n	800abe0 <USB_SetTurnaroundTime+0x40>
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	4a3b      	ldr	r2, [pc, #236]	@ (800acc4 <USB_SetTurnaroundTime+0x124>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d202      	bcs.n	800abe0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800abda:	230e      	movs	r3, #14
 800abdc:	617b      	str	r3, [r7, #20]
 800abde:	e057      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4a38      	ldr	r2, [pc, #224]	@ (800acc4 <USB_SetTurnaroundTime+0x124>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d306      	bcc.n	800abf6 <USB_SetTurnaroundTime+0x56>
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4a37      	ldr	r2, [pc, #220]	@ (800acc8 <USB_SetTurnaroundTime+0x128>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d202      	bcs.n	800abf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800abf0:	230d      	movs	r3, #13
 800abf2:	617b      	str	r3, [r7, #20]
 800abf4:	e04c      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	4a33      	ldr	r2, [pc, #204]	@ (800acc8 <USB_SetTurnaroundTime+0x128>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d306      	bcc.n	800ac0c <USB_SetTurnaroundTime+0x6c>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	4a32      	ldr	r2, [pc, #200]	@ (800accc <USB_SetTurnaroundTime+0x12c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d802      	bhi.n	800ac0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ac06:	230c      	movs	r3, #12
 800ac08:	617b      	str	r3, [r7, #20]
 800ac0a:	e041      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4a2f      	ldr	r2, [pc, #188]	@ (800accc <USB_SetTurnaroundTime+0x12c>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d906      	bls.n	800ac22 <USB_SetTurnaroundTime+0x82>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4a2e      	ldr	r2, [pc, #184]	@ (800acd0 <USB_SetTurnaroundTime+0x130>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d802      	bhi.n	800ac22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ac1c:	230b      	movs	r3, #11
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	e036      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	4a2a      	ldr	r2, [pc, #168]	@ (800acd0 <USB_SetTurnaroundTime+0x130>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d906      	bls.n	800ac38 <USB_SetTurnaroundTime+0x98>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	4a29      	ldr	r2, [pc, #164]	@ (800acd4 <USB_SetTurnaroundTime+0x134>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d802      	bhi.n	800ac38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ac32:	230a      	movs	r3, #10
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	e02b      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	4a26      	ldr	r2, [pc, #152]	@ (800acd4 <USB_SetTurnaroundTime+0x134>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d906      	bls.n	800ac4e <USB_SetTurnaroundTime+0xae>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4a25      	ldr	r2, [pc, #148]	@ (800acd8 <USB_SetTurnaroundTime+0x138>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d202      	bcs.n	800ac4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ac48:	2309      	movs	r3, #9
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	e020      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	4a21      	ldr	r2, [pc, #132]	@ (800acd8 <USB_SetTurnaroundTime+0x138>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d306      	bcc.n	800ac64 <USB_SetTurnaroundTime+0xc4>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	4a20      	ldr	r2, [pc, #128]	@ (800acdc <USB_SetTurnaroundTime+0x13c>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d802      	bhi.n	800ac64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ac5e:	2308      	movs	r3, #8
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	e015      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	4a1d      	ldr	r2, [pc, #116]	@ (800acdc <USB_SetTurnaroundTime+0x13c>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d906      	bls.n	800ac7a <USB_SetTurnaroundTime+0xda>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4a1c      	ldr	r2, [pc, #112]	@ (800ace0 <USB_SetTurnaroundTime+0x140>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d202      	bcs.n	800ac7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ac74:	2307      	movs	r3, #7
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	e00a      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ac7a:	2306      	movs	r3, #6
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	e007      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ac86:	2309      	movs	r3, #9
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	e001      	b.n	800ac90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ac8c:	2309      	movs	r3, #9
 800ac8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	029b      	lsls	r3, r3, #10
 800aca4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aca8:	431a      	orrs	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	371c      	adds	r7, #28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	00d8acbf 	.word	0x00d8acbf
 800acc0:	00e4e1c0 	.word	0x00e4e1c0
 800acc4:	00f42400 	.word	0x00f42400
 800acc8:	01067380 	.word	0x01067380
 800accc:	011a499f 	.word	0x011a499f
 800acd0:	01312cff 	.word	0x01312cff
 800acd4:	014ca43f 	.word	0x014ca43f
 800acd8:	016e3600 	.word	0x016e3600
 800acdc:	01a6ab1f 	.word	0x01a6ab1f
 800ace0:	01e84800 	.word	0x01e84800

0800ace4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f043 0201 	orr.w	r2, r3, #1
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	f023 0201 	bic.w	r2, r3, #1
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d115      	bne.n	800ad76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ad56:	200a      	movs	r0, #10
 800ad58:	f7f6 fd22 	bl	80017a0 <HAL_Delay>
      ms += 10U;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	330a      	adds	r3, #10
 800ad60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f001 f93b 	bl	800bfde <USB_GetMode>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d01e      	beq.n	800adac <USB_SetCurrentMode+0x84>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2bc7      	cmp	r3, #199	@ 0xc7
 800ad72:	d9f0      	bls.n	800ad56 <USB_SetCurrentMode+0x2e>
 800ad74:	e01a      	b.n	800adac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad76:	78fb      	ldrb	r3, [r7, #3]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d115      	bne.n	800ada8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ad88:	200a      	movs	r0, #10
 800ad8a:	f7f6 fd09 	bl	80017a0 <HAL_Delay>
      ms += 10U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	330a      	adds	r3, #10
 800ad92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f001 f922 	bl	800bfde <USB_GetMode>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <USB_SetCurrentMode+0x84>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2bc7      	cmp	r3, #199	@ 0xc7
 800ada4:	d9f0      	bls.n	800ad88 <USB_SetCurrentMode+0x60>
 800ada6:	e001      	b.n	800adac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e005      	b.n	800adb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2bc8      	cmp	r3, #200	@ 0xc8
 800adb0:	d101      	bne.n	800adb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adc0:	b084      	sub	sp, #16
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b086      	sub	sp, #24
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800adce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800adda:	2300      	movs	r3, #0
 800addc:	613b      	str	r3, [r7, #16]
 800adde:	e009      	b.n	800adf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	3340      	adds	r3, #64	@ 0x40
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	2200      	movs	r2, #0
 800adec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	3301      	adds	r3, #1
 800adf2:	613b      	str	r3, [r7, #16]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2b0e      	cmp	r3, #14
 800adf8:	d9f2      	bls.n	800ade0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800adfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d11c      	bne.n	800ae3c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae10:	f043 0302 	orr.w	r3, r3, #2
 800ae14:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae1a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	e005      	b.n	800ae48 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae40:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae4e:	461a      	mov	r2, r3
 800ae50:	2300      	movs	r3, #0
 800ae52:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae54:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d10d      	bne.n	800ae78 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d104      	bne.n	800ae6e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae64:	2100      	movs	r1, #0
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f968 	bl	800b13c <USB_SetDevSpeed>
 800ae6c:	e008      	b.n	800ae80 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae6e:	2101      	movs	r1, #1
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f963 	bl	800b13c <USB_SetDevSpeed>
 800ae76:	e003      	b.n	800ae80 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae78:	2103      	movs	r1, #3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f95e 	bl	800b13c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae80:	2110      	movs	r1, #16
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f8fa 	bl	800b07c <USB_FlushTxFifo>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f924 	bl	800b0e0 <USB_FlushRxFifo>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aea8:	461a      	mov	r2, r3
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aec0:	461a      	mov	r2, r3
 800aec2:	2300      	movs	r3, #0
 800aec4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aec6:	2300      	movs	r3, #0
 800aec8:	613b      	str	r3, [r7, #16]
 800aeca:	e043      	b.n	800af54 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aee2:	d118      	bne.n	800af16 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10a      	bne.n	800af00 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef6:	461a      	mov	r2, r3
 800aef8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	e013      	b.n	800af28 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af0c:	461a      	mov	r2, r3
 800af0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	e008      	b.n	800af28 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af22:	461a      	mov	r2, r3
 800af24:	2300      	movs	r3, #0
 800af26:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af34:	461a      	mov	r2, r3
 800af36:	2300      	movs	r3, #0
 800af38:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	015a      	lsls	r2, r3, #5
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	4413      	add	r3, r2
 800af42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af46:	461a      	mov	r2, r3
 800af48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800af4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	3301      	adds	r3, #1
 800af52:	613b      	str	r3, [r7, #16]
 800af54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800af58:	461a      	mov	r2, r3
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d3b5      	bcc.n	800aecc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af60:	2300      	movs	r3, #0
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	e043      	b.n	800afee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af7c:	d118      	bne.n	800afb0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10a      	bne.n	800af9a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af90:	461a      	mov	r2, r3
 800af92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	e013      	b.n	800afc2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afa6:	461a      	mov	r2, r3
 800afa8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	e008      	b.n	800afc2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afbc:	461a      	mov	r2, r3
 800afbe:	2300      	movs	r3, #0
 800afc0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afce:	461a      	mov	r2, r3
 800afd0:	2300      	movs	r3, #0
 800afd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe0:	461a      	mov	r2, r3
 800afe2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800afe6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	3301      	adds	r3, #1
 800afec:	613b      	str	r3, [r7, #16]
 800afee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aff2:	461a      	mov	r2, r3
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d3b5      	bcc.n	800af66 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b00c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b01a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b01c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b020:	2b00      	cmp	r3, #0
 800b022:	d105      	bne.n	800b030 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	f043 0210 	orr.w	r2, r3, #16
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	699a      	ldr	r2, [r3, #24]
 800b034:	4b0f      	ldr	r3, [pc, #60]	@ (800b074 <USB_DevInit+0x2b4>)
 800b036:	4313      	orrs	r3, r2
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b03c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	f043 0208 	orr.w	r2, r3, #8
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b050:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b054:	2b01      	cmp	r3, #1
 800b056:	d105      	bne.n	800b064 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	699a      	ldr	r2, [r3, #24]
 800b05c:	4b06      	ldr	r3, [pc, #24]	@ (800b078 <USB_DevInit+0x2b8>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b064:	7dfb      	ldrb	r3, [r7, #23]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b070:	b004      	add	sp, #16
 800b072:	4770      	bx	lr
 800b074:	803c3800 	.word	0x803c3800
 800b078:	40000004 	.word	0x40000004

0800b07c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3301      	adds	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b096:	d901      	bls.n	800b09c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e01b      	b.n	800b0d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	daf2      	bge.n	800b08a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	019b      	lsls	r3, r3, #6
 800b0ac:	f043 0220 	orr.w	r2, r3, #32
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0c0:	d901      	bls.n	800b0c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e006      	b.n	800b0d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	d0f0      	beq.n	800b0b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0f8:	d901      	bls.n	800b0fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e018      	b.n	800b130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	daf2      	bge.n	800b0ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2210      	movs	r2, #16
 800b10e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	3301      	adds	r3, #1
 800b114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b11c:	d901      	bls.n	800b122 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	e006      	b.n	800b130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	f003 0310 	and.w	r3, r3, #16
 800b12a:	2b10      	cmp	r3, #16
 800b12c:	d0f0      	beq.n	800b110 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	68f9      	ldr	r1, [r7, #12]
 800b158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b15c:	4313      	orrs	r3, r2
 800b15e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b16e:	b480      	push	{r7}
 800b170:	b087      	sub	sp, #28
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f003 0306 	and.w	r3, r3, #6
 800b186:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d102      	bne.n	800b194 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b18e:	2300      	movs	r3, #0
 800b190:	75fb      	strb	r3, [r7, #23]
 800b192:	e00a      	b.n	800b1aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d002      	beq.n	800b1a0 <USB_GetDevSpeed+0x32>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b06      	cmp	r3, #6
 800b19e:	d102      	bne.n	800b1a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	75fb      	strb	r3, [r7, #23]
 800b1a4:	e001      	b.n	800b1aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b1a6:	230f      	movs	r3, #15
 800b1a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	785b      	ldrb	r3, [r3, #1]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d139      	bne.n	800b248 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1da:	69da      	ldr	r2, [r3, #28]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 030f 	and.w	r3, r3, #15
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	68f9      	ldr	r1, [r7, #12]
 800b1ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d153      	bne.n	800b2b4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	791b      	ldrb	r3, [r3, #4]
 800b226:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b228:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	059b      	lsls	r3, r3, #22
 800b22e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b230:	431a      	orrs	r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	0159      	lsls	r1, r3, #5
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	440b      	add	r3, r1
 800b23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b23e:	4619      	mov	r1, r3
 800b240:	4b20      	ldr	r3, [pc, #128]	@ (800b2c4 <USB_ActivateEndpoint+0x10c>)
 800b242:	4313      	orrs	r3, r2
 800b244:	600b      	str	r3, [r1, #0]
 800b246:	e035      	b.n	800b2b4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b24e:	69da      	ldr	r2, [r3, #28]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	f003 030f 	and.w	r3, r3, #15
 800b258:	2101      	movs	r1, #1
 800b25a:	fa01 f303 	lsl.w	r3, r1, r3
 800b25e:	041b      	lsls	r3, r3, #16
 800b260:	68f9      	ldr	r1, [r7, #12]
 800b262:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b266:	4313      	orrs	r3, r2
 800b268:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	015a      	lsls	r2, r3, #5
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	4413      	add	r3, r2
 800b272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d119      	bne.n	800b2b4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	791b      	ldrb	r3, [r3, #4]
 800b29a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b29c:	430b      	orrs	r3, r1
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	0159      	lsls	r1, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	440b      	add	r3, r1
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4b05      	ldr	r3, [pc, #20]	@ (800b2c4 <USB_ActivateEndpoint+0x10c>)
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	10008000 	.word	0x10008000

0800b2c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d161      	bne.n	800b3a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	015a      	lsls	r2, r3, #5
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2fa:	d11f      	bne.n	800b33c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	0151      	lsls	r1, r2, #5
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	440a      	add	r2, r1
 800b312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b316:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b31a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	0151      	lsls	r1, r2, #5
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	440a      	add	r2, r1
 800b332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b336:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b33a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	f003 030f 	and.w	r3, r3, #15
 800b34c:	2101      	movs	r1, #1
 800b34e:	fa01 f303 	lsl.w	r3, r1, r3
 800b352:	b29b      	uxth	r3, r3
 800b354:	43db      	mvns	r3, r3
 800b356:	68f9      	ldr	r1, [r7, #12]
 800b358:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b35c:	4013      	ands	r3, r2
 800b35e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b366:	69da      	ldr	r2, [r3, #28]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f003 030f 	and.w	r3, r3, #15
 800b370:	2101      	movs	r1, #1
 800b372:	fa01 f303 	lsl.w	r3, r1, r3
 800b376:	b29b      	uxth	r3, r3
 800b378:	43db      	mvns	r3, r3
 800b37a:	68f9      	ldr	r1, [r7, #12]
 800b37c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b380:	4013      	ands	r3, r2
 800b382:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	0159      	lsls	r1, r3, #5
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	440b      	add	r3, r1
 800b39a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4b35      	ldr	r3, [pc, #212]	@ (800b478 <USB_DeactivateEndpoint+0x1b0>)
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	600b      	str	r3, [r1, #0]
 800b3a6:	e060      	b.n	800b46a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3be:	d11f      	bne.n	800b400 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	0151      	lsls	r1, r2, #5
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	0151      	lsls	r1, r2, #5
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	440a      	add	r2, r1
 800b3f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b3fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	f003 030f 	and.w	r3, r3, #15
 800b410:	2101      	movs	r1, #1
 800b412:	fa01 f303 	lsl.w	r3, r1, r3
 800b416:	041b      	lsls	r3, r3, #16
 800b418:	43db      	mvns	r3, r3
 800b41a:	68f9      	ldr	r1, [r7, #12]
 800b41c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b420:	4013      	ands	r3, r2
 800b422:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b42a:	69da      	ldr	r2, [r3, #28]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	f003 030f 	and.w	r3, r3, #15
 800b434:	2101      	movs	r1, #1
 800b436:	fa01 f303 	lsl.w	r3, r1, r3
 800b43a:	041b      	lsls	r3, r3, #16
 800b43c:	43db      	mvns	r3, r3
 800b43e:	68f9      	ldr	r1, [r7, #12]
 800b440:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b444:	4013      	ands	r3, r2
 800b446:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	0159      	lsls	r1, r3, #5
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	440b      	add	r3, r1
 800b45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b462:	4619      	mov	r1, r3
 800b464:	4b05      	ldr	r3, [pc, #20]	@ (800b47c <USB_DeactivateEndpoint+0x1b4>)
 800b466:	4013      	ands	r3, r2
 800b468:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	ec337800 	.word	0xec337800
 800b47c:	eff37800 	.word	0xeff37800

0800b480 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b08a      	sub	sp, #40	@ 0x28
 800b484:	af02      	add	r7, sp, #8
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	4613      	mov	r3, r2
 800b48c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	785b      	ldrb	r3, [r3, #1]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	f040 8181 	bne.w	800b7a4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d132      	bne.n	800b510 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4b6:	691a      	ldr	r2, [r3, #16]
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	0159      	lsls	r1, r3, #5
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	440b      	add	r3, r1
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4ba5      	ldr	r3, [pc, #660]	@ (800b75c <USB_EPStartXfer+0x2dc>)
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	0151      	lsls	r1, r2, #5
 800b4de:	69fa      	ldr	r2, [r7, #28]
 800b4e0:	440a      	add	r2, r1
 800b4e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4f8:	691a      	ldr	r2, [r3, #16]
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	0159      	lsls	r1, r3, #5
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	440b      	add	r3, r1
 800b502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b506:	4619      	mov	r1, r3
 800b508:	4b95      	ldr	r3, [pc, #596]	@ (800b760 <USB_EPStartXfer+0x2e0>)
 800b50a:	4013      	ands	r3, r2
 800b50c:	610b      	str	r3, [r1, #16]
 800b50e:	e092      	b.n	800b636 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b51c:	691a      	ldr	r2, [r3, #16]
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	0159      	lsls	r1, r3, #5
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	440b      	add	r3, r1
 800b526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b52a:	4619      	mov	r1, r3
 800b52c:	4b8c      	ldr	r3, [pc, #560]	@ (800b760 <USB_EPStartXfer+0x2e0>)
 800b52e:	4013      	ands	r3, r2
 800b530:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	0159      	lsls	r1, r3, #5
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	440b      	add	r3, r1
 800b548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b54c:	4619      	mov	r1, r3
 800b54e:	4b83      	ldr	r3, [pc, #524]	@ (800b75c <USB_EPStartXfer+0x2dc>)
 800b550:	4013      	ands	r3, r2
 800b552:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d11a      	bne.n	800b590 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	691a      	ldr	r2, [r3, #16]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	429a      	cmp	r2, r3
 800b564:	d903      	bls.n	800b56e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	4413      	add	r3, r2
 800b576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	69ba      	ldr	r2, [r7, #24]
 800b57e:	0151      	lsls	r1, r2, #5
 800b580:	69fa      	ldr	r2, [r7, #28]
 800b582:	440a      	add	r2, r1
 800b584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b588:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b58c:	6113      	str	r3, [r2, #16]
 800b58e:	e01b      	b.n	800b5c8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	015a      	lsls	r2, r3, #5
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	4413      	add	r3, r2
 800b598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b59c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6919      	ldr	r1, [r3, #16]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	440b      	add	r3, r1
 800b5a8:	1e59      	subs	r1, r3, #1
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5b2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b5b4:	4b6b      	ldr	r3, [pc, #428]	@ (800b764 <USB_EPStartXfer+0x2e4>)
 800b5b6:	400b      	ands	r3, r1
 800b5b8:	69b9      	ldr	r1, [r7, #24]
 800b5ba:	0148      	lsls	r0, r1, #5
 800b5bc:	69f9      	ldr	r1, [r7, #28]
 800b5be:	4401      	add	r1, r0
 800b5c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5d4:	691a      	ldr	r2, [r3, #16]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5de:	69b9      	ldr	r1, [r7, #24]
 800b5e0:	0148      	lsls	r0, r1, #5
 800b5e2:	69f9      	ldr	r1, [r7, #28]
 800b5e4:	4401      	add	r1, r0
 800b5e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	791b      	ldrb	r3, [r3, #4]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d11f      	bne.n	800b636 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	0151      	lsls	r1, r2, #5
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	440a      	add	r2, r1
 800b60c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b610:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b614:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	69ba      	ldr	r2, [r7, #24]
 800b626:	0151      	lsls	r1, r2, #5
 800b628:	69fa      	ldr	r2, [r7, #28]
 800b62a:	440a      	add	r2, r1
 800b62c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b630:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b634:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d14b      	bne.n	800b6d4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d009      	beq.n	800b658 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b650:	461a      	mov	r2, r3
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	791b      	ldrb	r3, [r3, #4]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d128      	bne.n	800b6b2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d110      	bne.n	800b692 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	0151      	lsls	r1, r2, #5
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	440a      	add	r2, r1
 800b686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b68a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	e00f      	b.n	800b6b2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	0151      	lsls	r1, r2, #5
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	440a      	add	r2, r1
 800b6a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	015a      	lsls	r2, r3, #5
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	69ba      	ldr	r2, [r7, #24]
 800b6c2:	0151      	lsls	r1, r2, #5
 800b6c4:	69fa      	ldr	r2, [r7, #28]
 800b6c6:	440a      	add	r2, r1
 800b6c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b6d0:	6013      	str	r3, [r2, #0]
 800b6d2:	e16a      	b.n	800b9aa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	015a      	lsls	r2, r3, #5
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	4413      	add	r3, r2
 800b6dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	0151      	lsls	r1, r2, #5
 800b6e6:	69fa      	ldr	r2, [r7, #28]
 800b6e8:	440a      	add	r2, r1
 800b6ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b6f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	791b      	ldrb	r3, [r3, #4]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d015      	beq.n	800b728 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 8152 	beq.w	800b9aa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b70c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	f003 030f 	and.w	r3, r3, #15
 800b716:	2101      	movs	r1, #1
 800b718:	fa01 f303 	lsl.w	r3, r1, r3
 800b71c:	69f9      	ldr	r1, [r7, #28]
 800b71e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b722:	4313      	orrs	r3, r2
 800b724:	634b      	str	r3, [r1, #52]	@ 0x34
 800b726:	e140      	b.n	800b9aa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b734:	2b00      	cmp	r3, #0
 800b736:	d117      	bne.n	800b768 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	015a      	lsls	r2, r3, #5
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	4413      	add	r3, r2
 800b740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	0151      	lsls	r1, r2, #5
 800b74a:	69fa      	ldr	r2, [r7, #28]
 800b74c:	440a      	add	r2, r1
 800b74e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b752:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	e016      	b.n	800b788 <USB_EPStartXfer+0x308>
 800b75a:	bf00      	nop
 800b75c:	e007ffff 	.word	0xe007ffff
 800b760:	fff80000 	.word	0xfff80000
 800b764:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	0151      	lsls	r1, r2, #5
 800b77a:	69fa      	ldr	r2, [r7, #28]
 800b77c:	440a      	add	r2, r1
 800b77e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b786:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	68d9      	ldr	r1, [r3, #12]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	781a      	ldrb	r2, [r3, #0]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	b298      	uxth	r0, r3
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	4603      	mov	r3, r0
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f9b9 	bl	800bb14 <USB_WritePacket>
 800b7a2:	e102      	b.n	800b9aa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b0:	691a      	ldr	r2, [r3, #16]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	0159      	lsls	r1, r3, #5
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	440b      	add	r3, r1
 800b7ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7be:	4619      	mov	r1, r3
 800b7c0:	4b7c      	ldr	r3, [pc, #496]	@ (800b9b4 <USB_EPStartXfer+0x534>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	015a      	lsls	r2, r3, #5
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d2:	691a      	ldr	r2, [r3, #16]
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	0159      	lsls	r1, r3, #5
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	440b      	add	r3, r1
 800b7dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4b75      	ldr	r3, [pc, #468]	@ (800b9b8 <USB_EPStartXfer+0x538>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d12f      	bne.n	800b84e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	689a      	ldr	r2, [r3, #8]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	689a      	ldr	r2, [r3, #8]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b812:	691a      	ldr	r2, [r3, #16]
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6a1b      	ldr	r3, [r3, #32]
 800b818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b81c:	69b9      	ldr	r1, [r7, #24]
 800b81e:	0148      	lsls	r0, r1, #5
 800b820:	69f9      	ldr	r1, [r7, #28]
 800b822:	4401      	add	r1, r0
 800b824:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b828:	4313      	orrs	r3, r2
 800b82a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	015a      	lsls	r2, r3, #5
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	4413      	add	r3, r2
 800b834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	0151      	lsls	r1, r2, #5
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	440a      	add	r2, r1
 800b842:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b846:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b84a:	6113      	str	r3, [r2, #16]
 800b84c:	e05f      	b.n	800b90e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d123      	bne.n	800b89e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b862:	691a      	ldr	r2, [r3, #16]
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b86c:	69b9      	ldr	r1, [r7, #24]
 800b86e:	0148      	lsls	r0, r1, #5
 800b870:	69f9      	ldr	r1, [r7, #28]
 800b872:	4401      	add	r1, r0
 800b874:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b878:	4313      	orrs	r3, r2
 800b87a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	015a      	lsls	r2, r3, #5
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	4413      	add	r3, r2
 800b884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	69ba      	ldr	r2, [r7, #24]
 800b88c:	0151      	lsls	r1, r2, #5
 800b88e:	69fa      	ldr	r2, [r7, #28]
 800b890:	440a      	add	r2, r1
 800b892:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b896:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b89a:	6113      	str	r3, [r2, #16]
 800b89c:	e037      	b.n	800b90e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691a      	ldr	r2, [r3, #16]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	1e5a      	subs	r2, r3, #1
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	8afa      	ldrh	r2, [r7, #22]
 800b8ba:	fb03 f202 	mul.w	r2, r3, r2
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ce:	691a      	ldr	r2, [r3, #16]
 800b8d0:	8afb      	ldrh	r3, [r7, #22]
 800b8d2:	04d9      	lsls	r1, r3, #19
 800b8d4:	4b39      	ldr	r3, [pc, #228]	@ (800b9bc <USB_EPStartXfer+0x53c>)
 800b8d6:	400b      	ands	r3, r1
 800b8d8:	69b9      	ldr	r1, [r7, #24]
 800b8da:	0148      	lsls	r0, r1, #5
 800b8dc:	69f9      	ldr	r1, [r7, #28]
 800b8de:	4401      	add	r1, r0
 800b8e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8f4:	691a      	ldr	r2, [r3, #16]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	6a1b      	ldr	r3, [r3, #32]
 800b8fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8fe:	69b9      	ldr	r1, [r7, #24]
 800b900:	0148      	lsls	r0, r1, #5
 800b902:	69f9      	ldr	r1, [r7, #28]
 800b904:	4401      	add	r1, r0
 800b906:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b90a:	4313      	orrs	r3, r2
 800b90c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d10d      	bne.n	800b930 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d009      	beq.n	800b930 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	68d9      	ldr	r1, [r3, #12]
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b92c:	460a      	mov	r2, r1
 800b92e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	791b      	ldrb	r3, [r3, #4]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d128      	bne.n	800b98a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b944:	2b00      	cmp	r3, #0
 800b946:	d110      	bne.n	800b96a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	0151      	lsls	r1, r2, #5
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	440a      	add	r2, r1
 800b95e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b962:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	e00f      	b.n	800b98a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	69ba      	ldr	r2, [r7, #24]
 800b97a:	0151      	lsls	r1, r2, #5
 800b97c:	69fa      	ldr	r2, [r7, #28]
 800b97e:	440a      	add	r2, r1
 800b980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b988:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	015a      	lsls	r2, r3, #5
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	4413      	add	r3, r2
 800b992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	69ba      	ldr	r2, [r7, #24]
 800b99a:	0151      	lsls	r1, r2, #5
 800b99c:	69fa      	ldr	r2, [r7, #28]
 800b99e:	440a      	add	r2, r1
 800b9a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b9a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	fff80000 	.word	0xfff80000
 800b9b8:	e007ffff 	.word	0xe007ffff
 800b9bc:	1ff80000 	.word	0x1ff80000

0800b9c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b087      	sub	sp, #28
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d14a      	bne.n	800ba74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9f6:	f040 8086 	bne.w	800bb06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	7812      	ldrb	r2, [r2, #0]
 800ba0e:	0151      	lsls	r1, r2, #5
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	440a      	add	r2, r1
 800ba14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	7812      	ldrb	r2, [r2, #0]
 800ba32:	0151      	lsls	r1, r2, #5
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	440a      	add	r2, r1
 800ba38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3301      	adds	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d902      	bls.n	800ba58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	75fb      	strb	r3, [r7, #23]
          break;
 800ba56:	e056      	b.n	800bb06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba70:	d0e7      	beq.n	800ba42 <USB_EPStopXfer+0x82>
 800ba72:	e048      	b.n	800bb06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	015a      	lsls	r2, r3, #5
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba8c:	d13b      	bne.n	800bb06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	7812      	ldrb	r2, [r2, #0]
 800baa2:	0151      	lsls	r1, r2, #5
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	440a      	add	r2, r1
 800baa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800baac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bab0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	7812      	ldrb	r2, [r2, #0]
 800bac6:	0151      	lsls	r1, r2, #5
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	440a      	add	r2, r1
 800bacc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bad0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bad4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3301      	adds	r3, #1
 800bada:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d902      	bls.n	800baec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	75fb      	strb	r3, [r7, #23]
          break;
 800baea:	e00c      	b.n	800bb06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb04:	d0e7      	beq.n	800bad6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b089      	sub	sp, #36	@ 0x24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	4611      	mov	r1, r2
 800bb20:	461a      	mov	r2, r3
 800bb22:	460b      	mov	r3, r1
 800bb24:	71fb      	strb	r3, [r7, #7]
 800bb26:	4613      	mov	r3, r2
 800bb28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bb32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d123      	bne.n	800bb82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb3a:	88bb      	ldrh	r3, [r7, #4]
 800bb3c:	3303      	adds	r3, #3
 800bb3e:	089b      	lsrs	r3, r3, #2
 800bb40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb42:	2300      	movs	r3, #0
 800bb44:	61bb      	str	r3, [r7, #24]
 800bb46:	e018      	b.n	800bb7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	031a      	lsls	r2, r3, #12
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb54:	461a      	mov	r2, r3
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	3301      	adds	r3, #1
 800bb66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	3301      	adds	r3, #1
 800bb72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	3301      	adds	r3, #1
 800bb78:	61bb      	str	r3, [r7, #24]
 800bb7a:	69ba      	ldr	r2, [r7, #24]
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d3e2      	bcc.n	800bb48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3724      	adds	r7, #36	@ 0x24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b08b      	sub	sp, #44	@ 0x2c
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	089b      	lsrs	r3, r3, #2
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bbae:	88fb      	ldrh	r3, [r7, #6]
 800bbb0:	f003 0303 	and.w	r3, r3, #3
 800bbb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	623b      	str	r3, [r7, #32]
 800bbba:	e014      	b.n	800bbe6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc6:	601a      	str	r2, [r3, #0]
    pDest++;
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbca:	3301      	adds	r3, #1
 800bbcc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	3301      	adds	r3, #1
 800bbde:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	623b      	str	r3, [r7, #32]
 800bbe6:	6a3a      	ldr	r2, [r7, #32]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d3e6      	bcc.n	800bbbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bbee:	8bfb      	ldrh	r3, [r7, #30]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d01e      	beq.n	800bc32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f107 0310 	add.w	r3, r7, #16
 800bc04:	6812      	ldr	r2, [r2, #0]
 800bc06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	6a3b      	ldr	r3, [r7, #32]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	fa22 f303 	lsr.w	r3, r2, r3
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc18:	701a      	strb	r2, [r3, #0]
      i++;
 800bc1a:	6a3b      	ldr	r3, [r7, #32]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	623b      	str	r3, [r7, #32]
      pDest++;
 800bc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc22:	3301      	adds	r3, #1
 800bc24:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bc26:	8bfb      	ldrh	r3, [r7, #30]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bc2c:	8bfb      	ldrh	r3, [r7, #30]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1ea      	bne.n	800bc08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	372c      	adds	r7, #44	@ 0x2c
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d12c      	bne.n	800bcb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	015a      	lsls	r2, r3, #5
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	db12      	blt.n	800bc94 <USB_EPSetStall+0x54>
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00f      	beq.n	800bc94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	015a      	lsls	r2, r3, #5
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	0151      	lsls	r1, r2, #5
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	440a      	add	r2, r1
 800bc8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bc92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	015a      	lsls	r2, r3, #5
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	0151      	lsls	r1, r2, #5
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	440a      	add	r2, r1
 800bcaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	e02b      	b.n	800bd0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	015a      	lsls	r2, r3, #5
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	db12      	blt.n	800bcee <USB_EPSetStall+0xae>
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00f      	beq.n	800bcee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	0151      	lsls	r1, r2, #5
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	440a      	add	r2, r1
 800bce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bce8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bcec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	0151      	lsls	r1, r2, #5
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	440a      	add	r2, r1
 800bd04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bd0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	785b      	ldrb	r3, [r3, #1]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d128      	bne.n	800bd8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	015a      	lsls	r2, r3, #5
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	0151      	lsls	r1, r2, #5
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	440a      	add	r2, r1
 800bd4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	791b      	ldrb	r3, [r3, #4]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d003      	beq.n	800bd68 <USB_EPClearStall+0x4c>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	791b      	ldrb	r3, [r3, #4]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d138      	bne.n	800bdda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	0151      	lsls	r1, r2, #5
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	440a      	add	r2, r1
 800bd7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	e027      	b.n	800bdda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	0151      	lsls	r1, r2, #5
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	440a      	add	r2, r1
 800bda0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bda4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bda8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	791b      	ldrb	r3, [r3, #4]
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d003      	beq.n	800bdba <USB_EPClearStall+0x9e>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	791b      	ldrb	r3, [r3, #4]
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d10f      	bne.n	800bdda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	015a      	lsls	r2, r3, #5
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	0151      	lsls	r1, r2, #5
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	440a      	add	r2, r1
 800bdd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800be0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	78fb      	ldrb	r3, [r7, #3]
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800be1c:	68f9      	ldr	r1, [r7, #12]
 800be1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be22:	4313      	orrs	r3, r2
 800be24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be4e:	f023 0303 	bic.w	r3, r3, #3
 800be52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be62:	f023 0302 	bic.w	r3, r3, #2
 800be66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800be76:	b480      	push	{r7}
 800be78:	b085      	sub	sp, #20
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be90:	f023 0303 	bic.w	r3, r3, #3
 800be94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bea4:	f043 0302 	orr.w	r3, r3, #2
 800bea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	4013      	ands	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bed0:	68fb      	ldr	r3, [r7, #12]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bede:	b480      	push	{r7}
 800bee0:	b085      	sub	sp, #20
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	4013      	ands	r3, r2
 800bf00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	0c1b      	lsrs	r3, r3, #16
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b085      	sub	sp, #20
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	4013      	ands	r3, r2
 800bf34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	b29b      	uxth	r3, r3
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b085      	sub	sp, #20
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	015a      	lsls	r2, r3, #5
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	4013      	ands	r3, r2
 800bf72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf74:	68bb      	ldr	r3, [r7, #8]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3714      	adds	r7, #20
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b087      	sub	sp, #28
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bfa6:	78fb      	ldrb	r3, [r7, #3]
 800bfa8:	f003 030f 	and.w	r3, r3, #15
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb2:	01db      	lsls	r3, r3, #7
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bfd0:	68bb      	ldr	r3, [r7, #8]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	f003 0301 	and.w	r3, r3, #1
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
	...

0800bffc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c016:	4619      	mov	r1, r3
 800c018:	4b09      	ldr	r3, [pc, #36]	@ (800c040 <USB_ActivateSetup+0x44>)
 800c01a:	4013      	ands	r3, r2
 800c01c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c02c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c030:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	fffff800 	.word	0xfffff800

0800c044 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c044:	b480      	push	{r7}
 800c046:	b087      	sub	sp, #28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	460b      	mov	r3, r1
 800c04e:	607a      	str	r2, [r7, #4]
 800c050:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	333c      	adds	r3, #60	@ 0x3c
 800c05a:	3304      	adds	r3, #4
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	4a26      	ldr	r2, [pc, #152]	@ (800c0fc <USB_EP0_OutStart+0xb8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d90a      	bls.n	800c07e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c078:	d101      	bne.n	800c07e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e037      	b.n	800c0ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c084:	461a      	mov	r2, r3
 800c086:	2300      	movs	r3, #0
 800c088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c098:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c09c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0ac:	f043 0318 	orr.w	r3, r3, #24
 800c0b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c0c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c0c6:	7afb      	ldrb	r3, [r7, #11]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d10f      	bne.n	800c0ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c0ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	371c      	adds	r7, #28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	4f54300a 	.word	0x4f54300a

0800c100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3301      	adds	r3, #1
 800c110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c118:	d901      	bls.n	800c11e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e01b      	b.n	800c156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	2b00      	cmp	r3, #0
 800c124:	daf2      	bge.n	800c10c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	f043 0201 	orr.w	r2, r3, #1
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3301      	adds	r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c142:	d901      	bls.n	800c148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	e006      	b.n	800c156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b01      	cmp	r3, #1
 800c152:	d0f0      	beq.n	800c136 <USB_CoreReset+0x36>

  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
	...

0800c164 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800c170:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800c174:	f003 ffa0 	bl	80100b8 <USBD_static_malloc>
 800c178:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	32b0      	adds	r2, #176	@ 0xb0
 800c18a:	2100      	movs	r1, #0
 800c18c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c190:	2302      	movs	r3, #2
 800c192:	e06e      	b.n	800c272 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	32b0      	adds	r2, #176	@ 0xb0
 800c19e:	68f9      	ldr	r1, [r7, #12]
 800c1a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	32b0      	adds	r2, #176	@ 0xb0
 800c1ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7c1b      	ldrb	r3, [r3, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d12b      	bne.n	800c218 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800c1c0:	4b2e      	ldr	r3, [pc, #184]	@ (800c27c <USBD_MSC_Init+0x118>)
 800c1c2:	7819      	ldrb	r1, [r3, #0]
 800c1c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f003 fe31 	bl	800fe32 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800c1d0:	4b2a      	ldr	r3, [pc, #168]	@ (800c27c <USBD_MSC_Init+0x118>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	f003 020f 	and.w	r2, r3, #15
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	440b      	add	r3, r1
 800c1e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800c1ec:	4b24      	ldr	r3, [pc, #144]	@ (800c280 <USBD_MSC_Init+0x11c>)
 800c1ee:	7819      	ldrb	r1, [r3, #0]
 800c1f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f003 fe1b 	bl	800fe32 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800c1fc:	4b20      	ldr	r3, [pc, #128]	@ (800c280 <USBD_MSC_Init+0x11c>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	f003 020f 	and.w	r2, r3, #15
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	4613      	mov	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	440b      	add	r3, r1
 800c210:	3324      	adds	r3, #36	@ 0x24
 800c212:	2201      	movs	r2, #1
 800c214:	801a      	strh	r2, [r3, #0]
 800c216:	e028      	b.n	800c26a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800c218:	4b18      	ldr	r3, [pc, #96]	@ (800c27c <USBD_MSC_Init+0x118>)
 800c21a:	7819      	ldrb	r1, [r3, #0]
 800c21c:	2340      	movs	r3, #64	@ 0x40
 800c21e:	2202      	movs	r2, #2
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f003 fe06 	bl	800fe32 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800c226:	4b15      	ldr	r3, [pc, #84]	@ (800c27c <USBD_MSC_Init+0x118>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	f003 020f 	and.w	r2, r3, #15
 800c22e:	6879      	ldr	r1, [r7, #4]
 800c230:	4613      	mov	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	440b      	add	r3, r1
 800c23a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c23e:	2201      	movs	r2, #1
 800c240:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800c242:	4b0f      	ldr	r3, [pc, #60]	@ (800c280 <USBD_MSC_Init+0x11c>)
 800c244:	7819      	ldrb	r1, [r3, #0]
 800c246:	2340      	movs	r3, #64	@ 0x40
 800c248:	2202      	movs	r2, #2
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f003 fdf1 	bl	800fe32 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800c250:	4b0b      	ldr	r3, [pc, #44]	@ (800c280 <USBD_MSC_Init+0x11c>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	f003 020f 	and.w	r2, r3, #15
 800c258:	6879      	ldr	r1, [r7, #4]
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	440b      	add	r3, r1
 800c264:	3324      	adds	r3, #36	@ 0x24
 800c266:	2201      	movs	r2, #1
 800c268:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fa2c 	bl	800c6c8 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	24000073 	.word	0x24000073
 800c280:	24000072 	.word	0x24000072

0800c284 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800c290:	4b26      	ldr	r3, [pc, #152]	@ (800c32c <USBD_MSC_DeInit+0xa8>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f003 fdf1 	bl	800fe7e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800c29c:	4b23      	ldr	r3, [pc, #140]	@ (800c32c <USBD_MSC_DeInit+0xa8>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	f003 020f 	and.w	r2, r3, #15
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4413      	add	r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	440b      	add	r3, r1
 800c2b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800c2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800c330 <USBD_MSC_DeInit+0xac>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f003 fddd 	bl	800fe7e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800c2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c330 <USBD_MSC_DeInit+0xac>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	f003 020f 	and.w	r2, r3, #15
 800c2cc:	6879      	ldr	r1, [r7, #4]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	440b      	add	r3, r1
 800c2d8:	3324      	adds	r3, #36	@ 0x24
 800c2da:	2200      	movs	r2, #0
 800c2dc:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	32b0      	adds	r2, #176	@ 0xb0
 800c2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d018      	beq.n	800c322 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fa67 	bl	800c7c4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	32b0      	adds	r2, #176	@ 0xb0
 800c300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c304:	4618      	mov	r0, r3
 800c306:	f003 fee5 	bl	80100d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	32b0      	adds	r2, #176	@ 0xb0
 800c314:	2100      	movs	r1, #0
 800c316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	24000073 	.word	0x24000073
 800c330:	24000072 	.word	0x24000072

0800c334 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	32b0      	adds	r2, #176	@ 0xb0
 800c348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d101      	bne.n	800c360 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c35c:	2303      	movs	r3, #3
 800c35e:	e0e1      	b.n	800c524 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d053      	beq.n	800c414 <USBD_MSC_Setup+0xe0>
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	f040 80d1 	bne.w	800c514 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	785b      	ldrb	r3, [r3, #1]
 800c376:	2bfe      	cmp	r3, #254	@ 0xfe
 800c378:	d002      	beq.n	800c380 <USBD_MSC_Setup+0x4c>
 800c37a:	2bff      	cmp	r3, #255	@ 0xff
 800c37c:	d02a      	beq.n	800c3d4 <USBD_MSC_Setup+0xa0>
 800c37e:	e041      	b.n	800c404 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	885b      	ldrh	r3, [r3, #2]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d11e      	bne.n	800c3c6 <USBD_MSC_Setup+0x92>
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	88db      	ldrh	r3, [r3, #6]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d11a      	bne.n	800c3c6 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800c396:	2b00      	cmp	r3, #0
 800c398:	da15      	bge.n	800c3c6 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	33b0      	adds	r3, #176	@ 0xb0
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	4798      	blx	r3
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f003 f95d 	bl	800f67c <USBD_CtlSendData>
 800c3c2:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3c4:	e025      	b.n	800c412 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f003 f8da 	bl	800f582 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	75fb      	strb	r3, [r7, #23]
          break;
 800c3d2:	e01e      	b.n	800c412 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	885b      	ldrh	r3, [r3, #2]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10c      	bne.n	800c3f6 <USBD_MSC_Setup+0xc2>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	88db      	ldrh	r3, [r3, #6]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d108      	bne.n	800c3f6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	db03      	blt.n	800c3f6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f9b4 	bl	800c75c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3f4:	e00d      	b.n	800c412 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800c3f6:	6839      	ldr	r1, [r7, #0]
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f003 f8c2 	bl	800f582 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3fe:	2303      	movs	r3, #3
 800c400:	75fb      	strb	r3, [r7, #23]
          break;
 800c402:	e006      	b.n	800c412 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f003 f8bb 	bl	800f582 <USBD_CtlError>
          ret = USBD_FAIL;
 800c40c:	2303      	movs	r3, #3
 800c40e:	75fb      	strb	r3, [r7, #23]
          break;
 800c410:	bf00      	nop
      }
      break;
 800c412:	e086      	b.n	800c522 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	785b      	ldrb	r3, [r3, #1]
 800c418:	2b0b      	cmp	r3, #11
 800c41a:	d872      	bhi.n	800c502 <USBD_MSC_Setup+0x1ce>
 800c41c:	a201      	add	r2, pc, #4	@ (adr r2, 800c424 <USBD_MSC_Setup+0xf0>)
 800c41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c422:	bf00      	nop
 800c424:	0800c455 	.word	0x0800c455
 800c428:	0800c4d1 	.word	0x0800c4d1
 800c42c:	0800c503 	.word	0x0800c503
 800c430:	0800c503 	.word	0x0800c503
 800c434:	0800c503 	.word	0x0800c503
 800c438:	0800c503 	.word	0x0800c503
 800c43c:	0800c503 	.word	0x0800c503
 800c440:	0800c503 	.word	0x0800c503
 800c444:	0800c503 	.word	0x0800c503
 800c448:	0800c503 	.word	0x0800c503
 800c44c:	0800c47f 	.word	0x0800c47f
 800c450:	0800c4a9 	.word	0x0800c4a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d107      	bne.n	800c470 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c460:	f107 030e 	add.w	r3, r7, #14
 800c464:	2202      	movs	r2, #2
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f003 f907 	bl	800f67c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c46e:	e050      	b.n	800c512 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f003 f885 	bl	800f582 <USBD_CtlError>
            ret = USBD_FAIL;
 800c478:	2303      	movs	r3, #3
 800c47a:	75fb      	strb	r3, [r7, #23]
          break;
 800c47c:	e049      	b.n	800c512 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b03      	cmp	r3, #3
 800c488:	d107      	bne.n	800c49a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	3304      	adds	r3, #4
 800c48e:	2201      	movs	r2, #1
 800c490:	4619      	mov	r1, r3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f003 f8f2 	bl	800f67c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c498:	e03b      	b.n	800c512 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f003 f870 	bl	800f582 <USBD_CtlError>
            ret = USBD_FAIL;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	75fb      	strb	r3, [r7, #23]
          break;
 800c4a6:	e034      	b.n	800c512 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d106      	bne.n	800c4c2 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	885b      	ldrh	r3, [r3, #2]
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c4c0:	e027      	b.n	800c512 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f003 f85c 	bl	800f582 <USBD_CtlError>
            ret = USBD_FAIL;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	75fb      	strb	r3, [r7, #23]
          break;
 800c4ce:	e020      	b.n	800c512 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d119      	bne.n	800c510 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	885b      	ldrh	r3, [r3, #2]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d115      	bne.n	800c510 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	889b      	ldrh	r3, [r3, #4]
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f003 fce5 	bl	800febc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	889b      	ldrh	r3, [r3, #4]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fb2e 	bl	800cb5c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800c500:	e006      	b.n	800c510 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f003 f83c 	bl	800f582 <USBD_CtlError>
          ret = USBD_FAIL;
 800c50a:	2303      	movs	r3, #3
 800c50c:	75fb      	strb	r3, [r7, #23]
          break;
 800c50e:	e000      	b.n	800c512 <USBD_MSC_Setup+0x1de>
          break;
 800c510:	bf00      	nop
      }
      break;
 800c512:	e006      	b.n	800c522 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f003 f833 	bl	800f582 <USBD_CtlError>
      ret = USBD_FAIL;
 800c51c:	2303      	movs	r3, #3
 800c51e:	75fb      	strb	r3, [r7, #23]
      break;
 800c520:	bf00      	nop
  }

  return (uint8_t)ret;
 800c522:	7dfb      	ldrb	r3, [r7, #23]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3718      	adds	r7, #24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800c538:	78fb      	ldrb	r3, [r7, #3]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f959 	bl	800c7f4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	460b      	mov	r3, r1
 800c556:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f983 	bl	800c868 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800c574:	2181      	movs	r1, #129	@ 0x81
 800c576:	4812      	ldr	r0, [pc, #72]	@ (800c5c0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800c578:	f002 f9a4 	bl	800e8c4 <USBD_GetEpDesc>
 800c57c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800c57e:	2101      	movs	r1, #1
 800c580:	480f      	ldr	r0, [pc, #60]	@ (800c5c0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800c582:	f002 f99f 	bl	800e8c4 <USBD_GetEpDesc>
 800c586:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d006      	beq.n	800c59c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	711a      	strb	r2, [r3, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f042 0202 	orr.w	r2, r2, #2
 800c59a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d006      	beq.n	800c5b0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	711a      	strb	r2, [r3, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f042 0202 	orr.w	r2, r2, #2
 800c5ae:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800c5b6:	4b02      	ldr	r3, [pc, #8]	@ (800c5c0 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	24000048 	.word	0x24000048

0800c5c4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800c5cc:	2181      	movs	r1, #129	@ 0x81
 800c5ce:	4812      	ldr	r0, [pc, #72]	@ (800c618 <USBD_MSC_GetFSCfgDesc+0x54>)
 800c5d0:	f002 f978 	bl	800e8c4 <USBD_GetEpDesc>
 800c5d4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	480f      	ldr	r0, [pc, #60]	@ (800c618 <USBD_MSC_GetFSCfgDesc+0x54>)
 800c5da:	f002 f973 	bl	800e8c4 <USBD_GetEpDesc>
 800c5de:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d006      	beq.n	800c5f4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5ee:	711a      	strb	r2, [r3, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d006      	beq.n	800c608 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c602:	711a      	strb	r2, [r3, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2220      	movs	r2, #32
 800c60c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800c60e:	4b02      	ldr	r3, [pc, #8]	@ (800c618 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	24000048 	.word	0x24000048

0800c61c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800c624:	2181      	movs	r1, #129	@ 0x81
 800c626:	4812      	ldr	r0, [pc, #72]	@ (800c670 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800c628:	f002 f94c 	bl	800e8c4 <USBD_GetEpDesc>
 800c62c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800c62e:	2101      	movs	r1, #1
 800c630:	480f      	ldr	r0, [pc, #60]	@ (800c670 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800c632:	f002 f947 	bl	800e8c4 <USBD_GetEpDesc>
 800c636:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d006      	beq.n	800c64c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2200      	movs	r2, #0
 800c642:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c646:	711a      	strb	r2, [r3, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d006      	beq.n	800c660 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2200      	movs	r2, #0
 800c656:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c65a:	711a      	strb	r2, [r3, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2220      	movs	r2, #32
 800c664:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800c666:	4b02      	ldr	r3, [pc, #8]	@ (800c670 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	24000048 	.word	0x24000048

0800c674 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	220a      	movs	r2, #10
 800c680:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800c682:	4b03      	ldr	r3, [pc, #12]	@ (800c690 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c684:	4618      	mov	r0, r3
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr
 800c690:	24000068 	.word	0x24000068

0800c694 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e009      	b.n	800c6bc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	33b0      	adds	r3, #176	@ 0xb0
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	32b0      	adds	r2, #176	@ 0xb0
 800c6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6de:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d032      	beq.n	800c74c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	33b0      	adds	r3, #176	@ 0xb0
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2000      	movs	r0, #0
 800c71e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800c720:	4b0c      	ldr	r3, [pc, #48]	@ (800c754 <MSC_BOT_Init+0x8c>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f003 fbc8 	bl	800febc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800c72c:	4b0a      	ldr	r3, [pc, #40]	@ (800c758 <MSC_BOT_Init+0x90>)
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f003 fbc2 	bl	800febc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800c738:	4b06      	ldr	r3, [pc, #24]	@ (800c754 <MSC_BOT_Init+0x8c>)
 800c73a:	7819      	ldrb	r1, [r3, #0]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800c742:	231f      	movs	r3, #31
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f003 fc82 	bl	801004e <USBD_LL_PrepareReceive>
 800c74a:	e000      	b.n	800c74e <MSC_BOT_Init+0x86>
    return;
 800c74c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	24000073 	.word	0x24000073
 800c758:	24000072 	.word	0x24000072

0800c75c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	32b0      	adds	r2, #176	@ 0xb0
 800c76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c772:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d01b      	beq.n	800c7b2 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2201      	movs	r2, #1
 800c784:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800c786:	4b0d      	ldr	r3, [pc, #52]	@ (800c7bc <MSC_BOT_Reset+0x60>)
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f003 fbd3 	bl	800ff38 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800c792:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c0 <MSC_BOT_Reset+0x64>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f003 fbcd 	bl	800ff38 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800c79e:	4b08      	ldr	r3, [pc, #32]	@ (800c7c0 <MSC_BOT_Reset+0x64>)
 800c7a0:	7819      	ldrb	r1, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800c7a8:	231f      	movs	r3, #31
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f003 fc4f 	bl	801004e <USBD_LL_PrepareReceive>
 800c7b0:	e000      	b.n	800c7b4 <MSC_BOT_Reset+0x58>
    return;
 800c7b2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	24000072 	.word	0x24000072
 800c7c0:	24000073 	.word	0x24000073

0800c7c4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	32b0      	adds	r2, #176	@ 0xb0
 800c7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7da:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	721a      	strb	r2, [r3, #8]
  }
}
 800c7e8:	bf00      	nop
 800c7ea:	3714      	adds	r7, #20
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	32b0      	adds	r2, #176	@ 0xb0
 800c80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d020      	beq.n	800c858 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	7a1b      	ldrb	r3, [r3, #8]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d005      	beq.n	800c82a <MSC_BOT_DataIn+0x36>
 800c81e:	2b02      	cmp	r3, #2
 800c820:	db1c      	blt.n	800c85c <MSC_BOT_DataIn+0x68>
 800c822:	3b03      	subs	r3, #3
 800c824:	2b01      	cmp	r3, #1
 800c826:	d819      	bhi.n	800c85c <MSC_BOT_DataIn+0x68>
 800c828:	e011      	b.n	800c84e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800c836:	461a      	mov	r2, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f9c9 	bl	800cbd0 <SCSI_ProcessCmd>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	da0d      	bge.n	800c860 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800c844:	2101      	movs	r1, #1
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f90c 	bl	800ca64 <MSC_BOT_SendCSW>
      }
      break;
 800c84c:	e008      	b.n	800c860 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800c84e:	2100      	movs	r1, #0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f907 	bl	800ca64 <MSC_BOT_SendCSW>
      break;
 800c856:	e004      	b.n	800c862 <MSC_BOT_DataIn+0x6e>
    return;
 800c858:	bf00      	nop
 800c85a:	e002      	b.n	800c862 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800c85c:	bf00      	nop
 800c85e:	e000      	b.n	800c862 <MSC_BOT_DataIn+0x6e>
      break;
 800c860:	bf00      	nop
  }
}
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	460b      	mov	r3, r1
 800c872:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	32b0      	adds	r2, #176	@ 0xb0
 800c87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c882:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d01c      	beq.n	800c8c4 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	7a1b      	ldrb	r3, [r3, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d002      	beq.n	800c898 <MSC_BOT_DataOut+0x30>
 800c892:	2b01      	cmp	r3, #1
 800c894:	d004      	beq.n	800c8a0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800c896:	e018      	b.n	800c8ca <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f819 	bl	800c8d0 <MSC_BOT_CBW_Decode>
      break;
 800c89e:	e014      	b.n	800c8ca <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f98e 	bl	800cbd0 <SCSI_ProcessCmd>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	da06      	bge.n	800c8c8 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f8d1 	bl	800ca64 <MSC_BOT_SendCSW>
      break;
 800c8c2:	e001      	b.n	800c8c8 <MSC_BOT_DataOut+0x60>
    return;
 800c8c4:	bf00      	nop
 800c8c6:	e000      	b.n	800c8ca <MSC_BOT_DataOut+0x62>
      break;
 800c8c8:	bf00      	nop
  }
}
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	32b0      	adds	r2, #176	@ 0xb0
 800c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d079      	beq.n	800c9e2 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800c906:	4b3a      	ldr	r3, [pc, #232]	@ (800c9f0 <MSC_BOT_CBW_Decode+0x120>)
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f003 fbbf 	bl	8010090 <USBD_LL_GetRxDataSize>
 800c912:	4603      	mov	r3, r0
 800c914:	2b1f      	cmp	r3, #31
 800c916:	d114      	bne.n	800c942 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800c91e:	4a35      	ldr	r2, [pc, #212]	@ (800c9f4 <MSC_BOT_CBW_Decode+0x124>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d10e      	bne.n	800c942 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d809      	bhi.n	800c942 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800c934:	2b00      	cmp	r3, #0
 800c936:	d004      	beq.n	800c942 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d90e      	bls.n	800c960 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c948:	2320      	movs	r3, #32
 800c94a:	2205      	movs	r2, #5
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fe54 	bl	800d5fa <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2202      	movs	r2, #2
 800c956:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f8bd 	bl	800cad8 <MSC_BOT_Abort>
 800c95e:	e043      	b.n	800c9e8 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800c96c:	461a      	mov	r2, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f92e 	bl	800cbd0 <SCSI_ProcessCmd>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	da0c      	bge.n	800c994 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	7a1b      	ldrb	r3, [r3, #8]
 800c97e:	2b05      	cmp	r3, #5
 800c980:	d104      	bne.n	800c98c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800c982:	2101      	movs	r1, #1
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f86d 	bl	800ca64 <MSC_BOT_SendCSW>
 800c98a:	e02d      	b.n	800c9e8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f8a3 	bl	800cad8 <MSC_BOT_Abort>
 800c992:	e029      	b.n	800c9e8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	7a1b      	ldrb	r3, [r3, #8]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d024      	beq.n	800c9e6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d020      	beq.n	800c9e6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d01c      	beq.n	800c9e6 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d009      	beq.n	800c9c8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f103 0110 	add.w	r1, r3, #16
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f819 	bl	800c9f8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800c9c6:	e00f      	b.n	800c9e8 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d104      	bne.n	800c9da <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f846 	bl	800ca64 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800c9d8:	e006      	b.n	800c9e8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 f87c 	bl	800cad8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800c9e0:	e002      	b.n	800c9e8 <MSC_BOT_CBW_Decode+0x118>
    return;
 800c9e2:	bf00      	nop
 800c9e4:	e000      	b.n	800c9e8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800c9e6:	bf00      	nop
    }
  }
}
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	24000073 	.word	0x24000073
 800c9f4:	43425355 	.word	0x43425355

0800c9f8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	32b0      	adds	r2, #176	@ 0xb0
 800ca0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca12:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d01e      	beq.n	800ca58 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	4293      	cmp	r3, r2
 800ca24:	bf28      	it	cs
 800ca26:	4613      	movcs	r3, r2
 800ca28:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	1ad2      	subs	r2, r2, r3
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2204      	movs	r2, #4
 800ca46:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800ca48:	4b05      	ldr	r3, [pc, #20]	@ (800ca60 <MSC_BOT_SendData+0x68>)
 800ca4a:	7819      	ldrb	r1, [r3, #0]
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f003 fadb 	bl	801000c <USBD_LL_Transmit>
 800ca56:	e000      	b.n	800ca5a <MSC_BOT_SendData+0x62>
    return;
 800ca58:	bf00      	nop
}
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	24000072 	.word	0x24000072

0800ca64 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	32b0      	adds	r2, #176	@ 0xb0
 800ca7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d01d      	beq.n	800cac2 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4a10      	ldr	r2, [pc, #64]	@ (800cacc <MSC_BOT_SendCSW+0x68>)
 800ca8a:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	78fa      	ldrb	r2, [r7, #3]
 800ca92:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800ca9c:	4b0c      	ldr	r3, [pc, #48]	@ (800cad0 <MSC_BOT_SendCSW+0x6c>)
 800ca9e:	7819      	ldrb	r1, [r3, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800caa6:	230d      	movs	r3, #13
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f003 faaf 	bl	801000c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800caae:	4b09      	ldr	r3, [pc, #36]	@ (800cad4 <MSC_BOT_SendCSW+0x70>)
 800cab0:	7819      	ldrb	r1, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800cab8:	231f      	movs	r3, #31
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f003 fac7 	bl	801004e <USBD_LL_PrepareReceive>
 800cac0:	e000      	b.n	800cac4 <MSC_BOT_SendCSW+0x60>
    return;
 800cac2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	53425355 	.word	0x53425355
 800cad0:	24000072 	.word	0x24000072
 800cad4:	24000073 	.word	0x24000073

0800cad8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	32b0      	adds	r2, #176	@ 0xb0
 800caea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d02a      	beq.n	800cb4c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10e      	bne.n	800cb1e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d105      	bne.n	800cb1e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800cb12:	4b10      	ldr	r3, [pc, #64]	@ (800cb54 <MSC_BOT_Abort+0x7c>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	4619      	mov	r1, r3
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f003 f9ee 	bl	800fefa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800cb1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb58 <MSC_BOT_Abort+0x80>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f003 f9e8 	bl	800fefa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	7a5b      	ldrb	r3, [r3, #9]
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d10d      	bne.n	800cb4e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800cb32:	4b09      	ldr	r3, [pc, #36]	@ (800cb58 <MSC_BOT_Abort+0x80>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f003 f9de 	bl	800fefa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800cb3e:	4b05      	ldr	r3, [pc, #20]	@ (800cb54 <MSC_BOT_Abort+0x7c>)
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f003 f9d8 	bl	800fefa <USBD_LL_StallEP>
 800cb4a:	e000      	b.n	800cb4e <MSC_BOT_Abort+0x76>
    return;
 800cb4c:	bf00      	nop
  }
}
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	24000073 	.word	0x24000073
 800cb58:	24000072 	.word	0x24000072

0800cb5c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	32b0      	adds	r2, #176	@ 0xb0
 800cb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb76:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d01d      	beq.n	800cbba <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	7a5b      	ldrb	r3, [r3, #9]
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d10c      	bne.n	800cba0 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800cb86:	4b10      	ldr	r3, [pc, #64]	@ (800cbc8 <MSC_BOT_CplClrFeature+0x6c>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f003 f9b4 	bl	800fefa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800cb92:	4b0e      	ldr	r3, [pc, #56]	@ (800cbcc <MSC_BOT_CplClrFeature+0x70>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f003 f9ae 	bl	800fefa <USBD_LL_StallEP>
 800cb9e:	e00f      	b.n	800cbc0 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800cba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	da0a      	bge.n	800cbbe <MSC_BOT_CplClrFeature+0x62>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	7a5b      	ldrb	r3, [r3, #9]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d006      	beq.n	800cbbe <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7ff ff56 	bl	800ca64 <MSC_BOT_SendCSW>
 800cbb8:	e002      	b.n	800cbc0 <MSC_BOT_CplClrFeature+0x64>
    return;
 800cbba:	bf00      	nop
 800cbbc:	e000      	b.n	800cbc0 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800cbbe:	bf00      	nop
  }
}
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	24000072 	.word	0x24000072
 800cbcc:	24000073 	.word	0x24000073

0800cbd0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	32b0      	adds	r2, #176	@ 0xb0
 800cbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbec:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d102      	bne.n	800cbfa <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800cbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf8:	e168      	b.n	800cecc <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	2baa      	cmp	r3, #170	@ 0xaa
 800cc00:	f000 8144 	beq.w	800ce8c <SCSI_ProcessCmd+0x2bc>
 800cc04:	2baa      	cmp	r3, #170	@ 0xaa
 800cc06:	f300 8153 	bgt.w	800ceb0 <SCSI_ProcessCmd+0x2e0>
 800cc0a:	2ba8      	cmp	r3, #168	@ 0xa8
 800cc0c:	f000 812c 	beq.w	800ce68 <SCSI_ProcessCmd+0x298>
 800cc10:	2ba8      	cmp	r3, #168	@ 0xa8
 800cc12:	f300 814d 	bgt.w	800ceb0 <SCSI_ProcessCmd+0x2e0>
 800cc16:	2b5a      	cmp	r3, #90	@ 0x5a
 800cc18:	f300 80c0 	bgt.w	800cd9c <SCSI_ProcessCmd+0x1cc>
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f2c0 8147 	blt.w	800ceb0 <SCSI_ProcessCmd+0x2e0>
 800cc22:	2b5a      	cmp	r3, #90	@ 0x5a
 800cc24:	f200 8144 	bhi.w	800ceb0 <SCSI_ProcessCmd+0x2e0>
 800cc28:	a201      	add	r2, pc, #4	@ (adr r2, 800cc30 <SCSI_ProcessCmd+0x60>)
 800cc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2e:	bf00      	nop
 800cc30:	0800cda3 	.word	0x0800cda3
 800cc34:	0800ceb1 	.word	0x0800ceb1
 800cc38:	0800ceb1 	.word	0x0800ceb1
 800cc3c:	0800cdb5 	.word	0x0800cdb5
 800cc40:	0800ceb1 	.word	0x0800ceb1
 800cc44:	0800ceb1 	.word	0x0800ceb1
 800cc48:	0800ceb1 	.word	0x0800ceb1
 800cc4c:	0800ceb1 	.word	0x0800ceb1
 800cc50:	0800ceb1 	.word	0x0800ceb1
 800cc54:	0800ceb1 	.word	0x0800ceb1
 800cc58:	0800ceb1 	.word	0x0800ceb1
 800cc5c:	0800ceb1 	.word	0x0800ceb1
 800cc60:	0800ceb1 	.word	0x0800ceb1
 800cc64:	0800ceb1 	.word	0x0800ceb1
 800cc68:	0800ceb1 	.word	0x0800ceb1
 800cc6c:	0800ceb1 	.word	0x0800ceb1
 800cc70:	0800ceb1 	.word	0x0800ceb1
 800cc74:	0800ceb1 	.word	0x0800ceb1
 800cc78:	0800cdc7 	.word	0x0800cdc7
 800cc7c:	0800ceb1 	.word	0x0800ceb1
 800cc80:	0800ceb1 	.word	0x0800ceb1
 800cc84:	0800ceb1 	.word	0x0800ceb1
 800cc88:	0800ceb1 	.word	0x0800ceb1
 800cc8c:	0800ceb1 	.word	0x0800ceb1
 800cc90:	0800ceb1 	.word	0x0800ceb1
 800cc94:	0800ceb1 	.word	0x0800ceb1
 800cc98:	0800cdfd 	.word	0x0800cdfd
 800cc9c:	0800cdd9 	.word	0x0800cdd9
 800cca0:	0800ceb1 	.word	0x0800ceb1
 800cca4:	0800ceb1 	.word	0x0800ceb1
 800cca8:	0800cdeb 	.word	0x0800cdeb
 800ccac:	0800ceb1 	.word	0x0800ceb1
 800ccb0:	0800ceb1 	.word	0x0800ceb1
 800ccb4:	0800ceb1 	.word	0x0800ceb1
 800ccb8:	0800ceb1 	.word	0x0800ceb1
 800ccbc:	0800ce21 	.word	0x0800ce21
 800ccc0:	0800ceb1 	.word	0x0800ceb1
 800ccc4:	0800ce33 	.word	0x0800ce33
 800ccc8:	0800ceb1 	.word	0x0800ceb1
 800cccc:	0800ceb1 	.word	0x0800ceb1
 800ccd0:	0800ce57 	.word	0x0800ce57
 800ccd4:	0800ceb1 	.word	0x0800ceb1
 800ccd8:	0800ce7b 	.word	0x0800ce7b
 800ccdc:	0800ceb1 	.word	0x0800ceb1
 800cce0:	0800ceb1 	.word	0x0800ceb1
 800cce4:	0800ceb1 	.word	0x0800ceb1
 800cce8:	0800ceb1 	.word	0x0800ceb1
 800ccec:	0800ce9f 	.word	0x0800ce9f
 800ccf0:	0800ceb1 	.word	0x0800ceb1
 800ccf4:	0800ceb1 	.word	0x0800ceb1
 800ccf8:	0800ceb1 	.word	0x0800ceb1
 800ccfc:	0800ceb1 	.word	0x0800ceb1
 800cd00:	0800ceb1 	.word	0x0800ceb1
 800cd04:	0800ceb1 	.word	0x0800ceb1
 800cd08:	0800ceb1 	.word	0x0800ceb1
 800cd0c:	0800ceb1 	.word	0x0800ceb1
 800cd10:	0800ceb1 	.word	0x0800ceb1
 800cd14:	0800ceb1 	.word	0x0800ceb1
 800cd18:	0800ceb1 	.word	0x0800ceb1
 800cd1c:	0800ceb1 	.word	0x0800ceb1
 800cd20:	0800ceb1 	.word	0x0800ceb1
 800cd24:	0800ceb1 	.word	0x0800ceb1
 800cd28:	0800ceb1 	.word	0x0800ceb1
 800cd2c:	0800ceb1 	.word	0x0800ceb1
 800cd30:	0800ceb1 	.word	0x0800ceb1
 800cd34:	0800ceb1 	.word	0x0800ceb1
 800cd38:	0800ceb1 	.word	0x0800ceb1
 800cd3c:	0800ceb1 	.word	0x0800ceb1
 800cd40:	0800ceb1 	.word	0x0800ceb1
 800cd44:	0800ceb1 	.word	0x0800ceb1
 800cd48:	0800ceb1 	.word	0x0800ceb1
 800cd4c:	0800ceb1 	.word	0x0800ceb1
 800cd50:	0800ceb1 	.word	0x0800ceb1
 800cd54:	0800ceb1 	.word	0x0800ceb1
 800cd58:	0800ceb1 	.word	0x0800ceb1
 800cd5c:	0800ceb1 	.word	0x0800ceb1
 800cd60:	0800ceb1 	.word	0x0800ceb1
 800cd64:	0800ceb1 	.word	0x0800ceb1
 800cd68:	0800ceb1 	.word	0x0800ceb1
 800cd6c:	0800ceb1 	.word	0x0800ceb1
 800cd70:	0800ceb1 	.word	0x0800ceb1
 800cd74:	0800ceb1 	.word	0x0800ceb1
 800cd78:	0800ceb1 	.word	0x0800ceb1
 800cd7c:	0800ceb1 	.word	0x0800ceb1
 800cd80:	0800ceb1 	.word	0x0800ceb1
 800cd84:	0800ceb1 	.word	0x0800ceb1
 800cd88:	0800ceb1 	.word	0x0800ceb1
 800cd8c:	0800ceb1 	.word	0x0800ceb1
 800cd90:	0800ceb1 	.word	0x0800ceb1
 800cd94:	0800ceb1 	.word	0x0800ceb1
 800cd98:	0800ce0f 	.word	0x0800ce0f
 800cd9c:	2b9e      	cmp	r3, #158	@ 0x9e
 800cd9e:	d051      	beq.n	800ce44 <SCSI_ProcessCmd+0x274>
 800cda0:	e086      	b.n	800ceb0 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800cda2:	7afb      	ldrb	r3, [r7, #11]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	4619      	mov	r1, r3
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f000 f893 	bl	800ced4 <SCSI_TestUnitReady>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]
      break;
 800cdb2:	e089      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800cdb4:	7afb      	ldrb	r3, [r7, #11]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f000 fb9a 	bl	800d4f4 <SCSI_RequestSense>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	75fb      	strb	r3, [r7, #23]
      break;
 800cdc4:	e080      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800cdc6:	7afb      	ldrb	r3, [r7, #11]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f000 f8db 	bl	800cf88 <SCSI_Inquiry>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]
      break;
 800cdd6:	e077      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800cdd8:	7afb      	ldrb	r3, [r7, #11]
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	4619      	mov	r1, r3
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 fc56 	bl	800d690 <SCSI_StartStopUnit>
 800cde4:	4603      	mov	r3, r0
 800cde6:	75fb      	strb	r3, [r7, #23]
      break;
 800cde8:	e06e      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800cdea:	7afb      	ldrb	r3, [r7, #11]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	4619      	mov	r1, r3
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f000 fca2 	bl	800d73a <SCSI_AllowPreventRemovable>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	75fb      	strb	r3, [r7, #23]
      break;
 800cdfa:	e065      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800cdfc:	7afb      	ldrb	r3, [r7, #11]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	4619      	mov	r1, r3
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f000 faea 	bl	800d3dc <SCSI_ModeSense6>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce0c:	e05c      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ce0e:	7afb      	ldrb	r3, [r7, #11]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	4619      	mov	r1, r3
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f000 fb27 	bl	800d468 <SCSI_ModeSense10>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce1e:	e053      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ce20:	7afb      	ldrb	r3, [r7, #11]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	4619      	mov	r1, r3
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f000 fa5c 	bl	800d2e4 <SCSI_ReadFormatCapacity>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce30:	e04a      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ce32:	7afb      	ldrb	r3, [r7, #11]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	4619      	mov	r1, r3
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 f921 	bl	800d080 <SCSI_ReadCapacity10>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	75fb      	strb	r3, [r7, #23]
      break;
 800ce42:	e041      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 f996 	bl	800d17c <SCSI_ReadCapacity16>
 800ce50:	4603      	mov	r3, r0
 800ce52:	75fb      	strb	r3, [r7, #23]
      break;
 800ce54:	e038      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f000 fc99 	bl	800d794 <SCSI_Read10>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75fb      	strb	r3, [r7, #23]
      break;
 800ce66:	e02f      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f000 fd3a 	bl	800d8e8 <SCSI_Read12>
 800ce74:	4603      	mov	r3, r0
 800ce76:	75fb      	strb	r3, [r7, #23]
      break;
 800ce78:	e026      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800ce7a:	7afb      	ldrb	r3, [r7, #11]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f000 fde5 	bl	800da50 <SCSI_Write10>
 800ce86:	4603      	mov	r3, r0
 800ce88:	75fb      	strb	r3, [r7, #23]
      break;
 800ce8a:	e01d      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800ce8c:	7afb      	ldrb	r3, [r7, #11]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	4619      	mov	r1, r3
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 feb2 	bl	800dbfc <SCSI_Write12>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce9c:	e014      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800ce9e:	7afb      	ldrb	r3, [r7, #11]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	4619      	mov	r1, r3
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f000 ff8f 	bl	800ddc8 <SCSI_Verify10>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	75fb      	strb	r3, [r7, #23]
      break;
 800ceae:	e00b      	b.n	800cec8 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800ceb0:	7af9      	ldrb	r1, [r7, #11]
 800ceb2:	2320      	movs	r3, #32
 800ceb4:	2205      	movs	r2, #5
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f000 fb9f 	bl	800d5fa <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	2202      	movs	r2, #2
 800cec0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800cec2:	23ff      	movs	r3, #255	@ 0xff
 800cec4:	75fb      	strb	r3, [r7, #23]
      break;
 800cec6:	bf00      	nop
  }

  return ret;
 800cec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	460b      	mov	r3, r1
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	32b0      	adds	r2, #176	@ 0xb0
 800ceec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d102      	bne.n	800cefe <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800cef8:	f04f 33ff 	mov.w	r3, #4294967295
 800cefc:	e03f      	b.n	800cf7e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00a      	beq.n	800cf1e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800cf0e:	2320      	movs	r3, #32
 800cf10:	2205      	movs	r2, #5
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 fb71 	bl	800d5fa <SCSI_SenseCode>

    return -1;
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1c:	e02f      	b.n	800cf7e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d10b      	bne.n	800cf40 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cf28:	7af9      	ldrb	r1, [r7, #11]
 800cf2a:	233a      	movs	r3, #58	@ 0x3a
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f000 fb63 	bl	800d5fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	2205      	movs	r2, #5
 800cf38:	721a      	strb	r2, [r3, #8]
    return -1;
 800cf3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3e:	e01e      	b.n	800cf7e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	33b0      	adds	r3, #176	@ 0xb0
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4413      	add	r3, r2
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	7afa      	ldrb	r2, [r7, #11]
 800cf54:	4610      	mov	r0, r2
 800cf56:	4798      	blx	r3
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00b      	beq.n	800cf76 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cf5e:	7af9      	ldrb	r1, [r7, #11]
 800cf60:	233a      	movs	r3, #58	@ 0x3a
 800cf62:	2202      	movs	r2, #2
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f000 fb48 	bl	800d5fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2205      	movs	r2, #5
 800cf6e:	721a      	strb	r2, [r3, #8]

    return -1;
 800cf70:	f04f 33ff 	mov.w	r3, #4294967295
 800cf74:	e003      	b.n	800cf7e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	60da      	str	r2, [r3, #12]

  return 0;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b088      	sub	sp, #32
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	460b      	mov	r3, r1
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	32b0      	adds	r2, #176	@ 0xb0
 800cfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d102      	bne.n	800cfb2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800cfac:	f04f 33ff 	mov.w	r3, #4294967295
 800cfb0:	e05e      	b.n	800d070 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800cfc2:	2320      	movs	r3, #32
 800cfc4:	2205      	movs	r2, #5
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f000 fb17 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800cfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd0:	e04e      	b.n	800d070 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d020      	beq.n	800d022 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3302      	adds	r3, #2
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d105      	bne.n	800cff6 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800cfea:	2206      	movs	r2, #6
 800cfec:	4922      	ldr	r1, [pc, #136]	@ (800d078 <SCSI_Inquiry+0xf0>)
 800cfee:	69b8      	ldr	r0, [r7, #24]
 800cff0:	f001 f870 	bl	800e0d4 <SCSI_UpdateBotData>
 800cff4:	e03b      	b.n	800d06e <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3302      	adds	r3, #2
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2b80      	cmp	r3, #128	@ 0x80
 800cffe:	d105      	bne.n	800d00c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800d000:	2208      	movs	r2, #8
 800d002:	491e      	ldr	r1, [pc, #120]	@ (800d07c <SCSI_Inquiry+0xf4>)
 800d004:	69b8      	ldr	r0, [r7, #24]
 800d006:	f001 f865 	bl	800e0d4 <SCSI_UpdateBotData>
 800d00a:	e030      	b.n	800d06e <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800d012:	2324      	movs	r3, #36	@ 0x24
 800d014:	2205      	movs	r2, #5
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 faef 	bl	800d5fa <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800d01c:	f04f 33ff 	mov.w	r3, #4294967295
 800d020:	e026      	b.n	800d070 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	33b0      	adds	r3, #176	@ 0xb0
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d032:	69d9      	ldr	r1, [r3, #28]
 800d034:	7afa      	ldrb	r2, [r7, #11]
 800d036:	4613      	mov	r3, r2
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	4413      	add	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800d03e:	440b      	add	r3, r1
 800d040:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	3304      	adds	r3, #4
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	3305      	adds	r3, #5
 800d04a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3304      	adds	r3, #4
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	461a      	mov	r2, r3
 800d054:	8bfb      	ldrh	r3, [r7, #30]
 800d056:	4293      	cmp	r3, r2
 800d058:	d303      	bcc.n	800d062 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3304      	adds	r3, #4
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800d062:	8bfb      	ldrh	r3, [r7, #30]
 800d064:	461a      	mov	r2, r3
 800d066:	6979      	ldr	r1, [r7, #20]
 800d068:	69b8      	ldr	r0, [r7, #24]
 800d06a:	f001 f833 	bl	800e0d4 <SCSI_UpdateBotData>
  }

  return 0;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3720      	adds	r7, #32
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	24000074 	.word	0x24000074
 800d07c:	2400007c 	.word	0x2400007c

0800d080 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	460b      	mov	r3, r1
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	32b0      	adds	r2, #176	@ 0xb0
 800d098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d09c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d102      	bne.n	800d0aa <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800d0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a8:	e064      	b.n	800d174 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	33b0      	adds	r3, #176	@ 0xb0
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	697a      	ldr	r2, [r7, #20]
 800d0be:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800d0c8:	7af8      	ldrb	r0, [r7, #11]
 800d0ca:	4798      	blx	r3
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d0d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d104      	bne.n	800d0e2 <SCSI_ReadCapacity10+0x62>
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d108      	bne.n	800d0f4 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d0e2:	7af9      	ldrb	r1, [r7, #11]
 800d0e4:	233a      	movs	r3, #58	@ 0x3a
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 fa86 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800d0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f2:	e03f      	b.n	800d174 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	0e1b      	lsrs	r3, r3, #24
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d10a:	3b01      	subs	r3, #1
 800d10c:	0c1b      	lsrs	r3, r3, #16
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d11a:	3b01      	subs	r3, #1
 800d11c:	0a1b      	lsrs	r3, r3, #8
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	3b01      	subs	r3, #1
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d13a:	161b      	asrs	r3, r3, #24
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d148:	141b      	asrs	r3, r3, #16
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d156:	0a1b      	lsrs	r3, r3, #8
 800d158:	b29b      	uxth	r3, r3
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d166:	b2da      	uxtb	r2, r3
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	2208      	movs	r2, #8
 800d170:	60da      	str	r2, [r3, #12]

  return 0;
 800d172:	2300      	movs	r3, #0

}
 800d174:	4618      	mov	r0, r3
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b088      	sub	sp, #32
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	460b      	mov	r3, r1
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	32b0      	adds	r2, #176	@ 0xb0
 800d194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d198:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800d1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a4:	e09a      	b.n	800d2dc <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	33b0      	adds	r3, #176	@ 0xb0
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	69ba      	ldr	r2, [r7, #24]
 800d1ba:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800d1c4:	7af8      	ldrb	r0, [r7, #11]
 800d1c6:	4798      	blx	r3
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d1cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d104      	bne.n	800d1de <SCSI_ReadCapacity16+0x62>
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d108      	bne.n	800d1f0 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d1de:	7af9      	ldrb	r1, [r7, #11]
 800d1e0:	233a      	movs	r3, #58	@ 0x3a
 800d1e2:	2202      	movs	r2, #2
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 fa08 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800d1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ee:	e075      	b.n	800d2dc <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	330a      	adds	r3, #10
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	330b      	adds	r3, #11
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d200:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	330c      	adds	r3, #12
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d20a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	320d      	adds	r2, #13
 800d210:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d212:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d218:	2300      	movs	r3, #0
 800d21a:	61fb      	str	r3, [r7, #28]
 800d21c:	e008      	b.n	800d230 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800d21e:	69ba      	ldr	r2, [r7, #24]
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	4413      	add	r3, r2
 800d224:	3310      	adds	r3, #16
 800d226:	2200      	movs	r2, #0
 800d228:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	3301      	adds	r3, #1
 800d22e:	61fb      	str	r3, [r7, #28]
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	69fa      	ldr	r2, [r7, #28]
 800d236:	429a      	cmp	r2, r3
 800d238:	d3f1      	bcc.n	800d21e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d240:	3b01      	subs	r3, #1
 800d242:	0e1b      	lsrs	r3, r3, #24
 800d244:	b2da      	uxtb	r2, r3
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d250:	3b01      	subs	r3, #1
 800d252:	0c1b      	lsrs	r3, r3, #16
 800d254:	b2da      	uxtb	r2, r3
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d260:	3b01      	subs	r3, #1
 800d262:	0a1b      	lsrs	r3, r3, #8
 800d264:	b2da      	uxtb	r2, r3
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800d270:	b2db      	uxtb	r3, r3
 800d272:	3b01      	subs	r3, #1
 800d274:	b2da      	uxtb	r2, r3
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d280:	161b      	asrs	r3, r3, #24
 800d282:	b2da      	uxtb	r2, r3
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d28e:	141b      	asrs	r3, r3, #16
 800d290:	b2da      	uxtb	r2, r3
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d29c:	0a1b      	lsrs	r3, r3, #8
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800d2ac:	b2da      	uxtb	r2, r3
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	330a      	adds	r3, #10
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	330b      	adds	r3, #11
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d2c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	330c      	adds	r3, #12
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d2cc:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	320d      	adds	r2, #13
 800d2d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d2d4:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	60da      	str	r2, [r3, #12]

  return 0;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3720      	adds	r7, #32
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	32b0      	adds	r2, #176	@ 0xb0
 800d2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d300:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800d308:	f04f 33ff 	mov.w	r3, #4294967295
 800d30c:	e061      	b.n	800d3d2 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	33b0      	adds	r3, #176	@ 0xb0
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4413      	add	r3, r2
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	f107 0214 	add.w	r2, r7, #20
 800d324:	f107 0110 	add.w	r1, r7, #16
 800d328:	7af8      	ldrb	r0, [r7, #11]
 800d32a:	4798      	blx	r3
 800d32c:	4603      	mov	r3, r0
 800d32e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d104      	bne.n	800d342 <SCSI_ReadFormatCapacity+0x5e>
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d108      	bne.n	800d354 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d342:	7af9      	ldrb	r1, [r7, #11]
 800d344:	233a      	movs	r3, #58	@ 0x3a
 800d346:	2202      	movs	r2, #2
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f956 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800d34e:	f04f 33ff 	mov.w	r3, #4294967295
 800d352:	e03e      	b.n	800d3d2 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800d354:	2300      	movs	r3, #0
 800d356:	83fb      	strh	r3, [r7, #30]
 800d358:	e007      	b.n	800d36a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800d35a:	8bfb      	ldrh	r3, [r7, #30]
 800d35c:	69ba      	ldr	r2, [r7, #24]
 800d35e:	4413      	add	r3, r2
 800d360:	2200      	movs	r2, #0
 800d362:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800d364:	8bfb      	ldrh	r3, [r7, #30]
 800d366:	3301      	adds	r3, #1
 800d368:	83fb      	strh	r3, [r7, #30]
 800d36a:	8bfb      	ldrh	r3, [r7, #30]
 800d36c:	2b0b      	cmp	r3, #11
 800d36e:	d9f4      	bls.n	800d35a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	2208      	movs	r2, #8
 800d374:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	3b01      	subs	r3, #1
 800d37a:	0e1b      	lsrs	r3, r3, #24
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	3b01      	subs	r3, #1
 800d386:	0c1b      	lsrs	r3, r3, #16
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	3b01      	subs	r3, #1
 800d392:	0a1b      	lsrs	r3, r3, #8
 800d394:	b2da      	uxtb	r2, r3
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800d3ac:	8abb      	ldrh	r3, [r7, #20]
 800d3ae:	141b      	asrs	r3, r3, #16
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800d3b6:	8abb      	ldrh	r3, [r7, #20]
 800d3b8:	0a1b      	lsrs	r3, r3, #8
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	b2da      	uxtb	r2, r3
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800d3c2:	8abb      	ldrh	r3, [r7, #20]
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	220c      	movs	r2, #12
 800d3ce:	60da      	str	r2, [r3, #12]

  return 0;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3720      	adds	r7, #32
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
	...

0800d3dc <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	32b0      	adds	r2, #176	@ 0xb0
 800d3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800d3fa:	2304      	movs	r3, #4
 800d3fc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800d404:	f04f 33ff 	mov.w	r3, #4294967295
 800d408:	e027      	b.n	800d45a <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	33b0      	adds	r3, #176	@ 0xb0
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	4413      	add	r3, r2
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	7afa      	ldrb	r2, [r7, #11]
 800d41e:	4610      	mov	r0, r2
 800d420:	4798      	blx	r3
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d006      	beq.n	800d436 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800d428:	4b0e      	ldr	r3, [pc, #56]	@ (800d464 <SCSI_ModeSense6+0x88>)
 800d42a:	789b      	ldrb	r3, [r3, #2]
 800d42c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d430:	b2da      	uxtb	r2, r3
 800d432:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <SCSI_ModeSense6+0x88>)
 800d434:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3304      	adds	r3, #4
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	461a      	mov	r2, r3
 800d43e:	8afb      	ldrh	r3, [r7, #22]
 800d440:	4293      	cmp	r3, r2
 800d442:	d303      	bcc.n	800d44c <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3304      	adds	r3, #4
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800d44c:	8afb      	ldrh	r3, [r7, #22]
 800d44e:	461a      	mov	r2, r3
 800d450:	4904      	ldr	r1, [pc, #16]	@ (800d464 <SCSI_ModeSense6+0x88>)
 800d452:	6938      	ldr	r0, [r7, #16]
 800d454:	f000 fe3e 	bl	800e0d4 <SCSI_UpdateBotData>

  return 0;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	24000084 	.word	0x24000084

0800d468 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	460b      	mov	r3, r1
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	32b0      	adds	r2, #176	@ 0xb0
 800d480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d484:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800d486:	2308      	movs	r3, #8
 800d488:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800d490:	f04f 33ff 	mov.w	r3, #4294967295
 800d494:	e027      	b.n	800d4e6 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	33b0      	adds	r3, #176	@ 0xb0
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	4413      	add	r3, r2
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	7afa      	ldrb	r2, [r7, #11]
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4798      	blx	r3
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d006      	beq.n	800d4c2 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800d4b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d4f0 <SCSI_ModeSense10+0x88>)
 800d4b6:	78db      	ldrb	r3, [r3, #3]
 800d4b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	4b0c      	ldr	r3, [pc, #48]	@ (800d4f0 <SCSI_ModeSense10+0x88>)
 800d4c0:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	3308      	adds	r3, #8
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	8afb      	ldrh	r3, [r7, #22]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d303      	bcc.n	800d4d8 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800d4d8:	8afb      	ldrh	r3, [r7, #22]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4904      	ldr	r1, [pc, #16]	@ (800d4f0 <SCSI_ModeSense10+0x88>)
 800d4de:	6938      	ldr	r0, [r7, #16]
 800d4e0:	f000 fdf8 	bl	800e0d4 <SCSI_UpdateBotData>

  return 0;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3718      	adds	r7, #24
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	24000088 	.word	0x24000088

0800d4f4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	32b0      	adds	r2, #176	@ 0xb0
 800d50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d510:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <SCSI_RequestSense+0x2a>
  {
    return -1;
 800d518:	f04f 33ff 	mov.w	r3, #4294967295
 800d51c:	e069      	b.n	800d5f2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800d52e:	2320      	movs	r3, #32
 800d530:	2205      	movs	r2, #5
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f000 f861 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800d538:	f04f 33ff 	mov.w	r3, #4294967295
 800d53c:	e059      	b.n	800d5f2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800d53e:	2300      	movs	r3, #0
 800d540:	75fb      	strb	r3, [r7, #23]
 800d542:	e007      	b.n	800d554 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800d544:	7dfb      	ldrb	r3, [r7, #23]
 800d546:	693a      	ldr	r2, [r7, #16]
 800d548:	4413      	add	r3, r2
 800d54a:	2200      	movs	r2, #0
 800d54c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	3301      	adds	r3, #1
 800d552:	75fb      	strb	r3, [r7, #23]
 800d554:	7dfb      	ldrb	r3, [r7, #23]
 800d556:	2b11      	cmp	r3, #17
 800d558:	d9f4      	bls.n	800d544 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2270      	movs	r2, #112	@ 0x70
 800d55e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	220c      	movs	r2, #12
 800d564:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800d572:	429a      	cmp	r2, r3
 800d574:	d02e      	beq.n	800d5d4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800d57c:	461a      	mov	r2, r3
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	3248      	adds	r2, #72	@ 0x48
 800d582:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	3348      	adds	r3, #72	@ 0x48
 800d594:	00db      	lsls	r3, r3, #3
 800d596:	4413      	add	r3, r2
 800d598:	791a      	ldrb	r2, [r3, #4]
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800d5a4:	693a      	ldr	r2, [r7, #16]
 800d5a6:	3348      	adds	r3, #72	@ 0x48
 800d5a8:	00db      	lsls	r3, r3, #3
 800d5aa:	4413      	add	r3, r2
 800d5ac:	795a      	ldrb	r2, [r3, #5]
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800d5c8:	2b04      	cmp	r3, #4
 800d5ca:	d103      	bne.n	800d5d4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	2212      	movs	r2, #18
 800d5d8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3304      	adds	r3, #4
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	2b12      	cmp	r3, #18
 800d5e2:	d805      	bhi.n	800d5f0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3718      	adds	r7, #24
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b085      	sub	sp, #20
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	4608      	mov	r0, r1
 800d604:	4611      	mov	r1, r2
 800d606:	461a      	mov	r2, r3
 800d608:	4603      	mov	r3, r0
 800d60a:	70fb      	strb	r3, [r7, #3]
 800d60c:	460b      	mov	r3, r1
 800d60e:	70bb      	strb	r3, [r7, #2]
 800d610:	4613      	mov	r3, r2
 800d612:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	32b0      	adds	r2, #176	@ 0xb0
 800d61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d622:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d02c      	beq.n	800d684 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800d630:	461a      	mov	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3248      	adds	r2, #72	@ 0x48
 800d636:	78b9      	ldrb	r1, [r7, #2]
 800d638:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	3348      	adds	r3, #72	@ 0x48
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	4413      	add	r3, r2
 800d64a:	787a      	ldrb	r2, [r7, #1]
 800d64c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	3348      	adds	r3, #72	@ 0x48
 800d658:	00db      	lsls	r3, r3, #3
 800d65a:	4413      	add	r3, r2
 800d65c:	2200      	movs	r2, #0
 800d65e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800d666:	3301      	adds	r3, #1
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800d676:	2b04      	cmp	r3, #4
 800d678:	d105      	bne.n	800d686 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2200      	movs	r2, #0
 800d67e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800d682:	e000      	b.n	800d686 <SCSI_SenseCode+0x8c>
    return;
 800d684:	bf00      	nop
  }
}
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	460b      	mov	r3, r1
 800d69a:	607a      	str	r2, [r7, #4]
 800d69c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	32b0      	adds	r2, #176	@ 0xb0
 800d6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d102      	bne.n	800d6ba <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800d6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b8:	e03b      	b.n	800d732 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d10f      	bne.n	800d6e4 <SCSI_StartStopUnit+0x54>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	f003 0303 	and.w	r3, r3, #3
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d108      	bne.n	800d6e4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800d6d2:	7af9      	ldrb	r1, [r7, #11]
 800d6d4:	2324      	movs	r3, #36	@ 0x24
 800d6d6:	2205      	movs	r2, #5
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f7ff ff8e 	bl	800d5fa <SCSI_SenseCode>

    return -1;
 800d6de:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e2:	e026      	b.n	800d732 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	f003 0303 	and.w	r3, r3, #3
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d104      	bne.n	800d6fc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800d6fa:	e016      	b.n	800d72a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3304      	adds	r3, #4
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	f003 0303 	and.w	r3, r3, #3
 800d706:	2b02      	cmp	r3, #2
 800d708:	d104      	bne.n	800d714 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	2202      	movs	r2, #2
 800d70e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800d712:	e00a      	b.n	800d72a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	3304      	adds	r3, #4
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	f003 0303 	and.w	r3, r3, #3
 800d71e:	2b03      	cmp	r3, #3
 800d720:	d103      	bne.n	800d72a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2200      	movs	r2, #0
 800d72e:	60da      	str	r2, [r3, #12]

  return 0;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d73a:	b480      	push	{r7}
 800d73c:	b087      	sub	sp, #28
 800d73e:	af00      	add	r7, sp, #0
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	460b      	mov	r3, r1
 800d744:	607a      	str	r2, [r7, #4]
 800d746:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	32b0      	adds	r2, #176	@ 0xb0
 800d752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d756:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d102      	bne.n	800d764 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800d75e:	f04f 33ff 	mov.w	r3, #4294967295
 800d762:	e011      	b.n	800d788 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3304      	adds	r3, #4
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d104      	bne.n	800d778 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800d776:	e003      	b.n	800d780 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	2200      	movs	r2, #0
 800d784:	60da      	str	r2, [r3, #12]

  return 0;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	371c      	adds	r7, #28
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	460b      	mov	r3, r1
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	32b0      	adds	r2, #176	@ 0xb0
 800d7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d102      	bne.n	800d7be <SCSI_Read10+0x2a>
  {
    return -1;
 800d7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7bc:	e090      	b.n	800d8e0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	7a1b      	ldrb	r3, [r3, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f040 8082 	bne.w	800d8cc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800d7ce:	b25b      	sxtb	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	db0a      	blt.n	800d7ea <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800d7da:	2320      	movs	r3, #32
 800d7dc:	2205      	movs	r2, #5
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f7ff ff0b 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800d7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7e8:	e07a      	b.n	800d8e0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d108      	bne.n	800d806 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d7f4:	7af9      	ldrb	r1, [r7, #11]
 800d7f6:	233a      	movs	r3, #58	@ 0x3a
 800d7f8:	2202      	movs	r2, #2
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f7ff fefd 	bl	800d5fa <SCSI_SenseCode>

      return -1;
 800d800:	f04f 33ff 	mov.w	r3, #4294967295
 800d804:	e06c      	b.n	800d8e0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	33b0      	adds	r3, #176	@ 0xb0
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4413      	add	r3, r2
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	7afa      	ldrb	r2, [r7, #11]
 800d81a:	4610      	mov	r0, r2
 800d81c:	4798      	blx	r3
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d008      	beq.n	800d836 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d824:	7af9      	ldrb	r1, [r7, #11]
 800d826:	233a      	movs	r3, #58	@ 0x3a
 800d828:	2202      	movs	r2, #2
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f7ff fee5 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800d830:	f04f 33ff 	mov.w	r3, #4294967295
 800d834:	e054      	b.n	800d8e0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	3302      	adds	r3, #2
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	3303      	adds	r3, #3
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d846:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	3304      	adds	r3, #4
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800d850:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	3205      	adds	r2, #5
 800d856:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800d858:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	3307      	adds	r3, #7
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	021b      	lsls	r3, r3, #8
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	3208      	adds	r2, #8
 800d86c:	7812      	ldrb	r2, [r2, #0]
 800d86e:	431a      	orrs	r2, r3
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800d882:	7af9      	ldrb	r1, [r7, #11]
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 fadc 	bl	800de42 <SCSI_CheckAddressRange>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	da02      	bge.n	800d896 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800d890:	f04f 33ff 	mov.w	r3, #4294967295
 800d894:	e024      	b.n	800d8e0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800d8a2:	6979      	ldr	r1, [r7, #20]
 800d8a4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800d8a8:	fb01 f303 	mul.w	r3, r1, r3
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d00a      	beq.n	800d8c6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800d8b6:	2320      	movs	r3, #32
 800d8b8:	2205      	movs	r2, #5
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f7ff fe9d 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800d8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c4:	e00c      	b.n	800d8e0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8d2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800d8d4:	7afb      	ldrb	r3, [r7, #11]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f000 fadf 	bl	800de9c <SCSI_ProcessRead>
 800d8de:	4603      	mov	r3, r0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3718      	adds	r7, #24
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	32b0      	adds	r2, #176	@ 0xb0
 800d900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d904:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d102      	bne.n	800d912 <SCSI_Read12+0x2a>
  {
    return -1;
 800d90c:	f04f 33ff 	mov.w	r3, #4294967295
 800d910:	e09a      	b.n	800da48 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	7a1b      	ldrb	r3, [r3, #8]
 800d916:	2b00      	cmp	r3, #0
 800d918:	f040 808c 	bne.w	800da34 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800d922:	b25b      	sxtb	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	db0a      	blt.n	800d93e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800d92e:	2320      	movs	r3, #32
 800d930:	2205      	movs	r2, #5
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f7ff fe61 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800d938:	f04f 33ff 	mov.w	r3, #4294967295
 800d93c:	e084      	b.n	800da48 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800d944:	2b02      	cmp	r3, #2
 800d946:	d108      	bne.n	800d95a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d948:	7af9      	ldrb	r1, [r7, #11]
 800d94a:	233a      	movs	r3, #58	@ 0x3a
 800d94c:	2202      	movs	r2, #2
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f7ff fe53 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800d954:	f04f 33ff 	mov.w	r3, #4294967295
 800d958:	e076      	b.n	800da48 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	33b0      	adds	r3, #176	@ 0xb0
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4413      	add	r3, r2
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	7afa      	ldrb	r2, [r7, #11]
 800d96e:	4610      	mov	r0, r2
 800d970:	4798      	blx	r3
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d008      	beq.n	800d98a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d978:	7af9      	ldrb	r1, [r7, #11]
 800d97a:	233a      	movs	r3, #58	@ 0x3a
 800d97c:	2202      	movs	r2, #2
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff fe3b 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800d984:	f04f 33ff 	mov.w	r3, #4294967295
 800d988:	e05e      	b.n	800da48 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3302      	adds	r3, #2
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3303      	adds	r3, #3
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d99a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800d9a4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	3205      	adds	r2, #5
 800d9aa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800d9ac:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	3306      	adds	r3, #6
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3307      	adds	r3, #7
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d9c4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800d9ce:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	3209      	adds	r2, #9
 800d9d4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800d9d6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800d9ea:	7af9      	ldrb	r1, [r7, #11]
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f000 fa28 	bl	800de42 <SCSI_CheckAddressRange>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	da02      	bge.n	800d9fe <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800d9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9fc:	e024      	b.n	800da48 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800da0a:	6979      	ldr	r1, [r7, #20]
 800da0c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800da10:	fb01 f303 	mul.w	r3, r1, r3
 800da14:	429a      	cmp	r2, r3
 800da16:	d00a      	beq.n	800da2e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800da1e:	2320      	movs	r3, #32
 800da20:	2205      	movs	r2, #5
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7ff fde9 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800da28:	f04f 33ff 	mov.w	r3, #4294967295
 800da2c:	e00c      	b.n	800da48 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2202      	movs	r2, #2
 800da32:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da3a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800da3c:	7afb      	ldrb	r3, [r7, #11]
 800da3e:	4619      	mov	r1, r3
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 fa2b 	bl	800de9c <SCSI_ProcessRead>
 800da46:	4603      	mov	r3, r0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	460b      	mov	r3, r1
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	32b0      	adds	r2, #176	@ 0xb0
 800da68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da6c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <SCSI_Write10+0x2a>
  {
    return -1;
 800da74:	f04f 33ff 	mov.w	r3, #4294967295
 800da78:	e0ba      	b.n	800dbf0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	7a1b      	ldrb	r3, [r3, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f040 80b0 	bne.w	800dbe4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10a      	bne.n	800daa4 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800da94:	2320      	movs	r3, #32
 800da96:	2205      	movs	r2, #5
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f7ff fdae 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800da9e:	f04f 33ff 	mov.w	r3, #4294967295
 800daa2:	e0a5      	b.n	800dbf0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800daaa:	b25b      	sxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	da0a      	bge.n	800dac6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dab6:	2320      	movs	r3, #32
 800dab8:	2205      	movs	r2, #5
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff fd9d 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800dac0:	f04f 33ff 	mov.w	r3, #4294967295
 800dac4:	e094      	b.n	800dbf0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	33b0      	adds	r3, #176	@ 0xb0
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	4413      	add	r3, r2
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	7afa      	ldrb	r2, [r7, #11]
 800dada:	4610      	mov	r0, r2
 800dadc:	4798      	blx	r3
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d008      	beq.n	800daf6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dae4:	7af9      	ldrb	r1, [r7, #11]
 800dae6:	233a      	movs	r3, #58	@ 0x3a
 800dae8:	2202      	movs	r2, #2
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f7ff fd85 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800daf0:	f04f 33ff 	mov.w	r3, #4294967295
 800daf4:	e07c      	b.n	800dbf0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	33b0      	adds	r3, #176	@ 0xb0
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	7afa      	ldrb	r2, [r7, #11]
 800db0a:	4610      	mov	r0, r2
 800db0c:	4798      	blx	r3
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d008      	beq.n	800db26 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800db14:	7af9      	ldrb	r1, [r7, #11]
 800db16:	2327      	movs	r3, #39	@ 0x27
 800db18:	2202      	movs	r2, #2
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7ff fd6d 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800db20:	f04f 33ff 	mov.w	r3, #4294967295
 800db24:	e064      	b.n	800dbf0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	3302      	adds	r3, #2
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	3303      	adds	r3, #3
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800db36:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3304      	adds	r3, #4
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800db40:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	3205      	adds	r2, #5
 800db46:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800db48:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	3307      	adds	r3, #7
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	3208      	adds	r2, #8
 800db5c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800db5e:	431a      	orrs	r2, r3
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800db72:	7af9      	ldrb	r1, [r7, #11]
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 f964 	bl	800de42 <SCSI_CheckAddressRange>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	da02      	bge.n	800db86 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800db80:	f04f 33ff 	mov.w	r3, #4294967295
 800db84:	e034      	b.n	800dbf0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800db92:	fb02 f303 	mul.w	r3, r2, r3
 800db96:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d00a      	beq.n	800dbba <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dbaa:	2320      	movs	r3, #32
 800dbac:	2205      	movs	r2, #5
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f7ff fd23 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800dbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb8:	e01a      	b.n	800dbf0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbc0:	bf28      	it	cs
 800dbc2:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800dbc6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800dbce:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf8 <SCSI_Write10+0x1a8>)
 800dbd0:	7819      	ldrb	r1, [r3, #0]
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	f103 0210 	add.w	r2, r3, #16
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f002 fa37 	bl	801004e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e005      	b.n	800dbf0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800dbe4:	7afb      	ldrb	r3, [r7, #11]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f9dd 	bl	800dfa8 <SCSI_ProcessWrite>
 800dbee:	4603      	mov	r3, r0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	24000073 	.word	0x24000073

0800dbfc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	460b      	mov	r3, r1
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	32b0      	adds	r2, #176	@ 0xb0
 800dc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc18:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d102      	bne.n	800dc26 <SCSI_Write12+0x2a>
  {
    return -1;
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	e0ca      	b.n	800ddbc <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	7a1b      	ldrb	r3, [r3, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f040 80c0 	bne.w	800ddb0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10a      	bne.n	800dc50 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dc40:	2320      	movs	r3, #32
 800dc42:	2205      	movs	r2, #5
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f7ff fcd8 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800dc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4e:	e0b5      	b.n	800ddbc <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800dc56:	b25b      	sxtb	r3, r3
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	da0a      	bge.n	800dc72 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dc62:	2320      	movs	r3, #32
 800dc64:	2205      	movs	r2, #5
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff fcc7 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800dc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc70:	e0a4      	b.n	800ddbc <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	33b0      	adds	r3, #176	@ 0xb0
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4413      	add	r3, r2
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	7afa      	ldrb	r2, [r7, #11]
 800dc86:	4610      	mov	r0, r2
 800dc88:	4798      	blx	r3
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00b      	beq.n	800dca8 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dc90:	7af9      	ldrb	r1, [r7, #11]
 800dc92:	233a      	movs	r3, #58	@ 0x3a
 800dc94:	2202      	movs	r2, #2
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7ff fcaf 	bl	800d5fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	2205      	movs	r2, #5
 800dca0:	721a      	strb	r2, [r3, #8]
      return -1;
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	e089      	b.n	800ddbc <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	33b0      	adds	r3, #176	@ 0xb0
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	7afa      	ldrb	r2, [r7, #11]
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00b      	beq.n	800dcde <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800dcc6:	7af9      	ldrb	r1, [r7, #11]
 800dcc8:	2327      	movs	r3, #39	@ 0x27
 800dcca:	2202      	movs	r2, #2
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f7ff fc94 	bl	800d5fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	2205      	movs	r2, #5
 800dcd6:	721a      	strb	r2, [r3, #8]
      return -1;
 800dcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcdc:	e06e      	b.n	800ddbc <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3302      	adds	r3, #2
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	3303      	adds	r3, #3
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dcee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800dcf8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	3205      	adds	r2, #5
 800dcfe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800dd00:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	3306      	adds	r3, #6
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3307      	adds	r3, #7
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dd18:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3308      	adds	r3, #8
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800dd22:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	3209      	adds	r2, #9
 800dd28:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800dd2a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800dd3e:	7af9      	ldrb	r1, [r7, #11]
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f000 f87e 	bl	800de42 <SCSI_CheckAddressRange>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	da02      	bge.n	800dd52 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800dd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd50:	e034      	b.n	800ddbc <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800dd5e:	fb02 f303 	mul.w	r3, r2, r3
 800dd62:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d00a      	beq.n	800dd86 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dd76:	2320      	movs	r3, #32
 800dd78:	2205      	movs	r2, #5
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f7ff fc3d 	bl	800d5fa <SCSI_SenseCode>
      return -1;
 800dd80:	f04f 33ff 	mov.w	r3, #4294967295
 800dd84:	e01a      	b.n	800ddbc <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd8c:	bf28      	it	cs
 800dd8e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800dd92:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2201      	movs	r2, #1
 800dd98:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800dd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc4 <SCSI_Write12+0x1c8>)
 800dd9c:	7819      	ldrb	r1, [r3, #0]
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	f103 0210 	add.w	r2, r3, #16
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f002 f951 	bl	801004e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	e005      	b.n	800ddbc <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800ddb0:	7afb      	ldrb	r3, [r7, #11]
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f000 f8f7 	bl	800dfa8 <SCSI_ProcessWrite>
 800ddba:	4603      	mov	r3, r0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	24000073 	.word	0x24000073

0800ddc8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	607a      	str	r2, [r7, #4]
 800ddd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	32b0      	adds	r2, #176	@ 0xb0
 800dde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d102      	bne.n	800ddf2 <SCSI_Verify10+0x2a>
  {
    return -1;
 800ddec:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf0:	e023      	b.n	800de3a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	f003 0302 	and.w	r3, r3, #2
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d008      	beq.n	800de12 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800de00:	7af9      	ldrb	r1, [r7, #11]
 800de02:	2324      	movs	r3, #36	@ 0x24
 800de04:	2205      	movs	r2, #5
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7ff fbf7 	bl	800d5fa <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800de0c:	f04f 33ff 	mov.w	r3, #4294967295
 800de10:	e013      	b.n	800de3a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800de1e:	7af9      	ldrb	r1, [r7, #11]
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f000 f80e 	bl	800de42 <SCSI_CheckAddressRange>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	da02      	bge.n	800de32 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800de2c:	f04f 33ff 	mov.w	r3, #4294967295
 800de30:	e003      	b.n	800de3a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2200      	movs	r2, #0
 800de36:	60da      	str	r2, [r3, #12]

  return 0;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b086      	sub	sp, #24
 800de46:	af00      	add	r7, sp, #0
 800de48:	60f8      	str	r0, [r7, #12]
 800de4a:	607a      	str	r2, [r7, #4]
 800de4c:	603b      	str	r3, [r7, #0]
 800de4e:	460b      	mov	r3, r1
 800de50:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	32b0      	adds	r2, #176	@ 0xb0
 800de5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de60:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d102      	bne.n	800de6e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800de68:	f04f 33ff 	mov.w	r3, #4294967295
 800de6c:	e011      	b.n	800de92 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	441a      	add	r2, r3
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d908      	bls.n	800de90 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800de7e:	7af9      	ldrb	r1, [r7, #11]
 800de80:	2321      	movs	r3, #33	@ 0x21
 800de82:	2205      	movs	r2, #5
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f7ff fbb8 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800de8a:	f04f 33ff 	mov.w	r3, #4294967295
 800de8e:	e000      	b.n	800de92 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
	...

0800de9c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800de9c:	b590      	push	{r4, r7, lr}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	32b0      	adds	r2, #176	@ 0xb0
 800deb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d102      	bne.n	800dec4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800debe:	f04f 33ff 	mov.w	r3, #4294967295
 800dec2:	e06a      	b.n	800df9a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800ded0:	fb02 f303 	mul.w	r3, r2, r3
 800ded4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dedc:	bf28      	it	cs
 800dede:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800dee2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	33b0      	adds	r3, #176	@ 0xb0
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	691c      	ldr	r4, [r3, #16]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f103 0110 	add.w	r1, r3, #16
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800df08:	4618      	mov	r0, r3
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800df10:	b29b      	uxth	r3, r3
 800df12:	78f8      	ldrb	r0, [r7, #3]
 800df14:	47a0      	blx	r4
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	da08      	bge.n	800df2e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800df1c:	78f9      	ldrb	r1, [r7, #3]
 800df1e:	2311      	movs	r3, #17
 800df20:	2204      	movs	r2, #4
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7ff fb69 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800df28:	f04f 33ff 	mov.w	r3, #4294967295
 800df2c:	e035      	b.n	800df9a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800df2e:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa4 <SCSI_ProcessRead+0x108>)
 800df30:	7819      	ldrb	r1, [r3, #0]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f103 0210 	add.w	r2, r3, #16
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f002 f866 	bl	801000c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800df4c:	4619      	mov	r1, r3
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	fbb3 f3f1 	udiv	r3, r3, r1
 800df54:	441a      	add	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800df68:	4619      	mov	r1, r3
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	fbb3 f3f1 	udiv	r3, r3, r1
 800df70:	1ad2      	subs	r2, r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	1ad2      	subs	r2, r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d102      	bne.n	800df98 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2203      	movs	r2, #3
 800df96:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd90      	pop	{r4, r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	24000072 	.word	0x24000072

0800dfa8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800dfa8:	b590      	push	{r4, r7, lr}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	32b0      	adds	r2, #176	@ 0xb0
 800dfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d102      	bne.n	800dfd0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800dfca:	f04f 33ff 	mov.w	r3, #4294967295
 800dfce:	e07a      	b.n	800e0c6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800dfdc:	fb02 f303 	mul.w	r3, r2, r3
 800dfe0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfe8:	bf28      	it	cs
 800dfea:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800dfee:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	33b0      	adds	r3, #176	@ 0xb0
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	695c      	ldr	r4, [r3, #20]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f103 0110 	add.w	r1, r3, #16
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e014:	4618      	mov	r0, r3
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	78f8      	ldrb	r0, [r7, #3]
 800e020:	47a0      	blx	r4
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	da08      	bge.n	800e03a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e028:	78f9      	ldrb	r1, [r7, #3]
 800e02a:	2303      	movs	r3, #3
 800e02c:	2204      	movs	r2, #4
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7ff fae3 	bl	800d5fa <SCSI_SenseCode>
    return -1;
 800e034:	f04f 33ff 	mov.w	r3, #4294967295
 800e038:	e045      	b.n	800e0c6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e046:	4619      	mov	r1, r3
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e04e:	441a      	add	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e062:	4619      	mov	r1, r3
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	fbb3 f3f1 	udiv	r3, r3, r1
 800e06a:	1ad2      	subs	r2, r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	1ad2      	subs	r2, r2, r3
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d104      	bne.n	800e096 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e08c:	2100      	movs	r1, #0
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f7fe fce8 	bl	800ca64 <MSC_BOT_SendCSW>
 800e094:	e016      	b.n	800e0c4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800e0a2:	fb02 f303 	mul.w	r3, r2, r3
 800e0a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0aa:	bf28      	it	cs
 800e0ac:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800e0b0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800e0b2:	4b07      	ldr	r3, [pc, #28]	@ (800e0d0 <SCSI_ProcessWrite+0x128>)
 800e0b4:	7819      	ldrb	r1, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f103 0210 	add.w	r2, r3, #16
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f001 ffc5 	bl	801004e <USBD_LL_PrepareReceive>
  }

  return 0;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd90      	pop	{r4, r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	24000073 	.word	0x24000073

0800e0d4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	4613      	mov	r3, r2
 800e0e0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e0e2:	88fb      	ldrh	r3, [r7, #6]
 800e0e4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d102      	bne.n	800e0f2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800e0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f0:	e013      	b.n	800e11a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800e0f2:	8afa      	ldrh	r2, [r7, #22]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e0f8:	e00b      	b.n	800e112 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800e0fa:	8afb      	ldrh	r3, [r7, #22]
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e100:	8afb      	ldrh	r3, [r7, #22]
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	441a      	add	r2, r3
 800e106:	8afb      	ldrh	r3, [r7, #22]
 800e108:	7811      	ldrb	r1, [r2, #0]
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	4413      	add	r3, r2
 800e10e:	460a      	mov	r2, r1
 800e110:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e112:	8afb      	ldrh	r3, [r7, #22]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1f0      	bne.n	800e0fa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	371c      	adds	r7, #28
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b086      	sub	sp, #24
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	4613      	mov	r3, r2
 800e132:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e13a:	2303      	movs	r3, #3
 800e13c:	e01f      	b.n	800e17e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	79fa      	ldrb	r2, [r7, #7]
 800e170:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f001 fdf0 	bl	800fd58 <USBD_LL_Init>
 800e178:	4603      	mov	r3, r0
 800e17a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3718      	adds	r7, #24
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}

0800e186 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e186:	b580      	push	{r7, lr}
 800e188:	b084      	sub	sp, #16
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
 800e18e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e190:	2300      	movs	r3, #0
 800e192:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e19a:	2303      	movs	r3, #3
 800e19c:	e025      	b.n	800e1ea <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	32ae      	adds	r2, #174	@ 0xae
 800e1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00f      	beq.n	800e1da <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	32ae      	adds	r2, #174	@ 0xae
 800e1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ca:	f107 020e 	add.w	r2, r7, #14
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	4798      	blx	r3
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e1e0:	1c5a      	adds	r2, r3, #1
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b082      	sub	sp, #8
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f001 fdfe 	bl	800fdfc <USBD_LL_Start>
 800e200:	4603      	mov	r3, r0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b083      	sub	sp, #12
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e212:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e214:	4618      	mov	r0, r3
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e236:	2b00      	cmp	r3, #0
 800e238:	d009      	beq.n	800e24e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	78fa      	ldrb	r2, [r7, #3]
 800e244:	4611      	mov	r1, r2
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	4798      	blx	r3
 800e24a:	4603      	mov	r3, r0
 800e24c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	78fa      	ldrb	r2, [r7, #3]
 800e272:	4611      	mov	r1, r2
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	4798      	blx	r3
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e27e:	2303      	movs	r3, #3
 800e280:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e282:	7bfb      	ldrb	r3, [r7, #15]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f001 f935 	bl	800f50e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e2c0:	f003 031f 	and.w	r3, r3, #31
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	d01a      	beq.n	800e2fe <USBD_LL_SetupStage+0x72>
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d822      	bhi.n	800e312 <USBD_LL_SetupStage+0x86>
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <USBD_LL_SetupStage+0x4a>
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d00a      	beq.n	800e2ea <USBD_LL_SetupStage+0x5e>
 800e2d4:	e01d      	b.n	800e312 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 fb62 	bl	800e9a8 <USBD_StdDevReq>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e2e8:	e020      	b.n	800e32c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fbca 	bl	800ea8c <USBD_StdItfReq>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800e2fc:	e016      	b.n	800e32c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e304:	4619      	mov	r1, r3
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fc2c 	bl	800eb64 <USBD_StdEPReq>
 800e30c:	4603      	mov	r3, r0
 800e30e:	73fb      	strb	r3, [r7, #15]
      break;
 800e310:	e00c      	b.n	800e32c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e318:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	4619      	mov	r1, r3
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f001 fdea 	bl	800fefa <USBD_LL_StallEP>
 800e326:	4603      	mov	r3, r0
 800e328:	73fb      	strb	r3, [r7, #15]
      break;
 800e32a:	bf00      	nop
  }

  return ret;
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b086      	sub	sp, #24
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	60f8      	str	r0, [r7, #12]
 800e33e:	460b      	mov	r3, r1
 800e340:	607a      	str	r2, [r7, #4]
 800e342:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e348:	7afb      	ldrb	r3, [r7, #11]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d16e      	bne.n	800e42c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e354:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	f040 8098 	bne.w	800e492 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	689a      	ldr	r2, [r3, #8]
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d913      	bls.n	800e396 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	689a      	ldr	r2, [r3, #8]
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	1ad2      	subs	r2, r2, r3
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	68da      	ldr	r2, [r3, #12]
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	4293      	cmp	r3, r2
 800e386:	bf28      	it	cs
 800e388:	4613      	movcs	r3, r2
 800e38a:	461a      	mov	r2, r3
 800e38c:	6879      	ldr	r1, [r7, #4]
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f001 f9a0 	bl	800f6d4 <USBD_CtlContinueRx>
 800e394:	e07d      	b.n	800e492 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e39c:	f003 031f 	and.w	r3, r3, #31
 800e3a0:	2b02      	cmp	r3, #2
 800e3a2:	d014      	beq.n	800e3ce <USBD_LL_DataOutStage+0x98>
 800e3a4:	2b02      	cmp	r3, #2
 800e3a6:	d81d      	bhi.n	800e3e4 <USBD_LL_DataOutStage+0xae>
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <USBD_LL_DataOutStage+0x7c>
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d003      	beq.n	800e3b8 <USBD_LL_DataOutStage+0x82>
 800e3b0:	e018      	b.n	800e3e4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	75bb      	strb	r3, [r7, #22]
            break;
 800e3b6:	e018      	b.n	800e3ea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f000 fa64 	bl	800e890 <USBD_CoreFindIF>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	75bb      	strb	r3, [r7, #22]
            break;
 800e3cc:	e00d      	b.n	800e3ea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f000 fa66 	bl	800e8aa <USBD_CoreFindEP>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	75bb      	strb	r3, [r7, #22]
            break;
 800e3e2:	e002      	b.n	800e3ea <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	75bb      	strb	r3, [r7, #22]
            break;
 800e3e8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e3ea:	7dbb      	ldrb	r3, [r7, #22]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d119      	bne.n	800e424 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b03      	cmp	r3, #3
 800e3fa:	d113      	bne.n	800e424 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e3fc:	7dba      	ldrb	r2, [r7, #22]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	32ae      	adds	r2, #174	@ 0xae
 800e402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e406:	691b      	ldr	r3, [r3, #16]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e40c:	7dba      	ldrb	r2, [r7, #22]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e414:	7dba      	ldrb	r2, [r7, #22]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	32ae      	adds	r2, #174	@ 0xae
 800e41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f001 f966 	bl	800f6f6 <USBD_CtlSendStatus>
 800e42a:	e032      	b.n	800e492 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e42c:	7afb      	ldrb	r3, [r7, #11]
 800e42e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e432:	b2db      	uxtb	r3, r3
 800e434:	4619      	mov	r1, r3
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f000 fa37 	bl	800e8aa <USBD_CoreFindEP>
 800e43c:	4603      	mov	r3, r0
 800e43e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e440:	7dbb      	ldrb	r3, [r7, #22]
 800e442:	2bff      	cmp	r3, #255	@ 0xff
 800e444:	d025      	beq.n	800e492 <USBD_LL_DataOutStage+0x15c>
 800e446:	7dbb      	ldrb	r3, [r7, #22]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d122      	bne.n	800e492 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b03      	cmp	r3, #3
 800e456:	d117      	bne.n	800e488 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e458:	7dba      	ldrb	r2, [r7, #22]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	32ae      	adds	r2, #174	@ 0xae
 800e45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00f      	beq.n	800e488 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e468:	7dba      	ldrb	r2, [r7, #22]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e470:	7dba      	ldrb	r2, [r7, #22]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	32ae      	adds	r2, #174	@ 0xae
 800e476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e47a:	699b      	ldr	r3, [r3, #24]
 800e47c:	7afa      	ldrb	r2, [r7, #11]
 800e47e:	4611      	mov	r1, r2
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	4798      	blx	r3
 800e484:	4603      	mov	r3, r0
 800e486:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e488:	7dfb      	ldrb	r3, [r7, #23]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	e000      	b.n	800e494 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3718      	adds	r7, #24
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b086      	sub	sp, #24
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	607a      	str	r2, [r7, #4]
 800e4a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e4aa:	7afb      	ldrb	r3, [r7, #11]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d16f      	bne.n	800e590 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	3314      	adds	r3, #20
 800e4b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d15a      	bne.n	800e576 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	689a      	ldr	r2, [r3, #8]
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d914      	bls.n	800e4f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	689a      	ldr	r2, [r3, #8]
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	1ad2      	subs	r2, r2, r3
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	6879      	ldr	r1, [r7, #4]
 800e4e2:	68f8      	ldr	r0, [r7, #12]
 800e4e4:	f001 f8e5 	bl	800f6b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f001 fdad 	bl	801004e <USBD_LL_PrepareReceive>
 800e4f4:	e03f      	b.n	800e576 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	68da      	ldr	r2, [r3, #12]
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d11c      	bne.n	800e53c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	685a      	ldr	r2, [r3, #4]
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d316      	bcc.n	800e53c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e518:	429a      	cmp	r2, r3
 800e51a:	d20f      	bcs.n	800e53c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e51c:	2200      	movs	r2, #0
 800e51e:	2100      	movs	r1, #0
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f001 f8c6 	bl	800f6b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e52e:	2300      	movs	r3, #0
 800e530:	2200      	movs	r2, #0
 800e532:	2100      	movs	r1, #0
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f001 fd8a 	bl	801004e <USBD_LL_PrepareReceive>
 800e53a:	e01c      	b.n	800e576 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e542:	b2db      	uxtb	r3, r3
 800e544:	2b03      	cmp	r3, #3
 800e546:	d10f      	bne.n	800e568 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d009      	beq.n	800e568 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e568:	2180      	movs	r1, #128	@ 0x80
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f001 fcc5 	bl	800fefa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f001 f8d3 	bl	800f71c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d03a      	beq.n	800e5f6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7ff fe42 	bl	800e20a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e58e:	e032      	b.n	800e5f6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e590:	7afb      	ldrb	r3, [r7, #11]
 800e592:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e596:	b2db      	uxtb	r3, r3
 800e598:	4619      	mov	r1, r3
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f000 f985 	bl	800e8aa <USBD_CoreFindEP>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5a4:	7dfb      	ldrb	r3, [r7, #23]
 800e5a6:	2bff      	cmp	r3, #255	@ 0xff
 800e5a8:	d025      	beq.n	800e5f6 <USBD_LL_DataInStage+0x15a>
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d122      	bne.n	800e5f6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	d11c      	bne.n	800e5f6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e5bc:	7dfa      	ldrb	r2, [r7, #23]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	32ae      	adds	r2, #174	@ 0xae
 800e5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c6:	695b      	ldr	r3, [r3, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d014      	beq.n	800e5f6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e5cc:	7dfa      	ldrb	r2, [r7, #23]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e5d4:	7dfa      	ldrb	r2, [r7, #23]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	32ae      	adds	r2, #174	@ 0xae
 800e5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5de:	695b      	ldr	r3, [r3, #20]
 800e5e0:	7afa      	ldrb	r2, [r7, #11]
 800e5e2:	4611      	mov	r1, r2
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	4798      	blx	r3
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e5ec:	7dbb      	ldrb	r3, [r7, #22]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d001      	beq.n	800e5f6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e5f2:	7dbb      	ldrb	r3, [r7, #22]
 800e5f4:	e000      	b.n	800e5f8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3718      	adds	r7, #24
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e608:	2300      	movs	r3, #0
 800e60a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2201      	movs	r2, #1
 800e610:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2200      	movs	r2, #0
 800e626:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d014      	beq.n	800e666 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00e      	beq.n	800e666 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	6852      	ldr	r2, [r2, #4]
 800e654:	b2d2      	uxtb	r2, r2
 800e656:	4611      	mov	r1, r2
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	4798      	blx	r3
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e666:	2340      	movs	r3, #64	@ 0x40
 800e668:	2200      	movs	r2, #0
 800e66a:	2100      	movs	r1, #0
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f001 fbe0 	bl	800fe32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2240      	movs	r2, #64	@ 0x40
 800e67e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e682:	2340      	movs	r3, #64	@ 0x40
 800e684:	2200      	movs	r2, #0
 800e686:	2180      	movs	r1, #128	@ 0x80
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f001 fbd2 	bl	800fe32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2240      	movs	r2, #64	@ 0x40
 800e698:	621a      	str	r2, [r3, #32]

  return ret;
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	78fa      	ldrb	r2, [r7, #3]
 800e6b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	2b04      	cmp	r3, #4
 800e6d6:	d006      	beq.n	800e6e6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2204      	movs	r2, #4
 800e6ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b04      	cmp	r3, #4
 800e70e:	d106      	bne.n	800e71e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e716:	b2da      	uxtb	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d110      	bne.n	800e762 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00b      	beq.n	800e762 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e750:	69db      	ldr	r3, [r3, #28]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d005      	beq.n	800e762 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e75c:	69db      	ldr	r3, [r3, #28]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	460b      	mov	r3, r1
 800e776:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	32ae      	adds	r2, #174	@ 0xae
 800e782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e78a:	2303      	movs	r3, #3
 800e78c:	e01c      	b.n	800e7c8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b03      	cmp	r3, #3
 800e798:	d115      	bne.n	800e7c6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	32ae      	adds	r2, #174	@ 0xae
 800e7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00b      	beq.n	800e7c6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	32ae      	adds	r2, #174	@ 0xae
 800e7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7bc:	6a1b      	ldr	r3, [r3, #32]
 800e7be:	78fa      	ldrb	r2, [r7, #3]
 800e7c0:	4611      	mov	r1, r2
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	32ae      	adds	r2, #174	@ 0xae
 800e7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d101      	bne.n	800e7f2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	e01c      	b.n	800e82c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d115      	bne.n	800e82a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	32ae      	adds	r2, #174	@ 0xae
 800e808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00b      	beq.n	800e82a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	32ae      	adds	r2, #174	@ 0xae
 800e81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	4611      	mov	r1, r2
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	370c      	adds	r7, #12
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr

0800e84a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2201      	movs	r2, #1
 800e85a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00e      	beq.n	800e886 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	6852      	ldr	r2, [r2, #4]
 800e874:	b2d2      	uxtb	r2, r2
 800e876:	4611      	mov	r1, r2
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	4798      	blx	r3
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e882:	2303      	movs	r3, #3
 800e884:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e886:	7bfb      	ldrb	r3, [r7, #15]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3710      	adds	r7, #16
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e89c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e8b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	885b      	ldrh	r3, [r3, #2]
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	7812      	ldrb	r2, [r2, #0]
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d91f      	bls.n	800e92a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e8f0:	e013      	b.n	800e91a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e8f2:	f107 030a 	add.w	r3, r7, #10
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6978      	ldr	r0, [r7, #20]
 800e8fa:	f000 f81b 	bl	800e934 <USBD_GetNextDesc>
 800e8fe:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	785b      	ldrb	r3, [r3, #1]
 800e904:	2b05      	cmp	r3, #5
 800e906:	d108      	bne.n	800e91a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	789b      	ldrb	r3, [r3, #2]
 800e910:	78fa      	ldrb	r2, [r7, #3]
 800e912:	429a      	cmp	r2, r3
 800e914:	d008      	beq.n	800e928 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	885b      	ldrh	r3, [r3, #2]
 800e91e:	b29a      	uxth	r2, r3
 800e920:	897b      	ldrh	r3, [r7, #10]
 800e922:	429a      	cmp	r2, r3
 800e924:	d8e5      	bhi.n	800e8f2 <USBD_GetEpDesc+0x2e>
 800e926:	e000      	b.n	800e92a <USBD_GetEpDesc+0x66>
          break;
 800e928:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e92a:	693b      	ldr	r3, [r7, #16]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	7812      	ldrb	r2, [r2, #0]
 800e94a:	4413      	add	r3, r2
 800e94c:	b29a      	uxth	r2, r3
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	461a      	mov	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4413      	add	r3, r2
 800e95c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e95e:	68fb      	ldr	r3, [r7, #12]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3714      	adds	r7, #20
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b087      	sub	sp, #28
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	3301      	adds	r3, #1
 800e982:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e98a:	8a3b      	ldrh	r3, [r7, #16]
 800e98c:	021b      	lsls	r3, r3, #8
 800e98e:	b21a      	sxth	r2, r3
 800e990:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e994:	4313      	orrs	r3, r2
 800e996:	b21b      	sxth	r3, r3
 800e998:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e99a:	89fb      	ldrh	r3, [r7, #14]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	371c      	adds	r7, #28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e9be:	2b40      	cmp	r3, #64	@ 0x40
 800e9c0:	d005      	beq.n	800e9ce <USBD_StdDevReq+0x26>
 800e9c2:	2b40      	cmp	r3, #64	@ 0x40
 800e9c4:	d857      	bhi.n	800ea76 <USBD_StdDevReq+0xce>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00f      	beq.n	800e9ea <USBD_StdDevReq+0x42>
 800e9ca:	2b20      	cmp	r3, #32
 800e9cc:	d153      	bne.n	800ea76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	32ae      	adds	r2, #174	@ 0xae
 800e9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	6839      	ldr	r1, [r7, #0]
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	4798      	blx	r3
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e8:	e04a      	b.n	800ea80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	785b      	ldrb	r3, [r3, #1]
 800e9ee:	2b09      	cmp	r3, #9
 800e9f0:	d83b      	bhi.n	800ea6a <USBD_StdDevReq+0xc2>
 800e9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9f8 <USBD_StdDevReq+0x50>)
 800e9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f8:	0800ea4d 	.word	0x0800ea4d
 800e9fc:	0800ea61 	.word	0x0800ea61
 800ea00:	0800ea6b 	.word	0x0800ea6b
 800ea04:	0800ea57 	.word	0x0800ea57
 800ea08:	0800ea6b 	.word	0x0800ea6b
 800ea0c:	0800ea2b 	.word	0x0800ea2b
 800ea10:	0800ea21 	.word	0x0800ea21
 800ea14:	0800ea6b 	.word	0x0800ea6b
 800ea18:	0800ea43 	.word	0x0800ea43
 800ea1c:	0800ea35 	.word	0x0800ea35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fa3c 	bl	800eea0 <USBD_GetDescriptor>
          break;
 800ea28:	e024      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fbcb 	bl	800f1c8 <USBD_SetAddress>
          break;
 800ea32:	e01f      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea34:	6839      	ldr	r1, [r7, #0]
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 fc0a 	bl	800f250 <USBD_SetConfig>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]
          break;
 800ea40:	e018      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fcad 	bl	800f3a4 <USBD_GetConfig>
          break;
 800ea4a:	e013      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 fcde 	bl	800f410 <USBD_GetStatus>
          break;
 800ea54:	e00e      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fd0d 	bl	800f478 <USBD_SetFeature>
          break;
 800ea5e:	e009      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ea60:	6839      	ldr	r1, [r7, #0]
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fd31 	bl	800f4ca <USBD_ClrFeature>
          break;
 800ea68:	e004      	b.n	800ea74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 fd88 	bl	800f582 <USBD_CtlError>
          break;
 800ea72:	bf00      	nop
      }
      break;
 800ea74:	e004      	b.n	800ea80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ea76:	6839      	ldr	r1, [r7, #0]
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 fd82 	bl	800f582 <USBD_CtlError>
      break;
 800ea7e:	bf00      	nop
  }

  return ret;
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop

0800ea8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea96:	2300      	movs	r3, #0
 800ea98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eaa2:	2b40      	cmp	r3, #64	@ 0x40
 800eaa4:	d005      	beq.n	800eab2 <USBD_StdItfReq+0x26>
 800eaa6:	2b40      	cmp	r3, #64	@ 0x40
 800eaa8:	d852      	bhi.n	800eb50 <USBD_StdItfReq+0xc4>
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d001      	beq.n	800eab2 <USBD_StdItfReq+0x26>
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d14e      	bne.n	800eb50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	3b01      	subs	r3, #1
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d840      	bhi.n	800eb42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	889b      	ldrh	r3, [r3, #4]
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d836      	bhi.n	800eb38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	889b      	ldrh	r3, [r3, #4]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	4619      	mov	r1, r3
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7ff fedc 	bl	800e890 <USBD_CoreFindIF>
 800ead8:	4603      	mov	r3, r0
 800eada:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eadc:	7bbb      	ldrb	r3, [r7, #14]
 800eade:	2bff      	cmp	r3, #255	@ 0xff
 800eae0:	d01d      	beq.n	800eb1e <USBD_StdItfReq+0x92>
 800eae2:	7bbb      	ldrb	r3, [r7, #14]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d11a      	bne.n	800eb1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800eae8:	7bba      	ldrb	r2, [r7, #14]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	32ae      	adds	r2, #174	@ 0xae
 800eaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00f      	beq.n	800eb18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800eaf8:	7bba      	ldrb	r2, [r7, #14]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eb00:	7bba      	ldrb	r2, [r7, #14]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	32ae      	adds	r2, #174	@ 0xae
 800eb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	6839      	ldr	r1, [r7, #0]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	4798      	blx	r3
 800eb12:	4603      	mov	r3, r0
 800eb14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb16:	e004      	b.n	800eb22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb1c:	e001      	b.n	800eb22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	88db      	ldrh	r3, [r3, #6]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d110      	bne.n	800eb4c <USBD_StdItfReq+0xc0>
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10d      	bne.n	800eb4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fde0 	bl	800f6f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eb36:	e009      	b.n	800eb4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800eb38:	6839      	ldr	r1, [r7, #0]
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 fd21 	bl	800f582 <USBD_CtlError>
          break;
 800eb40:	e004      	b.n	800eb4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800eb42:	6839      	ldr	r1, [r7, #0]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fd1c 	bl	800f582 <USBD_CtlError>
          break;
 800eb4a:	e000      	b.n	800eb4e <USBD_StdItfReq+0xc2>
          break;
 800eb4c:	bf00      	nop
      }
      break;
 800eb4e:	e004      	b.n	800eb5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fd15 	bl	800f582 <USBD_CtlError>
      break;
 800eb58:	bf00      	nop
  }

  return ret;
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	889b      	ldrh	r3, [r3, #4]
 800eb76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb80:	2b40      	cmp	r3, #64	@ 0x40
 800eb82:	d007      	beq.n	800eb94 <USBD_StdEPReq+0x30>
 800eb84:	2b40      	cmp	r3, #64	@ 0x40
 800eb86:	f200 817f 	bhi.w	800ee88 <USBD_StdEPReq+0x324>
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d02a      	beq.n	800ebe4 <USBD_StdEPReq+0x80>
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	f040 817a 	bne.w	800ee88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800eb94:	7bbb      	ldrb	r3, [r7, #14]
 800eb96:	4619      	mov	r1, r3
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7ff fe86 	bl	800e8aa <USBD_CoreFindEP>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eba2:	7b7b      	ldrb	r3, [r7, #13]
 800eba4:	2bff      	cmp	r3, #255	@ 0xff
 800eba6:	f000 8174 	beq.w	800ee92 <USBD_StdEPReq+0x32e>
 800ebaa:	7b7b      	ldrb	r3, [r7, #13]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 8170 	bne.w	800ee92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ebb2:	7b7a      	ldrb	r2, [r7, #13]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ebba:	7b7a      	ldrb	r2, [r7, #13]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	32ae      	adds	r2, #174	@ 0xae
 800ebc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f000 8163 	beq.w	800ee92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ebcc:	7b7a      	ldrb	r2, [r7, #13]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	32ae      	adds	r2, #174	@ 0xae
 800ebd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	4798      	blx	r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ebe2:	e156      	b.n	800ee92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	2b03      	cmp	r3, #3
 800ebea:	d008      	beq.n	800ebfe <USBD_StdEPReq+0x9a>
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	f300 8145 	bgt.w	800ee7c <USBD_StdEPReq+0x318>
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 809b 	beq.w	800ed2e <USBD_StdEPReq+0x1ca>
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d03c      	beq.n	800ec76 <USBD_StdEPReq+0x112>
 800ebfc:	e13e      	b.n	800ee7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d002      	beq.n	800ec10 <USBD_StdEPReq+0xac>
 800ec0a:	2b03      	cmp	r3, #3
 800ec0c:	d016      	beq.n	800ec3c <USBD_StdEPReq+0xd8>
 800ec0e:	e02c      	b.n	800ec6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec10:	7bbb      	ldrb	r3, [r7, #14]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00d      	beq.n	800ec32 <USBD_StdEPReq+0xce>
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	2b80      	cmp	r3, #128	@ 0x80
 800ec1a:	d00a      	beq.n	800ec32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec1c:	7bbb      	ldrb	r3, [r7, #14]
 800ec1e:	4619      	mov	r1, r3
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f001 f96a 	bl	800fefa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec26:	2180      	movs	r1, #128	@ 0x80
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f001 f966 	bl	800fefa <USBD_LL_StallEP>
 800ec2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec30:	e020      	b.n	800ec74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ec32:	6839      	ldr	r1, [r7, #0]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fca4 	bl	800f582 <USBD_CtlError>
              break;
 800ec3a:	e01b      	b.n	800ec74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	885b      	ldrh	r3, [r3, #2]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10e      	bne.n	800ec62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec44:	7bbb      	ldrb	r3, [r7, #14]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00b      	beq.n	800ec62 <USBD_StdEPReq+0xfe>
 800ec4a:	7bbb      	ldrb	r3, [r7, #14]
 800ec4c:	2b80      	cmp	r3, #128	@ 0x80
 800ec4e:	d008      	beq.n	800ec62 <USBD_StdEPReq+0xfe>
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	88db      	ldrh	r3, [r3, #6]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d104      	bne.n	800ec62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f001 f94c 	bl	800fefa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fd47 	bl	800f6f6 <USBD_CtlSendStatus>

              break;
 800ec68:	e004      	b.n	800ec74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ec6a:	6839      	ldr	r1, [r7, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fc88 	bl	800f582 <USBD_CtlError>
              break;
 800ec72:	bf00      	nop
          }
          break;
 800ec74:	e107      	b.n	800ee86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	d002      	beq.n	800ec88 <USBD_StdEPReq+0x124>
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d016      	beq.n	800ecb4 <USBD_StdEPReq+0x150>
 800ec86:	e04b      	b.n	800ed20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec88:	7bbb      	ldrb	r3, [r7, #14]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00d      	beq.n	800ecaa <USBD_StdEPReq+0x146>
 800ec8e:	7bbb      	ldrb	r3, [r7, #14]
 800ec90:	2b80      	cmp	r3, #128	@ 0x80
 800ec92:	d00a      	beq.n	800ecaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec94:	7bbb      	ldrb	r3, [r7, #14]
 800ec96:	4619      	mov	r1, r3
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f001 f92e 	bl	800fefa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec9e:	2180      	movs	r1, #128	@ 0x80
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f001 f92a 	bl	800fefa <USBD_LL_StallEP>
 800eca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eca8:	e040      	b.n	800ed2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ecaa:	6839      	ldr	r1, [r7, #0]
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 fc68 	bl	800f582 <USBD_CtlError>
              break;
 800ecb2:	e03b      	b.n	800ed2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	885b      	ldrh	r3, [r3, #2]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d136      	bne.n	800ed2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ecbc:	7bbb      	ldrb	r3, [r7, #14]
 800ecbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d004      	beq.n	800ecd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ecc6:	7bbb      	ldrb	r3, [r7, #14]
 800ecc8:	4619      	mov	r1, r3
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f001 f934 	bl	800ff38 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fd10 	bl	800f6f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ecd6:	7bbb      	ldrb	r3, [r7, #14]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff fde5 	bl	800e8aa <USBD_CoreFindEP>
 800ece0:	4603      	mov	r3, r0
 800ece2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ece4:	7b7b      	ldrb	r3, [r7, #13]
 800ece6:	2bff      	cmp	r3, #255	@ 0xff
 800ece8:	d01f      	beq.n	800ed2a <USBD_StdEPReq+0x1c6>
 800ecea:	7b7b      	ldrb	r3, [r7, #13]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d11c      	bne.n	800ed2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ecf0:	7b7a      	ldrb	r2, [r7, #13]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ecf8:	7b7a      	ldrb	r2, [r7, #13]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	32ae      	adds	r2, #174	@ 0xae
 800ecfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d010      	beq.n	800ed2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ed08:	7b7a      	ldrb	r2, [r7, #13]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	32ae      	adds	r2, #174	@ 0xae
 800ed0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	4798      	blx	r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ed1e:	e004      	b.n	800ed2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 fc2d 	bl	800f582 <USBD_CtlError>
              break;
 800ed28:	e000      	b.n	800ed2c <USBD_StdEPReq+0x1c8>
              break;
 800ed2a:	bf00      	nop
          }
          break;
 800ed2c:	e0ab      	b.n	800ee86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d002      	beq.n	800ed40 <USBD_StdEPReq+0x1dc>
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d032      	beq.n	800eda4 <USBD_StdEPReq+0x240>
 800ed3e:	e097      	b.n	800ee70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed40:	7bbb      	ldrb	r3, [r7, #14]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d007      	beq.n	800ed56 <USBD_StdEPReq+0x1f2>
 800ed46:	7bbb      	ldrb	r3, [r7, #14]
 800ed48:	2b80      	cmp	r3, #128	@ 0x80
 800ed4a:	d004      	beq.n	800ed56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fc17 	bl	800f582 <USBD_CtlError>
                break;
 800ed54:	e091      	b.n	800ee7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	da0b      	bge.n	800ed76 <USBD_StdEPReq+0x212>
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
 800ed60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed64:	4613      	mov	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	4413      	add	r3, r2
 800ed6a:	009b      	lsls	r3, r3, #2
 800ed6c:	3310      	adds	r3, #16
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	4413      	add	r3, r2
 800ed72:	3304      	adds	r3, #4
 800ed74:	e00b      	b.n	800ed8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed76:	7bbb      	ldrb	r3, [r7, #14]
 800ed78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2202      	movs	r2, #2
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fc6d 	bl	800f67c <USBD_CtlSendData>
              break;
 800eda2:	e06a      	b.n	800ee7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eda4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	da11      	bge.n	800edd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800edac:	7bbb      	ldrb	r3, [r7, #14]
 800edae:	f003 020f 	and.w	r2, r3, #15
 800edb2:	6879      	ldr	r1, [r7, #4]
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	3324      	adds	r3, #36	@ 0x24
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d117      	bne.n	800edf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800edc6:	6839      	ldr	r1, [r7, #0]
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 fbda 	bl	800f582 <USBD_CtlError>
                  break;
 800edce:	e054      	b.n	800ee7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800edd0:	7bbb      	ldrb	r3, [r7, #14]
 800edd2:	f003 020f 	and.w	r2, r3, #15
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	4613      	mov	r3, r2
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	4413      	add	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	440b      	add	r3, r1
 800ede2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d104      	bne.n	800edf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800edec:	6839      	ldr	r1, [r7, #0]
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 fbc7 	bl	800f582 <USBD_CtlError>
                  break;
 800edf4:	e041      	b.n	800ee7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	da0b      	bge.n	800ee16 <USBD_StdEPReq+0x2b2>
 800edfe:	7bbb      	ldrb	r3, [r7, #14]
 800ee00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee04:	4613      	mov	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	3310      	adds	r3, #16
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	4413      	add	r3, r2
 800ee12:	3304      	adds	r3, #4
 800ee14:	e00b      	b.n	800ee2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee16:	7bbb      	ldrb	r3, [r7, #14]
 800ee18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ee30:	7bbb      	ldrb	r3, [r7, #14]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <USBD_StdEPReq+0x2d8>
 800ee36:	7bbb      	ldrb	r3, [r7, #14]
 800ee38:	2b80      	cmp	r3, #128	@ 0x80
 800ee3a:	d103      	bne.n	800ee44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	e00e      	b.n	800ee62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee44:	7bbb      	ldrb	r3, [r7, #14]
 800ee46:	4619      	mov	r1, r3
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f001 f894 	bl	800ff76 <USBD_LL_IsStallEP>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d003      	beq.n	800ee5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2201      	movs	r2, #1
 800ee58:	601a      	str	r2, [r3, #0]
 800ee5a:	e002      	b.n	800ee62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2202      	movs	r2, #2
 800ee66:	4619      	mov	r1, r3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fc07 	bl	800f67c <USBD_CtlSendData>
              break;
 800ee6e:	e004      	b.n	800ee7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fb85 	bl	800f582 <USBD_CtlError>
              break;
 800ee78:	bf00      	nop
          }
          break;
 800ee7a:	e004      	b.n	800ee86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fb7f 	bl	800f582 <USBD_CtlError>
          break;
 800ee84:	bf00      	nop
      }
      break;
 800ee86:	e005      	b.n	800ee94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ee88:	6839      	ldr	r1, [r7, #0]
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fb79 	bl	800f582 <USBD_CtlError>
      break;
 800ee90:	e000      	b.n	800ee94 <USBD_StdEPReq+0x330>
      break;
 800ee92:	bf00      	nop
  }

  return ret;
 800ee94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
	...

0800eea0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	885b      	ldrh	r3, [r3, #2]
 800eeba:	0a1b      	lsrs	r3, r3, #8
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	3b01      	subs	r3, #1
 800eec0:	2b0e      	cmp	r3, #14
 800eec2:	f200 8152 	bhi.w	800f16a <USBD_GetDescriptor+0x2ca>
 800eec6:	a201      	add	r2, pc, #4	@ (adr r2, 800eecc <USBD_GetDescriptor+0x2c>)
 800eec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eecc:	0800ef3d 	.word	0x0800ef3d
 800eed0:	0800ef55 	.word	0x0800ef55
 800eed4:	0800ef95 	.word	0x0800ef95
 800eed8:	0800f16b 	.word	0x0800f16b
 800eedc:	0800f16b 	.word	0x0800f16b
 800eee0:	0800f10b 	.word	0x0800f10b
 800eee4:	0800f137 	.word	0x0800f137
 800eee8:	0800f16b 	.word	0x0800f16b
 800eeec:	0800f16b 	.word	0x0800f16b
 800eef0:	0800f16b 	.word	0x0800f16b
 800eef4:	0800f16b 	.word	0x0800f16b
 800eef8:	0800f16b 	.word	0x0800f16b
 800eefc:	0800f16b 	.word	0x0800f16b
 800ef00:	0800f16b 	.word	0x0800f16b
 800ef04:	0800ef09 	.word	0x0800ef09
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00b      	beq.n	800ef2c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef1a:	69db      	ldr	r3, [r3, #28]
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	7c12      	ldrb	r2, [r2, #16]
 800ef20:	f107 0108 	add.w	r1, r7, #8
 800ef24:	4610      	mov	r0, r2
 800ef26:	4798      	blx	r3
 800ef28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef2a:	e126      	b.n	800f17a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ef2c:	6839      	ldr	r1, [r7, #0]
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 fb27 	bl	800f582 <USBD_CtlError>
        err++;
 800ef34:	7afb      	ldrb	r3, [r7, #11]
 800ef36:	3301      	adds	r3, #1
 800ef38:	72fb      	strb	r3, [r7, #11]
      break;
 800ef3a:	e11e      	b.n	800f17a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	7c12      	ldrb	r2, [r2, #16]
 800ef48:	f107 0108 	add.w	r1, r7, #8
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	4798      	blx	r3
 800ef50:	60f8      	str	r0, [r7, #12]
      break;
 800ef52:	e112      	b.n	800f17a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	7c1b      	ldrb	r3, [r3, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10d      	bne.n	800ef78 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef64:	f107 0208 	add.w	r2, r7, #8
 800ef68:	4610      	mov	r0, r2
 800ef6a:	4798      	blx	r3
 800ef6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	3301      	adds	r3, #1
 800ef72:	2202      	movs	r2, #2
 800ef74:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ef76:	e100      	b.n	800f17a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef80:	f107 0208 	add.w	r2, r7, #8
 800ef84:	4610      	mov	r0, r2
 800ef86:	4798      	blx	r3
 800ef88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	2202      	movs	r2, #2
 800ef90:	701a      	strb	r2, [r3, #0]
      break;
 800ef92:	e0f2      	b.n	800f17a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	885b      	ldrh	r3, [r3, #2]
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b05      	cmp	r3, #5
 800ef9c:	f200 80ac 	bhi.w	800f0f8 <USBD_GetDescriptor+0x258>
 800efa0:	a201      	add	r2, pc, #4	@ (adr r2, 800efa8 <USBD_GetDescriptor+0x108>)
 800efa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa6:	bf00      	nop
 800efa8:	0800efc1 	.word	0x0800efc1
 800efac:	0800eff5 	.word	0x0800eff5
 800efb0:	0800f029 	.word	0x0800f029
 800efb4:	0800f05d 	.word	0x0800f05d
 800efb8:	0800f091 	.word	0x0800f091
 800efbc:	0800f0c5 	.word	0x0800f0c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00b      	beq.n	800efe4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	7c12      	ldrb	r2, [r2, #16]
 800efd8:	f107 0108 	add.w	r1, r7, #8
 800efdc:	4610      	mov	r0, r2
 800efde:	4798      	blx	r3
 800efe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efe2:	e091      	b.n	800f108 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 facb 	bl	800f582 <USBD_CtlError>
            err++;
 800efec:	7afb      	ldrb	r3, [r7, #11]
 800efee:	3301      	adds	r3, #1
 800eff0:	72fb      	strb	r3, [r7, #11]
          break;
 800eff2:	e089      	b.n	800f108 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00b      	beq.n	800f018 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	7c12      	ldrb	r2, [r2, #16]
 800f00c:	f107 0108 	add.w	r1, r7, #8
 800f010:	4610      	mov	r0, r2
 800f012:	4798      	blx	r3
 800f014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f016:	e077      	b.n	800f108 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f018:	6839      	ldr	r1, [r7, #0]
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 fab1 	bl	800f582 <USBD_CtlError>
            err++;
 800f020:	7afb      	ldrb	r3, [r7, #11]
 800f022:	3301      	adds	r3, #1
 800f024:	72fb      	strb	r3, [r7, #11]
          break;
 800f026:	e06f      	b.n	800f108 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00b      	beq.n	800f04c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	7c12      	ldrb	r2, [r2, #16]
 800f040:	f107 0108 	add.w	r1, r7, #8
 800f044:	4610      	mov	r0, r2
 800f046:	4798      	blx	r3
 800f048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f04a:	e05d      	b.n	800f108 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f04c:	6839      	ldr	r1, [r7, #0]
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 fa97 	bl	800f582 <USBD_CtlError>
            err++;
 800f054:	7afb      	ldrb	r3, [r7, #11]
 800f056:	3301      	adds	r3, #1
 800f058:	72fb      	strb	r3, [r7, #11]
          break;
 800f05a:	e055      	b.n	800f108 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00b      	beq.n	800f080 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	7c12      	ldrb	r2, [r2, #16]
 800f074:	f107 0108 	add.w	r1, r7, #8
 800f078:	4610      	mov	r0, r2
 800f07a:	4798      	blx	r3
 800f07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f07e:	e043      	b.n	800f108 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fa7d 	bl	800f582 <USBD_CtlError>
            err++;
 800f088:	7afb      	ldrb	r3, [r7, #11]
 800f08a:	3301      	adds	r3, #1
 800f08c:	72fb      	strb	r3, [r7, #11]
          break;
 800f08e:	e03b      	b.n	800f108 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00b      	beq.n	800f0b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0a2:	695b      	ldr	r3, [r3, #20]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	7c12      	ldrb	r2, [r2, #16]
 800f0a8:	f107 0108 	add.w	r1, r7, #8
 800f0ac:	4610      	mov	r0, r2
 800f0ae:	4798      	blx	r3
 800f0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0b2:	e029      	b.n	800f108 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fa63 	bl	800f582 <USBD_CtlError>
            err++;
 800f0bc:	7afb      	ldrb	r3, [r7, #11]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f0c2:	e021      	b.n	800f108 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00b      	beq.n	800f0e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0d6:	699b      	ldr	r3, [r3, #24]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	7c12      	ldrb	r2, [r2, #16]
 800f0dc:	f107 0108 	add.w	r1, r7, #8
 800f0e0:	4610      	mov	r0, r2
 800f0e2:	4798      	blx	r3
 800f0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0e6:	e00f      	b.n	800f108 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 fa49 	bl	800f582 <USBD_CtlError>
            err++;
 800f0f0:	7afb      	ldrb	r3, [r7, #11]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f0f6:	e007      	b.n	800f108 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f0f8:	6839      	ldr	r1, [r7, #0]
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fa41 	bl	800f582 <USBD_CtlError>
          err++;
 800f100:	7afb      	ldrb	r3, [r7, #11]
 800f102:	3301      	adds	r3, #1
 800f104:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f106:	bf00      	nop
      }
      break;
 800f108:	e037      	b.n	800f17a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	7c1b      	ldrb	r3, [r3, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d109      	bne.n	800f126 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f11a:	f107 0208 	add.w	r2, r7, #8
 800f11e:	4610      	mov	r0, r2
 800f120:	4798      	blx	r3
 800f122:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f124:	e029      	b.n	800f17a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 fa2a 	bl	800f582 <USBD_CtlError>
        err++;
 800f12e:	7afb      	ldrb	r3, [r7, #11]
 800f130:	3301      	adds	r3, #1
 800f132:	72fb      	strb	r3, [r7, #11]
      break;
 800f134:	e021      	b.n	800f17a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	7c1b      	ldrb	r3, [r3, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d10d      	bne.n	800f15a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f146:	f107 0208 	add.w	r2, r7, #8
 800f14a:	4610      	mov	r0, r2
 800f14c:	4798      	blx	r3
 800f14e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	3301      	adds	r3, #1
 800f154:	2207      	movs	r2, #7
 800f156:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f158:	e00f      	b.n	800f17a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f15a:	6839      	ldr	r1, [r7, #0]
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 fa10 	bl	800f582 <USBD_CtlError>
        err++;
 800f162:	7afb      	ldrb	r3, [r7, #11]
 800f164:	3301      	adds	r3, #1
 800f166:	72fb      	strb	r3, [r7, #11]
      break;
 800f168:	e007      	b.n	800f17a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fa08 	bl	800f582 <USBD_CtlError>
      err++;
 800f172:	7afb      	ldrb	r3, [r7, #11]
 800f174:	3301      	adds	r3, #1
 800f176:	72fb      	strb	r3, [r7, #11]
      break;
 800f178:	bf00      	nop
  }

  if (err != 0U)
 800f17a:	7afb      	ldrb	r3, [r7, #11]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d11e      	bne.n	800f1be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	88db      	ldrh	r3, [r3, #6]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d016      	beq.n	800f1b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f188:	893b      	ldrh	r3, [r7, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00e      	beq.n	800f1ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	88da      	ldrh	r2, [r3, #6]
 800f192:	893b      	ldrh	r3, [r7, #8]
 800f194:	4293      	cmp	r3, r2
 800f196:	bf28      	it	cs
 800f198:	4613      	movcs	r3, r2
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f19e:	893b      	ldrh	r3, [r7, #8]
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	68f9      	ldr	r1, [r7, #12]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fa69 	bl	800f67c <USBD_CtlSendData>
 800f1aa:	e009      	b.n	800f1c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f9e7 	bl	800f582 <USBD_CtlError>
 800f1b4:	e004      	b.n	800f1c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 fa9d 	bl	800f6f6 <USBD_CtlSendStatus>
 800f1bc:	e000      	b.n	800f1c0 <USBD_GetDescriptor+0x320>
    return;
 800f1be:	bf00      	nop
  }
}
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop

0800f1c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	889b      	ldrh	r3, [r3, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d131      	bne.n	800f23e <USBD_SetAddress+0x76>
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	88db      	ldrh	r3, [r3, #6]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d12d      	bne.n	800f23e <USBD_SetAddress+0x76>
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	885b      	ldrh	r3, [r3, #2]
 800f1e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1e8:	d829      	bhi.n	800f23e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	885b      	ldrh	r3, [r3, #2]
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	2b03      	cmp	r3, #3
 800f200:	d104      	bne.n	800f20c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f202:	6839      	ldr	r1, [r7, #0]
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 f9bc 	bl	800f582 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f20a:	e01d      	b.n	800f248 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	7bfa      	ldrb	r2, [r7, #15]
 800f210:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f214:	7bfb      	ldrb	r3, [r7, #15]
 800f216:	4619      	mov	r1, r3
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fed8 	bl	800ffce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 fa69 	bl	800f6f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f224:	7bfb      	ldrb	r3, [r7, #15]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d004      	beq.n	800f234 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2202      	movs	r2, #2
 800f22e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f232:	e009      	b.n	800f248 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f23c:	e004      	b.n	800f248 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f23e:	6839      	ldr	r1, [r7, #0]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f99e 	bl	800f582 <USBD_CtlError>
  }
}
 800f246:	bf00      	nop
 800f248:	bf00      	nop
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f25a:	2300      	movs	r3, #0
 800f25c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	885b      	ldrh	r3, [r3, #2]
 800f262:	b2da      	uxtb	r2, r3
 800f264:	4b4e      	ldr	r3, [pc, #312]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f266:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f268:	4b4d      	ldr	r3, [pc, #308]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d905      	bls.n	800f27c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 f985 	bl	800f582 <USBD_CtlError>
    return USBD_FAIL;
 800f278:	2303      	movs	r3, #3
 800f27a:	e08c      	b.n	800f396 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f282:	b2db      	uxtb	r3, r3
 800f284:	2b02      	cmp	r3, #2
 800f286:	d002      	beq.n	800f28e <USBD_SetConfig+0x3e>
 800f288:	2b03      	cmp	r3, #3
 800f28a:	d029      	beq.n	800f2e0 <USBD_SetConfig+0x90>
 800f28c:	e075      	b.n	800f37a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f28e:	4b44      	ldr	r3, [pc, #272]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d020      	beq.n	800f2d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f296:	4b42      	ldr	r3, [pc, #264]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2a0:	4b3f      	ldr	r3, [pc, #252]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7fe ffba 	bl	800e220 <USBD_SetClassConfig>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d008      	beq.n	800f2c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 f962 	bl	800f582 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2202      	movs	r2, #2
 800f2c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f2c6:	e065      	b.n	800f394 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 fa14 	bl	800f6f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2203      	movs	r2, #3
 800f2d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f2d6:	e05d      	b.n	800f394 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 fa0c 	bl	800f6f6 <USBD_CtlSendStatus>
      break;
 800f2de:	e059      	b.n	800f394 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f2e0:	4b2f      	ldr	r3, [pc, #188]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d112      	bne.n	800f30e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f2f0:	4b2b      	ldr	r3, [pc, #172]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f2fa:	4b29      	ldr	r3, [pc, #164]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	4619      	mov	r1, r3
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f7fe ffa9 	bl	800e258 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 f9f5 	bl	800f6f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f30c:	e042      	b.n	800f394 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f30e:	4b24      	ldr	r3, [pc, #144]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	461a      	mov	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d02a      	beq.n	800f372 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	b2db      	uxtb	r3, r3
 800f322:	4619      	mov	r1, r3
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7fe ff97 	bl	800e258 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f32a:	4b1d      	ldr	r3, [pc, #116]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	461a      	mov	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f334:	4b1a      	ldr	r3, [pc, #104]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7fe ff70 	bl	800e220 <USBD_SetClassConfig>
 800f340:	4603      	mov	r3, r0
 800f342:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f344:	7bfb      	ldrb	r3, [r7, #15]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00f      	beq.n	800f36a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f34a:	6839      	ldr	r1, [r7, #0]
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 f918 	bl	800f582 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	b2db      	uxtb	r3, r3
 800f358:	4619      	mov	r1, r3
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7fe ff7c 	bl	800e258 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2202      	movs	r2, #2
 800f364:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f368:	e014      	b.n	800f394 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 f9c3 	bl	800f6f6 <USBD_CtlSendStatus>
      break;
 800f370:	e010      	b.n	800f394 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 f9bf 	bl	800f6f6 <USBD_CtlSendStatus>
      break;
 800f378:	e00c      	b.n	800f394 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f900 	bl	800f582 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f382:	4b07      	ldr	r3, [pc, #28]	@ (800f3a0 <USBD_SetConfig+0x150>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	4619      	mov	r1, r3
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7fe ff65 	bl	800e258 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f38e:	2303      	movs	r3, #3
 800f390:	73fb      	strb	r3, [r7, #15]
      break;
 800f392:	bf00      	nop
  }

  return ret;
 800f394:	7bfb      	ldrb	r3, [r7, #15]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	24000698 	.word	0x24000698

0800f3a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	88db      	ldrh	r3, [r3, #6]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d004      	beq.n	800f3c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 f8e2 	bl	800f582 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f3be:	e023      	b.n	800f408 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	dc02      	bgt.n	800f3d2 <USBD_GetConfig+0x2e>
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dc03      	bgt.n	800f3d8 <USBD_GetConfig+0x34>
 800f3d0:	e015      	b.n	800f3fe <USBD_GetConfig+0x5a>
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d00b      	beq.n	800f3ee <USBD_GetConfig+0x4a>
 800f3d6:	e012      	b.n	800f3fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	3308      	adds	r3, #8
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 f948 	bl	800f67c <USBD_CtlSendData>
        break;
 800f3ec:	e00c      	b.n	800f408 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	3304      	adds	r3, #4
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f940 	bl	800f67c <USBD_CtlSendData>
        break;
 800f3fc:	e004      	b.n	800f408 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 f8be 	bl	800f582 <USBD_CtlError>
        break;
 800f406:	bf00      	nop
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f420:	b2db      	uxtb	r3, r3
 800f422:	3b01      	subs	r3, #1
 800f424:	2b02      	cmp	r3, #2
 800f426:	d81e      	bhi.n	800f466 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	88db      	ldrh	r3, [r3, #6]
 800f42c:	2b02      	cmp	r3, #2
 800f42e:	d004      	beq.n	800f43a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 f8a5 	bl	800f582 <USBD_CtlError>
        break;
 800f438:	e01a      	b.n	800f470 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2201      	movs	r2, #1
 800f43e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f446:	2b00      	cmp	r3, #0
 800f448:	d005      	beq.n	800f456 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	f043 0202 	orr.w	r2, r3, #2
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	330c      	adds	r3, #12
 800f45a:	2202      	movs	r2, #2
 800f45c:	4619      	mov	r1, r3
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f90c 	bl	800f67c <USBD_CtlSendData>
      break;
 800f464:	e004      	b.n	800f470 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f466:	6839      	ldr	r1, [r7, #0]
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 f88a 	bl	800f582 <USBD_CtlError>
      break;
 800f46e:	bf00      	nop
  }
}
 800f470:	bf00      	nop
 800f472:	3708      	adds	r7, #8
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	885b      	ldrh	r3, [r3, #2]
 800f486:	2b01      	cmp	r3, #1
 800f488:	d107      	bne.n	800f49a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 f92f 	bl	800f6f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f498:	e013      	b.n	800f4c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	885b      	ldrh	r3, [r3, #2]
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d10b      	bne.n	800f4ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	889b      	ldrh	r3, [r3, #4]
 800f4a6:	0a1b      	lsrs	r3, r3, #8
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	b2da      	uxtb	r2, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f91f 	bl	800f6f6 <USBD_CtlSendStatus>
}
 800f4b8:	e003      	b.n	800f4c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f4ba:	6839      	ldr	r1, [r7, #0]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 f860 	bl	800f582 <USBD_CtlError>
}
 800f4c2:	bf00      	nop
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b082      	sub	sp, #8
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	2b02      	cmp	r3, #2
 800f4e0:	d80b      	bhi.n	800f4fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	885b      	ldrh	r3, [r3, #2]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d10c      	bne.n	800f504 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f8ff 	bl	800f6f6 <USBD_CtlSendStatus>
      }
      break;
 800f4f8:	e004      	b.n	800f504 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 f840 	bl	800f582 <USBD_CtlError>
      break;
 800f502:	e000      	b.n	800f506 <USBD_ClrFeature+0x3c>
      break;
 800f504:	bf00      	nop
  }
}
 800f506:	bf00      	nop
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f50e:	b580      	push	{r7, lr}
 800f510:	b084      	sub	sp, #16
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	781a      	ldrb	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	3301      	adds	r3, #1
 800f528:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	781a      	ldrb	r2, [r3, #0]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	3301      	adds	r3, #1
 800f536:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f7ff fa17 	bl	800e96c <SWAPBYTE>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	3301      	adds	r3, #1
 800f54a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	3301      	adds	r3, #1
 800f550:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f7ff fa0a 	bl	800e96c <SWAPBYTE>
 800f558:	4603      	mov	r3, r0
 800f55a:	461a      	mov	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3301      	adds	r3, #1
 800f564:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	3301      	adds	r3, #1
 800f56a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f7ff f9fd 	bl	800e96c <SWAPBYTE>
 800f572:	4603      	mov	r3, r0
 800f574:	461a      	mov	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	80da      	strh	r2, [r3, #6]
}
 800f57a:	bf00      	nop
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f58c:	2180      	movs	r1, #128	@ 0x80
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fcb3 	bl	800fefa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f594:	2100      	movs	r1, #0
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 fcaf 	bl	800fefa <USBD_LL_StallEP>
}
 800f59c:	bf00      	nop
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d042      	beq.n	800f640 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f5be:	6938      	ldr	r0, [r7, #16]
 800f5c0:	f000 f842 	bl	800f648 <USBD_GetLen>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	005b      	lsls	r3, r3, #1
 800f5ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5ce:	d808      	bhi.n	800f5e2 <USBD_GetString+0x3e>
 800f5d0:	6938      	ldr	r0, [r7, #16]
 800f5d2:	f000 f839 	bl	800f648 <USBD_GetLen>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	3301      	adds	r3, #1
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	e001      	b.n	800f5e6 <USBD_GetString+0x42>
 800f5e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f5ea:	7dfb      	ldrb	r3, [r7, #23]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	7812      	ldrb	r2, [r2, #0]
 800f5f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f5fc:	7dfb      	ldrb	r3, [r7, #23]
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	4413      	add	r3, r2
 800f602:	2203      	movs	r2, #3
 800f604:	701a      	strb	r2, [r3, #0]
  idx++;
 800f606:	7dfb      	ldrb	r3, [r7, #23]
 800f608:	3301      	adds	r3, #1
 800f60a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f60c:	e013      	b.n	800f636 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	4413      	add	r3, r2
 800f614:	693a      	ldr	r2, [r7, #16]
 800f616:	7812      	ldrb	r2, [r2, #0]
 800f618:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	3301      	adds	r3, #1
 800f61e:	613b      	str	r3, [r7, #16]
    idx++;
 800f620:	7dfb      	ldrb	r3, [r7, #23]
 800f622:	3301      	adds	r3, #1
 800f624:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	4413      	add	r3, r2
 800f62c:	2200      	movs	r2, #0
 800f62e:	701a      	strb	r2, [r3, #0]
    idx++;
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	3301      	adds	r3, #1
 800f634:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d1e7      	bne.n	800f60e <USBD_GetString+0x6a>
 800f63e:	e000      	b.n	800f642 <USBD_GetString+0x9e>
    return;
 800f640:	bf00      	nop
  }
}
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f650:	2300      	movs	r3, #0
 800f652:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f658:	e005      	b.n	800f666 <USBD_GetLen+0x1e>
  {
    len++;
 800f65a:	7bfb      	ldrb	r3, [r7, #15]
 800f65c:	3301      	adds	r3, #1
 800f65e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	3301      	adds	r3, #1
 800f664:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1f5      	bne.n	800f65a <USBD_GetLen+0x12>
  }

  return len;
 800f66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3714      	adds	r7, #20
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2202      	movs	r2, #2
 800f68c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	68f8      	ldr	r0, [r7, #12]
 800f6a4:	f000 fcb2 	bl	801000c <USBD_LL_Transmit>

  return USBD_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b084      	sub	sp, #16
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	60f8      	str	r0, [r7, #12]
 800f6ba:	60b9      	str	r1, [r7, #8]
 800f6bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f000 fca1 	bl	801000c <USBD_LL_Transmit>

  return USBD_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f000 fcb1 	bl	801004e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b082      	sub	sp, #8
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2204      	movs	r2, #4
 800f702:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f706:	2300      	movs	r3, #0
 800f708:	2200      	movs	r2, #0
 800f70a:	2100      	movs	r1, #0
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 fc7d 	bl	801000c <USBD_LL_Transmit>

  return USBD_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2205      	movs	r2, #5
 800f728:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f72c:	2300      	movs	r3, #0
 800f72e:	2200      	movs	r2, #0
 800f730:	2100      	movs	r1, #0
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 fc8b 	bl	801004e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
	...

0800f744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800f748:	2201      	movs	r2, #1
 800f74a:	4913      	ldr	r1, [pc, #76]	@ (800f798 <MX_USB_DEVICE_Init+0x54>)
 800f74c:	4813      	ldr	r0, [pc, #76]	@ (800f79c <MX_USB_DEVICE_Init+0x58>)
 800f74e:	f7fe fcea 	bl	800e126 <USBD_Init>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f758:	f7f1 fb26 	bl	8000da8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 800f75c:	4910      	ldr	r1, [pc, #64]	@ (800f7a0 <MX_USB_DEVICE_Init+0x5c>)
 800f75e:	480f      	ldr	r0, [pc, #60]	@ (800f79c <MX_USB_DEVICE_Init+0x58>)
 800f760:	f7fe fd11 	bl	800e186 <USBD_RegisterClass>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d001      	beq.n	800f76e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f76a:	f7f1 fb1d 	bl	8000da8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 800f76e:	490d      	ldr	r1, [pc, #52]	@ (800f7a4 <MX_USB_DEVICE_Init+0x60>)
 800f770:	480a      	ldr	r0, [pc, #40]	@ (800f79c <MX_USB_DEVICE_Init+0x58>)
 800f772:	f7fc ff8f 	bl	800c694 <USBD_MSC_RegisterStorage>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d001      	beq.n	800f780 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f77c:	f7f1 fb14 	bl	8000da8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800f780:	4806      	ldr	r0, [pc, #24]	@ (800f79c <MX_USB_DEVICE_Init+0x58>)
 800f782:	f7fe fd36 	bl	800e1f2 <USBD_Start>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f78c:	f7f1 fb0c 	bl	8000da8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f790:	f7f4 fede 	bl	8004550 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f794:	bf00      	nop
 800f796:	bd80      	pop	{r7, pc}
 800f798:	24000090 	.word	0x24000090
 800f79c:	2400069c 	.word	0x2400069c
 800f7a0:	24000010 	.word	0x24000010
 800f7a4:	240000e4 	.word	0x240000e4

0800f7a8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	6039      	str	r1, [r7, #0]
 800f7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2212      	movs	r2, #18
 800f7b8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f7ba:	4b03      	ldr	r3, [pc, #12]	@ (800f7c8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	240000b0 	.word	0x240000b0

0800f7cc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	6039      	str	r1, [r7, #0]
 800f7d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2204      	movs	r2, #4
 800f7dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f7de:	4b03      	ldr	r3, [pc, #12]	@ (800f7ec <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	240000c4 	.word	0x240000c4

0800f7f0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	6039      	str	r1, [r7, #0]
 800f7fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7fc:	79fb      	ldrb	r3, [r7, #7]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d105      	bne.n	800f80e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	4907      	ldr	r1, [pc, #28]	@ (800f824 <USBD_HS_ProductStrDescriptor+0x34>)
 800f806:	4808      	ldr	r0, [pc, #32]	@ (800f828 <USBD_HS_ProductStrDescriptor+0x38>)
 800f808:	f7ff fecc 	bl	800f5a4 <USBD_GetString>
 800f80c:	e004      	b.n	800f818 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	4904      	ldr	r1, [pc, #16]	@ (800f824 <USBD_HS_ProductStrDescriptor+0x34>)
 800f812:	4805      	ldr	r0, [pc, #20]	@ (800f828 <USBD_HS_ProductStrDescriptor+0x38>)
 800f814:	f7ff fec6 	bl	800f5a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f818:	4b02      	ldr	r3, [pc, #8]	@ (800f824 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3708      	adds	r7, #8
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	24000978 	.word	0x24000978
 800f828:	080101b0 	.word	0x080101b0

0800f82c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	6039      	str	r1, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f838:	683a      	ldr	r2, [r7, #0]
 800f83a:	4904      	ldr	r1, [pc, #16]	@ (800f84c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f83c:	4804      	ldr	r0, [pc, #16]	@ (800f850 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f83e:	f7ff feb1 	bl	800f5a4 <USBD_GetString>
  return USBD_StrDesc;
 800f842:	4b02      	ldr	r3, [pc, #8]	@ (800f84c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	24000978 	.word	0x24000978
 800f850:	080101c4 	.word	0x080101c4

0800f854 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	4603      	mov	r3, r0
 800f85c:	6039      	str	r1, [r7, #0]
 800f85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	221a      	movs	r2, #26
 800f864:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f866:	f000 f843 	bl	800f8f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f86a:	4b02      	ldr	r3, [pc, #8]	@ (800f874 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	240000c8 	.word	0x240000c8

0800f878 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	4603      	mov	r3, r0
 800f880:	6039      	str	r1, [r7, #0]
 800f882:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f884:	79fb      	ldrb	r3, [r7, #7]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d105      	bne.n	800f896 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	4907      	ldr	r1, [pc, #28]	@ (800f8ac <USBD_HS_ConfigStrDescriptor+0x34>)
 800f88e:	4808      	ldr	r0, [pc, #32]	@ (800f8b0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f890:	f7ff fe88 	bl	800f5a4 <USBD_GetString>
 800f894:	e004      	b.n	800f8a0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f896:	683a      	ldr	r2, [r7, #0]
 800f898:	4904      	ldr	r1, [pc, #16]	@ (800f8ac <USBD_HS_ConfigStrDescriptor+0x34>)
 800f89a:	4805      	ldr	r0, [pc, #20]	@ (800f8b0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f89c:	f7ff fe82 	bl	800f5a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8a0:	4b02      	ldr	r3, [pc, #8]	@ (800f8ac <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	24000978 	.word	0x24000978
 800f8b0:	080101d8 	.word	0x080101d8

0800f8b4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	6039      	str	r1, [r7, #0]
 800f8be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f8c0:	79fb      	ldrb	r3, [r7, #7]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d105      	bne.n	800f8d2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f8c6:	683a      	ldr	r2, [r7, #0]
 800f8c8:	4907      	ldr	r1, [pc, #28]	@ (800f8e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f8ca:	4808      	ldr	r0, [pc, #32]	@ (800f8ec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f8cc:	f7ff fe6a 	bl	800f5a4 <USBD_GetString>
 800f8d0:	e004      	b.n	800f8dc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f8d2:	683a      	ldr	r2, [r7, #0]
 800f8d4:	4904      	ldr	r1, [pc, #16]	@ (800f8e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f8d6:	4805      	ldr	r0, [pc, #20]	@ (800f8ec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f8d8:	f7ff fe64 	bl	800f5a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8dc:	4b02      	ldr	r3, [pc, #8]	@ (800f8e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3708      	adds	r7, #8
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	24000978 	.word	0x24000978
 800f8ec:	080101e4 	.word	0x080101e4

0800f8f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f934 <Get_SerialNum+0x44>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f938 <Get_SerialNum+0x48>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f902:	4b0e      	ldr	r3, [pc, #56]	@ (800f93c <Get_SerialNum+0x4c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4413      	add	r3, r2
 800f90e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d009      	beq.n	800f92a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f916:	2208      	movs	r2, #8
 800f918:	4909      	ldr	r1, [pc, #36]	@ (800f940 <Get_SerialNum+0x50>)
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f000 f814 	bl	800f948 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f920:	2204      	movs	r2, #4
 800f922:	4908      	ldr	r1, [pc, #32]	@ (800f944 <Get_SerialNum+0x54>)
 800f924:	68b8      	ldr	r0, [r7, #8]
 800f926:	f000 f80f 	bl	800f948 <IntToUnicode>
  }
}
 800f92a:	bf00      	nop
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	08fff800 	.word	0x08fff800
 800f938:	08fff804 	.word	0x08fff804
 800f93c:	08fff808 	.word	0x08fff808
 800f940:	240000ca 	.word	0x240000ca
 800f944:	240000da 	.word	0x240000da

0800f948 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f948:	b480      	push	{r7}
 800f94a:	b087      	sub	sp, #28
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	4613      	mov	r3, r2
 800f954:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f95a:	2300      	movs	r3, #0
 800f95c:	75fb      	strb	r3, [r7, #23]
 800f95e:	e027      	b.n	800f9b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	0f1b      	lsrs	r3, r3, #28
 800f964:	2b09      	cmp	r3, #9
 800f966:	d80b      	bhi.n	800f980 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	0f1b      	lsrs	r3, r3, #28
 800f96c:	b2da      	uxtb	r2, r3
 800f96e:	7dfb      	ldrb	r3, [r7, #23]
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	4619      	mov	r1, r3
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	440b      	add	r3, r1
 800f978:	3230      	adds	r2, #48	@ 0x30
 800f97a:	b2d2      	uxtb	r2, r2
 800f97c:	701a      	strb	r2, [r3, #0]
 800f97e:	e00a      	b.n	800f996 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	0f1b      	lsrs	r3, r3, #28
 800f984:	b2da      	uxtb	r2, r3
 800f986:	7dfb      	ldrb	r3, [r7, #23]
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	4619      	mov	r1, r3
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	440b      	add	r3, r1
 800f990:	3237      	adds	r2, #55	@ 0x37
 800f992:	b2d2      	uxtb	r2, r2
 800f994:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	011b      	lsls	r3, r3, #4
 800f99a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f99c:	7dfb      	ldrb	r3, [r7, #23]
 800f99e:	005b      	lsls	r3, r3, #1
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	75fb      	strb	r3, [r7, #23]
 800f9b0:	7dfa      	ldrb	r2, [r7, #23]
 800f9b2:	79fb      	ldrb	r3, [r7, #7]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d3d3      	bcc.n	800f960 <IntToUnicode+0x18>
  }
}
 800f9b8:	bf00      	nop
 800f9ba:	bf00      	nop
 800f9bc:	371c      	adds	r7, #28
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr

0800f9c6 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 800f9c6:	b480      	push	{r7}
 800f9c8:	b083      	sub	sp, #12
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 800f9d0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	370c      	adds	r7, #12
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr

0800f9de <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800f9de:	b480      	push	{r7}
 800f9e0:	b085      	sub	sp, #20
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	60b9      	str	r1, [r7, #8]
 800f9e8:	607a      	str	r2, [r7, #4]
 800f9ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f9f2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f9fa:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800f9fc:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3714      	adds	r7, #20
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	4603      	mov	r3, r0
 800fa12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 800fa14:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	370c      	adds	r7, #12
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr

0800fa22 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 800fa22:	b480      	push	{r7}
 800fa24:	b083      	sub	sp, #12
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	4603      	mov	r3, r0
 800fa2a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 800fa2c:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	370c      	adds	r7, #12
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b085      	sub	sp, #20
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	461a      	mov	r2, r3
 800fa46:	4603      	mov	r3, r0
 800fa48:	73fb      	strb	r3, [r7, #15]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800fa4e:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60b9      	str	r1, [r7, #8]
 800fa64:	607a      	str	r2, [r7, #4]
 800fa66:	461a      	mov	r2, r3
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73fb      	strb	r3, [r7, #15]
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800fa70:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3714      	adds	r7, #20
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 800fa7e:	b480      	push	{r7}
 800fa80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 800fa82:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
	...

0800fa90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b0ba      	sub	sp, #232	@ 0xe8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	601a      	str	r2, [r3, #0]
 800faa0:	605a      	str	r2, [r3, #4]
 800faa2:	609a      	str	r2, [r3, #8]
 800faa4:	60da      	str	r2, [r3, #12]
 800faa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800faa8:	f107 0310 	add.w	r3, r7, #16
 800faac:	22c0      	movs	r2, #192	@ 0xc0
 800faae:	2100      	movs	r1, #0
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 fb45 	bl	8010140 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a2b      	ldr	r2, [pc, #172]	@ (800fb68 <HAL_PCD_MspInit+0xd8>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d14e      	bne.n	800fb5e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fac0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fac4:	f04f 0300 	mov.w	r3, #0
 800fac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800facc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800fad0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fad4:	f107 0310 	add.w	r3, r7, #16
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f5 fd07 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800fae4:	f7f1 f960 	bl	8000da8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fae8:	f7f4 fd32 	bl	8004550 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800faec:	4b1f      	ldr	r3, [pc, #124]	@ (800fb6c <HAL_PCD_MspInit+0xdc>)
 800faee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800faf2:	4a1e      	ldr	r2, [pc, #120]	@ (800fb6c <HAL_PCD_MspInit+0xdc>)
 800faf4:	f043 0301 	orr.w	r3, r3, #1
 800faf8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800fafc:	4b1b      	ldr	r3, [pc, #108]	@ (800fb6c <HAL_PCD_MspInit+0xdc>)
 800fafe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fb02:	f003 0301 	and.w	r3, r3, #1
 800fb06:	60fb      	str	r3, [r7, #12]
 800fb08:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fb0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fb0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb12:	2302      	movs	r3, #2
 800fb14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fb28:	4619      	mov	r1, r3
 800fb2a:	4811      	ldr	r0, [pc, #68]	@ (800fb70 <HAL_PCD_MspInit+0xe0>)
 800fb2c:	f7f1 ffe4 	bl	8001af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800fb30:	4b0e      	ldr	r3, [pc, #56]	@ (800fb6c <HAL_PCD_MspInit+0xdc>)
 800fb32:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800fb36:	4a0d      	ldr	r2, [pc, #52]	@ (800fb6c <HAL_PCD_MspInit+0xdc>)
 800fb38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800fb3c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800fb40:	4b0a      	ldr	r3, [pc, #40]	@ (800fb6c <HAL_PCD_MspInit+0xdc>)
 800fb42:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800fb46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb4a:	60bb      	str	r3, [r7, #8]
 800fb4c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800fb4e:	2200      	movs	r2, #0
 800fb50:	2100      	movs	r1, #0
 800fb52:	204d      	movs	r0, #77	@ 0x4d
 800fb54:	f7f1 ff23 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800fb58:	204d      	movs	r0, #77	@ 0x4d
 800fb5a:	f7f1 ff3a 	bl	80019d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800fb5e:	bf00      	nop
 800fb60:	37e8      	adds	r7, #232	@ 0xe8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	40040000 	.word	0x40040000
 800fb6c:	58024400 	.word	0x58024400
 800fb70:	58020000 	.word	0x58020000

0800fb74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	f7fe fb7e 	bl	800e28c <USBD_LL_SetupStage>
}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fbaa:	78fa      	ldrb	r2, [r7, #3]
 800fbac:	6879      	ldr	r1, [r7, #4]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	00db      	lsls	r3, r3, #3
 800fbb2:	4413      	add	r3, r2
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	440b      	add	r3, r1
 800fbb8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	78fb      	ldrb	r3, [r7, #3]
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	f7fe fbb8 	bl	800e336 <USBD_LL_DataOutStage>
}
 800fbc6:	bf00      	nop
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b082      	sub	sp, #8
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fbe0:	78fa      	ldrb	r2, [r7, #3]
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	4413      	add	r3, r2
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	440b      	add	r3, r1
 800fbee:	3320      	adds	r3, #32
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	78fb      	ldrb	r3, [r7, #3]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	f7fe fc51 	bl	800e49c <USBD_LL_DataInStage>
}
 800fbfa:	bf00      	nop
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b082      	sub	sp, #8
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7fe fd8b 	bl	800e72c <USBD_LL_SOF>
}
 800fc16:	bf00      	nop
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b084      	sub	sp, #16
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fc26:	2301      	movs	r3, #1
 800fc28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	79db      	ldrb	r3, [r3, #7]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d102      	bne.n	800fc38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fc32:	2300      	movs	r3, #0
 800fc34:	73fb      	strb	r3, [r7, #15]
 800fc36:	e008      	b.n	800fc4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	79db      	ldrb	r3, [r3, #7]
 800fc3c:	2b02      	cmp	r3, #2
 800fc3e:	d102      	bne.n	800fc46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fc40:	2301      	movs	r3, #1
 800fc42:	73fb      	strb	r3, [r7, #15]
 800fc44:	e001      	b.n	800fc4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fc46:	f7f1 f8af 	bl	8000da8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc50:	7bfa      	ldrb	r2, [r7, #15]
 800fc52:	4611      	mov	r1, r2
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7fe fd25 	bl	800e6a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7fe fccd 	bl	800e600 <USBD_LL_Reset>
}
 800fc66:	bf00      	nop
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
	...

0800fc70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe fd20 	bl	800e6c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	6812      	ldr	r2, [r2, #0]
 800fc92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fc96:	f043 0301 	orr.w	r3, r3, #1
 800fc9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	7adb      	ldrb	r3, [r3, #11]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d005      	beq.n	800fcb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fca4:	4b04      	ldr	r3, [pc, #16]	@ (800fcb8 <HAL_PCD_SuspendCallback+0x48>)
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	4a03      	ldr	r2, [pc, #12]	@ (800fcb8 <HAL_PCD_SuspendCallback+0x48>)
 800fcaa:	f043 0306 	orr.w	r3, r3, #6
 800fcae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	e000ed00 	.word	0xe000ed00

0800fcbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7fe fd16 	bl	800e6fc <USBD_LL_Resume>
}
 800fcd0:	bf00      	nop
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	460b      	mov	r3, r1
 800fce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fcea:	78fa      	ldrb	r2, [r7, #3]
 800fcec:	4611      	mov	r1, r2
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe fd6e 	bl	800e7d0 <USBD_LL_IsoOUTIncomplete>
}
 800fcf4:	bf00      	nop
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd0e:	78fa      	ldrb	r2, [r7, #3]
 800fd10:	4611      	mov	r1, r2
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fe fd2a 	bl	800e76c <USBD_LL_IsoINIncomplete>
}
 800fd18:	bf00      	nop
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fd80 	bl	800e834 <USBD_LL_DevConnected>
}
 800fd34:	bf00      	nop
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fe fd7d 	bl	800e84a <USBD_LL_DevDisconnected>
}
 800fd50:	bf00      	nop
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d140      	bne.n	800fdea <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800fd68:	4a22      	ldr	r2, [pc, #136]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a20      	ldr	r2, [pc, #128]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd74:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800fd78:	4b1e      	ldr	r3, [pc, #120]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd7a:	4a1f      	ldr	r2, [pc, #124]	@ (800fdf8 <USBD_LL_Init+0xa0>)
 800fd7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800fd7e:	4b1d      	ldr	r3, [pc, #116]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd80:	2209      	movs	r2, #9
 800fd82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800fd84:	4b1b      	ldr	r3, [pc, #108]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd86:	2202      	movs	r2, #2
 800fd88:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800fd8a:	4b1a      	ldr	r3, [pc, #104]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800fd90:	4b18      	ldr	r3, [pc, #96]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd92:	2202      	movs	r2, #2
 800fd94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800fd96:	4b17      	ldr	r3, [pc, #92]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd98:	2200      	movs	r2, #0
 800fd9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800fd9c:	4b15      	ldr	r3, [pc, #84]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800fda2:	4b14      	ldr	r3, [pc, #80]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800fda8:	4b12      	ldr	r3, [pc, #72]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800fdae:	4b11      	ldr	r3, [pc, #68]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800fdb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800fdba:	480e      	ldr	r0, [pc, #56]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fdbc:	f7f3 f8c2 	bl	8002f44 <HAL_PCD_Init>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fdc6:	f7f0 ffef 	bl	8000da8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800fdca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fdce:	4809      	ldr	r0, [pc, #36]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fdd0:	f7f4 fb43 	bl	800445a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800fdd4:	2280      	movs	r2, #128	@ 0x80
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	4806      	ldr	r0, [pc, #24]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fdda:	f7f4 faf7 	bl	80043cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800fdde:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800fde2:	2101      	movs	r1, #1
 800fde4:	4803      	ldr	r0, [pc, #12]	@ (800fdf4 <USBD_LL_Init+0x9c>)
 800fde6:	f7f4 faf1 	bl	80043cc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	24000b78 	.word	0x24000b78
 800fdf8:	40040000 	.word	0x40040000

0800fdfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f3 f9a2 	bl	800315c <HAL_PCD_Start>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe1c:	7bfb      	ldrb	r3, [r7, #15]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f000 f962 	bl	80100e8 <USBD_Get_USB_Status>
 800fe24:	4603      	mov	r3, r0
 800fe26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe28:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b084      	sub	sp, #16
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	4608      	mov	r0, r1
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	461a      	mov	r2, r3
 800fe40:	4603      	mov	r3, r0
 800fe42:	70fb      	strb	r3, [r7, #3]
 800fe44:	460b      	mov	r3, r1
 800fe46:	70bb      	strb	r3, [r7, #2]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe50:	2300      	movs	r3, #0
 800fe52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fe5a:	78bb      	ldrb	r3, [r7, #2]
 800fe5c:	883a      	ldrh	r2, [r7, #0]
 800fe5e:	78f9      	ldrb	r1, [r7, #3]
 800fe60:	f7f3 fea3 	bl	8003baa <HAL_PCD_EP_Open>
 800fe64:	4603      	mov	r3, r0
 800fe66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f000 f93c 	bl	80100e8 <USBD_Get_USB_Status>
 800fe70:	4603      	mov	r3, r0
 800fe72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe74:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b084      	sub	sp, #16
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	6078      	str	r0, [r7, #4]
 800fe86:	460b      	mov	r3, r1
 800fe88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe98:	78fa      	ldrb	r2, [r7, #3]
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7f3 feec 	bl	8003c7a <HAL_PCD_EP_Close>
 800fea2:	4603      	mov	r3, r0
 800fea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fea6:	7bfb      	ldrb	r3, [r7, #15]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f000 f91d 	bl	80100e8 <USBD_Get_USB_Status>
 800feae:	4603      	mov	r3, r0
 800feb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3710      	adds	r7, #16
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	460b      	mov	r3, r1
 800fec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fec8:	2300      	movs	r3, #0
 800feca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fecc:	2300      	movs	r3, #0
 800fece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fed6:	78fa      	ldrb	r2, [r7, #3]
 800fed8:	4611      	mov	r1, r2
 800feda:	4618      	mov	r0, r3
 800fedc:	f7f4 f88e 	bl	8003ffc <HAL_PCD_EP_Flush>
 800fee0:	4603      	mov	r3, r0
 800fee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f000 f8fe 	bl	80100e8 <USBD_Get_USB_Status>
 800feec:	4603      	mov	r3, r0
 800feee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fef0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b084      	sub	sp, #16
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	460b      	mov	r3, r1
 800ff04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff06:	2300      	movs	r3, #0
 800ff08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff14:	78fa      	ldrb	r2, [r7, #3]
 800ff16:	4611      	mov	r1, r2
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7f3 ff85 	bl	8003e28 <HAL_PCD_EP_SetStall>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff22:	7bfb      	ldrb	r3, [r7, #15]
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 f8df 	bl	80100e8 <USBD_Get_USB_Status>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3710      	adds	r7, #16
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	460b      	mov	r3, r1
 800ff42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff44:	2300      	movs	r3, #0
 800ff46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff52:	78fa      	ldrb	r2, [r7, #3]
 800ff54:	4611      	mov	r1, r2
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7f3 ffc9 	bl	8003eee <HAL_PCD_EP_ClrStall>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f000 f8c0 	bl	80100e8 <USBD_Get_USB_Status>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff76:	b480      	push	{r7}
 800ff78:	b085      	sub	sp, #20
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	460b      	mov	r3, r1
 800ff80:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff88:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ff8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	da0b      	bge.n	800ffaa <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ff92:	78fb      	ldrb	r3, [r7, #3]
 800ff94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff98:	68f9      	ldr	r1, [r7, #12]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	00db      	lsls	r3, r3, #3
 800ff9e:	4413      	add	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	440b      	add	r3, r1
 800ffa4:	3316      	adds	r3, #22
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	e00b      	b.n	800ffc2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ffaa:	78fb      	ldrb	r3, [r7, #3]
 800ffac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ffb0:	68f9      	ldr	r1, [r7, #12]
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	00db      	lsls	r3, r3, #3
 800ffb6:	4413      	add	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	440b      	add	r3, r1
 800ffbc:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ffc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3714      	adds	r7, #20
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr

0800ffce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b084      	sub	sp, #16
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ffe8:	78fa      	ldrb	r2, [r7, #3]
 800ffea:	4611      	mov	r1, r2
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f3 fdb8 	bl	8003b62 <HAL_PCD_SetAddress>
 800fff2:	4603      	mov	r3, r0
 800fff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fff6:	7bfb      	ldrb	r3, [r7, #15]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f000 f875 	bl	80100e8 <USBD_Get_USB_Status>
 800fffe:	4603      	mov	r3, r0
 8010000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010002:	7bbb      	ldrb	r3, [r7, #14]
}
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	607a      	str	r2, [r7, #4]
 8010016:	603b      	str	r3, [r7, #0]
 8010018:	460b      	mov	r3, r1
 801001a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010020:	2300      	movs	r3, #0
 8010022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801002a:	7af9      	ldrb	r1, [r7, #11]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	f7f3 fec0 	bl	8003db4 <HAL_PCD_EP_Transmit>
 8010034:	4603      	mov	r3, r0
 8010036:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010038:	7dfb      	ldrb	r3, [r7, #23]
 801003a:	4618      	mov	r0, r3
 801003c:	f000 f854 	bl	80100e8 <USBD_Get_USB_Status>
 8010040:	4603      	mov	r3, r0
 8010042:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010044:	7dbb      	ldrb	r3, [r7, #22]
}
 8010046:	4618      	mov	r0, r3
 8010048:	3718      	adds	r7, #24
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801004e:	b580      	push	{r7, lr}
 8010050:	b086      	sub	sp, #24
 8010052:	af00      	add	r7, sp, #0
 8010054:	60f8      	str	r0, [r7, #12]
 8010056:	607a      	str	r2, [r7, #4]
 8010058:	603b      	str	r3, [r7, #0]
 801005a:	460b      	mov	r3, r1
 801005c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801005e:	2300      	movs	r3, #0
 8010060:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010062:	2300      	movs	r3, #0
 8010064:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801006c:	7af9      	ldrb	r1, [r7, #11]
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	f7f3 fe4c 	bl	8003d0e <HAL_PCD_EP_Receive>
 8010076:	4603      	mov	r3, r0
 8010078:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801007a:	7dfb      	ldrb	r3, [r7, #23]
 801007c:	4618      	mov	r0, r3
 801007e:	f000 f833 	bl	80100e8 <USBD_Get_USB_Status>
 8010082:	4603      	mov	r3, r0
 8010084:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010086:	7dbb      	ldrb	r3, [r7, #22]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	460b      	mov	r3, r1
 801009a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100a2:	78fa      	ldrb	r2, [r7, #3]
 80100a4:	4611      	mov	r1, r2
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7f3 fe6c 	bl	8003d84 <HAL_PCD_EP_GetRxCount>
 80100ac:	4603      	mov	r3, r0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
	...

080100b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80100c0:	4b03      	ldr	r3, [pc, #12]	@ (80100d0 <USBD_static_malloc+0x18>)
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	370c      	adds	r7, #12
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	2400105c 	.word	0x2400105c

080100d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80100dc:	bf00      	nop
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	4603      	mov	r3, r0
 80100f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80100f6:	79fb      	ldrb	r3, [r7, #7]
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	d817      	bhi.n	801012c <USBD_Get_USB_Status+0x44>
 80100fc:	a201      	add	r2, pc, #4	@ (adr r2, 8010104 <USBD_Get_USB_Status+0x1c>)
 80100fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010102:	bf00      	nop
 8010104:	08010115 	.word	0x08010115
 8010108:	0801011b 	.word	0x0801011b
 801010c:	08010121 	.word	0x08010121
 8010110:	08010127 	.word	0x08010127
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	73fb      	strb	r3, [r7, #15]
    break;
 8010118:	e00b      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801011a:	2303      	movs	r3, #3
 801011c:	73fb      	strb	r3, [r7, #15]
    break;
 801011e:	e008      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010120:	2301      	movs	r3, #1
 8010122:	73fb      	strb	r3, [r7, #15]
    break;
 8010124:	e005      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010126:	2303      	movs	r3, #3
 8010128:	73fb      	strb	r3, [r7, #15]
    break;
 801012a:	e002      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801012c:	2303      	movs	r3, #3
 801012e:	73fb      	strb	r3, [r7, #15]
    break;
 8010130:	bf00      	nop
  }
  return usb_status;
 8010132:	7bfb      	ldrb	r3, [r7, #15]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <memset>:
 8010140:	4402      	add	r2, r0
 8010142:	4603      	mov	r3, r0
 8010144:	4293      	cmp	r3, r2
 8010146:	d100      	bne.n	801014a <memset+0xa>
 8010148:	4770      	bx	lr
 801014a:	f803 1b01 	strb.w	r1, [r3], #1
 801014e:	e7f9      	b.n	8010144 <memset+0x4>

08010150 <__libc_init_array>:
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	4d0d      	ldr	r5, [pc, #52]	@ (8010188 <__libc_init_array+0x38>)
 8010154:	4c0d      	ldr	r4, [pc, #52]	@ (801018c <__libc_init_array+0x3c>)
 8010156:	1b64      	subs	r4, r4, r5
 8010158:	10a4      	asrs	r4, r4, #2
 801015a:	2600      	movs	r6, #0
 801015c:	42a6      	cmp	r6, r4
 801015e:	d109      	bne.n	8010174 <__libc_init_array+0x24>
 8010160:	4d0b      	ldr	r5, [pc, #44]	@ (8010190 <__libc_init_array+0x40>)
 8010162:	4c0c      	ldr	r4, [pc, #48]	@ (8010194 <__libc_init_array+0x44>)
 8010164:	f000 f818 	bl	8010198 <_init>
 8010168:	1b64      	subs	r4, r4, r5
 801016a:	10a4      	asrs	r4, r4, #2
 801016c:	2600      	movs	r6, #0
 801016e:	42a6      	cmp	r6, r4
 8010170:	d105      	bne.n	801017e <__libc_init_array+0x2e>
 8010172:	bd70      	pop	{r4, r5, r6, pc}
 8010174:	f855 3b04 	ldr.w	r3, [r5], #4
 8010178:	4798      	blx	r3
 801017a:	3601      	adds	r6, #1
 801017c:	e7ee      	b.n	801015c <__libc_init_array+0xc>
 801017e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010182:	4798      	blx	r3
 8010184:	3601      	adds	r6, #1
 8010186:	e7f2      	b.n	801016e <__libc_init_array+0x1e>
 8010188:	08010268 	.word	0x08010268
 801018c:	08010268 	.word	0x08010268
 8010190:	08010268 	.word	0x08010268
 8010194:	0801026c 	.word	0x0801026c

08010198 <_init>:
 8010198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019a:	bf00      	nop
 801019c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801019e:	bc08      	pop	{r3}
 80101a0:	469e      	mov	lr, r3
 80101a2:	4770      	bx	lr

080101a4 <_fini>:
 80101a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a6:	bf00      	nop
 80101a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101aa:	bc08      	pop	{r3}
 80101ac:	469e      	mov	lr, r3
 80101ae:	4770      	bx	lr
